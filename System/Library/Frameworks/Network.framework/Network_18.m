void sub_1839C70B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;

  _Block_object_dispose((const void *)(v4 - 208), 8);
  _Unwind_Resume(a1);
}

uint64_t nw_path_create_bridged_flow_director(void *a1, _BYTE *a2)
{
  id v3;
  void *v4;
  uint64_t globals_for_path;
  os_unfair_lock_s *v6;
  id v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  id v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  double v23;
  int v24;
  id v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t Bridge_delayInitStub;
  double v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  os_log_type_t v41;
  os_log_type_t v42;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  void *v48;
  os_log_type_t v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  char *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  os_log_type_t v56;
  os_log_type_t v57;
  char v58;
  os_log_type_t v59;
  os_log_type_t type[4];
  const char *v61;
  __int16 v62;
  int v63;
  __int16 v64;
  char *v65;
  uint8_t buf[4];
  const char *v67;
  uint64_t v68;
  char *v69;
  int v70;
  unsigned int v71;
  _BYTE v72[28];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  int v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    globals_for_path = nw_context_get_globals_for_path(v3);
    v6 = (os_unfair_lock_s *)(globals_for_path + 124);
    os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
    v7 = v4;
    if (globals_for_path)
    {
      if (*(_QWORD *)(globals_for_path + 112))
      {
        if (a2)
          *a2 = 0;
        v9 = 1;
        goto LABEL_74;
      }
      gotLoadHelper_x8__NEFlowDirectorCreateBridge(v8);
      if (!*(_QWORD *)(v10 + 1664))
      {
LABEL_73:
        v9 = 0;
LABEL_74:

        os_unfair_lock_unlock(v6);
        goto LABEL_75;
      }
      v11 = socket(32, 2, 2);
      v12 = v11;
      if ((v11 & 0x80000000) == 0)
      {
        v71 = 0;
        *(_QWORD *)&v72[20] = 0;
        v77 = 0;
        v75 = 0u;
        v76 = 0u;
        v73 = 0u;
        v74 = 0u;
        strcpy(v72, "com.apple.flow-divert");
        if (ioctl(v11, 0xC0644E03uLL, &v71))
        {
          v13 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v14 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          v67 = "nw_path_open_in_process_flow_divert_socket";
          LOWORD(v68) = 1024;
          *(_DWORD *)((char *)&v68 + 2) = v13;
          v15 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v59 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v15, type, &v59))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v16 = (id)gLogObj;
              v17 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                v67 = "nw_path_open_in_process_flow_divert_socket";
                LOWORD(v68) = 1024;
                *(_DWORD *)((char *)&v68 + 2) = v13;
                _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s ioctl(CTLIOCGINFO) failed %{darwin.errno}d", buf, 0x12u);
              }
            }
            else if (v59)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v16 = (id)gLogObj;
              v30 = type[0];
              v31 = os_log_type_enabled(v16, type[0]);
              if (backtrace_string)
              {
                if (v31)
                {
                  *(_DWORD *)buf = 136446722;
                  v67 = "nw_path_open_in_process_flow_divert_socket";
                  LOWORD(v68) = 1024;
                  *(_DWORD *)((char *)&v68 + 2) = v13;
                  HIWORD(v68) = 2082;
                  v69 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s ioctl(CTLIOCGINFO) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                }

                free(backtrace_string);
                if (!v15)
                  goto LABEL_57;
                goto LABEL_56;
              }
              if (v31)
              {
                *(_DWORD *)buf = 136446466;
                v67 = "nw_path_open_in_process_flow_divert_socket";
                LOWORD(v68) = 1024;
                *(_DWORD *)((char *)&v68 + 2) = v13;
                _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s ioctl(CTLIOCGINFO) failed %{darwin.errno}d, no backtrace", buf, 0x12u);
              }
            }
            else
            {
              __nwlog_obj();
              v16 = objc_claimAutoreleasedReturnValue();
              v40 = type[0];
              if (os_log_type_enabled(v16, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                v67 = "nw_path_open_in_process_flow_divert_socket";
                LOWORD(v68) = 1024;
                *(_DWORD *)((char *)&v68 + 2) = v13;
                _os_log_impl(&dword_182FBE000, v16, v40, "%{public}s ioctl(CTLIOCGINFO) failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
              }
            }

          }
          if (!v15)
          {
LABEL_57:
            close(v12);
            goto LABEL_73;
          }
LABEL_56:
          free(v15);
          goto LABEL_57;
        }
        v69 = 0;
        v68 = 0;
        v70 = 0;
        *(_DWORD *)buf = 139296;
        v67 = (const char *)(v71 | 0xFFFFFFF00000000);
        if (!connect(v12, (const sockaddr *)buf, 0x20u))
        {
          Bridge_delayInitStub = NEFlowDirectorCreateBridge_delayInitStub(v23);
          *(_QWORD *)(globals_for_path + 112) = Bridge_delayInitStub;
          if (Bridge_delayInitStub)
          {
            NEFlowDirectorStart_delayInitStub(v36);
            v9 = 1;
            if (a2)
              *a2 = 1;
            goto LABEL_74;
          }
          close(v12);
          goto LABEL_73;
        }
        v24 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        *(_DWORD *)type = 136446466;
        v61 = "nw_path_open_in_process_flow_divert_socket";
        v62 = 1024;
        v63 = v24;
        v26 = (char *)_os_log_send_and_compose_impl();

        v59 = OS_LOG_TYPE_ERROR;
        v58 = 0;
        if (__nwlog_fault(v26, &v59, &v58))
        {
          if (v59 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v27 = objc_claimAutoreleasedReturnValue();
            v28 = v59;
            if (os_log_type_enabled(v27, v59))
            {
              *(_DWORD *)type = 136446466;
              v61 = "nw_path_open_in_process_flow_divert_socket";
              v62 = 1024;
              v63 = v24;
              _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s connect failed on kernel control socket %{darwin.errno}d", (uint8_t *)type, 0x12u);
            }
          }
          else if (v58)
          {
            v37 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v27 = objc_claimAutoreleasedReturnValue();
            v38 = v59;
            v39 = os_log_type_enabled(v27, v59);
            if (v37)
            {
              if (v39)
              {
                *(_DWORD *)type = 136446722;
                v61 = "nw_path_open_in_process_flow_divert_socket";
                v62 = 1024;
                v63 = v24;
                v64 = 2082;
                v65 = v37;
                _os_log_impl(&dword_182FBE000, v27, v38, "%{public}s connect failed on kernel control socket %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)type, 0x1Cu);
              }

              free(v37);
              goto LABEL_70;
            }
            if (v39)
            {
              *(_DWORD *)type = 136446466;
              v61 = "nw_path_open_in_process_flow_divert_socket";
              v62 = 1024;
              v63 = v24;
              _os_log_impl(&dword_182FBE000, v27, v38, "%{public}s connect failed on kernel control socket %{darwin.errno}d, no backtrace", (uint8_t *)type, 0x12u);
            }
          }
          else
          {
            __nwlog_obj();
            v27 = objc_claimAutoreleasedReturnValue();
            v42 = v59;
            if (os_log_type_enabled(v27, v59))
            {
              *(_DWORD *)type = 136446466;
              v61 = "nw_path_open_in_process_flow_divert_socket";
              v62 = 1024;
              v63 = v24;
              _os_log_impl(&dword_182FBE000, v27, v42, "%{public}s connect failed on kernel control socket %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)type, 0x12u);
            }
          }

        }
LABEL_70:
        if (v26)
          free(v26);
        close(v12);
        goto LABEL_73;
      }
      v18 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v71 = 136446466;
      *(_QWORD *)v72 = "nw_path_open_in_process_flow_divert_socket";
      *(_WORD *)&v72[8] = 1024;
      *(_DWORD *)&v72[10] = v18;
      v20 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v20, buf, type))
        goto LABEL_61;
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v22 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          v71 = 136446466;
          *(_QWORD *)v72 = "nw_path_open_in_process_flow_divert_socket";
          *(_WORD *)&v72[8] = 1024;
          *(_DWORD *)&v72[10] = v18;
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s Cannot create kernel control socket %{darwin.errno}d", (uint8_t *)&v71, 0x12u);
        }
      }
      else if (type[0])
      {
        v32 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        v33 = buf[0];
        v34 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
        if (v32)
        {
          if (v34)
          {
            v71 = 136446722;
            *(_QWORD *)v72 = "nw_path_open_in_process_flow_divert_socket";
            *(_WORD *)&v72[8] = 1024;
            *(_DWORD *)&v72[10] = v18;
            *(_WORD *)&v72[14] = 2082;
            *(_QWORD *)&v72[16] = v32;
            _os_log_impl(&dword_182FBE000, v21, v33, "%{public}s Cannot create kernel control socket %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)&v71, 0x1Cu);
          }

          free(v32);
          if (!v20)
            goto LABEL_73;
          goto LABEL_62;
        }
        if (v34)
        {
          v71 = 136446466;
          *(_QWORD *)v72 = "nw_path_open_in_process_flow_divert_socket";
          *(_WORD *)&v72[8] = 1024;
          *(_DWORD *)&v72[10] = v18;
          _os_log_impl(&dword_182FBE000, v21, v33, "%{public}s Cannot create kernel control socket %{darwin.errno}d, no backtrace", (uint8_t *)&v71, 0x12u);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v41 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          v71 = 136446466;
          *(_QWORD *)v72 = "nw_path_open_in_process_flow_divert_socket";
          *(_WORD *)&v72[8] = 1024;
          *(_DWORD *)&v72[10] = v18;
          _os_log_impl(&dword_182FBE000, v21, v41, "%{public}s Cannot create kernel control socket %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)&v71, 0x12u);
        }
      }
      goto LABEL_60;
    }
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    v71 = 136446210;
    *(_QWORD *)v72 = "nw_path_create_bridged_flow_director_locked";
    v20 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v20, buf, type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v49 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          v71 = 136446210;
          *(_QWORD *)v72 = "nw_path_create_bridged_flow_director_locked";
          _os_log_impl(&dword_182FBE000, v21, v49, "%{public}s called with null globals", (uint8_t *)&v71, 0xCu);
        }
LABEL_60:

        goto LABEL_61;
      }
      if (type[0] == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v57 = buf[0];
        if (os_log_type_enabled(v21, (os_log_type_t)buf[0]))
        {
          v71 = 136446210;
          *(_QWORD *)v72 = "nw_path_create_bridged_flow_director_locked";
          _os_log_impl(&dword_182FBE000, v21, v57, "%{public}s called with null globals, backtrace limit exceeded", (uint8_t *)&v71, 0xCu);
        }
        goto LABEL_60;
      }
      v53 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v54 = buf[0];
      v55 = os_log_type_enabled(v21, (os_log_type_t)buf[0]);
      if (!v53)
      {
        if (v55)
        {
          v71 = 136446210;
          *(_QWORD *)v72 = "nw_path_create_bridged_flow_director_locked";
          _os_log_impl(&dword_182FBE000, v21, v54, "%{public}s called with null globals, no backtrace", (uint8_t *)&v71, 0xCu);
        }
        goto LABEL_60;
      }
      if (v55)
      {
        v71 = 136446466;
        *(_QWORD *)v72 = "nw_path_create_bridged_flow_director_locked";
        *(_WORD *)&v72[8] = 2082;
        *(_QWORD *)&v72[10] = v53;
        _os_log_impl(&dword_182FBE000, v21, v54, "%{public}s called with null globals, dumping backtrace:%{public}s", (uint8_t *)&v71, 0x16u);
      }

      free(v53);
    }
LABEL_61:
    if (!v20)
      goto LABEL_73;
LABEL_62:
    free(v20);
    goto LABEL_73;
  }
  __nwlog_obj();
  v44 = (void *)objc_claimAutoreleasedReturnValue();
  v71 = 136446210;
  *(_QWORD *)v72 = "nw_path_create_bridged_flow_director";
  v45 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  type[0] = OS_LOG_TYPE_DEFAULT;
  if (__nwlog_fault(v45, buf, type))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v47 = buf[0];
      if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
      {
        v71 = 136446210;
        *(_QWORD *)v72 = "nw_path_create_bridged_flow_director";
        _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null context", (uint8_t *)&v71, 0xCu);
      }
    }
    else if (type[0])
    {
      v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v51 = buf[0];
      v52 = os_log_type_enabled(v46, (os_log_type_t)buf[0]);
      if (v50)
      {
        if (v52)
        {
          v71 = 136446466;
          *(_QWORD *)v72 = "nw_path_create_bridged_flow_director";
          *(_WORD *)&v72[8] = 2082;
          *(_QWORD *)&v72[10] = v50;
          _os_log_impl(&dword_182FBE000, v46, v51, "%{public}s called with null context, dumping backtrace:%{public}s", (uint8_t *)&v71, 0x16u);
        }

        free(v50);
        goto LABEL_105;
      }
      if (v52)
      {
        v71 = 136446210;
        *(_QWORD *)v72 = "nw_path_create_bridged_flow_director";
        _os_log_impl(&dword_182FBE000, v46, v51, "%{public}s called with null context, no backtrace", (uint8_t *)&v71, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v56 = buf[0];
      if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
      {
        v71 = 136446210;
        *(_QWORD *)v72 = "nw_path_create_bridged_flow_director";
        _os_log_impl(&dword_182FBE000, v46, v56, "%{public}s called with null context, backtrace limit exceeded", (uint8_t *)&v71, 0xCu);
      }
    }

  }
LABEL_105:
  if (v45)
    free(v45);
  v9 = 0;
LABEL_75:

  return v9;
}

void sub_1839C7F0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_may_span_multiple_interfaces(void *a1)
{
  nw_endpoint_t *v1;
  nw_endpoint_t *v2;
  nw_endpoint_t v3;
  NSObject *v4;
  char isa_high;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_path_may_span_multiple_interfaces";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_may_span_multiple_interfaces";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_path_may_span_multiple_interfaces";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_may_span_multiple_interfaces";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_may_span_multiple_interfaces";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_24:
    if (v8)
      free(v8);
    goto LABEL_26;
  }
  if ((*((_BYTE *)v1 + 475) & 1) == 0)
  {
    v3 = v1[3];
    if (!v3
      || (v4 = v3, isa_high = HIBYTE(v4[28].isa), v4, (isa_high & 1) == 0)
      && nw_endpoint_get_type(v2[3]) != nw_endpoint_type_bonjour_service
      && nw_endpoint_get_type(v2[3]) != (nw_endpoint_type_url|nw_endpoint_type_host))
    {
LABEL_26:
      v6 = 0;
      goto LABEL_27;
    }
  }
  v6 = 1;
LABEL_27:

  return v6;
}

void sub_1839C8200(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  unsigned int value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;

  v4 = a3;
  value = xpc_uint64_get_value(v4);
  v11 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v11 + 96) && *(_DWORD *)(a1 + 48) == value || *(_QWORD *)(v11 + 104) && *(_DWORD *)(a1 + 52) == value)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    if (*(_BYTE *)(a1 + 56))
    {
      if (value > 4)
        v12 = "unknown";
      else
        v12 = off_1E14AD0B0[value];
      nw_path_set_reason(*(void **)(a1 + 32), 6, "Interface type '%s' is prohibited by parameters", v6, v7, v8, v9, v10, (char)v12);
    }
    v13 = 0;
  }
  else
  {
    v13 = 1;
  }

  return v13;
}

void sub_1839C82D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  int value;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;

  v4 = a3;
  value = xpc_uint64_get_value(v4);
  if (*(_DWORD *)(a1 + 48) == value || *(_DWORD *)(a1 + 52) == value)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    if (!*(_BYTE *)(a1 + 56))
    {
LABEL_18:
      v12 = 0;
      goto LABEL_19;
    }
    if (value <= 1001)
    {
      if (!value)
      {
        v11 = "other";
        goto LABEL_17;
      }
      if (value == 1001)
      {
        v11 = "wifi_infrastructure";
        goto LABEL_17;
      }
    }
    else
    {
      switch(value)
      {
        case 1002:
          v11 = "wifi_awdl";
          goto LABEL_17;
        case 4001:
          v11 = "coprocessor";
          goto LABEL_17;
        case 5001:
          v11 = "companion";
LABEL_17:
          nw_path_set_reason(*(void **)(a1 + 32), 6, "Interface subtype '%s' is prohibited by parameters", v6, v7, v8, v9, v10, (char)v11);
          goto LABEL_18;
      }
    }
    v11 = "unknown";
    goto LABEL_17;
  }
  v12 = 1;
LABEL_19:

  return v12;
}

void sub_1839C83DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  NWConcrete_nw_interface *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = nw_interface_create_from_dictionary(a3);
  if (v4
    && (nw_interface_shallow_compare(*(void **)(*(_QWORD *)(a1 + 32) + 96), v4)
     || nw_interface_shallow_compare(*(void **)(*(_QWORD *)(a1 + 32) + 104), v4)))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    if (*(_BYTE *)(a1 + 48))
      nw_path_set_reason(*(void **)(a1 + 32), 8, "Interface %s[%u] is prohibited by parameters", v5, v6, v7, v8, v9, (_BYTE)v4 + 104);
    v10 = 0;
  }
  else
  {
    v10 = 1;
  }

  return v10;
}

void sub_1839C8490(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_is_roaming(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _BOOL8 v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD applier[5];
  char v15;
  os_log_type_t type;
  _BYTE buf[24];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((*((_BYTE *)v1 + 475) & 0x20) != 0)
    {
      v4 = 1;
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v18 = 0;
      v3 = (void *)*((_QWORD *)v1 + 28);
      if (v3)
      {
        applier[0] = MEMORY[0x1E0C809B0];
        applier[1] = 3221225472;
        applier[2] = __nw_path_is_roaming_block_invoke;
        applier[3] = &unk_1E14AAE28;
        applier[4] = buf;
        xpc_dictionary_apply(v3, applier);
        v4 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
      }
      else
      {
        v4 = 0;
      }
      _Block_object_dispose(buf, 8);
    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_is_roaming";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_is_roaming";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_is_roaming";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_is_roaming";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_is_roaming";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_8:

  return v4;
}

void sub_1839C87B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_4(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const unsigned __int8 *bytes;
  void *v6;
  void *v7;
  void *v8;
  const unsigned __int8 *data;
  const unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *backtrace_string;
  _BOOL4 v23;
  size_t *v25;
  char *v26;
  char v27;
  os_log_type_t type;
  char out[48];
  size_t length[6];

  length[5] = *MEMORY[0x1E0C80C00];
  v4 = a3;
  memset(out, 0, 37);
  bytes = xpc_uuid_get_bytes(v4);
  uuid_unparse(bytes, out);
  v6 = *(void **)(*(_QWORD *)(a1 + 32) + 224);
  if (v6)
  {
    xpc_dictionary_get_value(v6, out);
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    v8 = v7;
    if (v7)
    {
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      if (!*(_BYTE *)(a1 + 48))
      {
LABEL_30:
        v17 = 0;
        goto LABEL_31;
      }
      v26 = 0;
      length[0] = 0;
      data = (const unsigned __int8 *)xpc_dictionary_get_data(v7, "data", length);
      if (data)
      {
        if (length[0] >= 0xD8)
        {
          v10 = data;
          if (length[0] == *((unsigned int *)data + 53) + 216)
          {
            memset(length, 0, 37);
            uuid_unparse_upper(data, (char *)length);
            asprintf(&v26, "Network Agent [domain: %s, type: %s, description: %s, uuid: %s, flags: %x]", (const char *)v10 + 16, (const char *)v10 + 48, (const char *)v10 + 80, (const char *)length, *((_DWORD *)v10 + 52));
            v16 = *(void **)(a1 + 32);
            if (v26)
            {
              nw_path_set_reason(v16, 10, "%s is prohibited by parameters", v11, v12, v13, v14, v15, (char)v26);
              if (v26)
                free(v26);
              goto LABEL_30;
            }
            goto LABEL_29;
          }
        }
      }
      __nwlog_obj();
      LODWORD(length[0]) = 136446210;
      *(size_t *)((char *)length + 4) = (size_t)"nw_network_agent_copy_full_description";
      v25 = length;
      v18 = (char *)_os_log_send_and_compose_impl();
      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (__nwlog_fault(v18, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v19 = __nwlog_obj();
          v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_network_agent_copy_full_description";
            v21 = "%{public}s called with null agent";
LABEL_25:
            _os_log_impl(&dword_182FBE000, v19, v20, v21, (uint8_t *)length, 0xCu);
          }
        }
        else if (v27)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          v19 = __nwlog_obj();
          v20 = type;
          v23 = os_log_type_enabled(v19, type);
          if (backtrace_string)
          {
            if (v23)
            {
              LODWORD(length[0]) = 136446466;
              *(size_t *)((char *)length + 4) = (size_t)"nw_network_agent_copy_full_description";
              WORD2(length[1]) = 2082;
              *(size_t *)((char *)&length[1] + 6) = (size_t)backtrace_string;
              _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null agent, dumping backtrace:%{public}s", (uint8_t *)length, 0x16u);
            }
            free(backtrace_string);
            goto LABEL_26;
          }
          if (v23)
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_network_agent_copy_full_description";
            v21 = "%{public}s called with null agent, no backtrace";
            goto LABEL_25;
          }
        }
        else
        {
          v19 = __nwlog_obj();
          v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            LODWORD(length[0]) = 136446210;
            *(size_t *)((char *)length + 4) = (size_t)"nw_network_agent_copy_full_description";
            v21 = "%{public}s called with null agent, backtrace limit exceeded";
            goto LABEL_25;
          }
        }
      }
LABEL_26:
      if (v18)
        free(v18);
      v16 = *(void **)(a1 + 32);
LABEL_29:
      nw_path_set_reason(v16, 10, "Unknown network agent is prohibited by parameters", v11, v12, v13, v14, v15, (char)v25);
      goto LABEL_30;
    }
  }
  else
  {
    v8 = 0;
  }
  v17 = 1;
LABEL_31:

  return v17;
}

void sub_1839C8B38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_5(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const unsigned __int8 *bytes;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _BOOL4 v13;
  uint64_t v14;
  char out[40];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  memset(out, 0, 37);
  bytes = xpc_uuid_get_bytes(v4);
  uuid_unparse(bytes, out);
  v11 = *(void **)(*(_QWORD *)(a1 + 32) + 224);
  if (!v11
    || (xpc_dictionary_get_value(v11, out),
        v12 = (void *)objc_claimAutoreleasedReturnValue(),
        v13 = v12 == 0,
        v12,
        v13))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    if (*(_BYTE *)(a1 + 48))
      nw_path_set_reason(*(void **)(a1 + 32), 11, "Missing network agent uuid:%s required by parameters", v6, v7, v8, v9, v10, (char)out);
    v14 = 0;
  }
  else
  {
    v14 = 1;
  }

  return v14;
}

void sub_1839C8C44(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_6(uint64_t a1, size_t a2, void *a3)
{
  id v5;
  const char *string_ptr;
  const char *string;
  _QWORD *v8;
  void *v9;
  uint64_t v10;
  _QWORD applier[4];
  _QWORD *v13;
  uint64_t *v14;
  const char *v15;
  const char *v16;
  char v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;

  v5 = a3;
  string_ptr = xpc_string_get_string_ptr(v5);
  string = xpc_array_get_string(*(xpc_object_t *)(a1 + 32), a2);
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  v8 = *(_QWORD **)(a1 + 40);
  v9 = (void *)v8[28];
  if (!v9)
    goto LABEL_4;
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_7;
  applier[3] = &unk_1E14A90D8;
  v15 = string_ptr;
  v16 = string;
  v14 = &v18;
  v17 = *(_BYTE *)(a1 + 56);
  v13 = v8;
  xpc_dictionary_apply(v9, applier);

  if (*((_BYTE *)v19 + 24))
  {
    v10 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
  }
  else
  {
LABEL_4:
    v10 = 1;
  }
  _Block_object_dispose(&v18, 8);

  return v10;
}

void sub_1839C8D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  uint64_t v15;

  _Block_object_dispose((const void *)(v15 - 64), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_8(uint64_t a1, size_t a2, void *a3)
{
  id v5;
  const char *string_ptr;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *string;
  void *v13;
  uint64_t v14;
  _QWORD applier[7];
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  char v20;

  v5 = a3;
  string_ptr = xpc_string_get_string_ptr(v5);
  string = xpc_array_get_string(*(xpc_object_t *)(a1 + 32), a2);
  v17 = 0;
  v18 = &v17;
  v19 = 0x2020000000;
  v20 = 0;
  v13 = *(void **)(*(_QWORD *)(a1 + 40) + 224);
  if (!v13)
    goto LABEL_4;
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_9;
  applier[3] = &unk_1E14A9128;
  applier[5] = string_ptr;
  applier[6] = string;
  applier[4] = &v17;
  xpc_dictionary_apply(v13, applier);
  if (*((_BYTE *)v18 + 24))
  {
    v14 = 1;
  }
  else
  {
LABEL_4:
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 0;
    if (*(_BYTE *)(a1 + 56))
      nw_path_set_reason(*(void **)(a1 + 40), 11, "Missing network agent domain:%s, type:%s required by parameters", v7, v8, v9, v10, v11, (char)string_ptr);
    v14 = 0;
  }
  _Block_object_dispose(&v17, 8);

  return v14;
}

void sub_1839C8E94(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 64), 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_9(_QWORD *a1, int a2, xpc_object_t xdict)
{
  const char *data;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t result;
  size_t length;

  length = 0;
  if (!xdict)
    return 1;
  data = (const char *)xpc_dictionary_get_data(xdict, "data", &length);
  if (!data)
    return 1;
  if (length < 0xD8)
    return 1;
  v5 = data;
  if (length != *((unsigned int *)data + 53) + 216)
    return 1;
  v6 = (const char *)a1[5];
  if (v6)
  {
    if (*v6 && strncmp(v6, v5 + 16, 0x20uLL))
      return 1;
  }
  v7 = (const char *)a1[6];
  if (v7)
  {
    if (*v7 && strncmp(v7, v5 + 48, 0x20uLL))
      return 1;
  }
  result = 0;
  *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  return result;
}

uint64_t ___ZL29nw_path_allowed_by_parametersP18NWConcrete_nw_pathb_block_invoke_7(uint64_t a1, int a2, xpc_object_t xdict)
{
  const char *data;
  const char *v5;
  const char *v6;
  const char *v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  char *v15;
  size_t length[2];
  _BYTE v17[21];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  length[0] = 0;
  if (!xdict)
    return 1;
  data = (const char *)xpc_dictionary_get_data(xdict, "data", length);
  if (!data)
    return 1;
  if (length[0] < 0xD8)
    return 1;
  v5 = data;
  if (length[0] != *((unsigned int *)data + 53) + 216)
    return 1;
  v6 = *(const char **)(a1 + 48);
  if (v6)
  {
    if (*v6 && strncmp(v6, v5 + 16, 0x20uLL))
      return 1;
  }
  v7 = *(const char **)(a1 + 56);
  if (v7)
  {
    if (*v7 && strncmp(v7, v5 + 48, 0x20uLL))
      return 1;
  }
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  if (*(_BYTE *)(a1 + 64))
  {
    v15 = 0;
    *(_OWORD *)length = 0u;
    memset(v17, 0, sizeof(v17));
    uuid_unparse_upper((const unsigned __int8 *)v5, (char *)length);
    asprintf(&v15, "Network Agent [domain: %s, type: %s, description: %s, uuid: %s, flags: %x]", v5 + 16, v5 + 48, v5 + 80, (const char *)length, *((_DWORD *)v5 + 52));
    v14 = *(void **)(a1 + 32);
    if (v15)
    {
      nw_path_set_reason(v14, 10, "%s is prohibited by parameters domain:%s, type:%s", v9, v10, v11, v12, v13, (char)v15);
      if (v15)
        free(v15);
    }
    else
    {
      nw_path_set_reason(v14, 10, "Unknown network agent is prohibited by parameters domain:%s, type:%s", v9, v10, v11, v12, v13, *(_QWORD *)(a1 + 48));
    }
  }
  return 0;
}

uint64_t __nw_path_is_roaming_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  const char *data;
  const char *v5;
  uint64_t v6;
  uint64_t result;
  int v8;
  size_t length;

  length = 0;
  if (!xdict)
    return 1;
  data = (const char *)xpc_dictionary_get_data(xdict, "data", &length);
  if (!data)
    return 1;
  if (length < 0xD8)
    return 1;
  v5 = data;
  v6 = *((unsigned int *)data + 53);
  if (length != v6 + 216 || (data[208] & 2) == 0)
    return 1;
  v8 = strncmp(data + 16, "Cellular", 0x20uLL);
  result = 1;
  if (!v8 && v6 >= 4 && !v5[217] && v5[216] == 5)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return 0;
  }
  return result;
}

void ___ZL36nw_path_is_ultra_constrained_allowedv_block_invoke()
{
  void *v0;
  void *v1;
  Class Class;
  _BOOL4 value;
  xpc_object_t xBOOL;

  v0 = (void *)nw_utilities_copy_local_entitlement_value("com.apple.private.network.ultraconstrained");
  v1 = v0;
  if (v0)
  {
    xBOOL = v0;
    Class = object_getClass(v0);
    v1 = xBOOL;
    if (Class == (Class)MEMORY[0x1E0C812D0])
    {
      value = xpc_BOOL_get_value(xBOOL);
      v1 = xBOOL;
      if (value)
        nw_path_is_ultra_constrained_allowed(void)::is_allowed = 1;
    }
  }

}

void sub_1839C9258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL49nw_path_copy_dictionary_for_agent_with_generationPU24objcproto13OS_nw_context8NSObjectPhjPU8__strongPU29objcproto18OS_nw_proxy_configS__block_invoke(uint64_t a1, const char *a2)
{
  uint64_t uint64;

  uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), a2);
  if ((unint64_t)nw_delta_nanos(uint64, *(_QWORD *)(a1 + 48)) >= 0x77359401)
    xpc_array_set_string(*(xpc_object_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL, a2);
  return 1;
}

uint64_t ___ZL49nw_path_copy_dictionary_for_agent_with_generationPU24objcproto13OS_nw_context8NSObjectPhjPU8__strongPU29objcproto18OS_nw_proxy_configS__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;

  v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (string_ptr)
  {
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 32), string_ptr, 0);
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), string_ptr, 0);
    nw_dictionary_set_value(*(_QWORD *)(a1 + 48), string_ptr, 0);
  }

  return 1;
}

void sub_1839C9330(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_path_copy_interface_with_generation_block_invoke(uint64_t a1, const char *a2)
{
  uint64_t uint64;

  uint64 = xpc_dictionary_get_uint64(*(xpc_object_t *)(a1 + 32), a2);
  if ((unint64_t)nw_delta_nanos(uint64, *(_QWORD *)(a1 + 48)) >= 0x77359401)
    xpc_array_set_string(*(xpc_object_t *)(a1 + 40), 0xFFFFFFFFFFFFFFFFLL, a2);
  return 1;
}

uint64_t __nw_path_copy_interface_with_generation_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;

  v4 = a3;
  string_ptr = xpc_string_get_string_ptr(v4);
  if (string_ptr)
  {
    nw_dictionary_set_value(*(_QWORD *)(a1 + 32), string_ptr, 0);
    xpc_dictionary_set_value(*(xpc_object_t *)(a1 + 40), string_ptr, 0);
  }

  return 1;
}

void sub_1839C93F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_group(void *a1, void *a2)
{
  id v4;
  id v5;
  NWConcrete_nw_path_evaluator *v6;
  NWConcrete_nw_path_evaluator *v7;
  nw_parameters_t v8;
  id v9;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  NWConcrete_nw_path_evaluator *v14;
  id v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  if (v4)
  {
    v6 = objc_alloc_init(NWConcrete_nw_path_evaluator);
    v7 = v6;
    if (v6)
    {
      objc_storeStrong((id *)v6 + 3, a1);
      if (v5)
        v8 = (nw_parameters_t)v5;
      else
        v8 = nw_parameters_create();
      v13 = (void *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = v8;

      if ((nw_path_evaluator_evaluate(v7, 0) & 1) != 0)
      {
        v14 = v7;
LABEL_44:

        goto LABEL_45;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_path_create_evaluator_for_group";
      v10 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v33 = 0;
      if (!__nwlog_fault((const char *)v10, &type, &v33))
      {
LABEL_41:
        if (!v10)
        {
LABEL_43:
          v14 = 0;
          goto LABEL_44;
        }
LABEL_42:
        free(v10);
        goto LABEL_43;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
        }
LABEL_40:

        goto LABEL_41;
      }
      if (!v33)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s nw_path_evaluator_evaluate failed, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_40;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v20 = type;
      v21 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s nw_path_evaluator_evaluate failed, no backtrace", buf, 0xCu);
        }
        goto LABEL_40;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_path_create_evaluator_for_group";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s nw_path_evaluator_evaluate failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v36 = "nw_path_create_evaluator_for_group";
      v10 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v33 = 0;
      if (!__nwlog_fault((const char *)v10, &type, &v33))
        goto LABEL_41;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
        }
        goto LABEL_40;
      }
      if (!v33)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_40;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_group";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
        }
        goto LABEL_40;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_path_create_evaluator_for_group";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    if (!v10)
      goto LABEL_43;
    goto LABEL_42;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v36 = "nw_path_create_evaluator_for_group";
  v26 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v33 = 0;
  if (__nwlog_fault(v26, &type, &v33))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_path_create_evaluator_for_group";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null group_descriptor", buf, 0xCu);
      }
    }
    else if (v33)
    {
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v27, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_path_create_evaluator_for_group";
          v37 = 2082;
          v38 = v29;
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null group_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        goto LABEL_62;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_path_create_evaluator_for_group";
        _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null group_descriptor, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_path_create_evaluator_for_group";
        _os_log_impl(&dword_182FBE000, v27, v32, "%{public}s called with null group_descriptor, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_62:
  if (v26)
    free(v26);
  v14 = 0;
LABEL_45:

  return v14;
}

void sub_1839C9BC0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_browse(void *a1, void *a2)
{
  id v4;
  id v5;
  NWConcrete_nw_path_evaluator *v6;
  NWConcrete_nw_path_evaluator *v7;
  nw_parameters_t v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  void *v27;
  os_log_type_t v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  if (!v4)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_path_create_evaluator_for_browse";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v10, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl(&dword_182FBE000, v11, v28, "%{public}s called with null browse_descriptor", buf, 0xCu);
        }
LABEL_37:

        goto LABEL_38;
      }
      if (!v33)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl(&dword_182FBE000, v11, v32, "%{public}s called with null browse_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl(&dword_182FBE000, v11, v30, "%{public}s called with null browse_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        v36 = "nw_path_create_evaluator_for_browse";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v30, "%{public}s called with null browse_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_38:
    if (!v10)
    {
LABEL_46:
      v7 = 0;
      goto LABEL_47;
    }
LABEL_39:
    free(v10);
    goto LABEL_46;
  }
  v6 = objc_alloc_init(NWConcrete_nw_path_evaluator);
  v7 = v6;
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v36 = "nw_path_create_evaluator_for_browse";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v10, &type, &v33))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_path_create_evaluator_for_browse";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
      }
    }
    else if (v33)
    {
      v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v19 = type;
      v20 = os_log_type_enabled(v11, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_path_create_evaluator_for_browse";
          v37 = 2082;
          v38 = v18;
          _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
        if (!v10)
          goto LABEL_46;
        goto LABEL_39;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_path_create_evaluator_for_browse";
        _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_path_create_evaluator_for_browse";
        _os_log_impl(&dword_182FBE000, v11, v24, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_37;
  }
  objc_storeStrong((id *)v6 + 4, a1);
  if (v5)
    v8 = (nw_parameters_t)v5;
  else
    v8 = nw_parameters_create();
  v13 = (void *)*((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v8;

  if ((nw_path_evaluator_evaluate(v7, 0) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v36 = "nw_path_create_evaluator_for_browse";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v15, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
        }
      }
      else if (v33)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v16, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_path_create_evaluator_for_browse";
            v37 = 2082;
            v38 = v21;
            _os_log_impl(&dword_182FBE000, v16, v22, "%{public}s nw_path_evaluator_evaluate failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          if (!v15)
            goto LABEL_45;
          goto LABEL_44;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl(&dword_182FBE000, v16, v22, "%{public}s nw_path_evaluator_evaluate failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_path_create_evaluator_for_browse";
          _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s nw_path_evaluator_evaluate failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v15)
    {
LABEL_45:

      goto LABEL_46;
    }
LABEL_44:
    free(v15);
    goto LABEL_45;
  }
LABEL_47:

  return v7;
}

void sub_1839CA39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_advertise(void *a1, void *a2)
{
  id v4;
  id v5;
  NWConcrete_nw_path_evaluator *v6;
  nw_parameters_t v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  NSObject *v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  void *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  if (!v4)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_create_evaluator_for_advertise";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v9, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_path_create_evaluator_for_advertise";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null advertise_descriptor", buf, 0xCu);
        }
LABEL_26:

        goto LABEL_27;
      }
      if (!v25)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_path_create_evaluator_for_advertise";
          _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null advertise_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_26;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_path_create_evaluator_for_advertise";
          _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null advertise_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_26;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_path_create_evaluator_for_advertise";
        v29 = 2082;
        v30 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null advertise_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_27:
    if (!v9)
    {
LABEL_29:
      v6 = 0;
      goto LABEL_30;
    }
LABEL_28:
    free(v9);
    goto LABEL_29;
  }
  v6 = objc_alloc_init(NWConcrete_nw_path_evaluator);
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_create_evaluator_for_advertise";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v9, &type, &v25))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create_evaluator_for_advertise";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
      }
    }
    else if (v25)
    {
      v14 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (v14)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_path_create_evaluator_for_advertise";
          v29 = 2082;
          v30 = v14;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v14);
        if (!v9)
          goto LABEL_29;
        goto LABEL_28;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create_evaluator_for_advertise";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v17 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create_evaluator_for_advertise";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_26;
  }
  if (v5)
    v7 = (nw_parameters_t)v5;
  else
    v7 = nw_parameters_create();
  v12 = (void *)*((_QWORD *)v6 + 1);
  *((_QWORD *)v6 + 1) = v7;

  objc_storeStrong((id *)v6 + 5, a1);
  if ((nw_path_evaluator_evaluate(v6, 0) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_path_create_evaluator_for_advertise";
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
    }

    goto LABEL_29;
  }
LABEL_30:

  return v6;
}

void sub_1839CA980(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_custom_ether(void *a1, __int16 a2)
{
  id v4;
  NWConcrete_nw_path_evaluator *v5;
  NWConcrete_nw_path_evaluator *v6;
  NSObject *v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  if (!v4)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_create_evaluator_for_custom_ether";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v9, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_path_create_evaluator_for_custom_ether";
          _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null parameters", buf, 0xCu);
        }
LABEL_23:

        goto LABEL_24;
      }
      if (!v23)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_path_create_evaluator_for_custom_ether";
          _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_23;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_path_create_evaluator_for_custom_ether";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_23;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_path_create_evaluator_for_custom_ether";
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_24:
    if (!v9)
    {
LABEL_26:
      v6 = 0;
      goto LABEL_27;
    }
LABEL_25:
    free(v9);
    goto LABEL_26;
  }
  v5 = objc_alloc_init(NWConcrete_nw_path_evaluator);
  v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_create_evaluator_for_custom_ether";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_create_evaluator_for_custom_ether";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v12 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (v12)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_path_create_evaluator_for_custom_ether";
          v27 = 2082;
          v28 = v12;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v12);
        if (!v9)
          goto LABEL_26;
        goto LABEL_25;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_create_evaluator_for_custom_ether";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_create_evaluator_for_custom_ether";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_23;
  }
  objc_storeStrong((id *)v5 + 1, a1);
  *((_WORD *)v6 + 52) = a2;
  if ((nw_path_evaluator_evaluate(v6, 0) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_create_evaluator_for_custom_ether";
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
    }

    goto LABEL_26;
  }
LABEL_27:

  return v6;
}

void sub_1839CAF38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_all_custom_ether_interfaces(void *a1)
{
  id v2;
  NWConcrete_nw_path_evaluator *v3;
  NWConcrete_nw_path_evaluator *v4;
  NSObject *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  if (!v2)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
          _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null parameters", buf, 0xCu);
        }
LABEL_23:

        goto LABEL_24;
      }
      if (!v21)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
          _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_23;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
          _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_23;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_24:
    if (!v7)
    {
LABEL_26:
      v4 = 0;
      goto LABEL_27;
    }
LABEL_25:
    free(v7);
    goto LABEL_26;
  }
  v3 = objc_alloc_init(NWConcrete_nw_path_evaluator);
  v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
      }
    }
    else if (v21)
    {
      v10 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (v10)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
          v25 = 2082;
          v26 = v10;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v10);
        if (!v7)
          goto LABEL_26;
        goto LABEL_25;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_23;
  }
  objc_storeStrong((id *)v3 + 1, a1);
  *((_BYTE *)v4 + 107) |= 0xAu;
  if ((nw_path_evaluator_evaluate(v4, 0) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_path_create_evaluator_for_all_custom_ether_interfaces";
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
    }

    goto LABEL_26;
  }
LABEL_27:

  return v4;
}

void sub_1839CB4F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_custom_ip(void *a1, char a2)
{
  id v4;
  NWConcrete_nw_path_evaluator *v5;
  NWConcrete_nw_path_evaluator *v6;
  NSObject *v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  if (!v4)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_create_evaluator_for_custom_ip";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v9, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_path_create_evaluator_for_custom_ip";
          _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null parameters", buf, 0xCu);
        }
LABEL_23:

        goto LABEL_24;
      }
      if (!v23)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_path_create_evaluator_for_custom_ip";
          _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_23;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_path_create_evaluator_for_custom_ip";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_23;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v26 = "nw_path_create_evaluator_for_custom_ip";
        v27 = 2082;
        v28 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_24:
    if (!v9)
    {
LABEL_26:
      v6 = 0;
      goto LABEL_27;
    }
LABEL_25:
    free(v9);
    goto LABEL_26;
  }
  v5 = objc_alloc_init(NWConcrete_nw_path_evaluator);
  v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_create_evaluator_for_custom_ip";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_create_evaluator_for_custom_ip";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v12 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (v12)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_path_create_evaluator_for_custom_ip";
          v27 = 2082;
          v28 = v12;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v12);
        if (!v9)
          goto LABEL_26;
        goto LABEL_25;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_create_evaluator_for_custom_ip";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_create_evaluator_for_custom_ip";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_23;
  }
  objc_storeStrong((id *)v5 + 1, a1);
  *((_BYTE *)v6 + 106) = a2;
  if ((nw_path_evaluator_evaluate(v6, 0) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_create_evaluator_for_custom_ip";
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
    }

    goto LABEL_26;
  }
LABEL_27:

  return v6;
}

void sub_1839CBAA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_interpose(void *a1)
{
  id v2;
  NWConcrete_nw_path_evaluator *v3;
  NWConcrete_nw_path_evaluator *v4;
  NSObject *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  if (!v2)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_path_create_evaluator_for_interpose";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v7, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_create_evaluator_for_interpose";
          _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null parameters", buf, 0xCu);
        }
LABEL_23:

        goto LABEL_24;
      }
      if (!v21)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_create_evaluator_for_interpose";
          _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_23;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v8, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_create_evaluator_for_interpose";
          _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_23;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_path_create_evaluator_for_interpose";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_24:
    if (!v7)
    {
LABEL_26:
      v4 = 0;
      goto LABEL_27;
    }
LABEL_25:
    free(v7);
    goto LABEL_26;
  }
  v3 = objc_alloc_init(NWConcrete_nw_path_evaluator);
  v4 = v3;
  if (!v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_path_create_evaluator_for_interpose";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v7, &type, &v21))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_path_create_evaluator_for_interpose";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
      }
    }
    else if (v21)
    {
      v10 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (v10)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_path_create_evaluator_for_interpose";
          v25 = 2082;
          v26 = v10;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v10);
        if (!v7)
          goto LABEL_26;
        goto LABEL_25;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_path_create_evaluator_for_interpose";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_path_create_evaluator_for_interpose";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_23;
  }
  objc_storeStrong((id *)v3 + 1, a1);
  *((_BYTE *)v4 + 107) |= 6u;
  if ((nw_path_evaluator_evaluate(v4, 0) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_path_create_evaluator_for_interpose";
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
    }

    goto LABEL_26;
  }
LABEL_27:

  return v4;
}

void sub_1839CC060(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_client_id(const unsigned __int8 *a1, void *a2)
{
  id v3;
  NWConcrete_nw_path_evaluator *v4;
  nw_parameters_t v5;
  void *v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  nw_parameters_t v15;
  nw_parameters_t v16;
  char v17;
  NWConcrete_nw_path_evaluator *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _BOOL4 v25;
  int v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  os_log_type_t v30;
  id v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  id v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  NSObject *v46;
  char *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  os_log_type_t v50;
  os_log_type_t v52;
  os_log_type_t v53;
  void *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  void *v58;
  os_log_type_t v59;
  char *backtrace_string;
  os_log_type_t v61;
  _BOOL4 v62;
  char *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  os_log_type_t v66;
  os_log_type_t v67;
  char v68;
  os_log_type_t v69;
  __int16 v70;
  __int16 v71;
  char v72;
  id v73;
  id obj;
  id v75;
  os_log_type_t type[4];
  const char *v77;
  __int16 v78;
  _QWORD v79[2];
  uint8_t buf[4];
  const char *v81;
  __int16 v82;
  _QWORD v83[126];
  __int128 v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v54 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v81 = "nw_path_create_evaluator_for_client_id";
    v55 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v84) = 0;
    if (!__nwlog_fault(v55, type, &v84))
      goto LABEL_147;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v57 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if ((_BYTE)v84)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v61 = type[0];
      v62 = os_log_type_enabled(v56, type[0]);
      if (backtrace_string)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446466;
          v81 = "nw_path_create_evaluator_for_client_id";
          v82 = 2082;
          v83[0] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v56, v61, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v55)
          goto LABEL_149;
        goto LABEL_148;
      }
      if (v62)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_182FBE000, v56, v61, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v66 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_182FBE000, v56, v66, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_146;
  }
  if (uuid_is_null(a1))
  {
    __nwlog_obj();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v81 = "nw_path_create_evaluator_for_client_id";
    v55 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v84) = 0;
    if (!__nwlog_fault(v55, type, &v84))
      goto LABEL_147;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v59 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_182FBE000, v56, v59, "%{public}s called with null !uuid_is_null(client_id)", buf, 0xCu);
      }
    }
    else if ((_BYTE)v84)
    {
      v63 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v64 = type[0];
      v65 = os_log_type_enabled(v56, type[0]);
      if (v63)
      {
        if (v65)
        {
          *(_DWORD *)buf = 136446466;
          v81 = "nw_path_create_evaluator_for_client_id";
          v82 = 2082;
          v83[0] = v63;
          _os_log_impl(&dword_182FBE000, v56, v64, "%{public}s called with null !uuid_is_null(client_id), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v63);
LABEL_147:
        if (!v55)
        {
LABEL_149:
          v18 = 0;
          goto LABEL_93;
        }
LABEL_148:
        free(v55);
        goto LABEL_149;
      }
      if (v65)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_182FBE000, v56, v64, "%{public}s called with null !uuid_is_null(client_id), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v67 = type[0];
      if (os_log_type_enabled(v56, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_182FBE000, v56, v67, "%{public}s called with null !uuid_is_null(client_id), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_146:

    goto LABEL_147;
  }
  v4 = objc_alloc_init(NWConcrete_nw_path_evaluator);
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v81 = "nw_path_create_evaluator_for_client_id";
    v11 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v84) = 0;
    if (!__nwlog_fault(v11, type, &v84))
      goto LABEL_89;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
      }
    }
    else if ((_BYTE)v84)
    {
      v21 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v22 = type[0];
      v23 = os_log_type_enabled(v12, type[0]);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v81 = "nw_path_create_evaluator_for_client_id";
          v82 = 2082;
          v83[0] = v21;
          _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        goto LABEL_34;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v30 = type[0];
      if (os_log_type_enabled(v12, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v81 = "nw_path_create_evaluator_for_client_id";
        _os_log_impl(&dword_182FBE000, v12, v30, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_89;
  }
  v5 = nw_parameters_create();
  v6 = (void *)*((_QWORD *)v4 + 1);
  *((_QWORD *)v4 + 1) = v5;

  nw_parameters_set_context(*((void **)v4 + 1), v3);
  nw_path_shared_necp_fd(v3);
  v84 = *(_OWORD *)a1;
  if (!necp_client_action())
  {
    *((_OWORD *)v4 + 5) = v84;
    bzero(buf, 0x400uLL);
    v14 = necp_client_action();
    if (v14 < 1)
    {
      v26 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v27 = (id)gLogObj;
      *(_DWORD *)type = 136446466;
      v77 = "nw_path_create_evaluator_for_client_id";
      v78 = 1024;
      LODWORD(v79[0]) = v26;
      v11 = (char *)_os_log_send_and_compose_impl();

      LOBYTE(v75) = 16;
      LOBYTE(obj) = 0;
      if (__nwlog_fault(v11, &v75, &obj))
      {
        if (v75 == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = (id)gLogObj;
          v29 = v75;
          if (os_log_type_enabled(v28, (os_log_type_t)v75))
          {
            *(_DWORD *)type = 136446466;
            v77 = "nw_path_create_evaluator_for_client_id";
            v78 = 1024;
            LODWORD(v79[0]) = v26;
            _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS %{darwin.errno}d", (uint8_t *)type, 0x12u);
          }
        }
        else if ((_BYTE)obj)
        {
          v39 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v40 = v75;
          v41 = os_log_type_enabled(v28, (os_log_type_t)v75);
          if (v39)
          {
            if (v41)
            {
              *(_DWORD *)type = 136446722;
              v77 = "nw_path_create_evaluator_for_client_id";
              v78 = 1024;
              LODWORD(v79[0]) = v26;
              WORD2(v79[0]) = 2082;
              *(_QWORD *)((char *)v79 + 6) = v39;
              _os_log_impl(&dword_182FBE000, v28, v40, "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)type, 0x1Cu);
            }

            free(v39);
            if (!v11)
              goto LABEL_91;
            goto LABEL_90;
          }
          if (v41)
          {
            *(_DWORD *)type = 136446466;
            v77 = "nw_path_create_evaluator_for_client_id";
            v78 = 1024;
            LODWORD(v79[0]) = v26;
            _os_log_impl(&dword_182FBE000, v28, v40, "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS %{darwin.errno}d, no backtrace", (uint8_t *)type, 0x12u);
          }
        }
        else
        {
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v50 = v75;
          if (os_log_type_enabled(v28, (os_log_type_t)v75))
          {
            *(_DWORD *)type = 136446466;
            v77 = "nw_path_create_evaluator_for_client_id";
            v78 = 1024;
            LODWORD(v79[0]) = v26;
            _os_log_impl(&dword_182FBE000, v28, v50, "%{public}s NECP_CLIENT_ACTION_COPY_PARAMETERS %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)type, 0x12u);
          }
        }

      }
      goto LABEL_89;
    }
    v15 = nw_parameters_create();
    v16 = v15;
    if (v15)
    {
      obj = 0;
      v75 = 0;
      v73 = 0;
      v72 = 0;
      v71 = 0;
      v70 = 0;
      if ((nw_path_parse_necp_parameters(v15, &v75, &obj, &v73, 0, &v72, &v71, (char *)&v70 + 1, &v70, (uint64_t)buf, v14) & 1) != 0)
      {
        nw_parameters_set_context(v16, v3);
        objc_storeStrong((id *)v4 + 3, obj);
        objc_storeStrong((id *)v4 + 4, v73);
        objc_storeStrong((id *)v4 + 2, v75);
        objc_storeStrong((id *)v4 + 1, v16);
        v17 = *((_BYTE *)v4 + 107) & 0xF9 | (2 * v72);
        *((_WORD *)v4 + 52) = v71;
        *((_BYTE *)v4 + 106) = HIBYTE(v70);
        *((_BYTE *)v4 + 107) = v17 | (4 * v70);
        if ((nw_path_evaluator_evaluate(v4, 0) & 1) != 0)
        {
          v18 = v4;
LABEL_112:

          goto LABEL_113;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v46 = (id)gLogObj;
        if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)type = 136446210;
          v77 = "nw_path_create_evaluator_for_client_id";
          _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_ERROR, "%{public}s nw_path_evaluator_evaluate failed", (uint8_t *)type, 0xCu);
        }

LABEL_111:
        v18 = 0;
        goto LABEL_112;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v35 = (id)gLogObj;
      *(_DWORD *)type = 136446210;
      v77 = "nw_path_create_evaluator_for_client_id";
      v36 = (char *)_os_log_send_and_compose_impl();

      v69 = OS_LOG_TYPE_ERROR;
      v68 = 0;
      if (__nwlog_fault(v36, &v69, &v68))
      {
        if (v69 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v37 = (id)gLogObj;
          v38 = v69;
          if (os_log_type_enabled(v37, v69))
          {
            *(_DWORD *)type = 136446210;
            v77 = "nw_path_create_evaluator_for_client_id";
            _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s nw_path_parse_necp_parameters failed", (uint8_t *)type, 0xCu);
          }
        }
        else if (v68)
        {
          v47 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v48 = v69;
          v49 = os_log_type_enabled(v37, v69);
          if (v47)
          {
            if (v49)
            {
              *(_DWORD *)type = 136446466;
              v77 = "nw_path_create_evaluator_for_client_id";
              v78 = 2082;
              v79[0] = v47;
              _os_log_impl(&dword_182FBE000, v37, v48, "%{public}s nw_path_parse_necp_parameters failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
            }

            free(v47);
            goto LABEL_109;
          }
          if (v49)
          {
            *(_DWORD *)type = 136446210;
            v77 = "nw_path_create_evaluator_for_client_id";
            _os_log_impl(&dword_182FBE000, v37, v48, "%{public}s nw_path_parse_necp_parameters failed, no backtrace", (uint8_t *)type, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          v53 = v69;
          if (os_log_type_enabled(v37, v69))
          {
            *(_DWORD *)type = 136446210;
            v77 = "nw_path_create_evaluator_for_client_id";
            _os_log_impl(&dword_182FBE000, v37, v53, "%{public}s nw_path_parse_necp_parameters failed, backtrace limit exceeded", (uint8_t *)type, 0xCu);
          }
        }

      }
LABEL_109:
      if (v36)
        free(v36);
      goto LABEL_111;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    *(_DWORD *)type = 136446210;
    v77 = "nw_path_create_evaluator_for_client_id";
    v32 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v75) = 16;
    LOBYTE(obj) = 0;
    if (__nwlog_fault(v32, &v75, &obj))
    {
      if (v75 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        v34 = v75;
        if (os_log_type_enabled(v33, (os_log_type_t)v75))
        {
          *(_DWORD *)type = 136446210;
          v77 = "nw_path_create_evaluator_for_client_id";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s nw_parameters_create failed", (uint8_t *)type, 0xCu);
        }
      }
      else if ((_BYTE)obj)
      {
        v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v44 = v75;
        v45 = os_log_type_enabled(v33, (os_log_type_t)v75);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)type = 136446466;
            v77 = "nw_path_create_evaluator_for_client_id";
            v78 = 2082;
            v79[0] = v43;
            _os_log_impl(&dword_182FBE000, v33, v44, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
          }

          free(v43);
          if (!v32)
            goto LABEL_105;
          goto LABEL_104;
        }
        if (v45)
        {
          *(_DWORD *)type = 136446210;
          v77 = "nw_path_create_evaluator_for_client_id";
          _os_log_impl(&dword_182FBE000, v33, v44, "%{public}s nw_parameters_create failed, no backtrace", (uint8_t *)type, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v52 = v75;
        if (os_log_type_enabled(v33, (os_log_type_t)v75))
        {
          *(_DWORD *)type = 136446210;
          v77 = "nw_path_create_evaluator_for_client_id";
          _os_log_impl(&dword_182FBE000, v33, v52, "%{public}s nw_parameters_create failed, backtrace limit exceeded", (uint8_t *)type, 0xCu);
        }
      }

    }
    if (!v32)
    {
LABEL_105:
      v18 = 0;
LABEL_113:

      goto LABEL_92;
    }
LABEL_104:
    free(v32);
    goto LABEL_105;
  }
  v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = (id)gLogObj;
  v9 = v8;
  if (v7 == 2)
  {
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v81 = "nw_path_create_evaluator_for_client_id";
      v82 = 1024;
      LODWORD(v83[0]) = 2;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_CLAIM %{darwin.errno}d", buf, 0x12u);
    }

    goto LABEL_91;
  }
  *(_DWORD *)buf = 136446466;
  v81 = "nw_path_create_evaluator_for_client_id";
  v82 = 1024;
  LODWORD(v83[0]) = v7;
  v11 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v75) = 0;
  if (__nwlog_fault(v11, type, &v75))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v20 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v81 = "nw_path_create_evaluator_for_client_id";
        v82 = 1024;
        LODWORD(v83[0]) = v7;
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s NECP_CLIENT_ACTION_CLAIM %{darwin.errno}d", buf, 0x12u);
      }
LABEL_77:

      goto LABEL_89;
    }
    if (!(_BYTE)v75)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      v42 = type[0];
      if (os_log_type_enabled(v19, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        v81 = "nw_path_create_evaluator_for_client_id";
        v82 = 1024;
        LODWORD(v83[0]) = v7;
        _os_log_impl(&dword_182FBE000, v19, v42, "%{public}s NECP_CLIENT_ACTION_CLAIM %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
      }
      goto LABEL_77;
    }
    v21 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    v24 = type[0];
    v25 = os_log_type_enabled(v19, type[0]);
    if (!v21)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        v81 = "nw_path_create_evaluator_for_client_id";
        v82 = 1024;
        LODWORD(v83[0]) = v7;
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s NECP_CLIENT_ACTION_CLAIM %{darwin.errno}d, no backtrace", buf, 0x12u);
      }
      goto LABEL_77;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446722;
      v81 = "nw_path_create_evaluator_for_client_id";
      v82 = 1024;
      LODWORD(v83[0]) = v7;
      WORD2(v83[0]) = 2082;
      *(_QWORD *)((char *)v83 + 6) = v21;
      _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s NECP_CLIENT_ACTION_CLAIM %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
    }

LABEL_34:
    free(v21);
    if (!v11)
      goto LABEL_91;
    goto LABEL_90;
  }
LABEL_89:
  if (v11)
LABEL_90:
    free(v11);
LABEL_91:
  v18 = 0;
LABEL_92:

LABEL_93:
  return v18;
}

void sub_1839CD3B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_path_watch_necp_changes(void *a1)
{
  id v1;
  uint64_t globals_for_path;
  os_unfair_lock_s *v3;
  int v4;
  _BOOL8 source;
  uint64_t v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _QWORD v23[4];
  id v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
    globals_for_path = nw_context_get_globals_for_path(v1);
    v3 = (os_unfair_lock_s *)(globals_for_path + 124);
    os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
    v4 = nw_path_shared_necp_fd(v1);
    pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
    if (sNWIsBetweenForkAndExec == 1 && (sNWParentAllowedDispatch & 1) != 0)
      goto LABEL_33;
    if ((sNWDispatchAllowedNow & 1) == 0)
    {
      if ((_dispatch_is_fork_of_multithreaded_parent() & 1) == 0 && (_dispatch_is_multithreaded() & 1) != 0
        || (getpid(), sandbox_check() == 1))
      {
        sNWDispatchAllowedNow = 1;
      }
      else if (!sNWDispatchAllowedNow)
      {
LABEL_33:
        os_unfair_lock_unlock(v3);
        goto LABEL_34;
      }
    }
    if (v4 == -1 || *(_QWORD *)(globals_for_path + 56))
      goto LABEL_33;
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = ___ZL26nw_path_watch_necp_changesPU24objcproto13OS_nw_context8NSObject_block_invoke;
    v23[3] = &unk_1E14ACFD0;
    v24 = v1;
    source = nw_queue_context_create_source(v24, v4, 1, 0, v23, 0);
    *(_QWORD *)(globals_for_path + 56) = source;
    if (source)
    {
      nw_queue_activate_source(source, v6);
LABEL_32:

      goto LABEL_33;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_watch_necp_changes";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v8, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_path_watch_necp_changes";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s nw_queue_context_create_source failed", buf, 0xCu);
        }
      }
      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v28 = "nw_path_watch_necp_changes";
            v29 = 2082;
            v30 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_path_watch_necp_changes";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s nw_queue_context_create_source failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_path_watch_necp_changes";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_30:
    if (v8)
      free(v8);
    goto LABEL_32;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_path_watch_necp_changes";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v16, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_watch_necp_changes";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v25)
    {
      v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v17, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_path_watch_necp_changes";
          v29 = 2082;
          v30 = v19;
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
        goto LABEL_51;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_watch_necp_changes";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_watch_necp_changes";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_51:
  if (v16)
    free(v16);
LABEL_34:

}

void sub_1839CDA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void ___ZL26nw_path_watch_necp_changesPU24objcproto13OS_nw_context8NSObject_block_invoke(uint64_t a1)
{
  os_unfair_lock_s *globals_for_path;
  os_unfair_lock_s *v3;

  globals_for_path = (os_unfair_lock_s *)nw_context_get_globals_for_path(*(void **)(a1 + 32));
  v3 = globals_for_path + 31;
  os_unfair_lock_lock(globals_for_path + 31);
  LODWORD(globals_for_path) = globals_for_path[32];
  os_unfair_lock_unlock(v3);
  nw_path_necp_check_for_updates(*(void **)(a1 + 32), 0, globals_for_path);
}

void nw_path_necp_check_for_updates(void *a1, _OWORD *a2, unsigned int a3)
{
  id v5;
  unsigned int v6;
  char *v7;
  unsigned __int8 *v8;
  unint64_t StatusReg;
  int v10;
  NSObject *v11;
  NSObject *v12;
  unint64_t v13;
  id v14;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  id v24;
  void *v25;
  NSObject *v26;
  os_log_type_t v27;
  unsigned __int8 *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  unint64_t v34;
  BOOL v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  char *backtrace_string;
  os_log_type_t v41;
  _BOOL4 v42;
  id v43;
  void *v44;
  NSObject *v45;
  os_log_type_t v46;
  _QWORD *v47;
  void *v48;
  NWConcrete_nw_path_evaluator *v49;
  os_log_type_t v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  id v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  char *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  os_log_type_t v61;
  os_log_type_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  BOOL v66;
  id v67;
  void *v68;
  NSObject *v69;
  os_log_type_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  os_log_type_t v75;
  uint64_t v76;
  unint64_t v77;
  id v78;
  void *v79;
  NSObject *v80;
  os_log_type_t v81;
  id v82;
  _BOOL4 v83;
  int v84;
  int v85;
  NSObject *v86;
  const char *v87;
  NSObject *v88;
  os_log_type_t v89;
  char *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  os_log_type_t v93;
  _OWORD *v94;
  char *v95;
  NSObject *v96;
  NSObject *v97;
  os_log_type_t v98;
  void *v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  char *v103;
  os_log_type_t v104;
  _BOOL4 v105;
  void *v106;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  NSObject *v110;
  void *v111;
  void *v112;
  os_log_type_t v113;
  NSObject *v114;
  void *v115;
  NSObject *v116;
  void *v117;
  os_log_type_t v118;
  char *v119;
  os_log_type_t v120;
  _BOOL4 v121;
  void *v122;
  const char *v123;
  NSObject *v124;
  os_log_type_t v125;
  char *v126;
  os_log_type_t v127;
  _BOOL4 v128;
  os_log_type_t v129;
  char *v130;
  os_log_type_t v131;
  _BOOL4 v132;
  os_log_type_t v133;
  os_log_type_t v134;
  _BOOL8 globals_for_path;
  os_unfair_lock_s *lock;
  unsigned int v137;
  size_t size;
  _OWORD *v139;
  unsigned __int8 *v140;
  id v141;
  char *v142;
  unsigned __int8 *v143;
  unint64_t v144;
  const unsigned __int8 *v145;
  _QWORD v146[7];
  unsigned int v147;
  char v148;
  os_log_type_t type;
  unsigned __int8 v150[3072];
  uuid_t uu;
  uint8_t buf[56];
  uint64_t v153;

  v153 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  v141 = v5;
  v137 = a3;
  size = (a3 << 9) + 1024;
  globals_for_path = nw_context_get_globals_for_path(v5);
  lock = (os_unfair_lock_s *)(globals_for_path + 124);
  memset(uu, 0, sizeof(uu));
  v139 = a2;
  if (!a2)
    goto LABEL_4;
  *(_OWORD *)uu = *a2;
  while (1)
  {
    bzero(v150, 0xC00uLL);
    nw_path_shared_necp_fd(v141);
    v6 = necp_client_action();
    v7 = 0;
    v8 = v150;
    if ((int)v6 > 0)
    {
LABEL_21:
      v142 = v7;
      v13 = v6;
      if (v6 < 5)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v6;
        v15 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v148 = 0;
        if (__nwlog_fault((const char *)v15, &type, &v148))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = (id)gLogObj;
            v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v6;
              _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s NECP buffer too short %zu", buf, 0x16u);
            }
          }
          else if (v148)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = (id)gLogObj;
            v41 = type;
            v42 = os_log_type_enabled(v16, type);
            if (backtrace_string)
            {
              if (v42)
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v6;
                *(_WORD *)&buf[22] = 2082;
                *(_QWORD *)&buf[24] = backtrace_string;
                _os_log_impl(&dword_182FBE000, v16, v41, "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(backtrace_string);
              if (!v15)
              {
LABEL_105:
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v54 = (id)gLogObj;
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v6;
                v55 = (char *)_os_log_send_and_compose_impl();

                type = OS_LOG_TYPE_ERROR;
                v148 = 0;
                if ((__nwlog_fault(v55, &type, &v148) & 1) == 0)
                  goto LABEL_122;
                if (type == OS_LOG_TYPE_FAULT)
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v56 = (id)gLogObj;
                  v57 = type;
                  if (os_log_type_enabled(v56, type))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v6;
                    _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s NECP buffer too short %zu", buf, 0x16u);
                  }
                }
                else if (v148)
                {
                  v58 = (char *)__nw_create_backtrace_string();
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v56 = (id)gLogObj;
                  v59 = type;
                  v60 = os_log_type_enabled(v56, type);
                  if (v58)
                  {
                    if (v60)
                    {
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                      *(_WORD *)&buf[12] = 2048;
                      *(_QWORD *)&buf[14] = v6;
                      *(_WORD *)&buf[22] = 2082;
                      *(_QWORD *)&buf[24] = v58;
                      _os_log_impl(&dword_182FBE000, v56, v59, "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s", buf, 0x20u);
                    }

                    free(v58);
                    if (!v55)
                      goto LABEL_199;
                    goto LABEL_123;
                  }
                  if (v60)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v6;
                    _os_log_impl(&dword_182FBE000, v56, v59, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
                  }
                }
                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v56 = (id)gLogObj;
                  v61 = type;
                  if (os_log_type_enabled(v56, type))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                    *(_WORD *)&buf[12] = 2048;
                    *(_QWORD *)&buf[14] = v6;
                    _os_log_impl(&dword_182FBE000, v56, v61, "%{public}s NECP buffer too short %zu, backtrace limit exceeded", buf, 0x16u);
                  }
                }
LABEL_121:

                goto LABEL_122;
              }
LABEL_104:
              free(v15);
              goto LABEL_105;
            }
            if (v42)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v6;
              _os_log_impl(&dword_182FBE000, v16, v41, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = (id)gLogObj;
            v50 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v6;
              _os_log_impl(&dword_182FBE000, v16, v50, "%{public}s NECP buffer too short %zu, backtrace limit exceeded", buf, 0x16u);
            }
          }

        }
        if (!v15)
          goto LABEL_105;
        goto LABEL_104;
      }
      v18 = 0;
      v19 = v6 - 5;
      v20 = v8 + 1;
      v140 = v8 + 5;
      v144 = v19;
      v145 = v8;
      v143 = v8 + 1;
      while (1)
      {
        if (v18 > v19)
        {
          v34 = v18;
          if (v18 == v6)
            goto LABEL_134;
          goto LABEL_225;
        }
        v21 = v8[v18];
        v22 = *(unsigned int *)&v20[v18];
        if (!(_DWORD)v22)
        {
          v28 = 0;
          goto LABEL_57;
        }
        if (v22 <= 0xFFFFFFF9
          && v6 >= (unint64_t)(v22 + 5)
          && (unint64_t)v6 - (v22 + 5) >= v18)
        {
          v28 = &v140[v18];
          goto LABEL_57;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v18;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v6;
        *(_WORD *)&buf[32] = 1024;
        *(_DWORD *)&buf[34] = v22;
        v25 = (void *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v148 = 0;
        if (__nwlog_fault((const char *)v25, &type, &v148))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v26 = (id)gLogObj;
            v27 = type;
            if (os_log_type_enabled(v26, type))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v18;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v6;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v22;
              _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
            }
LABEL_39:

            goto LABEL_54;
          }
          if (!v148)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v26 = (id)gLogObj;
            v33 = type;
            if (os_log_type_enabled(v26, type))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v18;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v6;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v22;
              _os_log_impl(&dword_182FBE000, v26, v33, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
            }
            goto LABEL_39;
          }
          v29 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v30 = (id)gLogObj;
          v31 = type;
          v32 = os_log_type_enabled(v30, type);
          if (v29)
          {
            if (v32)
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v18;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = v6;
              *(_WORD *)&buf[32] = 1024;
              *(_DWORD *)&buf[34] = v22;
              *(_WORD *)&buf[38] = 2082;
              *(_QWORD *)&buf[40] = v29;
              _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
            }

            free(v29);
            if (!v25)
              goto LABEL_56;
LABEL_55:
            free(v25);
            goto LABEL_56;
          }
          if (v32)
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = v18;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = v6;
            *(_WORD *)&buf[32] = 1024;
            *(_DWORD *)&buf[34] = v22;
            _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
          }

        }
LABEL_54:
        if (v25)
          goto LABEL_55;
LABEL_56:
        v28 = 0;
        v19 = v6 - 5;
        v8 = (unsigned __int8 *)v145;
        v20 = v143;
LABEL_57:
        v34 = v22 + 5 + v18;
        if (v34 > v6)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v43 = (id)gLogObj;
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
          *(_WORD *)&buf[12] = 2048;
          *(_QWORD *)&buf[14] = v22 + 5;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)&buf[24] = v18;
          *(_WORD *)&buf[32] = 2048;
          *(_QWORD *)&buf[34] = v6;
          v44 = (void *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v148 = 0;
          if (__nwlog_fault((const char *)v44, &type, &v148))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v45 = (id)gLogObj;
              v46 = type;
              if (os_log_type_enabled(v45, type))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v22 + 5;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = v18;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v6;
                _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu)", buf, 0x2Au);
              }
              goto LABEL_130;
            }
            if (v148)
            {
              v51 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v45 = (id)gLogObj;
              v52 = type;
              v53 = os_log_type_enabled(v45, type);
              if (v51)
              {
                if (v53)
                {
                  *(_DWORD *)buf = 136447234;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v22 + 5;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v18;
                  *(_WORD *)&buf[32] = 2048;
                  *(_QWORD *)&buf[34] = v6;
                  *(_WORD *)&buf[42] = 2082;
                  *(_QWORD *)&buf[44] = v51;
                  _os_log_impl(&dword_182FBE000, v45, v52, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x34u);
                }

                free(v51);
                if (!v44)
                {
LABEL_133:
                  v19 = v6 - 5;
                  v8 = (unsigned __int8 *)v145;
                  v20 = v143;
                  if (v34 == v6)
                    goto LABEL_134;
LABEL_225:
                  __nwlog_obj();
                  v106 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v34;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v6;
                  v107 = (char *)_os_log_send_and_compose_impl();

                  type = OS_LOG_TYPE_ERROR;
                  v148 = 0;
                  if (__nwlog_fault(v107, &type, &v148))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v108 = objc_claimAutoreleasedReturnValue();
                      v109 = type;
                      if (os_log_type_enabled(v108, type))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v34;
                        *(_WORD *)&buf[22] = 2048;
                        *(_QWORD *)&buf[24] = v6;
                        _os_log_impl(&dword_182FBE000, v108, v109, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
                      }
                      goto LABEL_286;
                    }
                    if (v148)
                    {
                      v119 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v108 = objc_claimAutoreleasedReturnValue();
                      v120 = type;
                      v121 = os_log_type_enabled(v108, type);
                      if (v119)
                      {
                        if (v121)
                        {
                          *(_DWORD *)buf = 136446978;
                          *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v34;
                          *(_WORD *)&buf[22] = 2048;
                          *(_QWORD *)&buf[24] = v6;
                          *(_WORD *)&buf[32] = 2082;
                          *(_QWORD *)&buf[34] = v119;
                          _os_log_impl(&dword_182FBE000, v108, v120, "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s", buf, 0x2Au);
                        }

                        free(v119);
                        goto LABEL_287;
                      }
                      if (v121)
                      {
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v34;
                        *(_WORD *)&buf[22] = 2048;
                        *(_QWORD *)&buf[24] = v6;
                        _os_log_impl(&dword_182FBE000, v108, v120, "%{public}s cursor has unexpected value %zu != %zu, no backtrace", buf, 0x20u);
                      }
                    }
                    else
                    {
                      __nwlog_obj();
                      v108 = objc_claimAutoreleasedReturnValue();
                      v133 = type;
                      if (os_log_type_enabled(v108, type))
                      {
                        *(_DWORD *)buf = 136446722;
                        *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v34;
                        *(_WORD *)&buf[22] = 2048;
                        *(_QWORD *)&buf[24] = v6;
                        _os_log_impl(&dword_182FBE000, v108, v133, "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded", buf, 0x20u);
                      }
                    }
LABEL_286:

                  }
LABEL_287:
                  if (v107)
                    free(v107);
                  v19 = v6 - 5;
                  v8 = (unsigned __int8 *)v145;
                  v20 = v143;
LABEL_134:
                  v63 = 0;
                  while (2)
                  {
                    v64 = v8[v63];
                    v65 = *(unsigned int *)&v20[v63];
                    if (!(_DWORD)v65
                      || v65 <= 0xFFFFFFF9
                      && (v13 >= v65 + 5 ? (v66 = v13 - (v65 + 5) >= v63) : (v66 = 0), v66))
                    {
LABEL_161:
                      v76 = v65 + 5;
                      v77 = v65 + 5 + v63;
                      if (v77 > v13)
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v78 = (id)gLogObj;
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v65 + 5;
                        *(_WORD *)&buf[22] = 2048;
                        *(_QWORD *)&buf[24] = v63;
                        *(_WORD *)&buf[32] = 2048;
                        *(_QWORD *)&buf[34] = v13;
                        v79 = (void *)_os_log_send_and_compose_impl();

                        type = OS_LOG_TYPE_ERROR;
                        v148 = 0;
                        if (__nwlog_fault((const char *)v79, &type, &v148))
                        {
                          if (type == OS_LOG_TYPE_FAULT)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            v80 = (id)gLogObj;
                            v81 = type;
                            if (os_log_type_enabled(v80, type))
                            {
                              *(_DWORD *)buf = 136446978;
                              *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                              *(_WORD *)&buf[12] = 2048;
                              *(_QWORD *)&buf[14] = v76;
                              *(_WORD *)&buf[22] = 2048;
                              *(_QWORD *)&buf[24] = v63;
                              *(_WORD *)&buf[32] = 2048;
                              *(_QWORD *)&buf[34] = v13;
                              _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu)", buf, 0x2Au);
                            }
                            goto LABEL_195;
                          }
                          if (v148)
                          {
                            v90 = (char *)__nw_create_backtrace_string();
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            v80 = (id)gLogObj;
                            v91 = type;
                            v92 = os_log_type_enabled(v80, type);
                            if (v90)
                            {
                              if (v92)
                              {
                                *(_DWORD *)buf = 136447234;
                                *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                                *(_WORD *)&buf[12] = 2048;
                                *(_QWORD *)&buf[14] = v76;
                                *(_WORD *)&buf[22] = 2048;
                                *(_QWORD *)&buf[24] = v63;
                                *(_WORD *)&buf[32] = 2048;
                                *(_QWORD *)&buf[34] = v13;
                                *(_WORD *)&buf[42] = 2082;
                                *(_QWORD *)&buf[44] = v90;
                                _os_log_impl(&dword_182FBE000, v80, v91, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x34u);
                              }

                              free(v90);
                              if (!v79)
                              {
LABEL_198:
                                if (v77 == v13)
                                  goto LABEL_199;
                                __nwlog_obj();
                                v112 = (void *)objc_claimAutoreleasedReturnValue();
                                *(_DWORD *)buf = 136446722;
                                *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                                *(_WORD *)&buf[12] = 2048;
                                *(_QWORD *)&buf[14] = v77;
                                *(_WORD *)&buf[22] = 2048;
                                *(_QWORD *)&buf[24] = v13;
                                v55 = (char *)_os_log_send_and_compose_impl();

                                type = OS_LOG_TYPE_ERROR;
                                v148 = 0;
                                if (__nwlog_fault(v55, &type, &v148))
                                {
                                  if (type == OS_LOG_TYPE_FAULT)
                                  {
                                    __nwlog_obj();
                                    v56 = objc_claimAutoreleasedReturnValue();
                                    v113 = type;
                                    if (os_log_type_enabled(v56, type))
                                    {
                                      *(_DWORD *)buf = 136446722;
                                      *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                                      *(_WORD *)&buf[12] = 2048;
                                      *(_QWORD *)&buf[14] = v77;
                                      *(_WORD *)&buf[22] = 2048;
                                      *(_QWORD *)&buf[24] = v13;
                                      _os_log_impl(&dword_182FBE000, v56, v113, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
                                    }
                                    goto LABEL_121;
                                  }
                                  if (!v148)
                                  {
                                    __nwlog_obj();
                                    v56 = objc_claimAutoreleasedReturnValue();
                                    v134 = type;
                                    if (os_log_type_enabled(v56, type))
                                    {
                                      *(_DWORD *)buf = 136446722;
                                      *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                                      *(_WORD *)&buf[12] = 2048;
                                      *(_QWORD *)&buf[14] = v77;
                                      *(_WORD *)&buf[22] = 2048;
                                      *(_QWORD *)&buf[24] = v13;
                                      _os_log_impl(&dword_182FBE000, v56, v134, "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded", buf, 0x20u);
                                    }
                                    goto LABEL_121;
                                  }
                                  v130 = (char *)__nw_create_backtrace_string();
                                  __nwlog_obj();
                                  v56 = objc_claimAutoreleasedReturnValue();
                                  v131 = type;
                                  v132 = os_log_type_enabled(v56, type);
                                  if (!v130)
                                  {
                                    if (v132)
                                    {
                                      *(_DWORD *)buf = 136446722;
                                      *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                                      *(_WORD *)&buf[12] = 2048;
                                      *(_QWORD *)&buf[14] = v77;
                                      *(_WORD *)&buf[22] = 2048;
                                      *(_QWORD *)&buf[24] = v13;
                                      _os_log_impl(&dword_182FBE000, v56, v131, "%{public}s cursor has unexpected value %zu != %zu, no backtrace", buf, 0x20u);
                                    }
                                    goto LABEL_121;
                                  }
                                  if (v132)
                                  {
                                    *(_DWORD *)buf = 136446978;
                                    *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                                    *(_WORD *)&buf[12] = 2048;
                                    *(_QWORD *)&buf[14] = v77;
                                    *(_WORD *)&buf[22] = 2048;
                                    *(_QWORD *)&buf[24] = v13;
                                    *(_WORD *)&buf[32] = 2082;
                                    *(_QWORD *)&buf[34] = v130;
                                    _os_log_impl(&dword_182FBE000, v56, v131, "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s", buf, 0x2Au);
                                  }

                                  free(v130);
                                  if (v55)
                                    goto LABEL_123;
LABEL_199:
                                  v94 = v139;
                                  v95 = v142;
                                  if (v142)
LABEL_200:
                                    free(v95);
                                  goto LABEL_201;
                                }
LABEL_122:
                                if (!v55)
                                  goto LABEL_199;
LABEL_123:
                                free(v55);
                                goto LABEL_199;
                              }
LABEL_197:
                              free(v79);
                              goto LABEL_198;
                            }
                            if (v92)
                            {
                              *(_DWORD *)buf = 136446978;
                              *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                              *(_WORD *)&buf[12] = 2048;
                              *(_QWORD *)&buf[14] = v76;
                              *(_WORD *)&buf[22] = 2048;
                              *(_QWORD *)&buf[24] = v63;
                              *(_WORD *)&buf[32] = 2048;
                              *(_QWORD *)&buf[34] = v13;
                              _os_log_impl(&dword_182FBE000, v80, v91, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x2Au);
                            }
                          }
                          else
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            v80 = (id)gLogObj;
                            v93 = type;
                            if (os_log_type_enabled(v80, type))
                            {
                              *(_DWORD *)buf = 136446978;
                              *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
                              *(_WORD *)&buf[12] = 2048;
                              *(_QWORD *)&buf[14] = v76;
                              *(_WORD *)&buf[22] = 2048;
                              *(_QWORD *)&buf[24] = v63;
                              *(_WORD *)&buf[32] = 2048;
                              *(_QWORD *)&buf[34] = v13;
                              _os_log_impl(&dword_182FBE000, v80, v93, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x2Au);
                            }
                          }
LABEL_195:

                        }
                        if (!v79)
                          goto LABEL_198;
                        goto LABEL_197;
                      }
                      if (v64 == 20)
                      {
                        if (nw_context_copy_implicit_context::onceToken[0] != -1)
                          dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
                        v82 = (id)nw_context_copy_implicit_context::implicit_context;
                        v83 = v82 == v141;

                        if (v83)
                        {
                          type = OS_LOG_TYPE_DEFAULT;
                          v84 = nw_path_create_bridged_flow_director(v141, &type);
                          if (type)
                            v85 = v84;
                          else
                            v85 = 0;
                          if (v85 == 1)
                          {
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            v86 = (id)gLogObj;
                            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEFAULT))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_path_necp_check_for_updates";
                              v87 = "%{public}s In-process flow divert director created";
                              v88 = v86;
                              v89 = OS_LOG_TYPE_DEFAULT;
                              goto LABEL_191;
                            }
                          }
                          else
                          {
                            if ((v84 & 1) != 0)
                              goto LABEL_199;
                            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                            networkd_settings_init();
                            v86 = (id)gLogObj;
                            if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
                            {
                              *(_DWORD *)buf = 136446210;
                              *(_QWORD *)&buf[4] = "nw_path_necp_check_for_updates";
                              v87 = "%{public}s Failed to create in-process flow divert director";
                              v88 = v86;
                              v89 = OS_LOG_TYPE_ERROR;
LABEL_191:
                              _os_log_impl(&dword_182FBE000, v88, v89, v87, buf, 0xCu);
                            }
                          }

                          goto LABEL_199;
                        }
                        goto LABEL_199;
                      }
                      v63 += v65 + 5;
                      if (v77 > v19)
                        goto LABEL_198;
                      continue;
                    }
                    break;
                  }
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v67 = (id)gLogObj;
                  *(_DWORD *)buf = 136446978;
                  *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v63;
                  *(_WORD *)&buf[22] = 2048;
                  *(_QWORD *)&buf[24] = v13;
                  *(_WORD *)&buf[32] = 1024;
                  *(_DWORD *)&buf[34] = v65;
                  v68 = (void *)_os_log_send_and_compose_impl();

                  type = OS_LOG_TYPE_ERROR;
                  v148 = 0;
                  if (__nwlog_fault((const char *)v68, &type, &v148))
                  {
                    if (type == OS_LOG_TYPE_FAULT)
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v69 = (id)gLogObj;
                      v70 = type;
                      if (os_log_type_enabled(v69, type))
                      {
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v63;
                        *(_WORD *)&buf[22] = 2048;
                        *(_QWORD *)&buf[24] = v13;
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v65;
                        _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
                      }
                      goto LABEL_145;
                    }
                    if (v148)
                    {
                      v71 = (char *)__nw_create_backtrace_string();
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v72 = (id)gLogObj;
                      v73 = type;
                      v74 = os_log_type_enabled(v72, type);
                      if (v71)
                      {
                        if (v74)
                        {
                          *(_DWORD *)buf = 136447234;
                          *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
                          *(_WORD *)&buf[12] = 2048;
                          *(_QWORD *)&buf[14] = v63;
                          *(_WORD *)&buf[22] = 2048;
                          *(_QWORD *)&buf[24] = v13;
                          *(_WORD *)&buf[32] = 1024;
                          *(_DWORD *)&buf[34] = v65;
                          *(_WORD *)&buf[38] = 2082;
                          *(_QWORD *)&buf[40] = v71;
                          _os_log_impl(&dword_182FBE000, v72, v73, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
                        }

                        free(v71);
                        if (!v68)
                        {
LABEL_160:
                          v19 = v144;
                          v8 = (unsigned __int8 *)v145;
                          v20 = v143;
                          goto LABEL_161;
                        }
LABEL_159:
                        free(v68);
                        goto LABEL_160;
                      }
                      if (v74)
                      {
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v63;
                        *(_WORD *)&buf[22] = 2048;
                        *(_QWORD *)&buf[24] = v13;
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v65;
                        _os_log_impl(&dword_182FBE000, v72, v73, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
                      }

                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v69 = (id)gLogObj;
                      v75 = type;
                      if (os_log_type_enabled(v69, type))
                      {
                        *(_DWORD *)buf = 136446978;
                        *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
                        *(_WORD *)&buf[12] = 2048;
                        *(_QWORD *)&buf[14] = v63;
                        *(_WORD *)&buf[22] = 2048;
                        *(_QWORD *)&buf[24] = v13;
                        *(_WORD *)&buf[32] = 1024;
                        *(_DWORD *)&buf[34] = v65;
                        _os_log_impl(&dword_182FBE000, v69, v75, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
                      }
LABEL_145:

                    }
                  }
                  if (!v68)
                    goto LABEL_160;
                  goto LABEL_159;
                }
LABEL_132:
                free(v44);
                goto LABEL_133;
              }
              if (v53)
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v22 + 5;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = v18;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v6;
                _os_log_impl(&dword_182FBE000, v45, v52, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x2Au);
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v45 = (id)gLogObj;
              v62 = type;
              if (os_log_type_enabled(v45, type))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = v22 + 5;
                *(_WORD *)&buf[22] = 2048;
                *(_QWORD *)&buf[24] = v18;
                *(_WORD *)&buf[32] = 2048;
                *(_QWORD *)&buf[34] = v6;
                _os_log_impl(&dword_182FBE000, v45, v62, "%{public}s TLV length (%zu) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x2Au);
              }
            }
LABEL_130:

          }
          if (!v44)
            goto LABEL_133;
          goto LABEL_132;
        }
        v36 = (_DWORD)v22 == 16 && v28 != 0 && v21 == 1;
        v18 += v22 + 5;
        if (v36)
        {
          *(_OWORD *)uu = *(_OWORD *)v28;
          os_unfair_lock_lock(lock);
          if (*(_QWORD *)globals_for_path == *(_QWORD *)uu && *(_QWORD *)(globals_for_path + 8) == *(_QWORD *)&uu[8])
          {
            v37 = *(_QWORD *)(globals_for_path + 48);
            v38 = (unsigned __int8 *)nw_array_create();
            v39 = v38;
            if (v37)
            {
              if (v38 == (unsigned __int8 *)v37)
                v39 = (unsigned __int8 *)v37;
              else
                std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>((uint64_t)(v38 + 16), *(void ***)(v37 + 16), *(void ***)(v37 + 24), (uint64_t)(*(_QWORD *)(v37 + 24) - *(_QWORD *)(v37 + 16)) >> 3);
            }
            os_unfair_lock_unlock(lock);
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2020000000;
            buf[24] = 1;
            v146[0] = MEMORY[0x1E0C809B0];
            v146[1] = 3221225472;
            v146[2] = ___ZL30nw_path_necp_check_for_updatesPU24objcproto13OS_nw_context8NSObjectPA16_hj_block_invoke_2;
            v146[3] = &unk_1E14A9240;
            v146[5] = uu;
            v146[6] = v145;
            v147 = v6;
            v146[4] = buf;
            nw_array_apply(v39, (uint64_t)v146);
            _Block_object_dispose(buf, 8);

          }
          else if (*(_QWORD *)(globals_for_path + 32))
          {
            memset(buf, 0, 37);
            uuid_unparse(uu, (char *)buf);
            v47 = nw_dictionary_copy_value(*(_QWORD *)(globals_for_path + 32), (uint64_t)buf);
            v48 = v47;
            if (v47 && v47[10] == *(_QWORD *)uu && v47[11] == *(_QWORD *)&uu[8])
            {
              v49 = v47;
              os_unfair_lock_unlock(lock);
              nw_path_necp_update_evaluator(v49, v145, v6, 1);
            }
            else
            {
              os_unfair_lock_unlock(lock);
              v49 = 0;
            }

          }
          else
          {
            os_unfair_lock_unlock(lock);
          }
          goto LABEL_199;
        }
      }
    }
    StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
    v10 = **(_DWORD **)(StatusReg + 8);
    if (v137 < 5 || v10 != 22)
      goto LABEL_15;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_necp_check_for_updates";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v137;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s Trying to copy result again for %u flows", buf, 0x12u);
    }

    if (!(_DWORD)size)
    {
      __nwlog_obj();
      v114 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v114, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "strict_calloc";
      v115 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v115))
        goto LABEL_293;
      free(v115);
    }
    v7 = (char *)malloc_type_calloc(1uLL, size, 0xEAFB8F1AuLL);
    if (!v7)
    {
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v116, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "strict_calloc";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = 1;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)&buf[24] = size;
      v117 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v117))
      {
LABEL_293:
        __break(1u);
        return;
      }
      free(v117);
      v7 = 0;
    }
    nw_path_shared_necp_fd(v141);
    v6 = necp_client_action();
    if ((int)v6 <= 0)
      break;
LABEL_20:
    v8 = (unsigned __int8 *)v7;
    if (v7)
      goto LABEL_21;
    __nwlog_obj();
    v99 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
    v100 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v148 = 0;
    if (__nwlog_fault(v100, &type, &v148))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v102 = type;
        if (os_log_type_enabled(v101, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
          _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s called with null result", buf, 0xCu);
        }
LABEL_251:

        goto LABEL_252;
      }
      if (!v148)
      {
        __nwlog_obj();
        v101 = objc_claimAutoreleasedReturnValue();
        v118 = type;
        if (os_log_type_enabled(v101, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
          _os_log_impl(&dword_182FBE000, v101, v118, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_251;
      }
      v103 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v101 = objc_claimAutoreleasedReturnValue();
      v104 = type;
      v105 = os_log_type_enabled(v101, type);
      if (!v103)
      {
        if (v105)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
          _os_log_impl(&dword_182FBE000, v101, v104, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }
        goto LABEL_251;
      }
      if (v105)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_client_id";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v103;
        _os_log_impl(&dword_182FBE000, v101, v104, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v103);
    }
LABEL_252:
    if (v100)
      free(v100);
    __nwlog_obj();
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
    v123 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v148 = 0;
    if (__nwlog_fault(v123, &type, &v148))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v124 = objc_claimAutoreleasedReturnValue();
        v125 = type;
        if (os_log_type_enabled(v124, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
          _os_log_impl(&dword_182FBE000, v124, v125, "%{public}s called with null result", buf, 0xCu);
        }
LABEL_269:

        goto LABEL_270;
      }
      if (!v148)
      {
        __nwlog_obj();
        v124 = objc_claimAutoreleasedReturnValue();
        v129 = type;
        if (os_log_type_enabled(v124, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
          _os_log_impl(&dword_182FBE000, v124, v129, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_269;
      }
      v126 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v124 = objc_claimAutoreleasedReturnValue();
      v127 = type;
      v128 = os_log_type_enabled(v124, type);
      if (!v126)
      {
        if (v128)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
          _os_log_impl(&dword_182FBE000, v124, v127, "%{public}s called with null result, no backtrace", buf, 0xCu);
        }
        goto LABEL_269;
      }
      if (v128)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_message_request_in_process_flow_divert";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v126;
        _os_log_impl(&dword_182FBE000, v124, v127, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v126);
    }
LABEL_270:
    v94 = v139;
    if (v123)
    {
      v95 = (char *)v123;
      goto LABEL_200;
    }
LABEL_201:
    if (v94)
      goto LABEL_214;
    memset(uu, 0, sizeof(uu));
LABEL_4:
    uuid_clear(uu);
  }
  v10 = **(_DWORD **)(StatusReg + 8);
  if (v7)
    free(v7);
LABEL_15:
  if (v10 != 22)
    goto LABEL_210;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_path_necp_check_for_updates";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = 48;
    _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, "%{public}s Trying to copy result again for %u flows (max)", buf, 0x12u);
  }

  v7 = (char *)malloc_type_calloc(1uLL, 0x6400uLL, 0xEAFB8F1AuLL);
  if (!v7)
  {
    __nwlog_obj();
    v110 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v110, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "strict_calloc";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 1;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)&buf[24] = 25600;
    v111 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v111))
      goto LABEL_293;
    free(v111);
    v7 = 0;
  }
  nw_path_shared_necp_fd(v141);
  v6 = necp_client_action();
  if ((int)v6 > 0)
    goto LABEL_20;
  v10 = **(_DWORD **)(StatusReg + 8);
  if (v7)
    free(v7);
  if (v10 == 22)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v96 = (id)gLogObj;
    if (os_log_type_enabled(v96, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_necp_check_for_updates";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = 22;
      v97 = v96;
      v98 = OS_LOG_TYPE_ERROR;
      goto LABEL_212;
    }
  }
  else
  {
LABEL_210:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v96 = (id)gLogObj;
    if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_necp_check_for_updates";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v10;
      v97 = v96;
      v98 = OS_LOG_TYPE_DEBUG;
LABEL_212:
      _os_log_impl(&dword_182FBE000, v97, v98, "%{public}s Failed to copy updated result (%d)", buf, 0x12u);
    }
  }

LABEL_214:
}

void sub_1839D0038()
{
  void *v0;

  JUMPOUT(0x1839D005CLL);
}

void sub_1839D0058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL30nw_path_necp_check_for_updatesPU24objcproto13OS_nw_context8NSObjectPA16_hj_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  NWConcrete_nw_path_evaluator *v4;
  NWConcrete_nw_path_evaluator *v5;
  _QWORD *v6;

  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v6 = *(_QWORD **)(a1 + 40);
    if (*((_QWORD *)v4 + 10) == *v6 && *((_QWORD *)v4 + 11) == v6[1])
    {
      nw_path_necp_update_evaluator(v4, *(const unsigned __int8 **)(a1 + 48), *(int *)(a1 + 56), *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
    }
  }

  return 1;
}

void sub_1839D00F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_path_necp_update_evaluator(NWConcrete_nw_path_evaluator *a1, const unsigned __int8 *a2, unint64_t a3, int a4)
{
  NWConcrete_nw_path_evaluator *v7;
  _DWORD *v8;
  NWConcrete_nw_path *v9;
  NWConcrete_nw_path *v10;
  _BOOL4 v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  int v20;
  id v21;
  void *v22;
  NSObject *v23;
  NSObject *v24;
  os_log_type_t v25;
  NWConcrete_nw_path_evaluator *v26;
  char v27;
  NSObject *v28;
  const char *logging_description;
  uint64_t v30;
  _QWORD block[4];
  NWConcrete_nw_path_evaluator *v32;
  NWConcrete_nw_path *v33;
  id v34;
  char v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  _BYTE v41[14];
  __int16 v42;
  const char *v43;
  __int16 v44;
  uint64_t v45;
  __int16 v46;
  NWConcrete_nw_path *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = nw_parameters_copy_context(*((void **)v7 + 1));
  nw_context_assert_queue(v8);
  v9 = nw_path_create(*((void **)v7 + 2), *((void **)v7 + 1));
  v10 = v9;
  if (v9)
  {
    if (a4)
    {
      if (v8)
        v11 = v8[31] == 4;
      else
        v11 = 0;
      v16 = !v11;
    }
    else
    {
      v16 = 0;
    }
    objc_storeStrong((id *)&v9->group_descriptor, *((id *)v7 + 3));
    objc_storeStrong((id *)&v10->browse_descriptor, *((id *)v7 + 4));
    objc_storeStrong((id *)&v10->advertise_descriptor, *((id *)v7 + 5));
    v20 = *((_BYTE *)v10 + 475) & 0xFE | (*((unsigned __int8 *)v7 + 107) >> 1) & 1;
    *((_BYTE *)v10 + 475) = v20;
    v10->custom_ethertype = *((_WORD *)v7 + 52);
    v10->custom_ip_protocol = *((_BYTE *)v7 + 106);
    *((_BYTE *)v10 + 475) = (*((_BYTE *)v7 + 107) >> 1) & 2 | v20 & 0xFD;
    *(_OWORD *)v10->client_id = *((_OWORD *)v7 + 5);
    if (a2 && a3 && nw_path_parse_necp_result(v10, (uint64_t)a2, a3))
    {
      nw_path_snapshot_path(v10);
      os_unfair_lock_lock((os_unfair_lock_t)v7 + 24);
      v21 = *((id *)v7 + 6);
      objc_storeStrong((id *)v7 + 6, v10);
      *((_BYTE *)v10 + 474) = *((_BYTE *)v10 + 474) & 0xF7 | *((_BYTE *)v21 + 474) & 8;
      objc_storeStrong((id *)&v10->override_local_endpoint, *((id *)v21 + 10));
      objc_storeStrong((id *)&v10->override_interface, *((id *)v21 + 11));
      if (!nw_path_is_equal_inner(v10, v21, 0))
        *((_BYTE *)v10 + 474) |= 0x10u;
      v22 = _Block_copy(*((const void **)v7 + 8));
      v23 = *((id *)v7 + 7);
      os_unfair_lock_unlock((os_unfair_lock_t)v7 + 24);
      if (v23)
      {
        block[0] = MEMORY[0x1E0C809B0];
        block[1] = 3221225472;
        block[2] = ___ZL29nw_path_necp_update_evaluatorP28NWConcrete_nw_path_evaluatorPKhmb_block_invoke;
        block[3] = &unk_1E14A9268;
        v32 = v7;
        v35 = v16;
        v33 = v10;
        v34 = v22;
        dispatch_async(v23, block);

      }
      else
      {
        v26 = v7;
        os_unfair_lock_lock((os_unfair_lock_t)v7 + 24);
        v27 = *((_BYTE *)v7 + 107);
        os_unfair_lock_unlock((os_unfair_lock_t)v7 + 24);

        if ((v27 & 0x20) == 0)
        {
          if ((*((_BYTE *)v7 + 107) & 0x40) != 0 && v16)
          {
            if (__nwlog_path_log::onceToken[0] != -1)
              dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44205);
            v28 = (id)gpathLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_INFO))
            {
              logging_description = nw_endpoint_get_logging_description(*((void **)v7 + 2));
              v30 = *((_QWORD *)v7 + 1);
              *(_DWORD *)buf = 136447490;
              v39 = "nw_path_necp_update_evaluator";
              v40 = 1042;
              *(_DWORD *)v41 = 16;
              *(_WORD *)&v41[4] = 2098;
              *(_QWORD *)&v41[6] = (char *)v7 + 80;
              v42 = 2082;
              v43 = logging_description;
              v44 = 2112;
              v45 = v30;
              v46 = 2112;
              v47 = v10;
              _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_INFO, "%{public}s [%{public,uuid_t}.16P %{public}s %@]\n\tpath: %@", buf, 0x3Au);
            }

          }
          (*((void (**)(void *, NWConcrete_nw_path *))v22 + 2))(v22, v10);
        }
      }

    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v39 = "nw_path_necp_update_evaluator";
        v40 = 2048;
        *(_QWORD *)v41 = a3;
        _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s Path failed to parse %zu bytes from NECP", buf, 0x16u);
      }

    }
    goto LABEL_47;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v39 = "nw_path_necp_update_evaluator";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (!__nwlog_fault(v13, &type, &v36))
    goto LABEL_45;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_path_necp_update_evaluator";
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s nw_path_create failed", buf, 0xCu);
    }
LABEL_44:

LABEL_45:
    if (!v13)
      goto LABEL_47;
LABEL_46:
    free(v13);
    goto LABEL_47;
  }
  if (!v36)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v25 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_path_necp_update_evaluator";
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s nw_path_create failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_44;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  v18 = type;
  v19 = os_log_type_enabled(v14, type);
  if (!backtrace_string)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_path_necp_update_evaluator";
      _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s nw_path_create failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_44;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v39 = "nw_path_necp_update_evaluator";
    v40 = 2082;
    *(_QWORD *)v41 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v13)
    goto LABEL_46;
LABEL_47:

}

void sub_1839D0790(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void ___ZL29nw_path_necp_update_evaluatorP28NWConcrete_nw_path_evaluatorPKhmb_block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  char os_unfair_lock_opaque_high;
  NSObject *v6;
  uint64_t v7;
  const char *logging_description;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v2 = *(os_unfair_lock_s **)(a1 + 32);
  v3 = v2 + 24;
  v4 = v2;
  os_unfair_lock_lock(v3);
  os_unfair_lock_opaque_high = HIBYTE(v4[26]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v3);

  if ((os_unfair_lock_opaque_high & 0x20) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 107) & 0x40) != 0 && *(_BYTE *)(a1 + 56))
    {
      if (__nwlog_path_log::onceToken[0] != -1)
        dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44205);
      v6 = (id)gpathLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 32);
        logging_description = nw_endpoint_get_logging_description(*(void **)(v7 + 16));
        v9 = *(_QWORD *)(a1 + 40);
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        v11 = 136447490;
        v12 = "nw_path_necp_update_evaluator_block_invoke";
        v13 = 1042;
        v14 = 16;
        v15 = 2098;
        v16 = v7 + 80;
        v17 = 2082;
        v18 = logging_description;
        v19 = 2112;
        v20 = v10;
        v21 = 2112;
        v22 = v9;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [%{public,uuid_t}.16P %{public}s %@]\n\tpath: %@", (uint8_t *)&v11, 0x3Au);
      }

    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
}

void sub_1839D095C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_network_is_satisfied(NWConcrete_nw_path *a1)
{
  NWConcrete_nw_path *v1;
  _BOOL8 is_satisfied_update_reason;

  v1 = a1;
  is_satisfied_update_reason = nw_path_network_is_satisfied_update_reason(v1, 0);

  return is_satisfied_update_reason;
}

void sub_1839D09A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_flow_is_equal(void *a1, void *a2)
{
  void **v3;
  void **v4;
  void **v5;
  _BOOL8 v6;
  BOOL v7;
  BOOL v8;
  BOOL v9;
  unsigned int v10;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  v6 = v3 == v4;
  if (v3 != v4 && v3 && v4)
    v6 = ((*((_BYTE *)v4 + 185) ^ *((_BYTE *)v3 + 185)) & 3) == 0
      && *((_DWORD *)v3 + 42) == *((_DWORD *)v4 + 42)
      && (v3[10] == v4[10] ? (v7 = v3[11] == v4[11]) : (v7 = 0),
          v7 ? (v8 = *((unsigned int *)v3 + 24) == (unint64_t)*((unsigned int *)v4 + 24)) : (v8 = 0),
          v8
       && (v3[16] == v4[16] ? (v9 = v3[17] == v4[17]) : (v9 = 0),
           v9
        && nw_interface_shallow_compare(v3[2], v4[2])
        && nw_endpoint_is_equal(v3[4], v5[4], 31)
        && nw_endpoint_is_equal(v3[5], v5[5], 31)
        && nw_buffer_is_equal((const char *)v3[1], *((unsigned int *)v3 + 40), (const char *)v5[1], *((unsigned int *)v5 + 40))&& (v10 = *((unsigned __int8 *)v5 + 185) ^ *((unsigned __int8 *)v3 + 185), (v10 & 0xC) == 0)&& *((unsigned __int8 *)v3 + 184) == *((unsigned __int8 *)v5 + 184)))&& *(void **)((char *)v3 + 108) == *(void **)((char *)v5 + 108)&& *(void **)((char *)v3 + 116) == *(void **)((char *)v5 + 116)&& v10 < 0x10;

  return v6;
}

void sub_1839D0AFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_buffer_is_equal(const char *__s1, size_t __n, const char *__s2, uint64_t a4)
{
  BOOL v5;
  _BOOL8 result;

  if (__n != a4)
    return 0;
  v5 = __s1 == __s2;
  result = __s1 == __s2;
  if (!v5 && __s1 && __s2)
    return !__n || memcmp(__s1, __s2, __n) == 0;
  return result;
}

xpc_object_t nw_path_copy_all_client_ids()
{
  id v0;
  int v1;
  int v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v16;
  os_log_type_t v17;
  char v19;
  os_log_type_t v20[7];
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  _BYTE v25[14];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v0 = (id)nw_context_copy_implicit_context::implicit_context;
  v1 = nw_path_shared_necp_observer_fd(v0);

  if (v1 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v23 = "nw_path_copy_all_client_ids";
    v4 = (char *)_os_log_send_and_compose_impl();

    v20[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if ((__nwlog_fault(v4, v20, &type) & 1) == 0)
      goto LABEL_40;
    if (v20[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = v20[0];
      if (os_log_type_enabled(v8, v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_path_copy_all_client_ids";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s nw_path_shared_necp_observer_fd failed", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v13 = v20[0];
      v14 = os_log_type_enabled(v8, v20[0]);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_path_copy_all_client_ids";
          v24 = 2082;
          *(_QWORD *)v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s nw_path_shared_necp_observer_fd failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        goto LABEL_26;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_path_copy_all_client_ids";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s nw_path_shared_necp_observer_fd failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v17 = v20[0];
      if (os_log_type_enabled(v8, v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_path_copy_all_client_ids";
        _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s nw_path_shared_necp_observer_fd failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_40:
    if (!v4)
      return 0;
LABEL_41:
    free(v4);
    return 0;
  }
  *(_DWORD *)v20 = 0;
  if (necp_client_action())
  {
    v2 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_path_copy_all_client_ids";
    v24 = 1024;
    *(_DWORD *)v25 = v2;
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault(v4, &type, &v19))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_path_copy_all_client_ids";
        v24 = 1024;
        *(_DWORD *)v25 = v2;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s NECP_CLIENT_ACTION_COPY_LIST %{darwin.errno}d", buf, 0x12u);
      }
LABEL_36:

      goto LABEL_40;
    }
    if (!v19)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v16 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_path_copy_all_client_ids";
        v24 = 1024;
        *(_DWORD *)v25 = v2;
        _os_log_impl(&dword_182FBE000, v5, v16, "%{public}s NECP_CLIENT_ACTION_COPY_LIST %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v11 = type;
    v12 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_path_copy_all_client_ids";
        v24 = 1024;
        *(_DWORD *)v25 = v2;
        _os_log_impl(&dword_182FBE000, v5, v11, "%{public}s NECP_CLIENT_ACTION_COPY_LIST %{darwin.errno}d, no backtrace", buf, 0x12u);
      }
      goto LABEL_36;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446722;
      v23 = "nw_path_copy_all_client_ids";
      v24 = 1024;
      *(_DWORD *)v25 = v2;
      *(_WORD *)&v25[4] = 2082;
      *(_QWORD *)&v25[6] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v11, "%{public}s NECP_CLIENT_ACTION_COPY_LIST %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
    }

LABEL_26:
    free(backtrace_string);
    if (!v4)
      return 0;
    goto LABEL_41;
  }
  return xpc_array_create(0, 0);
}

void sub_1839D17E0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_path_shared_necp_observer_fd(void *a1)
{
  id v1;
  uint64_t globals_for_path;
  os_unfair_lock_s *v3;
  uint64_t v4;
  int v5;
  int v6;
  id v7;
  int v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  int v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  int v21;
  const char *backtrace_string;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  os_log_type_t v26;
  int v27;
  os_log_type_t v28;
  os_log_type_t v29;
  int v30;
  os_log_type_t v31;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  _DWORD v40[7];

  *(_QWORD *)&v40[5] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  globals_for_path = nw_context_get_globals_for_path(v1);
  v3 = (os_unfair_lock_s *)(globals_for_path + 120);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 120));
  v4 = *(unsigned int *)(globals_for_path + 136);
  if ((v4 & 0x80000000) == 0)
    goto LABEL_2;
  v5 = necp_open();
  *(_DWORD *)(globals_for_path + 136) = v5;
  if (v5 < 0)
  {
    v13 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    os_unfair_lock_unlock(v3);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v36 = "nw_path_shared_necp_observer_fd";
    v37 = 1024;
    v38 = v13;
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v9, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_path_shared_necp_observer_fd";
          v37 = 1024;
          v38 = v13;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s necp_open observer failed %{darwin.errno}d", buf, 0x12u);
        }
      }
      else if (v33)
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          v23 = (char *)backtrace_string;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = (id)gLogObj;
          v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)buf = 136446722;
            v36 = "nw_path_shared_necp_observer_fd";
            v37 = 1024;
            v38 = v13;
            v39 = 2082;
            *(_QWORD *)v40 = v23;
            _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s necp_open observer failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v23);
          if (!v9)
            goto LABEL_42;
          goto LABEL_41;
        }
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_path_shared_necp_observer_fd";
          v37 = 1024;
          v38 = v13;
          _os_log_impl(&dword_182FBE000, v15, v31, "%{public}s necp_open observer failed %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v28 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446466;
          v36 = "nw_path_shared_necp_observer_fd";
          v37 = 1024;
          v38 = v13;
          _os_log_impl(&dword_182FBE000, v15, v28, "%{public}s necp_open observer failed %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
LABEL_40:
    if (!v9)
    {
LABEL_42:
      v4 = 0xFFFFFFFFLL;
      goto LABEL_43;
    }
LABEL_41:
    free(v9);
    goto LABEL_42;
  }
  arc4random_buf((void *)(globals_for_path + 16), 8uLL);
  if (change_fdguard_np())
  {
    v6 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    close(*(_DWORD *)(globals_for_path + 136));
    *(_DWORD *)(globals_for_path + 136) = -1;
    os_unfair_lock_unlock(v3);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v8 = *(_DWORD *)(globals_for_path + 136);
    *(_DWORD *)buf = 136446722;
    v36 = "nw_path_shared_necp_observer_fd";
    v37 = 1024;
    v38 = v8;
    v39 = 1024;
    v40[0] = v6;
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v9, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = *(_DWORD *)(globals_for_path + 136);
          *(_DWORD *)buf = 136446722;
          v36 = "nw_path_shared_necp_observer_fd";
          v37 = 1024;
          v38 = v12;
          v39 = 1024;
          v40[0] = v6;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s Failed to guard necp observer fd %d %{darwin.errno}d", buf, 0x18u);
        }
      }
      else if (v33)
      {
        v17 = __nw_create_backtrace_string();
        if (v17)
        {
          v18 = (char *)v17;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            v21 = *(_DWORD *)(globals_for_path + 136);
            *(_DWORD *)buf = 136446978;
            v36 = "nw_path_shared_necp_observer_fd";
            v37 = 1024;
            v38 = v21;
            v39 = 1024;
            v40[0] = v6;
            LOWORD(v40[1]) = 2082;
            *(_QWORD *)((char *)&v40[1] + 2) = v18;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s Failed to guard necp observer fd %d %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(v18);
          if (!v9)
            goto LABEL_42;
          goto LABEL_41;
        }
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v10, type))
        {
          v30 = *(_DWORD *)(globals_for_path + 136);
          *(_DWORD *)buf = 136446722;
          v36 = "nw_path_shared_necp_observer_fd";
          v37 = 1024;
          v38 = v30;
          v39 = 1024;
          v40[0] = v6;
          _os_log_impl(&dword_182FBE000, v10, v29, "%{public}s Failed to guard necp observer fd %d %{darwin.errno}d, no backtrace", buf, 0x18u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v10, type))
        {
          v27 = *(_DWORD *)(globals_for_path + 136);
          *(_DWORD *)buf = 136446722;
          v36 = "nw_path_shared_necp_observer_fd";
          v37 = 1024;
          v38 = v27;
          v39 = 1024;
          v40[0] = v6;
          _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s Failed to guard necp observer fd %d %{darwin.errno}d, backtrace limit exceeded", buf, 0x18u);
        }
      }

    }
    goto LABEL_40;
  }
  *(_BYTE *)(globals_for_path + 140) |= 4u;
  v4 = *(unsigned int *)(globals_for_path + 136);
LABEL_2:
  os_unfair_lock_unlock(v3);
LABEL_43:

  return v4;
}

void sub_1839D1F00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path *nw_path_create_browse(void *a1, void *a2)
{
  id v4;
  id v5;
  NWConcrete_nw_path *v6;
  NWConcrete_nw_path *v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  nw_parameters_t v12;
  OS_nw_parameters *parameters;
  NWConcrete_nw_path *v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  id v18;
  os_log_type_t v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v6 = objc_alloc_init(NWConcrete_nw_path);
  v7 = v6;
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_create_browse";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v9, &type, &v25))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create_browse";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (!v25)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create_browse";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v16 = type;
    v17 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create_browse";
        _os_log_impl(&dword_182FBE000, v10, v16, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_path_create_browse";
      v29 = 2082;
      v30 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v16, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_15;
  }
  if (!v5)
  {
    v12 = nw_parameters_create();
    parameters = v7->parameters;
    v7->parameters = (OS_nw_parameters *)v12;

    if (v7->parameters)
      goto LABEL_10;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_create_browse";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v9, &type, &v25))
    {
LABEL_39:
      if (!v9)
      {
LABEL_41:
        v14 = 0;
        goto LABEL_42;
      }
LABEL_40:
      free(v9);
      goto LABEL_41;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create_browse";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
LABEL_38:

      goto LABEL_39;
    }
    if (!v25)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create_browse";
        _os_log_impl(&dword_182FBE000, v10, v23, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_create_browse";
        _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_path_create_browse";
      v29 = 2082;
      v30 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_15:

    free(backtrace_string);
    if (!v9)
      goto LABEL_41;
    goto LABEL_40;
  }
  objc_storeStrong((id *)&v6->parameters, a2);
LABEL_10:
  objc_storeStrong((id *)&v7->browse_descriptor, a1);
  v14 = v7;
LABEL_42:

  return v14;
}

void sub_1839D2498(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_observer *nw_path_create_observer(void *a1, void *a2)
{
  id v4;
  id v5;
  NWConcrete_nw_path_observer *v6;
  int v7;
  void *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  _DWORD *v12;
  void *v13;
  void *v14;
  id v15;
  NWConcrete_nw_path_observer *v16;
  uint64_t v17;
  uint64_t v18;
  NWConcrete_nw_path_observer *v19;
  id v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  int v24;
  id v25;
  os_log_type_t v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  _BOOL4 v31;
  id v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  os_log_type_t v36;
  char *backtrace_string;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  os_log_type_t v41;
  void *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  char *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  os_log_type_t v50;
  _QWORD v51[4];
  NWConcrete_nw_path_observer *v52;
  char v53;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  _WORD v58[17];

  *(_QWORD *)&v58[13] = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  nw_allow_use_of_dispatch_internal();
  if (v5)
  {
    v6 = objc_alloc_init(NWConcrete_nw_path_observer);
    if (v6)
    {
      v7 = necp_open();
      if ((v7 & 0x80000000) == 0)
      {
        v8 = _Block_copy(v5);
        v9 = (void *)*((_QWORD *)v6 + 2);
        *((_QWORD *)v6 + 2) = v8;

        objc_storeStrong((id *)v6 + 1, a1);
        v10 = nw_dictionary_create();
        v11 = (void *)*((_QWORD *)v6 + 3);
        *((_QWORD *)v6 + 3) = v10;

        v12 = nw_fd_wrapper_create(v7);
        v13 = (void *)*((_QWORD *)v6 + 4);
        *((_QWORD *)v6 + 4) = v12;

        v14 = (void *)*((_QWORD *)v6 + 4);
        if (v14)
        {
          nw_fd_wrapper_guard(v14);
          if (nw_context_copy_implicit_context::onceToken[0] != -1)
            dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
          v15 = (id)nw_context_copy_implicit_context::implicit_context;
          v51[0] = MEMORY[0x1E0C809B0];
          v51[1] = 3221225472;
          v51[2] = __nw_path_create_observer_block_invoke;
          v51[3] = &unk_1E14ACFD0;
          v16 = v6;
          v52 = v16;
          *((_QWORD *)v16 + 5) = nw_queue_context_create_source(v15, v7, 1, 0, v51, 0);

          v18 = *((_QWORD *)v16 + 5);
          if (v18)
          {
            nw_queue_activate_source(v18, v17);
            v19 = v16;
LABEL_65:

            goto LABEL_66;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v32 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v56 = "nw_path_create_observer";
          v33 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v53 = 0;
          if (__nwlog_fault(v33, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v34 = (id)gLogObj;
              v35 = type;
              if (os_log_type_enabled(v34, type))
              {
                *(_DWORD *)buf = 136446210;
                v56 = "nw_path_create_observer";
                _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s nw_queue_context_create_source failed", buf, 0xCu);
              }
            }
            else if (v53)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v34 = objc_claimAutoreleasedReturnValue();
              v38 = type;
              v39 = os_log_type_enabled(v34, type);
              if (backtrace_string)
              {
                if (v39)
                {
                  *(_DWORD *)buf = 136446466;
                  v56 = "nw_path_create_observer";
                  v57 = 2082;
                  *(_QWORD *)v58 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v34, v38, "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(backtrace_string);
                if (!v33)
                  goto LABEL_64;
                goto LABEL_63;
              }
              if (v39)
              {
                *(_DWORD *)buf = 136446210;
                v56 = "nw_path_create_observer";
                _os_log_impl(&dword_182FBE000, v34, v38, "%{public}s nw_queue_context_create_source failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v34 = objc_claimAutoreleasedReturnValue();
              v41 = type;
              if (os_log_type_enabled(v34, type))
              {
                *(_DWORD *)buf = 136446210;
                v56 = "nw_path_create_observer";
                _os_log_impl(&dword_182FBE000, v34, v41, "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
          if (!v33)
          {
LABEL_64:
            v19 = 0;
            goto LABEL_65;
          }
LABEL_63:
          free(v33);
          goto LABEL_64;
        }
LABEL_55:
        v19 = 0;
LABEL_66:

        goto LABEL_67;
      }
      v24 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v25 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v56 = "nw_path_create_observer";
      v57 = 1024;
      *(_DWORD *)v58 = v24;
      v21 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if (!__nwlog_fault(v21, &type, &v53))
        goto LABEL_53;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_path_create_observer";
          v57 = 1024;
          *(_DWORD *)v58 = v24;
          _os_log_impl(&dword_182FBE000, v22, v26, "%{public}s necp_open(NECP_OPEN_FLAG_OBSERVER | NECP_OPEN_FLAG_PUSH_OBSERVER) %{darwin.errno}d", buf, 0x12u);
        }
LABEL_52:

LABEL_53:
        if (!v21)
          goto LABEL_55;
LABEL_54:
        free(v21);
        goto LABEL_55;
      }
      if (!v53)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v40 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_path_create_observer";
          v57 = 1024;
          *(_DWORD *)v58 = v24;
          _os_log_impl(&dword_182FBE000, v22, v40, "%{public}s necp_open(NECP_OPEN_FLAG_OBSERVER | NECP_OPEN_FLAG_PUSH_OBSERVER) %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_52;
      }
      v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      v30 = type;
      v31 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_path_create_observer";
          v57 = 1024;
          *(_DWORD *)v58 = v24;
          _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s necp_open(NECP_OPEN_FLAG_OBSERVER | NECP_OPEN_FLAG_PUSH_OBSERVER) %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
        goto LABEL_52;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446722;
        v56 = "nw_path_create_observer";
        v57 = 1024;
        *(_DWORD *)v58 = v24;
        v58[2] = 2082;
        *(_QWORD *)&v58[3] = v27;
        _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s necp_open(NECP_OPEN_FLAG_OBSERVER | NECP_OPEN_FLAG_PUSH_OBSERVER) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v56 = "nw_path_create_observer";
      v21 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if (!__nwlog_fault(v21, &type, &v53))
        goto LABEL_53;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_path_create_observer";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_observer) alloc] init] failed", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (!v53)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v36 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_path_create_observer";
          _os_log_impl(&dword_182FBE000, v22, v36, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_observer) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_52;
      }
      v27 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      v28 = type;
      v29 = os_log_type_enabled(v22, type);
      if (!v27)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_path_create_observer";
          _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_observer) alloc] init] failed, no backtrace", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        v56 = "nw_path_create_observer";
        v57 = 2082;
        *(_QWORD *)v58 = v27;
        _os_log_impl(&dword_182FBE000, v22, v28, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_observer) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v27);
    if (!v21)
      goto LABEL_55;
    goto LABEL_54;
  }
  __nwlog_obj();
  v43 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v56 = "nw_path_create_observer";
  v44 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v53 = 0;
  if (__nwlog_fault(v44, &type, &v53))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v45, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_path_create_observer";
        _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v53)
    {
      v47 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      v49 = os_log_type_enabled(v45, type);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_path_create_observer";
          v57 = 2082;
          *(_QWORD *)v58 = v47;
          _os_log_impl(&dword_182FBE000, v45, v48, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v47);
        goto LABEL_84;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_path_create_observer";
        _os_log_impl(&dword_182FBE000, v45, v48, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v45 = objc_claimAutoreleasedReturnValue();
      v50 = type;
      if (os_log_type_enabled(v45, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_path_create_observer";
        _os_log_impl(&dword_182FBE000, v45, v50, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_84:
  if (v44)
    free(v44);
  v19 = 0;
LABEL_67:

  return v19;
}

void sub_1839D2FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void __nw_path_create_observer_block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void *v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  int fd;
  void (**v7)(void *, __int128 *, _QWORD);
  NSObject *v8;
  int v9;
  void *v10;
  os_unfair_lock_s *v11;
  BOOL v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  NSObject *v20;
  void *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void *v26;
  os_log_type_t type[8];
  uint64_t v28;
  uint64_t (*v29)(_QWORD *);
  void *v30;
  os_unfair_lock_s *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  void (*v38)(uint64_t);
  id v39;
  _QWORD v40[4];
  _BYTE block[24];
  void *v42;
  os_unfair_lock_s *v43;
  void (**v44)(void *, __int128 *, _QWORD);
  uint64_t *v45;
  uint64_t *v46;
  __int128 v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v1 = (os_unfair_lock_s *)*(id *)(a1 + 32);
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)block = 136446210;
    *(_QWORD *)&block[4] = "nw_path_observer_update";
    v14 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v34) = 0;
    if (__nwlog_fault(v14, type, &v34))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type[0];
        if (os_log_type_enabled(v15, type[0]))
        {
          *(_DWORD *)block = 136446210;
          *(_QWORD *)&block[4] = "nw_path_observer_update";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null observer", block, 0xCu);
        }
      }
      else if ((_BYTE)v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v18 = type[0];
        v19 = os_log_type_enabled(v15, type[0]);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)block = 136446466;
            *(_QWORD *)&block[4] = "nw_path_observer_update";
            *(_WORD *)&block[12] = 2082;
            *(_QWORD *)&block[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null observer, dumping backtrace:%{public}s", block, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }
        if (v19)
        {
          *(_DWORD *)block = 136446210;
          *(_QWORD *)&block[4] = "nw_path_observer_update";
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null observer, no backtrace", block, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v22 = type[0];
        if (os_log_type_enabled(v15, type[0]))
        {
          *(_DWORD *)block = 136446210;
          *(_QWORD *)&block[4] = "nw_path_observer_update";
          _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null observer, backtrace limit exceeded", block, 0xCu);
        }
      }

    }
LABEL_31:
    if (v14)
      free(v14);
    goto LABEL_12;
  }
  v47 = 0uLL;
  v40[0] = 0;
  v40[1] = v40;
  v40[2] = 0x2020000000;
  v40[3] = &v47;
  v34 = 0;
  v35 = &v34;
  v36 = 0x3032000000;
  v37 = __Block_byref_object_copy__67271;
  v38 = __Block_byref_object_dispose__67272;
  v39 = 0;
  os_unfair_lock_lock(v1 + 12);
  v3 = *(void **)&v2[8]._os_unfair_lock_opaque;
  v4 = MEMORY[0x1E0C809B0];
  *(_QWORD *)type = MEMORY[0x1E0C809B0];
  v28 = 3221225472;
  v29 = ___ZL23nw_path_observer_updateP27NWConcrete_nw_path_observer_block_invoke;
  v30 = &unk_1E14A9150;
  v5 = v2;
  v31 = v5;
  v32 = &v34;
  v33 = v40;
  fd = nw_fd_wrapper_get_fd(v3, type);
  v7 = (void (**)(void *, __int128 *, _QWORD))_Block_copy(*(const void **)&v5[4]._os_unfair_lock_opaque);
  v8 = *(id *)&v5[2]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v2 + 12);
  if (v7)
    v9 = fd;
  else
    v9 = 0;
  if (v9 != 1)
    goto LABEL_11;
  if (!v8)
  {
    v11 = v5;
    os_unfair_lock_lock(v2 + 12);
    v12 = *(_QWORD *)&v5[4]._os_unfair_lock_opaque == 0;
    os_unfair_lock_unlock(v2 + 12);

    if (!v12)
      v7[2](v7, &v47, v35[5]);
    goto LABEL_11;
  }
  v23 = 0;
  v24 = &v23;
  v25 = 0x2020000000;
  v26 = 0;
  v10 = malloc_type_malloc(0x10uLL, 0xF2B69DE5uLL);
  if (v10)
  {
LABEL_8:
    v26 = v10;
    *(_OWORD *)v24[3] = v47;
    *(_QWORD *)block = v4;
    *(_QWORD *)&block[8] = 3221225472;
    *(_QWORD *)&block[16] = ___ZL23nw_path_observer_updateP27NWConcrete_nw_path_observer_block_invoke_420;
    v42 = &unk_1E14A9178;
    v43 = v5;
    v44 = v7;
    v45 = &v23;
    v46 = &v34;
    dispatch_async(v8, block);

    _Block_object_dispose(&v23, 8);
LABEL_11:

    _Block_object_dispose(&v34, 8);
    _Block_object_dispose(v40, 8);
LABEL_12:

    return;
  }
  __nwlog_obj();
  v20 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)block = 136446466;
  *(_QWORD *)&block[4] = "strict_malloc";
  *(_WORD *)&block[12] = 2048;
  *(_QWORD *)&block[14] = 16;
  v21 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v21))
  {
    free(v21);
    goto LABEL_8;
  }
  __break(1u);
}

void sub_1839D355C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30,char a31)
{
  void *v31;
  void *v32;
  void *v33;

  _Block_object_dispose(&a25, 8);
  _Block_object_dispose(&a31, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL23nw_path_observer_updateP27NWConcrete_nw_path_observer_block_invoke(_QWORD *a1)
{
  int v2;
  unsigned int v3;
  nw_parameters_t v4;
  nw_parameters_t v5;
  NWConcrete_nw_path *browse;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  int v11;
  id v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  id *v17;
  uint64_t v18;
  id *v19;
  id v20;
  id v21;
  id v22;
  NWConcrete_nw_path *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  id v27;
  void *v28;
  NSObject *v29;
  os_log_type_t v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  os_log_type_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  id v45;
  os_log_type_t v46;
  char *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  os_log_type_t v50;
  _BOOL4 v51;
  NWConcrete_nw_path *v52;
  char v53;
  void *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  char *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  os_log_type_t v61;
  _BOOL4 v62;
  os_log_type_t v63;
  os_log_type_t v64;
  char *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  os_log_type_t v68;
  os_log_type_t v69;
  os_log_type_t v70;
  char v72;
  os_log_type_t v73;
  __int16 v74;
  os_log_type_t v75[3];
  char v76;
  id v77;
  id v78;
  id obj;
  os_log_type_t v80[8];
  os_log_type_t type[4];
  const char *v82;
  __int16 v83;
  char *v84;
  uuid_string_t out;
  int v86;
  _BYTE v87[1536];
  unsigned __int8 uu[16];
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  memset(uu, 0, sizeof(uu));
  bzero(&v86, 0x604uLL);
  v2 = necp_client_action();
  v3 = v2;
  if (v2 < 4)
  {
    if (v2 < 0)
    {
      v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      *(_DWORD *)out = 136446466;
      *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
      *(_WORD *)&out[12] = 1024;
      *(_DWORD *)&out[14] = v11;
      v8 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v80[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v8, type, v80))
        goto LABEL_78;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v13 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v11;
          _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s necp_client_action(NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE) %{darwin.errno}d", (uint8_t *)out, 0x12u);
        }
        goto LABEL_77;
      }
      if (v80[0] == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v34 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v11;
          _os_log_impl(&dword_182FBE000, v9, v34, "%{public}s necp_client_action(NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE) %{darwin.errno}d, backtrace limit exceeded", (uint8_t *)out, 0x12u);
        }
        goto LABEL_77;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v24 = type[0];
      v25 = os_log_type_enabled(v9, type[0]);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v11;
          _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s necp_client_action(NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE) %{darwin.errno}d, no backtrace", (uint8_t *)out, 0x12u);
        }
        goto LABEL_77;
      }
      if (v25)
      {
        *(_DWORD *)out = 136446722;
        *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v11;
        *(_WORD *)&out[18] = 2082;
        *(_QWORD *)&out[20] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s necp_client_action(NECP_CLIENT_ACTION_COPY_CLIENT_UPDATE) %{darwin.errno}d, dumping backtrace:%{public}s", (uint8_t *)out, 0x1Cu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      *(_DWORD *)out = 136446466;
      *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
      *(_WORD *)&out[12] = 1024;
      *(_DWORD *)&out[14] = v3;
      v8 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v80[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v8, type, v80))
        goto LABEL_78;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v3;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s Path observer result cannot hold update header (%d)", (uint8_t *)out, 0x12u);
        }
LABEL_77:

LABEL_78:
        if (!v8)
          return 0;
LABEL_79:
        free(v8);
        return 0;
      }
      if (v80[0] == OS_LOG_TYPE_DEFAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v26 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v3;
          _os_log_impl(&dword_182FBE000, v9, v26, "%{public}s Path observer result cannot hold update header (%d), backtrace limit exceeded", (uint8_t *)out, 0x12u);
        }
        goto LABEL_77;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v15 = type[0];
      v16 = os_log_type_enabled(v9, type[0]);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)out = 136446466;
          *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
          *(_WORD *)&out[12] = 1024;
          *(_DWORD *)&out[14] = v3;
          _os_log_impl(&dword_182FBE000, v9, v15, "%{public}s Path observer result cannot hold update header (%d), no backtrace", (uint8_t *)out, 0x12u);
        }
        goto LABEL_77;
      }
      if (v16)
      {
        *(_DWORD *)out = 136446722;
        *(_QWORD *)&out[4] = "nw_path_observer_update_block_invoke";
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v3;
        *(_WORD *)&out[18] = 2082;
        *(_QWORD *)&out[20] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v15, "%{public}s Path observer result cannot hold update header (%d), dumping backtrace:%{public}s", (uint8_t *)out, 0x1Cu);
      }
    }

    free(backtrace_string);
    if (!v8)
      return 0;
    goto LABEL_79;
  }
  memset(out, 0, sizeof(out));
  uuid_unparse(uu, out);
  if (v86 != 3)
  {
    if (v86 != 2)
    {
      if (v86 == 1)
      {
        obj = 0;
        *(_QWORD *)v80 = 0;
        v77 = 0;
        v78 = 0;
        v4 = nw_parameters_create();
        v5 = v4;
        if (v4)
        {
          v76 = 0;
          *(_WORD *)v75 = 0;
          v74 = 0;
          if ((nw_path_parse_necp_parameters(v4, (void **)v80, &obj, &v78, &v77, &v76, v75, (char *)&v74 + 1, &v74, (uint64_t)v87, v3 - 4) & 1) != 0)
          {
            if (v78)
              browse = nw_path_create_browse(v78, v5);
            else
              browse = nw_path_create(*(void **)v80, v5);
            v52 = browse;
            if (browse)
            {
              objc_storeStrong((id *)&browse->group_descriptor, obj);
              objc_storeStrong((id *)&v52->advertise_descriptor, v77);
              v53 = *((_BYTE *)v52 + 475) & 0xFC | v76;
              v52->custom_ethertype = *(_WORD *)v75;
              v52->custom_ip_protocol = HIBYTE(v74);
              *((_BYTE *)v52 + 475) = v53 | (2 * v74);
              *(_OWORD *)v52->client_id = *(_OWORD *)uu;
              nw_dictionary_set_value(*(_QWORD *)(a1[4] + 24), out, v52);
LABEL_149:

LABEL_150:
              return 0;
            }
            __nwlog_obj();
            v54 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)type = 136446210;
            v82 = "nw_path_observer_update_block_invoke";
            v55 = (char *)_os_log_send_and_compose_impl();

            v73 = OS_LOG_TYPE_ERROR;
            v72 = 0;
            if (__nwlog_fault(v55, &v73, &v72))
            {
              if (v73 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v56 = objc_claimAutoreleasedReturnValue();
                v57 = v73;
                if (os_log_type_enabled(v56, v73))
                {
                  *(_DWORD *)type = 136446210;
                  v82 = "nw_path_observer_update_block_invoke";
                  _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s nw_path_create failed", (uint8_t *)type, 0xCu);
                }
              }
              else if (v72)
              {
                v65 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v56 = objc_claimAutoreleasedReturnValue();
                v66 = v73;
                v67 = os_log_type_enabled(v56, v73);
                if (v65)
                {
                  if (v67)
                  {
                    *(_DWORD *)type = 136446466;
                    v82 = "nw_path_observer_update_block_invoke";
                    v83 = 2082;
                    v84 = v65;
                    _os_log_impl(&dword_182FBE000, v56, v66, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
                  }

                  free(v65);
                  goto LABEL_147;
                }
                if (v67)
                {
                  *(_DWORD *)type = 136446210;
                  v82 = "nw_path_observer_update_block_invoke";
                  _os_log_impl(&dword_182FBE000, v56, v66, "%{public}s nw_path_create failed, no backtrace", (uint8_t *)type, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v56 = objc_claimAutoreleasedReturnValue();
                v70 = v73;
                if (os_log_type_enabled(v56, v73))
                {
                  *(_DWORD *)type = 136446210;
                  v82 = "nw_path_observer_update_block_invoke";
                  _os_log_impl(&dword_182FBE000, v56, v70, "%{public}s nw_path_create failed, backtrace limit exceeded", (uint8_t *)type, 0xCu);
                }
              }

            }
LABEL_147:
            if (v55)
              free(v55);
            goto LABEL_149;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          *(_DWORD *)type = 136446210;
          v82 = "nw_path_observer_update_block_invoke";
          v28 = (void *)_os_log_send_and_compose_impl();

          v73 = OS_LOG_TYPE_ERROR;
          v72 = 0;
          if (!__nwlog_fault((const char *)v28, &v73, &v72))
          {
LABEL_124:
            if (v28)
              free(v28);
            goto LABEL_150;
          }
          if (v73 == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v32 = objc_claimAutoreleasedReturnValue();
            v33 = v73;
            if (os_log_type_enabled(v32, v73))
            {
              *(_DWORD *)type = 136446210;
              v82 = "nw_path_observer_update_block_invoke";
              _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s nw_path_parse_necp_parameters failed", (uint8_t *)type, 0xCu);
            }
LABEL_123:

            goto LABEL_124;
          }
          if (!v72)
          {
            __nwlog_obj();
            v32 = objc_claimAutoreleasedReturnValue();
            v64 = v73;
            if (os_log_type_enabled(v32, v73))
            {
              *(_DWORD *)type = 136446210;
              v82 = "nw_path_observer_update_block_invoke";
              _os_log_impl(&dword_182FBE000, v32, v64, "%{public}s nw_path_parse_necp_parameters failed, backtrace limit exceeded", (uint8_t *)type, 0xCu);
            }
            goto LABEL_123;
          }
          v47 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v32 = objc_claimAutoreleasedReturnValue();
          v50 = v73;
          v51 = os_log_type_enabled(v32, v73);
          if (!v47)
          {
            if (v51)
            {
              *(_DWORD *)type = 136446210;
              v82 = "nw_path_observer_update_block_invoke";
              _os_log_impl(&dword_182FBE000, v32, v50, "%{public}s nw_path_parse_necp_parameters failed, no backtrace", (uint8_t *)type, 0xCu);
            }
            goto LABEL_123;
          }
          if (v51)
          {
            *(_DWORD *)type = 136446466;
            v82 = "nw_path_observer_update_block_invoke";
            v83 = 2082;
            v84 = v47;
            _os_log_impl(&dword_182FBE000, v32, v50, "%{public}s nw_path_parse_necp_parameters failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
          }

LABEL_85:
          free(v47);
          goto LABEL_124;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v27 = (id)gLogObj;
        *(_DWORD *)type = 136446210;
        v82 = "nw_path_observer_update_block_invoke";
        v28 = (void *)_os_log_send_and_compose_impl();

        v75[0] = OS_LOG_TYPE_ERROR;
        v76 = 0;
        if (!__nwlog_fault((const char *)v28, v75, &v76))
          goto LABEL_124;
        if (v75[0] == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v29 = (id)gLogObj;
          v30 = v75[0];
          if (os_log_type_enabled(v29, v75[0]))
          {
            *(_DWORD *)type = 136446210;
            v82 = "nw_path_observer_update_block_invoke";
            _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s nw_parameters_create failed", (uint8_t *)type, 0xCu);
          }
        }
        else if (v76)
        {
          v47 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v48 = v75[0];
          v49 = os_log_type_enabled(v29, v75[0]);
          if (v47)
          {
            if (v49)
            {
              *(_DWORD *)type = 136446466;
              v82 = "nw_path_observer_update_block_invoke";
              v83 = 2082;
              v84 = v47;
              _os_log_impl(&dword_182FBE000, v29, v48, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
            }

            goto LABEL_85;
          }
          if (v49)
          {
            *(_DWORD *)type = 136446210;
            v82 = "nw_path_observer_update_block_invoke";
            _os_log_impl(&dword_182FBE000, v29, v48, "%{public}s nw_parameters_create failed, no backtrace", (uint8_t *)type, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v29 = objc_claimAutoreleasedReturnValue();
          v63 = v75[0];
          if (os_log_type_enabled(v29, v75[0]))
          {
            *(_DWORD *)type = 136446210;
            v82 = "nw_path_observer_update_block_invoke";
            _os_log_impl(&dword_182FBE000, v29, v63, "%{public}s nw_parameters_create failed, backtrace limit exceeded", (uint8_t *)type, 0xCu);
          }
        }

        goto LABEL_124;
      }
      return 0;
    }
    v19 = (id *)nw_dictionary_copy_value(*(_QWORD *)(a1[4] + 24), (uint64_t)out);
    v17 = v19;
    if (v19)
    {
      v20 = v19[3];
      v21 = v17[5];
      v22 = v17[2];
      if (v21)
        v23 = nw_path_create_browse(v21, v22);
      else
        v23 = nw_path_create(v20, v22);
      v35 = *(_QWORD *)(a1[5] + 8);
      v36 = *(void **)(v35 + 40);
      *(_QWORD *)(v35 + 40) = v23;

      v37 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
      if (v37)
      {
        objc_storeStrong((id *)(v37 + 32), v17[4]);
        v38 = a1 + 5;
        objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40) + 48), v17[6]);
        v39 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
        *(_BYTE *)(v39 + 475) = *(_BYTE *)(v39 + 475) & 0xFE | *((_BYTE *)v17 + 475) & 1;
        *(_WORD *)(*(_QWORD *)(*(_QWORD *)(*v38 + 8) + 40) + 384) = *((_WORD *)v17 + 192);
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v38 + 8) + 40) + 386) = *((_BYTE *)v17 + 386);
        v40 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40);
        *(_BYTE *)(v40 + 475) = *(_BYTE *)(v40 + 475) & 0xFD | *((_BYTE *)v17 + 475) & 2;
        *(_OWORD *)(*(_QWORD *)(*(_QWORD *)(*v38 + 8) + 40) + 120) = *(_OWORD *)uu;
        if (nw_path_parse_necp_result(*(void **)(*(_QWORD *)(a1[5] + 8) + 40), (uint64_t)v87, v3 - 4))
        {
          nw_path_snapshot_path(*(NWConcrete_nw_path **)(*(_QWORD *)(a1[5] + 8) + 40));
          *(_OWORD *)*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_OWORD *)uu;
          v18 = 1;
LABEL_139:

          goto LABEL_140;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v45 = (id)gLogObj;
        *(_DWORD *)type = 136446210;
        v82 = "nw_path_observer_update_block_invoke";
        v42 = (char *)_os_log_send_and_compose_impl();

        v80[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(obj) = 0;
        if (__nwlog_fault(v42, v80, &obj))
        {
          if (v80[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v43 = objc_claimAutoreleasedReturnValue();
            v46 = v80[0];
            if (os_log_type_enabled(v43, v80[0]))
            {
              *(_DWORD *)type = 136446210;
              v82 = "nw_path_observer_update_block_invoke";
              _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s nw_path_parse_necp_result failed", (uint8_t *)type, 0xCu);
            }
LABEL_135:

            goto LABEL_136;
          }
          if (!(_BYTE)obj)
          {
            __nwlog_obj();
            v43 = objc_claimAutoreleasedReturnValue();
            v69 = v80[0];
            if (os_log_type_enabled(v43, v80[0]))
            {
              *(_DWORD *)type = 136446210;
              v82 = "nw_path_observer_update_block_invoke";
              _os_log_impl(&dword_182FBE000, v43, v69, "%{public}s nw_path_parse_necp_result failed, backtrace limit exceeded", (uint8_t *)type, 0xCu);
            }
            goto LABEL_135;
          }
          v58 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v43 = objc_claimAutoreleasedReturnValue();
          v61 = v80[0];
          v62 = os_log_type_enabled(v43, v80[0]);
          if (!v58)
          {
            if (v62)
            {
              *(_DWORD *)type = 136446210;
              v82 = "nw_path_observer_update_block_invoke";
              _os_log_impl(&dword_182FBE000, v43, v61, "%{public}s nw_path_parse_necp_result failed, no backtrace", (uint8_t *)type, 0xCu);
            }
            goto LABEL_135;
          }
          if (v62)
          {
            *(_DWORD *)type = 136446466;
            v82 = "nw_path_observer_update_block_invoke";
            v83 = 2082;
            v84 = v58;
            _os_log_impl(&dword_182FBE000, v43, v61, "%{public}s nw_path_parse_necp_result failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
          }
          goto LABEL_103;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v41 = (id)gLogObj;
        *(_DWORD *)type = 136446210;
        v82 = "nw_path_observer_update_block_invoke";
        v42 = (char *)_os_log_send_and_compose_impl();

        v80[0] = OS_LOG_TYPE_ERROR;
        LOBYTE(obj) = 0;
        if (__nwlog_fault(v42, v80, &obj))
        {
          if (v80[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v43 = objc_claimAutoreleasedReturnValue();
            v44 = v80[0];
            if (os_log_type_enabled(v43, v80[0]))
            {
              *(_DWORD *)type = 136446210;
              v82 = "nw_path_observer_update_block_invoke";
              _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s nw_path_create failed", (uint8_t *)type, 0xCu);
            }
            goto LABEL_135;
          }
          if (!(_BYTE)obj)
          {
            __nwlog_obj();
            v43 = objc_claimAutoreleasedReturnValue();
            v68 = v80[0];
            if (os_log_type_enabled(v43, v80[0]))
            {
              *(_DWORD *)type = 136446210;
              v82 = "nw_path_observer_update_block_invoke";
              _os_log_impl(&dword_182FBE000, v43, v68, "%{public}s nw_path_create failed, backtrace limit exceeded", (uint8_t *)type, 0xCu);
            }
            goto LABEL_135;
          }
          v58 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v43 = objc_claimAutoreleasedReturnValue();
          v59 = v80[0];
          v60 = os_log_type_enabled(v43, v80[0]);
          if (!v58)
          {
            if (v60)
            {
              *(_DWORD *)type = 136446210;
              v82 = "nw_path_observer_update_block_invoke";
              _os_log_impl(&dword_182FBE000, v43, v59, "%{public}s nw_path_create failed, no backtrace", (uint8_t *)type, 0xCu);
            }
            goto LABEL_135;
          }
          if (v60)
          {
            *(_DWORD *)type = 136446466;
            v82 = "nw_path_observer_update_block_invoke";
            v83 = 2082;
            v84 = v58;
            _os_log_impl(&dword_182FBE000, v43, v59, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", (uint8_t *)type, 0x16u);
          }
LABEL_103:

          free(v58);
        }
      }
LABEL_136:
      if (v42)
        free(v42);
      v18 = 0;
      goto LABEL_139;
    }
    goto LABEL_30;
  }
  v17 = (id *)nw_dictionary_copy_value(*(_QWORD *)(a1[4] + 24), (uint64_t)out);
  if (!v17)
  {
LABEL_30:
    v18 = 0;
    goto LABEL_140;
  }
  nw_dictionary_set_value(*(_QWORD *)(a1[4] + 24), out, 0);
  *(_OWORD *)*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = *(_OWORD *)uu;
  v18 = 1;
LABEL_140:

  return v18;
}

void sub_1839D4968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

void ___ZL23nw_path_observer_updateP27NWConcrete_nw_path_observer_block_invoke_420(_QWORD *a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  void *v6;

  v2 = (os_unfair_lock_s *)a1[4];
  v3 = v2 + 12;
  v4 = v2;
  os_unfair_lock_lock(v3);
  v5 = *(_QWORD *)&v4[4]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v3);

  if (v5)
    (*(void (**)(void))(a1[5] + 16))();
  v6 = *(void **)(*(_QWORD *)(a1[6] + 8) + 24);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 24) = 0;
  }
}

void nw_path_observer_cancel(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 12);
    v3 = *(void **)&v2[4]._os_unfair_lock_opaque;
    *(_QWORD *)&v2[4]._os_unfair_lock_opaque = 0;

    v4 = *(void **)&v2[2]._os_unfair_lock_opaque;
    *(_QWORD *)&v2[2]._os_unfair_lock_opaque = 0;

    nw_queue_cancel_source(*(_QWORD *)&v2[10]._os_unfair_lock_opaque, v5);
    v6 = *(void **)&v2[8]._os_unfair_lock_opaque;
    *(_QWORD *)&v2[8]._os_unfair_lock_opaque = 0;
    *(_QWORD *)&v2[10]._os_unfair_lock_opaque = 0;

    v7 = *(void **)&v2[6]._os_unfair_lock_opaque;
    *(_QWORD *)&v2[6]._os_unfair_lock_opaque = 0;

    os_unfair_lock_unlock(v2 + 12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_path_observer_cancel";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_observer_cancel";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null observer", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_path_observer_cancel";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null observer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_observer_cancel";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null observer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_observer_cancel";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null observer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void sub_1839D4D28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void *nw_path_copy_all_local_paths(void *a1)
{
  id v1;
  uint64_t globals_for_path;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  _QWORD *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *backtrace_string;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  globals_for_path = nw_context_get_globals_for_path(v1);
  v3 = (os_unfair_lock_s *)(globals_for_path + 124);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
  v4 = *(_QWORD *)(globals_for_path + 32);
  if (v4)
  {
    v5 = (void *)nw_dictionary_copy(v4);
    os_unfair_lock_unlock(v3);
    if (v5)
    {
      v6 = nw_dictionary_create();
      v7 = v6;
      if (v6)
      {
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = __nw_path_copy_all_local_paths_block_invoke;
        v21[3] = &unk_1E14A8D48;
        v8 = v6;
        v22 = v8;
        nw_dictionary_apply((uint64_t)v5, (uint64_t)v21);
        v9 = v8;

LABEL_26:
        goto LABEL_27;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_copy_all_local_paths";
      v11 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v23 = 0;
      if (__nwlog_fault(v11, &type, &v23))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v13 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v26 = "nw_path_copy_all_local_paths";
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s nw_dictionary_create failed", buf, 0xCu);
          }
        }
        else if (v23)
        {
          backtrace_string = __nw_create_backtrace_string();
          if (backtrace_string)
          {
            v15 = (char *)backtrace_string;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v16 = (id)gLogObj;
            v17 = type;
            if (os_log_type_enabled(v16, type))
            {
              *(_DWORD *)buf = 136446466;
              v26 = "nw_path_copy_all_local_paths";
              v27 = 2082;
              v28 = v15;
              _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s nw_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v15);
            if (!v11)
              goto LABEL_26;
            goto LABEL_25;
          }
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v19 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v26 = "nw_path_copy_all_local_paths";
            _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s nw_dictionary_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v18 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v26 = "nw_path_copy_all_local_paths";
            _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s nw_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v11)
        goto LABEL_26;
LABEL_25:
      free(v11);
      goto LABEL_26;
    }
  }
  else
  {
    os_unfair_lock_unlock(v3);
  }
  v7 = 0;
LABEL_27:

  return v7;
}

void sub_1839D50F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_path_copy_all_local_paths_block_invoke(uint64_t a1, const char *a2, void *a3)
{
  os_unfair_lock_s *v5;
  os_unfair_lock_s *v6;
  void *v7;

  v5 = a3;
  v6 = v5;
  if (v5)
  {
    os_unfair_lock_lock(v5 + 24);
    v7 = *(void **)&v6[12]._os_unfair_lock_opaque;
    if (v7)
      nw_dictionary_set_value(*(_QWORD *)(a1 + 32), a2, v7);
    os_unfair_lock_unlock(v6 + 24);
  }

  return 1;
}

uint64_t nw_path_get_nexus_instance(void *a1, _OWORD *a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  void *v8;
  uint64_t nexus_instance;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_path_get_nexus_instance";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v11, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_path_get_nexus_instance";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_path_get_nexus_instance";
            v23 = 2082;
            v24 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_path_get_nexus_instance";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_path_get_nexus_instance";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v11)
      free(v11);
    goto LABEL_23;
  }
  v7 = v5[9];
  if (!v7 || *(_QWORD *)(v7 + 24) == *(_QWORD *)(v7 + 16))
  {
LABEL_23:
    nexus_instance = 0;
    goto LABEL_24;
  }
  nw_array_get_object_at_index(v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  nexus_instance = nw_path_flow_get_nexus_instance(v8, a2, a3);

LABEL_24:
  return nexus_instance;
}

void sub_1839D5440(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_get_nexus_instance(void *a1, _OWORD *a2, _DWORD *a3)
{
  _OWORD *v5;
  void *v6;
  _OWORD *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_path_flow_get_nexus_instance";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_path_flow_get_nexus_instance";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null flow", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_path_flow_get_nexus_instance";
            v22 = 2082;
            v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_path_flow_get_nexus_instance";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_path_flow_get_nexus_instance";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_24:
    if (v11)
      free(v11);
    goto LABEL_5;
  }
  if (a3)
    *a3 = *((_DWORD *)v5 + 42);
  v7 = v5 + 8;
  if (!uuid_is_null((const unsigned __int8 *)v5 + 128))
  {
    *a2 = *v7;
    v8 = 1;
    goto LABEL_7;
  }
LABEL_5:
  v8 = 0;
LABEL_7:

  return v8;
}

void sub_1839D5718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_nexus_key(void *a1, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  void *v6;
  uint64_t nexus_key;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_path_get_nexus_key";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_path_get_nexus_key";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_path_get_nexus_key";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_path_get_nexus_key";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_path_get_nexus_key";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v9)
      free(v9);
    goto LABEL_23;
  }
  v5 = v3[9];
  if (!v5 || *(_QWORD *)(v5 + 24) == *(_QWORD *)(v5 + 16))
  {
LABEL_23:
    nexus_key = 0;
    goto LABEL_24;
  }
  nw_array_get_object_at_index(v5, 0);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  nexus_key = nw_path_flow_get_nexus_key(v6, a2);

LABEL_24:
  return nexus_key;
}

uint64_t nw_path_flow_get_nexus_key(void *a1, _DWORD *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  int v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      v5 = *((_QWORD *)v3 + 1);
      if (v5 && (v6 = *((_DWORD *)v3 + 40)) != 0)
      {
        *a2 = v6;
      }
      else
      {
        v5 = 0;
        *a2 = 0;
      }
      goto LABEL_7;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_path_flow_get_nexus_key";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null length", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null length, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null length, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_path_flow_get_nexus_key";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null length, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_path_flow_get_nexus_key";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null flow", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_flow_get_nexus_key";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_path_flow_get_nexus_key";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
  }
LABEL_40:
  if (v9)
    free(v9);
  v5 = 0;
LABEL_7:

  return v5;
}

uint64_t nw_path_get_nexus_flow_index(void *a1, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_path_get_nexus_flow_index";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_path_get_nexus_flow_index";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  if (!a2)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_path_get_nexus_flow_index";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null nexus_flow_index", buf, 0xCu);
      }
LABEL_38:

LABEL_39:
      if (v9)
        free(v9);
      goto LABEL_41;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null nexus_flow_index, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_get_nexus_flow_index";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null nexus_flow_index, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_path_get_nexus_flow_index";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null nexus_flow_index, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_26:

    free(backtrace_string);
    goto LABEL_39;
  }
  v5 = v3[9];
  if (!v5
    || *(_QWORD *)(v5 + 24) == *(_QWORD *)(v5 + 16)
    || (nw_array_get_object_at_index(v5, 0), (v6 = (_DWORD *)objc_claimAutoreleasedReturnValue()) == 0))
  {
LABEL_41:
    v7 = 0;
    goto LABEL_42;
  }
  *a2 = v6[41];

  v7 = 1;
LABEL_42:

  return v7;
}

id nw_path_copy_flow_for_registration(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  NWConcrete_nw_path *v3;
  NWConcrete_nw_path_flow_registration *v4;
  NWConcrete_nw_path_flow_registration *v5;
  unsigned __int8 *flows;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  NWConcrete_nw_path_flow_registration *v23;
  _BYTE *v24;
  char v25;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v28 = __Block_byref_object_copy__67271;
      v29 = __Block_byref_object_dispose__67272;
      v30 = 0;
      flows = (unsigned __int8 *)v3->flows;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = ___ZL34nw_path_copy_flow_for_registrationP18NWConcrete_nw_pathP36NWConcrete_nw_path_flow_registration_block_invoke;
      v22[3] = &unk_1E14AB5F0;
      v23 = v4;
      v24 = buf;
      nw_array_apply(flows, (uint64_t)v22);
      v7 = *(id *)(*(_QWORD *)&buf[8] + 40);

      _Block_object_dispose(buf, 8);
      goto LABEL_4;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v10, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null flow_registration", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v25)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v10, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null path", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v25)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_copy_flow_for_registration";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

uint64_t ___ZL34nw_path_copy_flow_for_registrationP18NWConcrete_nw_pathP36NWConcrete_nw_path_flow_registration_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v5 = a3;
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 32);
  if (*((_QWORD *)v5 + 18) == *(_QWORD *)(v7 + 32) && *((_QWORD *)v5 + 19) == *(_QWORD *)(v7 + 40))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
    v8 = 0;
  }
  else
  {
    v8 = 1;
  }

  return v8;
}

uint64_t nw_path_flow_registration_get_nexus_key(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2, _DWORD *a3)
{
  id v4;
  void *v5;
  uint64_t nexus_key;

  v4 = nw_path_copy_flow_for_registration(a1, a2);
  v5 = v4;
  if (v4)
    nexus_key = nw_path_flow_get_nexus_key(v4, a3);
  else
    nexus_key = 0;

  return nexus_key;
}

uint64_t nw_path_flow_registration_get_protocol_level(void *a1, void *a2)
{
  NWConcrete_nw_path *v3;
  NWConcrete_nw_path_flow_registration *v4;
  id v5;
  void *v6;
  _QWORD *v7;
  void *v8;
  _DWORD *data;
  int v10;
  _DWORD *v11;
  _DWORD *v12;
  unsigned int v13;
  uint64_t v14;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  _BYTE length[12];
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = nw_path_copy_flow_for_registration(v3, v4);
    v6 = v5;
    if (!v5)
      goto LABEL_18;
    v7 = v5;
    v8 = (void *)v7[3];
    if (v8
      && (*(_QWORD *)length = 0, (data = xpc_dictionary_get_data(v8, "data", (size_t *)length)) != 0)
      && *(_QWORD *)length >= 0xD8uLL
      && *(_QWORD *)length == data[53] + 216)
    {
      v10 = data[52];
      v11 = (v10 & 0x13) == 1 ? 0 : data;
      v12 = (v10 & 0xE080) != 0 ? v11 : 0;
    }
    else
    {
      v12 = 0;
    }

    if (v12[53] >= 0xCCu)
    {
      v13 = v12[54];
      if (v13 >= 5)
        v14 = 0;
      else
        v14 = v13;
    }
    else
    {
LABEL_18:
      v14 = 0;
    }

    goto LABEL_20;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)length = 136446210;
  *(_QWORD *)&length[4] = "nw_path_flow_registration_get_protocol_level";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v17, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)length = 136446210;
        *(_QWORD *)&length[4] = "nw_path_flow_registration_get_protocol_level";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null path", length, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)length = 136446466;
          *(_QWORD *)&length[4] = "nw_path_flow_registration_get_protocol_level";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null path, dumping backtrace:%{public}s", length, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_37;
      }
      if (v22)
      {
        *(_DWORD *)length = 136446210;
        *(_QWORD *)&length[4] = "nw_path_flow_registration_get_protocol_level";
        _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null path, no backtrace", length, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)length = 136446210;
        *(_QWORD *)&length[4] = "nw_path_flow_registration_get_protocol_level";
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null path, backtrace limit exceeded", length, 0xCu);
      }
    }

  }
LABEL_37:
  if (v17)
    free(v17);
  v14 = 0;
LABEL_20:

  return v14;
}

BOOL nw_path_flow_registration_get_nexus_flow_index(void *a1, void *a2, _DWORD *a3)
{
  NWConcrete_nw_path *v5;
  NWConcrete_nw_path_flow_registration *v6;
  _DWORD *v7;
  _BOOL8 v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (a3)
  {
    v7 = nw_path_copy_flow_for_registration(v5, v6);
    v8 = v7 != 0;
    if (v7)
      *a3 = v7[41];

    goto LABEL_5;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_path_flow_registration_get_nexus_flow_index";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_path_flow_registration_get_nexus_flow_index";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null nexus_flow_index", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_path_flow_registration_get_nexus_flow_index";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null nexus_flow_index, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_path_flow_registration_get_nexus_flow_index";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null nexus_flow_index, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_path_flow_registration_get_nexus_flow_index";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null nexus_flow_index, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_5:

  return v8;
}

BOOL nw_path_get_flow_registration_id(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(v3 + 136);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_path_get_flow_registration_id";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_get_flow_registration_id";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_path_get_flow_registration_id";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_get_flow_registration_id";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_get_flow_registration_id";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

  return v4 != 0;
}

BOOL nw_path_evaluator_get_client_id(void *a1, _OWORD *a2)
{
  id v3;
  void *v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *a2 = *((_OWORD *)v3 + 5);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_path_evaluator_get_client_id";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_evaluator_get_client_id";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_path_evaluator_get_client_id";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_evaluator_get_client_id";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_evaluator_get_client_id";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

  return v4 != 0;
}

uint64_t nw_path_flow_registration_add_extra_interface_option(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  id v7;
  id *v8;
  NSObject *v9;
  id *v10;
  id v11;
  uint64_t v12;
  id *v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  _BOOL8 v17;
  void *v18;
  NSObject *v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  _QWORD v34[4];
  id v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  id v41;
  __int16 v42;
  int v43;
  __int16 v44;
  _QWORD *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = (unsigned __int8 *)v3[3];
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v34[2] = __nw_path_flow_registration_add_extra_interface_option_block_invoke;
      v34[3] = &unk_1E14AC200;
      v7 = v4;
      v35 = v7;
      if (nw_array_apply(v6, (uint64_t)v34))
      {
        v8 = (id *)v7;
        v9 = v8[3];

        if (nw_endpoint_get_address_family(v9) != 2)
        {
LABEL_11:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v15 = (id)gLogObj;
          if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446978;
            v39 = "nw_path_flow_registration_add_extra_interface_option";
            v40 = 2112;
            v41 = v8;
            v42 = 1042;
            v43 = 16;
            v44 = 2098;
            v45 = v3 + 4;
            _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_INFO, "%{public}s Adding interface option_details %@ to flow %{public,uuid_t}.16P", buf, 0x26u);
          }

          v16 = v3[3];
          if (!v16)
          {
            v17 = nw_array_create();
            v18 = (void *)v3[3];
            v3[3] = v17;

            v16 = v3[3];
          }
          nw_array_append(v16, v8);
          v12 = 1;
          goto LABEL_16;
        }
        v10 = v8;
        v11 = v10[7];

        if (v11)
        {

          goto LABEL_11;
        }
        v13 = v10;
        v14 = v13[8];

        if (v14)
          goto LABEL_11;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_path_flow_registration_add_extra_interface_option";
          v40 = 2112;
          v41 = v13;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEFAULT, "%{public}s Wrong AF %@", buf, 0x16u);
        }

      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_path_flow_registration_add_extra_interface_option";
          v40 = 2112;
          v41 = v7;
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s Interface option details %@ already exists", buf, 0x16u);
        }
      }
      v12 = 0;
LABEL_16:

      goto LABEL_17;
    }
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_path_flow_registration_add_extra_interface_option";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v22, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null interface_option_details", buf, 0xCu);
        }
LABEL_52:

        goto LABEL_53;
      }
      if (!v36)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl(&dword_182FBE000, v23, v33, "%{public}s called with null interface_option_details, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s called with null interface_option_details, no backtrace", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446466;
        v39 = "nw_path_flow_registration_add_extra_interface_option";
        v40 = 2082;
        v41 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s called with null interface_option_details, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_40;
    }
  }
  else
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_path_flow_registration_add_extra_interface_option";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v22, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null flow_registration", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (!v36)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v29 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_path_flow_registration_add_extra_interface_option";
          _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        v39 = "nw_path_flow_registration_add_extra_interface_option";
        v40 = 2082;
        v41 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_40:

      free(backtrace_string);
    }
  }
LABEL_53:
  if (v22)
    free(v22);
  v12 = 0;
LABEL_17:

  return v12;
}

void sub_1839D7C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

uint64_t __nw_path_flow_registration_add_extra_interface_option_block_invoke(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "isEqual:") ^ 1;
}

void nw_path_flow_registration_remove_extra_interface_option(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  _QWORD *v23;
  char v24;
  os_log_type_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_path_flow_registration_remove_extra_interface_option";
    v8 = (char *)_os_log_send_and_compose_impl();

    v25 = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v8, &v25, &v24))
      goto LABEL_39;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_path_flow_registration_remove_extra_interface_option";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v25;
      v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_path_flow_registration_remove_extra_interface_option";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_path_flow_registration_remove_extra_interface_option";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_path_flow_registration_remove_extra_interface_option";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    v6 = v3[3];
    if (v6)
    {
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_path_flow_registration_remove_extra_interface_option_block_invoke;
      v21[3] = &unk_1E14A8D70;
      v22 = v4;
      v23 = v3;
      nw_array_remove_objects(v6, (uint64_t)v21);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_path_flow_registration_remove_extra_interface_option";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v8, &v25, &v24))
    goto LABEL_39;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_path_flow_registration_remove_extra_interface_option";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null details", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v24)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_path_flow_registration_remove_extra_interface_option";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null details, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_path_flow_registration_remove_extra_interface_option";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null details, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_path_flow_registration_remove_extra_interface_option";
    v28 = 2082;
    v29 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null details, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

uint64_t __nw_path_flow_registration_remove_extra_interface_option_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  int v8;
  const char *v9;
  __int16 v10;
  id v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "isEqual:", v3);
  if ((_DWORD)v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
    {
      v6 = *(_QWORD *)(a1 + 40) + 32;
      v8 = 136446978;
      v9 = "nw_path_flow_registration_remove_extra_interface_option_block_invoke";
      v10 = 2112;
      v11 = v3;
      v12 = 1042;
      v13 = 16;
      v14 = 2098;
      v15 = v6;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s Removing %@ from %{public,uuid_t}.16P", (uint8_t *)&v8, 0x26u);
    }

  }
  return v4;
}

void sub_1839D8288(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_path_flow_registration_remove_all_interface_options(void *a1)
{
  _QWORD *v1;
  NSObject *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  _WORD v17[17];

  *(_QWORD *)&v17[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      v15 = "nw_path_flow_registration_remove_all_interface_options";
      v16 = 1042;
      *(_DWORD *)v17 = 16;
      v17[2] = 2098;
      *(_QWORD *)&v17[3] = v1 + 4;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s Removing all interface option_details from flow %{public,uuid_t}.16P", buf, 0x1Cu);
    }

    v3 = (void *)v1[3];
    v1[3] = 0;

    goto LABEL_5;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_path_flow_registration_remove_all_interface_options";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_path_flow_registration_remove_all_interface_options";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_path_flow_registration_remove_all_interface_options";
          v16 = 2082;
          *(_QWORD *)v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_path_flow_registration_remove_all_interface_options";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_path_flow_registration_remove_all_interface_options";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v5)
    free(v5);
LABEL_5:

}

void nw_path_flow_registration_override_traffic_class(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 36) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_registration_override_traffic_class";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_override_traffic_class";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_registration_override_traffic_class";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_override_traffic_class";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_override_traffic_class";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_path_flow_registration_override_interface_types(void *a1, int a2, int a3, int a4, int a5, int a6)
{
  id v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = v11;
  if (v11)
  {
    if (a2)
      v13 = 8;
    else
      v13 = 0;
    if (a4)
      v14 = 32;
    else
      v14 = 0;
    if (a5)
      v15 = 64;
    else
      v15 = 0;
    if (a3)
      v16 = 16;
    else
      v16 = 0;
    if (a6)
      v17 = 0x80;
    else
      v17 = 0;
    *((_BYTE *)v11 + 148) = (v16 | v13 | v14 | v15 | v17) & 0xF8 | *((_BYTE *)v11 + 148) & 7;
    goto LABEL_18;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_path_flow_registration_override_interface_types";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v19, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_path_flow_registration_override_interface_types";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_path_flow_registration_override_interface_types";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_path_flow_registration_override_interface_types";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_path_flow_registration_override_interface_types";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v19)
    free(v19);
LABEL_18:

}

void nw_path_apply_override_interface_types_from_path(void *a1, void *a2)
{
  _BYTE *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  unsigned __int8 v11;
  char v12;
  int v13;
  char v14;
  int v15;
  char v16;
  char v17;
  const char *v18;
  int v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  char v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v10 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_path_apply_override_interface_types_from_path";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v21, &type, &v35))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null path_to_modify", buf, 0xCu);
      }
    }
    else if (v35)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_path_apply_override_interface_types_from_path";
          v39 = 2082;
          v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null path_to_modify, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v21)
          goto LABEL_11;
        goto LABEL_46;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s called with null path_to_modify, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s called with null path_to_modify, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (!v4)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_path_apply_override_interface_types_from_path";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v21, &type, &v35))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null other_path", buf, 0xCu);
      }
    }
    else if (v35)
    {
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v22, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_path_apply_override_interface_types_from_path";
          v39 = 2082;
          v40 = v29;
          _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s called with null other_path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        if (!v21)
          goto LABEL_11;
LABEL_46:
        free(v21);
        goto LABEL_11;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s called with null other_path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_path_apply_override_interface_types_from_path";
        _os_log_impl(&dword_182FBE000, v22, v33, "%{public}s called with null other_path, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_44;
  }
  v11 = v3[475];
  v12 = *((_BYTE *)v4 + 475) & 8 | v11;
  v3[475] = v12;
  v13 = (*((_BYTE *)v4 + 475) | v11) & 0x40;
  v3[475] = v13 | v12 & 0xBF;
  v14 = (*((_BYTE *)v4 + 475) | v11) & 0x80 | v13 & 0x7F | v12 & 0x3F;
  v3[475] = v14;
  v15 = (*((_BYTE *)v4 + 475) | v11) & 0x10;
  v16 = v14 & 0xEF | v15;
  v3[475] = v16;
  v17 = *((_BYTE *)v4 + 476) & 2 | v3[476];
  v3[476] = v17;
  if ((v17 & 2) != 0)
  {
    v18 = "Proxy used prohibited interface type";
    v19 = 6;
    if (v13 || v16 < 0)
      goto LABEL_10;
    if ((v12 & 8) != 0)
    {
      v18 = "Proxy used prohibited expensive path";
      v19 = 5;
      goto LABEL_10;
    }
    if (v15)
    {
      v18 = "Proxy used prohibited constrained path";
      v19 = 26;
LABEL_10:
      nw_path_set_reason(v3, v19, v18, v5, v6, v7, v8, v9, v34);
    }
  }
LABEL_11:

}

void sub_1839D9094(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_path_flow_registration_override_evaluator(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 17, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_registration_override_evaluator";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_override_evaluator";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_registration_override_evaluator";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_override_evaluator";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_override_evaluator";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_path_override_local_endpoint(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 10, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_override_local_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_override_local_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_override_local_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_override_local_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_override_local_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_path_override_interface(void *a1, void *a2, char a3)
{
  id *v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v5)
  {
    objc_storeStrong(v5 + 11, a2);
    *((_BYTE *)v5 + 476) = *((_BYTE *)v5 + 476) & 0xFE | a3;
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_path_override_interface";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_path_override_interface";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_path_override_interface";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_path_override_interface";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_path_override_interface";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

void nw_path_override_viable(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 8;
    else
      v5 = 0;
    *((_BYTE *)v3 + 474) = *((_BYTE *)v3 + 474) & 0xF7 | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_path_override_viable";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_override_viable";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_path_override_viable";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_override_viable";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_override_viable";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

id *nw_path_create_static(void *a1, void *a2, int a3, _OWORD *a4, int a5, int a6, int a7, int a8, void *a9, void *a10, void *a11)
{
  id v17;
  id v18;
  void *v19;
  void *v20;
  NWConcrete_nw_path *v21;
  id *p_isa;
  char v23;
  char v24;
  char v25;
  char v26;
  id *v27;
  id v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  char *backtrace_string;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  void *v39;
  id v40;
  id v41;
  id v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v17 = a1;
  v18 = a2;
  v40 = a9;
  v41 = a10;
  v42 = a11;
  v39 = v17;
  v19 = v17;
  v20 = v18;
  v21 = nw_path_create(v19, v18);
  p_isa = (id *)&v21->super.isa;
  if (v21)
  {
    v21->status = a3;
    *(_OWORD *)v21->client_id = *a4;
    if (a5)
      v23 = 32;
    else
      v23 = 0;
    if (a6)
      v24 = 16;
    else
      v24 = 0;
    if (a7)
      v25 = 64;
    else
      v25 = 0;
    if (a8)
      v26 = 0x80;
    else
      v26 = 0;
    *((_BYTE *)v21 + 473) = (v24 | v23 | v25 | v26) & 0xF0 | *((_BYTE *)v21 + 473) & 0xF;
    objc_storeStrong((id *)&v21->direct, a9);
    objc_storeStrong(p_isa + 13, a10);
    objc_storeStrong(p_isa + 28, a11);
    v27 = p_isa;
    goto LABEL_22;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v28 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v46 = "nw_path_create_static";
  v29 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (!__nwlog_fault(v29, &type, &v43))
    goto LABEL_20;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = (id)gLogObj;
    v31 = type;
    if (os_log_type_enabled(v30, type))
    {
      *(_DWORD *)buf = 136446210;
      v46 = "nw_path_create_static";
      _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s nw_path_create failed", buf, 0xCu);
    }
LABEL_19:

    goto LABEL_20;
  }
  if (!v43)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v30 = (id)gLogObj;
    v37 = type;
    if (os_log_type_enabled(v30, type))
    {
      *(_DWORD *)buf = 136446210;
      v46 = "nw_path_create_static";
      _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s nw_path_create failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_19;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v34 = (id)gLogObj;
  v35 = type;
  v36 = os_log_type_enabled(v34, type);
  if (!backtrace_string)
  {
    if (v36)
    {
      *(_DWORD *)buf = 136446210;
      v46 = "nw_path_create_static";
      _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s nw_path_create failed, no backtrace", buf, 0xCu);
    }

LABEL_20:
    if (!v29)
      goto LABEL_22;
LABEL_21:
    free(v29);
    goto LABEL_22;
  }
  if (v36)
  {
    *(_DWORD *)buf = 136446466;
    v46 = "nw_path_create_static";
    v47 = 2082;
    v48 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v29)
    goto LABEL_21;
LABEL_22:

  return p_isa;
}

void sub_1839D9F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path *nw_path_create_from_tlv(void *a1, uint64_t a2, unint64_t a3)
{
  NWConcrete_nw_path *v5;
  NWConcrete_nw_path *v6;
  NWConcrete_nw_path *v7;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  id v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = nw_path_create(a1, 0);
  v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v25 = "nw_path_create_from_tlv";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_create_from_tlv";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s nw_path_create failed", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_create_from_tlv";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s nw_path_create failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_create_from_tlv";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s nw_path_create failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_path_create_from_tlv";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s nw_path_create failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_23;
  }
  if (!nw_path_parse_necp_result(v5, a2, a3))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v25 = "nw_path_create_from_tlv";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_create_from_tlv";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s nw_path_parse_necp_result failed", buf, 0xCu);
      }
LABEL_36:

LABEL_37:
      if (!v9)
      {
LABEL_39:
        v7 = 0;
        goto LABEL_40;
      }
LABEL_38:
      free(v9);
      goto LABEL_39;
    }
    if (!v22)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_create_from_tlv";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s nw_path_parse_necp_result failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_path_create_from_tlv";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s nw_path_parse_necp_result failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_path_create_from_tlv";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s nw_path_parse_necp_result failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_23:

    free(backtrace_string);
    if (!v9)
      goto LABEL_39;
    goto LABEL_38;
  }
  nw_path_snapshot_path(v6);
  v7 = v6;
LABEL_40:

  return v7;
}

void sub_1839DA4E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_path_is_preferred(void *a1, void *a2, int a3)
{
  void **v5;
  void **v6;
  void **v7;
  uint64_t v8;
  int v9;
  int v10;

  v5 = a1;
  v6 = a2;
  v7 = v6;
  v8 = 0;
  if (v5 && v5 != v6)
  {
    if (!v6)
      goto LABEL_10;
    v9 = *((_DWORD *)v5 + 94);
    v10 = *((_DWORD *)v6 + 94);
    if (v9 == v10)
      goto LABEL_17;
    if (v9 == 1 && v10 == 2)
      goto LABEL_10;
    if (v10 != 1 || v9 != 2)
    {
LABEL_17:
      if (a3 && !nw_interface_shallow_compare(v5[12], v6[12]))
      {
LABEL_10:
        v8 = 1;
        goto LABEL_14;
      }
    }
    v8 = 0;
  }
LABEL_14:

  return v8;
}

uint64_t __nw_path_evaluator_cancel_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t nw_path_get_custom_ethertype(void *a1)
{
  unsigned __int16 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[192];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_get_custom_ethertype";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_custom_ethertype";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_get_custom_ethertype";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_custom_ethertype";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_custom_ethertype";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_get_flow_divert_aggregate_unit(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 352);
  return result;
}

uint64_t nw_path_get_filter_unit(uint64_t result)
{
  if (result)
    return *(unsigned int *)(result + 272);
  return result;
}

uint64_t nw_path_get_interface_time_delta(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[92];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_get_interface_time_delta";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_interface_time_delta";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_get_interface_time_delta";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_interface_time_delta";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_interface_time_delta";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_get_ipv6_network_signature(void *a1, void *a2, _BYTE *a3)
{
  NWConcrete_nw_path *v5;
  NWConcrete_nw_path *v6;
  OS_nw_interface *direct;
  uint64_t ipv6_network_signature;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_path_get_ipv6_network_signature";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_182FBE000, v11, v24, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_path_get_ipv6_network_signature";
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_36;
  }
  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_path_get_ipv6_network_signature";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null signature", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v28)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null signature, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null signature, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_path_get_ipv6_network_signature";
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null signature, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_36;
  }
  if (!a3)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_path_get_ipv6_network_signature";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null signature_len", buf, 0xCu);
      }
LABEL_54:

LABEL_55:
      if (v10)
        free(v10);
      goto LABEL_57;
    }
    if (!v28)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_182FBE000, v11, v26, "%{public}s called with null signature_len, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_path_get_ipv6_network_signature";
        _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null signature_len, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_path_get_ipv6_network_signature";
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null signature_len, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_36:

    free(backtrace_string);
    goto LABEL_55;
  }
  if (!nw_path_network_is_satisfied_update_reason(v5, 0) || (direct = v6->direct) == 0)
  {
LABEL_57:
    ipv6_network_signature = 0;
    goto LABEL_58;
  }
  ipv6_network_signature = nw_interface_get_ipv6_network_signature(direct, a2, a3);
LABEL_58:

  return ipv6_network_signature;
}

void sub_1839DB1BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_registration_fast_open_blocked(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = (unsigned __int8 *)nw_path_copy_flow_for_registration(a1, a2);
  if (v2)
    v3 = (v2[185] >> 3) & 1;
  else
    v3 = 0;

  return v3;
}

uint64_t nw_path_link_quality_abort(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[474] >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_link_quality_abort";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_link_quality_abort";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_link_quality_abort";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_link_quality_abort";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_link_quality_abort";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_listener_is_interface_specific(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[475] >> 2) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_listener_is_interface_specific";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_listener_is_interface_specific";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_listener_is_interface_specific";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_listener_is_interface_specific";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_listener_is_interface_specific";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

size_t nw_path_signature_changed_from_previous(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  size_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  unsigned __int8 v21;
  unsigned __int8 v22;
  __int16 __n;
  _QWORD __n_2[2];
  int v25;
  _QWORD __s2[2];
  int v27;
  os_log_type_t type[8];
  uint64_t v29;
  int v30;
  _BYTE __s1[22];
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__s1 = 136446210;
    *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(__s2[0]) = 0;
    if (!__nwlog_fault(v9, type, __s2))
      goto LABEL_43;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)__s1 = 136446210;
        *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", __s1, 0xCu);
      }
      goto LABEL_42;
    }
    if (!LOBYTE(__s2[0]))
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)__s1 = 136446210;
        *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null path, backtrace limit exceeded", __s1, 0xCu);
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type[0];
    v16 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)__s1 = 136446210;
        *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, no backtrace", __s1, 0xCu);
      }
      goto LABEL_42;
    }
    if (v16)
    {
      *(_DWORD *)__s1 = 136446466;
      *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
      *(_WORD *)&__s1[12] = 2082;
      *(_QWORD *)&__s1[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, dumping backtrace:%{public}s", __s1, 0x16u);
    }
    goto LABEL_30;
  }
  if (!v4)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)__s1 = 136446210;
    *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(__s2[0]) = 0;
    if (!__nwlog_fault(v9, type, __s2))
      goto LABEL_43;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)__s1 = 136446210;
        *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null previous_path", __s1, 0xCu);
      }
LABEL_42:

LABEL_43:
      if (v9)
        free(v9);
      goto LABEL_7;
    }
    if (!LOBYTE(__s2[0]))
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)__s1 = 136446210;
        *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null previous_path, backtrace limit exceeded", __s1, 0xCu);
      }
      goto LABEL_42;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type[0];
    v18 = os_log_type_enabled(v10, type[0]);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)__s1 = 136446210;
        *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null previous_path, no backtrace", __s1, 0xCu);
      }
      goto LABEL_42;
    }
    if (v18)
    {
      *(_DWORD *)__s1 = 136446466;
      *(_QWORD *)&__s1[4] = "nw_path_signature_changed_from_previous";
      *(_WORD *)&__s1[12] = 2082;
      *(_QWORD *)&__s1[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null previous_path, dumping backtrace:%{public}s", __s1, 0x16u);
    }
LABEL_30:

    free(backtrace_string);
    goto LABEL_43;
  }
  memset(__s1, 0, 20);
  *(_QWORD *)type = 0;
  v29 = 0;
  v30 = 0;
  __n = 5140;
  __s2[0] = 0;
  __s2[1] = 0;
  v27 = 0;
  v22 = 20;
  __n_2[0] = 0;
  __n_2[1] = 0;
  v25 = 0;
  v21 = 20;
  nw_path_get_ipv4_network_signature(v4, __s1, (_BYTE *)&__n + 1);
  nw_path_get_ipv6_network_signature(v5, type, &__n);
  nw_path_get_ipv4_network_signature(v3, __s2, &v22);
  nw_path_get_ipv6_network_signature(v3, __n_2, &v21);
  if (HIBYTE(__n) != v22
    || (v6 = __n, __n != v21)
    || HIBYTE(__n) && memcmp(__s1, __s2, HIBYTE(__n)))
  {
LABEL_7:
    v6 = 1;
    goto LABEL_8;
  }
  if ((_DWORD)v6)
    v6 = memcmp(type, __n_2, v6) != 0;
LABEL_8:

  return v6;
}

void sub_1839DBCA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_connected_interface_index(void *a1)
{
  unsigned __int8 **v1;
  unsigned __int8 **v2;
  unsigned __int8 *v3;
  uint64_t v4;
  unsigned __int8 *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[5];
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[11];
    if (v3)
    {
      v4 = *((unsigned int *)v3 + 2);
    }
    else
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v19 = 0;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v5 = v1[9];
      v15[0] = MEMORY[0x1E0C809B0];
      v15[1] = 3221225472;
      v15[2] = __nw_path_get_connected_interface_index_block_invoke;
      v15[3] = &unk_1E14A8DC0;
      v15[4] = buf;
      nw_array_apply(v5, (uint64_t)v15);
      v4 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_get_connected_interface_index";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v8, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_get_connected_interface_index";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_get_connected_interface_index";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_get_connected_interface_index";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_get_connected_interface_index";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
  v4 = 0;
LABEL_5:

  return v4;
}

uint64_t __nw_path_get_connected_interface_index_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a3;
  v5 = v4;
  v6 = *((_QWORD *)v4 + 2);
  if (v6 && (*((_BYTE *)v4 + 185) & 1) != 0)
  {
    v7 = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(v6 + 8);
  }
  else
  {
    v7 = 1;
  }

  return v7;
}

uint64_t nw_path_get_alternate_path_state(void *a1, void *a2)
{
  _DWORD *v3;
  _DWORD *v4;
  _BOOL4 is_viable;
  uint64_t v6;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_path_get_alternate_path_state";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v14, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_get_alternate_path_state";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null connected_path", buf, 0xCu);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_path_get_alternate_path_state";
            v25 = 2082;
            v26 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null connected_path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_get_alternate_path_state";
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null connected_path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_path_get_alternate_path_state";
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null connected_path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_35:
    if (v14)
      free(v14);
    v6 = 0;
    goto LABEL_9;
  }
  is_viable = nw_path_is_viable(v3);
  if (v4 && v4[94] == 1 && (v3[66] != 4 || !v3[67]))
  {
    if (is_viable && v3[94] != 2)
    {
      v8 = nw_path_copy_connected_interface(v3);
      v9 = v8;
      v6 = 0;
      if (v3[66] != 6 && v8)
      {
        v10 = v8;
        v11 = *((_DWORD *)v10 + 24);

        if (v11 == 4)
        {
          v6 = 0;

          goto LABEL_9;
        }
        v12 = *((_DWORD *)v10 + 2);
        v6 = v12 != nw_path_get_interface_index(v4);
      }

      goto LABEL_9;
    }
    v6 = 1;
  }
  else
  {
    v6 = v3[94] == 3 && !is_viable;
  }
LABEL_9:

  return v6;
}

void sub_1839DC380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_path_is_tunnelled(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_DWORD *)v1 + 66) == 6;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_is_tunnelled";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_tunnelled";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_is_tunnelled";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_tunnelled";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_tunnelled";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_get_scoped_interface_index(void *a1)
{
  _DWORD *v1;
  int v2;
  BOOL v3;
  uint64_t v4;

  v1 = a1;
  if (v1 && ((v2 = v1[66], v2 != 12) ? (v3 = v2 == 6) : (v3 = 1), v3))
    v4 = v1[67];
  else
    v4 = 0;

  return v4;
}

uint64_t nw_path_has_nat64_prefixes(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 474) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_nat64_prefixes";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_nat64_prefixes";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_nat64_prefixes";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_nat64_prefixes";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_nat64_prefixes";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

char *nw_path_nat64_prefixes(void *a1)
{
  char *v1;
  char *v2;
  char *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1 + 392;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_nat64_prefixes";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_nat64_prefixes";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_nat64_prefixes";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_nat64_prefixes";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_nat64_prefixes";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_has_kernel_extension_filter(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[476] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_kernel_extension_filter";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_kernel_extension_filter";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_kernel_extension_filter";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_kernel_extension_filter";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_kernel_extension_filter";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_has_custom_pf_rules(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[476] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_custom_pf_rules";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_custom_pf_rules";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_custom_pf_rules";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_custom_pf_rules";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_custom_pf_rules";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_has_application_level_firewall(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[476] >> 5) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_application_level_firewall";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_application_level_firewall";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_application_level_firewall";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_application_level_firewall";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_application_level_firewall";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_has_parental_controls(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[476] >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_parental_controls";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_parental_controls";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_parental_controls";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_parental_controls";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_parental_controls";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_is_override_expensive(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[475] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_is_override_expensive";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_override_expensive";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_is_override_expensive";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_override_expensive";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_override_expensive";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_is_override_constrained(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[475] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_is_override_constrained";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_override_constrained";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_is_override_constrained";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_override_constrained";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_override_constrained";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_get_reason_description(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 31);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_get_reason_description";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_reason_description";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_get_reason_description";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_reason_description";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_reason_description";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

NWConcrete_nw_interface *nw_path_copy_interface_from_cache(unsigned int a1)
{
  id v2;
  NWConcrete_nw_interface *v3;

  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v2 = (id)nw_context_copy_implicit_context::implicit_context;
  v3 = nw_path_copy_interface_with_generation(v2, a1, 0);

  return v3;
}

void sub_1839DDE40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_agent_action(NWConcrete_nw_path *a1, const unsigned __int8 *a2, int a3)
{
  NWConcrete_nw_path *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  int v11;
  char *v12;
  void *v13;
  int v14;
  _BOOL8 v15;
  int v16;
  NSObject *v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL8 result;
  void *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  NSObject *v36;
  void *v37;
  void *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  void *v42;
  int v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  os_log_type_t v47;
  char *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  os_log_type_t v54;
  os_log_type_t v55;
  id v56;
  os_log_type_t v57;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  char v61;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  _BYTE v66[20];
  uint64_t v67;

  v67 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_path_agent_action";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v7, &type, &v61))
      goto LABEL_30;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_path_agent_action";
        _os_log_impl(&dword_182FBE000, v8, v32, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_29;
    }
    if (!v61)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_path_agent_action";
        _os_log_impl(&dword_182FBE000, v8, v47, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_path_agent_action";
        _os_log_impl(&dword_182FBE000, v8, v34, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_29;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v64 = "nw_path_agent_action";
      v65 = 2082;
      *(_QWORD *)v66 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v34, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_62;
  }
  if (uuid_is_null(a2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v64 = "nw_path_agent_action";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v7, &type, &v61))
      goto LABEL_30;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_path_agent_action";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null agent_uuid", buf, 0xCu);
      }
    }
    else if (v61)
    {
      v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v19 = type;
      v20 = os_log_type_enabled(v8, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v64 = "nw_path_agent_action";
          v65 = 2082;
          *(_QWORD *)v66 = v18;
          _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null agent_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
        if (!v7)
          goto LABEL_32;
        goto LABEL_31;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_path_agent_action";
        _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null agent_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v21 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_path_agent_action";
        _os_log_impl(&dword_182FBE000, v8, v21, "%{public}s called with null agent_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_29;
  }
  v10 = nw_parameters_copy_context(v5->parameters);
  v11 = nw_path_shared_necp_fd(v10);

  if (v11 < 0)
    goto LABEL_32;
  v12 = (char *)malloc_type_calloc(1uLL, 0x15uLL, 0xEAFB8F1AuLL);
  v13 = v12;
  if (v12)
  {
    *v12 = a3;
    *(_DWORD *)(v12 + 1) = 16;
    if (a2)
    {
      *(_OWORD *)(v12 + 5) = *(_OWORD *)a2;
      goto LABEL_12;
    }
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v64 = "nw_necp_append_tlv";
    v65 = 1024;
    v43 = a3;
    *(_DWORD *)v66 = a3;
    *(_WORD *)&v66[4] = 1024;
    *(_DWORD *)&v66[6] = 16;
    v44 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v44, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        if (os_log_type_enabled(v45, type))
        {
          *(_DWORD *)buf = 136446722;
          v64 = "nw_necp_append_tlv";
          v65 = 1024;
          *(_DWORD *)v66 = v43;
          *(_WORD *)&v66[4] = 1024;
          *(_DWORD *)&v66[6] = 16;
          _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s type=%u length=%u but value is NULL", buf, 0x18u);
        }
      }
      else if (v61)
      {
        v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v52 = type;
        v53 = os_log_type_enabled(v45, type);
        if (v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446978;
            v64 = "nw_necp_append_tlv";
            v65 = 1024;
            *(_DWORD *)v66 = v43;
            *(_WORD *)&v66[4] = 1024;
            *(_DWORD *)&v66[6] = 16;
            *(_WORD *)&v66[10] = 2082;
            *(_QWORD *)&v66[12] = v51;
            _os_log_impl(&dword_182FBE000, v45, v52, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(v51);
          goto LABEL_120;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446722;
          v64 = "nw_necp_append_tlv";
          v65 = 1024;
          *(_DWORD *)v66 = v43;
          *(_WORD *)&v66[4] = 1024;
          *(_DWORD *)&v66[6] = 16;
          _os_log_impl(&dword_182FBE000, v45, v52, "%{public}s type=%u length=%u but value is NULL, no backtrace", buf, 0x18u);
        }
      }
      else
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        v55 = type;
        if (os_log_type_enabled(v45, type))
        {
          *(_DWORD *)buf = 136446722;
          v64 = "nw_necp_append_tlv";
          v65 = 1024;
          *(_DWORD *)v66 = v43;
          *(_WORD *)&v66[4] = 1024;
          *(_DWORD *)&v66[6] = 16;
          _os_log_impl(&dword_182FBE000, v45, v55, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", buf, 0x18u);
        }
      }

    }
LABEL_120:
    if (v44)
      free(v44);
LABEL_12:
    v14 = necp_client_action();
    v15 = v14 == 0;
    if (!v14)
    {
LABEL_51:
      free(v13);
      goto LABEL_52;
    }
    v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v16 == 45 || v16 == 2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = (id)gLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v64 = "nw_path_agent_action";
        v65 = 1024;
        *(_DWORD *)v66 = v16;
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d", buf, 0x12u);
      }

      goto LABEL_51;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v64 = "nw_path_agent_action";
    v65 = 1024;
    *(_DWORD *)v66 = v16;
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v23, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446466;
          v64 = "nw_path_agent_action";
          v65 = 1024;
          *(_DWORD *)v66 = v16;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d", buf, 0x12u);
        }
      }
      else if (v61)
      {
        v26 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v24, type);
        if (v26)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446722;
            v64 = "nw_path_agent_action";
            v65 = 1024;
            *(_DWORD *)v66 = v16;
            *(_WORD *)&v66[4] = 2082;
            *(_QWORD *)&v66[6] = v26;
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v26);
          goto LABEL_49;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v64 = "nw_path_agent_action";
          v65 = 1024;
          *(_DWORD *)v66 = v16;
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446466;
          v64 = "nw_path_agent_action";
          v65 = 1024;
          *(_DWORD *)v66 = v16;
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
LABEL_49:
    if (v23)
      free(v23);
    goto LABEL_51;
  }
  __nwlog_obj();
  v36 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v64 = "strict_calloc";
  v65 = 2048;
  *(_QWORD *)v66 = 1;
  *(_WORD *)&v66[8] = 2048;
  *(_QWORD *)&v66[10] = 21;
  v37 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v37);
  if (!result)
  {
    free(v37);
    __nwlog_obj();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v64 = "nw_necp_append_tlv";
    v39 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v39, &type, &v61))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null tlv_start", buf, 0xCu);
        }
      }
      else if (v61)
      {
        v48 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v49 = type;
        v50 = os_log_type_enabled(v40, type);
        if (v48)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            v64 = "nw_necp_append_tlv";
            v65 = 2082;
            *(_QWORD *)v66 = v48;
            _os_log_impl(&dword_182FBE000, v40, v49, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v48);
          goto LABEL_99;
        }
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v40, v49, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v54 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)buf = 136446210;
          v64 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v40, v54, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_99:
    if (v39)
      free(v39);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v56 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v64 = "nw_path_agent_action";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (!__nwlog_fault(v7, &type, &v61))
    {
LABEL_30:
      if (v7)
LABEL_31:
        free(v7);
LABEL_32:
      v15 = 0;
LABEL_52:

      return v15;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v57 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_path_agent_action";
        _os_log_impl(&dword_182FBE000, v8, v57, "%{public}s nw_path_create_necp_agent_action failed", buf, 0xCu);
      }
LABEL_29:

      goto LABEL_30;
    }
    if (!v61)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v60 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_path_agent_action";
        _os_log_impl(&dword_182FBE000, v8, v60, "%{public}s nw_path_create_necp_agent_action failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_29;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v58 = type;
    v59 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        v64 = "nw_path_agent_action";
        _os_log_impl(&dword_182FBE000, v8, v58, "%{public}s nw_path_create_necp_agent_action failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_29;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      v64 = "nw_path_agent_action";
      v65 = 2082;
      *(_QWORD *)v66 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v58, "%{public}s nw_path_create_necp_agent_action failed, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_62:

    free(backtrace_string);
    goto LABEL_30;
  }
  __break(1u);
  return result;
}

void sub_1839DEE20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_assert_agent(NWConcrete_nw_path *a1, const unsigned __int8 *a2)
{
  return nw_path_agent_action(a1, a2, 131);
}

const char *nw_path_evaluator_get_error_string(unsigned int a1)
{
  if (a1 > 2)
    return "unknown error";
  else
    return off_1E14A9360[a1];
}

BOOL nw_path_trigger_agent(NWConcrete_nw_path *a1, const unsigned __int8 *a2)
{
  return nw_path_agent_action(a1, a2, 130);
}

uint64_t __nw_path_trigger_inactive_cellular_agent_if_necessary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  const char *data;
  const char *v7;
  size_t length;

  v4 = a3;
  v5 = v4;
  length = 0;
  if (v4)
  {
    data = (const char *)xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8)
      {
        v7 = data;
        if (length == *((unsigned int *)data + 53) + 216
          && (data[208] & 2) == 0
          && !strncmp(data + 16, "Cellular", 0x20uLL)
          && !strncmp(v7 + 48, "Internet", 0x20uLL))
        {
          nw_path_agent_action(*(NWConcrete_nw_path **)(a1 + 32), (const unsigned __int8 *)v7, 130);
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
        }
      }
    }
  }

  return 1;
}

void sub_1839DEF54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_flow_registration_copy_parent_evaluator(NWConcrete_nw_path_flow_registration *a1)
{
  NWConcrete_nw_path_flow_registration *v1;
  NWConcrete_nw_path_flow_registration *v2;
  NWConcrete_nw_path_evaluator *parent_evaluator;
  NWConcrete_nw_path_evaluator *v4;
  unsigned __int8 *subflow_registrations;
  _QWORD v7[5];
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t);
  id v13;

  v1 = a1;
  v2 = v1;
  parent_evaluator = v1->parent_evaluator;
  if (parent_evaluator)
  {
    v4 = parent_evaluator;
  }
  else
  {
    subflow_registrations = (unsigned __int8 *)v1->subflow_registrations;
    if (subflow_registrations)
    {
      v8 = 0;
      v9 = &v8;
      v10 = 0x3032000000;
      v11 = __Block_byref_object_copy__67271;
      v12 = __Block_byref_object_dispose__67272;
      v13 = 0;
      v7[0] = MEMORY[0x1E0C809B0];
      v7[1] = 3221225472;
      v7[2] = ___ZL47nw_path_flow_registration_copy_parent_evaluatorP36NWConcrete_nw_path_flow_registration_block_invoke;
      v7[3] = &unk_1E14A8DC0;
      v7[4] = &v8;
      nw_array_apply(subflow_registrations, (uint64_t)v7);
      v4 = (NWConcrete_nw_path_evaluator *)(id)v9[5];
      _Block_object_dispose(&v8, 8);

    }
    else
    {
      v4 = 0;
    }
  }

  return v4;
}

BOOL ___ZL47nw_path_flow_registration_copy_parent_evaluatorP36NWConcrete_nw_path_flow_registration_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a3 + 8);
  if (v3)
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a3 + 8));
  return v3 == 0;
}

void nw_path_flow_registration_set_tfo_cache(void *a1, void *a2, uint64_t a3)
{
  void **v5;
  id v6;
  void *v7;
  id v8;
  int v9;
  int v10;
  NSObject *v11;
  NSObject *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  void *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  os_log_type_t v35;
  char v36;
  os_log_type_t v37[8];
  uint64_t v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  _WORD v43[17];

  *(_QWORD *)&v43[13] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_path_flow_registration_set_tfo_cache";
    v13 = (char *)_os_log_send_and_compose_impl();

    v37[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v13, v37, &type))
      goto LABEL_28;
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v33 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_182FBE000, v21, v33, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_78;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v27 = v37[0];
    v28 = os_log_type_enabled(v21, v37[0]);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_182FBE000, v21, v27, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v41 = "nw_path_flow_registration_set_tfo_cache";
      v42 = 2082;
      *(_QWORD *)v43 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v27, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_60;
  }
  if (!v6)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_path_flow_registration_set_tfo_cache";
    v13 = (char *)_os_log_send_and_compose_impl();

    v37[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v13, v37, &type))
      goto LABEL_28;
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v24 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null flow_registration", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v34 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_78;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v29 = v37[0];
    v30 = os_log_type_enabled(v21, v37[0]);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_182FBE000, v21, v29, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v41 = "nw_path_flow_registration_set_tfo_cache";
      v42 = 2082;
      *(_QWORD *)v43 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v29, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_60;
  }
  if (!a3)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_path_flow_registration_set_tfo_cache";
    v13 = (char *)_os_log_send_and_compose_impl();

    v37[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v13, v37, &type))
      goto LABEL_28;
    if (v37[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v26 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null tfo_cache_buffer", buf, 0xCu);
      }
LABEL_78:

LABEL_28:
      if (!v13)
        goto LABEL_30;
LABEL_29:
      free(v13);
      goto LABEL_30;
    }
    if (type == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v35 = v37[0];
      if (os_log_type_enabled(v21, v37[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_182FBE000, v21, v35, "%{public}s called with null tfo_cache_buffer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_78;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    v31 = v37[0];
    v32 = os_log_type_enabled(v21, v37[0]);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        _os_log_impl(&dword_182FBE000, v21, v31, "%{public}s called with null tfo_cache_buffer, no backtrace", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v41 = "nw_path_flow_registration_set_tfo_cache";
      v42 = 2082;
      *(_QWORD *)v43 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v21, v31, "%{public}s called with null tfo_cache_buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_60:

    goto LABEL_20;
  }
  *(_QWORD *)v37 = 0;
  v8 = nw_parameters_copy_context(v5[2]);
  v9 = nw_path_shared_necp_fd(v8);

  if (v9 < 0)
    goto LABEL_30;
  *(_WORD *)v37 = 258;
  v38 = a3;
  *(_DWORD *)&v37[4] = 18;
  if (!necp_client_action())
    goto LABEL_30;
  v10 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  v12 = v11;
  if (v10 != 2)
  {
    *(_DWORD *)buf = 136446466;
    v41 = "nw_path_flow_registration_set_tfo_cache";
    v42 = 1024;
    *(_DWORD *)v43 = v10;
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v13, &type, &v36))
      goto LABEL_28;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446466;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        v42 = 1024;
        *(_DWORD *)v43 = v10;
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s necp update cache failed for tfo %{darwin.errno}d", buf, 0x12u);
      }
LABEL_27:

      goto LABEL_28;
    }
    if (!v36)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446466;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        v42 = 1024;
        *(_DWORD *)v43 = v10;
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s necp update cache failed for tfo %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
      }
      goto LABEL_27;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v17 = type;
    v18 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v41 = "nw_path_flow_registration_set_tfo_cache";
        v42 = 1024;
        *(_DWORD *)v43 = v10;
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s necp update cache failed for tfo %{darwin.errno}d, no backtrace", buf, 0x12u);
      }
      goto LABEL_27;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446722;
      v41 = "nw_path_flow_registration_set_tfo_cache";
      v42 = 1024;
      *(_DWORD *)v43 = v10;
      v43[2] = 2082;
      *(_QWORD *)&v43[3] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s necp update cache failed for tfo %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
    }

LABEL_20:
    free(backtrace_string);
    if (!v13)
      goto LABEL_30;
    goto LABEL_29;
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446466;
    v41 = "nw_path_flow_registration_set_tfo_cache";
    v42 = 1024;
    *(_DWORD *)v43 = 2;
    _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s necp update cache failed for tfo %{darwin.errno}d", buf, 0x12u);
  }

LABEL_30:
}

void sub_1839DFA5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_path_flow_registration_set_specific_use_only(void *a1, char a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_BYTE *)v3 + 149) = *((_BYTE *)v3 + 149) & 0xFE | a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_registration_set_specific_use_only";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_set_specific_use_only";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_registration_set_specific_use_only";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_set_specific_use_only";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_set_specific_use_only";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

BOOL nw_path_request_nexus(void *a1)
{
  void **v1;
  id v2;
  int v3;
  _BOOL8 v4;
  int v5;
  NSObject *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[4];
  NSObject *v17;
  void **v18;
  char v19;
  os_log_type_t v20;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    nw_allow_use_of_dispatch_internal();
    v2 = nw_parameters_copy_context(v1[2]);
    if ((nw_path_shared_necp_fd(v2) & 0x80000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      v3 = necp_client_action();
      v4 = v3 == 0;
      if (v3)
      {
        v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_path_request_nexus";
          v23 = 1024;
          LODWORD(v24) = v5;
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_REQUEST_NEXUS_INSTANCE %{darwin.errno}d", buf, 0x12u);
        }
      }
      else
      {
        v16[0] = MEMORY[0x1E0C809B0];
        v16[1] = 3221225472;
        v16[2] = __nw_path_request_nexus_block_invoke;
        v16[3] = &unk_1E14ACE68;
        v17 = v2;
        v18 = v1;
        nw_queue_context_async_if_needed(v17, v16);

        v6 = v17;
      }

    }
    goto LABEL_10;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_path_request_nexus";
  v9 = (char *)_os_log_send_and_compose_impl();

  v20 = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v9, &v20, &v19))
  {
    if (v20 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v20;
      if (os_log_type_enabled(v10, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_path_request_nexus";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = v20;
      v14 = os_log_type_enabled(v10, v20);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_path_request_nexus";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_path_request_nexus";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v20;
      if (os_log_type_enabled(v10, v20))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_path_request_nexus";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v9)
    free(v9);
  v4 = 0;
LABEL_10:

  return v4;
}

void sub_1839E00DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_path_request_nexus_block_invoke(uint64_t a1)
{
  nw_path_necp_check_for_updates(*(void **)(a1 + 32), (_OWORD *)(*(_QWORD *)(a1 + 40) + 120), 0);
}

BOOL nw_path_evaluator_request_nexus(void *a1)
{
  id v1;
  id v2;
  int v3;
  _BOOL8 v4;
  int v5;
  NSObject *v6;
  int v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  NSObject *v18;
  id v19;
  int v20;
  char v21;
  os_log_type_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    nw_allow_use_of_dispatch_internal();
    v2 = nw_parameters_copy_context(*((void **)v1 + 1));
    if ((nw_path_shared_necp_fd(v2) & 0x80000000) != 0)
    {
      v4 = 0;
    }
    else
    {
      v3 = necp_client_action();
      v4 = v3 == 0;
      if (v3)
      {
        v5 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_path_evaluator_request_nexus";
          v25 = 1024;
          LODWORD(v26) = v5;
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_REQUEST_NEXUS_INSTANCE %{darwin.errno}d", buf, 0x12u);
        }
      }
      else
      {
        os_unfair_lock_lock((os_unfair_lock_t)v1 + 24);
        v7 = *((_DWORD *)v1 + 25);
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 24);
        v17[0] = MEMORY[0x1E0C809B0];
        v17[1] = 3221225472;
        v17[2] = __nw_path_evaluator_request_nexus_block_invoke;
        v17[3] = &unk_1E14ACF20;
        v18 = v2;
        v19 = v1;
        v20 = v7;
        nw_queue_context_async_if_needed(v18, v17);

        v6 = v18;
      }

    }
    goto LABEL_10;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_path_evaluator_request_nexus";
  v10 = (char *)_os_log_send_and_compose_impl();

  v22 = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v10, &v22, &v21))
  {
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_path_evaluator_request_nexus";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = v22;
      v15 = os_log_type_enabled(v11, v22);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_path_evaluator_request_nexus";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_path_evaluator_request_nexus";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_path_evaluator_request_nexus";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v10)
    free(v10);
  v4 = 0;
LABEL_10:

  return v4;
}

void sub_1839E0500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_path_evaluator_request_nexus_block_invoke(uint64_t a1)
{
  nw_path_necp_check_for_updates(*(void **)(a1 + 32), (_OWORD *)(*(_QWORD *)(a1 + 40) + 80), *(_DWORD *)(a1 + 48));
}

NWConcrete_nw_path_flow_registration *nw_path_evaluator_create_flow(void *a1, int a2, int a3, int a4, int a5, _OWORD *a6, _DWORD *a7)
{
  return nw_path_evaluator_create_flow_inner(a1, a2, a3, a4, a5, a6, 0, 0, a7);
}

NWConcrete_nw_path_flow_registration *nw_path_evaluator_create_flow_inner(void *a1, int a2, int a3, int a4, int a5, _OWORD *a6, void *a7, int a8, _DWORD *a9)
{
  char *v16;
  id v17;
  id v18;
  NWConcrete_nw_path_flow_registration *v19;
  NWConcrete_nw_path_flow_registration *v20;
  id v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  int ip_protocol;
  NSObject *v27;
  int v28;
  const sockaddr *address;
  const sockaddr *v30;
  int sa_family;
  size_t sa_len;
  uint64_t v33;
  int v34;
  char *v35;
  NWConcrete_nw_parameters *v36;
  char *v37;
  NSObject *v38;
  NSObject *v39;
  NSObject *v40;
  NWConcrete_nw_path_flow_registration *v41;
  char v42;
  _DWORD *v43;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  char *backtrace_string;
  os_log_type_t v49;
  _BOOL4 v50;
  NSObject *v51;
  os_log_type_t v52;
  NSObject *log;
  char v55;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  _BYTE v59[30];
  unsigned __int8 out[32];
  __int128 v61;
  __int128 v62;
  _BYTE v63[25];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  v17 = a7;
  if (!v16)
  {
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)out = 136446210;
    *(_QWORD *)&out[4] = "nw_path_evaluator_create_flow_inner";
    v45 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v55 = 0;
    if (__nwlog_fault(v45, buf, &v55))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v47 = buf[0];
        if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_path_evaluator_create_flow_inner";
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null evaluator", out, 0xCu);
        }
      }
      else if (v55)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v49 = buf[0];
        v50 = os_log_type_enabled(v46, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)out = 136446466;
            *(_QWORD *)&out[4] = "nw_path_evaluator_create_flow_inner";
            *(_WORD *)&out[12] = 2082;
            *(_QWORD *)&out[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null evaluator, dumping backtrace:%{public}s", out, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_78;
        }
        if (v50)
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_path_evaluator_create_flow_inner";
          _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null evaluator, no backtrace", out, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v52 = buf[0];
        if (os_log_type_enabled(v46, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)out = 136446210;
          *(_QWORD *)&out[4] = "nw_path_evaluator_create_flow_inner";
          _os_log_impl(&dword_182FBE000, v46, v52, "%{public}s called with null evaluator, backtrace limit exceeded", out, 0xCu);
        }
      }

    }
LABEL_78:
    if (v45)
      free(v45);
    goto LABEL_80;
  }
  v18 = nw_parameters_copy_context(*((void **)v16 + 1));
  nw_context_assert_queue(v18);

  if (nw_path_endpoint_is_always_satisfied(*((void **)v16 + 2)))
  {
    *(_QWORD *)out = 0;
    *(_QWORD *)&out[8] = 0;
    uuid_generate_random(out);
    v19 = nw_path_flow_registration_create((NWConcrete_nw_path_evaluator *)v16, out);
    v20 = v19;
    if (v19)
      *((_BYTE *)v19 + 148) |= 1u;
    goto LABEL_81;
  }
  v21 = nw_parameters_copy_context(*((void **)v16 + 1));
  v22 = nw_path_shared_necp_fd(v21);

  if (v22 < 0)
  {
LABEL_80:
    v20 = 0;
    goto LABEL_81;
  }
  v62 = 0u;
  memset(v63, 0, sizeof(v63));
  v61 = 0u;
  memset(out, 0, sizeof(out));
  if (!a3)
  {
    v23 = 0;
    if (!a4)
      goto LABEL_11;
    goto LABEL_10;
  }
  v23 = 1;
  LOWORD(v61) = 1;
  if (a4)
  {
LABEL_10:
    v23 |= 4u;
    LOWORD(v61) = v23;
  }
LABEL_11:
  if (!a5)
  {
    if (!a6)
      goto LABEL_16;
    goto LABEL_15;
  }
  v23 |= 8u;
  LOWORD(v61) = v23;
  if (a6)
LABEL_15:
    *(_OWORD *)out = *a6;
LABEL_16:
  if (!a2)
  {
    v25 = 36;
    if (!v17)
      goto LABEL_38;
    goto LABEL_29;
  }
  WORD1(v61) = 1;
  if (nw_parameters_get_upper_transport_protocol(*((void **)v16 + 1)) == 253)
  {
    v24 = 3;
LABEL_19:
    DWORD1(v61) = v24;
    *((_QWORD *)&v61 + 1) = 0x9800000001;
    goto LABEL_28;
  }
  if ((nw_path_get_nexus_protocol_level(*((void **)v16 + 6)) & 0xFFFFFFFE) == 2)
  {
    ip_protocol = a8;
    if (!a8)
      ip_protocol = nw_parameters_get_ip_protocol(*((void **)v16 + 1));
    if (ip_protocol == 6)
    {
      v24 = 1;
      goto LABEL_19;
    }
    if (ip_protocol == 17)
    {
      v24 = 2;
      goto LABEL_19;
    }
  }
LABEL_28:
  v25 = 60;
  if (!v17)
    goto LABEL_38;
LABEL_29:
  v27 = v17;
  v28 = -[NSObject type](v27, "type");

  if (v28 == 1)
  {
    address = nw_endpoint_get_address(v27);
    v30 = address;
    if (address)
    {
      sa_family = address->sa_family;
      if (sa_family == 30 || sa_family == 2)
      {
        sa_len = address->sa_len;
        if (sa_len <= 0x1C)
        {
          v25 += sa_len;
          v23 |= 0x10u;
          LOWORD(v61) = v23;
          if (gLogDatapath)
          {
            __nwlog_obj();
            log = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              v57 = "nw_path_evaluator_create_flow_inner";
              v58 = 2112;
              *(_QWORD *)v59 = v27;
              *(_WORD *)&v59[8] = 1024;
              *(_DWORD *)&v59[10] = v23;
              *(_WORD *)&v59[14] = 2048;
              *(_QWORD *)&v59[16] = v25;
              _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s Adding override endpoint %@, flags %x, length %zu", buf, 0x26u);
            }

            sa_len = v30->sa_len;
          }
          v33 = 36;
          if (a2)
            v33 = 60;
          memcpy(&out[v33], v30, sa_len);
        }
      }
    }
  }
LABEL_38:
  if (a8)
  {
    LOWORD(v61) = v23 | 0x20;
    v63[24] = a8;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v51 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v57 = "nw_path_evaluator_create_flow_inner";
        v58 = 1024;
        *(_DWORD *)v59 = a8;
        *(_WORD *)&v59[4] = 1024;
        *(_DWORD *)&v59[6] = v23 | 0x20;
        *(_WORD *)&v59[10] = 2048;
        *(_QWORD *)&v59[12] = v25;
        _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s Adding override ip protocol %u, flags %x, length %zu", buf, 0x22u);
      }

    }
    out[v25] = a8;
  }
  if (necp_client_action())
  {
    v34 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    v35 = v16;
    os_unfair_lock_lock((os_unfair_lock_t)v16 + 24);
    v36 = (NWConcrete_nw_parameters *)*((id *)v16 + 1);
    os_unfair_lock_unlock((os_unfair_lock_t)v16 + 24);

    v37 = nw_parameters_copy_description_internal(v36, 1);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v38 = (id)gLogObj;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v57 = "nw_path_evaluator_create_flow_inner";
      v58 = 2112;
      *(_QWORD *)v59 = v17;
      *(_WORD *)&v59[8] = 2080;
      *(_QWORD *)&v59[10] = v37;
      _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_ERROR, "%{public}s failed NECP_CLIENT_ACTION_ADD_FLOW %@ evaluator parameters: %s", buf, 0x20u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v39 = (id)gLogObj;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v57 = "nw_path_evaluator_create_flow_inner";
      v58 = 1042;
      *(_DWORD *)v59 = 16;
      *(_WORD *)&v59[4] = 2098;
      *(_QWORD *)&v59[6] = v16 + 80;
      *(_WORD *)&v59[14] = 1024;
      *(_DWORD *)&v59[16] = v34;
      _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_ADD_FLOW %{public,uuid_t}.16P %{darwin.errno}d", buf, 0x22u);
    }

    if (v37)
      free(v37);
    if (a9)
      *a9 = v34;
    goto LABEL_80;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v40 = (id)gLogObj;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136447234;
    v57 = "nw_path_evaluator_create_flow_inner";
    v58 = 1042;
    *(_DWORD *)v59 = 16;
    *(_WORD *)&v59[4] = 2098;
    *(_QWORD *)&v59[6] = &out[16];
    *(_WORD *)&v59[14] = 1042;
    *(_DWORD *)&v59[16] = 16;
    *(_WORD *)&v59[20] = 2098;
    *(_QWORD *)&v59[22] = v16 + 80;
    _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s Added flow %{public,uuid_t}.16P to %{public,uuid_t}.16P", buf, 0x2Cu);
  }

  v41 = nw_path_flow_registration_create((NWConcrete_nw_path_evaluator *)v16, &out[16]);
  v20 = v41;
  if (!v41)
    goto LABEL_80;
  v42 = *((_BYTE *)v41 + 148);
  *((_BYTE *)v41 + 148) = v42 | 1;
  if (a3)
  {
    *((_BYTE *)v41 + 148) = v42 | 5;
    *(_OWORD *)v41->nexus_agent = *(_OWORD *)out;
  }
  if (WORD1(v61))
  {
    v43 = *(_DWORD **)((char *)&v62 + 4);
    if (*(_QWORD *)((char *)&v62 + 4))
    {
      v41->flow_stats_area = *(necp_all_stats **)((char *)&v62 + 4);
      *v43 = DWORD1(v61);
      v41->flow_stats_area->var0.var0.var0.var1 = DWORD2(v61);
    }
  }
LABEL_81:

  return v20;
}

void sub_1839E0DE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow_registration *nw_path_flow_registration_create(NWConcrete_nw_path_evaluator *a1, unsigned __int8 *a2)
{
  NWConcrete_nw_path_evaluator *v4;
  NWConcrete_nw_path_flow_registration *internal;
  NWConcrete_nw_path_flow_registration *v6;
  unsigned int v7;
  id v8;
  uint64_t globals_for_path;
  os_unfair_lock_s *v10;
  uint64_t v11;
  _BOOL8 v12;
  NWConcrete_nw_path_flow_registration *v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  NSObject *v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  _WORD v37[17];

  *(_QWORD *)&v37[13] = *MEMORY[0x1E0C80C00];
  v4 = a1;
  internal = nw_path_flow_registration_create_internal();
  v6 = internal;
  if (!internal)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v35 = "nw_path_flow_registration_create";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v15, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed", buf, 0xCu);
        }
      }
      else if (v32)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v20 = type;
        v21 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "nw_path_flow_registration_create";
            v36 = 2082;
            *(_QWORD *)v37 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v20, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v15)
            goto LABEL_52;
          goto LABEL_36;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_182FBE000, v16, v20, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow_registration) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v15)
    {
LABEL_52:
      v13 = 0;
      goto LABEL_53;
    }
LABEL_36:
    free(v15);
    goto LABEL_52;
  }
  *(_OWORD *)internal->registration_id = *(_OWORD *)a2;
  objc_storeStrong((id *)&internal->parent_evaluator, a1);
  os_unfair_lock_lock((os_unfair_lock_t)v4 + 24);
  v7 = *((_DWORD *)v4 + 25);
  *((_DWORD *)v4 + 25) = v7 + 1;
  os_unfair_lock_unlock((os_unfair_lock_t)v4 + 24);
  v8 = nw_parameters_copy_context(*((void **)v4 + 1));
  globals_for_path = nw_context_get_globals_for_path(v8);

  v10 = (os_unfair_lock_s *)(globals_for_path + 124);
  os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
  if (v7 > *(_DWORD *)(globals_for_path + 128))
    *(_DWORD *)(globals_for_path + 128) = v7;
  v11 = *(_QWORD *)(globals_for_path + 40);
  if (!v11)
  {
    v11 = nw_hash_table_create_internal(0x11u, 0, (const void *(*)(const void *, unsigned int *))nw_flow_registration_get_key, (unsigned int (*)(const void *, unsigned int))nw_flow_registration_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_flow_registration_matches_key, 0);
    if (v11)
    {
      *(_DWORD *)(v11 + 48) &= ~2u;
      *(_QWORD *)(globals_for_path + 40) = v11;
      goto LABEL_7;
    }
    *(_QWORD *)(globals_for_path + 40) = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v35 = "nw_path_flow_registration_create";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v23, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s nw_hash_table_create_no_lock failed", buf, 0xCu);
        }
      }
      else if (v32)
      {
        v27 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        v29 = os_log_type_enabled(v24, type);
        if (v27)
        {
          if (v29)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "nw_path_flow_registration_create";
            v36 = 2082;
            *(_QWORD *)v37 = v27;
            _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s nw_hash_table_create_no_lock failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v27);
          if (!v23)
            goto LABEL_51;
          goto LABEL_50;
        }
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_182FBE000, v24, v28, "%{public}s nw_hash_table_create_no_lock failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_path_flow_registration_create";
          _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s nw_hash_table_create_no_lock failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v23)
    {
LABEL_51:
      os_unfair_lock_unlock(v10);
      goto LABEL_52;
    }
LABEL_50:
    free(v23);
    goto LABEL_51;
  }
LABEL_7:
  type = OS_LOG_TYPE_DEFAULT;
  v12 = nw_hash_table_add_object(v11, (uint64_t)v6, (char *)&type);
  os_unfair_lock_unlock(v10);
  if (type == OS_LOG_TYPE_DEFAULT || !v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v35 = "nw_path_flow_registration_create";
      v36 = 1042;
      *(_DWORD *)v37 = 16;
      v37[2] = 2098;
      *(_QWORD *)&v37[3] = v6->registration_id;
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s Failed to add flow registration for %{public,uuid_t}.16P", buf, 0x1Cu);
    }

    goto LABEL_52;
  }
  v13 = v6;
LABEL_53:

  return v13;
}

void sub_1839E1520(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_registration_get_key(const void *a1, unsigned int *a2)
{
  *a2 = 16;
  return (uint64_t)a1 + 32;
}

uint64_t nw_flow_registration_key_hash(int32x4_t *a1)
{
  return vaddvq_s32(*a1);
}

BOOL nw_flow_registration_matches_key(_QWORD *a1, _QWORD *a2)
{
  return a1[4] == *a2 && a1[5] == a2[1];
}

NWConcrete_nw_path_flow_registration *nw_path_flow_registration_create_new_flow(void *a1, int a2, int a3, int a4, int a5, _OWORD *a6, void *a7, int a8)
{
  NWConcrete_nw_path_flow_registration *v15;
  id v16;
  NWConcrete_nw_path_evaluator *v17;
  NWConcrete_nw_path_evaluator *v18;
  NWConcrete_nw_path_flow_registration *flow_inner;
  uint64_t subflow_registrations;
  _BOOL8 v21;
  OS_nw_array *v22;
  NSObject *v23;
  OS_nw_array *v24;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  char *backtrace_string;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  os_log_type_t v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  char *v47;
  __int16 v48;
  NWConcrete_nw_path_flow_registration *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a7;
  if (v15)
  {
    v17 = nw_path_flow_registration_copy_parent_evaluator(v15);
    v18 = v17;
    if (v17)
    {
      flow_inner = nw_path_evaluator_create_flow_inner(v17, a2, a3, a4, a5, a6, v16, a8, 0);
      subflow_registrations = (uint64_t)v15->subflow_registrations;
      if (!subflow_registrations)
      {
        v21 = nw_array_create();
        v22 = v15->subflow_registrations;
        v15->subflow_registrations = (OS_nw_array *)v21;

        subflow_registrations = (uint64_t)v15->subflow_registrations;
      }
      nw_array_append(subflow_registrations, flow_inner);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v24 = v15->subflow_registrations;
        *(_DWORD *)buf = 136446722;
        v45 = "nw_path_flow_registration_create_new_flow";
        v46 = 2112;
        v47 = (char *)v24;
        v48 = 2112;
        v49 = v15;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, "%{public}s Added subflow registration %@ to %@", buf, 0x20u);
      }

LABEL_8:
      goto LABEL_9;
    }
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_path_flow_registration_create_new_flow";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v31, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_path_flow_registration_create_new_flow";
          _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null evaluator", buf, 0xCu);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        v39 = os_log_type_enabled(v32, type);
        if (backtrace_string)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v45 = "nw_path_flow_registration_create_new_flow";
            v46 = 2082;
            v47 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v32, v38, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_45;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_path_flow_registration_create_new_flow";
          _os_log_impl(&dword_182FBE000, v32, v38, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v32, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_path_flow_registration_create_new_flow";
          _os_log_impl(&dword_182FBE000, v32, v41, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_45:
    if (v31)
      free(v31);
    flow_inner = 0;
    goto LABEL_8;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v45 = "nw_path_flow_registration_create_new_flow";
  v27 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v42 = 0;
  if (__nwlog_fault(v27, &type, &v42))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_flow_registration_create_new_flow";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null existing_flow_registration", buf, 0xCu);
      }
    }
    else if (v42)
    {
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v28, type);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_path_flow_registration_create_new_flow";
          v46 = 2082;
          v47 = v34;
          _os_log_impl(&dword_182FBE000, v28, v35, "%{public}s called with null existing_flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        goto LABEL_39;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_flow_registration_create_new_flow";
        _os_log_impl(&dword_182FBE000, v28, v35, "%{public}s called with null existing_flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_flow_registration_create_new_flow";
        _os_log_impl(&dword_182FBE000, v28, v40, "%{public}s called with null existing_flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_39:
  if (v27)
    free(v27);
  flow_inner = 0;
LABEL_9:

  return flow_inner;
}

void sub_1839E1B40(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_flow_registration *nw_path_flow_registration_create_new_flow_from_evaluator(void *a1, void *a2)
{
  _QWORD *v3;
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  id v6;
  NWConcrete_nw_path_flow_registration *v7;
  uint64_t v8;
  _BOOL8 v9;
  void *v10;
  NSObject *v11;
  char *v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  char v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  __int16 v35;
  _QWORD *v36;
  __int128 type;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v4)
  {
    os_unfair_lock_lock(v4 + 24);
    v6 = *(id *)&v5[12]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v5 + 24);
    if (v6)
    {
      type = 0uLL;
      nw_path_get_nexus_agent_uuid(v6, &type);
      v7 = nw_path_evaluator_create_flow_inner(v5, 1, 1, 0, 0, &type, 0, 0, 0);
      if (v3)
      {
        v8 = v3[2];
        if (!v8)
        {
          v9 = nw_array_create();
          v10 = (void *)v3[2];
          v3[2] = v9;

          v8 = v3[2];
        }
        nw_array_append(v8, v7);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          v12 = (char *)v3[2];
          *(_DWORD *)buf = 136446722;
          v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          v33 = 2112;
          v34 = v12;
          v35 = 2112;
          v36 = v3;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s Added subflow registration %@ to %@", buf, 0x20u);
        }

      }
LABEL_9:

      goto LABEL_10;
    }
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
    v19 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(type) = 16;
    v30 = 0;
    if (__nwlog_fault(v19, &type, &v30))
    {
      if (type == 17)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v27 = os_log_type_enabled(v20, (os_log_type_t)type);
        if (backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_46;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v20, (os_log_type_t)type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_46:
    if (v19)
      free(v19);
    v7 = 0;
    goto LABEL_9;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
  v15 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(type) = 16;
  v30 = 0;
  if (__nwlog_fault(v15, &type, &v30))
  {
    if (type == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }
    else if (v30)
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v16, (os_log_type_t)type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
          v33 = 2082;
          v34 = v22;
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        goto LABEL_40;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v16, (os_log_type_t)type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_flow_registration_create_new_flow_from_evaluator";
        _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_40:
  if (v15)
    free(v15);
  v7 = 0;
LABEL_10:

  return v7;
}

void sub_1839E2128(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_nexus_agent_uuid(void *a1, _OWORD *a2)
{
  NWConcrete_nw_path *v3;
  NWConcrete_nw_path *v4;
  const unsigned __int8 *nexus_agent;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_path_get_nexus_agent_uuid";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_get_nexus_agent_uuid";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_path_get_nexus_agent_uuid";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_get_nexus_agent_uuid";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_get_nexus_agent_uuid";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v9)
      free(v9);
    goto LABEL_4;
  }
  if (nw_path_uses_nexus_internal(v3, 0))
  {
    nexus_agent = (const unsigned __int8 *)nw_path_get_nexus_agent(v4, 0);
    if (!uuid_is_null(nexus_agent))
    {
      *a2 = *(_OWORD *)nexus_agent;
      v6 = 1;
      goto LABEL_5;
    }
  }
LABEL_4:
  v6 = 0;
LABEL_5:

  return v6;
}

void sub_1839E2418(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_flow_registration_force_update(void *a1)
{
  NWConcrete_nw_path_flow_registration *v1;
  NWConcrete_nw_path_flow_registration *v2;
  NWConcrete_nw_path_evaluator *v3;
  _BOOL8 v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_path_flow_registration_copy_parent_evaluator(v1);
    nw_path_evaluator_force_update(v3, v2);
    v4 = nw_path_flow_registration_copy_path(v2);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_path_flow_registration_force_update";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_flow_registration_force_update";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_path_flow_registration_force_update";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_flow_registration_force_update";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_flow_registration_force_update";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1839E26E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_path_flow_registration_copy_endpoint(void *a1)
{
  NWConcrete_nw_path_flow_registration *v1;
  NWConcrete_nw_path_flow_registration *v2;
  NWConcrete_nw_path_evaluator *v3;
  NWConcrete_nw_path_evaluator *v4;
  void *v5;
  id v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_path_flow_registration_copy_parent_evaluator(v1);
    v4 = v3;
    if (v3)
      v5 = (void *)*((_QWORD *)v3 + 2);
    else
      v5 = 0;
    v6 = v5;

    goto LABEL_6;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_path_flow_registration_copy_endpoint";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_flow_registration_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_path_flow_registration_copy_endpoint";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_flow_registration_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_flow_registration_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_6:

  return v6;
}

id nw_path_flow_registration_copy_parameters(void *a1)
{
  NWConcrete_nw_path_flow_registration *v1;
  NWConcrete_nw_path_flow_registration *v2;
  NWConcrete_nw_path_evaluator *v3;
  NWConcrete_nw_path_evaluator *v4;
  void *v5;
  id v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_path_flow_registration_copy_parent_evaluator(v1);
    v4 = v3;
    if (v3)
      v5 = (void *)*((_QWORD *)v3 + 1);
    else
      v5 = 0;
    v6 = v5;

    goto LABEL_6;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_path_flow_registration_copy_parameters";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_flow_registration_copy_parameters";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_path_flow_registration_copy_parameters";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_flow_registration_copy_parameters";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_flow_registration_copy_parameters";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_6:

  return v6;
}

BOOL nw_path_unassert_agent(NWConcrete_nw_path *a1, const unsigned __int8 *a2)
{
  return nw_path_agent_action(a1, a2, 132);
}

BOOL nw_path_add_group_members(void *a1, const unsigned __int8 *a2, void *a3)
{
  return nw_path_group_member_action(a1, a2, 133, a3);
}

BOOL nw_path_group_member_action(void *a1, const unsigned __int8 *a2, int a3, void *a4)
{
  void **v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  id v15;
  int v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  _WORD *v21;
  int64_t v22;
  char *v23;
  void *v24;
  char *v25;
  id v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  _BOOL8 v33;
  os_log_type_t v34;
  _BOOL8 result;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  char *v40;
  int v41;
  int v42;
  NSObject *v43;
  id v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  char *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  id v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  os_log_type_t v55;
  char *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  void *v60;
  os_log_type_t v61;
  char *backtrace_string;
  os_log_type_t v63;
  _BOOL4 v64;
  NSObject *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  void *v73;
  const char *v74;
  NSObject *v75;
  os_log_type_t v76;
  void *v77;
  char *v78;
  os_log_type_t v79;
  os_log_type_t v80;
  char *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  os_log_type_t v88;
  os_log_type_t v89;
  char *v90;
  unsigned __int8 *v91;
  void *v92;
  os_log_type_t type[8];
  uint64_t v94;
  uint64_t (*v95)(_QWORD *, uint64_t, void *);
  void *v96;
  _QWORD *v97;
  uint64_t *v98;
  _WORD *v99;
  _QWORD v100[4];
  _QWORD v101[6];
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  os_log_type_t v111;
  uint8_t buf[4];
  const char *v113;
  __int16 v114;
  _BYTE v115[18];
  __int16 v116;
  _BYTE v117[10];
  _BYTE v118[10];
  __int16 v119;
  char *v120;
  uint64_t v121;

  v121 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  v9 = v8;
  if (!v7)
  {
    v10 = v8;
    __nwlog_obj();
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v113 = "nw_path_group_member_action";
    v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v101[0]) = 0;
    if (__nwlog_fault(v12, type, v101))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v61 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v113 = "nw_path_group_member_action";
          _os_log_impl(&dword_182FBE000, v13, v61, "%{public}s called with null path", buf, 0xCu);
        }
LABEL_34:

        goto LABEL_35;
      }
      if (!LOBYTE(v101[0]))
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v80 = type[0];
        if (os_log_type_enabled(v13, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v113 = "nw_path_group_member_action";
          _os_log_impl(&dword_182FBE000, v13, v80, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_34;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v63 = type[0];
      v64 = os_log_type_enabled(v13, type[0]);
      if (!backtrace_string)
      {
        if (v64)
        {
          *(_DWORD *)buf = 136446210;
          v113 = "nw_path_group_member_action";
          _os_log_impl(&dword_182FBE000, v13, v63, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_34;
      }
      if (v64)
      {
        *(_DWORD *)buf = 136446466;
        v113 = "nw_path_group_member_action";
        v114 = 2082;
        *(_QWORD *)v115 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v13, v63, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_35:
    if (!v12)
    {
LABEL_37:
      v33 = 0;
      v9 = v10;
      goto LABEL_38;
    }
LABEL_36:
    free(v12);
    goto LABEL_37;
  }
  if (uuid_is_null(a2))
  {
    v10 = v9;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v113 = "nw_path_group_member_action";
    v12 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v101[0]) = 0;
    if (!__nwlog_fault(v12, type, v101))
      goto LABEL_35;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v113 = "nw_path_group_member_action";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null agent_uuid", buf, 0xCu);
      }
    }
    else if (LOBYTE(v101[0]))
    {
      v30 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v31 = type[0];
      v32 = os_log_type_enabled(v13, type[0]);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v113 = "nw_path_group_member_action";
          v114 = 2082;
          *(_QWORD *)v115 = v30;
          _os_log_impl(&dword_182FBE000, v13, v31, "%{public}s called with null agent_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
        if (!v12)
          goto LABEL_37;
        goto LABEL_36;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v113 = "nw_path_group_member_action";
        _os_log_impl(&dword_182FBE000, v13, v31, "%{public}s called with null agent_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v34 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v113 = "nw_path_group_member_action";
        _os_log_impl(&dword_182FBE000, v13, v34, "%{public}s called with null agent_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_34;
  }
  v15 = nw_parameters_copy_context(v7[2]);
  v16 = nw_path_shared_necp_fd(v15);

  if (v16 < 0)
  {
    v33 = 0;
LABEL_38:

    return v33;
  }
  v92 = v9;
  v17 = v9;
  v106 = 0;
  v107 = &v106;
  v108 = 0x2020000000;
  v109 = 0;
  v102 = 0;
  v103 = &v102;
  v104 = 0x2020000000;
  v105 = 0;
  v18 = MEMORY[0x1E0C809B0];
  v101[0] = MEMORY[0x1E0C809B0];
  v101[1] = 3221225472;
  v101[2] = __nw_path_create_necp_agent_group_action_block_invoke;
  v101[3] = &unk_1E14A8FF0;
  v101[4] = &v106;
  v101[5] = &v102;
  nw_array_apply(v17, (uint64_t)v101);
  v19 = v107[3];
  v20 = v19 + 18;
  v91 = v17;
  if (v19 == -18)
  {
    __nwlog_obj();
    v65 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v113 = "strict_calloc";
    v66 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v66);
    if (result)
      goto LABEL_158;
    free(v66);
    v17 = v91;
  }
  v21 = malloc_type_calloc(1uLL, v19 + 18, 0xEAFB8F1AuLL);
  if (!v21)
  {
    __nwlog_obj();
    v67 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v113 = "strict_calloc";
    v114 = 2048;
    *(_QWORD *)v115 = 1;
    *(_WORD *)&v115[8] = 2048;
    *(_QWORD *)&v115[10] = v19 + 18;
    v68 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v68);
    if (result)
      goto LABEL_158;
    free(v68);
    v17 = v91;
  }
  *(_OWORD *)v21 = *(_OWORD *)a2;
  v21[8] = *((_WORD *)v103 + 12);
  v100[0] = 0;
  v100[1] = v100;
  v100[2] = 0x2020000000;
  v100[3] = v21 + 9;
  *(_QWORD *)type = v18;
  v94 = 3221225472;
  v95 = __nw_path_create_necp_agent_group_action_block_invoke_2;
  v96 = &unk_1E14A9018;
  v97 = v100;
  v98 = &v106;
  v99 = v21;
  nw_array_apply(v17, (uint64_t)type);
  v22 = v19 + 23;
  if (v19 == -23)
  {
    __nwlog_obj();
    v69 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v113 = "strict_calloc";
    v70 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v70);
    if (result)
      goto LABEL_158;
    free(v70);
    v22 = 0;
  }
  v23 = (char *)malloc_type_calloc(1uLL, v22, 0xEAFB8F1AuLL);
  v24 = v23;
  if (v23)
  {
    v25 = &v23[v22];
    if (v22 <= 0)
    {
      __nwlog_obj();
      v77 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136447234;
      v113 = "nw_necp_append_tlv";
      v114 = 2048;
      *(_QWORD *)v115 = v24;
      *(_WORD *)&v115[8] = 2048;
      v78 = v25;
      *(_QWORD *)&v115[10] = v25;
      v116 = 1024;
      *(_DWORD *)v117 = a3;
      *(_WORD *)&v117[4] = 1024;
      *(_DWORD *)&v117[6] = v20;
      v27 = (const char *)_os_log_send_and_compose_impl();

      v111 = OS_LOG_TYPE_ERROR;
      v110 = 0;
      if (__nwlog_fault(v27, &v111, &v110))
      {
        if (v111 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v79 = v111;
          if (os_log_type_enabled(v28, v111))
          {
            *(_DWORD *)buf = 136447234;
            v113 = "nw_necp_append_tlv";
            v114 = 2048;
            *(_QWORD *)v115 = v24;
            *(_WORD *)&v115[8] = 2048;
            *(_QWORD *)&v115[10] = v78;
            v116 = 1024;
            *(_DWORD *)v117 = a3;
            *(_WORD *)&v117[4] = 1024;
            *(_DWORD *)&v117[6] = v20;
            _os_log_impl(&dword_182FBE000, v28, v79, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
          }
          goto LABEL_50;
        }
        if (!v110)
        {
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v89 = v111;
          if (os_log_type_enabled(v28, v111))
          {
            *(_DWORD *)buf = 136447234;
            v113 = "nw_necp_append_tlv";
            v114 = 2048;
            *(_QWORD *)v115 = v24;
            *(_WORD *)&v115[8] = 2048;
            *(_QWORD *)&v115[10] = v78;
            v116 = 1024;
            *(_DWORD *)v117 = a3;
            *(_WORD *)&v117[4] = 1024;
            *(_DWORD *)&v117[6] = v20;
            _os_log_impl(&dword_182FBE000, v28, v89, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
          }
          goto LABEL_50;
        }
        v84 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v85 = objc_claimAutoreleasedReturnValue();
        v86 = v111;
        v87 = os_log_type_enabled(v85, v111);
        if (v84)
        {
          if (v87)
          {
            *(_DWORD *)buf = 136447490;
            v113 = "nw_necp_append_tlv";
            v114 = 2048;
            *(_QWORD *)v115 = v24;
            *(_WORD *)&v115[8] = 2048;
            *(_QWORD *)&v115[10] = v78;
            v116 = 1024;
            *(_DWORD *)v117 = a3;
            *(_WORD *)&v117[4] = 1024;
            *(_DWORD *)&v117[6] = v20;
            *(_WORD *)v118 = 2082;
            *(_QWORD *)&v118[2] = v84;
            _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
          }

          free(v84);
        }
        else
        {
          if (v87)
          {
            *(_DWORD *)buf = 136447234;
            v113 = "nw_necp_append_tlv";
            v114 = 2048;
            *(_QWORD *)v115 = v24;
            *(_WORD *)&v115[8] = 2048;
            *(_QWORD *)&v115[10] = v78;
            v116 = 1024;
            *(_DWORD *)v117 = a3;
            *(_WORD *)&v117[4] = 1024;
            *(_DWORD *)&v117[6] = v20;
            _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
          }

        }
      }
LABEL_51:
      if (!v27)
        goto LABEL_54;
      goto LABEL_52;
    }
    if (v22 >= (unint64_t)(v19 + 18) + 5)
    {
      *v23 = a3;
      *(_DWORD *)(v23 + 1) = v20;
      if ((_DWORD)v19 != -18)
        memcpy(v23 + 5, v21, (v19 + 18));
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      *(_DWORD *)buf = 136447490;
      v113 = "nw_necp_append_tlv";
      v114 = 2048;
      *(_QWORD *)v115 = v24;
      *(_WORD *)&v115[8] = 2048;
      *(_QWORD *)&v115[10] = (v19 + 18) + 5;
      v116 = 2048;
      v90 = v25;
      *(_QWORD *)v117 = v25;
      *(_WORD *)&v117[8] = 1024;
      *(_DWORD *)v118 = a3;
      *(_WORD *)&v118[4] = 1024;
      *(_DWORD *)&v118[6] = v19 + 18;
      v27 = (const char *)_os_log_send_and_compose_impl();

      v111 = OS_LOG_TYPE_ERROR;
      v110 = 0;
      if (!__nwlog_fault(v27, &v111, &v110))
        goto LABEL_51;
      if (v111 == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v28 = (id)gLogObj;
        v29 = v111;
        if (os_log_type_enabled(v28, v111))
        {
          *(_DWORD *)buf = 136447490;
          v113 = "nw_necp_append_tlv";
          v114 = 2048;
          *(_QWORD *)v115 = v24;
          *(_WORD *)&v115[8] = 2048;
          *(_QWORD *)&v115[10] = (v19 + 18) + 5;
          v116 = 2048;
          *(_QWORD *)v117 = v90;
          *(_WORD *)&v117[8] = 1024;
          *(_DWORD *)v118 = a3;
          *(_WORD *)&v118[4] = 1024;
          *(_DWORD *)&v118[6] = v19 + 18;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
        }
LABEL_50:

        goto LABEL_51;
      }
      if (!v110)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v28 = (id)gLogObj;
        v39 = v111;
        if (os_log_type_enabled(v28, v111))
        {
          *(_DWORD *)buf = 136447490;
          v113 = "nw_necp_append_tlv";
          v114 = 2048;
          *(_QWORD *)v115 = v24;
          *(_WORD *)&v115[8] = 2048;
          *(_QWORD *)&v115[10] = (v19 + 18) + 5;
          v116 = 2048;
          *(_QWORD *)v117 = v90;
          *(_WORD *)&v117[8] = 1024;
          *(_DWORD *)v118 = a3;
          *(_WORD *)&v118[4] = 1024;
          *(_DWORD *)&v118[6] = v19 + 18;
          _os_log_impl(&dword_182FBE000, v28, v39, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
        }
        goto LABEL_50;
      }
      v36 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v28 = (id)gLogObj;
      v37 = v111;
      v38 = os_log_type_enabled(v28, v111);
      if (!v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136447490;
          v113 = "nw_necp_append_tlv";
          v114 = 2048;
          *(_QWORD *)v115 = v24;
          *(_WORD *)&v115[8] = 2048;
          *(_QWORD *)&v115[10] = v20 + 5;
          v116 = 2048;
          *(_QWORD *)v117 = v90;
          *(_WORD *)&v117[8] = 1024;
          *(_DWORD *)v118 = a3;
          *(_WORD *)&v118[4] = 1024;
          *(_DWORD *)&v118[6] = v20;
          _os_log_impl(&dword_182FBE000, v28, v37, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
        }
        goto LABEL_50;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136447746;
        v113 = "nw_necp_append_tlv";
        v114 = 2048;
        *(_QWORD *)v115 = v24;
        *(_WORD *)&v115[8] = 2048;
        *(_QWORD *)&v115[10] = v20 + 5;
        v116 = 2048;
        *(_QWORD *)v117 = v90;
        *(_WORD *)&v117[8] = 1024;
        *(_DWORD *)v118 = a3;
        *(_WORD *)&v118[4] = 1024;
        *(_DWORD *)&v118[6] = v20;
        v119 = 2082;
        v120 = v36;
        _os_log_impl(&dword_182FBE000, v28, v37, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
      }

      free(v36);
      if (v27)
      {
LABEL_52:
        v40 = (char *)v27;
LABEL_53:
        free(v40);
      }
    }
LABEL_54:
    free(v21);
    _Block_object_dispose(v100, 8);
    _Block_object_dispose(&v102, 8);
    _Block_object_dispose(&v106, 8);

    if (v24)
    {
      v41 = necp_client_action();
      v33 = v41 == 0;
      v9 = v92;
      if (!v41)
      {
LABEL_100:
        free(v24);
        goto LABEL_38;
      }
      v42 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (v42 == 45 || v42 == 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v43 = (id)gLogObj;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v113 = "nw_path_group_member_action";
          v114 = 1024;
          *(_DWORD *)v115 = v42;
          _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d", buf, 0x12u);
        }

LABEL_99:
        v9 = v92;
        goto LABEL_100;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v51 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      v113 = "nw_path_group_member_action";
      v114 = 1024;
      *(_DWORD *)v115 = v42;
      v52 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v101[0]) = 0;
      if (__nwlog_fault(v52, type, v101))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v53 = objc_claimAutoreleasedReturnValue();
          v54 = type[0];
          if (os_log_type_enabled(v53, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            v113 = "nw_path_group_member_action";
            v114 = 1024;
            *(_DWORD *)v115 = v42;
            _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (LOBYTE(v101[0]))
        {
          v56 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v53 = objc_claimAutoreleasedReturnValue();
          v57 = type[0];
          v58 = os_log_type_enabled(v53, type[0]);
          if (v56)
          {
            if (v58)
            {
              *(_DWORD *)buf = 136446722;
              v113 = "nw_path_group_member_action";
              v114 = 1024;
              *(_DWORD *)v115 = v42;
              *(_WORD *)&v115[4] = 2082;
              *(_QWORD *)&v115[6] = v56;
              _os_log_impl(&dword_182FBE000, v53, v57, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(v56);
            goto LABEL_97;
          }
          if (v58)
          {
            *(_DWORD *)buf = 136446466;
            v113 = "nw_path_group_member_action";
            v114 = 1024;
            *(_DWORD *)v115 = v42;
            _os_log_impl(&dword_182FBE000, v53, v57, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          __nwlog_obj();
          v53 = objc_claimAutoreleasedReturnValue();
          v59 = type[0];
          if (os_log_type_enabled(v53, type[0]))
          {
            *(_DWORD *)buf = 136446466;
            v113 = "nw_path_group_member_action";
            v114 = 1024;
            *(_DWORD *)v115 = v42;
            _os_log_impl(&dword_182FBE000, v53, v59, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
LABEL_97:
      if (v52)
        free(v52);
      goto LABEL_99;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v44 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v113 = "nw_path_group_member_action";
    v45 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v101[0]) = 0;
    if (__nwlog_fault(v45, type, v101))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v46 = (id)gLogObj;
        v47 = type[0];
        if (os_log_type_enabled(v46, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v113 = "nw_path_group_member_action";
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s nw_path_create_necp_agent_group_action failed", buf, 0xCu);
        }
      }
      else if (LOBYTE(v101[0]))
      {
        v48 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v49 = type[0];
        v50 = os_log_type_enabled(v46, type[0]);
        if (v48)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            v113 = "nw_path_group_member_action";
            v114 = 2082;
            *(_QWORD *)v115 = v48;
            _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s nw_path_create_necp_agent_group_action failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v48);
          if (!v45)
            goto LABEL_90;
          goto LABEL_89;
        }
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          v113 = "nw_path_group_member_action";
          _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s nw_path_create_necp_agent_group_action failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v55 = type[0];
        if (os_log_type_enabled(v46, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v113 = "nw_path_group_member_action";
          _os_log_impl(&dword_182FBE000, v46, v55, "%{public}s nw_path_create_necp_agent_group_action failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v45)
    {
LABEL_90:
      v33 = 0;
      v9 = v92;
      goto LABEL_38;
    }
LABEL_89:
    free(v45);
    goto LABEL_90;
  }
  __nwlog_obj();
  v71 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v113 = "strict_calloc";
  v114 = 2048;
  *(_QWORD *)v115 = 1;
  *(_WORD *)&v115[8] = 2048;
  *(_QWORD *)&v115[10] = v22;
  v72 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v72);
  if (!result)
  {
    free(v72);
    __nwlog_obj();
    v73 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v113 = "nw_necp_append_tlv";
    v74 = (const char *)_os_log_send_and_compose_impl();

    v111 = OS_LOG_TYPE_ERROR;
    v110 = 0;
    if (!__nwlog_fault(v74, &v111, &v110))
      goto LABEL_153;
    if (v111 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v75 = objc_claimAutoreleasedReturnValue();
      v76 = v111;
      if (os_log_type_enabled(v75, v111))
      {
        *(_DWORD *)buf = 136446210;
        v113 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v75, v76, "%{public}s called with null tlv_start", buf, 0xCu);
      }
    }
    else if (v110)
    {
      v81 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v75 = objc_claimAutoreleasedReturnValue();
      v82 = v111;
      v83 = os_log_type_enabled(v75, v111);
      if (v81)
      {
        if (v83)
        {
          *(_DWORD *)buf = 136446466;
          v113 = "nw_necp_append_tlv";
          v114 = 2082;
          *(_QWORD *)v115 = v81;
          _os_log_impl(&dword_182FBE000, v75, v82, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v81);
LABEL_153:
        if (v74)
        {
          v40 = (char *)v74;
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (v83)
      {
        *(_DWORD *)buf = 136446210;
        v113 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v75, v82, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v75 = objc_claimAutoreleasedReturnValue();
      v88 = v111;
      if (os_log_type_enabled(v75, v111))
      {
        *(_DWORD *)buf = 136446210;
        v113 = "nw_necp_append_tlv";
        _os_log_impl(&dword_182FBE000, v75, v88, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_153;
  }
LABEL_158:
  __break(1u);
  return result;
}

void sub_1839E4464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;

  _Unwind_Resume(a1);
}

BOOL nw_path_remove_group_members(void *a1, const unsigned __int8 *a2, void *a3)
{
  return nw_path_group_member_action(a1, a2, 134, a3);
}

void nw_path_flow_registration_clear_stats_regions(void *a1)
{
  char *v1;
  void *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_OWORD *)(v1 + 120) = 0u;
    *(_OWORD *)(v1 + 104) = 0u;
    *(_OWORD *)(v1 + 88) = 0u;
    goto LABEL_3;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_path_flow_registration_clear_stats_regions";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_path_flow_registration_clear_stats_regions";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_path_flow_registration_clear_stats_regions";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_path_flow_registration_clear_stats_regions";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_path_flow_registration_clear_stats_regions";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v4)
    free(v4);
LABEL_3:

}

void nw_path_flow_registration_set_partial_checksum_offload(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 2;
    else
      v5 = 0;
    *((_BYTE *)v3 + 148) = *((_BYTE *)v3 + 148) & 0xFD | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_path_flow_registration_set_partial_checksum_offload";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_flow_registration_set_partial_checksum_offload";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_path_flow_registration_set_partial_checksum_offload";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_flow_registration_set_partial_checksum_offload";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_flow_registration_set_partial_checksum_offload";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

uint64_t nw_path_increment_agent_use_count(void *a1, const unsigned __int8 *a2, _QWORD *a3)
{
  void **v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  int v11;
  int v12;
  NSObject *v13;
  NSObject *v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  uint64_t v19;
  os_log_type_t v20;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  _QWORD v37[2];
  __int128 v38;
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v38 = 0uLL;
  v39 = 0;
  *a3 = 0;
  if (!v5)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_path_increment_agent_use_count";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v7, &type, &v32))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_path_increment_agent_use_count";
        _os_log_impl(&dword_182FBE000, v8, v27, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_path_increment_agent_use_count";
          v36 = 2082;
          v37[0] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v29, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_path_increment_agent_use_count";
        _os_log_impl(&dword_182FBE000, v8, v29, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_path_increment_agent_use_count";
        _os_log_impl(&dword_182FBE000, v8, v31, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_31:

    goto LABEL_32;
  }
  if (uuid_is_null(a2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v35 = "nw_path_increment_agent_use_count";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v7, &type, &v32))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_path_increment_agent_use_count";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null agent_uuid", buf, 0xCu);
      }
    }
    else if (v32)
    {
      v15 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v16 = type;
      v17 = os_log_type_enabled(v8, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_path_increment_agent_use_count";
          v36 = 2082;
          v37[0] = v15;
          _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null agent_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        if (!v7)
          goto LABEL_34;
        goto LABEL_33;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_path_increment_agent_use_count";
        _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null agent_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_path_increment_agent_use_count";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null agent_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_31;
  }
  v10 = nw_parameters_copy_context(v5[2]);
  v11 = nw_path_shared_necp_fd(v10);

  if (v11 < 0)
    goto LABEL_34;
  v39 = 0;
  v38 = *(_OWORD *)a2;
  if (necp_client_action())
  {
    v12 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    v14 = v13;
    if (v12 == 2)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v35 = "nw_path_increment_agent_use_count";
        v36 = 1024;
        LODWORD(v37[0]) = 2;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s NECP_CLIENT_ACTION_AGENT_USE %{darwin.errno}d", buf, 0x12u);
      }

      goto LABEL_34;
    }
    *(_DWORD *)buf = 136446466;
    v35 = "nw_path_increment_agent_use_count";
    v36 = 1024;
    LODWORD(v37[0]) = v12;
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v7, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_path_increment_agent_use_count";
          v36 = 1024;
          LODWORD(v37[0]) = v12;
          _os_log_impl(&dword_182FBE000, v8, v20, "%{public}s NECP_CLIENT_ACTION_AGENT_USE %{darwin.errno}d", buf, 0x12u);
        }
      }
      else if (v32)
      {
        v22 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        v24 = os_log_type_enabled(v8, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446722;
            v35 = "nw_path_increment_agent_use_count";
            v36 = 1024;
            LODWORD(v37[0]) = v12;
            WORD2(v37[0]) = 2082;
            *(_QWORD *)((char *)v37 + 6) = v22;
            _os_log_impl(&dword_182FBE000, v8, v23, "%{public}s NECP_CLIENT_ACTION_AGENT_USE %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v22);
          if (!v7)
            goto LABEL_34;
          goto LABEL_33;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_path_increment_agent_use_count";
          v36 = 1024;
          LODWORD(v37[0]) = v12;
          _os_log_impl(&dword_182FBE000, v8, v23, "%{public}s NECP_CLIENT_ACTION_AGENT_USE %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_path_increment_agent_use_count";
          v36 = 1024;
          LODWORD(v37[0]) = v12;
          _os_log_impl(&dword_182FBE000, v8, v25, "%{public}s NECP_CLIENT_ACTION_AGENT_USE %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
      }
      goto LABEL_31;
    }
LABEL_32:
    if (v7)
LABEL_33:
      free(v7);
LABEL_34:
    v19 = 0;
    goto LABEL_35;
  }
  *a3 = v39;
  v19 = 1;
LABEL_35:

  return v19;
}

void sub_1839E5268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_copy_token_from_agent(void *a1, const unsigned __int8 *a2, _QWORD *a3)
{
  void **v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  int v11;
  void *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  int v18;
  NSObject *v19;
  _BOOL8 result;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  void *v30;
  os_log_type_t v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  _BOOL4 v36;
  NSObject *v37;
  void *v38;
  os_log_type_t v39;
  os_log_type_t v40;
  char v41;
  os_log_type_t v42;
  os_log_type_t type[16];
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  _BYTE v47[18];
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_path_copy_token_from_agent";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v42 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v42))
      goto LABEL_32;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v29 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_182FBE000, v8, v29, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_31;
    }
    if (v42 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v39 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_182FBE000, v8, v39, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v33 = type[0];
    v34 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_182FBE000, v8, v33, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_31;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_path_copy_token_from_agent";
      v46 = 2082;
      *(_QWORD *)v47 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v33, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_71;
  }
  if (!a3)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_path_copy_token_from_agent";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v42 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v42))
      goto LABEL_32;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v31 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_182FBE000, v8, v31, "%{public}s called with null out_token_length", buf, 0xCu);
      }
LABEL_31:

      goto LABEL_32;
    }
    if (v42 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v40 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_182FBE000, v8, v40, "%{public}s called with null out_token_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v35 = type[0];
    v36 = os_log_type_enabled(v8, type[0]);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_182FBE000, v8, v35, "%{public}s called with null out_token_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_31;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      v45 = "nw_path_copy_token_from_agent";
      v46 = 2082;
      *(_QWORD *)v47 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v35, "%{public}s called with null out_token_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_71:

    free(backtrace_string);
    goto LABEL_32;
  }
  if (uuid_is_null(a2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v45 = "nw_path_copy_token_from_agent";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v42 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v42))
      goto LABEL_32;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null agent_uuid", buf, 0xCu);
      }
    }
    else if (v42)
    {
      v14 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v15 = type[0];
      v16 = os_log_type_enabled(v8, type[0]);
      if (v14)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_path_copy_token_from_agent";
          v46 = 2082;
          *(_QWORD *)v47 = v14;
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null agent_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v14);
        if (!v7)
          goto LABEL_34;
        goto LABEL_33;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null agent_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v17 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_path_copy_token_from_agent";
        _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null agent_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_31;
  }
  *a3 = 0;
  v10 = nw_parameters_copy_context(v5[2]);
  v11 = nw_path_shared_necp_fd(v10);

  if (v11 < 0)
    goto LABEL_34;
  *(_OWORD *)type = *(_OWORD *)a2;
  v12 = malloc_type_calloc(1uLL, 0x1000uLL, 0xEAFB8F1AuLL);
  if (v12)
  {
LABEL_11:
    v13 = necp_client_action();
    if (v13 > 0)
    {
      *a3 = v13;
LABEL_35:

      return (BOOL)v12;
    }
    if (v12)
      free(v12);
    v18 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v18 == 96 || v18 == 2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v45 = "nw_path_copy_token_from_agent";
        v46 = 1024;
        *(_DWORD *)v47 = v18;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s NECP_CLIENT_ACTION_ACQUIRE_AGENT_TOKEN %{darwin.errno}d", buf, 0x12u);
      }

      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v45 = "nw_path_copy_token_from_agent";
    v46 = 1024;
    *(_DWORD *)v47 = v18;
    v7 = (char *)_os_log_send_and_compose_impl();

    v42 = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v7, &v42, &v41))
    {
      if (v42 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = v42;
        if (os_log_type_enabled(v22, v42))
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_path_copy_token_from_agent";
          v46 = 1024;
          *(_DWORD *)v47 = v18;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s NECP_CLIENT_ACTION_ACQUIRE_AGENT_TOKEN %{darwin.errno}d", buf, 0x12u);
        }
LABEL_51:

        goto LABEL_32;
      }
      if (!v41)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v27 = v42;
        if (os_log_type_enabled(v22, v42))
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_path_copy_token_from_agent";
          v46 = 1024;
          *(_DWORD *)v47 = v18;
          _os_log_impl(&dword_182FBE000, v22, v27, "%{public}s NECP_CLIENT_ACTION_ACQUIRE_AGENT_TOKEN %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
        goto LABEL_51;
      }
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v25 = v42;
      v26 = os_log_type_enabled(v22, v42);
      if (!v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_path_copy_token_from_agent";
          v46 = 1024;
          *(_DWORD *)v47 = v18;
          _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s NECP_CLIENT_ACTION_ACQUIRE_AGENT_TOKEN %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
        goto LABEL_51;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446722;
        v45 = "nw_path_copy_token_from_agent";
        v46 = 1024;
        *(_DWORD *)v47 = v18;
        *(_WORD *)&v47[4] = 2082;
        *(_QWORD *)&v47[6] = v24;
        _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s NECP_CLIENT_ACTION_ACQUIRE_AGENT_TOKEN %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(v24);
    }
LABEL_32:
    if (v7)
LABEL_33:
      free(v7);
LABEL_34:
    v12 = 0;
    goto LABEL_35;
  }
  __nwlog_obj();
  v37 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v45 = "strict_calloc";
  v46 = 2048;
  *(_QWORD *)v47 = 1;
  *(_WORD *)&v47[8] = 2048;
  *(_QWORD *)&v47[10] = 4096;
  v38 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v38);
  if (!result)
  {
    free(v38);
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void sub_1839E5DA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_report_error_to_agent(void *a1, const unsigned __int8 *a2, int a3)
{
  void **v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  int v11;
  char *v12;
  void *v13;
  int v14;
  _BOOL8 v15;
  int v16;
  NSObject *v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL8 result;
  void *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  NSObject *v36;
  void *v37;
  void *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  os_log_type_t v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  os_log_type_t v50;
  _BOOL4 v51;
  os_log_type_t v52;
  char v53;
  os_log_type_t v54;
  os_log_type_t type[16];
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  _BYTE v59[18];
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v57 = "nw_path_report_error_to_agent";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v54 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v54))
      goto LABEL_28;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v32 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_182FBE000, v8, v32, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v54)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v34 = type[0];
      v35 = os_log_type_enabled(v8, type[0]);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v57 = "nw_path_report_error_to_agent";
          v58 = 2082;
          *(_QWORD *)v59 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v34, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        goto LABEL_61;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_182FBE000, v8, v34, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v42 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_182FBE000, v8, v42, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_27:

    goto LABEL_28;
  }
  if (uuid_is_null(a2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v57 = "nw_path_report_error_to_agent";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v54 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v54))
      goto LABEL_28;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null agent_uuid", buf, 0xCu);
      }
    }
    else if (v54)
    {
      v18 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v19 = type[0];
      v20 = os_log_type_enabled(v8, type[0]);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v57 = "nw_path_report_error_to_agent";
          v58 = 2082;
          *(_QWORD *)v59 = v18;
          _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null agent_uuid, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
        if (!v7)
          goto LABEL_30;
        goto LABEL_29;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null agent_uuid, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v21 = type[0];
      if (os_log_type_enabled(v8, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_182FBE000, v8, v21, "%{public}s called with null agent_uuid, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_27;
  }
  v10 = nw_parameters_copy_context(v5[2]);
  v11 = nw_path_shared_necp_fd(v10);

  if (v11 < 0)
    goto LABEL_30;
  *(_OWORD *)type = *(_OWORD *)a2;
  v12 = (char *)malloc_type_calloc(1uLL, 0x19uLL, 0xEAFB8F1AuLL);
  v13 = v12;
  if (v12)
  {
    *v12 = -121;
    *(_DWORD *)(v12 + 1) = 20;
    *(_OWORD *)(v12 + 5) = *(_OWORD *)type;
    *(_DWORD *)(v12 + 21) = a3;
    v14 = necp_client_action();
    v15 = v14 == 0;
    if (!v14)
    {
LABEL_49:
      free(v13);
      goto LABEL_50;
    }
    v16 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (v16 == 45 || v16 == 2)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = (id)gLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v57 = "nw_path_report_error_to_agent";
        v58 = 1024;
        *(_DWORD *)v59 = v16;
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d", buf, 0x12u);
      }

      goto LABEL_49;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v57 = "nw_path_report_error_to_agent";
    v58 = 1024;
    *(_DWORD *)v59 = v16;
    v23 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v54 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v23, type, &v54))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v57 = "nw_path_report_error_to_agent";
          v58 = 1024;
          *(_DWORD *)v59 = v16;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d", buf, 0x12u);
        }
      }
      else if (v54)
      {
        v26 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = type[0];
        v28 = os_log_type_enabled(v24, type[0]);
        if (v26)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446722;
            v57 = "nw_path_report_error_to_agent";
            v58 = 1024;
            *(_DWORD *)v59 = v16;
            *(_WORD *)&v59[4] = 2082;
            *(_QWORD *)&v59[6] = v26;
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v26);
          goto LABEL_47;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v57 = "nw_path_report_error_to_agent";
          v58 = 1024;
          *(_DWORD *)v59 = v16;
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v29 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          v57 = "nw_path_report_error_to_agent";
          v58 = 1024;
          *(_DWORD *)v59 = v16;
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s NECP_CLIENT_ACTION_AGENT %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
LABEL_47:
    if (v23)
      free(v23);
    goto LABEL_49;
  }
  __nwlog_obj();
  v36 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v57 = "strict_calloc";
  v58 = 2048;
  *(_QWORD *)v59 = 1;
  *(_WORD *)&v59[8] = 2048;
  *(_QWORD *)&v59[10] = 25;
  v37 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v37);
  if (!result)
  {
    free(v37);
    __nwlog_obj();
    v38 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v57 = "nw_necp_append_tlv";
    v39 = (char *)_os_log_send_and_compose_impl();

    v54 = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (__nwlog_fault(v39, &v54, &v53))
    {
      if (v54 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v41 = v54;
        if (os_log_type_enabled(v40, v54))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null tlv_start", buf, 0xCu);
        }
      }
      else if (v53)
      {
        v43 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v44 = v54;
        v45 = os_log_type_enabled(v40, v54);
        if (v43)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v57 = "nw_necp_append_tlv";
            v58 = 2082;
            *(_QWORD *)v59 = v43;
            _os_log_impl(&dword_182FBE000, v40, v44, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v43);
          goto LABEL_85;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v40, v44, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v40 = objc_claimAutoreleasedReturnValue();
        v46 = v54;
        if (os_log_type_enabled(v40, v54))
        {
          *(_DWORD *)buf = 136446210;
          v57 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v40, v46, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_85:
    if (v39)
      free(v39);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v47 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v57 = "nw_path_report_error_to_agent";
    v7 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v54 = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v7, type, &v54))
    {
LABEL_28:
      if (v7)
LABEL_29:
        free(v7);
LABEL_30:
      v15 = 0;
LABEL_50:

      return v15;
    }
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v48 = (id)gLogObj;
      v49 = type[0];
      if (os_log_type_enabled(v48, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s nw_path_create_necp_agent_error failed", buf, 0xCu);
      }
LABEL_102:

      goto LABEL_28;
    }
    if (v54 == OS_LOG_TYPE_DEFAULT)
    {
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v52 = type[0];
      if (os_log_type_enabled(v48, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_182FBE000, v48, v52, "%{public}s nw_path_create_necp_agent_error failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_102;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v48 = objc_claimAutoreleasedReturnValue();
    v50 = type[0];
    v51 = os_log_type_enabled(v48, type[0]);
    if (!backtrace_string)
    {
      if (v51)
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_path_report_error_to_agent";
        _os_log_impl(&dword_182FBE000, v48, v50, "%{public}s nw_path_create_necp_agent_error failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_102;
    }
    if (v51)
    {
      *(_DWORD *)buf = 136446466;
      v57 = "nw_path_report_error_to_agent";
      v58 = 2082;
      *(_QWORD *)v59 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v48, v50, "%{public}s nw_path_create_necp_agent_error failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

LABEL_61:
    free(backtrace_string);
    goto LABEL_28;
  }
  __break(1u);
  return result;
}

void sub_1839E6B2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_uses_nexus(NWConcrete_nw_path *a1)
{
  return nw_path_uses_nexus_internal(a1, 0);
}

BOOL nw_path_flow_registration_get_tfo_cookie(void *a1, void *a2, void *a3, _BYTE *a4)
{
  NWConcrete_nw_path *v7;
  NWConcrete_nw_path_flow_registration *v8;
  id v9;
  int v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  _BYTE *v15;
  _BYTE *v16;
  unsigned int v17;
  uint64_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  int v22;
  os_log_type_t v23;
  int v24;
  int v25;
  char *v26;
  _BOOL8 result;
  void *v28;
  const char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  _BOOL4 v38;
  NSObject *v39;
  int v40;
  void *v41;
  os_log_type_t v42;
  os_log_type_t v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  _BYTE v49[10];
  __int16 v50;
  char *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  if (!a3)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_path_flow_registration_get_tfo_cookie";
    v29 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null cookie", buf, 0xCu);
        }
        goto LABEL_65;
      }
      if (!v44)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_182FBE000, v30, v42, "%{public}s called with null cookie, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_65;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null cookie, no backtrace", buf, 0xCu);
        }
        goto LABEL_65;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_path_flow_registration_get_tfo_cookie";
        v48 = 2082;
        *(_QWORD *)v49 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v35, "%{public}s called with null cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_51:

      free(backtrace_string);
    }
LABEL_66:
    if (!v29)
      goto LABEL_30;
    v26 = (char *)v29;
    goto LABEL_29;
  }
  if (!a4)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_path_flow_registration_get_tfo_cookie";
    v29 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null len", buf, 0xCu);
        }
LABEL_65:

        goto LABEL_66;
      }
      if (!v44)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_182FBE000, v30, v43, "%{public}s called with null len, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_65;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null len, no backtrace", buf, 0xCu);
        }
        goto LABEL_65;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_path_flow_registration_get_tfo_cookie";
        v48 = 2082;
        *(_QWORD *)v49 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null len, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_51;
    }
    goto LABEL_66;
  }
  if (*a4 <= 0xFu)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v10 = *a4;
    *(_DWORD *)buf = 136446722;
    v47 = "nw_path_flow_registration_get_tfo_cookie";
    v48 = 1024;
    *(_DWORD *)v49 = v10;
    *(_WORD *)&v49[4] = 1024;
    *(_DWORD *)&v49[6] = 16;
    v11 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v11, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          v14 = *a4;
          *(_DWORD *)buf = 136446722;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          v48 = 1024;
          *(_DWORD *)v49 = v14;
          *(_WORD *)&v49[4] = 1024;
          *(_DWORD *)&v49[6] = 16;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s cookie buffer invalid, length is %u expected %d", buf, 0x18u);
        }
      }
      else if (v44)
      {
        v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v20 = type;
        v21 = os_log_type_enabled(v12, type);
        if (v19)
        {
          if (v21)
          {
            v22 = *a4;
            *(_DWORD *)buf = 136446978;
            v47 = "nw_path_flow_registration_get_tfo_cookie";
            v48 = 1024;
            *(_DWORD *)v49 = v22;
            *(_WORD *)&v49[4] = 1024;
            *(_DWORD *)&v49[6] = 16;
            v50 = 2082;
            v51 = v19;
            _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s cookie buffer invalid, length is %u expected %d, dumping backtrace:%{public}s", buf, 0x22u);
          }

          free(v19);
          if (!v11)
            goto LABEL_30;
LABEL_28:
          v26 = (char *)v11;
LABEL_29:
          free(v26);
          goto LABEL_30;
        }
        if (v21)
        {
          v25 = *a4;
          *(_DWORD *)buf = 136446722;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          v48 = 1024;
          *(_DWORD *)v49 = v25;
          *(_WORD *)&v49[4] = 1024;
          *(_DWORD *)&v49[6] = 16;
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s cookie buffer invalid, length is %u expected %d, no backtrace", buf, 0x18u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v12, type))
        {
          v24 = *a4;
          *(_DWORD *)buf = 136446722;
          v47 = "nw_path_flow_registration_get_tfo_cookie";
          v48 = 1024;
          *(_DWORD *)v49 = v24;
          *(_WORD *)&v49[4] = 1024;
          *(_DWORD *)&v49[6] = 16;
          _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s cookie buffer invalid, length is %u expected %d, backtrace limit exceeded", buf, 0x18u);
        }
      }

    }
    if (!v11)
    {
LABEL_30:
      v18 = 0;
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  v15 = nw_path_copy_flow_for_registration(v7, v8);
  v16 = v15;
  if (!v15 || (v17 = v15[184], !v15[184]))
  {
    v18 = 0;
    goto LABEL_14;
  }
  if (v17 < 0x11)
  {
LABEL_12:
    memcpy(a3, v16 + 108, v17);
    *a4 = v16[184];
    v18 = 1;
LABEL_14:

LABEL_31:
    return v18;
  }
  __nwlog_obj();
  v39 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v39, OS_LOG_TYPE_ERROR);
  v40 = v16[184];
  *(_DWORD *)buf = 136446466;
  v47 = "nw_path_flow_registration_get_tfo_cookie";
  v48 = 1024;
  *(_DWORD *)v49 = v40;
  v41 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v41);
  if (!result)
  {
    free(v41);
    v17 = v16[184];
    goto LABEL_12;
  }
  __break(1u);
  return result;
}

uint64_t nw_path_flow_registration_get_tfo_cookie_len(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = (unsigned __int8 *)nw_path_copy_flow_for_registration(a1, a2);
  if (v2)
    v3 = v2[184];
  else
    v3 = 0;

  return v3;
}

uint64_t nw_path_get_recommended_mss(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[472];
    if (v3 == 2)
      v4 = 512;
    else
      v4 = v1[472];
    if (v3 == 4)
      v5 = 1200;
    else
      v5 = v4;
    if (v3 == 1)
      v6 = 0;
    else
      v6 = v5;
    goto LABEL_11;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_path_get_recommended_mss";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_get_recommended_mss";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_path_get_recommended_mss";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_get_recommended_mss";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_path_get_recommended_mss";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_28:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_11:

  return v6;
}

BOOL nw_path_get_vpn_config_uuid(NWConcrete_nw_path *a1, unsigned __int8 (*a2)[16], int *a3, char a4, char a5)
{
  NWConcrete_nw_path *v9;
  NWConcrete_nw_path *v10;
  OS_xpc_object *network_agent_dictionary;
  _BOOL8 v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD applier[7];
  char v28;
  char v29;
  char v30;
  char v31;
  os_log_type_t type;
  _BYTE buf[24];
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v14, &type, &v31))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (!v31)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_24;
  }
  if (!a2)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v14, &type, &v31))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null out_uuid", buf, 0xCu);
      }
LABEL_36:

LABEL_37:
      if (v14)
        free(v14);
      goto LABEL_39;
    }
    if (!v31)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null out_uuid, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
        _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null out_uuid, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_get_vpn_config_uuid";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v15, v22, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_24:

    free(backtrace_string);
    goto LABEL_37;
  }
  network_agent_dictionary = v9->network_agent_dictionary;
  if (!network_agent_dictionary)
  {
LABEL_39:
    v12 = 0;
    goto LABEL_40;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v34 = 0;
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = ___ZL27nw_path_get_vpn_config_uuidP18NWConcrete_nw_pathPA16_hPibbb_block_invoke;
  applier[3] = &unk_1E14A9290;
  v28 = a5;
  v29 = 1;
  v30 = a4;
  applier[5] = a2;
  applier[6] = a3;
  applier[4] = buf;
  xpc_dictionary_apply(network_agent_dictionary, applier);
  v12 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
  _Block_object_dispose(buf, 8);
LABEL_40:

  return v12;
}

void sub_1839E7BFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_path_get_vpn_config_uuidP18NWConcrete_nw_pathPA16_hPibbb_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  _BYTE *data;
  size_t length[2];
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  length[0] = 0;
  if (xdict)
  {
    data = xpc_dictionary_get_data(xdict, "data", length);
    if (data)
    {
      if (length[0] >= 0xD8
        && length[0] == *((unsigned int *)data + 53) + 216
        && (!*(_BYTE *)(a1 + 56) || (data[208] & 2) == 0))
      {
        length[0] = 0;
        length[1] = 0;
        ne_session_get_config_id_from_network_agent();
      }
    }
  }
  return 1;
}

BOOL nw_path_get_private_dns_config_id(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  _BOOL8 v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  os_log_type_t type[8];
  os_log_type_t *v22;
  uint64_t v23;
  char v24;
  char v25;
  _BYTE applier[24];
  void *v27;
  os_log_type_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v8, type, &v25))
      goto LABEL_37;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", applier, 0xCu);
      }
      goto LABEL_36;
    }
    if (!v25)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v18 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null path, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v14 = type[0];
    v15 = os_log_type_enabled(v9, type[0]);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, no backtrace", applier, 0xCu);
      }
      goto LABEL_36;
    }
    if (v15)
    {
      *(_DWORD *)applier = 136446466;
      *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
      *(_WORD *)&applier[12] = 2082;
      *(_QWORD *)&applier[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, dumping backtrace:%{public}s", applier, 0x16u);
    }
    goto LABEL_24;
  }
  if (!a2)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v8, type, &v25))
      goto LABEL_37;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null out_uuid", applier, 0xCu);
      }
LABEL_36:

LABEL_37:
      if (v8)
        free(v8);
      goto LABEL_39;
    }
    if (!v25)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null out_uuid, backtrace limit exceeded", applier, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v16 = type[0];
    v17 = os_log_type_enabled(v9, type[0]);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null out_uuid, no backtrace", applier, 0xCu);
      }
      goto LABEL_36;
    }
    if (v17)
    {
      *(_DWORD *)applier = 136446466;
      *(_QWORD *)&applier[4] = "nw_path_get_private_dns_config_uuid";
      *(_WORD *)&applier[12] = 2082;
      *(_QWORD *)&applier[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null out_uuid, dumping backtrace:%{public}s", applier, 0x16u);
    }
LABEL_24:

    free(backtrace_string);
    goto LABEL_37;
  }
  v5 = (void *)*((_QWORD *)v3 + 28);
  if (!v5)
  {
LABEL_39:
    v6 = 0;
    goto LABEL_40;
  }
  *(_QWORD *)type = 0;
  v22 = type;
  v23 = 0x2020000000;
  v24 = 0;
  *(_QWORD *)applier = MEMORY[0x1E0C809B0];
  *(_QWORD *)&applier[8] = 3221225472;
  *(_QWORD *)&applier[16] = ___ZL35nw_path_get_private_dns_config_uuidP18NWConcrete_nw_pathPA16_hPi_block_invoke;
  v27 = &unk_1E14A9128;
  v29 = a2;
  v30 = 0;
  v28 = type;
  xpc_dictionary_apply(v5, applier);
  v6 = *((_BYTE *)v22 + 24) != 0;
  _Block_object_dispose(type, 8);
LABEL_40:

  return v6;
}

void sub_1839E824C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL35nw_path_get_private_dns_config_uuidP18NWConcrete_nw_pathPA16_hPi_block_invoke(int a1, int a2, xpc_object_t xdict)
{
  unsigned int *data;
  size_t length[2];
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  length[0] = 0;
  if (xdict)
  {
    data = (unsigned int *)xpc_dictionary_get_data(xdict, "data", length);
    if (data)
    {
      if (length[0] >= 0xD8 && length[0] == data[53] + 216)
      {
        length[0] = 0;
        length[1] = 0;
        ne_session_get_config_id_from_network_agent();
      }
    }
  }
  return 1;
}

uint64_t nw_path_copy_flow_divert_token(void *a1)
{
  _DWORD *v1;
  _DWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  xpc_object_t v6;
  void *v7;
  id v8;
  int v9;
  const sockaddr *address;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  const char *hostname;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  _BOOL8 parent_endpoint_domain;
  unsigned int port;
  BOOL multipath;
  id v39;
  void *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  char *backtrace_string;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  char v49;
  os_log_type_t type;
  uuid_t uu;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  char *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_path_copy_flow_divert_token";
    v42 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v42, uu, &type))
    {
      if (uu[0] == 17)
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v44 = uu[0];
        if (os_log_type_enabled(v43, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v46 = uu[0];
        v47 = os_log_type_enabled(v43, (os_log_type_t)uu[0]);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_path_copy_flow_divert_token";
            v54 = 2082;
            v55 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_101;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v48 = uu[0];
        if (os_log_type_enabled(v43, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_182FBE000, v43, v48, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_101:
    if (v42)
      free(v42);
    goto LABEL_6;
  }
  if (v1[66] == 4)
    v3 = v1[67];
  else
    v3 = 0;
  v4 = v1[88];
  if (v3 | v4)
  {
    v6 = xpc_dictionary_create(0, 0, 0);
    if (v6)
    {
      memset(uu, 0, sizeof(uu));
      if (!nw_path_get_vpn_config_uuid((NWConcrete_nw_path *)v2, (unsigned __int8 (*)[16])uu, 0, 0, 0))
        uuid_clear(uu);
      v7 = (void *)*((_QWORD *)v2 + 3);
      if (!v7)
        goto LABEL_78;
      v8 = v7;
      v9 = objc_msgSend(v8, "type");

      if ((v9 - 1) > 1)
        goto LABEL_78;
      if (v9 != 2)
      {
        if (v9 == 1)
        {
          address = nw_endpoint_get_address(*((nw_endpoint_t *)v2 + 3));
          if (address)
          {
            xpc_dictionary_set_data(v6, "flow-host-address", address, address->sa_len);
LABEL_69:
            parent_endpoint_domain = nw_endpoint_get_parent_endpoint_domain(*((_QWORD *)v2 + 3));
            if (parent_endpoint_domain)
              xpc_dictionary_set_string(v6, "flow-host-name", (const char *)parent_endpoint_domain);
            goto LABEL_76;
          }
          __nwlog_obj();
          v20 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          v21 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v49 = 0;
          if (__nwlog_fault(v21, &type, &v49))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v22 = objc_claimAutoreleasedReturnValue();
              v23 = type;
              if (os_log_type_enabled(v22, type))
              {
                *(_DWORD *)buf = 136446210;
                v53 = "nw_path_copy_flow_divert_token";
                _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s nw_endpoint_get_address failed", buf, 0xCu);
              }
            }
            else if (v49)
            {
              v28 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v22 = objc_claimAutoreleasedReturnValue();
              v29 = type;
              v30 = os_log_type_enabled(v22, type);
              if (v28)
              {
                if (v30)
                {
                  *(_DWORD *)buf = 136446466;
                  v53 = "nw_path_copy_flow_divert_token";
                  v54 = 2082;
                  v55 = v28;
                  _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s nw_endpoint_get_address failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v28);
                goto LABEL_67;
              }
              if (v30)
              {
                *(_DWORD *)buf = 136446210;
                v53 = "nw_path_copy_flow_divert_token";
                _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s nw_endpoint_get_address failed, no backtrace", buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v22 = objc_claimAutoreleasedReturnValue();
              v34 = type;
              if (os_log_type_enabled(v22, type))
              {
                *(_DWORD *)buf = 136446210;
                v53 = "nw_path_copy_flow_divert_token";
                _os_log_impl(&dword_182FBE000, v22, v34, "%{public}s nw_endpoint_get_address failed, backtrace limit exceeded", buf, 0xCu);
              }
            }

          }
LABEL_67:
          if (v21)
            free(v21);
          goto LABEL_69;
        }
LABEL_76:
        port = nw_endpoint_get_port(*((nw_endpoint_t *)v2 + 3));
        if (port)
          xpc_dictionary_set_int64(v6, "flow-host-port", port);
LABEL_78:
        nw_parameters_get_effective_bundle_id(*((void **)v2 + 2));
        multipath = nw_parameters_get_multipath(*((void **)v2 + 2));
        xpc_dictionary_set_BOOL(v6, "flow-multipath-requested", multipath);
        v39 = nw_parameters_copy_metadata(*((void **)v2 + 2));
        if (v39)
          xpc_dictionary_set_value(v6, "app-data", v39);
        if ((_DWORD)v4)
          xpc_dictionary_set_uint64(v6, "aggregate_unit", v4);
        v5 = ne_session_policy_copy_flow_divert_token();

        goto LABEL_83;
      }
      hostname = nw_endpoint_get_hostname(*((nw_endpoint_t *)v2 + 3));
      if (hostname)
      {
        xpc_dictionary_set_string(v6, "flow-host-name", hostname);
        goto LABEL_76;
      }
      __nwlog_obj();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v53 = "nw_path_copy_flow_divert_token";
      v25 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v49 = 0;
      if (__nwlog_fault(v25, &type, &v49))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v26 = objc_claimAutoreleasedReturnValue();
          v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_path_copy_flow_divert_token";
            _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s nw_endpoint_get_hostname failed", buf, 0xCu);
          }
        }
        else if (v49)
        {
          v31 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v26 = objc_claimAutoreleasedReturnValue();
          v32 = type;
          v33 = os_log_type_enabled(v26, type);
          if (v31)
          {
            if (v33)
            {
              *(_DWORD *)buf = 136446466;
              v53 = "nw_path_copy_flow_divert_token";
              v54 = 2082;
              v55 = v31;
              _os_log_impl(&dword_182FBE000, v26, v32, "%{public}s nw_endpoint_get_hostname failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v31);
            goto LABEL_74;
          }
          if (v33)
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_path_copy_flow_divert_token";
            _os_log_impl(&dword_182FBE000, v26, v32, "%{public}s nw_endpoint_get_hostname failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v26 = objc_claimAutoreleasedReturnValue();
          v35 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)buf = 136446210;
            v53 = "nw_path_copy_flow_divert_token";
            _os_log_impl(&dword_182FBE000, v26, v35, "%{public}s nw_endpoint_get_hostname failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_74:
      if (v25)
        free(v25);
      goto LABEL_76;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v53 = "nw_path_copy_flow_divert_token";
    v12 = (char *)_os_log_send_and_compose_impl();

    uu[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v12, uu, &type))
    {
      if (uu[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = uu[0];
        if (os_log_type_enabled(v13, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (type)
      {
        v15 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v16 = uu[0];
        v17 = os_log_type_enabled(v13, (os_log_type_t)uu[0]);
        if (v15)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_path_copy_flow_divert_token";
            v54 = 2082;
            v55 = v15;
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v15);
          if (!v12)
            goto LABEL_23;
          goto LABEL_22;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v18 = uu[0];
        if (os_log_type_enabled(v13, (os_log_type_t)uu[0]))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_path_copy_flow_divert_token";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v12)
    {
LABEL_23:
      v5 = 0;
LABEL_83:

      goto LABEL_84;
    }
LABEL_22:
    free(v12);
    goto LABEL_23;
  }
LABEL_6:
  v5 = 0;
LABEL_84:

  return v5;
}

void sub_1839E8E38(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_path_has_unsatisfied_fallback_agent(NWConcrete_nw_path *a1)
{
  int v2;
  unsigned __int8 v3[16];
  uint64_t v4;

  v4 = *MEMORY[0x1E0C80C00];
  v2 = 0;
  memset(v3, 0, sizeof(v3));
  return nw_path_get_vpn_config_uuid(a1, (unsigned __int8 (*)[16])v3, &v2, 1, 1);
}

uint64_t nw_path_voluntary_agent_matches_address(void *a1, uint64_t a2)
{
  nw_endpoint_t *v3;
  nw_endpoint_t *v4;
  NSObject *v5;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  os_log_type_t type[4];
  char v23;
  uint8_t buf[24];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, type, &v23))
      goto LABEL_43;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type[0];
      v15 = os_log_type_enabled(v9, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v8)
          goto LABEL_45;
        goto LABEL_44;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_42;
  }
  if (!a2)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, type, &v23))
      goto LABEL_43;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null address", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v16 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      v18 = os_log_type_enabled(v9, type[0]);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v16;
          _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null address, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
LABEL_43:
        if (!v8)
        {
LABEL_45:
          v6 = 0;
          goto LABEL_46;
        }
LABEL_44:
        free(v8);
        goto LABEL_45;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null address, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v20 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_voluntary_agent_matches_address";
        _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null address, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (nw_endpoint_get_type(v3[3]) != nw_endpoint_type_host)
    goto LABEL_45;
  if (!nw_endpoint_get_hostname(v4[3]))
    goto LABEL_45;
  *(_DWORD *)type = 0;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = 0;
  if (!nw_path_get_vpn_config_uuid((NWConcrete_nw_path *)v4, (unsigned __int8 (*)[16])buf, (int *)type, 1, 1))
    goto LABEL_45;
  v5 = v4[12];
  if (v5)
    v6 = ne_session_service_matches_address_for_interface();
  else
    v6 = 0;

LABEL_46:
  return v6;
}

void sub_1839E9418(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_update_parameters_for_fallback(void *a1, void *a2)
{
  _QWORD *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_path_update_parameters_for_fallback";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (!v24)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_path_update_parameters_for_fallback";
      v28 = 2082;
      v29 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_28;
  }
  if (!v4)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_path_update_parameters_for_fallback";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters_to_update", buf, 0xCu);
      }
LABEL_40:

LABEL_41:
      if (v11)
        free(v11);
      goto LABEL_43;
    }
    if (!v24)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null parameters_to_update, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_40;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_path_update_parameters_for_fallback";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters_to_update, no backtrace", buf, 0xCu);
      }
      goto LABEL_40;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_path_update_parameters_for_fallback";
      v28 = 2082;
      v29 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters_to_update, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_28:

    free(backtrace_string);
    goto LABEL_41;
  }
  v6 = v3[14];
  if (!v6)
  {
    v8 = (void *)v3[21];
    if (v8)
    {
      v9 = (void *)v3[22];
      if (v9)
      {
        nw_parameters_set_required_netagent_classes(v4, v8, v9);
        goto LABEL_5;
      }
    }
LABEL_43:
    v7 = 0;
    goto LABEL_44;
  }
  nw_parameters_require_interface(v4, v6);
LABEL_5:
  v7 = 1;
LABEL_44:

  return v7;
}

void sub_1839E9918(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_fallback_interface_index(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_path_get_fallback_interface_index";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v4, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          v14 = "nw_path_get_fallback_interface_index";
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "nw_path_get_fallback_interface_index";
            v15 = 2082;
            v16 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v9)
        {
          *(_DWORD *)buf = 136446210;
          v14 = "nw_path_get_fallback_interface_index";
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446210;
          v14 = "nw_path_get_fallback_interface_index";
          _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v4)
      free(v4);
    return 0;
  }
  v1 = *(_QWORD *)(a1 + 112);
  if (v1)
    return *(unsigned int *)(v1 + 8);
  return 0;
}

uint64_t nw_path_get_fallback_agent(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  _OWORD *v5;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_path_get_fallback_agent";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_get_fallback_agent";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_path_get_fallback_agent";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_get_fallback_agent";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_get_fallback_agent";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_22:
    if (v9)
      free(v9);
    goto LABEL_3;
  }
  v5 = v3 + 152;
  if (!uuid_is_null((const unsigned __int8 *)v3 + 152))
  {
    *a2 = *v5;
    v6 = 1;
    goto LABEL_5;
  }
LABEL_3:
  v6 = 0;
LABEL_5:

  return v6;
}

void sub_1839E9E64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_fallback_generation(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[93];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_get_fallback_generation";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_fallback_generation";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_get_fallback_generation";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_fallback_generation";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_fallback_generation";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_fallback_is_weak(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 473) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_fallback_is_weak";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_is_weak";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_fallback_is_weak";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_is_weak";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_is_weak";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_fallback_should_not_use_timer(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[473] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_fallback_should_not_use_timer";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_should_not_use_timer";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_fallback_should_not_use_timer";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_should_not_use_timer";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_should_not_use_timer";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_fallback_is_forced(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[473] >> 2) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_fallback_is_forced";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_is_forced";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_fallback_is_forced";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_is_forced";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_is_forced";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_fallback_is_preferred(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[473] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_fallback_is_preferred";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_is_preferred";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_fallback_is_preferred";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_is_preferred";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_fallback_is_preferred";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_copy_proxy_configs(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  id v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v20)(uint64_t, uint64_t);
  void (*v21)(uint64_t);
  id v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v20 = __Block_byref_object_copy__67271;
    v21 = __Block_byref_object_dispose__67272;
    v22 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_path_copy_proxy_configs_block_invoke;
    v14[3] = &unk_1E14ACE40;
    v15 = (os_unfair_lock_s *)v1;
    v16 = buf;
    v3 = v15 + 2;
    os_unfair_lock_lock(v15 + 2);
    __nw_path_copy_proxy_configs_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    v4 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_copy_proxy_configs";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_proxy_configs";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_copy_proxy_configs";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_proxy_configs";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_proxy_configs";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_1839EAEA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_path_copy_proxy_configs_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  uint64_t v6;
  id v7;
  void *v8;
  xpc_object_t xarray;
  _QWORD applier[4];
  id v11;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 232);
  if (v3)
  {
    if ((*(_BYTE *)(v2 + 476) & 4) != 0 || (v4 = *(void **)(v2 + 240)) == 0)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v7 = v3;
      v8 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v7;

      return;
    }
    v5 = v4;
  }
  else
  {
    v5 = *(id *)(v2 + 240);
    if (!v5)
      return;
  }
  xarray = v5;
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = __nw_path_copy_proxy_configs_block_invoke_2;
  applier[3] = &unk_1E14AC908;
  v11 = *(id *)(a1 + 32);
  xpc_array_apply(xarray, applier);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 476) |= 4u;
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 232));

}

void sub_1839EAFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t __nw_path_copy_proxy_configs_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  void *combined_array;
  uint64_t v10;
  void *v11;

  v4 = a3;
  config_agent_update_proxy_information();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v6 = v5;
  if (v5)
  {
    v7 = v5;

    v4 = v7;
  }
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C812C8])
  {
    v8 = nw_proxy_configs_create_with_schema_array(v4);
    combined_array = nw_array_create_combined_array(v8, *(void **)(*(_QWORD *)(a1 + 32) + 232));
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(v10 + 232);
    *(_QWORD *)(v10 + 232) = combined_array;

  }
  return 1;
}

void sub_1839EB084(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

unsigned __int8 *nw_path_has_proxy_config(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  _BYTE *v23;
  char v24;
  os_log_type_t type;
  _BYTE buf[24];
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = (unsigned __int8 *)v3[29];
      if (v6)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x2020000000;
        v27 = 0;
        v21[0] = MEMORY[0x1E0C809B0];
        v21[1] = 3221225472;
        v21[2] = __nw_path_has_proxy_config_block_invoke;
        v21[3] = &unk_1E14AB5F0;
        v22 = v4;
        v23 = buf;
        nw_array_apply(v6, (uint64_t)v21);
        v6 = (unsigned __int8 *)(*(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0);

        _Block_object_dispose(buf, 8);
      }
      goto LABEL_5;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null proxy_config", buf, 0xCu);
        }
LABEL_37:

        goto LABEL_38;
      }
      if (!v24)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null proxy_config, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null proxy_config, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null proxy_config, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_25;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v9, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (!v24)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_37;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_37;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_has_proxy_config";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_25:

      free(backtrace_string);
    }
  }
LABEL_38:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_5:

  return v6;
}

uint64_t __nw_path_has_proxy_config_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int is_equal;

  is_equal = nw_proxy_config_is_equal(*(void **)(a1 + 32), a3);
  if (is_equal)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return is_equal ^ 1u;
}

BOOL nw_path_has_proxy_settings(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (*((_QWORD *)v1 + 30))
      v3 = 1;
    else
      v3 = *((_QWORD *)v1 + 29) != 0;
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_proxy_settings";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_proxy_settings";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_proxy_settings";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_proxy_settings";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_proxy_settings";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_5:

  return v3;
}

id nw_path_copy_legacy_proxy_settings(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[30];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_copy_legacy_proxy_settings";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_legacy_proxy_settings";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_copy_legacy_proxy_settings";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_legacy_proxy_settings";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_legacy_proxy_settings";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_path_set_proxy_settings(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  xpc_object_t v6;
  void *v7;
  id v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[5];
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = (void *)*((_QWORD *)v3 + 30);
    *((_QWORD *)v3 + 30) = 0;

    *((_BYTE *)v3 + 476) &= ~4u;
    if (v4 && object_getClass(v4) == (Class)MEMORY[0x1E0C812C8])
    {
      v6 = xpc_copy(v4);
      v7 = (void *)*((_QWORD *)v3 + 30);
      *((_QWORD *)v3 + 30) = v6;

    }
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __nw_path_set_proxy_settings_block_invoke;
    v17[3] = &unk_1E14ACFD0;
    v8 = v3;
    v17[4] = v8;
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 3);
    __nw_path_set_proxy_settings_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 3);

    goto LABEL_6;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_path_set_proxy_settings";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v10, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_path_set_proxy_settings";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_path_set_proxy_settings";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_path_set_proxy_settings";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_path_set_proxy_settings";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v10)
    free(v10);
LABEL_6:

}

void sub_1839EBE88(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_path_set_proxy_settings_block_invoke(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 256);
  *(_QWORD *)(v1 + 256) = 0;

}

id nw_path_copy_gateways(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[26];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_copy_gateways";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_gateways";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_copy_gateways";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_gateways";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_gateways";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_has_gateways(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  _BOOL8 v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_path_has_gateways";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_path_has_gateways";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_path_has_gateways";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_path_has_gateways";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_path_has_gateways";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v6)
      free(v6);
    goto LABEL_22;
  }
  v3 = *((_QWORD *)v1 + 26);
  if (!v3)
  {
LABEL_22:
    v4 = 0;
    goto LABEL_23;
  }
  v4 = *(_QWORD *)(v3 + 16) != *(_QWORD *)(v3 + 24);
LABEL_23:

  return v4;
}

id nw_path_copy_group_members(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[27];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_copy_group_members";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_group_members";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_copy_group_members";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_group_members";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_group_members";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_copy_resolver_configs(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  _BYTE buf[24];
  void *v18;
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke;
    v18 = &unk_1E14ACFD0;
    v4 = v3;
    v19 = v4;
    os_unfair_lock_lock((os_unfair_lock_t)v4 + 2);
    ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock((os_unfair_lock_t)v4 + 2);

    v5 = *((id *)v4 + 23);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_copy_resolver_configs";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_resolver_configs";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_copy_resolver_configs";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_resolver_configs";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_copy_resolver_configs";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_3:

  return v5;
}

void sub_1839EC984(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_path_copy_override_resolver_configs(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[24];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_copy_override_resolver_configs";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_override_resolver_configs";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_copy_override_resolver_configs";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_override_resolver_configs";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_override_resolver_configs";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

NWConcrete_nw_resolver_config *nw_path_copy_resolver_config_for_identifier(uint64_t a1)
{
  id v2;
  int v3;
  xpc_object_t v4;
  void *v5;
  unsigned int *data;
  void *v7;
  void *v8;
  NWConcrete_nw_resolver_config *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  void *v20;
  os_log_type_t v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  char v34;
  os_log_type_t type;
  _BYTE length[12];
  __int16 v37;
  _WORD v38[17];

  *(_QWORD *)&v38[13] = *MEMORY[0x1E0C80C00];
  if (nw_context_copy_implicit_context::onceToken[0] != -1)
    dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
  v2 = (id)nw_context_copy_implicit_context::implicit_context;
  v3 = nw_path_shared_necp_fd(v2);

  if ((v3 & 0x80000000) == 0)
  {
    v4 = nw_network_agent_copy_dictionary_from_necp();
    v5 = v4;
    if (!v4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)length = 136446722;
        *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
        v37 = 1042;
        *(_DWORD *)v38 = 16;
        v38[2] = 2098;
        *(_QWORD *)&v38[3] = a1;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Agent %{public,uuid_t}.16P is not present", length, 0x1Cu);
      }

      goto LABEL_35;
    }
    *(_QWORD *)length = 0;
    data = (unsigned int *)xpc_dictionary_get_data(v4, "data", (size_t *)length);
    if (!data || *(_QWORD *)length < 0xD8uLL || *(_QWORD *)length != data[53] + 216)
    {
      __nwlog_obj();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)length = 136446210;
      *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
      v11 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v34 = 0;
      if (!__nwlog_fault(v11, &type, &v34))
        goto LABEL_33;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null agent", length, 0xCu);
        }
      }
      else if (v34)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)length = 136446466;
            *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            v37 = 2082;
            *(_QWORD *)v38 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v16, "%{public}s called with null agent, dumping backtrace:%{public}s", length, 0x16u);
          }

          free(backtrace_string);
          if (!v11)
            goto LABEL_35;
          goto LABEL_34;
        }
        if (v17)
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_182FBE000, v12, v16, "%{public}s called with null agent, no backtrace", length, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s called with null agent, backtrace limit exceeded", length, 0xCu);
        }
      }
      goto LABEL_32;
    }
    if (is_config_agent_type_dns())
    {
      config_agent_copy_dns_information();
      v7 = (void *)objc_claimAutoreleasedReturnValue();
      v8 = v7;
      if (v7)
      {
        v9 = nw_resolver_config_create_with_dictionary(v7);
        config_agent_free_dns_information();
LABEL_11:

LABEL_36:
        return v9;
      }
      __nwlog_obj();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)length = 136446210;
      *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
      v23 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v34 = 0;
      if (__nwlog_fault(v23, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)length = 136446210;
            *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null resolver_dictionary", length, 0xCu);
          }
        }
        else if (v34)
        {
          v29 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v24 = objc_claimAutoreleasedReturnValue();
          v30 = type;
          v31 = os_log_type_enabled(v24, type);
          if (v29)
          {
            if (v31)
            {
              *(_DWORD *)length = 136446466;
              *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
              v37 = 2082;
              *(_QWORD *)v38 = v29;
              _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s called with null resolver_dictionary, dumping backtrace:%{public}s", length, 0x16u);
            }

            free(v29);
            goto LABEL_70;
          }
          if (v31)
          {
            *(_DWORD *)length = 136446210;
            *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s called with null resolver_dictionary, no backtrace", length, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v24 = objc_claimAutoreleasedReturnValue();
          v33 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)length = 136446210;
            *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
            _os_log_impl(&dword_182FBE000, v24, v33, "%{public}s called with null resolver_dictionary, backtrace limit exceeded", length, 0xCu);
          }
        }

      }
LABEL_70:
      if (v23)
        free(v23);
      v9 = 0;
      goto LABEL_11;
    }
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)length = 136446210;
    *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v11, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null is_config_agent_type_dns(agent)", length, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v34)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_182FBE000, v12, v32, "%{public}s called with null is_config_agent_type_dns(agent), backtrace limit exceeded", length, 0xCu);
        }
        goto LABEL_32;
      }
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v12, type);
      if (!v26)
      {
        if (v28)
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
          _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null is_config_agent_type_dns(agent), no backtrace", length, 0xCu);
        }
        goto LABEL_32;
      }
      if (v28)
      {
        *(_DWORD *)length = 136446466;
        *(_QWORD *)&length[4] = "nw_path_copy_resolver_config_for_identifier";
        v37 = 2082;
        *(_QWORD *)v38 = v26;
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null is_config_agent_type_dns(agent), dumping backtrace:%{public}s", length, 0x16u);
      }

      free(v26);
    }
LABEL_33:
    if (!v11)
    {
LABEL_35:
      v9 = 0;
      goto LABEL_36;
    }
LABEL_34:
    free(v11);
    goto LABEL_35;
  }
  return 0;
}

void sub_1839ED434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_path_has_browse_descriptor(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 5) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_browse_descriptor";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_browse_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_browse_descriptor";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_browse_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_browse_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_has_advertise_descriptor(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 6) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_advertise_descriptor";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_advertise_descriptor";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_advertise_descriptor";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_copy_discovered_endpoints(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[7];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_copy_discovered_endpoints";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_discovered_endpoints";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_copy_discovered_endpoints";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_discovered_endpoints";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_discovered_endpoints";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_supports_browse(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL8 v5;
  void *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD applier[5];
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_supports_browse";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_supports_browse";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_supports_browse";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_supports_browse";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_supports_browse";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_32:
    if (v9)
      free(v9);
    v5 = 0;
    goto LABEL_15;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v20 = 0;
  if ((v1[5] || v1[6]) && *((_DWORD *)v1 + 86))
  {
    v3 = 0;
    v4 = 8;
    do
    {
      if (!uuid_is_null((const unsigned __int8 *)(v2[38] + v4)))
      {
        v5 = 1;
        *(_BYTE *)(*(_QWORD *)&buf[8] + 24) = 1;
        goto LABEL_14;
      }
      ++v3;
      v4 += 24;
    }
    while (v3 < *((unsigned int *)v2 + 86));
    if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      goto LABEL_10;
    v5 = 1;
  }
  else
  {
LABEL_10:
    v6 = (void *)v2[28];
    if (v6)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_path_supports_browse_block_invoke;
      applier[3] = &unk_1E14AAE28;
      applier[4] = buf;
      xpc_dictionary_apply(v6, applier);
      v5 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    }
    else
    {
      v5 = 0;
    }
  }
LABEL_14:
  _Block_object_dispose(buf, 8);
LABEL_15:

  return v5;
}

void sub_1839EDFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_path_supports_browse_block_invoke(uint64_t a1, int a2, xpc_object_t xdict)
{
  _DWORD *data;
  int v5;
  uint64_t result;
  size_t length;

  length = 0;
  if (!xdict)
    return 1;
  data = xpc_dictionary_get_data(xdict, "data", &length);
  if (!data || length < 0xD8 || length != data[53] + 216)
    return 1;
  v5 = data[52];
  result = 1;
  if ((v5 & 0x100) != 0 && (v5 & 0x13) != 1)
  {
    result = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }
  return result;
}

void nw_path_enumerate_browse_options(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void (**v5)(_QWORD, _QWORD);
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD applier[4];
  id v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void (**)(_QWORD, _QWORD))v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_enumerate_browse_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_enumerate_browse_options";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_path_enumerate_browse_options";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v10)
          goto LABEL_11;
LABEL_46:
        free(v10);
        goto LABEL_11;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_enumerate_browse_options";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_enumerate_browse_options";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (v4)
  {
    if ((v3[5] || v3[6]) && *((_DWORD *)v3 + 86))
    {
      v6 = 0;
      v7 = 8;
      do
      {
        v5[2](v5, v3[38] + v7);
        ++v6;
        v7 += 24;
      }
      while (v6 < *((unsigned int *)v3 + 86));
    }
    else
    {
      v8 = (void *)v3[28];
      if (v8)
      {
        applier[0] = MEMORY[0x1E0C809B0];
        applier[1] = 3221225472;
        applier[2] = __nw_path_enumerate_browse_options_block_invoke;
        applier[3] = &unk_1E14A8ED8;
        v24 = v4;
        xpc_dictionary_apply(v8, applier);

      }
    }
    goto LABEL_11;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_path_enumerate_browse_options";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25))
    goto LABEL_45;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_path_enumerate_browse_options";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_44;
  }
  if (!v25)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_path_enumerate_browse_options";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_44;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_path_enumerate_browse_options";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_44;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_path_enumerate_browse_options";
    v29 = 2082;
    v30 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_46;
LABEL_11:

}

void sub_1839EE5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_browse_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  _DWORD *data;
  size_t length;

  v4 = a3;
  v5 = v4;
  length = 0;
  if (v4)
  {
    data = xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8
        && length == data[53] + 216
        && (data[52] & 0x100) != 0
        && (data[52] & 0x13) != 1)
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }
    }
  }

  return 1;
}

void sub_1839EE688(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_path_enumerate_group_options(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD applier[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_enumerate_group_options";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_enumerate_group_options";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_path_enumerate_group_options";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_enumerate_group_options";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_enumerate_group_options";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    v6 = (void *)v3[28];
    if (v6)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_path_enumerate_group_options_block_invoke;
      applier[3] = &unk_1E14A8ED8;
      v22 = v4;
      xpc_dictionary_apply(v6, applier);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_path_enumerate_group_options";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_enumerate_group_options";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_enumerate_group_options";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_enumerate_group_options";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_path_enumerate_group_options";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

void sub_1839EEB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_group_options_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  _DWORD *data;
  size_t length;

  v4 = a3;
  v5 = v4;
  length = 0;
  if (v4)
  {
    data = xpc_dictionary_get_data(v4, "data", &length);
    if (data)
    {
      if (length >= 0xD8
        && length == data[53] + 216
        && (data[52] & 0x20000) != 0
        && (data[52] & 0x13) != 1)
      {
        (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
      }
    }
  }

  return 1;
}

void sub_1839EEC4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_path_enumerate_interfaces_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a3 + 16);
  if (!v3 || v3 == *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96))
    return 1;
  else
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

BOOL nw_path_has_flows(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  _BOOL8 v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_path_has_flows";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_path_has_flows";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_path_has_flows";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_path_has_flows";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_path_has_flows";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v6)
      free(v6);
    goto LABEL_22;
  }
  v3 = *((_QWORD *)v1 + 9);
  if (!v3)
  {
LABEL_22:
    v4 = 0;
    goto LABEL_23;
  }
  v4 = *(_QWORD *)(v3 + 16) != *(_QWORD *)(v3 + 24);
LABEL_23:

  return v4;
}

BOOL nw_path_has_flow_for_nexus_agent(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[6];
  char v14;
  os_log_type_t v15;
  _BYTE buf[24];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v17 = 0;
    v2 = *(unsigned __int8 **)(a1 + 72);
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_path_has_flow_for_nexus_agent_block_invoke;
    v13[3] = &unk_1E14A8F50;
    v13[4] = buf;
    v13[5] = a2;
    nw_array_apply(v2, (uint64_t)v13);
    v3 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    return v3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_has_flow_for_nexus_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  v15 = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &v15, &v14))
  {
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = v15;
      if (os_log_type_enabled(v7, v15))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_has_flow_for_nexus_agent";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = v15;
      v11 = os_log_type_enabled(v7, v15);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_has_flow_for_nexus_agent";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_has_flow_for_nexus_agent";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = v15;
      if (os_log_type_enabled(v7, v15))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_has_flow_for_nexus_agent";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  return 0;
}

BOOL __nw_path_has_flow_for_nexus_agent_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = uuid_compare((const unsigned __int8 *)(a3 + 84), *(const unsigned __int8 **)(a1 + 40));
  if (!v4)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return v4 != 0;
}

BOOL __nw_path_interface_prohibited_by_parameters_block_invoke(uint64_t a1, int a2, xpc_object_t xuint)
{
  int value;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  value = xpc_uint64_get_value(xuint);
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 == value)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 32);
      v10 = 136446722;
      v11 = "nw_path_interface_prohibited_by_parameters_block_invoke";
      v12 = 1024;
      v13 = v7;
      v14 = 2112;
      v15 = v8;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Interface type %u prohibited, cannot use interface option %@", (uint8_t *)&v10, 0x1Cu);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  return v5 != value;
}

BOOL __nw_path_interface_prohibited_by_parameters_block_invoke_376(uint64_t a1, int a2, xpc_object_t xuint)
{
  int value;
  int v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  int v10;
  const char *v11;
  __int16 v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  value = xpc_uint64_get_value(xuint);
  v5 = *(_DWORD *)(a1 + 48);
  if (v5 == value)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_DWORD *)(a1 + 48);
      v8 = *(_QWORD *)(a1 + 32);
      v10 = 136446722;
      v11 = "nw_path_interface_prohibited_by_parameters_block_invoke";
      v12 = 1024;
      v13 = v7;
      v14 = 2112;
      v15 = v8;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Interface subtype %u prohibited, cannot use interface option %@", (uint8_t *)&v10, 0x1Cu);
    }

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  return v5 != value;
}

uint64_t __nw_path_interface_prohibited_by_parameters_block_invoke_377(uint64_t a1, uint64_t a2, void *a3)
{
  NWConcrete_nw_interface *v4;
  NWConcrete_nw_interface *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = nw_interface_create_from_dictionary(a3);
  v5 = v4;
  if (v4 && nw_interface_shallow_compare(v4, *(void **)(a1 + 32)))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v7 = *(_QWORD *)(a1 + 32);
      v10 = 136446466;
      v11 = "nw_path_interface_prohibited_by_parameters_block_invoke";
      v12 = 2112;
      v13 = v7;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Interface %@ prohibited, cannot use interface option", (uint8_t *)&v10, 0x16u);
    }

    v8 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    v8 = 1;
  }

  return v8;
}

uint64_t __nw_path_enumerate_interface_options_with_details_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 1;
}

void nw_path_enumerate_interface_options(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD v5[4];
  id v6;

  v3 = a2;
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __nw_path_enumerate_interface_options_block_invoke;
  v5[3] = &unk_1E14A8FC8;
  v6 = v3;
  v4 = v3;
  nw_path_enumerate_interface_options_with_details(a1, v5);

}

void sub_1839EF65C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_estimated_upload_throughput_internal(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(unsigned __int8 *)(a1 + 387);
    v2 = 0x8000 << v1;
    if (v1 > 0x30)
      v2 = -1;
    if (*(_BYTE *)(a1 + 387))
      return v2;
    else
      return 0;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_path_get_estimated_upload_throughput_internal";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_path_get_estimated_upload_throughput_internal";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_path_get_estimated_upload_throughput_internal";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_path_get_estimated_upload_throughput_internal";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_path_get_estimated_upload_throughput_internal";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v5)
    free(v5);
  return 0;
}

uint64_t nw_path_get_estimated_download_throughput_internal(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(unsigned __int8 *)(a1 + 388);
    v2 = 0x8000 << v1;
    if (v1 > 0x30)
      v2 = -1;
    if (*(_BYTE *)(a1 + 388))
      return v2;
    else
      return 0;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_path_get_estimated_download_throughput_internal";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_path_get_estimated_download_throughput_internal";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_path_get_estimated_download_throughput_internal";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_path_get_estimated_download_throughput_internal";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_path_get_estimated_download_throughput_internal";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v5)
    free(v5);
  return 0;
}

uint64_t nw_path_get_estimated_upload_throughput(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  NSObject *v4;
  id v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  const char *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  unsigned int *v14;
  int v15;
  const char *v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  unsigned int *v21;
  int v22;
  const char *v23;
  id v24;
  void *v25;
  const char *effective_process_name;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  double v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  NSObject *v46;
  os_log_type_t v47;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (id *)v1;
    if (nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count > 0x3E7)
    {
      if (!gLogDatapath)
      {
LABEL_63:

        v35 = *((unsigned __int8 *)v3 + 387);
        v36 = 0x8000 << v35;
        if (v35 > 0x30)
          v36 = -1;
        if (*((_BYTE *)v3 + 387))
          v37 = v36;
        else
          v37 = 0;
        goto LABEL_68;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_report_estimated_throughput_usage";
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Estimated throughput usage exceeded cap, ignoring", buf, 0xCu);
      }
LABEL_62:

      goto LABEL_63;
    }
    ++nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count;
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4)
    {
      v5 = nw_path_copy_interface(v3);
      v6 = v5;
      if (!v5)
        goto LABEL_41;
      v7 = (unsigned int *)v5;
      v8 = v7[24];

      if (v8 > 4)
        v9 = "unknown";
      else
        v9 = off_1E14AD0B0[v8];
      v14 = v7;
      v15 = v14[25];

      if (v15 <= 1001)
      {
        if (!v15)
        {
          v16 = "other";
          goto LABEL_40;
        }
        if (v15 == 1001)
        {
          v16 = "wifi_infrastructure";
          goto LABEL_40;
        }
      }
      else
      {
        switch(v15)
        {
          case 1002:
            v16 = "wifi_awdl";
            goto LABEL_40;
          case 4001:
            v16 = "coprocessor";
            goto LABEL_40;
          case 5001:
            v16 = "companion";
LABEL_40:
            v21 = v14;
            v22 = *((unsigned __int8 *)v21 + 84);

            v23 = nw_interface_radio_type_to_string(v22);
            xpc_dictionary_set_string(v4, "interface_type", v9);
            xpc_dictionary_set_string(v4, "interface_subtype", v16);
            xpc_dictionary_set_string(v4, "interface_radio_type", v23);
LABEL_41:
            v24 = v3[2];
            v25 = v24;
            if (v24)
            {
              effective_process_name = (const char *)nw_parameters_get_effective_process_name(v24);
              if (effective_process_name)
                xpc_dictionary_set_string(v4, "effective_bundle_id", effective_process_name);
            }
            if (nw_utilities_get_self_name::onceToken != -1)
              dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44028);
            if (nw_utilities_get_self_name::name)
              xpc_dictionary_set_string(v4, "bundle_id", (const char *)nw_utilities_get_self_name::name);
            v27 = *((unsigned __int8 *)v3 + 388);
            v28 = 0x8000 << v27;
            if (v27 > 0x30)
              v28 = -1;
            if (*((_BYTE *)v3 + 388))
              v29 = v28;
            else
              v29 = 0;
            xpc_dictionary_set_uint64(v4, "download_estimate", v29);
            v30 = *((unsigned __int8 *)v3 + 387);
            v31 = 0x8000 << v30;
            if (v30 > 0x30)
              v31 = -1;
            if (*((_BYTE *)v3 + 387))
              v32 = v31;
            else
              v32 = 0;
            xpc_dictionary_set_uint64(v4, "upload_estimate", v32);
            xpc_dictionary_set_string(v4, "direction", "upload");
            v33 = (char *)xpc_dictionary_copy_basic_description();
            if (gLogDatapath)
            {
              __nwlog_obj();
              v46 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446466;
                v51 = "nw_path_report_estimated_throughput_usage";
                v52 = 2080;
                v53 = v33;
                _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, "%{public}s Estimated throughput: %s", buf, 0x16u);
              }

            }
            if (v33)
              free(v33);
            analytics_send_event_delayInitStub(v34);

            goto LABEL_62;
        }
      }
      v16 = "unknown";
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v51 = "nw_path_report_estimated_throughput_usage";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (__nwlog_fault(v11, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v48)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v18 = type;
        v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_path_report_estimated_throughput_usage";
            v52 = 2082;
            v53 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v11)
            goto LABEL_17;
          goto LABEL_16;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v11)
    {
LABEL_17:
      v4 = 0;
      goto LABEL_62;
    }
LABEL_16:
    free(v11);
    goto LABEL_17;
  }
  __nwlog_obj();
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_path_get_estimated_upload_throughput";
  v40 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v48 = 0;
  if (__nwlog_fault(v40, &type, &v48))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_upload_throughput";
        _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v48)
    {
      v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      v45 = os_log_type_enabled(v41, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_path_get_estimated_upload_throughput";
          v52 = 2082;
          v53 = v43;
          _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_91;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_upload_throughput";
        _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_upload_throughput";
        _os_log_impl(&dword_182FBE000, v41, v47, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_91:
  if (v40)
    free(v40);
  v37 = 0;
LABEL_68:

  return v37;
}

void sub_1839F03F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_estimated_download_throughput(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  NSObject *v4;
  id v5;
  void *v6;
  unsigned int *v7;
  uint64_t v8;
  const char *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  unsigned int *v14;
  int v15;
  const char *v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  unsigned int *v21;
  int v22;
  const char *v23;
  id v24;
  void *v25;
  const char *effective_process_name;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  double v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  NSObject *v46;
  os_log_type_t v47;
  char v48;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v51;
  __int16 v52;
  char *v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (id *)v1;
    if (nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count > 0x3E7)
    {
      if (!gLogDatapath)
      {
LABEL_63:

        v35 = *((unsigned __int8 *)v3 + 388);
        v36 = 0x8000 << v35;
        if (v35 > 0x30)
          v36 = -1;
        if (*((_BYTE *)v3 + 388))
          v37 = v36;
        else
          v37 = 0;
        goto LABEL_68;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_report_estimated_throughput_usage";
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s Estimated throughput usage exceeded cap, ignoring", buf, 0xCu);
      }
LABEL_62:

      goto LABEL_63;
    }
    ++nw_path_report_estimated_throughput_usage(NWConcrete_nw_path *,BOOL)::usage_report_count;
    v4 = xpc_dictionary_create(0, 0, 0);
    if (v4)
    {
      v5 = nw_path_copy_interface(v3);
      v6 = v5;
      if (!v5)
        goto LABEL_41;
      v7 = (unsigned int *)v5;
      v8 = v7[24];

      if (v8 > 4)
        v9 = "unknown";
      else
        v9 = off_1E14AD0B0[v8];
      v14 = v7;
      v15 = v14[25];

      if (v15 <= 1001)
      {
        if (!v15)
        {
          v16 = "other";
          goto LABEL_40;
        }
        if (v15 == 1001)
        {
          v16 = "wifi_infrastructure";
          goto LABEL_40;
        }
      }
      else
      {
        switch(v15)
        {
          case 1002:
            v16 = "wifi_awdl";
            goto LABEL_40;
          case 4001:
            v16 = "coprocessor";
            goto LABEL_40;
          case 5001:
            v16 = "companion";
LABEL_40:
            v21 = v14;
            v22 = *((unsigned __int8 *)v21 + 84);

            v23 = nw_interface_radio_type_to_string(v22);
            xpc_dictionary_set_string(v4, "interface_type", v9);
            xpc_dictionary_set_string(v4, "interface_subtype", v16);
            xpc_dictionary_set_string(v4, "interface_radio_type", v23);
LABEL_41:
            v24 = v3[2];
            v25 = v24;
            if (v24)
            {
              effective_process_name = (const char *)nw_parameters_get_effective_process_name(v24);
              if (effective_process_name)
                xpc_dictionary_set_string(v4, "effective_bundle_id", effective_process_name);
            }
            if (nw_utilities_get_self_name::onceToken != -1)
              dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44028);
            if (nw_utilities_get_self_name::name)
              xpc_dictionary_set_string(v4, "bundle_id", (const char *)nw_utilities_get_self_name::name);
            v27 = *((unsigned __int8 *)v3 + 388);
            v28 = 0x8000 << v27;
            if (v27 > 0x30)
              v28 = -1;
            if (*((_BYTE *)v3 + 388))
              v29 = v28;
            else
              v29 = 0;
            xpc_dictionary_set_uint64(v4, "download_estimate", v29);
            v30 = *((unsigned __int8 *)v3 + 387);
            v31 = 0x8000 << v30;
            if (v30 > 0x30)
              v31 = -1;
            if (*((_BYTE *)v3 + 387))
              v32 = v31;
            else
              v32 = 0;
            xpc_dictionary_set_uint64(v4, "upload_estimate", v32);
            xpc_dictionary_set_string(v4, "direction", "download");
            v33 = (char *)xpc_dictionary_copy_basic_description();
            if (gLogDatapath)
            {
              __nwlog_obj();
              v46 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446466;
                v51 = "nw_path_report_estimated_throughput_usage";
                v52 = 2080;
                v53 = v33;
                _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, "%{public}s Estimated throughput: %s", buf, 0x16u);
              }

            }
            if (v33)
              free(v33);
            analytics_send_event_delayInitStub(v34);

            goto LABEL_62;
        }
      }
      v16 = "unknown";
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v51 = "nw_path_report_estimated_throughput_usage";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v48 = 0;
    if (__nwlog_fault(v11, &type, &v48))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v48)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v18 = type;
        v19 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v51 = "nw_path_report_estimated_throughput_usage";
            v52 = 2082;
            v53 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v11)
            goto LABEL_17;
          goto LABEL_16;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_182FBE000, v12, v18, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v51 = "nw_path_report_estimated_throughput_usage";
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v11)
    {
LABEL_17:
      v4 = 0;
      goto LABEL_62;
    }
LABEL_16:
    free(v11);
    goto LABEL_17;
  }
  __nwlog_obj();
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v51 = "nw_path_get_estimated_download_throughput";
  v40 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v48 = 0;
  if (__nwlog_fault(v40, &type, &v48))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_download_throughput";
        _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v48)
    {
      v43 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      v45 = os_log_type_enabled(v41, type);
      if (v43)
      {
        if (v45)
        {
          *(_DWORD *)buf = 136446466;
          v51 = "nw_path_get_estimated_download_throughput";
          v52 = 2082;
          v53 = v43;
          _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v43);
        goto LABEL_91;
      }
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_download_throughput";
        _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v51 = "nw_path_get_estimated_download_throughput";
        _os_log_impl(&dword_182FBE000, v41, v47, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_91:
  if (v40)
    free(v40);
  v37 = 0;
LABEL_68:

  return v37;
}

void sub_1839F0C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id nw_path_flow_copy_local_endpoint(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[4];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_copy_local_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_local_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_copy_local_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_local_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_local_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_flow_copy_remote_endpoint(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[5];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_copy_remote_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_copy_remote_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_flow_copy_interface(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[2];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_copy_interface";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_interface";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_copy_interface";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_interface";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_interface";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_get_nexus_agent_uuid(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  _OWORD *v5;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_path_flow_get_nexus_agent_uuid";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_flow_get_nexus_agent_uuid";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null flow", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_path_flow_get_nexus_agent_uuid";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_flow_get_nexus_agent_uuid";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_flow_get_nexus_agent_uuid";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_22:
    if (v9)
      free(v9);
    goto LABEL_3;
  }
  v5 = v3 + 84;
  if (!uuid_is_null((const unsigned __int8 *)v3 + 84))
  {
    *a2 = *v5;
    v6 = 1;
    goto LABEL_5;
  }
LABEL_3:
  v6 = 0;
LABEL_5:

  return v6;
}

void sub_1839F1760(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_path_flow_is_viable(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 185) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_is_viable";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_is_viable";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_is_viable";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_is_viable";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_is_viable";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_ecn_enabled(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[185] >> 2) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_ecn_enabled";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_ecn_enabled";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_ecn_enabled";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_ecn_enabled";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_ecn_enabled";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_fast_open_blocked(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[185] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_fast_open_blocked";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_fast_open_blocked";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_fast_open_blocked";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_fast_open_blocked";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_fast_open_blocked";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_is_local(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[185] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_is_local";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_is_local";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_is_local";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_is_local";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_is_local";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_is_direct(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[185] >> 5) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_is_direct";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_is_direct";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_is_direct";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_is_direct";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_is_direct";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_path_flow_has_ipv4(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[185] >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_has_ipv4";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_has_ipv4";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_has_ipv4";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_has_ipv4";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_has_ipv4";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_flow_has_ipv6(void *a1)
{
  char *v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[185] < 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_has_ipv6";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_has_ipv6";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_has_ipv6";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_has_ipv6";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_has_ipv6";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_flow_ids_are_equal(void *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _BOOL8 v5;

  v3 = a1;
  v4 = a2;
  v5 = v3 == v4;
  if (v3 != v4 && v3 && v4)
    v5 = v3[18] == v4[18] && v3[19] == v4[19];

  return v5;
}

id nw_path_flow_copy_error(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[8];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_copy_error";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_error";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_copy_error";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_error";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_copy_error";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_path_flow_registration_set_advisory_region(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_QWORD *)v3 + 10) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_flow_registration_set_advisory_region";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_set_advisory_region";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow_registration", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_flow_registration_set_advisory_region";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_set_advisory_region";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_flow_registration_set_advisory_region";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

NWConcrete_nw_path_override_info *nw_path_override_info_create()
{
  NWConcrete_nw_path_override_info *v0;
  NWConcrete_nw_path_override_info *v1;
  NWConcrete_nw_path_override_info *v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(NWConcrete_nw_path_override_info);
  v1 = v0;
  if (v0)
  {
    v2 = v0;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v15 = "nw_path_override_info_create";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_8;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_path_override_info_create";
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_override_info) alloc] init] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v4)
      goto LABEL_10;
LABEL_9:
    free(v4);
    goto LABEL_10;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v11 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_path_override_info_create";
      _os_log_impl(&dword_182FBE000, v5, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_override_info) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  v9 = type;
  v10 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_path_override_info_create";
      _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_override_info) alloc] init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nw_path_override_info_create";
    v16 = 2082;
    v17 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_override_info) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4)
    goto LABEL_9;
LABEL_10:

  return v1;
}

void nw_path_override_info_set_uses_wifi(void *a1, int a2)
{
  nw_path_override_info_update_flag(a1, 1, a2);
}

void nw_path_override_info_update_flag(void *a1, uint64_t a2, int a3)
{
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    v7 = *((_QWORD *)v5 + 1);
    if (a3)
      v8 = v7 | a2;
    else
      v8 = v7 & ~a2;
    *((_QWORD *)v5 + 1) = v8;
    goto LABEL_6;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_path_override_info_update_flag";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_path_override_info_update_flag";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null override_info", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_path_override_info_update_flag";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null override_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_path_override_info_update_flag";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_path_override_info_update_flag";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null override_info, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v10)
    free(v10);
LABEL_6:

}

void nw_path_override_info_set_uses_cellular(void *a1, int a2)
{
  nw_path_override_info_update_flag(a1, 2, a2);
}

void nw_path_override_info_set_expensive(void *a1, int a2)
{
  nw_path_override_info_update_flag(a1, 4, a2);
}

void nw_path_override_info_set_constrained(void *a1, int a2)
{
  nw_path_override_info_update_flag(a1, 8, a2);
}

void nw_path_override_info_set_roaming(void *a1, int a2)
{
  nw_path_override_info_update_flag(a1, 16, a2);
}

void nw_path_override_info_add_resolver_config(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  _BOOL8 v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_override_info_add_resolver_config";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_override_info_add_resolver_config";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null override_info", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_path_override_info_add_resolver_config";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null override_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v10)
          goto LABEL_6;
LABEL_41:
        free(v10);
        goto LABEL_6;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_override_info_add_resolver_config";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_override_info_add_resolver_config";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null override_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v4)
  {
    v6 = v3[2];
    if (!v6)
    {
      v7 = nw_array_create();
      v8 = (void *)v3[2];
      v3[2] = v7;

      v6 = v3[2];
    }
    nw_array_append(v6, v5);
    goto LABEL_6;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_path_override_info_add_resolver_config";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_override_info_add_resolver_config";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null resolver_config", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v23)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_override_info_add_resolver_config";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null resolver_config, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_override_info_add_resolver_config";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null resolver_config, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_path_override_info_add_resolver_config";
    v27 = 2082;
    v28 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null resolver_config, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_41;
LABEL_6:

}

BOOL nw_path_override_info_copy_data(void *a1)
{
  id v1;
  _QWORD *v2;
  size_t v3;
  unsigned __int8 *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  unsigned __int8 *v13;
  dispatch_data_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL8 result;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  NSObject *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  _QWORD v46[7];
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  _QWORD v51[6];
  os_log_type_t type[8];
  os_log_type_t *v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t, uint64_t);
  void (*v56)(uint64_t);
  id v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  os_log_type_t v63;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  size_t v67;
  __int16 v68;
  uint64_t v69;
  __int16 v70;
  _BYTE v71[10];
  _BYTE v72[10];
  __int16 v73;
  char *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_path_override_info_copy_data";
    v21 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58) = 0;
    if (__nwlog_fault(v21, type, &v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_path_override_info_copy_data";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null override_info", buf, 0xCu);
        }
      }
      else if ((_BYTE)v58)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v35 = type[0];
        v36 = os_log_type_enabled(v22, type[0]);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            v65 = "nw_path_override_info_copy_data";
            v66 = 2082;
            v67 = (size_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v22, v35, "%{public}s called with null override_info, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_78;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_path_override_info_copy_data";
          _os_log_impl(&dword_182FBE000, v22, v35, "%{public}s called with null override_info, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v43 = type[0];
        if (os_log_type_enabled(v22, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_path_override_info_copy_data";
          _os_log_impl(&dword_182FBE000, v22, v43, "%{public}s called with null override_info, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_78:
    if (v21)
      free(v21);
    v14 = 0;
    goto LABEL_32;
  }
  v58 = 0;
  v59 = &v58;
  v60 = 0x2020000000;
  v3 = 13;
  v61 = 13;
  *(_QWORD *)type = 0;
  v53 = type;
  v54 = 0x3032000000;
  v55 = __Block_byref_object_copy__67271;
  v56 = __Block_byref_object_dispose__67272;
  v57 = 0;
  v4 = (unsigned __int8 *)*((_QWORD *)v1 + 2);
  if (v4)
  {
    v51[0] = MEMORY[0x1E0C809B0];
    v51[1] = 3221225472;
    v51[2] = __nw_path_override_info_copy_data_block_invoke;
    v51[3] = &unk_1E14A8FF0;
    v51[4] = type;
    v51[5] = &v58;
    nw_array_apply(v4, (uint64_t)v51);
    v3 = v59[3];
    if (!v3)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v65 = "strict_malloc";
      v25 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v25);
      if (result)
        goto LABEL_90;
      free(v25);
      v3 = 0;
    }
  }
  v5 = (char *)malloc_type_malloc(v3, 0xF2B69DE5uLL);
  v6 = v5;
  if (v5)
  {
    v47 = 0;
    v48 = &v47;
    v49 = 0x2020000000;
    v50 = v5;
    v7 = v59[3];
    v8 = &v5[v7];
    if (v7 > 0)
    {
      if ((unint64_t)v7 > 0xC)
      {
        *v5 = 1;
        *(_DWORD *)(v5 + 1) = 8;
        *(_QWORD *)(v5 + 5) = v2[1];
        v48[3] = (uint64_t)(v5 + 13);
        v13 = (unsigned __int8 *)*((_QWORD *)v53 + 5);
        if (!v13)
          goto LABEL_14;
        v46[0] = MEMORY[0x1E0C809B0];
        v46[1] = 3221225472;
        v46[2] = __nw_path_override_info_copy_data_block_invoke_2;
        v46[3] = &unk_1E14A9018;
        v46[4] = &v47;
        v46[5] = &v58;
        v46[6] = v6;
        nw_array_apply(v13, (uint64_t)v46);
        if (v48[3])
        {
LABEL_14:
          v14 = dispatch_data_create(v6, v59[3], 0, 0);
          free(v6);
LABEL_31:
          _Block_object_dispose(&v47, 8);
          _Block_object_dispose(type, 8);

          _Block_object_dispose(&v58, 8);
LABEL_32:

          return (BOOL)v14;
        }
LABEL_30:
        free(v6);
        v14 = 0;
        goto LABEL_31;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      *(_DWORD *)buf = 136447490;
      v65 = "nw_necp_append_tlv";
      v66 = 2048;
      v67 = (size_t)v6;
      v68 = 2048;
      v69 = 13;
      v70 = 2048;
      *(_QWORD *)v71 = v8;
      *(_WORD *)&v71[8] = 1024;
      *(_DWORD *)v72 = 1;
      *(_WORD *)&v72[4] = 1024;
      *(_DWORD *)&v72[6] = 8;
      v10 = (char *)_os_log_send_and_compose_impl();

      v63 = OS_LOG_TYPE_ERROR;
      v62 = 0;
      if (__nwlog_fault(v10, &v63, &v62))
      {
        if (v63 == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v12 = v63;
          if (os_log_type_enabled(v11, v63))
          {
            *(_DWORD *)buf = 136447490;
            v65 = "nw_necp_append_tlv";
            v66 = 2048;
            v67 = (size_t)v6;
            v68 = 2048;
            v69 = 13;
            v70 = 2048;
            *(_QWORD *)v71 = v8;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)v72 = 1;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = 8;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", buf, 0x36u);
          }
        }
        else if (v62)
        {
          v15 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v16 = v63;
          v17 = os_log_type_enabled(v11, v63);
          if (v15)
          {
            if (v17)
            {
              *(_DWORD *)buf = 136447746;
              v65 = "nw_necp_append_tlv";
              v66 = 2048;
              v67 = (size_t)v6;
              v68 = 2048;
              v69 = 13;
              v70 = 2048;
              *(_QWORD *)v71 = v8;
              *(_WORD *)&v71[8] = 1024;
              *(_DWORD *)v72 = 1;
              *(_WORD *)&v72[4] = 1024;
              *(_DWORD *)&v72[6] = 8;
              v73 = 2082;
              v74 = v15;
              _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x40u);
            }

            free(v15);
            if (!v10)
              goto LABEL_29;
            goto LABEL_28;
          }
          if (v17)
          {
            *(_DWORD *)buf = 136447490;
            v65 = "nw_necp_append_tlv";
            v66 = 2048;
            v67 = (size_t)v6;
            v68 = 2048;
            v69 = 13;
            v70 = 2048;
            *(_QWORD *)v71 = v8;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)v72 = 1;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = 8;
            _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", buf, 0x36u);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v11 = (id)gLogObj;
          v18 = v63;
          if (os_log_type_enabled(v11, v63))
          {
            *(_DWORD *)buf = 136447490;
            v65 = "nw_necp_append_tlv";
            v66 = 2048;
            v67 = (size_t)v6;
            v68 = 2048;
            v69 = 13;
            v70 = 2048;
            *(_QWORD *)v71 = v8;
            *(_WORD *)&v71[8] = 1024;
            *(_DWORD *)v72 = 1;
            *(_WORD *)&v72[4] = 1024;
            *(_DWORD *)&v72[6] = 8;
            _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", buf, 0x36u);
          }
        }
        goto LABEL_26;
      }
LABEL_27:
      if (!v10)
      {
LABEL_29:
        v48[3] = 0;
        goto LABEL_30;
      }
LABEL_28:
      free(v10);
      goto LABEL_29;
    }
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136447234;
    v65 = "nw_necp_append_tlv";
    v66 = 2048;
    v67 = (size_t)v6;
    v68 = 2048;
    v69 = (uint64_t)v8;
    v70 = 1024;
    *(_DWORD *)v71 = 1;
    *(_WORD *)&v71[4] = 1024;
    *(_DWORD *)&v71[6] = 8;
    v10 = (char *)_os_log_send_and_compose_impl();

    v63 = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v10, &v63, &v62))
      goto LABEL_27;
    if (v63 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v33 = v63;
      if (os_log_type_enabled(v11, v63))
      {
        *(_DWORD *)buf = 136447234;
        v65 = "nw_necp_append_tlv";
        v66 = 2048;
        v67 = (size_t)v6;
        v68 = 2048;
        v69 = (uint64_t)v8;
        v70 = 1024;
        *(_DWORD *)v71 = 1;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = 8;
        _os_log_impl(&dword_182FBE000, v11, v33, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", buf, 0x2Cu);
      }
    }
    else if (v62)
    {
      v40 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v41 = v63;
      v42 = os_log_type_enabled(v11, v63);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136447490;
          v65 = "nw_necp_append_tlv";
          v66 = 2048;
          v67 = (size_t)v6;
          v68 = 2048;
          v69 = (uint64_t)v8;
          v70 = 1024;
          *(_DWORD *)v71 = 1;
          *(_WORD *)&v71[4] = 1024;
          *(_DWORD *)&v71[6] = 8;
          *(_WORD *)v72 = 2082;
          *(_QWORD *)&v72[2] = v40;
          _os_log_impl(&dword_182FBE000, v11, v41, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", buf, 0x36u);
        }

        free(v40);
        goto LABEL_27;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136447234;
        v65 = "nw_necp_append_tlv";
        v66 = 2048;
        v67 = (size_t)v6;
        v68 = 2048;
        v69 = (uint64_t)v8;
        v70 = 1024;
        *(_DWORD *)v71 = 1;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = 8;
        _os_log_impl(&dword_182FBE000, v11, v41, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", buf, 0x2Cu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v45 = v63;
      if (os_log_type_enabled(v11, v63))
      {
        *(_DWORD *)buf = 136447234;
        v65 = "nw_necp_append_tlv";
        v66 = 2048;
        v67 = (size_t)v6;
        v68 = 2048;
        v69 = (uint64_t)v8;
        v70 = 1024;
        *(_DWORD *)v71 = 1;
        *(_WORD *)&v71[4] = 1024;
        *(_DWORD *)&v71[6] = 8;
        _os_log_impl(&dword_182FBE000, v11, v45, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", buf, 0x2Cu);
      }
    }
LABEL_26:

    goto LABEL_27;
  }
  __nwlog_obj();
  v26 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v65 = "strict_malloc";
  v66 = 2048;
  v67 = v3;
  v27 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v27);
  if (!result)
  {
    free(v27);
    v47 = 0;
    v48 = &v47;
    v49 = 0x2020000000;
    v50 = 0;
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_necp_append_tlv";
    v29 = (char *)_os_log_send_and_compose_impl();

    v63 = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (__nwlog_fault(v29, &v63, &v62))
    {
      if (v63 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = v63;
        if (os_log_type_enabled(v30, v63))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null tlv_start", buf, 0xCu);
        }
      }
      else if (v62)
      {
        v37 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v38 = v63;
        v39 = os_log_type_enabled(v30, v63);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v65 = "nw_necp_append_tlv";
            v66 = 2082;
            v67 = (size_t)v37;
            _os_log_impl(&dword_182FBE000, v30, v38, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_84;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v30, v38, "%{public}s called with null tlv_start, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v44 = v63;
        if (os_log_type_enabled(v30, v63))
        {
          *(_DWORD *)buf = 136446210;
          v65 = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v30, v44, "%{public}s called with null tlv_start, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_84:
    if (v29)
      free(v29);
    v14 = 0;
    v48[3] = 0;
    goto LABEL_31;
  }
LABEL_90:
  __break(1u);
  return result;
}

void sub_1839F480C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,id a37)
{
  void *v37;
  uint64_t v38;

  _Block_object_dispose(&a32, 8);

  _Block_object_dispose((const void *)(v38 - 216), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_path_override_info_copy_data_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  dispatch_data_t v4;
  uint64_t v5;
  _BOOL8 v6;
  uint64_t v7;
  void *v8;

  v4 = nw_resolver_config_copy_plist_data(a3);
  if (v4)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (!v5)
    {
      v6 = nw_array_create();
      v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v8 = *(void **)(v7 + 40);
      *(_QWORD *)(v7 + 40) = v6;

      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    nw_array_append(v5, v4);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += dispatch_data_get_size(v4) + 5;
  }

  return 1;
}

BOOL __nw_path_override_info_copy_data_block_invoke_2(_QWORD *a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  size_t size;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  unint64_t v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL8 result;
  _QWORD *v22;
  NSObject *v23;
  void *v24;
  _QWORD *v25;
  NSObject *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  void *v35;
  os_log_type_t v36;
  char *backtrace_string;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  _BOOL4 v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  _QWORD *v45;
  void *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  os_log_type_t v52;
  char *v53;
  os_log_type_t v54;
  _BOOL4 v55;
  os_log_type_t v56;
  _QWORD *v57;
  _QWORD v58[4];
  os_log_type_t type[8];
  os_log_type_t *v60;
  uint64_t v61;
  uint64_t v62;
  _BYTE applier[24];
  _BYTE v64[32];
  char *v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  size = dispatch_data_get_size(v4);
  if (!size)
  {
    v22 = a1;
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "strict_malloc";
    v24 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v24);
    if (result)
      goto LABEL_113;
    free(v24);
    a1 = v22;
  }
  v6 = malloc_type_malloc(size, 0xF2B69DE5uLL);
  if (v6)
    goto LABEL_3;
  v25 = a1;
  __nwlog_obj();
  v26 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
  *(_DWORD *)applier = 136446466;
  *(_QWORD *)&applier[4] = "strict_malloc";
  *(_WORD *)&applier[12] = 2048;
  *(_QWORD *)&applier[14] = size;
  v27 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v27);
  if (result)
  {
LABEL_113:
    __break(1u);
    return result;
  }
  free(v27);
  a1 = v25;
LABEL_3:
  *(_QWORD *)type = 0;
  v60 = type;
  v61 = 0x2000000000;
  v62 = 0;
  v58[0] = 0;
  v58[1] = v58;
  v58[2] = 0x2000000000;
  v58[3] = v6;
  if (v4)
  {
    *(_QWORD *)applier = MEMORY[0x1E0C809B0];
    *(_QWORD *)&applier[8] = 0x40000000;
    *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(_QWORD *)v64 = &unk_1E14A3448;
    *(_QWORD *)&v64[16] = v58;
    *(_QWORD *)&v64[24] = size;
    *(_QWORD *)&v64[8] = type;
    dispatch_data_apply(v4, applier);
    v7 = *((_QWORD *)v60 + 3);
  }
  else
  {
    v7 = 0;
  }
  _Block_object_dispose(v58, 8);
  _Block_object_dispose(type, 8);
  if (v7 != size)
    goto LABEL_36;
  v8 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24);
  if (!v8)
  {
    v28 = a1;
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
    v30 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (__nwlog_fault(v30, type, v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null tlv_start", applier, 0xCu);
        }
        goto LABEL_97;
      }
      if (!LOBYTE(v58[0]))
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v50 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v31, v50, "%{public}s called with null tlv_start, backtrace limit exceeded", applier, 0xCu);
        }
        goto LABEL_97;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      v39 = os_log_type_enabled(v31, type[0]);
      if (!backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v31, v38, "%{public}s called with null tlv_start, no backtrace", applier, 0xCu);
        }
        goto LABEL_97;
      }
      if (v39)
      {
        *(_DWORD *)applier = 136446466;
        *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2082;
        *(_QWORD *)&applier[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v31, v38, "%{public}s called with null tlv_start, dumping backtrace:%{public}s", applier, 0x16u);
      }
LABEL_67:

      free(backtrace_string);
    }
LABEL_98:
    a1 = v28;
    if (v30)
      free(v30);
    v16 = 0;
    goto LABEL_35;
  }
  v9 = a1[6];
  if (!v9)
  {
    v28 = a1;
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
    v30 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (__nwlog_fault(v30, type, v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v34 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null beyond", applier, 0xCu);
        }
LABEL_97:

        goto LABEL_98;
      }
      if (!LOBYTE(v58[0]))
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v51 = type[0];
        if (os_log_type_enabled(v31, type[0]))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v31, v51, "%{public}s called with null beyond, backtrace limit exceeded", applier, 0xCu);
        }
        goto LABEL_97;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v40 = type[0];
      v41 = os_log_type_enabled(v31, type[0]);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          _os_log_impl(&dword_182FBE000, v31, v40, "%{public}s called with null beyond, no backtrace", applier, 0xCu);
        }
        goto LABEL_97;
      }
      if (v41)
      {
        *(_DWORD *)applier = 136446466;
        *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2082;
        *(_QWORD *)&applier[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v31, v40, "%{public}s called with null beyond, dumping backtrace:%{public}s", applier, 0x16u);
      }
      goto LABEL_67;
    }
    goto LABEL_98;
  }
  v10 = v9 + *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  if (v8 >= v10)
  {
    v57 = a1;
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136447234;
    *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
    *(_WORD *)&applier[12] = 2048;
    *(_QWORD *)&applier[14] = v8;
    *(_WORD *)&applier[22] = 2048;
    *(_QWORD *)v64 = v10;
    *(_WORD *)&v64[8] = 1024;
    *(_DWORD *)&v64[10] = 2;
    *(_WORD *)&v64[14] = 1024;
    *(_DWORD *)&v64[16] = size;
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (__nwlog_fault(v13, type, v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v36 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)applier = 136447234;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 2048;
          *(_QWORD *)&applier[14] = v8;
          *(_WORD *)&applier[22] = 2048;
          *(_QWORD *)v64 = v10;
          *(_WORD *)&v64[8] = 1024;
          *(_DWORD *)&v64[10] = 2;
          *(_WORD *)&v64[14] = 1024;
          *(_DWORD *)&v64[16] = size;
          _os_log_impl(&dword_182FBE000, v14, v36, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u", applier, 0x2Cu);
        }
LABEL_31:

        goto LABEL_32;
      }
      if (!LOBYTE(v58[0]))
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v52 = type[0];
        if (os_log_type_enabled(v14, type[0]))
        {
          *(_DWORD *)applier = 136447234;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 2048;
          *(_QWORD *)&applier[14] = v8;
          *(_WORD *)&applier[22] = 2048;
          *(_QWORD *)v64 = v10;
          *(_WORD *)&v64[8] = 1024;
          *(_DWORD *)&v64[10] = 2;
          *(_WORD *)&v64[14] = 1024;
          *(_DWORD *)&v64[16] = size;
          _os_log_impl(&dword_182FBE000, v14, v52, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, backtrace limit exceeded", applier, 0x2Cu);
        }
        goto LABEL_31;
      }
      v42 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v43 = type[0];
      v44 = os_log_type_enabled(v14, type[0]);
      if (!v42)
      {
        if (v44)
        {
          *(_DWORD *)applier = 136447234;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 2048;
          *(_QWORD *)&applier[14] = v8;
          *(_WORD *)&applier[22] = 2048;
          *(_QWORD *)v64 = v10;
          *(_WORD *)&v64[8] = 1024;
          *(_DWORD *)&v64[10] = 2;
          *(_WORD *)&v64[14] = 1024;
          *(_DWORD *)&v64[16] = size;
          _os_log_impl(&dword_182FBE000, v14, v43, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, no backtrace", applier, 0x2Cu);
        }
        goto LABEL_31;
      }
      if (v44)
      {
        *(_DWORD *)applier = 136447490;
        *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2048;
        *(_QWORD *)&applier[14] = v8;
        *(_WORD *)&applier[22] = 2048;
        *(_QWORD *)v64 = v10;
        *(_WORD *)&v64[8] = 1024;
        *(_DWORD *)&v64[10] = 2;
        *(_WORD *)&v64[14] = 1024;
        *(_DWORD *)&v64[16] = size;
        *(_WORD *)&v64[20] = 2082;
        *(_QWORD *)&v64[22] = v42;
        _os_log_impl(&dword_182FBE000, v14, v43, "%{public}s Invalid tlv_start %p >= beyond %p type=%u length=%u, dumping backtrace:%{public}s", applier, 0x36u);
      }

      free(v42);
    }
LABEL_32:
    if (!v13)
    {
LABEL_34:
      v16 = 0;
      a1 = v57;
      goto LABEL_35;
    }
LABEL_33:
    free(v13);
    goto LABEL_34;
  }
  v11 = size + 5;
  if (v10 - v8 < v11)
  {
    v57 = a1;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    *(_DWORD *)applier = 136447490;
    *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
    *(_WORD *)&applier[12] = 2048;
    *(_QWORD *)&applier[14] = v8;
    *(_WORD *)&applier[22] = 2048;
    *(_QWORD *)v64 = size + 5;
    *(_WORD *)&v64[8] = 2048;
    *(_QWORD *)&v64[10] = v10;
    *(_WORD *)&v64[18] = 1024;
    *(_DWORD *)&v64[20] = 2;
    *(_WORD *)&v64[24] = 1024;
    *(_DWORD *)&v64[26] = size;
    v13 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (!__nwlog_fault(v13, type, v58))
      goto LABEL_32;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v15 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)applier = 136447490;
        *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2048;
        *(_QWORD *)&applier[14] = v8;
        *(_WORD *)&applier[22] = 2048;
        *(_QWORD *)v64 = size + 5;
        *(_WORD *)&v64[8] = 2048;
        *(_QWORD *)&v64[10] = v10;
        *(_WORD *)&v64[18] = 1024;
        *(_DWORD *)&v64[20] = 2;
        *(_WORD *)&v64[24] = 1024;
        *(_DWORD *)&v64[26] = size;
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u", applier, 0x36u);
      }
    }
    else if (LOBYTE(v58[0]))
    {
      v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v18 = type[0];
      v19 = os_log_type_enabled(v14, type[0]);
      if (v17)
      {
        if (v19)
        {
          *(_DWORD *)applier = 136447746;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 2048;
          *(_QWORD *)&applier[14] = v8;
          *(_WORD *)&applier[22] = 2048;
          *(_QWORD *)v64 = size + 5;
          *(_WORD *)&v64[8] = 2048;
          *(_QWORD *)&v64[10] = v10;
          *(_WORD *)&v64[18] = 1024;
          *(_DWORD *)&v64[20] = 2;
          *(_WORD *)&v64[24] = 1024;
          *(_DWORD *)&v64[26] = size;
          *(_WORD *)&v64[30] = 2082;
          v65 = v17;
          _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, dumping backtrace:%{public}s", applier, 0x40u);
        }

        free(v17);
        if (!v13)
          goto LABEL_34;
        goto LABEL_33;
      }
      if (v19)
      {
        *(_DWORD *)applier = 136447490;
        *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2048;
        *(_QWORD *)&applier[14] = v8;
        *(_WORD *)&applier[22] = 2048;
        *(_QWORD *)v64 = size + 5;
        *(_WORD *)&v64[8] = 2048;
        *(_QWORD *)&v64[10] = v10;
        *(_WORD *)&v64[18] = 1024;
        *(_DWORD *)&v64[20] = 2;
        *(_WORD *)&v64[24] = 1024;
        *(_DWORD *)&v64[26] = size;
        _os_log_impl(&dword_182FBE000, v14, v18, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, no backtrace", applier, 0x36u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      v20 = type[0];
      if (os_log_type_enabled(v14, type[0]))
      {
        *(_DWORD *)applier = 136447490;
        *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
        *(_WORD *)&applier[12] = 2048;
        *(_QWORD *)&applier[14] = v8;
        *(_WORD *)&applier[22] = 2048;
        *(_QWORD *)v64 = size + 5;
        *(_WORD *)&v64[8] = 2048;
        *(_QWORD *)&v64[10] = v10;
        *(_WORD *)&v64[18] = 1024;
        *(_DWORD *)&v64[20] = 2;
        *(_WORD *)&v64[24] = 1024;
        *(_DWORD *)&v64[26] = size;
        _os_log_impl(&dword_182FBE000, v14, v20, "%{public}s buffer too short tlv_start=%p full_tlv_len=%zu beyond=%p type=%u length=%u, backtrace limit exceeded", applier, 0x36u);
      }
    }
    goto LABEL_31;
  }
  *(_BYTE *)v8 = 2;
  *(_DWORD *)(v8 + 1) = size;
  if ((_DWORD)size)
  {
    if (v6)
    {
      memcpy((void *)(v8 + 5), v6, size);
      goto LABEL_19;
    }
    v45 = a1;
    __nwlog_obj();
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446722;
    *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
    *(_WORD *)&applier[12] = 1024;
    *(_DWORD *)&applier[14] = 2;
    *(_WORD *)&applier[18] = 1024;
    *(_DWORD *)&applier[20] = size;
    v47 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v58[0]) = 0;
    if (__nwlog_fault(v47, type, v58))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = 2;
          *(_WORD *)&applier[18] = 1024;
          *(_DWORD *)&applier[20] = size;
          _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s type=%u length=%u but value is NULL", applier, 0x18u);
        }
      }
      else if (LOBYTE(v58[0]))
      {
        v53 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v54 = type[0];
        v55 = os_log_type_enabled(v48, type[0]);
        if (v53)
        {
          if (v55)
          {
            *(_DWORD *)applier = 136446978;
            *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
            *(_WORD *)&applier[12] = 1024;
            *(_DWORD *)&applier[14] = 2;
            *(_WORD *)&applier[18] = 1024;
            *(_DWORD *)&applier[20] = size;
            *(_WORD *)v64 = 2082;
            *(_QWORD *)&v64[2] = v53;
            _os_log_impl(&dword_182FBE000, v48, v54, "%{public}s type=%u length=%u but value is NULL, dumping backtrace:%{public}s", applier, 0x22u);
          }

          free(v53);
          goto LABEL_110;
        }
        if (v55)
        {
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = 2;
          *(_WORD *)&applier[18] = 1024;
          *(_DWORD *)&applier[20] = size;
          _os_log_impl(&dword_182FBE000, v48, v54, "%{public}s type=%u length=%u but value is NULL, no backtrace", applier, 0x18u);
        }
      }
      else
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v56 = type[0];
        if (os_log_type_enabled(v48, type[0]))
        {
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_necp_append_tlv";
          *(_WORD *)&applier[12] = 1024;
          *(_DWORD *)&applier[14] = 2;
          *(_WORD *)&applier[18] = 1024;
          *(_DWORD *)&applier[20] = size;
          _os_log_impl(&dword_182FBE000, v48, v56, "%{public}s type=%u length=%u but value is NULL, backtrace limit exceeded", applier, 0x18u);
        }
      }

    }
LABEL_110:
    if (v47)
      free(v47);
    v16 = 0;
    a1 = v45;
    goto LABEL_35;
  }
LABEL_19:
  v16 = v8 + v11;
LABEL_35:
  *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 24) = v16;
LABEL_36:
  if (v6)
    free(v6);

  return 1;
}

void sub_1839F58F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t NWPBPathReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  NWPBEndpoint *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  int v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char v80;
  unsigned int v81;
  uint64_t v82;
  unint64_t v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  int v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  int v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  int v115;
  void *v116;
  id v117;
  void *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  unint64_t v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  int v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  int v135;
  uint64_t v136;
  unint64_t v137;
  unint64_t v138;
  int v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  int v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  int v156;
  uint64_t v157;
  unint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t result;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  int v169;
  uint64_t v170;
  unint64_t v171;
  unint64_t v172;
  int v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  int v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  int v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  int v189;
  uint64_t v190;
  unint64_t v191;
  unint64_t v192;
  int v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  int v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  int v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  int v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  int v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  unint64_t v220;
  int v221;
  uint64_t v222;
  unint64_t v223;
  unint64_t v224;
  int v225;
  uint64_t v226;
  unint64_t v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  int v233;
  uint64_t v234;
  unint64_t v235;
  unint64_t v236;
  int v237;
  uint64_t v238;
  unint64_t v239;
  unint64_t v240;
  int v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  uint64_t v246;
  unint64_t v247;
  unint64_t v248;
  int v249;
  uint64_t v250;
  unint64_t v251;
  unint64_t v252;
  int v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  int v257;
  uint64_t v258;
  unint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 >= v7)
    return *(_BYTE *)(a2 + *v8) == 0;
  v10 = (int *)MEMORY[0x1E0D82BB8];
  while (2)
  {
    v11 = (_BYTE *)(a2 + *v8);
    if (*v11)
      return *(_BYTE *)(a2 + *v8) == 0;
    if (v5 >= v7)
    {
      v13 = 0;
LABEL_39:
      *v11 = 1;
LABEL_40:
      v50 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v13 = 0;
      goto LABEL_42;
    }
    v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
    *(_QWORD *)(a2 + (int)v4) = v5 + 1;
    v13 = v12 & 0x7F;
    if ((v12 & 0x80) == 0)
      goto LABEL_40;
    v14 = *v3;
    v15 = *(_QWORD *)(a2 + v14);
    if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v16 = v15 + 1;
    v17 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
    *(_QWORD *)(a2 + v14) = v16;
    v13 |= (unint64_t)(v17 & 0x7F) << 7;
    if ((v17 & 0x80000000) == 0)
      goto LABEL_40;
    v18 = *v3;
    v19 = *(_QWORD *)(a2 + v18);
    if (v19 == -1 || v19 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v20 = v19 + 1;
    v21 = *(char *)(*(_QWORD *)(a2 + *v10) + v19);
    *(_QWORD *)(a2 + v18) = v20;
    v13 |= (unint64_t)(v21 & 0x7F) << 14;
    if ((v21 & 0x80000000) == 0)
      goto LABEL_40;
    v22 = *v3;
    v23 = *(_QWORD *)(a2 + v22);
    if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v24 = v23 + 1;
    v25 = *(char *)(*(_QWORD *)(a2 + *v10) + v23);
    *(_QWORD *)(a2 + v22) = v24;
    v13 |= (unint64_t)(v25 & 0x7F) << 21;
    if ((v25 & 0x80000000) == 0)
      goto LABEL_40;
    v26 = *v3;
    v27 = *(_QWORD *)(a2 + v26);
    if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v28 = v27 + 1;
    v29 = *(char *)(*(_QWORD *)(a2 + *v10) + v27);
    *(_QWORD *)(a2 + v26) = v28;
    v13 |= (unint64_t)(v29 & 0x7F) << 28;
    if ((v29 & 0x80000000) == 0)
      goto LABEL_40;
    v30 = *v3;
    v31 = *(_QWORD *)(a2 + v30);
    if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v32 = v31 + 1;
    v33 = *(char *)(*(_QWORD *)(a2 + *v10) + v31);
    *(_QWORD *)(a2 + v30) = v32;
    if ((v33 & 0x80000000) == 0)
      goto LABEL_40;
    v34 = *v3;
    v35 = *(_QWORD *)(a2 + v34);
    if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v36 = v35 + 1;
    v37 = *(char *)(*(_QWORD *)(a2 + *v10) + v35);
    *(_QWORD *)(a2 + v34) = v36;
    if ((v37 & 0x80000000) == 0)
      goto LABEL_40;
    v38 = *v3;
    v39 = *(_QWORD *)(a2 + v38);
    if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v40 = v39 + 1;
    v41 = *(char *)(*(_QWORD *)(a2 + *v10) + v39);
    *(_QWORD *)(a2 + v38) = v40;
    if ((v41 & 0x80000000) == 0)
      goto LABEL_40;
    v42 = *v3;
    v43 = *(_QWORD *)(a2 + v42);
    if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v6))
      goto LABEL_38;
    v44 = v43 + 1;
    v45 = *(char *)(*(_QWORD *)(a2 + *v10) + v43);
    *(_QWORD *)(a2 + v42) = v44;
    if ((v45 & 0x80000000) == 0)
      goto LABEL_40;
    v46 = *v3;
    v47 = *(_QWORD *)(a2 + v46);
    if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v6))
    {
LABEL_38:
      v11 = (_BYTE *)(a2 + *v8);
      goto LABEL_39;
    }
    v48 = v47 + 1;
    v49 = *(char *)(*(_QWORD *)(a2 + *v10) + v47);
    *(_QWORD *)(a2 + v46) = v48;
    if ((v49 & 0x80000000) == 0)
      goto LABEL_40;
    v13 = 0;
    v50 = *(unsigned __int8 *)(a2 + *v8);
LABEL_42:
    if (v50)
      v51 = 1;
    else
      v51 = (v13 & 7) == 4;
    if (v51)
      return *(_BYTE *)(a2 + *v8) == 0;
    switch((v13 >> 3))
    {
      case 1u:
        v52 = objc_alloc_init(NWPBEndpoint);
        objc_storeStrong((id *)(a1 + 40), v52);
        v262 = 0;
        v263 = 0;
        if (PBReaderPlaceMark() && NWPBEndpointReadFrom((uint64_t)v52, a2))
          goto LABEL_3;
        goto LABEL_271;
      case 2u:
        v52 = objc_alloc_init(NWPBParameters);
        objc_storeStrong((id *)(a1 + 48), v52);
        v262 = 0;
        v263 = 0;
        if (!PBReaderPlaceMark() || (NWPBParametersReadFrom((uint64_t)v52, a2) & 1) == 0)
          goto LABEL_271;
        goto LABEL_3;
      case 3u:
        PBReaderReadString();
        v75 = objc_claimAutoreleasedReturnValue();
        v76 = *(void **)(a1 + 16);
        *(_QWORD *)(a1 + 16) = v75;

        goto LABEL_4;
      case 4u:
        *(_BYTE *)(a1 + 64) |= 1u;
        v77 = *v3;
        v78 = *(_QWORD *)(a2 + v77);
        if (v78 == -1 || v78 >= *(_QWORD *)(a2 + *v6))
        {
          v81 = 0;
LABEL_154:
          *(_BYTE *)(a2 + *v8) = 1;
          goto LABEL_155;
        }
        v79 = v78 + 1;
        v80 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v78);
        *(_QWORD *)(a2 + v77) = v79;
        v81 = v80 & 0x7F;
        if ((v80 & 0x80) == 0)
          goto LABEL_155;
        v82 = *v3;
        v83 = *(_QWORD *)(a2 + v82);
        if (v83 == -1 || v83 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_154;
        v84 = *(char *)(*(_QWORD *)(a2 + *v10) + v83);
        *(_QWORD *)(a2 + v82) = v83 + 1;
        v81 = v81 & 0xFFFFC07F | ((v84 & 0x7F) << 7);
        if ((v84 & 0x80000000) == 0)
          goto LABEL_155;
        v85 = *v3;
        v86 = *(_QWORD *)(a2 + v85);
        if (v86 == -1 || v86 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_154;
        v87 = *(char *)(*(_QWORD *)(a2 + *v10) + v86);
        *(_QWORD *)(a2 + v85) = v86 + 1;
        v81 = v81 & 0xFFE03FFF | ((v87 & 0x7F) << 14);
        if ((v87 & 0x80000000) == 0)
          goto LABEL_155;
        v88 = *v3;
        v89 = *(_QWORD *)(a2 + v88);
        if (v89 == -1 || v89 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_154;
        v90 = *(char *)(*(_QWORD *)(a2 + *v10) + v89);
        *(_QWORD *)(a2 + v88) = v89 + 1;
        v81 = v81 & 0xF01FFFFF | ((v90 & 0x7F) << 21);
        if ((v90 & 0x80000000) == 0)
          goto LABEL_155;
        v91 = *v3;
        v92 = *(_QWORD *)(a2 + v91);
        if (v92 == -1 || v92 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_154;
        v93 = v92 + 1;
        v94 = *(char *)(*(_QWORD *)(a2 + *v10) + v92);
        *(_QWORD *)(a2 + v91) = v93;
        v81 |= v94 << 28;
        if ((v94 & 0x80000000) == 0)
          goto LABEL_155;
        v166 = *v3;
        v167 = *(_QWORD *)(a2 + v166);
        if (v167 == -1 || v167 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_154;
        v168 = v167 + 1;
        v169 = *(char *)(*(_QWORD *)(a2 + *v10) + v167);
        *(_QWORD *)(a2 + v166) = v168;
        if (v169 < 0)
        {
          v170 = *v3;
          v171 = *(_QWORD *)(a2 + v170);
          if (v171 == -1 || v171 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_154;
          v172 = v171 + 1;
          v173 = *(char *)(*(_QWORD *)(a2 + *v10) + v171);
          *(_QWORD *)(a2 + v170) = v172;
          if (v173 < 0)
          {
            v174 = *v3;
            v175 = *(_QWORD *)(a2 + v174);
            if (v175 == -1 || v175 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_154;
            v176 = v175 + 1;
            v177 = *(char *)(*(_QWORD *)(a2 + *v10) + v175);
            *(_QWORD *)(a2 + v174) = v176;
            if (v177 < 0)
            {
              v178 = *v3;
              v179 = *(_QWORD *)(a2 + v178);
              if (v179 == -1 || v179 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_154;
              v180 = v179 + 1;
              v181 = *(char *)(*(_QWORD *)(a2 + *v10) + v179);
              *(_QWORD *)(a2 + v178) = v180;
              if (v181 < 0)
              {
                v182 = *v3;
                v183 = *(_QWORD *)(a2 + v182);
                if (v183 == -1 || v183 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_154;
                v184 = v183 + 1;
                v185 = *(char *)(*(_QWORD *)(a2 + *v10) + v183);
                *(_QWORD *)(a2 + v182) = v184;
                if (v185 < 0)
                {
                  v81 = 0;
                  goto LABEL_157;
                }
              }
            }
          }
        }
LABEL_155:
        if (*(_BYTE *)(a2 + *v8))
          v81 = 0;
LABEL_157:
        *(_DWORD *)(a1 + 56) = v81;
        goto LABEL_4;
      case 5u:
        v52 = objc_alloc_init(NWPBInterface);
        v53 = 32;
        goto LABEL_104;
      case 6u:
        v52 = objc_alloc_init(NWPBInterface);
        v53 = 24;
LABEL_104:
        objc_storeStrong((id *)(a1 + v53), v52);
        v262 = 0;
        v263 = 0;
        if (!PBReaderPlaceMark() || (NWPBInterfaceReadFrom((uint64_t)v52, a2) & 1) == 0)
          goto LABEL_271;
        goto LABEL_3;
      case 7u:
        v52 = objc_alloc_init(NWPBAgent);
        if (a1)
        {
          v116 = *(void **)(a1 + 8);
          if (!v116)
          {
            v117 = objc_alloc_init(MEMORY[0x1E0C99DE8]);
            v118 = *(void **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v117;

            v116 = *(void **)(a1 + 8);
          }
          objc_msgSend(v116, "addObject:", v52, v262, v263);
        }

        v262 = 0;
        v263 = 0;
        if (PBReaderPlaceMark() && (NWPBAgentReadFrom((uint64_t)v52, a2) & 1) != 0)
        {
LABEL_3:
          PBReaderRecallMark();

LABEL_4:
          v4 = *v3;
          v5 = *(_QWORD *)(a2 + v4);
          v7 = *(_QWORD *)(a2 + *v6);
          if (v5 >= v7)
            return *(_BYTE *)(a2 + *v8) == 0;
          continue;
        }
LABEL_271:

        return 0;
      case 8u:
        *(_BYTE *)(a1 + 64) |= 4u;
        v95 = *v3;
        v96 = *(_QWORD *)(a2 + v95);
        if (v96 == -1 || v96 >= *(_QWORD *)(a2 + *v6))
        {
          v99 = 0;
LABEL_159:
          *(_BYTE *)(a2 + *v8) = 1;
          goto LABEL_160;
        }
        v97 = v96 + 1;
        v98 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v96);
        *(_QWORD *)(a2 + v95) = v97;
        v99 = v98 & 0x7F;
        if ((v98 & 0x80) == 0)
          goto LABEL_160;
        v100 = *v3;
        v101 = *(_QWORD *)(a2 + v100);
        if (v101 == -1 || v101 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_159;
        v102 = v101 + 1;
        v103 = *(char *)(*(_QWORD *)(a2 + *v10) + v101);
        *(_QWORD *)(a2 + v100) = v102;
        v99 |= (unint64_t)(v103 & 0x7F) << 7;
        if ((v103 & 0x80000000) == 0)
          goto LABEL_160;
        v104 = *v3;
        v105 = *(_QWORD *)(a2 + v104);
        if (v105 == -1 || v105 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_159;
        v106 = v105 + 1;
        v107 = *(char *)(*(_QWORD *)(a2 + *v10) + v105);
        *(_QWORD *)(a2 + v104) = v106;
        v99 |= (unint64_t)(v107 & 0x7F) << 14;
        if ((v107 & 0x80000000) == 0)
          goto LABEL_160;
        v108 = *v3;
        v109 = *(_QWORD *)(a2 + v108);
        if (v109 == -1 || v109 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_159;
        v110 = v109 + 1;
        v111 = *(char *)(*(_QWORD *)(a2 + *v10) + v109);
        *(_QWORD *)(a2 + v108) = v110;
        v99 |= (unint64_t)(v111 & 0x7F) << 21;
        if ((v111 & 0x80000000) == 0)
          goto LABEL_160;
        v112 = *v3;
        v113 = *(_QWORD *)(a2 + v112);
        if (v113 == -1 || v113 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_159;
        v114 = v113 + 1;
        v115 = *(char *)(*(_QWORD *)(a2 + *v10) + v113);
        *(_QWORD *)(a2 + v112) = v114;
        v99 |= (unint64_t)(v115 & 0x7F) << 28;
        if ((v115 & 0x80000000) == 0)
          goto LABEL_160;
        v186 = *v3;
        v187 = *(_QWORD *)(a2 + v186);
        if (v187 == -1 || v187 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_159;
        v188 = v187 + 1;
        v189 = *(char *)(*(_QWORD *)(a2 + *v10) + v187);
        *(_QWORD *)(a2 + v186) = v188;
        v99 |= (unint64_t)(v189 & 0x7F) << 35;
        if (v189 < 0)
        {
          v214 = *v3;
          v215 = *(_QWORD *)(a2 + v214);
          if (v215 == -1 || v215 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_159;
          v216 = v215 + 1;
          v217 = *(char *)(*(_QWORD *)(a2 + *v10) + v215);
          *(_QWORD *)(a2 + v214) = v216;
          v99 |= (unint64_t)(v217 & 0x7F) << 42;
          if (v217 < 0)
          {
            v218 = *v3;
            v219 = *(_QWORD *)(a2 + v218);
            if (v219 == -1 || v219 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_159;
            v220 = v219 + 1;
            v221 = *(char *)(*(_QWORD *)(a2 + *v10) + v219);
            *(_QWORD *)(a2 + v218) = v220;
            v99 |= (unint64_t)(v221 & 0x7F) << 49;
            if (v221 < 0)
            {
              v222 = *v3;
              v223 = *(_QWORD *)(a2 + v222);
              if (v223 == -1 || v223 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_159;
              v224 = v223 + 1;
              v225 = *(char *)(*(_QWORD *)(a2 + *v10) + v223);
              *(_QWORD *)(a2 + v222) = v224;
              v99 |= (unint64_t)(v225 & 0x7F) << 56;
              if (v225 < 0)
              {
                v226 = *v3;
                v227 = *(_QWORD *)(a2 + v226);
                if (v227 == -1 || v227 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_159;
                v228 = v227 + 1;
                v229 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v227);
                *(_QWORD *)(a2 + v226) = v228;
                if ((v229 & 0x80) != 0)
                {
                  v99 = 0;
                  goto LABEL_162;
                }
                v99 |= v229 << 63;
              }
            }
          }
        }
LABEL_160:
        if (*(_BYTE *)(a2 + *v8))
          v99 = 0;
LABEL_162:
        *(_BYTE *)(a1 + 61) = v99 != 0;
        goto LABEL_4;
      case 9u:
        *(_BYTE *)(a1 + 64) |= 8u;
        v119 = *v3;
        v120 = *(_QWORD *)(a2 + v119);
        if (v120 == -1 || v120 >= *(_QWORD *)(a2 + *v6))
        {
          v123 = 0;
LABEL_164:
          *(_BYTE *)(a2 + *v8) = 1;
          goto LABEL_165;
        }
        v121 = v120 + 1;
        v122 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v120);
        *(_QWORD *)(a2 + v119) = v121;
        v123 = v122 & 0x7F;
        if ((v122 & 0x80) == 0)
          goto LABEL_165;
        v124 = *v3;
        v125 = *(_QWORD *)(a2 + v124);
        if (v125 == -1 || v125 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_164;
        v126 = v125 + 1;
        v127 = *(char *)(*(_QWORD *)(a2 + *v10) + v125);
        *(_QWORD *)(a2 + v124) = v126;
        v123 |= (unint64_t)(v127 & 0x7F) << 7;
        if ((v127 & 0x80000000) == 0)
          goto LABEL_165;
        v128 = *v3;
        v129 = *(_QWORD *)(a2 + v128);
        if (v129 == -1 || v129 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_164;
        v130 = v129 + 1;
        v131 = *(char *)(*(_QWORD *)(a2 + *v10) + v129);
        *(_QWORD *)(a2 + v128) = v130;
        v123 |= (unint64_t)(v131 & 0x7F) << 14;
        if ((v131 & 0x80000000) == 0)
          goto LABEL_165;
        v132 = *v3;
        v133 = *(_QWORD *)(a2 + v132);
        if (v133 == -1 || v133 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_164;
        v134 = v133 + 1;
        v135 = *(char *)(*(_QWORD *)(a2 + *v10) + v133);
        *(_QWORD *)(a2 + v132) = v134;
        v123 |= (unint64_t)(v135 & 0x7F) << 21;
        if ((v135 & 0x80000000) == 0)
          goto LABEL_165;
        v136 = *v3;
        v137 = *(_QWORD *)(a2 + v136);
        if (v137 == -1 || v137 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_164;
        v138 = v137 + 1;
        v139 = *(char *)(*(_QWORD *)(a2 + *v10) + v137);
        *(_QWORD *)(a2 + v136) = v138;
        v123 |= (unint64_t)(v139 & 0x7F) << 28;
        if ((v139 & 0x80000000) == 0)
          goto LABEL_165;
        v190 = *v3;
        v191 = *(_QWORD *)(a2 + v190);
        if (v191 == -1 || v191 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_164;
        v192 = v191 + 1;
        v193 = *(char *)(*(_QWORD *)(a2 + *v10) + v191);
        *(_QWORD *)(a2 + v190) = v192;
        v123 |= (unint64_t)(v193 & 0x7F) << 35;
        if (v193 < 0)
        {
          v230 = *v3;
          v231 = *(_QWORD *)(a2 + v230);
          if (v231 == -1 || v231 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_164;
          v232 = v231 + 1;
          v233 = *(char *)(*(_QWORD *)(a2 + *v10) + v231);
          *(_QWORD *)(a2 + v230) = v232;
          v123 |= (unint64_t)(v233 & 0x7F) << 42;
          if (v233 < 0)
          {
            v234 = *v3;
            v235 = *(_QWORD *)(a2 + v234);
            if (v235 == -1 || v235 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_164;
            v236 = v235 + 1;
            v237 = *(char *)(*(_QWORD *)(a2 + *v10) + v235);
            *(_QWORD *)(a2 + v234) = v236;
            v123 |= (unint64_t)(v237 & 0x7F) << 49;
            if (v237 < 0)
            {
              v238 = *v3;
              v239 = *(_QWORD *)(a2 + v238);
              if (v239 == -1 || v239 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_164;
              v240 = v239 + 1;
              v241 = *(char *)(*(_QWORD *)(a2 + *v10) + v239);
              *(_QWORD *)(a2 + v238) = v240;
              v123 |= (unint64_t)(v241 & 0x7F) << 56;
              if (v241 < 0)
              {
                v242 = *v3;
                v243 = *(_QWORD *)(a2 + v242);
                if (v243 == -1 || v243 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_164;
                v244 = v243 + 1;
                v245 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v243);
                *(_QWORD *)(a2 + v242) = v244;
                if ((v245 & 0x80) != 0)
                {
                  v123 = 0;
                  goto LABEL_167;
                }
                v123 |= v245 << 63;
              }
            }
          }
        }
LABEL_165:
        if (*(_BYTE *)(a2 + *v8))
          v123 = 0;
LABEL_167:
        *(_BYTE *)(a1 + 62) = v123 != 0;
        goto LABEL_4;
      case 0xAu:
        *(_BYTE *)(a1 + 64) |= 0x10u;
        v54 = *v3;
        v55 = *(_QWORD *)(a2 + v54);
        if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v6))
        {
          v58 = 0;
LABEL_149:
          *(_BYTE *)(a2 + *v8) = 1;
          goto LABEL_150;
        }
        v56 = v55 + 1;
        v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v55);
        *(_QWORD *)(a2 + v54) = v56;
        v58 = v57 & 0x7F;
        if ((v57 & 0x80) == 0)
          goto LABEL_150;
        v59 = *v3;
        v60 = *(_QWORD *)(a2 + v59);
        if (v60 == -1 || v60 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_149;
        v61 = v60 + 1;
        v62 = *(char *)(*(_QWORD *)(a2 + *v10) + v60);
        *(_QWORD *)(a2 + v59) = v61;
        v58 |= (unint64_t)(v62 & 0x7F) << 7;
        if ((v62 & 0x80000000) == 0)
          goto LABEL_150;
        v63 = *v3;
        v64 = *(_QWORD *)(a2 + v63);
        if (v64 == -1 || v64 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_149;
        v65 = v64 + 1;
        v66 = *(char *)(*(_QWORD *)(a2 + *v10) + v64);
        *(_QWORD *)(a2 + v63) = v65;
        v58 |= (unint64_t)(v66 & 0x7F) << 14;
        if ((v66 & 0x80000000) == 0)
          goto LABEL_150;
        v67 = *v3;
        v68 = *(_QWORD *)(a2 + v67);
        if (v68 == -1 || v68 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_149;
        v69 = v68 + 1;
        v70 = *(char *)(*(_QWORD *)(a2 + *v10) + v68);
        *(_QWORD *)(a2 + v67) = v69;
        v58 |= (unint64_t)(v70 & 0x7F) << 21;
        if ((v70 & 0x80000000) == 0)
          goto LABEL_150;
        v71 = *v3;
        v72 = *(_QWORD *)(a2 + v71);
        if (v72 == -1 || v72 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_149;
        v73 = v72 + 1;
        v74 = *(char *)(*(_QWORD *)(a2 + *v10) + v72);
        *(_QWORD *)(a2 + v71) = v73;
        v58 |= (unint64_t)(v74 & 0x7F) << 28;
        if ((v74 & 0x80000000) == 0)
          goto LABEL_150;
        v162 = *v3;
        v163 = *(_QWORD *)(a2 + v162);
        if (v163 == -1 || v163 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_149;
        v164 = v163 + 1;
        v165 = *(char *)(*(_QWORD *)(a2 + *v10) + v163);
        *(_QWORD *)(a2 + v162) = v164;
        v58 |= (unint64_t)(v165 & 0x7F) << 35;
        if (v165 < 0)
        {
          v198 = *v3;
          v199 = *(_QWORD *)(a2 + v198);
          if (v199 == -1 || v199 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_149;
          v200 = v199 + 1;
          v201 = *(char *)(*(_QWORD *)(a2 + *v10) + v199);
          *(_QWORD *)(a2 + v198) = v200;
          v58 |= (unint64_t)(v201 & 0x7F) << 42;
          if (v201 < 0)
          {
            v202 = *v3;
            v203 = *(_QWORD *)(a2 + v202);
            if (v203 == -1 || v203 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_149;
            v204 = v203 + 1;
            v205 = *(char *)(*(_QWORD *)(a2 + *v10) + v203);
            *(_QWORD *)(a2 + v202) = v204;
            v58 |= (unint64_t)(v205 & 0x7F) << 49;
            if (v205 < 0)
            {
              v206 = *v3;
              v207 = *(_QWORD *)(a2 + v206);
              if (v207 == -1 || v207 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_149;
              v208 = v207 + 1;
              v209 = *(char *)(*(_QWORD *)(a2 + *v10) + v207);
              *(_QWORD *)(a2 + v206) = v208;
              v58 |= (unint64_t)(v209 & 0x7F) << 56;
              if (v209 < 0)
              {
                v210 = *v3;
                v211 = *(_QWORD *)(a2 + v210);
                if (v211 == -1 || v211 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_149;
                v212 = v211 + 1;
                v213 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v211);
                *(_QWORD *)(a2 + v210) = v212;
                if ((v213 & 0x80) != 0)
                {
                  v58 = 0;
                  goto LABEL_152;
                }
                v58 |= v213 << 63;
              }
            }
          }
        }
LABEL_150:
        if (*(_BYTE *)(a2 + *v8))
          v58 = 0;
LABEL_152:
        *(_BYTE *)(a1 + 63) = v58 != 0;
        goto LABEL_4;
      case 0xBu:
        *(_BYTE *)(a1 + 64) |= 2u;
        v140 = *v3;
        v141 = *(_QWORD *)(a2 + v140);
        if (v141 == -1 || v141 >= *(_QWORD *)(a2 + *v6))
        {
          v144 = 0;
LABEL_169:
          *(_BYTE *)(a2 + *v8) = 1;
          goto LABEL_170;
        }
        v142 = v141 + 1;
        v143 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v141);
        *(_QWORD *)(a2 + v140) = v142;
        v144 = v143 & 0x7F;
        if ((v143 & 0x80) == 0)
          goto LABEL_170;
        v145 = *v3;
        v146 = *(_QWORD *)(a2 + v145);
        if (v146 == -1 || v146 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_169;
        v147 = v146 + 1;
        v148 = *(char *)(*(_QWORD *)(a2 + *v10) + v146);
        *(_QWORD *)(a2 + v145) = v147;
        v144 |= (unint64_t)(v148 & 0x7F) << 7;
        if ((v148 & 0x80000000) == 0)
          goto LABEL_170;
        v149 = *v3;
        v150 = *(_QWORD *)(a2 + v149);
        if (v150 == -1 || v150 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_169;
        v151 = v150 + 1;
        v152 = *(char *)(*(_QWORD *)(a2 + *v10) + v150);
        *(_QWORD *)(a2 + v149) = v151;
        v144 |= (unint64_t)(v152 & 0x7F) << 14;
        if ((v152 & 0x80000000) == 0)
          goto LABEL_170;
        v153 = *v3;
        v154 = *(_QWORD *)(a2 + v153);
        if (v154 == -1 || v154 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_169;
        v155 = v154 + 1;
        v156 = *(char *)(*(_QWORD *)(a2 + *v10) + v154);
        *(_QWORD *)(a2 + v153) = v155;
        v144 |= (unint64_t)(v156 & 0x7F) << 21;
        if ((v156 & 0x80000000) == 0)
          goto LABEL_170;
        v157 = *v3;
        v158 = *(_QWORD *)(a2 + v157);
        if (v158 == -1 || v158 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_169;
        v159 = v158 + 1;
        v160 = *(char *)(*(_QWORD *)(a2 + *v10) + v158);
        *(_QWORD *)(a2 + v157) = v159;
        v144 |= (unint64_t)(v160 & 0x7F) << 28;
        if ((v160 & 0x80000000) == 0)
          goto LABEL_170;
        v194 = *v3;
        v195 = *(_QWORD *)(a2 + v194);
        if (v195 == -1 || v195 >= *(_QWORD *)(a2 + *v6))
          goto LABEL_169;
        v196 = v195 + 1;
        v197 = *(char *)(*(_QWORD *)(a2 + *v10) + v195);
        *(_QWORD *)(a2 + v194) = v196;
        v144 |= (unint64_t)(v197 & 0x7F) << 35;
        if (v197 < 0)
        {
          v246 = *v3;
          v247 = *(_QWORD *)(a2 + v246);
          if (v247 == -1 || v247 >= *(_QWORD *)(a2 + *v6))
            goto LABEL_169;
          v248 = v247 + 1;
          v249 = *(char *)(*(_QWORD *)(a2 + *v10) + v247);
          *(_QWORD *)(a2 + v246) = v248;
          v144 |= (unint64_t)(v249 & 0x7F) << 42;
          if (v249 < 0)
          {
            v250 = *v3;
            v251 = *(_QWORD *)(a2 + v250);
            if (v251 == -1 || v251 >= *(_QWORD *)(a2 + *v6))
              goto LABEL_169;
            v252 = v251 + 1;
            v253 = *(char *)(*(_QWORD *)(a2 + *v10) + v251);
            *(_QWORD *)(a2 + v250) = v252;
            v144 |= (unint64_t)(v253 & 0x7F) << 49;
            if (v253 < 0)
            {
              v254 = *v3;
              v255 = *(_QWORD *)(a2 + v254);
              if (v255 == -1 || v255 >= *(_QWORD *)(a2 + *v6))
                goto LABEL_169;
              v256 = v255 + 1;
              v257 = *(char *)(*(_QWORD *)(a2 + *v10) + v255);
              *(_QWORD *)(a2 + v254) = v256;
              v144 |= (unint64_t)(v257 & 0x7F) << 56;
              if (v257 < 0)
              {
                v258 = *v3;
                v259 = *(_QWORD *)(a2 + v258);
                if (v259 == -1 || v259 >= *(_QWORD *)(a2 + *v6))
                  goto LABEL_169;
                v260 = v259 + 1;
                v261 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v259);
                *(_QWORD *)(a2 + v258) = v260;
                if ((v261 & 0x80) != 0)
                {
                  v144 = 0;
                  goto LABEL_172;
                }
                v144 |= v261 << 63;
              }
            }
          }
        }
LABEL_170:
        if (*(_BYTE *)(a2 + *v8))
          v144 = 0;
LABEL_172:
        *(_BYTE *)(a1 + 60) = v144 != 0;
        goto LABEL_4;
      default:
        result = PBReaderSkipValueWithTag();
        if (!(_DWORD)result)
          return result;
        goto LABEL_4;
    }
  }
}

BOOL nw_protocol_http_alt_svc_create(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  _OWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  void *v8;
  char v9;
  void *v10;
  id v11;
  _BOOL8 result;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  NSObject *v17;
  void *v18;
  NSObject *v19;
  char *backtrace_string;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  __int16 v28;
  uint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  if (!a4)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_protocol_http_alt_svc_create";
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v13, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_protocol_http_alt_svc_create";
          v16 = "%{public}s called with null parameters";
LABEL_34:
          _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v14 = __nwlog_obj();
        v15 = type;
        v21 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v25 = "nw_protocol_http_alt_svc_create";
            v26 = 2082;
            v27 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_35;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_protocol_http_alt_svc_create";
          v16 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_34;
        }
      }
      else
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_protocol_http_alt_svc_create";
          v16 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_34;
        }
      }
    }
LABEL_35:
    if (v13)
      free(v13);
    return 0;
  }
  v5 = malloc_type_calloc(1uLL, 0x1A0uLL, 0xEAFB8F1AuLL);
  if (v5)
    goto LABEL_3;
  v17 = __nwlog_obj();
  os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v25 = "strict_calloc";
  v26 = 2048;
  v27 = 1;
  v28 = 2048;
  v29 = 416;
  v18 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v18);
  if (!result)
  {
    free(v18);
LABEL_3:
    v5[24] = 0u;
    v5[25] = 0u;
    v5[22] = 0u;
    v5[23] = 0u;
    v5[20] = 0u;
    v5[21] = 0u;
    v5[18] = 0u;
    v5[19] = 0u;
    v5[16] = 0u;
    v5[17] = 0u;
    v5[14] = 0u;
    v5[15] = 0u;
    v5[12] = 0u;
    v5[13] = 0u;
    v5[10] = 0u;
    v5[11] = 0u;
    v5[8] = 0u;
    v5[9] = 0u;
    v5[6] = 0u;
    v5[7] = 0u;
    v5[4] = 0u;
    v5[5] = 0u;
    v5[2] = 0u;
    v5[3] = 0u;
    *v5 = 0u;
    v5[1] = 0u;
    if (gLogDatapath)
    {
      v19 = __nwlog_obj();
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v25 = "nw_protocol_http_alt_svc_create";
        v26 = 2082;
        v27 = (uint64_t)v5 + 114;
        v28 = 2080;
        v29 = (uint64_t)" ";
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    if (nw_protocol_http_alt_svc_identifier::onceToken[0] != -1)
      dispatch_once(nw_protocol_http_alt_svc_identifier::onceToken, &__block_literal_global_70353);
    *((_QWORD *)v5 + 2) = nw_protocol_http_alt_svc_identifier::protocol_identifier;
    if (nw_protocol_http_alt_svc_get_callbacks(void)::onceToken != -1)
      dispatch_once(&nw_protocol_http_alt_svc_get_callbacks(void)::onceToken, &__block_literal_global_15_70354);
    *((_QWORD *)v5 + 3) = &nw_protocol_http_alt_svc_get_callbacks(void)::protocol_callbacks;
    *((_QWORD *)v5 + 5) = v5;
    v6 = a4;
    v7 = v6[12];

    *((_BYTE *)v5 + 408) = *((_BYTE *)v5 + 408) & 0xFE | ((v7 & 0x8000) != 0);
    v8 = os_retain(v6);
    v9 = *((_BYTE *)v5 + 384);
    if ((v9 & 1) != 0)
    {
      v10 = (void *)*((_QWORD *)v5 + 47);
      if (v10)
      {
        os_release(v10);
        v9 = *((_BYTE *)v5 + 384);
      }
    }
    *((_QWORD *)v5 + 25) = 0;
    *((_QWORD *)v5 + 47) = v8;
    *((_BYTE *)v5 + 384) = v9 | 1;
    *((_QWORD *)v5 + 9) = (char *)v5 + 200;
    *((_QWORD *)v5 + 26) = (char *)v5 + 200;
    *((_QWORD *)v5 + 27) = 0;
    *((_QWORD *)v5 + 28) = (char *)v5 + 216;
    *((_QWORD *)v5 + 29) = 0;
    *((_QWORD *)v5 + 30) = (char *)v5 + 232;
    *((_BYTE *)v5 + 340) = 2;
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    v11 = (id)nw_protocol_copy_http_definition_http_definition;
    nw_protocol_plugin_metadata_set_callbacks((uint64_t)v5, v11, (uint64_t)nw_protocol_http_alt_svc_create::$_0::__invoke, (uint64_t)nw_protocol_http_alt_svc_create::$_1::__invoke);
    if (v11)
      os_release(v11);
    *((_QWORD *)v5 + 8) = (char *)v5 + 104;
    nw_protocol_plugin_name_set_callbacks((uint64_t)v5, (uint64_t)nw_protocol_http_alt_svc_create::$_2::__invoke);
    return (BOOL)v5;
  }
  __break(1u);
  return result;
}

void nw_protocol_http_alt_svc_create::$_0::__invoke(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  _BOOL8 v10;
  char *v11;
  void *remote_endpoint;
  NSObject *v13;
  unsigned int port;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  unsigned __int8 *v18;
  void *v19;
  id *v20;
  size_t v21;
  __CFString *v22;
  id v23;
  size_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  const char *v28;
  id v29;
  char *v30;
  unsigned int v31;
  char *v32;
  char *v34;
  int v35;
  int v36;
  char *v37;
  int v38;
  char *v39;
  uint64_t v40;
  __CFString *v41;
  void *v42;
  char *v43;
  void *v44;
  void *v45;
  BOOL v46;
  const char *v47;
  int v48;
  const char *v49;
  const char *v50;
  int v51;
  char *v52;
  int v53;
  char *v54;
  uint64_t v55;
  id v56;
  size_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  int v61;
  int v62;
  void *v63;
  uint64_t v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  const char *v68;
  NSObject *v69;
  uint64_t v70;
  char *backtrace_string;
  _BOOL4 v72;
  char *v73;
  _BOOL4 v74;
  const char *v75;
  _BOOL4 v76;
  _BOOL4 v77;
  _BOOL4 v78;
  id v79;
  uint64_t v80;
  void *v81;
  void *v82;
  void *v83;
  NSObject *v84;
  os_log_type_t v85;
  const char *v86;
  void *v87;
  void *v88;
  char *v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  const char *v93;
  _BOOL4 v94;
  _BOOL4 v95;
  const char *v96;
  __CFString *v97;
  id v98;
  uint64_t v99;
  void *v100;
  NSObject *v101;
  NSObject *v102;
  uint64_t v103;
  const __CFAllocator *alloc;
  char *main_document_url;
  char *cStr;
  id v107;
  id *v108;
  size_t v109;
  char *v110;
  __CFString *v111;
  void *v112;
  os_log_type_t type[8];
  os_log_type_t *v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  os_log_type_t v118;
  _BYTE buf[24];
  void *v120;
  os_log_type_t *v121;
  uint8_t v122[4];
  const char *v123;
  __int16 v124;
  char *v125;
  uint64_t v126;

  v126 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v65 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v122[0] = 0;
    if (!__nwlog_fault(v65, type, v122))
      goto LABEL_178;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v122[0])
      {
        v66 = __nwlog_obj();
        v67 = type[0];
        if (!os_log_type_enabled(v66, type[0]))
          goto LABEL_178;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v68 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_177;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v66 = __nwlog_obj();
      v67 = type[0];
      v72 = os_log_type_enabled(v66, type[0]);
      if (!backtrace_string)
      {
        if (!v72)
          goto LABEL_178;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v68 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_177;
      }
      if (v72)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "operator()";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v66, v67, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_178:
      if (v65)
        goto LABEL_179;
      return;
    }
    v66 = __nwlog_obj();
    v67 = type[0];
    if (!os_log_type_enabled(v66, type[0]))
      goto LABEL_178;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v68 = "%{public}s called with null protocol";
    goto LABEL_177;
  }
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v65 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v122[0] = 0;
    if (!__nwlog_fault(v65, type, v122))
      goto LABEL_178;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v122[0])
      {
        v66 = __nwlog_obj();
        v67 = type[0];
        if (!os_log_type_enabled(v66, type[0]))
          goto LABEL_178;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v68 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_177;
      }
      v73 = (char *)__nw_create_backtrace_string();
      v66 = __nwlog_obj();
      v67 = type[0];
      v74 = os_log_type_enabled(v66, type[0]);
      if (!v73)
      {
        if (!v74)
          goto LABEL_178;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v68 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_177;
      }
      if (!v74)
        goto LABEL_143;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v73;
      v75 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
      goto LABEL_142;
    }
    v66 = __nwlog_obj();
    v67 = type[0];
    if (!os_log_type_enabled(v66, type[0]))
      goto LABEL_178;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v68 = "%{public}s called with null http_alt_svc";
LABEL_177:
    _os_log_impl(&dword_182FBE000, v66, v67, v68, buf, 0xCu);
    goto LABEL_178;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v65 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v122[0] = 0;
    if (!__nwlog_fault(v65, type, v122))
      goto LABEL_178;
    if (type[0] != OS_LOG_TYPE_FAULT)
    {
      if (!v122[0])
      {
        v66 = __nwlog_obj();
        v67 = type[0];
        if (!os_log_type_enabled(v66, type[0]))
          goto LABEL_178;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v68 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_177;
      }
      v73 = (char *)__nw_create_backtrace_string();
      v66 = __nwlog_obj();
      v67 = type[0];
      v76 = os_log_type_enabled(v66, type[0]);
      if (!v73)
      {
        if (!v76)
          goto LABEL_178;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "operator()";
        v68 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_177;
      }
      if (!v76)
        goto LABEL_143;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "operator()";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v73;
      v75 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_142;
    }
    v66 = __nwlog_obj();
    v67 = type[0];
    if (!os_log_type_enabled(v66, type[0]))
      goto LABEL_178;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v68 = "%{public}s called with null other_protocol";
    goto LABEL_177;
  }
  v7 = a3;
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v65 = (char *)_os_log_send_and_compose_impl();
    type[0] = OS_LOG_TYPE_ERROR;
    v122[0] = 0;
    if (!__nwlog_fault(v65, type, v122))
      goto LABEL_178;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      v66 = __nwlog_obj();
      v67 = type[0];
      if (!os_log_type_enabled(v66, type[0]))
        goto LABEL_178;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v68 = "%{public}s called with null metadata";
      goto LABEL_177;
    }
    if (!v122[0])
    {
      v66 = __nwlog_obj();
      v67 = type[0];
      if (!os_log_type_enabled(v66, type[0]))
        goto LABEL_178;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v68 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_177;
    }
    v73 = (char *)__nw_create_backtrace_string();
    v66 = __nwlog_obj();
    v67 = type[0];
    v77 = os_log_type_enabled(v66, type[0]);
    if (!v73)
    {
      if (!v77)
        goto LABEL_178;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "operator()";
      v68 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_177;
    }
    if (!v77)
      goto LABEL_143;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v73;
    v75 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_142:
    _os_log_impl(&dword_182FBE000, v66, v67, v75, buf, 0x16u);
    goto LABEL_143;
  }
  v8 = a5;
  if (a5)
  {
    if (nw_http_metadata_get_type(a3) == 3)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(v8 + 16))(v8, 1, v7);
      return;
    }
    v9 = nw_http_metadata_copy_response(v7);
    v10 = nw_http_fields_copy_value_by_name(v9, (uint64_t)"Alt-Svc");
    if (!v10)
    {
      (*(void (**)(uint64_t, uint64_t, void *))(v8 + 16))(v8, 1, v7);
      if (!v9)
        return;
LABEL_96:
      os_release(v9);
      return;
    }
    v11 = (char *)v10;
    if (!*(_QWORD *)(v6 + 344))
    {
LABEL_95:
      (*(void (**)(uint64_t, uint64_t, void *))(v8 + 16))(v8, 1, v7);
      free(v11);
      if (!v9)
        return;
      goto LABEL_96;
    }
    remote_endpoint = (void *)nw_protocol_get_remote_endpoint(v6);
    if (remote_endpoint)
      v13 = os_retain(remote_endpoint);
    else
      v13 = 0;
    cStr = (char *)nw_endpoint_get_hostname(v13);
    port = nw_endpoint_get_port(v13);
    main_document_url = (char *)nw_parameters_get_main_document_url(*(void **)(v6 + 376));
    *(_QWORD *)type = 0;
    v114 = type;
    v115 = 0x2000000000;
    v116 = 0;
    v15 = *(_QWORD *)(a1 + 32);
    if (v15 && (v16 = *(_QWORD *)(v15 + 24)) != 0 && (v17 = *(uint64_t (**)(void))(v16 + 224)) != 0)
    {
      v18 = (unsigned __int8 *)v17();
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 0x40000000;
      *(_QWORD *)&buf[16] = ___ZZ31nw_protocol_http_alt_svc_createENK3__0clEP11nw_protocolS1_P20nw_protocol_metadatabU13block_pointerFv46nw_protocol_plugin_metadata_processor_result_tS3_E_block_invoke;
      v120 = &unk_1E14A9430;
      v121 = type;
      nw_array_apply(v18, (uint64_t)buf);
      if (v18)
        os_release(v18);
    }
    else if (gLogDatapath)
    {
      v69 = __nwlog_obj();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        v70 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "operator()";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v70;
        _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_DEBUG, "%{public}s output handler %p does not have valid copy_info callback, cannot get TLS metadata", buf, 0x16u);
      }
    }
    v19 = (void *)*((_QWORD *)v114 + 3);
    if (!v19)
    {
LABEL_93:
      _Block_object_dispose(type, 8);
      if (v13)
        os_release(v13);
      goto LABEL_95;
    }
    v20 = (id *)*(id *)(v6 + 344);
    v107 = v19;
    v108 = v20;
    v110 = v11;
    if (v20)
    {
      if (cStr)
      {
        if (port)
        {
          v21 = strlen(v11);
          alloc = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v22 = (__CFString *)CFStringCreateWithCString((CFAllocatorRef)*MEMORY[0x1E0C9AE00], cStr, 0x8000100u);
          if (!strcmp(v11, "clear"))
          {
            objc_msgSend(v108[1], "removeHTTPAlternativeServiceEntriesWithHost:port:", v22, port);
          }
          else
          {
            v97 = v22;
            v98 = v9;
            v100 = v7;
            v101 = v13;
            v99 = v8;
            v23 = objc_alloc_init(MEMORY[0x1E0C92D08]);
            if (v21 != -1)
            {
              v24 = v21;
              v25 = 0;
              v103 = port;
              v26 = 2;
              v27 = MEMORY[0x1E0C80978];
              v28 = v11;
              v29 = v23;
              v109 = v21;
              while (1)
              {
                v30 = &v11[v25];
                v31 = v11[v25];
                if (v31 == 61)
                {
                  *v30 = 0;
                  v32 = (char *)(v28 - 1);
                  do
                  {
                    while (1)
                    {
                      v34 = v32;
                      v35 = v32[1];
                      v36 = v32[1];
                      if ((v35 & 0x80000000) == 0)
                        break;
                      if (!__maskrune(*++v32, 0x4000uLL))
                        goto LABEL_34;
                    }
                    ++v32;
                  }
                  while ((*(_DWORD *)(v27 + 4 * v35 + 60) & 0x4000) != 0);
LABEL_34:
                  if (v36)
                  {
                    v37 = &v34[strlen(v32)];
                    while (1)
                    {
                      v39 = v37;
                      if (v37 <= v32)
                        break;
                      v40 = *v37;
                      if (*v37 < 0)
                      {
                        v38 = __maskrune(v40, 0x4000uLL);
                        v37 = v39 - 1;
                        if (!v38)
                          break;
                      }
                      else
                      {
                        --v37;
                        if ((*(_DWORD *)(v27 + 4 * v40 + 60) & 0x4000) == 0)
                          break;
                      }
                    }
                    v39[1] = 0;
                  }
                  v28 = v30 + 1;
                  if (!strcmp(v32, "h3"))
                  {
                    objc_msgSend(v29, "setServiceType:", 1);
                    v41 = (__CFString *)CFStringCreateWithCString(alloc, cStr, 0x8000100u);
                    objc_msgSend(v29, "setHost:", v41);

                    objc_msgSend(v29, "setPort:", v103);
                    if (main_document_url)
                    {
                      v111 = (__CFString *)CFStringCreateWithCString(alloc, main_document_url, 0x8000100u);
                      objc_msgSend(MEMORY[0x1E0C99E98], "URLWithString:", v111);
                      v42 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v42, "host");
                      v43 = v11;
                      v44 = v29;
                      v45 = (void *)objc_claimAutoreleasedReturnValue();
                      objc_msgSend(v44, "setPartition:", v45);

                      v29 = v44;
                      v11 = v43;

                    }
                    v26 = 0;
                  }
                  else if (!strcmp(v32, "ma"))
                  {
                    v26 = 1;
                  }
                  else
                  {
                    v26 = 2;
                  }
                }
                v46 = v31 > 0x3B || ((1 << v31) & 0x800100000000001) == 0;
                if (v46)
                  goto LABEL_28;
                v112 = v29;
                *v30 = 0;
                v47 = v28 - 1;
                do
                {
                  v49 = v28;
                  v50 = v47;
                  v51 = *(unsigned __int8 *)v28;
                  if (*v28 < 0)
                    v48 = __maskrune(*(unsigned __int8 *)v28, 0x4000uLL);
                  else
                    v48 = *(_DWORD *)(v27 + 4 * *(unsigned __int8 *)v28 + 60) & 0x4000;
                  ++v28;
                  ++v47;
                }
                while (v48);
                if (v51)
                {
                  v52 = (char *)&v50[strlen(v49)];
                  while (1)
                  {
                    v54 = v52;
                    if (v52 <= v49)
                      break;
                    v55 = *v52;
                    if (*v52 < 0)
                    {
                      v53 = __maskrune(v55, 0x4000uLL);
                      v52 = v54 - 1;
                      if (!v53)
                        break;
                    }
                    else
                    {
                      --v52;
                      if ((*(_DWORD *)(v27 + 4 * v55 + 60) & 0x4000) == 0)
                        break;
                    }
                  }
                  v54[1] = 0;
                }
                if (v26 == 1)
                {
                  v61 = atoi(v49);
                  if (v61 >= 604800)
                    v62 = 604800;
                  else
                    v62 = v61;
                  objc_msgSend(MEMORY[0x1E0C99D68], "dateWithTimeIntervalSinceNow:", (double)v62);
                  v56 = (id)objc_claimAutoreleasedReturnValue();
                  objc_msgSend(v112, "setExpirationDate:", v56);
                  v11 = v110;
                }
                else
                {
                  v11 = v110;
                  if (v26)
                    goto LABEL_81;
                  v56 = v112;
                  v57 = strlen(v49);
                  if (v57 >= 2 && *v49 == 34 && v49[v57 - 1] == 34)
                  {
                    if (v57 == -1)
                    {
LABEL_73:
                      v58 = 0;
                    }
                    else
                    {
                      v58 = 0;
                      while (v47[v58] != 58)
                      {
                        if (v57 + 1 == ++v58)
                          goto LABEL_73;
                      }
                    }
                    v49[v58] = 0;
                    v59 = &v49[v58 + 1];
                    v49[v57 - 1] = 0;
                    if (*v28)
                    {
                      v60 = (uint64_t)CFStringCreateWithCString(alloc, v49 + 1, 0x8000100u);
                    }
                    else
                    {
                      objc_msgSend(v56, "host");
                      v60 = objc_claimAutoreleasedReturnValue();
                    }
                    v63 = (void *)v60;
                    objc_msgSend(v56, "setAlternateHost:", v60);

                    if (*v59)
                      v64 = atoi(v59);
                    else
                      v64 = objc_msgSend(v56, "port");
                    objc_msgSend(v56, "setAlternatePort:", v64);
                  }
                }

LABEL_81:
                v28 = v30 + 1;
                if (v31 == 44)
                {
                  check_certs_and_store_entry(v108, v112, v107);
                  v29 = objc_alloc_init(MEMORY[0x1E0C92D08]);

                  v26 = 2;
                  v24 = v109;
                }
                else
                {
                  v26 = 2;
                  v24 = v109;
                  v29 = v112;
                }
LABEL_28:
                v46 = v25++ == v24;
                if (v46)
                  goto LABEL_90;
              }
            }
            v29 = v23;
LABEL_90:
            check_certs_and_store_entry(v108, v29, v107);

            v8 = v99;
            v7 = v100;
            v22 = v97;
            v9 = v98;
            v13 = v101;
          }

          goto LABEL_92;
        }
        v102 = v13;
        v79 = v9;
        v80 = v8;
        v81 = v7;
        __nwlog_obj();
        v88 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v122 = 136446210;
        v123 = "nw_http_alt_svc_parse_and_set";
        v83 = (void *)_os_log_send_and_compose_impl();

        v118 = OS_LOG_TYPE_ERROR;
        v117 = 0;
        if (!__nwlog_fault((const char *)v83, &v118, &v117))
        {
LABEL_203:
          if (!v83)
          {
LABEL_205:
            v7 = v81;
            v8 = v80;
            v9 = v79;
            v11 = v110;
            v13 = v102;
LABEL_92:

            goto LABEL_93;
          }
LABEL_204:
          free(v83);
          goto LABEL_205;
        }
        if (v118 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v84 = objc_claimAutoreleasedReturnValue();
          v85 = v118;
          if (os_log_type_enabled(v84, v118))
          {
            *(_DWORD *)v122 = 136446210;
            v123 = "nw_http_alt_svc_parse_and_set";
            v86 = "%{public}s called with null port";
            goto LABEL_201;
          }
LABEL_202:

          goto LABEL_203;
        }
        if (!v117)
        {
          __nwlog_obj();
          v84 = objc_claimAutoreleasedReturnValue();
          v85 = v118;
          if (os_log_type_enabled(v84, v118))
          {
            *(_DWORD *)v122 = 136446210;
            v123 = "nw_http_alt_svc_parse_and_set";
            v86 = "%{public}s called with null port, backtrace limit exceeded";
            goto LABEL_201;
          }
          goto LABEL_202;
        }
        v89 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v90 = objc_claimAutoreleasedReturnValue();
        v91 = v118;
        v95 = os_log_type_enabled(v90, v118);
        if (v89)
        {
          if (!v95)
            goto LABEL_193;
          *(_DWORD *)v122 = 136446466;
          v123 = "nw_http_alt_svc_parse_and_set";
          v124 = 2082;
          v125 = v89;
          v93 = "%{public}s called with null port, dumping backtrace:%{public}s";
LABEL_192:
          _os_log_impl(&dword_182FBE000, v90, v91, v93, v122, 0x16u);
LABEL_193:

          free(v89);
          if (!v83)
            goto LABEL_205;
          goto LABEL_204;
        }
        if (v95)
        {
          *(_DWORD *)v122 = 136446210;
          v123 = "nw_http_alt_svc_parse_and_set";
          v96 = "%{public}s called with null port, no backtrace";
          goto LABEL_212;
        }
LABEL_213:

        if (!v83)
          goto LABEL_205;
        goto LABEL_204;
      }
      v102 = v13;
      v79 = v9;
      v80 = v8;
      v81 = v7;
      __nwlog_obj();
      v87 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v122 = 136446210;
      v123 = "nw_http_alt_svc_parse_and_set";
      v83 = (void *)_os_log_send_and_compose_impl();

      v118 = OS_LOG_TYPE_ERROR;
      v117 = 0;
      if (!__nwlog_fault((const char *)v83, &v118, &v117))
        goto LABEL_203;
      if (v118 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v84 = objc_claimAutoreleasedReturnValue();
        v85 = v118;
        if (!os_log_type_enabled(v84, v118))
          goto LABEL_202;
        *(_DWORD *)v122 = 136446210;
        v123 = "nw_http_alt_svc_parse_and_set";
        v86 = "%{public}s called with null hostname";
        goto LABEL_201;
      }
      if (!v117)
      {
        __nwlog_obj();
        v84 = objc_claimAutoreleasedReturnValue();
        v85 = v118;
        if (os_log_type_enabled(v84, v118))
        {
          *(_DWORD *)v122 = 136446210;
          v123 = "nw_http_alt_svc_parse_and_set";
          v86 = "%{public}s called with null hostname, backtrace limit exceeded";
          goto LABEL_201;
        }
        goto LABEL_202;
      }
      v89 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v90 = objc_claimAutoreleasedReturnValue();
      v91 = v118;
      v94 = os_log_type_enabled(v90, v118);
      if (v89)
      {
        if (!v94)
          goto LABEL_193;
        *(_DWORD *)v122 = 136446466;
        v123 = "nw_http_alt_svc_parse_and_set";
        v124 = 2082;
        v125 = v89;
        v93 = "%{public}s called with null hostname, dumping backtrace:%{public}s";
        goto LABEL_192;
      }
      if (!v94)
        goto LABEL_213;
      *(_DWORD *)v122 = 136446210;
      v123 = "nw_http_alt_svc_parse_and_set";
      v96 = "%{public}s called with null hostname, no backtrace";
    }
    else
    {
      v102 = v13;
      v79 = v9;
      v80 = v8;
      v81 = v7;
      __nwlog_obj();
      v82 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v122 = 136446210;
      v123 = "nw_http_alt_svc_parse_and_set";
      v83 = (void *)_os_log_send_and_compose_impl();

      v118 = OS_LOG_TYPE_ERROR;
      v117 = 0;
      if (!__nwlog_fault((const char *)v83, &v118, &v117))
        goto LABEL_203;
      if (v118 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v84 = objc_claimAutoreleasedReturnValue();
        v85 = v118;
        if (!os_log_type_enabled(v84, v118))
          goto LABEL_202;
        *(_DWORD *)v122 = 136446210;
        v123 = "nw_http_alt_svc_parse_and_set";
        v86 = "%{public}s called with null storage";
LABEL_201:
        _os_log_impl(&dword_182FBE000, v84, v85, v86, v122, 0xCu);
        goto LABEL_202;
      }
      if (!v117)
      {
        __nwlog_obj();
        v84 = objc_claimAutoreleasedReturnValue();
        v85 = v118;
        if (os_log_type_enabled(v84, v118))
        {
          *(_DWORD *)v122 = 136446210;
          v123 = "nw_http_alt_svc_parse_and_set";
          v86 = "%{public}s called with null storage, backtrace limit exceeded";
          goto LABEL_201;
        }
        goto LABEL_202;
      }
      v89 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v90 = objc_claimAutoreleasedReturnValue();
      v91 = v118;
      v92 = os_log_type_enabled(v90, v118);
      if (v89)
      {
        if (!v92)
          goto LABEL_193;
        *(_DWORD *)v122 = 136446466;
        v123 = "nw_http_alt_svc_parse_and_set";
        v124 = 2082;
        v125 = v89;
        v93 = "%{public}s called with null storage, dumping backtrace:%{public}s";
        goto LABEL_192;
      }
      if (!v92)
        goto LABEL_213;
      *(_DWORD *)v122 = 136446210;
      v123 = "nw_http_alt_svc_parse_and_set";
      v96 = "%{public}s called with null storage, no backtrace";
    }
LABEL_212:
    _os_log_impl(&dword_182FBE000, v90, v91, v96, v122, 0xCu);
    goto LABEL_213;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "operator()";
  v65 = (char *)_os_log_send_and_compose_impl();
  type[0] = OS_LOG_TYPE_ERROR;
  v122[0] = 0;
  if (!__nwlog_fault(v65, type, v122))
    goto LABEL_178;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    v66 = __nwlog_obj();
    v67 = type[0];
    if (!os_log_type_enabled(v66, type[0]))
      goto LABEL_178;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v68 = "%{public}s called with null completion";
    goto LABEL_177;
  }
  if (!v122[0])
  {
    v66 = __nwlog_obj();
    v67 = type[0];
    if (!os_log_type_enabled(v66, type[0]))
      goto LABEL_178;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v68 = "%{public}s called with null completion, backtrace limit exceeded";
    goto LABEL_177;
  }
  v73 = (char *)__nw_create_backtrace_string();
  v66 = __nwlog_obj();
  v67 = type[0];
  v78 = os_log_type_enabled(v66, type[0]);
  if (!v73)
  {
    if (!v78)
      goto LABEL_178;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "operator()";
    v68 = "%{public}s called with null completion, no backtrace";
    goto LABEL_177;
  }
  if (v78)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "operator()";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v73;
    v75 = "%{public}s called with null completion, dumping backtrace:%{public}s";
    goto LABEL_142;
  }
LABEL_143:
  free(v73);
  if (v65)
LABEL_179:
    free(v65);
}

void nw_protocol_http_alt_svc_create::$_1::__invoke(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_59;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_58;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (!backtrace_string)
      {
        if (!v10)
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_58;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "operator()";
        v20 = 2082;
        v21 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(backtrace_string);
LABEL_59:
      if (!v5)
        return;
      goto LABEL_60;
    }
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null protocol";
    goto LABEL_58;
  }
  if (!*(_QWORD *)(a1 + 40))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_59;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_58;
      }
      v11 = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v12 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v12)
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v19 = "operator()";
        v8 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_58;
      }
      if (!v12)
        goto LABEL_40;
      *(_DWORD *)buf = 136446466;
      v19 = "operator()";
      v20 = 2082;
      v21 = v11;
      v13 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
      goto LABEL_39;
    }
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null http_alt_svc";
LABEL_58:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_59;
  }
  if (!a3)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v19 = "operator()";
      v8 = "%{public}s called with null metadata";
      goto LABEL_58;
    }
    if (!v16)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v19 = "operator()";
      v8 = "%{public}s called with null metadata, backtrace limit exceeded";
      goto LABEL_58;
    }
    v11 = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v14 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v14)
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v19 = "operator()";
      v8 = "%{public}s called with null metadata, no backtrace";
      goto LABEL_58;
    }
    if (!v14)
      goto LABEL_40;
    *(_DWORD *)buf = 136446466;
    v19 = "operator()";
    v20 = 2082;
    v21 = v11;
    v13 = "%{public}s called with null metadata, dumping backtrace:%{public}s";
LABEL_39:
    _os_log_impl(&dword_182FBE000, v6, v7, v13, buf, 0x16u);
    goto LABEL_40;
  }
  if (a5)
  {
    (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, 1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "operator()";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v5, &type, &v16))
    goto LABEL_59;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null completion";
    goto LABEL_58;
  }
  if (!v16)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null completion, backtrace limit exceeded";
    goto LABEL_58;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = type;
  v15 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v15)
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v19 = "operator()";
    v8 = "%{public}s called with null completion, no backtrace";
    goto LABEL_58;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v19 = "operator()";
    v20 = 2082;
    v21 = v11;
    v13 = "%{public}s called with null completion, dumping backtrace:%{public}s";
    goto LABEL_39;
  }
LABEL_40:
  free(v11);
  if (v5)
LABEL_60:
    free(v5);
}

uint64_t nw_protocol_http_alt_svc_create::$_2::__invoke(nw_protocol_http_alt_svc_create::$_2 *this, nw_protocol *a2, nw_protocol *a3)
{
  return 1;
}

BOOL ___ZZ31nw_protocol_http_alt_svc_createENK3__0clEP11nw_protocolS1_P20nw_protocol_metadatabU13block_pointerFv46nw_protocol_plugin_metadata_processor_result_tS3_E_block_invoke(uint64_t a1, int a2, nw_protocol_metadata_t metadata)
{
  _BOOL4 is_tls;

  is_tls = nw_protocol_metadata_is_tls(metadata);
  if (is_tls)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = metadata;
  return !is_tls;
}

void ___ZL38nw_protocol_http_alt_svc_get_callbacksv_block_invoke()
{
  qword_1EDCE4240 = (uint64_t)nw_protocol_common_get_input_frames;
  unk_1EDCE4248 = nw_protocol_common_get_output_frames;
  qword_1EDCE4260 = (uint64_t)nw_protocol_common_get_parameters;
  unk_1EDCE4268 = nw_protocol_common_get_path;
  qword_1EDCE4210 = (uint64_t)nw_protocol_common_disconnect;
  unk_1EDCE4218 = nw_protocol_common_connected;
  qword_1EDCE4230 = (uint64_t)nw_protocol_common_input_available;
  unk_1EDCE4238 = nw_protocol_common_output_available;
  qword_1EDCE42B0 = (uint64_t)nw_protocol_common_output_finished;
  unk_1EDCE42B8 = nw_protocol_common_get_output_local_endpoint;
  qword_1EDCE42F8 = (uint64_t)nw_protocol_common_input_flush;
  qword_1EDCE4220 = (uint64_t)nw_protocol_common_disconnected;
  unk_1EDCE4228 = nw_protocol_common_error;
  qword_1EDCE42E8 = (uint64_t)nw_protocol_common_get_message_properties;
  unk_1EDCE42F0 = nw_protocol_common_reset;
  qword_1EDCE42A0 = (uint64_t)nw_protocol_common_supports_external_data;
  unk_1EDCE42A8 = nw_protocol_common_input_finished;
  qword_1EDCE42C0 = (uint64_t)nw_protocol_common_get_output_interface;
  unk_1EDCE42C8 = nw_protocol_common_waiting_for_output;
  qword_1EDCE4280 = (uint64_t)nw_protocol_common_register_notification;
  unk_1EDCE4288 = nw_protocol_common_unregister_notification;
  qword_1EDCE4290 = (uint64_t)nw_protocol_common_notify;
  unk_1EDCE4298 = nw_protocol_common_updated_path;
  qword_1EDCE4250 = (uint64_t)nw_protocol_common_finalize_output_frames;
  unk_1EDCE4258 = nw_protocol_common_link_state;
  qword_1EDCE4200 = (uint64_t)nw_protocol_common_replace_input_handler;
  unk_1EDCE4208 = nw_protocol_http_alt_svc_connect;
  qword_1EDCE4270 = (uint64_t)nw_protocol_common_get_local_endpoint;
  unk_1EDCE4278 = nw_protocol_http_alt_svc_get_remote_endpoint;
  nw_protocol_http_alt_svc_get_callbacks(void)::protocol_callbacks = (uint64_t)nw_protocol_common_add_input_handler;
  *(_QWORD *)algn_1EDCE41F8 = nw_protocol_http_alt_svc_remove_input_handler;
  qword_1EDCE42D0 = (uint64_t)nw_protocol_http_alt_svc_copy_info;
}

uint64_t nw_protocol_http_alt_svc_connect(nw_protocol *a1, nw_protocol *a2)
{
  char *handle;
  void *remote_endpoint;
  void *parameters;
  id v6;
  unsigned __int8 *v7;
  NSObject *v8;
  BOOL is_equal;
  id v10;
  char v11;
  void *v12;
  const char *hostname;
  unsigned int port;
  _QWORD *v15;
  id v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  void *v23;
  void *v24;
  uint64_t v25;
  unsigned __int16 v26;
  NSObject *v27;
  NSObject *v28;
  BOOL v29;
  _BOOL4 v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  char v35;
  void *v36;
  uint64_t output_handler;
  uint64_t v38;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  const char *v43;
  char *v44;
  NSObject *v45;
  os_log_type_t v46;
  const char *v47;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  NSObject *v52;
  int v53;
  void *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  void *v58;
  os_log_type_t v59;
  char *backtrace_string;
  _BOOL4 v61;
  const char *v62;
  _BOOL4 v63;
  _BOOL4 v64;
  char *v65;
  _BOOL4 v66;
  char *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  void *v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  NSObject *v74;
  char *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  char *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  os_log_type_t v81;
  char *v82;
  os_log_type_t v83;
  _BOOL4 v84;
  os_log_type_t v85;
  os_log_type_t v86;
  os_log_type_t v87;
  _BYTE *v88;
  uint64_t v89;
  id *v90;
  nw_protocol *v91;
  NSObject *object;
  _QWORD v93[2];
  void (*v94)(uint64_t, const char *, unsigned int);
  void *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  void (*v106)(uint64_t);
  void *v107;
  char v108;
  char v109;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v112)(uint64_t, uint64_t);
  uint8_t *v113;
  id v114;
  uint8_t v115[32];
  __int128 v116;
  __int128 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
    v40 = (char *)_os_log_send_and_compose_impl();
    v115[0] = 16;
    LOBYTE(v102) = 0;
    if (!__nwlog_fault(v40, v115, &v102))
      goto LABEL_156;
    if (v115[0] == 17)
    {
      v41 = __nwlog_obj();
      v42 = v115[0];
      if (!os_log_type_enabled(v41, (os_log_type_t)v115[0]))
        goto LABEL_156;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
      v43 = "%{public}s called with null protocol";
LABEL_155:
      _os_log_impl(&dword_182FBE000, v41, v42, v43, buf, 0xCu);
      goto LABEL_156;
    }
    if (!(_BYTE)v102)
    {
      v41 = __nwlog_obj();
      v42 = v115[0];
      if (os_log_type_enabled(v41, (os_log_type_t)v115[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
        v43 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v41 = __nwlog_obj();
    v42 = v115[0];
    v61 = os_log_type_enabled(v41, (os_log_type_t)v115[0]);
    if (!backtrace_string)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
        v43 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    if (!v61)
      goto LABEL_104;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v62 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_103:
    _os_log_impl(&dword_182FBE000, v41, v42, v62, buf, 0x16u);
    goto LABEL_104;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
    v40 = (char *)_os_log_send_and_compose_impl();
    v115[0] = 16;
    LOBYTE(v102) = 0;
    if (!__nwlog_fault(v40, v115, &v102))
      goto LABEL_156;
    if (v115[0] == 17)
    {
      v41 = __nwlog_obj();
      v42 = v115[0];
      if (!os_log_type_enabled(v41, (os_log_type_t)v115[0]))
        goto LABEL_156;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
      v43 = "%{public}s called with null http_alt_svc";
      goto LABEL_155;
    }
    if (!(_BYTE)v102)
    {
      v41 = __nwlog_obj();
      v42 = v115[0];
      if (os_log_type_enabled(v41, (os_log_type_t)v115[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
        v43 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v41 = __nwlog_obj();
    v42 = v115[0];
    v63 = os_log_type_enabled(v41, (os_log_type_t)v115[0]);
    if (!backtrace_string)
    {
      if (v63)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
        v43 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    if (!v63)
      goto LABEL_104;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v62 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
    goto LABEL_103;
  }
  if (a2)
  {
    v102 = 0;
    v103 = &v102;
    v104 = 0x3802000000;
    v105 = __Block_byref_object_copy__70470;
    v106 = __Block_byref_object_dispose__70471;
    remote_endpoint = (void *)nw_protocol_get_remote_endpoint((uint64_t)a1->default_input_handler);
    v107 = nw_endpoint_copy(remote_endpoint);
    v108 |= 1u;
    parameters = (void *)nw_protocol_get_parameters((uint64_t)a1->default_input_handler);
    if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72702);
    v6 = (id)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;
    v7 = nw_parameters_copy_protocol_options_for_definition(parameters, v6);
    if (v6)
      os_release(v6);
    if (v7)
    {
      object = v7;
      v8 = nw_protocol_options_copy_definition(object);
      v91 = a1;
      if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72702);
      is_equal = nw_protocol_definition_is_equal(v8, (nw_protocol_definition_t)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);

      if (is_equal)
      {
        *(_QWORD *)buf = 0;
        *(_QWORD *)&buf[8] = buf;
        *(_QWORD *)&buf[16] = 0x3032000000;
        v112 = __Block_byref_object_copy__4;
        v113 = (uint8_t *)__Block_byref_object_dispose__5;
        v114 = 0;
        *(_QWORD *)v115 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v115[8] = 3221225472;
        *(_QWORD *)&v115[16] = __nw_http_alt_svc_options_copy_alt_svc_storage_block_invoke;
        *(_QWORD *)&v115[24] = &unk_1E14A9D68;
        *(_QWORD *)&v116 = buf;
        nw_protocol_options_access_handle(object, v115);
        v10 = *(id *)(*(_QWORD *)&buf[8] + 40);
        _Block_object_dispose(buf, 8);

        goto LABEL_13;
      }
      __nwlog_obj();
      v48 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
      LODWORD(v89) = 12;
      v88 = buf;
      v49 = (char *)_os_log_send_and_compose_impl();

      v115[0] = 16;
      LOBYTE(v98) = 0;
      if (__nwlog_fault(v49, v115, &v98))
      {
        if (v115[0] == 17)
        {
          __nwlog_obj();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = v115[0];
          if (os_log_type_enabled(v50, (os_log_type_t)v115[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
            _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s protocol options are not http_alt_svc", buf, 0xCu);
          }
        }
        else if ((_BYTE)v98)
        {
          v67 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v50 = objc_claimAutoreleasedReturnValue();
          v68 = v115[0];
          v69 = os_log_type_enabled(v50, (os_log_type_t)v115[0]);
          if (v67)
          {
            if (v69)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v67;
              _os_log_impl(&dword_182FBE000, v50, v68, "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v67);
            goto LABEL_168;
          }
          if (v69)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
            _os_log_impl(&dword_182FBE000, v50, v68, "%{public}s protocol options are not http_alt_svc, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v50 = objc_claimAutoreleasedReturnValue();
          v81 = v115[0];
          if (os_log_type_enabled(v50, (os_log_type_t)v115[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_http_alt_svc_options_copy_alt_svc_storage";
            _os_log_impl(&dword_182FBE000, v50, v81, "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_168:
      if (v49)
        free(v49);
      v10 = 0;
LABEL_13:

      v11 = handle[352];
      if ((v11 & 1) != 0)
      {
        v12 = (void *)*((_QWORD *)handle + 43);
        if (v12)
        {
          os_release(v12);
          v11 = handle[352];
        }
      }
      *((_QWORD *)handle + 43) = v10;
      handle[352] = v11 | 1;
      v98 = 0;
      v99 = &v98;
      v100 = 0x2000000000;
      v101 = 0;
      if (!v10)
      {
LABEL_28:
        if ((handle[198] & 1) == 0)
        {
          if (gLogDatapath)
          {
            v52 = __nwlog_obj();
            if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
            {
              v53 = *((unsigned __int8 *)v99 + 24);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = handle + 114;
              *(_WORD *)&buf[22] = 2080;
              v112 = (uint64_t (*)(uint64_t, uint64_t))" ";
              LOWORD(v113) = 1024;
              *(_DWORD *)((char *)&v113 + 2) = v53;
              _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sfound alternative %{BOOL}d", buf, 0x26u);
            }
          }
        }
        if (*((_BYTE *)v99 + 24))
        {
LABEL_43:
          v33 = nw_parameters_copy_context(*((void **)handle + 47));
          v34 = nw_context_copy_registered_endpoint(v33, (void *)v103[5]);
          v35 = handle[368];
          if ((v35 & 1) != 0)
          {
            v36 = (void *)*((_QWORD *)handle + 45);
            if (v36)
            {
              os_release(v36);
              v35 = handle[368];
            }
          }
          *((_QWORD *)handle + 45) = v34;
          handle[368] = v35 | 1;
          output_handler = (uint64_t)v91->output_handler;
          if (output_handler)
          {
            v38 = nw_protocol_connect(output_handler, (uint64_t)v91);
            if (!v33)
            {
LABEL_49:
              _Block_object_dispose(&v98, 8);
              os_release(object);
LABEL_50:
              _Block_object_dispose(&v102, 8);
              if ((v108 & 1) != 0 && v107)
                os_release(v107);
              return v38;
            }
          }
          else
          {
            if ((handle[198] & 1) == 0)
            {
              if (gLogDatapath)
              {
                v74 = __nwlog_obj();
                if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = handle + 114;
                  *(_WORD *)&buf[22] = 2080;
                  v112 = (uint64_t (*)(uint64_t, uint64_t))" ";
                  _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sconnect bottom protocol, resuming child handler", buf, 0x20u);
                }
              }
            }
            buf[0] = 0;
            v38 = 1;
            nw_protocol_notify(*((_QWORD **)handle + 6), (uint64_t)handle, 23);
            if (!v33)
              goto LABEL_49;
          }
          os_release(v33);
          goto LABEL_49;
        }
        v27 = object;
        v28 = nw_protocol_options_copy_definition(v27);
        if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1)
          dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72702);
        v29 = nw_protocol_definition_is_equal(v28, (nw_protocol_definition_t)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);

        if (v29)
        {
          *(_QWORD *)v115 = 0;
          *(_QWORD *)&v115[8] = v115;
          *(_QWORD *)&v115[16] = 0x2020000000;
          v115[24] = 0;
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = __nw_http_alt_svc_options_get_assumes_http3_capable_block_invoke;
          v112 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E14A9D68;
          v113 = v115;
          nw_protocol_options_access_handle(v27, buf);
          v30 = *(_BYTE *)(*(_QWORD *)&v115[8] + 24) == 0;
          _Block_object_dispose(v115, 8);

          if (!v30)
            goto LABEL_43;
          goto LABEL_35;
        }
        __nwlog_obj();
        v70 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)v115 = 136446210;
        *(_QWORD *)&v115[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
        v71 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v109 = 0;
        if (__nwlog_fault(v71, &type, &v109))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v72 = objc_claimAutoreleasedReturnValue();
            v73 = type;
            if (os_log_type_enabled(v72, type))
            {
              *(_DWORD *)v115 = 136446210;
              *(_QWORD *)&v115[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
              _os_log_impl(&dword_182FBE000, v72, v73, "%{public}s protocol options are not http_alt_svc", v115, 0xCu);
            }
          }
          else if (v109)
          {
            v82 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v72 = objc_claimAutoreleasedReturnValue();
            v83 = type;
            v84 = os_log_type_enabled(v72, type);
            if (v82)
            {
              if (v84)
              {
                *(_DWORD *)v115 = 136446466;
                *(_QWORD *)&v115[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
                *(_WORD *)&v115[12] = 2082;
                *(_QWORD *)&v115[14] = v82;
                _os_log_impl(&dword_182FBE000, v72, v83, "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s", v115, 0x16u);
              }

              free(v82);
              goto LABEL_191;
            }
            if (v84)
            {
              *(_DWORD *)v115 = 136446210;
              *(_QWORD *)&v115[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
              _os_log_impl(&dword_182FBE000, v72, v83, "%{public}s protocol options are not http_alt_svc, no backtrace", v115, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v72 = objc_claimAutoreleasedReturnValue();
            v87 = type;
            if (os_log_type_enabled(v72, type))
            {
              *(_DWORD *)v115 = 136446210;
              *(_QWORD *)&v115[4] = "nw_http_alt_svc_options_get_assumes_http3_capable";
              _os_log_impl(&dword_182FBE000, v72, v87, "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded", v115, 0xCu);
            }
          }

        }
LABEL_191:
        if (v71)
          free(v71);

LABEL_35:
        if (nw_get_http3_override_onceToken != -1)
          dispatch_once(&nw_get_http3_override_onceToken, &__block_literal_global_8_72633);
        if (nw_get_http3_override_value != 1 && nw_get_http3_override_value != 2)
        {
          v31 = (void *)v103[5];
          if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
            dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
          v32 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
          nw_endpoint_add_alternative(v31, &__block_literal_global_6232, v32);
          if (v32)
            os_release(v32);
        }
        goto LABEL_43;
      }
      hostname = nw_endpoint_get_hostname((nw_endpoint_t)v103[5]);
      port = nw_endpoint_get_port((nw_endpoint_t)v103[5]);
      v93[0] = MEMORY[0x1E0C809B0];
      v93[1] = 0x40000000;
      v94 = ___ZL32nw_protocol_http_alt_svc_connectP11nw_protocolS0__block_invoke;
      v95 = &unk_1E14A9498;
      v96 = &v102;
      v97 = &v98;
      v90 = (id *)v10;
      v15 = v93;
      if (hostname)
      {
        if (port)
        {
          v16 = objc_alloc_init(MEMORY[0x1E0C92D10]);
          objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", hostname);
          v17 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend(v16, "setHost:", v17);

          objc_msgSend(v16, "setPort:", port);
          objc_msgSend(v90[1], "HTTPServiceEntriesWithFilter:", v16);
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          memset(v115, 0, sizeof(v115));
          v116 = 0u;
          v117 = 0u;
          v19 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", v115, buf, 16);
          if (v19)
          {
            v20 = v19;
            v21 = **(_QWORD **)&v115[16];
            do
            {
              for (i = 0; i != v20; ++i)
              {
                if (**(_QWORD **)&v115[16] != v21)
                  objc_enumerationMutation(v18);
                v23 = *(void **)(*(_QWORD *)&v115[8] + 8 * i);
                objc_msgSend(v23, "alternateHost", v88, v89);
                v24 = (void *)objc_claimAutoreleasedReturnValue();
                v25 = objc_msgSend(v24, "UTF8String");
                v26 = objc_msgSend(v23, "alternatePort");
                v94((uint64_t)v15, (const char *)v25, v26);

              }
              v20 = objc_msgSend(v18, "countByEnumeratingWithState:objects:count:", v115, buf, 16);
            }
            while (v20);
          }

          goto LABEL_27;
        }
        __nwlog_obj();
        v58 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
        v55 = (char *)_os_log_send_and_compose_impl();

        v115[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v55, v115, &type))
        {
          if (v115[0] == 17)
          {
            __nwlog_obj();
            v56 = objc_claimAutoreleasedReturnValue();
            v59 = v115[0];
            if (os_log_type_enabled(v56, (os_log_type_t)v115[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
              _os_log_impl(&dword_182FBE000, v56, v59, "%{public}s called with null port", buf, 0xCu);
            }
          }
          else if (type)
          {
            v78 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v56 = objc_claimAutoreleasedReturnValue();
            v79 = v115[0];
            v80 = os_log_type_enabled(v56, (os_log_type_t)v115[0]);
            if (v78)
            {
              if (v80)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v78;
                _os_log_impl(&dword_182FBE000, v56, v79, "%{public}s called with null port, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v78);
              if (!v55)
                goto LABEL_27;
              goto LABEL_184;
            }
            if (v80)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
              _os_log_impl(&dword_182FBE000, v56, v79, "%{public}s called with null port, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v56 = objc_claimAutoreleasedReturnValue();
            v86 = v115[0];
            if (os_log_type_enabled(v56, (os_log_type_t)v115[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
              _os_log_impl(&dword_182FBE000, v56, v86, "%{public}s called with null port, backtrace limit exceeded", buf, 0xCu);
            }
          }
          goto LABEL_182;
        }
LABEL_183:
        if (!v55)
        {
LABEL_27:

          goto LABEL_28;
        }
LABEL_184:
        free(v55);
        goto LABEL_27;
      }
      __nwlog_obj();
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
      v55 = (char *)_os_log_send_and_compose_impl();

      v115[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v55, v115, &type))
        goto LABEL_183;
      if (v115[0] == 17)
      {
        __nwlog_obj();
        v56 = objc_claimAutoreleasedReturnValue();
        v57 = v115[0];
        if (os_log_type_enabled(v56, (os_log_type_t)v115[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
          _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null hostname", buf, 0xCu);
        }
      }
      else if (type)
      {
        v75 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v56 = objc_claimAutoreleasedReturnValue();
        v76 = v115[0];
        v77 = os_log_type_enabled(v56, (os_log_type_t)v115[0]);
        if (v75)
        {
          if (v77)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v75;
            _os_log_impl(&dword_182FBE000, v56, v76, "%{public}s called with null hostname, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v75);
          goto LABEL_183;
        }
        if (v77)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
          _os_log_impl(&dword_182FBE000, v56, v76, "%{public}s called with null hostname, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v56 = objc_claimAutoreleasedReturnValue();
        v85 = v115[0];
        if (os_log_type_enabled(v56, (os_log_type_t)v115[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_alt_svc_enumerate";
          _os_log_impl(&dword_182FBE000, v56, v85, "%{public}s called with null hostname, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_182:

      goto LABEL_183;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
    v44 = (char *)_os_log_send_and_compose_impl();
    v115[0] = 16;
    LOBYTE(v98) = 0;
    if (__nwlog_fault(v44, v115, &v98))
    {
      if (v115[0] == 17)
      {
        v45 = __nwlog_obj();
        v46 = v115[0];
        if (os_log_type_enabled(v45, (os_log_type_t)v115[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
          v47 = "%{public}s called with null alt_svc_options";
LABEL_161:
          _os_log_impl(&dword_182FBE000, v45, v46, v47, buf, 0xCu);
        }
      }
      else if ((_BYTE)v98)
      {
        v65 = (char *)__nw_create_backtrace_string();
        v45 = __nwlog_obj();
        v46 = v115[0];
        v66 = os_log_type_enabled(v45, (os_log_type_t)v115[0]);
        if (v65)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v65;
            _os_log_impl(&dword_182FBE000, v45, v46, "%{public}s called with null alt_svc_options, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(v65);
          goto LABEL_162;
        }
        if (v66)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
          v47 = "%{public}s called with null alt_svc_options, no backtrace";
          goto LABEL_161;
        }
      }
      else
      {
        v45 = __nwlog_obj();
        v46 = v115[0];
        if (os_log_type_enabled(v45, (os_log_type_t)v115[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
          v47 = "%{public}s called with null alt_svc_options, backtrace limit exceeded";
          goto LABEL_161;
        }
      }
    }
LABEL_162:
    if (v44)
      free(v44);
    v38 = 0;
    goto LABEL_50;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
  v40 = (char *)_os_log_send_and_compose_impl();
  v115[0] = 16;
  LOBYTE(v102) = 0;
  if (!__nwlog_fault(v40, v115, &v102))
    goto LABEL_156;
  if (v115[0] != 17)
  {
    if (!(_BYTE)v102)
    {
      v41 = __nwlog_obj();
      v42 = v115[0];
      if (os_log_type_enabled(v41, (os_log_type_t)v115[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
        v43 = "%{public}s called with null other_protocol, backtrace limit exceeded";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v41 = __nwlog_obj();
    v42 = v115[0];
    v64 = os_log_type_enabled(v41, (os_log_type_t)v115[0]);
    if (!backtrace_string)
    {
      if (v64)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
        v43 = "%{public}s called with null other_protocol, no backtrace";
        goto LABEL_155;
      }
      goto LABEL_156;
    }
    if (v64)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v62 = "%{public}s called with null other_protocol, dumping backtrace:%{public}s";
      goto LABEL_103;
    }
LABEL_104:
    free(backtrace_string);
    goto LABEL_156;
  }
  v41 = __nwlog_obj();
  v42 = v115[0];
  if (os_log_type_enabled(v41, (os_log_type_t)v115[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http_alt_svc_connect";
    v43 = "%{public}s called with null other_protocol";
    goto LABEL_155;
  }
LABEL_156:
  if (v40)
    free(v40);
  return 0;
}

void sub_1839FC45C(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 176), 8);
  _Unwind_Resume(a1);
}

uint64_t nw_protocol_http_alt_svc_get_remote_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t v2;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      v7 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v12)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_34;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
        v7 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v4)
          return 0;
        goto LABEL_35;
      }
      if (!v9)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      v7 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
    goto LABEL_34;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      v7 = "%{public}s called with null http_alt_svc";
      goto LABEL_33;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      v7 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
      goto LABEL_33;
    }
    v10 = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!v10)
    {
      if (!v11)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      v7 = "%{public}s called with null http_alt_svc, no backtrace";
      goto LABEL_33;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_protocol_http_alt_svc_get_remote_endpoint";
      v16 = 2082;
      v17 = v10;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v10);
LABEL_34:
    if (!v4)
      return 0;
LABEL_35:
    free(v4);
    return 0;
  }
  v2 = handle[45];
  if (v2)
    return v2;
  return nw_protocol_get_remote_endpoint((uint64_t)a1->default_input_handler);
}

uint64_t nw_protocol_http_alt_svc_remove_input_handler(nw_protocol *a1, nw_protocol *a2, uint64_t a3)
{
  _BYTE *handle;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  char *backtrace_string;
  _BOOL4 v14;
  const char *v15;
  _BOOL4 v16;
  _BOOL4 v17;
  _QWORD v18[6];
  char v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  __int16 v27;
  const char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_http_alt_svc_remove_input_handler";
    v8 = (char *)_os_log_send_and_compose_impl();
    v22 = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &v22, &v21))
      goto LABEL_49;
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (!os_log_type_enabled(v9, v22))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_http_alt_svc_remove_input_handler";
      v11 = "%{public}s called with null protocol";
LABEL_48:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      goto LABEL_49;
    }
    if (!v21)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (os_log_type_enabled(v9, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_alt_svc_remove_input_handler";
        v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v22;
    v14 = os_log_type_enabled(v9, v22);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_alt_svc_remove_input_handler";
        v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v14)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v24 = "nw_protocol_http_alt_svc_remove_input_handler";
    v25 = 2082;
    v26 = backtrace_string;
    v15 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v9, v10, v15, buf, 0x16u);
    goto LABEL_35;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_http_alt_svc_remove_input_handler";
    v8 = (char *)_os_log_send_and_compose_impl();
    v22 = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &v22, &v21))
      goto LABEL_49;
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (!os_log_type_enabled(v9, v22))
        goto LABEL_49;
      *(_DWORD *)buf = 136446210;
      v24 = "nw_protocol_http_alt_svc_remove_input_handler";
      v11 = "%{public}s called with null http_alt_svc";
      goto LABEL_48;
    }
    if (!v21)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (os_log_type_enabled(v9, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_alt_svc_remove_input_handler";
        v11 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v22;
    v16 = os_log_type_enabled(v9, v22);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_alt_svc_remove_input_handler";
        v11 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v16)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v24 = "nw_protocol_http_alt_svc_remove_input_handler";
    v25 = 2082;
    v26 = backtrace_string;
    v15 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
    goto LABEL_34;
  }
  if (a2)
  {
    if ((handle[198] & 1) == 0 && gLogDatapath)
    {
      v12 = __nwlog_obj();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v24 = "nw_protocol_http_alt_svc_remove_input_handler";
        v25 = 2082;
        v26 = handle + 114;
        v27 = 2080;
        v28 = " ";
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", buf, 0x20u);
      }
    }
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 0x40000000;
    v20[2] = ___ZL45nw_protocol_http_alt_svc_remove_input_handlerP11nw_protocolS0_b_block_invoke;
    v20[3] = &__block_descriptor_tmp_18_70442;
    v20[4] = handle;
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 0x40000000;
    v18[2] = ___ZL45nw_protocol_http_alt_svc_remove_input_handlerP11nw_protocolS0_b_block_invoke_2;
    v18[3] = &__block_descriptor_tmp_19_70443;
    v19 = a3;
    v18[4] = a1;
    v18[5] = handle;
    return nw_protocol_common_remove_input_handler_with_cleanup_blocks(a1, a2, a3, (uint64_t)v20, (uint64_t)v18);
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_protocol_http_alt_svc_remove_input_handler";
  v8 = (char *)_os_log_send_and_compose_impl();
  v22 = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &v22, &v21))
    goto LABEL_49;
  if (v22 != OS_LOG_TYPE_FAULT)
  {
    if (!v21)
    {
      v9 = __nwlog_obj();
      v10 = v22;
      if (os_log_type_enabled(v9, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_alt_svc_remove_input_handler";
        v11 = "%{public}s called with null input_protocol, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = v22;
    v17 = os_log_type_enabled(v9, v22);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_protocol_http_alt_svc_remove_input_handler";
        v11 = "%{public}s called with null input_protocol, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_protocol_http_alt_svc_remove_input_handler";
      v25 = 2082;
      v26 = backtrace_string;
      v15 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
LABEL_35:
    free(backtrace_string);
    goto LABEL_49;
  }
  v9 = __nwlog_obj();
  v10 = v22;
  if (os_log_type_enabled(v9, v22))
  {
    *(_DWORD *)buf = 136446210;
    v24 = "nw_protocol_http_alt_svc_remove_input_handler";
    v11 = "%{public}s called with null input_protocol";
    goto LABEL_48;
  }
LABEL_49:
  if (v8)
    free(v8);
  return 0;
}

uint64_t nw_protocol_http_alt_svc_copy_info(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  NSObject *v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  __int16 v22;
  const char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http_alt_svc_copy_info";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http_alt_svc_copy_info";
      v8 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_http_alt_svc_copy_info";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_52:
        if (!v5)
          return 0;
LABEL_53:
        free(v5);
        return 0;
      }
      if (!v10)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http_alt_svc_copy_info";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http_alt_svc_copy_info";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    goto LABEL_51;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http_alt_svc_copy_info";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_52;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v16)
      {
        v6 = __nwlog_obj();
        v7 = type;
        if (!os_log_type_enabled(v6, type))
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_alt_svc_copy_info";
        v8 = "%{public}s called with null http_alt_svc, backtrace limit exceeded";
        goto LABEL_51;
      }
      v11 = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v12 = os_log_type_enabled(v6, type);
      if (!v11)
      {
        if (!v12)
          goto LABEL_52;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_http_alt_svc_copy_info";
        v8 = "%{public}s called with null http_alt_svc, no backtrace";
        goto LABEL_51;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_http_alt_svc_copy_info";
        v20 = 2082;
        v21 = v11;
        v13 = "%{public}s called with null http_alt_svc, dumping backtrace:%{public}s";
LABEL_34:
        _os_log_impl(&dword_182FBE000, v6, v7, v13, buf, 0x16u);
      }
LABEL_35:
      free(v11);
      if (!v5)
        return 0;
      goto LABEL_53;
    }
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_52;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http_alt_svc_copy_info";
    v8 = "%{public}s called with null http_alt_svc";
LABEL_51:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_52;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_http_alt_svc_copy_info";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v5, &type, &v16))
      goto LABEL_52;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http_alt_svc_copy_info";
      v8 = "%{public}s called with null type";
      goto LABEL_51;
    }
    if (!v16)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http_alt_svc_copy_info";
      v8 = "%{public}s called with null type, backtrace limit exceeded";
      goto LABEL_51;
    }
    v11 = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v14 = os_log_type_enabled(v6, type);
    if (!v11)
    {
      if (!v14)
        goto LABEL_52;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_http_alt_svc_copy_info";
      v8 = "%{public}s called with null type, no backtrace";
      goto LABEL_51;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_http_alt_svc_copy_info";
      v20 = 2082;
      v21 = v11;
      v13 = "%{public}s called with null type, dumping backtrace:%{public}s";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    return nw_protocol_common_copy_info(v3, a2);
  if ((*(_BYTE *)(v2 + 198) & 1) == 0 && gLogDatapath)
  {
    v15 = __nwlog_obj();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v19 = "nw_protocol_http_alt_svc_copy_info";
      v20 = 2082;
      v21 = (char *)(v2 + 114);
      v22 = 2080;
      v23 = " ";
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scopy_info requires an output handler", buf, 0x20u);
    }
  }
  return 0;
}

void ___ZL45nw_protocol_http_alt_svc_remove_input_handlerP11nw_protocolS0_b_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  int v3;
  const char *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (gLogDatapath)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v3 = 136446210;
      v4 = "nw_protocol_plugin_metadata_teardown";
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s called", (uint8_t *)&v3, 0xCu);
    }
  }
  nw_protocol_plugin_metadata_reset((uint64_t *)(v1 + 200));
  *(_QWORD *)(v1 + 328) = 0;
}

void ___ZL45nw_protocol_http_alt_svc_remove_input_handlerP11nw_protocolS0_b_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  NSObject *v9;
  int v10;
  const char *v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 48))
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40) = 0;
    v1 = *(_QWORD *)(a1 + 40);
    if ((*(_BYTE *)(v1 + 198) & 1) == 0)
    {
      if (gLogDatapath)
      {
        v9 = __nwlog_obj();
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          v10 = 136446722;
          v11 = "nw_http_alt_svc_destroy";
          v12 = 2082;
          v13 = v1 + 114;
          v14 = 2080;
          v15 = " ";
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%scalled", (uint8_t *)&v10, 0x20u);
        }
      }
    }
    if ((*(_BYTE *)(v1 + 400) & 1) != 0)
    {
      v2 = *(void **)(v1 + 392);
      if (v2)
        os_release(v2);
    }
    *(_QWORD *)(v1 + 392) = 0;
    if ((*(_BYTE *)(v1 + 384) & 1) != 0)
    {
      v3 = *(void **)(v1 + 376);
      if (v3)
        os_release(v3);
    }
    *(_QWORD *)(v1 + 376) = 0;
    if ((*(_BYTE *)(v1 + 368) & 1) != 0)
    {
      v4 = *(void **)(v1 + 360);
      if (v4)
        os_release(v4);
    }
    *(_QWORD *)(v1 + 360) = 0;
    if ((*(_BYTE *)(v1 + 352) & 1) != 0)
    {
      v5 = *(void **)(v1 + 344);
      if (v5)
        os_release(v5);
    }
    *(_QWORD *)(v1 + 344) = 0;
    if ((*(_BYTE *)(v1 + 288) & 1) != 0)
    {
      v6 = *(void **)(v1 + 280);
      if (v6)
        os_release(v6);
    }
    *(_QWORD *)(v1 + 280) = 0;
    if ((*(_BYTE *)(v1 + 272) & 1) != 0)
    {
      v7 = *(void **)(v1 + 264);
      if (v7)
        os_release(v7);
    }
    *(_QWORD *)(v1 + 264) = 0;
    if ((*(_BYTE *)(v1 + 256) & 1) != 0)
    {
      v8 = *(void **)(v1 + 248);
      if (v8)
        os_release(v8);
    }
    free((void *)v1);
  }
}

uint64_t __Block_byref_object_copy__70470(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(result + 48) = *(_BYTE *)(result + 48) & 0xFE | *(_BYTE *)(a2 + 48) & 1;
  *(_QWORD *)(a2 + 40) = 0;
  *(_BYTE *)(a2 + 48) &= ~1u;
  return result;
}

void __Block_byref_object_dispose__70471(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v2 = *(void **)(a1 + 40);
    if (v2)
      os_release(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
}

void ___ZL32nw_protocol_http_alt_svc_connectP11nw_protocolS0__block_invoke(uint64_t a1, const char *a2, unsigned int a3)
{
  _BOOL8 host_with_numeric_port;
  void *v5;
  id v6;

  host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(a2, a3);
  v5 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
  v6 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
  nw_endpoint_add_alternative(v5, (void *)host_with_numeric_port, v6);
  if (v6)
    os_release(v6);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  if (host_with_numeric_port)
    os_release((void *)host_with_numeric_port);
}

double __nw_protocol_http_alt_svc_identifier_block_invoke()
{
  double result;

  strcpy((char *)nw_protocol_http_alt_svc_identifier::protocol_identifier, "http_alt_svc");
  *(_QWORD *)&result = 0x100000005;
  qword_1EDCE408C = 0x100000005;
  return result;
}

void sub_1839FD970(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1839FD9E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_edge *nw_endpoint_edge_create(void *a1, __int128 *a2, char a3)
{
  id v5;
  NWConcrete_nw_endpoint_edge *v6;
  id v7;
  void *v8;
  NWConcrete_nw_endpoint_edge *v9;
  __int128 v10;
  __int128 v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t receiver;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  NSObject *v25;
  int is_registered;
  const char *v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  char v40;
  objc_super v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  void *v46;
  __int16 v47;
  void *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = [NWConcrete_nw_endpoint_edge alloc];
  v7 = v5;
  v8 = v7;
  if (!v6)
    goto LABEL_6;
  if (!v7)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
    v14 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v14, &v41, &type))
    {
      if (LOBYTE(v41.receiver) == 17)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        receiver = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v15, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_182FBE000, v15, receiver, "%{public}s called with null _endpoint", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v29 = (os_log_type_t)v41.receiver;
        v30 = os_log_type_enabled(v15, (os_log_type_t)v41.receiver);
        if (backtrace_string)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
            v45 = 2082;
            v46 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v29, "%{public}s called with null _endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_54;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_182FBE000, v15, v29, "%{public}s called with null _endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v37 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v15, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_182FBE000, v15, v37, "%{public}s called with null _endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_54:
    if (v14)
      free(v14);
    goto LABEL_56;
  }
  if (!a2)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
    v18 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v41.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v18, &v41, &type))
    {
      if (LOBYTE(v41.receiver) == 17)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v20 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v19, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null _identifier", buf, 0xCu);
        }
      }
      else if (type)
      {
        v31 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v32 = (os_log_type_t)v41.receiver;
        v33 = os_log_type_enabled(v19, (os_log_type_t)v41.receiver);
        if (v31)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
            v45 = 2082;
            v46 = v31;
            _os_log_impl(&dword_182FBE000, v19, v32, "%{public}s called with null _identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v31);
          goto LABEL_60;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_182FBE000, v19, v32, "%{public}s called with null _identifier, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        v38 = (os_log_type_t)v41.receiver;
        if (os_log_type_enabled(v19, (os_log_type_t)v41.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_182FBE000, v19, v38, "%{public}s called with null _identifier, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_60:
    if (v18)
      free(v18);
LABEL_56:

LABEL_68:
    v6 = 0;
    goto LABEL_6;
  }
  v41.receiver = v6;
  v41.super_class = (Class)NWConcrete_nw_endpoint_edge;
  v9 = (NWConcrete_nw_endpoint_edge *)objc_msgSendSuper2(&v41, sel_init);
  v6 = v9;
  if (!v9)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if ((__nwlog_fault(v22, &type, &v40) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v40)
      {
        v34 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        v36 = os_log_type_enabled(v23, type);
        if (v34)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
            v45 = 2082;
            v46 = v34;
            _os_log_impl(&dword_182FBE000, v23, v35, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v34);
          goto LABEL_66;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_182FBE000, v23, v35, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
          _os_log_impl(&dword_182FBE000, v23, v39, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_66:
    if (v22)
      free(v22);
    goto LABEL_68;
  }
  objc_storeWeak((id *)&v9->endpoint, v8);
  *((_BYTE *)v6 + 64) = *((_BYTE *)v6 + 64) & 0xFE | a3;
  v10 = *a2;
  v11 = a2[1];
  *(_QWORD *)&v6->identifier.level = *((_QWORD *)a2 + 4);
  *(_OWORD *)&v6->identifier.name[16] = v11;
  *(_OWORD *)v6->identifier.name = v10;
  if (gLogDatapath)
  {
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      is_registered = nw_endpoint_is_registered(v8);
      v27 = "un";
      v44 = "-[NWConcrete_nw_endpoint_edge initWithEndpoint:identifier:wildcard:]";
      *(_DWORD *)buf = 136446722;
      if (is_registered)
        v27 = "";
      v45 = 2080;
      v46 = (void *)v27;
      v47 = 2112;
      v48 = v8;
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s endpoint edge create with %sregistered endpoint %@", buf, 0x20u);
    }

  }
LABEL_6:

  return v6;
}

void sub_1839FE1D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_endpoint_edge_get_endpoint(void *a1)
{
  id *v1;
  char *v2;
  id WeakRetained;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  NSObject *v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (char *)v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_endpoint_edge_get_endpoint";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_endpoint_edge_get_endpoint";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null edge", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_endpoint_edge_get_endpoint";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_endpoint_edge_get_endpoint";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null edge, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_endpoint_edge_get_endpoint";
          _os_log_impl(&dword_182FBE000, v7, v13, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_25:
    if (v6)
      free(v6);
    goto LABEL_4;
  }
  WeakRetained = objc_loadWeakRetained(v1 + 6);
  if (!WeakRetained)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v17 = "nw_endpoint_edge_get_endpoint";
        v18 = 2112;
        v19 = v2;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s edge %@ has seen its endpoint be deallocated", buf, 0x16u);
      }

    }
LABEL_4:
    WeakRetained = 0;
  }

  return WeakRetained;
}

nw_endpoint_t nw_endpoint_create_unix(const char *a1)
{
  size_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  void *v9;
  char *backtrace_string;
  _BOOL4 v11;
  const char *v12;
  uint8_t *v13;
  _BOOL4 v14;
  uint8_t *v15;
  char v16;
  os_log_type_t v17;
  os_log_type_t type[4];
  const char *v19;
  __int16 v20;
  char *v21;
  sockaddr address[8];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    memset(address, 0, sizeof(address));
    v2 = strlen(a1);
    if (v2 + 1 < 0x7E)
    {
      address[0].sa_len = v2 + 3;
      address[0].sa_family = 1;
      memcpy(address[0].sa_data, a1, v2 + 1);
      return nw_endpoint_create_address(address);
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)type = 136446210;
    v19 = "nw_endpoint_create_unix";
    v5 = (char *)_os_log_send_and_compose_impl();

    v17 = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v5, &v17, &v16))
    {
      if (v17 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = v17;
        if (os_log_type_enabled(v6, v17))
        {
          *(_DWORD *)type = 136446210;
          v19 = "nw_endpoint_create_unix";
          v8 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path))";
LABEL_32:
          v15 = (uint8_t *)type;
          goto LABEL_33;
        }
        goto LABEL_34;
      }
      if (!v16)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = v17;
        if (os_log_type_enabled(v6, v17))
        {
          *(_DWORD *)type = 136446210;
          v19 = "nw_endpoint_create_unix";
          v8 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path))"
               ", backtrace limit exceeded";
          goto LABEL_32;
        }
LABEL_34:

        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = v17;
      v14 = os_log_type_enabled(v6, v17);
      if (!backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)type = 136446210;
          v19 = "nw_endpoint_create_unix";
          v8 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path)), no backtrace";
          goto LABEL_32;
        }
        goto LABEL_34;
      }
      if (!v14)
        goto LABEL_22;
      *(_DWORD *)type = 136446466;
      v19 = "nw_endpoint_create_unix";
      v20 = 2082;
      v21 = backtrace_string;
      v12 = "%{public}s called with null (length < sizeof(storage) - __builtin_offsetof(struct sockaddr_un, sun_path)), d"
            "umping backtrace:%{public}s";
      v13 = (uint8_t *)type;
      goto LABEL_21;
    }
  }
  else
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)&address[0].sa_len = 136446210;
    *(_QWORD *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
    v5 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v17 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v5, type, &v17))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type[0];
        if (!os_log_type_enabled(v6, type[0]))
          goto LABEL_34;
        *(_DWORD *)&address[0].sa_len = 136446210;
        *(_QWORD *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
        v8 = "%{public}s called with null path";
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type[0];
        v11 = os_log_type_enabled(v6, type[0]);
        if (backtrace_string)
        {
          if (!v11)
          {
LABEL_22:

            free(backtrace_string);
            goto LABEL_35;
          }
          *(_DWORD *)&address[0].sa_len = 136446466;
          *(_QWORD *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
          *(_WORD *)&address[0].sa_data[10] = 2082;
          *(_QWORD *)&address[0].sa_data[12] = backtrace_string;
          v12 = "%{public}s called with null path, dumping backtrace:%{public}s";
          v13 = (uint8_t *)address;
LABEL_21:
          _os_log_impl(&dword_182FBE000, v6, v7, v12, v13, 0x16u);
          goto LABEL_22;
        }
        if (!v11)
          goto LABEL_34;
        *(_DWORD *)&address[0].sa_len = 136446210;
        *(_QWORD *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
        v8 = "%{public}s called with null path, no backtrace";
      }
      else
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type[0];
        if (!os_log_type_enabled(v6, type[0]))
          goto LABEL_34;
        *(_DWORD *)&address[0].sa_len = 136446210;
        *(_QWORD *)&address[0].sa_data[2] = "nw_endpoint_create_unix";
        v8 = "%{public}s called with null path, backtrace limit exceeded";
      }
      v15 = (uint8_t *)address;
LABEL_33:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, v15, 0xCu);
      goto LABEL_34;
    }
  }
LABEL_35:
  if (v5)
    free(v5);
  return 0;
}

char *nw_endpoint_create_address_with_port(unsigned __int8 *a1, const char *a2)
{
  char *v2;
  char *v3;
  char *v4;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      v2 = -[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]([NWConcrete_nw_address_endpoint alloc], a1, a2);
      v3 = v2;
      if (v2)
      {
        v4 = v2;
LABEL_24:

        return v3;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v30 = "nw_endpoint_create_address_with_port";
      v6 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (__nwlog_fault(v6, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v7 = (id)gLogObj;
          v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            v30 = "nw_endpoint_create_address_with_port";
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s NWOSAddressEndpoint alloc/init failed", buf, 0xCu);
          }
        }
        else if (v27)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v7 = (id)gLogObj;
          v10 = type;
          v11 = os_log_type_enabled(v7, type);
          if (backtrace_string)
          {
            if (v11)
            {
              *(_DWORD *)buf = 136446466;
              v30 = "nw_endpoint_create_address_with_port";
              v31 = 2082;
              v32 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s NWOSAddressEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v6)
              goto LABEL_24;
            goto LABEL_23;
          }
          if (v11)
          {
            *(_DWORD *)buf = 136446210;
            v30 = "nw_endpoint_create_address_with_port";
            _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s NWOSAddressEndpoint alloc/init failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v7 = (id)gLogObj;
          v12 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            v30 = "nw_endpoint_create_address_with_port";
            _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s NWOSAddressEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v6)
        goto LABEL_24;
LABEL_23:
      free(v6);
      goto LABEL_24;
    }
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_endpoint_create_address_with_port";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v15, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null port", buf, 0xCu);
        }
LABEL_57:

        goto LABEL_58;
      }
      if (!v27)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s called with null port, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v16, type);
      if (!v20)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null port, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_endpoint_create_address_with_port";
        v31 = 2082;
        v32 = v20;
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null port, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_45;
    }
  }
  else
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_endpoint_create_address_with_port";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v15, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null address", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (!v27)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null address, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_57;
      }
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v16, type);
      if (!v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_endpoint_create_address_with_port";
          _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null address, no backtrace", buf, 0xCu);
        }
        goto LABEL_57;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v30 = "nw_endpoint_create_address_with_port";
        v31 = 2082;
        v32 = v20;
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null address, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_45:

      free(v20);
    }
  }
LABEL_58:
  if (v15)
    free(v15);
  return 0;
}

uint64_t nw_endpoint_is_broadcast(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  int v6;
  int *v7;
  id v8;
  id v9;
  id v10;
  int v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  id v15;
  int v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  id v20;
  int v21;
  id v22;
  void *v23;
  int v24;
  int *v25;
  int v26;
  char *v27;
  _BYTE *v28;
  __int16 v29;
  int v30;
  uint64_t v31;
  os_log_type_t v32;
  id v33;
  int v34;
  id v35;
  int v36;
  char *v37;
  _DWORD *v38;
  int v39;
  void *v41;
  const char *v42;
  NSObject *v43;
  os_log_type_t v44;
  char *backtrace_string;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  uint64_t v49;
  char v50;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  _WORD v55[17];

  *(_QWORD *)&v55[13] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_endpoint_is_broadcast";
    v42 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v42, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_is_broadcast";
          _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v50)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        v47 = os_log_type_enabled(v43, type);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v53 = "nw_endpoint_is_broadcast";
            v54 = 2082;
            *(_QWORD *)v55 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_64;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_is_broadcast";
          _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v48 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_endpoint_is_broadcast";
          _os_log_impl(&dword_182FBE000, v43, v48, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_64:
    if (!v42)
      goto LABEL_38;
    v37 = (char *)v42;
    goto LABEL_37;
  }
  v5 = v3;
  v6 = objc_msgSend(v5, "type");

  if (v6 == 1)
  {
    v7 = (int *)v5;
    if (v4)
      v8 = nw_path_copy_interface(v4);
    else
      v8 = 0;
    v22 = v8;
    v23 = v22;
    v24 = *((unsigned __int8 *)v7 + 233);
    if (v24 == 30)
    {
      if (v7[60] || v7[61] || v7[62] != -65536)
        goto LABEL_28;
      v25 = v7 + 63;
    }
    else
    {
      if (v24 != 2)
        goto LABEL_28;
      v25 = v7 + 59;
    }
    v26 = *v25;
    if (*v25 == -1)
      goto LABEL_45;
    if (v22)
    {
      v27 = (char *)v22;
      v28 = v27;
      v29 = *(_WORD *)(v27 + 85);
      if ((v29 & 0x80) != 0)
        v30 = *((_DWORD *)v27 + 18);
      else
        v30 = 0;

      v38 = v28;
      if ((*(_WORD *)(v28 + 85) & 0x100) == 0)
      {

        v31 = 0;
        goto LABEL_46;
      }
      v39 = v38[19];

      if (v26 != v39)
      {
        v31 = 0;
        if ((v29 & 0x80) == 0 || (v39 & v30) != v26)
          goto LABEL_46;
      }
LABEL_45:
      v31 = 1;
      goto LABEL_46;
    }
LABEL_28:
    v31 = 0;
LABEL_46:

    goto LABEL_47;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  v10 = v5;
  v11 = objc_msgSend(v10, "type");

  *(_DWORD *)buf = 136446466;
  v53 = "nw_endpoint_is_broadcast";
  v54 = 1024;
  *(_DWORD *)v55 = v11;
  LODWORD(v49) = 18;
  v12 = (const char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v50 = 0;
  if (__nwlog_fault(v12, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        v15 = v10;
        v16 = objc_msgSend(v15, "type", buf, v49);

        *(_DWORD *)buf = 136446466;
        v53 = "nw_endpoint_is_broadcast";
        v54 = 1024;
        *(_DWORD *)v55 = v16;
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s incorrect endpoint type %u", buf, 0x12u);
      }
    }
    else if (v50)
    {
      v17 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (v17)
      {
        if (v19)
        {
          v20 = v10;
          v21 = objc_msgSend(v20, "type", buf, v49);

          *(_DWORD *)buf = 136446722;
          v53 = "nw_endpoint_is_broadcast";
          v54 = 1024;
          *(_DWORD *)v55 = v21;
          v55[2] = 2082;
          *(_QWORD *)&v55[3] = v17;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(v17);
        if (!v12)
          goto LABEL_38;
        goto LABEL_36;
      }
      if (v19)
      {
        v35 = v10;
        v36 = objc_msgSend(v35, "type", buf, v49);

        *(_DWORD *)buf = 136446466;
        v53 = "nw_endpoint_is_broadcast";
        v54 = 1024;
        *(_DWORD *)v55 = v36;
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v32 = type;
      if (os_log_type_enabled(v13, type))
      {
        v33 = v10;
        v34 = objc_msgSend(v33, "type", buf, v49);

        *(_DWORD *)buf = 136446466;
        v53 = "nw_endpoint_is_broadcast";
        v54 = 1024;
        *(_DWORD *)v55 = v34;
        _os_log_impl(&dword_182FBE000, v13, v32, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
      }
    }

  }
  if (v12)
  {
LABEL_36:
    v37 = (char *)v12;
LABEL_37:
    free(v37);
  }
LABEL_38:
  v31 = 0;
LABEL_47:

  return v31;
}

void sub_183A02ED8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

char *nw_endpoint_create_address_from_string(const char *a1, const char *a2, char *a3)
{
  char v6;
  addrinfo *v7;
  addrinfo *v8;
  unsigned __int8 *p_sa_len;
  int v10;
  size_t v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  void *v19;
  void *v20;
  char *backtrace_string;
  _BOOL4 v22;
  const char *v23;
  _BOOL4 v24;
  _BOOL4 v25;
  char v26;
  os_log_type_t type[8];
  uint64_t v28;
  uint64_t v29;
  int v30;
  addrinfo *v31;
  _QWORD __dst[3];
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(__dst[0]) = 136446210;
    *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (!__nwlog_fault(v15, type, &v31))
      goto LABEL_63;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (!os_log_type_enabled(v16, type[0]))
        goto LABEL_62;
      LODWORD(__dst[0]) = 136446210;
      *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
      v18 = "%{public}s called with null address_string";
LABEL_61:
      _os_log_impl(&dword_182FBE000, v16, v17, v18, (uint8_t *)__dst, 0xCu);
      goto LABEL_62;
    }
    if (!(_BYTE)v31)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        v18 = "%{public}s called with null address_string, backtrace limit exceeded";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = type[0];
    v22 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v22)
      {
        LODWORD(__dst[0]) = 136446210;
        *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        v18 = "%{public}s called with null address_string, no backtrace";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (!v22)
      goto LABEL_48;
    LODWORD(__dst[0]) = 136446466;
    *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    WORD2(__dst[1]) = 2082;
    *(_QWORD *)((char *)&__dst[1] + 6) = backtrace_string;
    v23 = "%{public}s called with null address_string, dumping backtrace:%{public}s";
LABEL_47:
    _os_log_impl(&dword_182FBE000, v16, v17, v23, (uint8_t *)__dst, 0x16u);
    goto LABEL_48;
  }
  if (!a2)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(__dst[0]) = 136446210;
    *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (!__nwlog_fault(v15, type, &v31))
      goto LABEL_63;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (!os_log_type_enabled(v16, type[0]))
        goto LABEL_62;
      LODWORD(__dst[0]) = 136446210;
      *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
      v18 = "%{public}s called with null port";
      goto LABEL_61;
    }
    if (!(_BYTE)v31)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        v18 = "%{public}s called with null port, backtrace limit exceeded";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = type[0];
    v24 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v24)
      {
        LODWORD(__dst[0]) = 136446210;
        *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        v18 = "%{public}s called with null port, no backtrace";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (!v24)
      goto LABEL_48;
    LODWORD(__dst[0]) = 136446466;
    *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    WORD2(__dst[1]) = 2082;
    *(_QWORD *)((char *)&__dst[1] + 6) = backtrace_string;
    v23 = "%{public}s called with null port, dumping backtrace:%{public}s";
    goto LABEL_47;
  }
  if (!a3)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(__dst[0]) = 136446210;
    *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
    v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v31) = 0;
    if (!__nwlog_fault(v15, type, &v31))
      goto LABEL_63;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        v18 = "%{public}s called with null out_prefix";
        goto LABEL_61;
      }
LABEL_62:

LABEL_63:
      if (v15)
        free(v15);
      return 0;
    }
    if (!(_BYTE)v31)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      if (os_log_type_enabled(v16, type[0]))
      {
        LODWORD(__dst[0]) = 136446210;
        *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        v18 = "%{public}s called with null out_prefix, backtrace limit exceeded";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = type[0];
    v25 = os_log_type_enabled(v16, type[0]);
    if (!backtrace_string)
    {
      if (v25)
      {
        LODWORD(__dst[0]) = 136446210;
        *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
        v18 = "%{public}s called with null out_prefix, no backtrace";
        goto LABEL_61;
      }
      goto LABEL_62;
    }
    if (v25)
    {
      LODWORD(__dst[0]) = 136446466;
      *(_QWORD *)((char *)__dst + 4) = "nw_endpoint_create_address_from_string";
      WORD2(__dst[1]) = 2082;
      *(_QWORD *)((char *)&__dst[1] + 6) = backtrace_string;
      v23 = "%{public}s called with null out_prefix, dumping backtrace:%{public}s";
      goto LABEL_47;
    }
LABEL_48:

    free(backtrace_string);
    goto LABEL_63;
  }
  memset(__dst, 0, sizeof(__dst));
  v33 = 0;
  *(_QWORD *)type = 0;
  v28 = 0;
  v30 = 0;
  v29 = 0;
  v26 = 0;
  v31 = 0;
  if (!getaddrinfo(a1, 0, &nw_string_is_ip_address::hints, &v31))
  {
    v7 = v31;
    if (!v31)
      return nw_endpoint_create_address_with_port((unsigned __int8 *)__dst, a2);
    v8 = v31;
    while (1)
    {
      p_sa_len = &v8->ai_addr->sa_len;
      v10 = p_sa_len[1];
      if (v10 == 30 || v10 == 2)
        break;
      v8 = v8->ai_next;
      if (!v8)
        goto LABEL_18;
    }
    v12 = *p_sa_len;
    if (v12 <= 0x1C)
      memcpy(__dst, p_sa_len, v12);
LABEL_18:
    freeaddrinfo(v7);
    if (BYTE1(__dst[0]) == 2)
    {
      v6 = 32;
    }
    else
    {
      if (BYTE1(__dst[0]) != 30)
        return nw_endpoint_create_address_with_port((unsigned __int8 *)__dst, a2);
      v6 = 0x80;
    }
LABEL_7:
    *a3 = v6;
    return nw_endpoint_create_address_with_port((unsigned __int8 *)__dst, a2);
  }
  if ((nw_utilities_cidr_string_to_subnet_and_mask(a1, (uint64_t)__dst, (uint64_t)type, &v26) & 1) != 0)
  {
    v6 = v26;
    goto LABEL_7;
  }
  return 0;
}

void sub_183A0B40C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__71860(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__71861(uint64_t a1)
{

}

void sub_183A0FB1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

CFURLRef fixInvalidHTTPURL(void *a1)
{
  id v1;
  void *v2;
  CFRange v3;
  CFURLRef v4;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  CFIndex v13;
  UInt8 *v14;
  UInt8 *v15;
  size_t v16;
  CFURLRef result;
  NSObject *v18;
  os_log_type_t v19;
  NSObject *v20;
  void *v21;
  NSObject *v22;
  void *v23;
  char v24;
  os_log_type_t type;
  CFRange rangeIncludingSeparators;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  id v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  objc_msgSend(v1, "absoluteURL");
  v2 = (void *)objc_claimAutoreleasedReturnValue();

  rangeIncludingSeparators.location = 0;
  rangeIncludingSeparators.length = 0;
  v3 = CFURLGetByteRangeForComponent((CFURLRef)v2, kCFURLComponentScheme, &rangeIncludingSeparators);
  if (v3.location == -1 || v3.length + 3 == rangeIncludingSeparators.length)
  {
    v4 = v2;
LABEL_27:

    return v4;
  }
  if (__nwlog_url_log::onceToken != -1)
    dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44225);
  v5 = (id)gurlLogObj;
  *(_DWORD *)buf = 136446466;
  v28 = "fixInvalidHTTPURL";
  v29 = 2112;
  v30 = v1;
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v6, &type, &v24))
    goto LABEL_19;
  if (type == OS_LOG_TYPE_FAULT)
  {
    if (__nwlog_url_log::onceToken != -1)
      dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44225);
    v7 = (id)gurlLogObj;
    v8 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446466;
      v28 = "fixInvalidHTTPURL";
      v29 = 2112;
      v30 = v1;
      v9 = "%{public}s Invalid URL (missing slash): %@";
LABEL_32:
      v18 = v7;
      v19 = v8;
LABEL_33:
      _os_log_impl(&dword_182FBE000, v18, v19, v9, buf, 0x16u);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  if (v24)
  {
    backtrace_string = (char *)__nw_create_backtrace_string();
    if (__nwlog_url_log::onceToken != -1)
      dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44225);
    v7 = (id)gurlLogObj;
    v11 = type;
    v12 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "fixInvalidHTTPURL";
        v29 = 2112;
        v30 = v1;
        v9 = "%{public}s Invalid URL (missing slash): %@, no backtrace";
        v18 = v7;
        v19 = v11;
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446722;
      v28 = "fixInvalidHTTPURL";
      v29 = 2112;
      v30 = v1;
      v31 = 2082;
      v32 = (uint64_t)backtrace_string;
      _os_log_impl(&dword_182FBE000, v7, v11, "%{public}s Invalid URL (missing slash): %@, dumping backtrace:%{public}s", buf, 0x20u);
    }

    free(backtrace_string);
LABEL_19:
    if (!v6)
      goto LABEL_21;
    goto LABEL_20;
  }
  if (__nwlog_url_log::onceToken != -1)
    dispatch_once(&__nwlog_url_log::onceToken, &__block_literal_global_54_44225);
  v7 = (id)gurlLogObj;
  v8 = type;
  if (os_log_type_enabled(v7, type))
  {
    *(_DWORD *)buf = 136446466;
    v28 = "fixInvalidHTTPURL";
    v29 = 2112;
    v30 = v1;
    v9 = "%{public}s Invalid URL (missing slash): %@, backtrace limit exceeded";
    goto LABEL_32;
  }
LABEL_34:

  if (v6)
LABEL_20:
    free(v6);
LABEL_21:
  v13 = CFURLGetBytes((CFURLRef)v2, 0, 0);
  if (v13 == -3)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v28 = "strict_calloc";
    v21 = (void *)_os_log_send_and_compose_impl();

    result = (CFURLRef)__nwlog_abort((uint64_t)v21);
    if ((_DWORD)result)
      goto LABEL_42;
    free(v21);
  }
  v14 = (UInt8 *)malloc_type_calloc(v13 + 3, 1uLL, 0xEAFB8F1AuLL);
  if (v14)
  {
LABEL_23:
    CFURLGetBytes((CFURLRef)v2, v14, v13);
    v15 = &v14[rangeIncludingSeparators.length + rangeIncludingSeparators.location];
    if (*v15 == 47)
      v16 = 1;
    else
      v16 = 2;
    memmove(&v15[v16], &v14[rangeIncludingSeparators.length + rangeIncludingSeparators.location], v13 - (rangeIncludingSeparators.length + rangeIncludingSeparators.location) + 1);
    memset(v15, 47, v16);
    v4 = CFURLCreateAbsoluteURLWithBytes((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v14, v16 + v13, 0x600u, 0, 0);
    free(v14);
    goto LABEL_27;
  }
  __nwlog_obj();
  v22 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v28 = "strict_calloc";
  v29 = 2048;
  v30 = (id)(v13 + 3);
  v31 = 2048;
  v32 = 1;
  v23 = (void *)_os_log_send_and_compose_impl();

  result = (CFURLRef)__nwlog_abort((uint64_t)v23);
  if (!(_DWORD)result)
  {
    free(v23);
    goto LABEL_23;
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t __bumpProcessFDLimit_block_invoke()
{
  int v0;
  uint64_t result;
  rlim_t v2;
  rlimit v3;
  size_t v4;
  rlim_t rlim_max;
  rlimit v6;
  int v7[2];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6.rlim_cur = 0;
  v6.rlim_max = 0;
  v0 = getrlimit(8, &v6);
  *(_QWORD *)v7 = 0x1D00000001;
  v4 = 8;
  rlim_max = 0;
  result = sysctl(v7, 2u, &rlim_max, &v4, 0, 0);
  if (result | v0)
  {
    if (v0)
      return result;
    v2 = rlim_max;
  }
  else
  {
    v2 = rlim_max;
    if (v6.rlim_max < rlim_max)
    {
      rlim_max = v6.rlim_max;
      v2 = v6.rlim_max;
    }
  }
  if (v6.rlim_cur < v2)
  {
    v3 = v6;
    if (v2 >= v6.rlim_cur + 2304)
      v2 = v6.rlim_cur + 2304;
    v3.rlim_cur = v2;
    return setrlimit(8, &v3);
  }
  return result;
}

NWConcrete_nw_protocol_options *nw_swift_tls_create_options(double a1)
{
  double Helper_x8__nwswifttls_copy_definition;
  uint64_t v2;
  void *inited;
  NSObject *v4;
  NWConcrete_nw_protocol_options *options;
  int v7;
  const char *v8;
  __int16 v9;
  void *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  Helper_x8__nwswifttls_copy_definition = gotLoadHelper_x8__nwswifttls_copy_definition(a1);
  if (*(_QWORD *)(v2 + 2312))
  {
    inited = (void *)nwswifttls_copy_definition_delayInitStub(Helper_x8__nwswifttls_copy_definition);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v7 = 136446466;
      v8 = "nw_protocol_copy_swift_tls_definition_if_present";
      v9 = 2048;
      v10 = inited;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s SwiftTLS protocol definition %p", (uint8_t *)&v7, 0x16u);
    }
  }
  else
  {
    inited = 0;
  }
  options = nw_protocol_create_options(inited);

  return options;
}

void sub_183A149D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_tls(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = (void *)nw_protocol_boringssl_copy_definition();
    v3 = nw_protocol_options_matches_definition(v1, v2);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_tls";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_tls";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_tls";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_tls";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_tls";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183A14C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_protocol_copy_serializable_tls_definition()
{
  if (nw_protocol_copy_serializable_tls_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72016);
  return (id)nw_protocol_copy_serializable_tls_definition::tls_definition;
}

BOOL __nw_protocol_copy_serializable_tls_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *named;
  void *v1;

  named = nw_protocol_definition_create_named(2, "tls-serializable");
  v1 = (void *)nw_protocol_copy_serializable_tls_definition::tls_definition;
  nw_protocol_copy_serializable_tls_definition::tls_definition = (uint64_t)named;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_serializable_tls_definition::tls_definition, (uint64_t)nw_serializable_tls_allocate_options, (uint64_t)nw_serializable_tls_copy_options, (uint64_t)nw_serializable_tls_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_serializable_tls_definition::tls_definition, (uint64_t)nw_serializable_tls_option_is_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_serializable_tls_definition::tls_definition, 0, (uint64_t)nw_serializable_tls_serialize_options, (uint64_t)nw_serializable_tls_deserialize_options);
  return nw_protocol_definition_register((void *)nw_protocol_copy_serializable_tls_definition::tls_definition);
}

BOOL nw_serializable_tls_allocate_options(void *a1)
{
  id v1;
  _OWORD *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    *v2 = 0u;
    v2[1] = 0u;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_183A14EB0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_copy_options(void *a1, uint64_t a2)
{
  id v3;
  _OWORD *v4;
  const void *v5;
  const __CFArray *v6;
  int v7;
  unsigned int v8;
  _BOOL8 result;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  void *v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_serializable_tls_copy_options";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v11, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_serializable_tls_copy_options";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        v18 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v23 = "nw_serializable_tls_copy_options";
            v24 = 2082;
            v25 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_serializable_tls_copy_options";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_serializable_tls_copy_options";
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_29:
    if (v11)
      free(v11);
    v4 = 0;
    goto LABEL_10;
  }
  v4 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *v4 = 0u;
    v4[1] = 0u;
    if (*(_QWORD *)a2)
      *(_QWORD *)v4 = CFRetain(*(CFTypeRef *)a2);
    v5 = *(const void **)(a2 + 8);
    if (v5)
      *((_QWORD *)v4 + 1) = CFRetain(v5);
    v6 = *(const __CFArray **)(a2 + 16);
    if (v6)
      *((_QWORD *)v4 + 2) = CFArrayCreateCopy((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v6);
    v7 = *((_BYTE *)v4 + 24) & 0xFE | *(_BYTE *)(a2 + 24) & 1;
    *((_BYTE *)v4 + 24) = v7;
    v8 = v7 & 0xFFFFFFFD | (2 * ((*(unsigned __int8 *)(a2 + 24) >> 1) & 1));
    *((_BYTE *)v4 + 24) = v8;
    *((_BYTE *)v4 + 24) = v8 & 0xFB | *(_BYTE *)(a2 + 24) & 4;
LABEL_10:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v23 = "strict_calloc";
  v24 = 2048;
  v25 = 1;
  v26 = 2048;
  v27 = 32;
  v15 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void sub_183A15294(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_serializable_tls_deallocate_options(void *a1, uint64_t a2)
{
  const void *v3;
  const void *v4;
  id v5;

  v5 = a1;
  if (*(_QWORD *)a2)
  {
    CFRelease(*(CFTypeRef *)a2);
    *(_QWORD *)a2 = 0;
  }
  v3 = *(const void **)(a2 + 8);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(a2 + 8) = 0;
  }
  v4 = *(const void **)(a2 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a2 + 16) = 0;
  }
  free((void *)a2);

}

void sub_183A15314(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_option_is_equal(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  _BOOL8 v6;
  const void *v8;
  const void *v9;
  const void *v10;
  const void *v11;
  const void *v12;
  const void *v13;

  v5 = a1;
  if (((*(_BYTE *)(a3 + 24) ^ *(_BYTE *)(a2 + 24)) & 7) != 0)
    goto LABEL_2;
  v8 = *(const void **)a2;
  v9 = *(const void **)a3;
  if (*(_QWORD *)a2 != *(_QWORD *)a3)
  {
    v6 = 0;
    if (!v8 || !v9)
      goto LABEL_3;
    if (!CFEqual(v8, v9))
      goto LABEL_2;
  }
  v10 = *(const void **)(a2 + 8);
  v11 = *(const void **)(a3 + 8);
  if (v10 != v11)
  {
    v6 = 0;
    if (!v10 || !v11)
      goto LABEL_3;
    if (!CFEqual(v10, v11))
    {
LABEL_2:
      v6 = 0;
      goto LABEL_3;
    }
  }
  v12 = *(const void **)(a2 + 16);
  v13 = *(const void **)(a3 + 16);
  if (v12 == v13)
  {
    v6 = 1;
  }
  else
  {
    v6 = 0;
    if (v12 && v13)
      v6 = CFEqual(v12, v13) != 0;
  }
LABEL_3:

  return v6;
}

void sub_183A153F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_serialize_options(void *a1, uint64_t a2, size_t *a3)
{
  id v5;
  CFIndex Count;
  CFIndex v7;
  uint64_t v8;
  const __CFData *ValueAtIndex;
  const __CFData *v10;
  CFIndex v11;
  const __CFArray *v12;
  unsigned __int8 v13;
  CFIndex v14;
  const __CFData *v15;
  size_t v16;
  char *v17;
  char *v18;
  const __CFData *v19;
  unsigned __int16 Length;
  const UInt8 *BytePtr;
  CFIndex v22;
  CFIndex i;
  char *v24;
  const __CFData *v25;
  const __CFData *v26;
  unsigned __int16 v27;
  const UInt8 *v28;
  uint64_t v29;
  unsigned int v30;
  const __CFData *v31;
  const __CFData *v32;
  unsigned __int16 v33;
  const UInt8 *v34;
  char *v35;
  void *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  void *v40;
  os_log_type_t v41;
  NSObject *v42;
  void *v43;
  _BOOL8 result;
  NSObject *v45;
  void *v46;
  char *backtrace_string;
  os_log_type_t v48;
  _BOOL4 v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  os_log_type_t v53;
  os_log_type_t v54;
  char v55;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  uint64_t v60;
  __int16 v61;
  size_t v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_serializable_tls_serialize_options";
    v37 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v37, &type, &v55))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null existing_handle", buf, 0xCu);
      }
    }
    else if (v55)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      v49 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          v58 = "nw_serializable_tls_serialize_options";
          v59 = 2082;
          v60 = (uint64_t)backtrace_string;
          _os_log_impl(&dword_182FBE000, v38, v48, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v37)
          goto LABEL_75;
        goto LABEL_74;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_182FBE000, v38, v48, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v53 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_182FBE000, v38, v53, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_72;
  }
  if (!a3)
  {
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_serializable_tls_serialize_options";
    v37 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v37, &type, &v55))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s called with null out_length", buf, 0xCu);
      }
    }
    else if (v55)
    {
      v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      v52 = os_log_type_enabled(v38, type);
      if (v50)
      {
        if (v52)
        {
          *(_DWORD *)buf = 136446466;
          v58 = "nw_serializable_tls_serialize_options";
          v59 = 2082;
          v60 = (uint64_t)v50;
          _os_log_impl(&dword_182FBE000, v38, v51, "%{public}s called with null out_length, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v50);
LABEL_73:
        if (!v37)
        {
LABEL_75:
          v17 = 0;
LABEL_76:

          return (BOOL)v17;
        }
LABEL_74:
        free(v37);
        goto LABEL_75;
      }
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_182FBE000, v38, v51, "%{public}s called with null out_length, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_serializable_tls_serialize_options";
        _os_log_impl(&dword_182FBE000, v38, v54, "%{public}s called with null out_length, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  if (!*(_QWORD *)a2)
  {
    v8 = 0;
    goto LABEL_10;
  }
  Count = CFArrayGetCount(*(CFArrayRef *)a2);
  if (Count)
  {
    v7 = 0;
    v8 = 0;
    do
    {
      ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)a2, v7);
      if (ValueAtIndex)
        v8 += CFDataGetLength(ValueAtIndex) + 2;
      ++v7;
    }
    while (Count != v7);
LABEL_10:
    v10 = *(const __CFData **)(a2 + 8);
    if (v10)
      goto LABEL_11;
LABEL_18:
    v13 = 0;
    v11 = 0;
    goto LABEL_20;
  }
  v8 = 0;
  v10 = *(const __CFData **)(a2 + 8);
  if (!v10)
    goto LABEL_18;
LABEL_11:
  v11 = CFDataGetLength(v10) + 2;
  v12 = *(const __CFArray **)(a2 + 16);
  if (v12)
  {
    v13 = CFArrayGetCount(v12) + 1;
    if (v13 >= 2u)
    {
      v14 = 0;
      do
      {
        v15 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v14);
        if (v15)
          v11 += CFDataGetLength(v15) + 2;
        ++v14;
      }
      while (v13 - 1 != v14);
    }
  }
  else
  {
    v13 = 1;
  }
LABEL_20:
  v16 = v8 + v11 + 4;
  *a3 = v16;
  if (v8 + v11 == -4)
  {
    __nwlog_obj();
    v42 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v42, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v58 = "strict_calloc";
    v43 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v43);
    if (result)
      goto LABEL_77;
    free(v43);
  }
  v17 = (char *)malloc_type_calloc(1uLL, v16, 0xEAFB8F1AuLL);
  if (v17)
  {
LABEL_22:
    *v17 = *v17 & 0xF8 | *(_BYTE *)(a2 + 24) & 7;
    v17[1] = v13;
    v18 = v17 + 2;
    if (v13)
    {
      v19 = *(const __CFData **)(a2 + 8);
      if (v19)
      {
        Length = CFDataGetLength(*(CFDataRef *)(a2 + 8));
        BytePtr = CFDataGetBytePtr(v19);
        *((_WORD *)v17 + 1) = Length;
        memcpy(v17 + 4, BytePtr, Length);
        v18 = &v17[Length + 4];
      }
      if (v13 != 1)
      {
        v29 = v13 - 1;
        v30 = 0;
        do
        {
          v31 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v30);
          v32 = v31;
          if (v31)
          {
            v33 = CFDataGetLength(v31);
            v34 = CFDataGetBytePtr(v32);
            *(_WORD *)v18 = v33;
            v35 = v18 + 2;
            memcpy(v35, v34, v33);
            v18 = &v35[v33];
          }
          ++v30;
          --v29;
        }
        while (v29);
      }
    }
    if (*(_QWORD *)a2)
    {
      v22 = CFArrayGetCount(*(CFArrayRef *)a2);
      if (v22)
      {
        for (i = 0; i != v22; ++i)
        {
          v25 = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)a2, i);
          v26 = v25;
          if (v25)
          {
            v27 = CFDataGetLength(v25);
            v28 = CFDataGetBytePtr(v26);
            *(_WORD *)v18 = v27;
            v24 = v18 + 2;
            memcpy(v24, v28, v27);
            v18 = &v24[v27];
          }
        }
      }
    }
    goto LABEL_76;
  }
  __nwlog_obj();
  v45 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v58 = "strict_calloc";
  v59 = 2048;
  v60 = 1;
  v61 = 2048;
  v62 = v16;
  v46 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v46);
  if (!result)
  {
    free(v46);
    goto LABEL_22;
  }
LABEL_77:
  __break(1u);
  return result;
}

void sub_183A15C04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_serializable_tls_deserialize_options(void *a1, _BYTE *a2, unint64_t a3)
{
  id v5;
  _BYTE *v6;
  char v7;
  char v8;
  const UInt8 *v9;
  unint64_t v10;
  const UInt8 *v11;
  CFIndex v12;
  CFDataRef v13;
  __CFArray *v14;
  unint64_t v15;
  const UInt8 *v16;
  __CFArray *Mutable;
  const __CFAllocator *v18;
  const CFArrayCallBacks *v19;
  CFIndex v20;
  CFDataRef v21;
  _BOOL8 result;
  const __CFAllocator *v23;
  const UInt8 *v24;
  unsigned int v25;
  CFIndex v26;
  CFDataRef v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  NSObject *v34;
  void *v35;
  char *backtrace_string;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  os_log_type_t v42;
  id v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  uint64_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_serializable_tls_deserialize_options";
    v29 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null serialized_bytes", buf, 0xCu);
        }
        goto LABEL_68;
      }
      if (!v44)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_182FBE000, v30, v41, "%{public}s called with null serialized_bytes, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_68;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null serialized_bytes, no backtrace", buf, 0xCu);
        }
        goto LABEL_68;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_serializable_tls_deserialize_options";
        v48 = 2082;
        v49 = (uint64_t)backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_56:

      free(backtrace_string);
    }
LABEL_69:
    if (v29)
      free(v29);
    v6 = 0;
    goto LABEL_24;
  }
  if (a3 <= 3)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_serializable_tls_deserialize_options";
    v29 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options))", buf, 0xCu);
        }
LABEL_68:

        goto LABEL_69;
      }
      if (!v44)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_182FBE000, v30, v42, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_68;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      v40 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_serializable_tls_deserialize_options";
          _os_log_impl(&dword_182FBE000, v30, v39, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options)), no backtrace", buf, 0xCu);
        }
        goto LABEL_68;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_serializable_tls_deserialize_options";
        v48 = 2082;
        v49 = (uint64_t)backtrace_string;
        _os_log_impl(&dword_182FBE000, v30, v39, "%{public}s called with null (serialized_length >= sizeof(struct nw_protocol_serialized_tls_options)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_56;
    }
    goto LABEL_69;
  }
  v43 = v5;
  v6 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v6)
    goto LABEL_4;
  __nwlog_obj();
  v34 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v47 = "strict_calloc";
  v48 = 2048;
  v49 = 1;
  v50 = 2048;
  v51 = 32;
  v35 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v35);
  if (!result)
  {
    free(v35);
LABEL_4:
    if ((os_variant_allows_internal_security_policies() & 1) != 0)
    {
      v7 = v6[24] & 0xFE | *a2 & 1;
      v6[24] = v7;
    }
    else
    {
      v7 = v6[24];
    }
    v8 = v7 & 0xFD | (2 * ((*a2 & 2) != 0));
    v6[24] = v8;
    v6[24] = v8 & 0xFB | *a2 & 4;
    v9 = a2 + 2;
    if (!a2[1])
      goto LABEL_14;
    v10 = (unint64_t)&a2[a3];
    v11 = a2 + 4;
    if (a2 + 4 >= &a2[a3])
    {
      v13 = 0;
    }
    else
    {
      v12 = *(unsigned __int16 *)v9;
      v9 = &v11[v12];
      if ((unint64_t)&v11[v12] > v10)
      {
        v13 = 0;
        v14 = 0;
        v9 = a2 + 4;
LABEL_13:
        *((_QWORD *)v6 + 1) = v13;
        *((_QWORD *)v6 + 2) = v14;
LABEL_14:
        v15 = (unint64_t)&a2[a3];
        v16 = v9 + 2;
        if (v9 + 2 >= &a2[a3])
        {
          Mutable = 0;
        }
        else
        {
          Mutable = 0;
          v18 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
          v19 = (const CFArrayCallBacks *)MEMORY[0x1E0C9B378];
          do
          {
            v20 = *(unsigned __int16 *)v9;
            v9 = &v16[v20];
            if ((unint64_t)&v16[v20] > v15)
              break;
            if (!Mutable)
              Mutable = CFArrayCreateMutable(v18, 0, v19);
            v21 = CFDataCreate(v18, v16, v20);
            CFArrayAppendValue(Mutable, v21);
            if (v21)
              CFRelease(v21);
            v16 = v9 + 2;
          }
          while ((unint64_t)(v9 + 2) < v15);
        }
        *(_QWORD *)v6 = Mutable;
        v5 = v43;
LABEL_24:

        return (BOOL)v6;
      }
      v23 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      v13 = CFDataCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v11, v12);
      v24 = v9 + 2;
      if ((unint64_t)(v9 + 2) < v10)
      {
        v14 = 0;
        v25 = 1;
        while (v25 < a2[1])
        {
          v26 = *(unsigned __int16 *)v9;
          v9 = &v24[v26];
          if ((unint64_t)&v24[v26] > v10)
          {
            v9 = v24;
            goto LABEL_13;
          }
          v27 = CFDataCreate(v23, v24, v26);
          if (!v14)
            v14 = CFArrayCreateMutable(v23, 0, MEMORY[0x1E0C9B378]);
          CFArrayAppendValue(v14, v27);
          if (v27)
            CFRelease(v27);
          ++v25;
          v24 = v9 + 2;
          if ((unint64_t)(v9 + 2) >= v10)
            goto LABEL_13;
        }
        goto LABEL_13;
      }
    }
    v14 = 0;
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_183A16380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_serializable_tls(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  _BOOL8 is_equal_unsafe;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (id *)v1;
    v4 = v3[1];

    if (nw_protocol_copy_serializable_tls_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72016);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_serializable_tls_definition::tls_definition);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_options_is_serializable_tls";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_serializable_tls";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_options_is_serializable_tls";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_serializable_tls";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_serializable_tls";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
  is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_183A16690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_tls_create_serializable_options()
{
  if (nw_protocol_copy_serializable_tls_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_serializable_tls_definition::onceToken, &__block_literal_global_72016);
  return nw_protocol_create_options((void *)nw_protocol_copy_serializable_tls_definition::tls_definition);
}

NWConcrete_nw_protocol_options *nw_tls_create_options_from_serializable(void *a1, uint64_t a2, _BYTE *a3)
{
  id v5;
  void *v6;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_options *v8;
  NWConcrete_nw_protocol_options *v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _QWORD v19[4];
  NWConcrete_nw_protocol_options *v20;
  _BYTE *v21;
  uint64_t v22;
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (nw_protocol_options_is_serializable_tls(v5))
  {
    v6 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v6);

    v8 = options;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v26 = 1;
    v19[0] = MEMORY[0x1E0C809B0];
    v19[1] = 3221225472;
    v19[2] = __nw_tls_create_options_from_serializable_block_invoke;
    v19[3] = &unk_1E14AA260;
    v9 = v8;
    v21 = buf;
    v22 = a2;
    v20 = v9;
    nw_protocol_options_access_handle(v5, v19);
    if (a3)
      *a3 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_tls_create_options_from_serializable";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v12, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tls_create_options_from_serializable";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options)", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_tls_create_options_from_serializable";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tls_create_options_from_serializable";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_tls_create_options_from_serializable";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null nw_protocol_options_is_serializable_tls(serializable_options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v12)
    free(v12);
  v9 = 0;
LABEL_5:

  return v9;
}

void sub_183A16A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_tls_create_options_from_serializable_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  id v5;
  _BOOL8 v6;
  const __CFArray *v7;
  const __CFArray *v8;
  CFIndex Count;
  CFIndex v10;
  __CFArray *Mutable;
  CFIndex v12;
  const __CFAllocator *v13;
  const __CFData *ValueAtIndex;
  void *v15;
  void *v16;
  __SecIdentity *v17;
  NSObject *v18;
  NSObject *v19;
  void *v20;
  id v21;
  __SecIdentity *v22;
  __SecIdentity *v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  __SecIdentity *v27;
  NSObject *v28;
  NSObject *v29;
  id v31;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  __SecIdentity *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 24) & 1) != 0 && os_variant_allows_internal_security_policies())
  {
    v4 = *(NSObject **)(a1 + 32);
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    v5 = (id)nw_context_copy_implicit_context::implicit_context;
    v6 = nw_context_copy_workloop(v5);
    sec_protocol_options_set_verify_block(v4, &__block_literal_global_4_72063, (dispatch_queue_t)v6);

  }
  if ((*(_BYTE *)(a2 + 24) & 2) != 0)
  {
    sec_protocol_options_add_tls_application_protocol(*(sec_protocol_options_t *)(a1 + 32), "h2");
    if ((*(_BYTE *)(a2 + 24) & 4) == 0)
    {
LABEL_8:
      v7 = *(const __CFArray **)a2;
      if (!*(_QWORD *)a2)
        goto LABEL_14;
      goto LABEL_12;
    }
  }
  else if ((*(_BYTE *)(a2 + 24) & 4) == 0)
  {
    goto LABEL_8;
  }
  sec_protocol_options_set_min_tls_protocol_version(*(sec_protocol_options_t *)(a1 + 32), tls_protocol_version_TLSv13);
  v7 = *(const __CFArray **)a2;
  if (!*(_QWORD *)a2)
    goto LABEL_14;
LABEL_12:
  if (CFArrayGetCount(v7) >= 1)
    sec_protocol_options_set_server_raw_public_key_certificates();
LABEL_14:
  if (*(_QWORD *)(a2 + 8))
  {
    v8 = *(const __CFArray **)(a2 + 16);
    if (v8 && (Count = CFArrayGetCount(v8), Count >= 1))
    {
      v10 = Count;
      Mutable = 0;
      v12 = 0;
      v13 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      while (1)
      {
        ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(*(CFArrayRef *)(a2 + 16), v12);
        CFDataGetBytePtr(ValueAtIndex);
        CFDataGetLength(ValueAtIndex);
        v15 = (void *)NEHelperCopyDataForCertificate();
        v16 = v15;
        if (!v15)
          break;
        xpc_data_get_bytes_ptr(v15);
        xpc_data_get_length(v16);
        v17 = (__SecIdentity *)SecCertificateCreateWithBytes();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        v19 = v18;
        if (!v17)
        {
          if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            v33 = "nw_tls_create_options_from_serializable_block_invoke";
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s Failed to create certificate from data", buf, 0xCu);
          }
          goto LABEL_32;
        }
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_tls_create_options_from_serializable_block_invoke";
          v34 = 2112;
          v35 = v17;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s Fetched certificate %@ from NEHelper", buf, 0x16u);
        }

        if (!Mutable)
          Mutable = CFArrayCreateMutable(v13, 0, MEMORY[0x1E0C9B378]);
        CFArrayAppendValue(Mutable, v17);
        CFRelease(v17);

        if (v10 == ++v12)
          goto LABEL_33;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_tls_create_options_from_serializable_block_invoke";
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_ERROR, "%{public}s Failed to fetch certificate from NEHelper", buf, 0xCu);
      }
      v16 = 0;
LABEL_32:

      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    }
    else
    {
      Mutable = 0;
    }
LABEL_33:
    CFDataGetBytePtr(*(CFDataRef *)(a2 + 8));
    CFDataGetLength(*(CFDataRef *)(a2 + 8));
    v20 = (void *)NEHelperCopyXPCEndpointForIdentityProxy();
    if (v20)
    {
      v21 = objc_alloc_init(MEMORY[0x1E0CB3B60]);
      objc_msgSend(v21, "_setEndpoint:", v20);
      v31 = 0;
      v22 = (__SecIdentity *)objc_msgSend(MEMORY[0x1E0CD5C88], "createIdentityFromEndpoint:error:", v21, &v31);
      v23 = (__SecIdentity *)v31;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      v25 = v24;
      if (v23)
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_tls_create_options_from_serializable_block_invoke";
          v34 = 2112;
          v35 = v23;
          _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_ERROR, "%{public}s Failed to fetch identity from NEHelper: %@", buf, 0x16u);
        }

        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
      }
      else
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_tls_create_options_from_serializable_block_invoke";
          v34 = 2112;
          v35 = v22;
          _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s Fetched identity %@ from NEHelper", buf, 0x16u);
        }

      }
      if (v22)
      {
        if (Mutable)
          v28 = sec_identity_create_with_certificates(v22, Mutable);
        else
          v28 = sec_identity_create(v22);
        v29 = v28;
        sec_protocol_options_set_local_identity(*(sec_protocol_options_t *)(a1 + 32), v28);

        CFRelease(v22);
      }
      if (Mutable)
        CFRelease(Mutable);

    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v26 = (id)gLogObj;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
      {
        v27 = *(__SecIdentity **)(a2 + 8);
        *(_DWORD *)buf = 136446466;
        v33 = "nw_tls_create_options_from_serializable_block_invoke";
        v34 = 2112;
        v35 = v27;
        _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s Unable to copy xpc endpoint for client identity %@", buf, 0x16u);
      }

      if (Mutable)
        CFRelease(Mutable);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
    }

  }
  return 1;
}

void sub_183A1705C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_tls_create_options_from_serializable_block_invoke_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 16))(a4, 1);
}

void nw_serializable_tls_set_trust_certs(void *a1)
{
  id v1;
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  char *backtrace_string;
  os_log_type_t v7;
  _BOOL4 v8;
  os_log_type_t v9;
  _QWORD v10[4];
  char v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_serializable_tls(v1))
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __nw_serializable_tls_set_trust_certs_block_invoke;
    v10[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v11 = 1;
    nw_protocol_options_access_handle(v1, v10);
    goto LABEL_3;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_serializable_tls_set_trust_certs";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_serializable_tls_set_trust_certs";
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_serializable_tls_set_trust_certs";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_serializable_tls_set_trust_certs";
        _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_serializable_tls_set_trust_certs";
        _os_log_impl(&dword_182FBE000, v4, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v3)
    free(v3);
LABEL_3:

}

void sub_183A173A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_trust_certs_block_invoke(uint64_t a1, uint64_t a2)
{
  if (os_variant_allows_internal_security_policies())
    *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

void nw_serializable_tls_set_add_h2_alpn(void *a1)
{
  id v1;
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  char *backtrace_string;
  os_log_type_t v7;
  _BOOL4 v8;
  os_log_type_t v9;
  _QWORD v10[4];
  char v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_serializable_tls(v1))
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __nw_serializable_tls_set_add_h2_alpn_block_invoke;
    v10[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v11 = 1;
    nw_protocol_options_access_handle(v1, v10);
    goto LABEL_3;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_serializable_tls_set_add_h2_alpn";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_serializable_tls_set_add_h2_alpn";
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_serializable_tls_set_add_h2_alpn";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_serializable_tls_set_add_h2_alpn";
        _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_serializable_tls_set_add_h2_alpn";
        _os_log_impl(&dword_182FBE000, v4, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v3)
    free(v3);
LABEL_3:

}

void sub_183A176CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_add_h2_alpn_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1;
}

void nw_serializable_tls_set_require_tls13(void *a1)
{
  id v1;
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  char *backtrace_string;
  os_log_type_t v7;
  _BOOL4 v8;
  os_log_type_t v9;
  _QWORD v10[4];
  char v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_serializable_tls(v1))
  {
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = __nw_serializable_tls_set_require_tls13_block_invoke;
    v10[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v11 = 1;
    nw_protocol_options_access_handle(v1, v10);
    goto LABEL_3;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_serializable_tls_set_require_tls13";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v3, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_serializable_tls_set_require_tls13";
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_serializable_tls_set_require_tls13";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_serializable_tls_set_require_tls13";
        _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_serializable_tls_set_require_tls13";
        _os_log_impl(&dword_182FBE000, v4, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v3)
    free(v3);
LABEL_3:

}

void sub_183A179C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_require_tls13_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFB | (4 * *(_BYTE *)(a1 + 32));
  return 1;
}

void nw_serializable_tls_set_server_raw_public_keys(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_serializable_tls(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_serializable_tls_set_server_raw_public_keys_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_serializable_tls_set_server_raw_public_keys";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_serializable_tls_set_server_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_serializable_tls_set_server_raw_public_keys";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_serializable_tls_set_server_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_serializable_tls_set_server_raw_public_keys";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183A17CBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_server_raw_public_keys_block_invoke(uint64_t a1, CFTypeRef *a2)
{
  const __CFArray *v4;
  CFTypeRef v5;

  if (*a2)
  {
    CFRelease(*a2);
    *a2 = 0;
  }
  v4 = *(const __CFArray **)(a1 + 32);
  if (v4 && CFArrayGetCount(v4) >= 1)
  {
    v5 = *(CFTypeRef *)(a1 + 32);
    if (v5)
      v5 = CFRetain(v5);
    *a2 = v5;
  }
  return 1;
}

void nw_serializable_tls_set_client_identity_reference(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[6];
  char v15;
  os_log_type_t v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (nw_protocol_options_is_serializable_tls(v5))
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_serializable_tls_set_client_identity_reference_block_invoke;
    v14[3] = &__block_descriptor_48_e9_B16__0_v8l;
    v14[4] = a2;
    v14[5] = a3;
    nw_protocol_options_access_handle(v5, v14);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_serializable_tls_set_client_identity_reference";
  v7 = (char *)_os_log_send_and_compose_impl();

  v16 = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &v16, &v15))
  {
    if (v16 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_serializable_tls_set_client_identity_reference";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null nw_protocol_options_is_serializable_tls(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = v16;
      v12 = os_log_type_enabled(v8, v16);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_serializable_tls_set_client_identity_reference";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_serializable_tls_set_client_identity_reference";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = v16;
      if (os_log_type_enabled(v8, v16))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_serializable_tls_set_client_identity_reference";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null nw_protocol_options_is_serializable_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_183A17FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_serializable_tls_set_client_identity_reference_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  const void *v6;
  const void *v7;

  v4 = *(const void **)(a2 + 8);
  if (v4)
  {
    CFRelease(v4);
    *(_QWORD *)(a2 + 8) = 0;
  }
  v5 = *(const void **)(a2 + 16);
  if (v5)
  {
    CFRelease(v5);
    *(_QWORD *)(a2 + 16) = 0;
  }
  v6 = *(const void **)(a1 + 32);
  if (v6)
    *(_QWORD *)(a2 + 8) = CFRetain(v6);
  v7 = *(const void **)(a1 + 40);
  if (v7)
    *(_QWORD *)(a2 + 16) = CFRetain(v7);
  return 1;
}

void nw_tls_options_add_transport_specific_application_protocol(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!nw_protocol_options_is_tls(v3))
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_tls_options_add_transport_specific_application_protocol";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v6, &type, &v27))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_tls_options_add_transport_specific_application_protocol";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_tls(options)", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_tls_options_add_transport_specific_application_protocol";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null nw_protocol_options_is_tls(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v6)
          goto LABEL_6;
LABEL_54:
        free(v6);
        goto LABEL_6;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_tls_options_add_transport_specific_application_protocol";
        _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null nw_protocol_options_is_tls(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_tls_options_add_transport_specific_application_protocol";
        _os_log_impl(&dword_182FBE000, v7, v24, "%{public}s called with null nw_protocol_options_is_tls(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (a2)
  {
    v4 = v3;
    if (v4)
    {
      sec_protocol_options_add_transport_specific_application_protocol();
LABEL_5:

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_tls_options_add_transport_specific_application_protocol";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_tls_options_add_transport_specific_application_protocol";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null sec_options", buf, 0xCu);
        }
      }
      else if (v27)
      {
        v21 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        v23 = os_log_type_enabled(v13, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_tls_options_add_transport_specific_application_protocol";
            v31 = 2082;
            v32 = v21;
            _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null sec_options, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          goto LABEL_58;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_tls_options_add_transport_specific_application_protocol";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null sec_options, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_tls_options_add_transport_specific_application_protocol";
          _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s called with null sec_options, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_58:
    if (v12)
      free(v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_tls_options_add_transport_specific_application_protocol";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (!__nwlog_fault(v6, &type, &v27))
    goto LABEL_53;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_tls_options_add_transport_specific_application_protocol";
      _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null application_protocol", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (!v27)
  {
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_tls_options_add_transport_specific_application_protocol";
      _os_log_impl(&dword_182FBE000, v7, v25, "%{public}s called with null application_protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_52;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v7, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_tls_options_add_transport_specific_application_protocol";
      _os_log_impl(&dword_182FBE000, v7, v19, "%{public}s called with null application_protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v30 = "nw_tls_options_add_transport_specific_application_protocol";
    v31 = 2082;
    v32 = v18;
    _os_log_impl(&dword_182FBE000, v7, v19, "%{public}s called with null application_protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v6)
    goto LABEL_54;
LABEL_6:

}

void sub_183A18724(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t NWPBInterfaceReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  uint64_t v11;
  void *v12;
  _BYTE *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  int v52;
  BOOL v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char v57;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  unint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t v66;
  int v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  char v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  int v99;
  uint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t v103;
  unint64_t v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  int v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  int v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  int v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  char v133;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  uint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  int v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  int v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  int v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  int v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  int v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  int v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  int v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  int v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  int v192;
  uint64_t v193;
  unint64_t v194;
  unint64_t v195;
  int v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  int v200;
  uint64_t v201;
  unint64_t v202;
  unint64_t v203;
  int v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char v212;
  unsigned int v213;
  uint64_t v214;
  unint64_t v215;
  int v216;
  uint64_t v217;
  unint64_t v218;
  int v219;
  uint64_t v220;
  unint64_t v221;
  int v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  int v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  int v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  int v234;
  uint64_t v235;
  unint64_t v236;
  unint64_t v237;
  int v238;
  uint64_t v239;
  unint64_t v240;
  unint64_t v241;
  int v242;
  uint64_t v243;
  unint64_t v244;
  unint64_t v245;
  int v246;
  uint64_t v247;
  unint64_t v248;
  unint64_t v249;
  char v250;
  unsigned int v251;
  uint64_t v252;
  unint64_t v253;
  int v254;
  uint64_t v255;
  unint64_t v256;
  int v257;
  uint64_t v258;
  unint64_t v259;
  int v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  int v264;
  uint64_t v265;
  unint64_t v266;
  unint64_t v267;
  int v268;
  uint64_t v269;
  unint64_t v270;
  unint64_t v271;
  int v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  int v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  int v280;
  uint64_t v281;
  unint64_t v282;
  unint64_t v283;
  int v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  char v288;
  unsigned int v289;
  uint64_t v290;
  unint64_t v291;
  int v292;
  uint64_t v293;
  unint64_t v294;
  int v295;
  uint64_t v296;
  unint64_t v297;
  int v298;
  uint64_t v299;
  unint64_t v300;
  unint64_t v301;
  int v302;
  uint64_t v303;
  unint64_t v304;
  unint64_t v305;
  int v306;
  uint64_t v307;
  unint64_t v308;
  unint64_t v309;
  int v310;
  uint64_t v311;
  unint64_t v312;
  unint64_t v313;
  int v314;
  uint64_t v315;
  unint64_t v316;
  unint64_t v317;
  int v318;
  uint64_t v319;
  unint64_t v320;
  unint64_t v321;
  int v322;
  uint64_t result;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x1E0D82BB8];
    while (2)
    {
      v13 = (_BYTE *)(a2 + *v8);
      if (!*v13)
      {
        if (v5 >= v7)
        {
          v15 = 0;
        }
        else
        {
          v14 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
          *(_QWORD *)(a2 + (int)v4) = v5 + 1;
          v15 = v14 & 0x7F;
          if ((v14 & 0x80) == 0)
            goto LABEL_39;
          v16 = *v3;
          v17 = *(_QWORD *)(a2 + v16);
          if (v17 != -1 && v17 < *(_QWORD *)(a2 + *v6))
          {
            v18 = v17 + 1;
            v19 = *(char *)(*(_QWORD *)(a2 + *v10) + v17);
            *(_QWORD *)(a2 + v16) = v18;
            v15 |= (unint64_t)(v19 & 0x7F) << 7;
            if ((v19 & 0x80000000) == 0)
              goto LABEL_39;
            v20 = *v3;
            v21 = *(_QWORD *)(a2 + v20);
            if (v21 != -1 && v21 < *(_QWORD *)(a2 + *v6))
            {
              v22 = v21 + 1;
              v23 = *(char *)(*(_QWORD *)(a2 + *v10) + v21);
              *(_QWORD *)(a2 + v20) = v22;
              v15 |= (unint64_t)(v23 & 0x7F) << 14;
              if ((v23 & 0x80000000) == 0)
                goto LABEL_39;
              v24 = *v3;
              v25 = *(_QWORD *)(a2 + v24);
              if (v25 != -1 && v25 < *(_QWORD *)(a2 + *v6))
              {
                v26 = v25 + 1;
                v27 = *(char *)(*(_QWORD *)(a2 + *v10) + v25);
                *(_QWORD *)(a2 + v24) = v26;
                v15 |= (unint64_t)(v27 & 0x7F) << 21;
                if ((v27 & 0x80000000) == 0)
                  goto LABEL_39;
                v28 = *v3;
                v29 = *(_QWORD *)(a2 + v28);
                if (v29 != -1 && v29 < *(_QWORD *)(a2 + *v6))
                {
                  v30 = v29 + 1;
                  v31 = *(char *)(*(_QWORD *)(a2 + *v10) + v29);
                  *(_QWORD *)(a2 + v28) = v30;
                  v15 |= (unint64_t)(v31 & 0x7F) << 28;
                  if ((v31 & 0x80000000) == 0)
                    goto LABEL_39;
                  v32 = *v3;
                  v33 = *(_QWORD *)(a2 + v32);
                  if (v33 != -1 && v33 < *(_QWORD *)(a2 + *v6))
                  {
                    v34 = v33 + 1;
                    v35 = *(char *)(*(_QWORD *)(a2 + *v10) + v33);
                    *(_QWORD *)(a2 + v32) = v34;
                    if ((v35 & 0x80000000) == 0)
                      goto LABEL_39;
                    v36 = *v3;
                    v37 = *(_QWORD *)(a2 + v36);
                    if (v37 != -1 && v37 < *(_QWORD *)(a2 + *v6))
                    {
                      v38 = v37 + 1;
                      v39 = *(char *)(*(_QWORD *)(a2 + *v10) + v37);
                      *(_QWORD *)(a2 + v36) = v38;
                      if ((v39 & 0x80000000) == 0)
                        goto LABEL_39;
                      v40 = *v3;
                      v41 = *(_QWORD *)(a2 + v40);
                      if (v41 != -1 && v41 < *(_QWORD *)(a2 + *v6))
                      {
                        v42 = v41 + 1;
                        v43 = *(char *)(*(_QWORD *)(a2 + *v10) + v41);
                        *(_QWORD *)(a2 + v40) = v42;
                        if ((v43 & 0x80000000) == 0)
                          goto LABEL_39;
                        v44 = *v3;
                        v45 = *(_QWORD *)(a2 + v44);
                        if (v45 != -1 && v45 < *(_QWORD *)(a2 + *v6))
                        {
                          v46 = v45 + 1;
                          v47 = *(char *)(*(_QWORD *)(a2 + *v10) + v45);
                          *(_QWORD *)(a2 + v44) = v46;
                          if ((v47 & 0x80000000) == 0)
                            goto LABEL_39;
                          v48 = *v3;
                          v49 = *(_QWORD *)(a2 + v48);
                          if (v49 != -1 && v49 < *(_QWORD *)(a2 + *v6))
                          {
                            v50 = v49 + 1;
                            v51 = *(char *)(*(_QWORD *)(a2 + *v10) + v49);
                            *(_QWORD *)(a2 + v48) = v50;
                            if (v51 < 0)
                            {
                              v15 = 0;
                              v52 = *(unsigned __int8 *)(a2 + *v8);
                              goto LABEL_41;
                            }
LABEL_39:
                            v52 = *(unsigned __int8 *)(a2 + *v8);
                            if (*(_BYTE *)(a2 + *v8))
                              v15 = 0;
LABEL_41:
                            if (v52)
                              v53 = 1;
                            else
                              v53 = (v15 & 7) == 4;
                            if (v53)
                              return *(_BYTE *)(a2 + *v8) == 0;
                            switch((v15 >> 3))
                            {
                              case 1u:
                                *(_BYTE *)(a1 + 44) |= 0x20u;
                                v54 = *v3;
                                v55 = *(_QWORD *)(a2 + v54);
                                if (v55 == -1 || v55 >= *(_QWORD *)(a2 + *v6))
                                {
                                  v58 = 0;
                                }
                                else
                                {
                                  v56 = v55 + 1;
                                  v57 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v55);
                                  *(_QWORD *)(a2 + v54) = v56;
                                  v58 = v57 & 0x7F;
                                  if ((v57 & 0x80) == 0)
                                    goto LABEL_282;
                                  v59 = *v3;
                                  v60 = *(_QWORD *)(a2 + v59);
                                  if (v60 != -1 && v60 < *(_QWORD *)(a2 + *v6))
                                  {
                                    v61 = *(char *)(*(_QWORD *)(a2 + *v10) + v60);
                                    *(_QWORD *)(a2 + v59) = v60 + 1;
                                    v58 = v58 & 0xFFFFC07F | ((v61 & 0x7F) << 7);
                                    if ((v61 & 0x80000000) == 0)
                                      goto LABEL_282;
                                    v62 = *v3;
                                    v63 = *(_QWORD *)(a2 + v62);
                                    if (v63 != -1 && v63 < *(_QWORD *)(a2 + *v6))
                                    {
                                      v64 = *(char *)(*(_QWORD *)(a2 + *v10) + v63);
                                      *(_QWORD *)(a2 + v62) = v63 + 1;
                                      v58 = v58 & 0xFFE03FFF | ((v64 & 0x7F) << 14);
                                      if ((v64 & 0x80000000) == 0)
                                        goto LABEL_282;
                                      v65 = *v3;
                                      v66 = *(_QWORD *)(a2 + v65);
                                      if (v66 != -1 && v66 < *(_QWORD *)(a2 + *v6))
                                      {
                                        v67 = *(char *)(*(_QWORD *)(a2 + *v10) + v66);
                                        *(_QWORD *)(a2 + v65) = v66 + 1;
                                        v58 = v58 & 0xF01FFFFF | ((v67 & 0x7F) << 21);
                                        if ((v67 & 0x80000000) == 0)
                                          goto LABEL_282;
                                        v68 = *v3;
                                        v69 = *(_QWORD *)(a2 + v68);
                                        if (v69 != -1 && v69 < *(_QWORD *)(a2 + *v6))
                                        {
                                          v70 = v69 + 1;
                                          v71 = *(char *)(*(_QWORD *)(a2 + *v10) + v69);
                                          *(_QWORD *)(a2 + v68) = v70;
                                          v58 |= v71 << 28;
                                          if ((v71 & 0x80000000) == 0)
                                            goto LABEL_282;
                                          v72 = *v3;
                                          v73 = *(_QWORD *)(a2 + v72);
                                          if (v73 != -1 && v73 < *(_QWORD *)(a2 + *v6))
                                          {
                                            v74 = v73 + 1;
                                            v75 = *(char *)(*(_QWORD *)(a2 + *v10) + v73);
                                            *(_QWORD *)(a2 + v72) = v74;
                                            if ((v75 & 0x80000000) == 0)
                                              goto LABEL_282;
                                            v76 = *v3;
                                            v77 = *(_QWORD *)(a2 + v76);
                                            if (v77 != -1 && v77 < *(_QWORD *)(a2 + *v6))
                                            {
                                              v78 = v77 + 1;
                                              v79 = *(char *)(*(_QWORD *)(a2 + *v10) + v77);
                                              *(_QWORD *)(a2 + v76) = v78;
                                              if ((v79 & 0x80000000) == 0)
                                                goto LABEL_282;
                                              v80 = *v3;
                                              v81 = *(_QWORD *)(a2 + v80);
                                              if (v81 != -1 && v81 < *(_QWORD *)(a2 + *v6))
                                              {
                                                v82 = v81 + 1;
                                                v83 = *(char *)(*(_QWORD *)(a2 + *v10) + v81);
                                                *(_QWORD *)(a2 + v80) = v82;
                                                if ((v83 & 0x80000000) == 0)
                                                  goto LABEL_282;
                                                v84 = *v3;
                                                v85 = *(_QWORD *)(a2 + v84);
                                                if (v85 != -1 && v85 < *(_QWORD *)(a2 + *v6))
                                                {
                                                  v86 = v85 + 1;
                                                  v87 = *(char *)(*(_QWORD *)(a2 + *v10) + v85);
                                                  *(_QWORD *)(a2 + v84) = v86;
                                                  if ((v87 & 0x80000000) == 0)
                                                    goto LABEL_282;
                                                  v88 = *v3;
                                                  v89 = *(_QWORD *)(a2 + v88);
                                                  if (v89 != -1 && v89 < *(_QWORD *)(a2 + *v6))
                                                  {
                                                    v90 = v89 + 1;
                                                    v91 = *(char *)(*(_QWORD *)(a2 + *v10) + v89);
                                                    *(_QWORD *)(a2 + v88) = v90;
                                                    if (v91 < 0)
                                                    {
                                                      v58 = 0;
LABEL_284:
                                                      *(_DWORD *)(a1 + 36) = v58;
                                                      goto LABEL_4;
                                                    }
LABEL_282:
                                                    if (*(_BYTE *)(a2 + *v8))
                                                      v58 = 0;
                                                    goto LABEL_284;
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                                *(_BYTE *)(a2 + *v8) = 1;
                                goto LABEL_282;
                              case 2u:
                                *(_BYTE *)(a1 + 44) |= 0x10u;
                                v209 = *v3;
                                v210 = *(_QWORD *)(a2 + v209);
                                if (v210 == -1 || v210 >= *(_QWORD *)(a2 + *v6))
                                {
                                  v213 = 0;
LABEL_286:
                                  *(_BYTE *)(a2 + *v8) = 1;
                                  goto LABEL_287;
                                }
                                v211 = v210 + 1;
                                v212 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v210);
                                *(_QWORD *)(a2 + v209) = v211;
                                v213 = v212 & 0x7F;
                                if ((v212 & 0x80) == 0)
                                  goto LABEL_287;
                                v214 = *v3;
                                v215 = *(_QWORD *)(a2 + v214);
                                if (v215 == -1 || v215 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_286;
                                v216 = *(char *)(*(_QWORD *)(a2 + *v10) + v215);
                                *(_QWORD *)(a2 + v214) = v215 + 1;
                                v213 = v213 & 0xFFFFC07F | ((v216 & 0x7F) << 7);
                                if ((v216 & 0x80000000) == 0)
                                  goto LABEL_287;
                                v217 = *v3;
                                v218 = *(_QWORD *)(a2 + v217);
                                if (v218 == -1 || v218 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_286;
                                v219 = *(char *)(*(_QWORD *)(a2 + *v10) + v218);
                                *(_QWORD *)(a2 + v217) = v218 + 1;
                                v213 = v213 & 0xFFE03FFF | ((v219 & 0x7F) << 14);
                                if ((v219 & 0x80000000) == 0)
                                  goto LABEL_287;
                                v220 = *v3;
                                v221 = *(_QWORD *)(a2 + v220);
                                if (v221 == -1 || v221 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_286;
                                v222 = *(char *)(*(_QWORD *)(a2 + *v10) + v221);
                                *(_QWORD *)(a2 + v220) = v221 + 1;
                                v213 = v213 & 0xF01FFFFF | ((v222 & 0x7F) << 21);
                                if ((v222 & 0x80000000) == 0)
                                  goto LABEL_287;
                                v223 = *v3;
                                v224 = *(_QWORD *)(a2 + v223);
                                if (v224 == -1 || v224 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_286;
                                v225 = v224 + 1;
                                v226 = *(char *)(*(_QWORD *)(a2 + *v10) + v224);
                                *(_QWORD *)(a2 + v223) = v225;
                                v213 |= v226 << 28;
                                if ((v226 & 0x80000000) == 0)
                                  goto LABEL_287;
                                v227 = *v3;
                                v228 = *(_QWORD *)(a2 + v227);
                                if (v228 == -1 || v228 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_286;
                                v229 = v228 + 1;
                                v230 = *(char *)(*(_QWORD *)(a2 + *v10) + v228);
                                *(_QWORD *)(a2 + v227) = v229;
                                if ((v230 & 0x80000000) == 0)
                                  goto LABEL_287;
                                v231 = *v3;
                                v232 = *(_QWORD *)(a2 + v231);
                                if (v232 == -1 || v232 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_286;
                                v233 = v232 + 1;
                                v234 = *(char *)(*(_QWORD *)(a2 + *v10) + v232);
                                *(_QWORD *)(a2 + v231) = v233;
                                if ((v234 & 0x80000000) == 0)
                                  goto LABEL_287;
                                v235 = *v3;
                                v236 = *(_QWORD *)(a2 + v235);
                                if (v236 == -1 || v236 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_286;
                                v237 = v236 + 1;
                                v238 = *(char *)(*(_QWORD *)(a2 + *v10) + v236);
                                *(_QWORD *)(a2 + v235) = v237;
                                if ((v238 & 0x80000000) == 0)
                                  goto LABEL_287;
                                v239 = *v3;
                                v240 = *(_QWORD *)(a2 + v239);
                                if (v240 == -1 || v240 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_286;
                                v241 = v240 + 1;
                                v242 = *(char *)(*(_QWORD *)(a2 + *v10) + v240);
                                *(_QWORD *)(a2 + v239) = v241;
                                if ((v242 & 0x80000000) == 0)
                                  goto LABEL_287;
                                v243 = *v3;
                                v244 = *(_QWORD *)(a2 + v243);
                                if (v244 == -1 || v244 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_286;
                                v245 = v244 + 1;
                                v246 = *(char *)(*(_QWORD *)(a2 + *v10) + v244);
                                *(_QWORD *)(a2 + v243) = v245;
                                if (v246 < 0)
                                {
                                  v213 = 0;
                                  goto LABEL_289;
                                }
LABEL_287:
                                if (*(_BYTE *)(a2 + *v8))
                                  v213 = 0;
LABEL_289:
                                *(_DWORD *)(a1 + 32) = v213;
                                goto LABEL_4;
                              case 3u:
                                PBReaderReadString();
                                v11 = objc_claimAutoreleasedReturnValue();
                                v12 = *(void **)(a1 + 24);
                                *(_QWORD *)(a1 + 24) = v11;

                                goto LABEL_4;
                              case 4u:
                                *(_BYTE *)(a1 + 44) |= 4u;
                                v130 = *v3;
                                v131 = *(_QWORD *)(a2 + v130);
                                if (v131 == -1 || v131 >= *(_QWORD *)(a2 + *v6))
                                {
                                  v134 = 0;
LABEL_271:
                                  *(_BYTE *)(a2 + *v8) = 1;
                                  goto LABEL_272;
                                }
                                v132 = v131 + 1;
                                v133 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v131);
                                *(_QWORD *)(a2 + v130) = v132;
                                v134 = v133 & 0x7F;
                                if ((v133 & 0x80) == 0)
                                  goto LABEL_272;
                                v135 = *v3;
                                v136 = *(_QWORD *)(a2 + v135);
                                if (v136 == -1 || v136 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_271;
                                v137 = *(char *)(*(_QWORD *)(a2 + *v10) + v136);
                                *(_QWORD *)(a2 + v135) = v136 + 1;
                                v134 = v134 & 0xFFFFC07F | ((v137 & 0x7F) << 7);
                                if ((v137 & 0x80000000) == 0)
                                  goto LABEL_272;
                                v138 = *v3;
                                v139 = *(_QWORD *)(a2 + v138);
                                if (v139 == -1 || v139 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_271;
                                v140 = *(char *)(*(_QWORD *)(a2 + *v10) + v139);
                                *(_QWORD *)(a2 + v138) = v139 + 1;
                                v134 = v134 & 0xFFE03FFF | ((v140 & 0x7F) << 14);
                                if ((v140 & 0x80000000) == 0)
                                  goto LABEL_272;
                                v141 = *v3;
                                v142 = *(_QWORD *)(a2 + v141);
                                if (v142 == -1 || v142 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_271;
                                v143 = *(char *)(*(_QWORD *)(a2 + *v10) + v142);
                                *(_QWORD *)(a2 + v141) = v142 + 1;
                                v134 = v134 & 0xF01FFFFF | ((v143 & 0x7F) << 21);
                                if ((v143 & 0x80000000) == 0)
                                  goto LABEL_272;
                                v144 = *v3;
                                v145 = *(_QWORD *)(a2 + v144);
                                if (v145 == -1 || v145 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_271;
                                v146 = v145 + 1;
                                v147 = *(char *)(*(_QWORD *)(a2 + *v10) + v145);
                                *(_QWORD *)(a2 + v144) = v146;
                                v134 |= v147 << 28;
                                if ((v147 & 0x80000000) == 0)
                                  goto LABEL_272;
                                v148 = *v3;
                                v149 = *(_QWORD *)(a2 + v148);
                                if (v149 == -1 || v149 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_271;
                                v150 = v149 + 1;
                                v151 = *(char *)(*(_QWORD *)(a2 + *v10) + v149);
                                *(_QWORD *)(a2 + v148) = v150;
                                if ((v151 & 0x80000000) == 0)
                                  goto LABEL_272;
                                v152 = *v3;
                                v153 = *(_QWORD *)(a2 + v152);
                                if (v153 == -1 || v153 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_271;
                                v154 = v153 + 1;
                                v155 = *(char *)(*(_QWORD *)(a2 + *v10) + v153);
                                *(_QWORD *)(a2 + v152) = v154;
                                if ((v155 & 0x80000000) == 0)
                                  goto LABEL_272;
                                v156 = *v3;
                                v157 = *(_QWORD *)(a2 + v156);
                                if (v157 == -1 || v157 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_271;
                                v158 = v157 + 1;
                                v159 = *(char *)(*(_QWORD *)(a2 + *v10) + v157);
                                *(_QWORD *)(a2 + v156) = v158;
                                if ((v159 & 0x80000000) == 0)
                                  goto LABEL_272;
                                v160 = *v3;
                                v161 = *(_QWORD *)(a2 + v160);
                                if (v161 == -1 || v161 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_271;
                                v162 = v161 + 1;
                                v163 = *(char *)(*(_QWORD *)(a2 + *v10) + v161);
                                *(_QWORD *)(a2 + v160) = v162;
                                if ((v163 & 0x80000000) == 0)
                                  goto LABEL_272;
                                v164 = *v3;
                                v165 = *(_QWORD *)(a2 + v164);
                                if (v165 == -1 || v165 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_271;
                                v166 = v165 + 1;
                                v167 = *(char *)(*(_QWORD *)(a2 + *v10) + v165);
                                *(_QWORD *)(a2 + v164) = v166;
                                if (v167 < 0)
                                {
                                  v134 = 0;
                                  goto LABEL_274;
                                }
LABEL_272:
                                if (*(_BYTE *)(a2 + *v8))
                                  v134 = 0;
LABEL_274:
                                *(_DWORD *)(a1 + 16) = v134;
                                goto LABEL_4;
                              case 5u:
                                *(_BYTE *)(a1 + 44) |= 2u;
                                v92 = *v3;
                                v93 = *(_QWORD *)(a2 + v92);
                                if (v93 == -1 || v93 >= *(_QWORD *)(a2 + *v6))
                                {
                                  v96 = 0;
LABEL_266:
                                  *(_BYTE *)(a2 + *v8) = 1;
                                  goto LABEL_267;
                                }
                                v94 = v93 + 1;
                                v95 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v93);
                                *(_QWORD *)(a2 + v92) = v94;
                                v96 = v95 & 0x7F;
                                if ((v95 & 0x80) == 0)
                                  goto LABEL_267;
                                v97 = *v3;
                                v98 = *(_QWORD *)(a2 + v97);
                                if (v98 == -1 || v98 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_266;
                                v99 = *(char *)(*(_QWORD *)(a2 + *v10) + v98);
                                *(_QWORD *)(a2 + v97) = v98 + 1;
                                v96 = v96 & 0xFFFFC07F | ((v99 & 0x7F) << 7);
                                if ((v99 & 0x80000000) == 0)
                                  goto LABEL_267;
                                v100 = *v3;
                                v101 = *(_QWORD *)(a2 + v100);
                                if (v101 == -1 || v101 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_266;
                                v102 = *(char *)(*(_QWORD *)(a2 + *v10) + v101);
                                *(_QWORD *)(a2 + v100) = v101 + 1;
                                v96 = v96 & 0xFFE03FFF | ((v102 & 0x7F) << 14);
                                if ((v102 & 0x80000000) == 0)
                                  goto LABEL_267;
                                v103 = *v3;
                                v104 = *(_QWORD *)(a2 + v103);
                                if (v104 == -1 || v104 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_266;
                                v105 = *(char *)(*(_QWORD *)(a2 + *v10) + v104);
                                *(_QWORD *)(a2 + v103) = v104 + 1;
                                v96 = v96 & 0xF01FFFFF | ((v105 & 0x7F) << 21);
                                if ((v105 & 0x80000000) == 0)
                                  goto LABEL_267;
                                v106 = *v3;
                                v107 = *(_QWORD *)(a2 + v106);
                                if (v107 == -1 || v107 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_266;
                                v108 = v107 + 1;
                                v109 = *(char *)(*(_QWORD *)(a2 + *v10) + v107);
                                *(_QWORD *)(a2 + v106) = v108;
                                v96 |= v109 << 28;
                                if ((v109 & 0x80000000) == 0)
                                  goto LABEL_267;
                                v110 = *v3;
                                v111 = *(_QWORD *)(a2 + v110);
                                if (v111 == -1 || v111 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_266;
                                v112 = v111 + 1;
                                v113 = *(char *)(*(_QWORD *)(a2 + *v10) + v111);
                                *(_QWORD *)(a2 + v110) = v112;
                                if ((v113 & 0x80000000) == 0)
                                  goto LABEL_267;
                                v114 = *v3;
                                v115 = *(_QWORD *)(a2 + v114);
                                if (v115 == -1 || v115 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_266;
                                v116 = v115 + 1;
                                v117 = *(char *)(*(_QWORD *)(a2 + *v10) + v115);
                                *(_QWORD *)(a2 + v114) = v116;
                                if ((v117 & 0x80000000) == 0)
                                  goto LABEL_267;
                                v118 = *v3;
                                v119 = *(_QWORD *)(a2 + v118);
                                if (v119 == -1 || v119 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_266;
                                v120 = v119 + 1;
                                v121 = *(char *)(*(_QWORD *)(a2 + *v10) + v119);
                                *(_QWORD *)(a2 + v118) = v120;
                                if ((v121 & 0x80000000) == 0)
                                  goto LABEL_267;
                                v122 = *v3;
                                v123 = *(_QWORD *)(a2 + v122);
                                if (v123 == -1 || v123 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_266;
                                v124 = v123 + 1;
                                v125 = *(char *)(*(_QWORD *)(a2 + *v10) + v123);
                                *(_QWORD *)(a2 + v122) = v124;
                                if ((v125 & 0x80000000) == 0)
                                  goto LABEL_267;
                                v126 = *v3;
                                v127 = *(_QWORD *)(a2 + v126);
                                if (v127 == -1 || v127 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_266;
                                v128 = v127 + 1;
                                v129 = *(char *)(*(_QWORD *)(a2 + *v10) + v127);
                                *(_QWORD *)(a2 + v126) = v128;
                                if (v129 < 0)
                                {
                                  v96 = 0;
                                  goto LABEL_269;
                                }
LABEL_267:
                                if (*(_BYTE *)(a2 + *v8))
                                  v96 = 0;
LABEL_269:
                                *(_DWORD *)(a1 + 12) = v96;
                                goto LABEL_4;
                              case 6u:
                                *(_BYTE *)(a1 + 44) |= 1u;
                                v247 = *v3;
                                v248 = *(_QWORD *)(a2 + v247);
                                if (v248 == -1 || v248 >= *(_QWORD *)(a2 + *v6))
                                {
                                  v251 = 0;
LABEL_291:
                                  *(_BYTE *)(a2 + *v8) = 1;
                                  goto LABEL_292;
                                }
                                v249 = v248 + 1;
                                v250 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v248);
                                *(_QWORD *)(a2 + v247) = v249;
                                v251 = v250 & 0x7F;
                                if ((v250 & 0x80) == 0)
                                  goto LABEL_292;
                                v252 = *v3;
                                v253 = *(_QWORD *)(a2 + v252);
                                if (v253 == -1 || v253 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_291;
                                v254 = *(char *)(*(_QWORD *)(a2 + *v10) + v253);
                                *(_QWORD *)(a2 + v252) = v253 + 1;
                                v251 = v251 & 0xFFFFC07F | ((v254 & 0x7F) << 7);
                                if ((v254 & 0x80000000) == 0)
                                  goto LABEL_292;
                                v255 = *v3;
                                v256 = *(_QWORD *)(a2 + v255);
                                if (v256 == -1 || v256 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_291;
                                v257 = *(char *)(*(_QWORD *)(a2 + *v10) + v256);
                                *(_QWORD *)(a2 + v255) = v256 + 1;
                                v251 = v251 & 0xFFE03FFF | ((v257 & 0x7F) << 14);
                                if ((v257 & 0x80000000) == 0)
                                  goto LABEL_292;
                                v258 = *v3;
                                v259 = *(_QWORD *)(a2 + v258);
                                if (v259 == -1 || v259 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_291;
                                v260 = *(char *)(*(_QWORD *)(a2 + *v10) + v259);
                                *(_QWORD *)(a2 + v258) = v259 + 1;
                                v251 = v251 & 0xF01FFFFF | ((v260 & 0x7F) << 21);
                                if ((v260 & 0x80000000) == 0)
                                  goto LABEL_292;
                                v261 = *v3;
                                v262 = *(_QWORD *)(a2 + v261);
                                if (v262 == -1 || v262 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_291;
                                v263 = v262 + 1;
                                v264 = *(char *)(*(_QWORD *)(a2 + *v10) + v262);
                                *(_QWORD *)(a2 + v261) = v263;
                                v251 |= v264 << 28;
                                if ((v264 & 0x80000000) == 0)
                                  goto LABEL_292;
                                v265 = *v3;
                                v266 = *(_QWORD *)(a2 + v265);
                                if (v266 == -1 || v266 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_291;
                                v267 = v266 + 1;
                                v268 = *(char *)(*(_QWORD *)(a2 + *v10) + v266);
                                *(_QWORD *)(a2 + v265) = v267;
                                if ((v268 & 0x80000000) == 0)
                                  goto LABEL_292;
                                v269 = *v3;
                                v270 = *(_QWORD *)(a2 + v269);
                                if (v270 == -1 || v270 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_291;
                                v271 = v270 + 1;
                                v272 = *(char *)(*(_QWORD *)(a2 + *v10) + v270);
                                *(_QWORD *)(a2 + v269) = v271;
                                if ((v272 & 0x80000000) == 0)
                                  goto LABEL_292;
                                v273 = *v3;
                                v274 = *(_QWORD *)(a2 + v273);
                                if (v274 == -1 || v274 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_291;
                                v275 = v274 + 1;
                                v276 = *(char *)(*(_QWORD *)(a2 + *v10) + v274);
                                *(_QWORD *)(a2 + v273) = v275;
                                if ((v276 & 0x80000000) == 0)
                                  goto LABEL_292;
                                v277 = *v3;
                                v278 = *(_QWORD *)(a2 + v277);
                                if (v278 == -1 || v278 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_291;
                                v279 = v278 + 1;
                                v280 = *(char *)(*(_QWORD *)(a2 + *v10) + v278);
                                *(_QWORD *)(a2 + v277) = v279;
                                if ((v280 & 0x80000000) == 0)
                                  goto LABEL_292;
                                v281 = *v3;
                                v282 = *(_QWORD *)(a2 + v281);
                                if (v282 == -1 || v282 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_291;
                                v283 = v282 + 1;
                                v284 = *(char *)(*(_QWORD *)(a2 + *v10) + v282);
                                *(_QWORD *)(a2 + v281) = v283;
                                if (v284 < 0)
                                {
                                  v251 = 0;
                                  goto LABEL_294;
                                }
LABEL_292:
                                if (*(_BYTE *)(a2 + *v8))
                                  v251 = 0;
LABEL_294:
                                *(_DWORD *)(a1 + 8) = v251;
                                goto LABEL_4;
                              case 7u:
                                *(_BYTE *)(a1 + 44) |= 8u;
                                v285 = *v3;
                                v286 = *(_QWORD *)(a2 + v285);
                                if (v286 == -1 || v286 >= *(_QWORD *)(a2 + *v6))
                                {
                                  v289 = 0;
LABEL_296:
                                  *(_BYTE *)(a2 + *v8) = 1;
                                  goto LABEL_297;
                                }
                                v287 = v286 + 1;
                                v288 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v286);
                                *(_QWORD *)(a2 + v285) = v287;
                                v289 = v288 & 0x7F;
                                if ((v288 & 0x80) == 0)
                                  goto LABEL_297;
                                v290 = *v3;
                                v291 = *(_QWORD *)(a2 + v290);
                                if (v291 == -1 || v291 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_296;
                                v292 = *(char *)(*(_QWORD *)(a2 + *v10) + v291);
                                *(_QWORD *)(a2 + v290) = v291 + 1;
                                v289 = v289 & 0xFFFFC07F | ((v292 & 0x7F) << 7);
                                if ((v292 & 0x80000000) == 0)
                                  goto LABEL_297;
                                v293 = *v3;
                                v294 = *(_QWORD *)(a2 + v293);
                                if (v294 == -1 || v294 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_296;
                                v295 = *(char *)(*(_QWORD *)(a2 + *v10) + v294);
                                *(_QWORD *)(a2 + v293) = v294 + 1;
                                v289 = v289 & 0xFFE03FFF | ((v295 & 0x7F) << 14);
                                if ((v295 & 0x80000000) == 0)
                                  goto LABEL_297;
                                v296 = *v3;
                                v297 = *(_QWORD *)(a2 + v296);
                                if (v297 == -1 || v297 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_296;
                                v298 = *(char *)(*(_QWORD *)(a2 + *v10) + v297);
                                *(_QWORD *)(a2 + v296) = v297 + 1;
                                v289 = v289 & 0xF01FFFFF | ((v298 & 0x7F) << 21);
                                if ((v298 & 0x80000000) == 0)
                                  goto LABEL_297;
                                v299 = *v3;
                                v300 = *(_QWORD *)(a2 + v299);
                                if (v300 == -1 || v300 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_296;
                                v301 = v300 + 1;
                                v302 = *(char *)(*(_QWORD *)(a2 + *v10) + v300);
                                *(_QWORD *)(a2 + v299) = v301;
                                v289 |= v302 << 28;
                                if ((v302 & 0x80000000) == 0)
                                  goto LABEL_297;
                                v303 = *v3;
                                v304 = *(_QWORD *)(a2 + v303);
                                if (v304 == -1 || v304 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_296;
                                v305 = v304 + 1;
                                v306 = *(char *)(*(_QWORD *)(a2 + *v10) + v304);
                                *(_QWORD *)(a2 + v303) = v305;
                                if ((v306 & 0x80000000) == 0)
                                  goto LABEL_297;
                                v307 = *v3;
                                v308 = *(_QWORD *)(a2 + v307);
                                if (v308 == -1 || v308 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_296;
                                v309 = v308 + 1;
                                v310 = *(char *)(*(_QWORD *)(a2 + *v10) + v308);
                                *(_QWORD *)(a2 + v307) = v309;
                                if ((v310 & 0x80000000) == 0)
                                  goto LABEL_297;
                                v311 = *v3;
                                v312 = *(_QWORD *)(a2 + v311);
                                if (v312 == -1 || v312 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_296;
                                v313 = v312 + 1;
                                v314 = *(char *)(*(_QWORD *)(a2 + *v10) + v312);
                                *(_QWORD *)(a2 + v311) = v313;
                                if ((v314 & 0x80000000) == 0)
                                  goto LABEL_297;
                                v315 = *v3;
                                v316 = *(_QWORD *)(a2 + v315);
                                if (v316 == -1 || v316 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_296;
                                v317 = v316 + 1;
                                v318 = *(char *)(*(_QWORD *)(a2 + *v10) + v316);
                                *(_QWORD *)(a2 + v315) = v317;
                                if ((v318 & 0x80000000) == 0)
                                  goto LABEL_297;
                                v319 = *v3;
                                v320 = *(_QWORD *)(a2 + v319);
                                if (v320 == -1 || v320 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_296;
                                v321 = v320 + 1;
                                v322 = *(char *)(*(_QWORD *)(a2 + *v10) + v320);
                                *(_QWORD *)(a2 + v319) = v321;
                                if (v322 < 0)
                                {
                                  v289 = 0;
                                  goto LABEL_299;
                                }
LABEL_297:
                                if (*(_BYTE *)(a2 + *v8))
                                  v289 = 0;
LABEL_299:
                                *(_DWORD *)(a1 + 20) = v289;
                                goto LABEL_4;
                              case 8u:
                                *(_BYTE *)(a1 + 44) |= 0x40u;
                                v168 = *v3;
                                v169 = *(_QWORD *)(a2 + v168);
                                if (v169 == -1 || v169 >= *(_QWORD *)(a2 + *v6))
                                {
                                  v172 = 0;
LABEL_276:
                                  *(_BYTE *)(a2 + *v8) = 1;
                                  goto LABEL_277;
                                }
                                v170 = v169 + 1;
                                v171 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v169);
                                *(_QWORD *)(a2 + v168) = v170;
                                v172 = v171 & 0x7F;
                                if ((v171 & 0x80) == 0)
                                  goto LABEL_277;
                                v173 = *v3;
                                v174 = *(_QWORD *)(a2 + v173);
                                if (v174 == -1 || v174 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_276;
                                v175 = v174 + 1;
                                v176 = *(char *)(*(_QWORD *)(a2 + *v10) + v174);
                                *(_QWORD *)(a2 + v173) = v175;
                                v172 |= (unint64_t)(v176 & 0x7F) << 7;
                                if ((v176 & 0x80000000) == 0)
                                  goto LABEL_277;
                                v177 = *v3;
                                v178 = *(_QWORD *)(a2 + v177);
                                if (v178 == -1 || v178 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_276;
                                v179 = v178 + 1;
                                v180 = *(char *)(*(_QWORD *)(a2 + *v10) + v178);
                                *(_QWORD *)(a2 + v177) = v179;
                                v172 |= (unint64_t)(v180 & 0x7F) << 14;
                                if ((v180 & 0x80000000) == 0)
                                  goto LABEL_277;
                                v181 = *v3;
                                v182 = *(_QWORD *)(a2 + v181);
                                if (v182 == -1 || v182 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_276;
                                v183 = v182 + 1;
                                v184 = *(char *)(*(_QWORD *)(a2 + *v10) + v182);
                                *(_QWORD *)(a2 + v181) = v183;
                                v172 |= (unint64_t)(v184 & 0x7F) << 21;
                                if ((v184 & 0x80000000) == 0)
                                  goto LABEL_277;
                                v185 = *v3;
                                v186 = *(_QWORD *)(a2 + v185);
                                if (v186 == -1 || v186 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_276;
                                v187 = v186 + 1;
                                v188 = *(char *)(*(_QWORD *)(a2 + *v10) + v186);
                                *(_QWORD *)(a2 + v185) = v187;
                                v172 |= (unint64_t)(v188 & 0x7F) << 28;
                                if ((v188 & 0x80000000) == 0)
                                  goto LABEL_277;
                                v189 = *v3;
                                v190 = *(_QWORD *)(a2 + v189);
                                if (v190 == -1 || v190 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_276;
                                v191 = v190 + 1;
                                v192 = *(char *)(*(_QWORD *)(a2 + *v10) + v190);
                                *(_QWORD *)(a2 + v189) = v191;
                                v172 |= (unint64_t)(v192 & 0x7F) << 35;
                                if ((v192 & 0x80000000) == 0)
                                  goto LABEL_277;
                                v193 = *v3;
                                v194 = *(_QWORD *)(a2 + v193);
                                if (v194 == -1 || v194 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_276;
                                v195 = v194 + 1;
                                v196 = *(char *)(*(_QWORD *)(a2 + *v10) + v194);
                                *(_QWORD *)(a2 + v193) = v195;
                                v172 |= (unint64_t)(v196 & 0x7F) << 42;
                                if ((v196 & 0x80000000) == 0)
                                  goto LABEL_277;
                                v197 = *v3;
                                v198 = *(_QWORD *)(a2 + v197);
                                if (v198 == -1 || v198 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_276;
                                v199 = v198 + 1;
                                v200 = *(char *)(*(_QWORD *)(a2 + *v10) + v198);
                                *(_QWORD *)(a2 + v197) = v199;
                                v172 |= (unint64_t)(v200 & 0x7F) << 49;
                                if ((v200 & 0x80000000) == 0)
                                  goto LABEL_277;
                                v201 = *v3;
                                v202 = *(_QWORD *)(a2 + v201);
                                if (v202 == -1 || v202 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_276;
                                v203 = v202 + 1;
                                v204 = *(char *)(*(_QWORD *)(a2 + *v10) + v202);
                                *(_QWORD *)(a2 + v201) = v203;
                                v172 |= (unint64_t)(v204 & 0x7F) << 56;
                                if ((v204 & 0x80000000) == 0)
                                  goto LABEL_277;
                                v205 = *v3;
                                v206 = *(_QWORD *)(a2 + v205);
                                if (v206 == -1 || v206 >= *(_QWORD *)(a2 + *v6))
                                  goto LABEL_276;
                                v207 = v206 + 1;
                                v208 = *(unsigned __int8 *)(*(_QWORD *)(a2 + *v10) + v206);
                                *(_QWORD *)(a2 + v205) = v207;
                                if ((v208 & 0x80) != 0)
                                {
                                  v172 = 0;
                                  goto LABEL_279;
                                }
                                v172 |= v208 << 63;
LABEL_277:
                                if (*(_BYTE *)(a2 + *v8))
                                  v172 = 0;
LABEL_279:
                                *(_BYTE *)(a1 + 40) = v172 != 0;
LABEL_4:
                                v4 = *v3;
                                v5 = *(_QWORD *)(a2 + v4);
                                v7 = *(_QWORD *)(a2 + *v6);
                                if (v5 >= v7)
                                  return *(_BYTE *)(a2 + *v8) == 0;
                                continue;
                              default:
                                result = PBReaderSkipValueWithTag();
                                if (!(_DWORD)result)
                                  return result;
                                goto LABEL_4;
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          v13 = (_BYTE *)(a2 + *v8);
        }
        *v13 = 1;
        goto LABEL_39;
      }
      break;
    }
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

NWConcrete_nw_protocol_options *nw_http1_create_options()
{
  if (nw_protocol_copy_http1_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);
  return nw_protocol_create_options((void *)nw_protocol_copy_http1_definition_http1_definition);
}

BOOL __nw_protocol_copy_http1_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http1_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http1_identifier::http1_protocol_identifier);
  v1 = (void *)nw_protocol_copy_http1_definition_http1_definition;
  nw_protocol_copy_http1_definition_http1_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http1_definition_http1_definition, (uint64_t)nw_http1_allocate_options, (uint64_t)nw_http1_copy_options, (uint64_t)nw_http1_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http1_definition_http1_definition, (uint64_t)nw_http1_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http1_definition_http1_definition, 0, (uint64_t)nw_http1_serialize_options, (uint64_t)nw_http1_deserialize_options);
  if (nw_protocol_http1_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http1_identifier::onceToken, &__block_literal_global_39812);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_http1_identifier::http1_protocol_identifier, (void *)nw_protocol_copy_http1_definition_http1_definition, (uint64_t)nw_protocol_http1_create, (uint64_t)nw_protocol_http1_accept);
}

BOOL nw_http1_allocate_options(void *a1)
{
  id v1;
  _QWORD *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 8uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    *v2 = 0x60000001DLL;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http1_copy_options(void *a1, _QWORD *a2)
{
  id v3;
  _QWORD *v4;
  _BOOL8 result;
  void *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_http1_copy_options";
    v7 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7)
        free(v7);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http1_copy_options";
        v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_http1_copy_options";
            v19 = 2082;
            v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http1_copy_options";
        v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http1_copy_options";
        v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = malloc_type_calloc(1uLL, 8uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v18 = "strict_calloc";
  v19 = 2048;
  v20 = 1;
  v21 = 2048;
  v22 = 8;
  v12 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http1_deallocate_options(int a1, void *a2)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    free(a2);
    return;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_http1_deallocate_options";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http1_deallocate_options";
        v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_http1_deallocate_options";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http1_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http1_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
}

BOOL nw_http1_options_are_equal(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3)
      return *a2 == *a3;
  }
  return result;
}

BOOL nw_http1_serialize_options(void *a1, _QWORD *a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http1_copy_options(a1, a2);
    *a3 = 8;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http1_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http1_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http1_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http1_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http1_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http1_deserialize_options(void *a1, _QWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 8)
    {
      v7 = nw_http1_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http1_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http1_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http1_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options)), backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http1_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http1_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http1_options)), dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http1_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http1_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http1_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http1_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http1_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

id nw_protocol_copy_http1_definition()
{
  if (nw_protocol_copy_http1_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);
  return (id)nw_protocol_copy_http1_definition_http1_definition;
}

void nw_http1_set_idle_timeout(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http1_options(v3);
    nw_http1_set_idle_timeout(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http1(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http1_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http1_set_idle_timeout";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http1_set_idle_timeout";
        v9 = "%{public}s called with null nw_protocol_options_is_http1(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http1_set_idle_timeout";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http1_set_idle_timeout";
        v9 = "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http1_set_idle_timeout";
        v9 = "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

BOOL nw_protocol_options_is_http_messaging(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_messaging_definition_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_messaging";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_messaging";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_messaging";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_messaging";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_messaging";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

id nw_http_messaging_options_copy_http1_options(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v24 = __Block_byref_object_copy__4;
      v25 = __Block_byref_object_dispose__5;
      v26 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_messaging_options_copy_http1_options_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_messaging", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http1_options";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A1BFC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_http1(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http1_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http1_definition_http1_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http1";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http1";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http1";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http1";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http1";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

uint64_t __nw_http1_set_idle_timeout_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t __Block_byref_object_copy__4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5(uint64_t a1)
{

}

uint64_t __nw_http_messaging_options_copy_http1_options_block_invoke(uint64_t a1, id *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *a2);
  return 1;
}

BOOL __nw_protocol_copy_http_messaging_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_messaging_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_75867);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_messaging_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_messaging_definition_definition;
  nw_protocol_copy_http_messaging_definition_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_messaging_definition_definition, (uint64_t)nw_http_messaging_allocate_options, (uint64_t)nw_http_messaging_copy_options, (uint64_t)nw_http_messaging_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_http_messaging_definition_definition, (uint64_t)nw_http_messaging_options_compare);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_messaging_definition_definition, 0, (uint64_t)nw_http_messaging_serialize_options, (uint64_t)nw_http_messaging_deserialize_options);
  if (nw_protocol_http_messaging_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_messaging_identifier::onceToken, &__block_literal_global_75867);
  return nw_protocol_register_handle((uint64_t)nw_protocol_http_messaging_identifier::protocol_identifier, (void *)nw_protocol_copy_http_messaging_definition_definition, (uint64_t)nw_protocol_http_messaging_create, (uint64_t)nw_protocol_http_messaging_accept);
}

BOOL nw_http_messaging_allocate_options(void *a1)
{
  id v1;
  void **v2;
  NWConcrete_nw_protocol_options *options;
  void *v4;
  NWConcrete_nw_protocol_options *v5;
  void *v6;
  NWConcrete_nw_protocol_options *v7;
  void *v8;
  _BOOL8 result;
  NSObject *v10;
  void *v11;

  v1 = a1;
  v2 = (void **)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    v11 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v11);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v11);
  }
  if (nw_protocol_copy_http1_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http1_definition_onceToken, &__block_literal_global_72242);
  options = nw_protocol_create_options((void *)nw_protocol_copy_http1_definition_http1_definition);
  v4 = *v2;
  *v2 = options;

  if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);
  v5 = nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
  v6 = v2[1];
  v2[1] = v5;

  if (nw_protocol_copy_http3_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
  v7 = nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
  v8 = v2[2];
  v2[2] = v7;

  return (BOOL)v2;
}

BOOL nw_http_messaging_copy_options(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  NWConcrete_nw_protocol_options *v5;
  void *v6;
  void *v7;
  NWConcrete_nw_protocol_options *v8;
  void *v9;
  void *v10;
  NWConcrete_nw_protocol_options *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  _BOOL8 result;
  void *v18;
  void *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  NSObject *v23;
  void *v24;
  char *backtrace_string;
  _BOOL4 v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_http_messaging_copy_options";
    v19 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault((const char *)v19, &type, &v27))
    {
LABEL_31:
      if (v19)
        free(v19);
      v4 = 0;
      goto LABEL_12;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_messaging_copy_options";
        v22 = "%{public}s called with null existing_handle";
LABEL_29:
        _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      }
    }
    else
    {
      if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        v26 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_http_messaging_copy_options";
            v31 = 2082;
            v32 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }
        if (!v26)
          goto LABEL_30;
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_messaging_copy_options";
        v22 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_29;
      }
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_messaging_copy_options";
        v22 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_29;
      }
    }
LABEL_30:

    goto LABEL_31;
  }
  v4 = malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
    v5 = *(NWConcrete_nw_protocol_options **)a2;
    if (!*(_QWORD *)a2)
    {
LABEL_5:
      v6 = *(void **)v4;
      *(_QWORD *)v4 = v5;

      v7 = *(void **)(a2 + 8);
      if (v7)
      {
        v8 = nw_protocol_options_copy(v7);
        v9 = (void *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = v8;
      }
      else
      {
        v9 = (void *)*((_QWORD *)v4 + 1);
        *((_QWORD *)v4 + 1) = 0;
      }

      v10 = *(void **)(a2 + 16);
      if (v10)
      {
        v11 = nw_protocol_options_copy(v10);
        v12 = (void *)*((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = v11;
      }
      else
      {
        v12 = (void *)*((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 2) = 0;
      }

      objc_storeStrong((id *)v4 + 3, *(id *)(a2 + 24));
      v13 = _Block_copy(*(const void **)(a2 + 32));
      v14 = (void *)*((_QWORD *)v4 + 4);
      *((_QWORD *)v4 + 4) = v13;

      v15 = _Block_copy(*(const void **)(a2 + 40));
      v16 = (void *)*((_QWORD *)v4 + 5);
      *((_QWORD *)v4 + 5) = v15;

LABEL_12:
      return (BOOL)v4;
    }
LABEL_4:
    v5 = nw_protocol_options_copy(v5);
    goto LABEL_5;
  }
  __nwlog_obj();
  v23 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v23, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v30 = "strict_calloc";
  v31 = 2048;
  v32 = 1;
  v33 = 2048;
  v34 = 48;
  v24 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v24);
  if (!result)
  {
    free(v24);
    v5 = *(NWConcrete_nw_protocol_options **)a2;
    if (!*(_QWORD *)a2)
      goto LABEL_5;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void nw_http_messaging_deallocate_options(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *a2;
    *a2 = 0;

    v4 = a2[1];
    a2[1] = 0;

    v5 = a2[2];
    a2[2] = 0;

    v6 = a2[3];
    a2[3] = 0;

    v7 = a2[4];
    a2[4] = 0;

    v8 = a2[5];
    a2[5] = 0;

    free(a2);
    return;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_http_messaging_deallocate_options";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_http_messaging_deallocate_options";
        v13 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_http_messaging_deallocate_options";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v15)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_http_messaging_deallocate_options";
        v13 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_http_messaging_deallocate_options";
        v13 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v10)
    free(v10);
}

uint64_t nw_http_messaging_options_compare(void *a1, void **a2, void **a3)
{
  id v5;
  uint64_t is_equal;

  v5 = a1;
  is_equal = a2 == a3;
  if (a2 != a3 && a2 && a3)
  {
    if (nw_protocol_option_is_equal(*a2, *a3) && nw_protocol_option_is_equal(a2[1], a3[1]))
      is_equal = nw_protocol_option_is_equal(a2[2], a3[2]);
    else
      is_equal = 0;
  }

  return is_equal;
}

BOOL nw_http_messaging_serialize_options(void *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_messaging_copy_options(a1, a2);
    *a3 = 48;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_messaging_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_messaging_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_messaging_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_messaging_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_messaging_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_messaging_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 48)
    {
      v7 = nw_http_messaging_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_messaging_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_messaging_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_messaging_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options)), ba"
                "cktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_messaging_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_messaging_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_messaging_options)), dumpin"
            "g backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_messaging_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_messaging_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_messaging_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_messaging_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_messaging_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

BOOL __nw_protocol_copy_http3_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http3_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http3_identifier::http3_protocol_identifier);
  v1 = (void *)nw_protocol_copy_http3_definition_http3_definition;
  nw_protocol_copy_http3_definition_http3_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http3_definition_http3_definition, (uint64_t)nw_http3_allocate_options, (uint64_t)nw_http3_copy_options, (uint64_t)nw_http3_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http3_definition_http3_definition, (uint64_t)nw_http3_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http3_definition_http3_definition, 0, (uint64_t)nw_http3_serialize_options, (uint64_t)nw_http3_deserialize_options);
  if (nw_protocol_http3_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http3_identifier::onceToken, &__block_literal_global_10);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_http3_identifier::http3_protocol_identifier, (void *)nw_protocol_copy_http3_definition_http3_definition, (uint64_t)nw_protocol_http3_create, (uint64_t)nw_protocol_http3_accept);
}

BOOL nw_http3_allocate_options(void *a1)
{
  id v1;
  _DWORD *v2;
  void *v3;
  void *v4;
  void *v5;
  _BOOL8 result;
  NSObject *v7;
  void *v8;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v7 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v7, OS_LOG_TYPE_ERROR);
  v8 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v8);
  if (!result)
  {
    free(v8);
LABEL_2:
    v2[16] = 240;
    v2[18] = 2;
    *((_BYTE *)v2 + 77) &= ~1u;
    v3 = (void *)*((_QWORD *)v2 + 6);
    *((_QWORD *)v2 + 6) = 0;

    v4 = (void *)*((_QWORD *)v2 + 7);
    *((_QWORD *)v2 + 7) = 0;

    v5 = (void *)*((_QWORD *)v2 + 5);
    *((_QWORD *)v2 + 5) = 0;

    v2[17] = 0;
    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http3_copy_options(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  _BOOL8 result;
  void *v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v16;
  void *v17;
  char *backtrace_string;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_http3_copy_options";
    v12 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v20))
    {
LABEL_22:
      if (v12)
        free(v12);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_http3_copy_options";
        v15 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v19 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v23 = "nw_http3_copy_options";
            v24 = 2082;
            v25 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v19)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_http3_copy_options";
        v15 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_http3_copy_options";
        v15 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = malloc_type_calloc(1uLL, 0x50uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *((_DWORD *)v4 + 16) = *(_DWORD *)(a2 + 64);
    *((_DWORD *)v4 + 18) = *(_DWORD *)(a2 + 72);
    *((_OWORD *)v4 + 1) = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v4 + 4) = *(_QWORD *)(a2 + 32);
    v5 = *((_BYTE *)v4 + 77) & 0xFE | *(_BYTE *)(a2 + 77) & 1;
    *((_BYTE *)v4 + 77) = v5;
    *((_BYTE *)v4 + 77) = v5 & 0xFD | *(_BYTE *)(a2 + 77) & 2;
    *((_BYTE *)v4 + 76) = *(_BYTE *)(a2 + 76);
    v6 = _Block_copy(*(const void **)(a2 + 48));
    v7 = (void *)*((_QWORD *)v4 + 6);
    *((_QWORD *)v4 + 6) = v6;

    objc_storeStrong((id *)v4 + 7, *(id *)(a2 + 56));
    v8 = _Block_copy(*(const void **)(a2 + 40));
    v9 = (void *)*((_QWORD *)v4 + 5);
    *((_QWORD *)v4 + 5) = v8;

    *((_DWORD *)v4 + 17) = *(_DWORD *)(a2 + 68);
    *(_OWORD *)v4 = *(_OWORD *)a2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v16 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v23 = "strict_calloc";
  v24 = 2048;
  v25 = 1;
  v26 = 2048;
  v27 = 80;
  v17 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v17);
  if (!result)
  {
    free(v17);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http3_deallocate_options(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = (void *)a2[6];
    a2[6] = 0;

    v4 = (void *)a2[7];
    a2[7] = 0;

    v5 = (void *)a2[5];
    a2[5] = 0;

    free(a2);
    return;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_http3_deallocate_options";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http3_deallocate_options";
        v10 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_http3_deallocate_options";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v12)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http3_deallocate_options";
        v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http3_deallocate_options";
        v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v7)
    free(v7);
}

BOOL nw_http3_options_are_equal(int a1, void *__s1, void *__s2)
{
  _BOOL8 result;

  result = __s1 == __s2;
  if (__s1 != __s2 && __s1)
  {
    if (__s2)
      return memcmp(__s1, __s2, 0x50uLL) == 0;
  }
  return result;
}

uint64_t nw_http3_serialize_options(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v4;
  void *v5;
  void *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v4 = nw_http3_copy_options(a1, a2);
    v5 = *(void **)(v4 + 48);
    *(_QWORD *)(v4 + 48) = 0;

    v6 = *(void **)(v4 + 56);
    *(_QWORD *)(v4 + 56) = 0;

    *a3 = 80;
    return v4;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_http3_serialize_options";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v9, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http3_serialize_options";
        v12 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_http3_serialize_options";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v14)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http3_serialize_options";
        v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http3_serialize_options";
        v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v9)
    free(v9);
  return 0;
}

BOOL nw_http3_deserialize_options(void *a1, _OWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  __int128 v7;
  __int128 v8;
  _BOOL8 v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  void *v16;
  char *backtrace_string;
  _BOOL4 v18;
  const char *v19;
  _BOOL4 v20;
  char v21;
  os_log_type_t type;
  _BYTE buf[32];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 80)
    {
      v7 = a2[3];
      v24 = a2[2];
      v25 = v7;
      v26 = a2[4];
      v8 = a2[1];
      *(_OWORD *)buf = *a2;
      *(_OWORD *)&buf[16] = v8;
      v9 = nw_http3_copy_options(v5, (uint64_t)buf);
      goto LABEL_4;
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
          v15 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v21)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
          v15 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options)), backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v20 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
          v15 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v20)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v19 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http3_options)), dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v13, v14, v19, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v12, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
          v15 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v21)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
          v15 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v18 = os_log_type_enabled(v13, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
          v15 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http3_deserialize_options";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      v19 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v12)
    free(v12);
  v9 = 0;
LABEL_4:

  return v9;
}

BOOL __nw_protocol_copy_http2_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http2_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_83230);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http2_identifier::http2_protocol_identifier);
  v1 = (void *)nw_protocol_copy_http2_definition_http2_definition;
  nw_protocol_copy_http2_definition_http2_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http2_definition_http2_definition, (uint64_t)nw_http2_allocate_options, (uint64_t)nw_http2_copy_options, (uint64_t)nw_http2_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http2_definition_http2_definition, (uint64_t)nw_http2_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http2_definition_http2_definition, 0, (uint64_t)nw_http2_serialize_options, (uint64_t)nw_http2_deserialize_options);
  if (nw_protocol_http2_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http2_identifier::onceToken, &__block_literal_global_83230);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_http2_identifier::http2_protocol_identifier, (void *)nw_protocol_copy_http2_definition_http2_definition, (uint64_t)nw_protocol_http2_create, (uint64_t)nw_protocol_http2_accept);
}

BOOL nw_http2_allocate_options(void *a1)
{
  id v1;
  _DWORD *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:
    v2[2] = 240;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http2_copy_options(void *a1, uint64_t a2)
{
  id v3;
  char *v4;
  void *v5;
  void *v6;
  _BOOL8 result;
  void *v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  NSObject *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_http2_copy_options";
    v9 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault((const char *)v9, &type, &v17))
    {
LABEL_22:
      if (v9)
        free(v9);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http2_copy_options";
        v12 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_http2_copy_options";
            v21 = 2082;
            v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v16)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http2_copy_options";
        v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http2_copy_options";
        v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = (char *)malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a2 + 8);
    v4[24] = v4[24] & 0xFE | *(_BYTE *)(a2 + 24) & 1;
    v5 = _Block_copy(*(const void **)a2);
    v6 = *(void **)v4;
    *(_QWORD *)v4 = v5;

LABEL_4:
    return (BOOL)v4;
  }
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v20 = "strict_calloc";
  v21 = 2048;
  v22 = 1;
  v23 = 2048;
  v24 = 32;
  v14 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http2_deallocate_options(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *a2;
    *a2 = 0;

    free(a2);
    return;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_http2_deallocate_options";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http2_deallocate_options";
        v8 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "nw_http2_deallocate_options";
            v15 = 2082;
            v16 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v10)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http2_deallocate_options";
        v8 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http2_deallocate_options";
        v8 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v5)
    free(v5);
}

BOOL nw_http2_options_are_equal(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2 && a3)
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3];
  return result;
}

BOOL nw_http2_serialize_options(void *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http2_copy_options(a1, a2);
    *a3 = 32;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http2_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http2_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http2_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http2_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http2_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http2_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 32)
    {
      v7 = nw_http2_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http2_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http2_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http2_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options)), backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http2_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http2_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http2_options)), dumping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http2_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http2_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http2_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http2_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http2_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

uint64_t nw_http1_get_idle_timeout(void *a1)
{
  id v1;
  id v2;
  uint64_t idle_timeout;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http1_options(v1);
    idle_timeout = nw_http1_get_idle_timeout();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http1(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v17 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http1_get_idle_timeout_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    idle_timeout = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_get_idle_timeout";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_idle_timeout";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http1(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_idle_timeout";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_idle_timeout";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_idle_timeout";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  idle_timeout = 0;
LABEL_5:

  return idle_timeout;
}

void sub_183A1F510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http1_get_idle_timeout_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

void nw_http1_set_connection_pool_width(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http1_options(v3);
    nw_http1_set_connection_pool_width(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http1(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http1_set_connection_pool_width_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http1_set_connection_pool_width";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http1_set_connection_pool_width";
        v9 = "%{public}s called with null nw_protocol_options_is_http1(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http1_set_connection_pool_width";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http1_set_connection_pool_width";
        v9 = "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http1_set_connection_pool_width";
        v9 = "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http1_set_connection_pool_width_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http1_get_connection_pool_width(void *a1)
{
  id v1;
  id v2;
  uint64_t connection_pool_width;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http1_options(v1);
    connection_pool_width = nw_http1_get_connection_pool_width();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http1(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v17 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http1_get_connection_pool_width_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    connection_pool_width = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http1_get_connection_pool_width";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_pool_width";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http1(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http1_get_connection_pool_width";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http1(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_pool_width";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http1(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http1_get_connection_pool_width";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http1(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  connection_pool_width = 0;
LABEL_5:

  return connection_pool_width;
}

void sub_183A1FB44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http1_get_connection_pool_width_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  return 1;
}

NWConcrete_nw_protocol_options *nw_http2_create_options()
{
  if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);
  return nw_protocol_create_options((void *)nw_protocol_copy_http2_definition_http2_definition);
}

id nw_protocol_copy_http2_definition()
{
  if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
    dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);
  return (id)nw_protocol_copy_http2_definition_http2_definition;
}

void nw_http2_set_capsule_handling_disabled(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_capsule_handling_disabled(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_capsule_handling_disabled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http2_set_capsule_handling_disabled";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_capsule_handling_disabled";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http2_set_capsule_handling_disabled";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_capsule_handling_disabled";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_capsule_handling_disabled";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

id nw_http_messaging_options_copy_http2_options(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v24 = __Block_byref_object_copy__4;
      v25 = __Block_byref_object_dispose__5;
      v26 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_messaging_options_copy_http2_options_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_messaging", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http2_options";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A2042C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_http2(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http2_definition_onceToken[0] != -1)
      dispatch_once(nw_protocol_copy_http2_definition_onceToken, &__block_literal_global_3_72325);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http2_definition_http2_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http2";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http2";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http2";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http2";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http2";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

uint64_t __nw_http2_set_capsule_handling_disabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_messaging_options_copy_http2_options_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 8));
  return 1;
}

uint64_t nw_http2_get_capsule_handling_disabled(void *a1)
{
  id v1;
  id v2;
  uint64_t capsule_handling_disabled;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http2_options(v1);
    capsule_handling_disabled = nw_http2_get_capsule_handling_disabled();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v17 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_capsule_handling_disabled_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    capsule_handling_disabled = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http2_get_capsule_handling_disabled";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_capsule_handling_disabled";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http2_get_capsule_handling_disabled";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_capsule_handling_disabled";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_capsule_handling_disabled";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  capsule_handling_disabled = 0;
LABEL_5:

  return capsule_handling_disabled;
}

void sub_183A20AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_capsule_handling_disabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 24) & 1;
  return 1;
}

void nw_http2_set_idle_timeout(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_idle_timeout(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http2_set_idle_timeout";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_idle_timeout";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http2_set_idle_timeout";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_idle_timeout";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_idle_timeout";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http2_set_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http2_get_idle_timeout(void *a1)
{
  id v1;
  id v2;
  uint64_t idle_timeout;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http2_options(v1);
    idle_timeout = nw_http2_get_idle_timeout();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v17 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_idle_timeout_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    idle_timeout = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http2_get_idle_timeout";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_idle_timeout";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http2_get_idle_timeout";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_idle_timeout";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_idle_timeout";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  idle_timeout = 0;
LABEL_5:

  return idle_timeout;
}

void sub_183A210E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 8);
  return 1;
}

void nw_http2_set_stream_receive_window_size(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_stream_receive_window_size(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_stream_receive_window_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http2_set_stream_receive_window_size";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_stream_receive_window_size";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http2_set_stream_receive_window_size";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_stream_receive_window_size";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_stream_receive_window_size";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http2_set_stream_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http2_get_stream_receive_window_size(void *a1)
{
  id v1;
  id v2;
  uint64_t stream_receive_window_size;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http2_options(v1);
    stream_receive_window_size = nw_http2_get_stream_receive_window_size();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v17 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_stream_receive_window_size_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    stream_receive_window_size = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http2_get_stream_receive_window_size";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_stream_receive_window_size";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http2_get_stream_receive_window_size";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_stream_receive_window_size";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_stream_receive_window_size";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  stream_receive_window_size = 0;
LABEL_5:

  return stream_receive_window_size;
}

void sub_183A21714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_stream_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 12);
  return 1;
}

void nw_http2_set_connection_receive_window_size(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_connection_receive_window_size(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_connection_receive_window_size_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http2_set_connection_receive_window_size";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_connection_receive_window_size";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http2_set_connection_receive_window_size";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_connection_receive_window_size";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_connection_receive_window_size";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http2_set_connection_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http2_get_connection_receive_window_size(void *a1)
{
  id v1;
  id v2;
  uint64_t connection_receive_window_size;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http2_options(v1);
    connection_receive_window_size = nw_http2_get_connection_receive_window_size();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v17 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_connection_receive_window_size_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    connection_receive_window_size = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http2_get_connection_receive_window_size";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_connection_receive_window_size";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http2_get_connection_receive_window_size";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_connection_receive_window_size";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_connection_receive_window_size";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  connection_receive_window_size = 0;
LABEL_5:

  return connection_receive_window_size;
}

void sub_183A21D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_connection_receive_window_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 16);
  return 1;
}

void *nw_http2_copy_reset_stream_error_callback(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  void *(*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http2_options(v1);
    v3 = (void *)nw_http2_copy_reset_stream_error_callback();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v17 = __Block_byref_object_copy__72473;
    v18 = __Block_byref_object_dispose__72474;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_copy_reset_stream_error_callback_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    v3 = _Block_copy(*(const void **)(*(_QWORD *)&buf[8] + 40));
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http2_copy_reset_stream_error_callback";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_copy_reset_stream_error_callback";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http2_copy_reset_stream_error_callback";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_copy_reset_stream_error_callback";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_copy_reset_stream_error_callback";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_5:

  return v3;
}

void sub_183A220C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void *__Block_byref_object_copy__72473(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__72474(uint64_t a1)
{

}

uint64_t __nw_http2_copy_reset_stream_error_callback_block_invoke(uint64_t a1, const void **a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = _Block_copy(*a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void nw_http2_set_reset_stream_error_callback(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  _QWORD v13[4];
  id v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v5 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_reset_stream_error_callback(v5, v4);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_set_reset_stream_error_callback_block_invoke;
    v13[3] = &unk_1E14A9DD0;
    v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_http2_set_reset_stream_error_callback";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http2_set_reset_stream_error_callback";
        v10 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_http2_set_reset_stream_error_callback";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v12)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http2_set_reset_stream_error_callback";
        v10 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http2_set_reset_stream_error_callback";
        v10 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v7)
    free(v7);
LABEL_5:

}

uint64_t __nw_http2_set_reset_stream_error_callback_block_invoke(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;

  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = *a2;
  *a2 = v3;

  return 1;
}

void nw_http2_set_local_max_webtransport_sessions(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http2_options(v3);
    nw_http2_set_local_max_webtransport_sessions(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http2_set_local_max_webtransport_sessions_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http2_set_local_max_webtransport_sessions";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_local_max_webtransport_sessions";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http2_set_local_max_webtransport_sessions";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_local_max_webtransport_sessions";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http2_set_local_max_webtransport_sessions";
        v9 = "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http2_set_local_max_webtransport_sessions_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 20) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http2_get_local_max_webtransport_sessions(void *a1)
{
  id v1;
  id v2;
  uint64_t local_max_webtransport_sessions;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http2_options(v1);
    local_max_webtransport_sessions = nw_http2_get_local_max_webtransport_sessions();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http2(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v17 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http2_get_local_max_webtransport_sessions_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    local_max_webtransport_sessions = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http2_get_local_max_webtransport_sessions";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_local_max_webtransport_sessions";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http2(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http2_get_local_max_webtransport_sessions";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_local_max_webtransport_sessions";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http2(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http2_get_local_max_webtransport_sessions";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http2(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  local_max_webtransport_sessions = 0;
LABEL_5:

  return local_max_webtransport_sessions;
}

void sub_183A22A68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http2_get_local_max_webtransport_sessions_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 20);
  return 1;
}

NWConcrete_nw_protocol_options *nw_http3_create_options()
{
  if (nw_protocol_copy_http3_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
  return nw_protocol_create_options((void *)nw_protocol_copy_http3_definition_http3_definition);
}

id nw_protocol_copy_http3_definition()
{
  if (nw_protocol_copy_http3_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
  return (id)nw_protocol_copy_http3_definition_http3_definition;
}

void nw_http3_set_idle_timeout(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_idle_timeout(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_idle_timeout_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http3_set_idle_timeout";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_idle_timeout";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http3_set_idle_timeout";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_idle_timeout";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_idle_timeout";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

id nw_http_messaging_options_copy_http3_options(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v24 = __Block_byref_object_copy__4;
      v25 = __Block_byref_object_dispose__5;
      v26 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_messaging_options_copy_http3_options_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_messaging", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_http3_options";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A23350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_http3(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http3_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http3_definition_http3_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http3";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http3";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http3";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http3";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http3";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

uint64_t __nw_http3_set_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_messaging_options_copy_http3_options_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 16));
  return 1;
}

uint64_t nw_http3_get_idle_timeout(void *a1)
{
  id v1;
  id v2;
  uint64_t idle_timeout;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http3_options(v1);
    idle_timeout = nw_http3_get_idle_timeout();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v17 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_get_idle_timeout_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    idle_timeout = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_get_idle_timeout";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_idle_timeout";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_get_idle_timeout";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_idle_timeout";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_idle_timeout";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  idle_timeout = 0;
LABEL_5:

  return idle_timeout;
}

void sub_183A239B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_idle_timeout_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 64);
  return 1;
}

void nw_http3_set_keepalive_mode(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_keepalive_mode(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_keepalive_mode_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http3_set_keepalive_mode";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_keepalive_mode";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http3_set_keepalive_mode";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_keepalive_mode";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_keepalive_mode";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http3_set_keepalive_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 72) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http3_get_keepalive_mode(void *a1)
{
  id v1;
  id v2;
  uint64_t keepalive_mode;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  char v15;
  os_log_type_t type;
  _BYTE buf[24];
  int v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http3_options(v1);
    keepalive_mode = nw_http3_get_keepalive_mode();

    goto LABEL_14;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v18 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_http3_get_keepalive_mode_block_invoke;
    v14[3] = &unk_1E14A9D68;
    v14[4] = buf;
    nw_protocol_options_access_handle(v1, v14);
    v4 = *(_QWORD *)&buf[8];
    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24) == 1)
    {
      if (nw_utilities_get_self_is_daemon::onceToken != -1)
        dispatch_once(&nw_utilities_get_self_is_daemon::onceToken, &__block_literal_global_33);
      if (nw_utilities_get_self_is_daemon::is_daemon)
      {
        if (nw_http3_self_is_media_daemon_onceToken != -1)
          dispatch_once(&nw_http3_self_is_media_daemon_onceToken, &__block_literal_global_77);
        v4 = *(_QWORD *)&buf[8];
        if (!nw_http3_self_is_media_daemon_is_media_daemon)
          *(_DWORD *)(*(_QWORD *)&buf[8] + 24) = 2;
      }
      else
      {
        v4 = *(_QWORD *)&buf[8];
      }
    }
    keepalive_mode = *(unsigned int *)(v4 + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_14;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_get_keepalive_mode";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_keepalive_mode";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_get_keepalive_mode";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_31;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_keepalive_mode";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_keepalive_mode";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_31:
  if (v7)
    free(v7);
  keepalive_mode = 0;
LABEL_14:

  return keepalive_mode;
}

void sub_183A24074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_keepalive_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 72);
  return 1;
}

uint64_t __nw_http3_self_is_media_daemon_block_invoke()
{
  const char *v0;
  uint64_t result;
  BOOL v2;

  if (nw_utilities_get_self_name::onceToken != -1)
    dispatch_once(&nw_utilities_get_self_name::onceToken, &__block_literal_global_8_44028);
  v0 = (const char *)nw_utilities_get_self_name::name;
  result = strcmp((const char *)nw_utilities_get_self_name::name, "mediaserverd");
  if ((_DWORD)result)
  {
    result = strcmp(v0, "mediaplaybackd");
    v2 = (_DWORD)result == 0;
  }
  else
  {
    v2 = 1;
  }
  nw_http3_self_is_media_daemon_is_media_daemon = v2;
  return result;
}

void nw_http3_set_0rtt_enabled(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_0rtt_enabled(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_0rtt_enabled_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http3_set_0rtt_enabled";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_0rtt_enabled";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http3_set_0rtt_enabled";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_0rtt_enabled";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_0rtt_enabled";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http3_set_0rtt_enabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 77) = *(_BYTE *)(a2 + 77) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

uint64_t nw_http3_get_0rtt_enabled(void *a1)
{
  id v1;
  id v2;
  uint64_t _0rtt_enabled;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http3_options(v1);
    _0rtt_enabled = nw_http3_get_0rtt_enabled();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v17 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_get_0rtt_enabled_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    _0rtt_enabled = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_get_0rtt_enabled";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_0rtt_enabled";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_get_0rtt_enabled";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_0rtt_enabled";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_0rtt_enabled";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  _0rtt_enabled = 0;
LABEL_5:

  return _0rtt_enabled;
}

void sub_183A24740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_0rtt_enabled_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 77) & 1;
  return 1;
}

void nw_http3_set_resumable_session_handler(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  _QWORD v18[4];
  id v19;
  id v20;
  char v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a3;
  v9 = a4;
  if (nw_protocol_options_is_http_messaging(v7))
  {
    v10 = nw_http_messaging_options_copy_http3_options(v7);
    nw_http3_set_resumable_session_handler(v10, a2, v8, v9);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v7))
  {
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 3221225472;
    v18[2] = __nw_http3_set_resumable_session_handler_block_invoke;
    v18[3] = &unk_1E14A9E18;
    v20 = v9;
    v19 = v8;
    v21 = a2;
    nw_protocol_options_access_handle(v7, v18);

    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_http3_set_resumable_session_handler";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v12, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http3_set_resumable_session_handler";
        v15 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v25 = "nw_http3_set_resumable_session_handler";
            v26 = 2082;
            v27 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v17)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http3_set_resumable_session_handler";
        v15 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http3_set_resumable_session_handler";
        v15 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v12)
    free(v12);
LABEL_5:

}

uint64_t __nw_http3_set_resumable_session_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = _Block_copy(*(const void **)(a1 + 40));
  v5 = *(void **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v4;

  objc_storeStrong((id *)(a2 + 56), *(id *)(a1 + 32));
  *(_BYTE *)(a2 + 76) = *(_BYTE *)(a1 + 48);
  return 1;
}

void *nw_http3_copy_resumable_session_handler(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  void *(*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http3_options(v1);
    v3 = (void *)nw_http3_copy_resumable_session_handler();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v17 = __Block_byref_object_copy__72473;
    v18 = __Block_byref_object_dispose__72474;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_copy_resumable_session_handler_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    v3 = _Block_copy(*(const void **)(*(_QWORD *)&buf[8] + 40));
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_5:

  return v3;
}

void sub_183A24E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_copy_resumable_session_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = _Block_copy(*(const void **)(a2 + 48));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

id nw_http3_copy_resumable_session_handler_queue(void *a1)
{
  id v1;
  id v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http3_options(v1);
    v3 = (id)nw_http3_copy_resumable_session_handler_queue();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v17 = __Block_byref_object_copy__4;
    v18 = __Block_byref_object_dispose__5;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_copy_resumable_session_handler_queue_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    v3 = *(id *)(*(_QWORD *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler_queue";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler_queue";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler_queue";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_copy_resumable_session_handler_queue";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_5:

  return v3;
}

void sub_183A251D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_copy_resumable_session_handler_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 56));
  return 1;
}

uint64_t nw_http3_get_sessions_to_request(void *a1)
{
  id v1;
  id v2;
  uint64_t sessions_to_request;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http3_options(v1);
    sessions_to_request = nw_http3_get_sessions_to_request();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v17 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_get_sessions_to_request_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    sessions_to_request = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_get_sessions_to_request";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_sessions_to_request";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_get_sessions_to_request";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_sessions_to_request";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_sessions_to_request";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  sessions_to_request = 0;
LABEL_5:

  return sessions_to_request;
}

void sub_183A2553C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_sessions_to_request_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 76);
  return 1;
}

void nw_http3_set_resumable_session_agent(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_resumable_session_agent(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_resumable_session_agent_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_http3_set_resumable_session_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http3_set_resumable_session_agent";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_http3_set_resumable_session_agent";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http3_set_resumable_session_agent";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http3_set_resumable_session_agent";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http3_set_resumable_session_agent_block_invoke(uint64_t a1, _OWORD *a2)
{
  *a2 = *(_OWORD *)*(_QWORD *)(a1 + 32);
  return 1;
}

void nw_http3_get_resumable_session_agent(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_get_resumable_session_agent(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_get_resumable_session_agent_block_invoke;
    v12[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v12[4] = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_http3_get_resumable_session_agent";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http3_get_resumable_session_agent";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_http3_get_resumable_session_agent";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http3_get_resumable_session_agent";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http3_get_resumable_session_agent";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http3_get_resumable_session_agent_block_invoke(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)*(_QWORD *)(a1 + 32) = *a2;
  return 1;
}

void nw_http3_set_initial_remote_settings(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  _QWORD v16[7];
  char v17;
  os_log_type_t v18;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  if (nw_protocol_options_is_http_messaging(v7))
  {
    v8 = nw_http_messaging_options_copy_http3_options(v7);
    nw_http3_set_initial_remote_settings(v8, a2, a3, a4);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v7))
  {
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __nw_http3_set_initial_remote_settings_block_invoke;
    v16[3] = &__block_descriptor_56_e9_B16__0_v8l;
    v16[4] = a2;
    v16[5] = a3;
    v16[6] = a4;
    nw_protocol_options_access_handle(v7, v16);
    goto LABEL_5;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_http3_set_initial_remote_settings";
  v10 = (char *)_os_log_send_and_compose_impl();

  v18 = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &v18, &v17))
  {
    if (v18 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = v18;
      if (os_log_type_enabled(v11, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http3_set_initial_remote_settings";
        v13 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = v18;
        v15 = os_log_type_enabled(v11, v18);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_http3_set_initial_remote_settings";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v15)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http3_set_initial_remote_settings";
        v13 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = v18;
      if (os_log_type_enabled(v11, v18))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http3_set_initial_remote_settings";
        v13 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v10)
    free(v10);
LABEL_5:

}

uint64_t __nw_http3_set_initial_remote_settings_block_invoke(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) = a1[4];
  *(_QWORD *)(a2 + 24) = a1[5];
  *(_QWORD *)(a2 + 32) = a1[6];
  *(_BYTE *)(a2 + 77) |= 2u;
  return 1;
}

uint64_t nw_http3_get_initial_remote_settings(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  uint64_t initial_remote_settings;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  void *v16;
  void *v17;
  void *v18;
  char *backtrace_string;
  _BOOL4 v20;
  const char *v21;
  _BOOL4 v22;
  _BOOL4 v23;
  _BOOL4 v24;
  _QWORD v25[7];
  char v26;
  os_log_type_t v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  if (nw_protocol_options_is_http_messaging(v7))
  {
    v8 = nw_http_messaging_options_copy_http3_options(v7);
    initial_remote_settings = nw_http3_get_initial_remote_settings(v8, a2, a3, a4);

    goto LABEL_8;
  }
  if (!nw_protocol_options_is_http3(v7))
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http3_get_initial_remote_settings";
    v12 = (char *)_os_log_send_and_compose_impl();

    v27 = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v12, &v27, &v26))
      goto LABEL_61;
    if (v27 != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = v27;
        if (os_log_type_enabled(v13, v27))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http3_get_initial_remote_settings";
          v15 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v27;
      v20 = os_log_type_enabled(v13, v27);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http3_get_initial_remote_settings";
          v15 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      if (!v20)
        goto LABEL_42;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_http3_get_initial_remote_settings";
      v30 = 2082;
      v31 = backtrace_string;
      v21 = "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s";
      goto LABEL_41;
    }
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v27;
    if (!os_log_type_enabled(v13, v27))
      goto LABEL_60;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http3_get_initial_remote_settings";
    v15 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_59:
    _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
    goto LABEL_60;
  }
  if (!a2)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http3_get_initial_remote_settings";
    v12 = (char *)_os_log_send_and_compose_impl();

    v27 = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v12, &v27, &v26))
      goto LABEL_61;
    if (v27 != OS_LOG_TYPE_FAULT)
    {
      if (!v26)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = v27;
        if (os_log_type_enabled(v13, v27))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http3_get_initial_remote_settings";
          v15 = "%{public}s called with null max_field_section_size, backtrace limit exceeded";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v27;
      v22 = os_log_type_enabled(v13, v27);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http3_get_initial_remote_settings";
          v15 = "%{public}s called with null max_field_section_size, no backtrace";
          goto LABEL_59;
        }
        goto LABEL_60;
      }
      if (!v22)
        goto LABEL_42;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_http3_get_initial_remote_settings";
      v30 = 2082;
      v31 = backtrace_string;
      v21 = "%{public}s called with null max_field_section_size, dumping backtrace:%{public}s";
      goto LABEL_41;
    }
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v27;
    if (!os_log_type_enabled(v13, v27))
      goto LABEL_60;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http3_get_initial_remote_settings";
    v15 = "%{public}s called with null max_field_section_size";
    goto LABEL_59;
  }
  if (a3)
  {
    if (a4)
    {
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 3221225472;
      v25[2] = __nw_http3_get_initial_remote_settings_block_invoke;
      v25[3] = &__block_descriptor_56_e9_B16__0_v8l;
      v25[4] = a2;
      v25[5] = a3;
      v25[6] = a4;
      initial_remote_settings = nw_protocol_options_access_handle(v7, v25);
      goto LABEL_8;
    }
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http3_get_initial_remote_settings";
    v12 = (char *)_os_log_send_and_compose_impl();

    v27 = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v12, &v27, &v26))
      goto LABEL_61;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http3_get_initial_remote_settings";
        v15 = "%{public}s called with null blocked_streams";
        goto LABEL_59;
      }
LABEL_60:

      goto LABEL_61;
    }
    if (!v26)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http3_get_initial_remote_settings";
        v15 = "%{public}s called with null blocked_streams, backtrace limit exceeded";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v27;
    v24 = os_log_type_enabled(v13, v27);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http3_get_initial_remote_settings";
        v15 = "%{public}s called with null blocked_streams, no backtrace";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!v24)
      goto LABEL_42;
    *(_DWORD *)buf = 136446466;
    v29 = "nw_http3_get_initial_remote_settings";
    v30 = 2082;
    v31 = backtrace_string;
    v21 = "%{public}s called with null blocked_streams, dumping backtrace:%{public}s";
    goto LABEL_41;
  }
  __nwlog_obj();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_http3_get_initial_remote_settings";
  v12 = (char *)_os_log_send_and_compose_impl();

  v27 = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v12, &v27, &v26))
  {
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v27;
      if (!os_log_type_enabled(v13, v27))
        goto LABEL_60;
      *(_DWORD *)buf = 136446210;
      v29 = "nw_http3_get_initial_remote_settings";
      v15 = "%{public}s called with null max_table_capacity";
      goto LABEL_59;
    }
    if (!v26)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http3_get_initial_remote_settings";
        v15 = "%{public}s called with null max_table_capacity, backtrace limit exceeded";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v14 = v27;
    v23 = os_log_type_enabled(v13, v27);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http3_get_initial_remote_settings";
        v15 = "%{public}s called with null max_table_capacity, no backtrace";
        goto LABEL_59;
      }
      goto LABEL_60;
    }
    if (!v23)
      goto LABEL_42;
    *(_DWORD *)buf = 136446466;
    v29 = "nw_http3_get_initial_remote_settings";
    v30 = 2082;
    v31 = backtrace_string;
    v21 = "%{public}s called with null max_table_capacity, dumping backtrace:%{public}s";
LABEL_41:
    _os_log_impl(&dword_182FBE000, v13, v14, v21, buf, 0x16u);
LABEL_42:

    free(backtrace_string);
  }
LABEL_61:
  if (v12)
    free(v12);
  initial_remote_settings = 0;
LABEL_8:

  return initial_remote_settings;
}

uint64_t __nw_http3_get_initial_remote_settings_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _QWORD *v3;

  v2 = *(unsigned __int8 *)(a2 + 77);
  if ((v2 & 2) != 0)
  {
    v3 = *(_QWORD **)(a1 + 40);
    **(_QWORD **)(a1 + 32) = *(_QWORD *)(a2 + 16);
    *v3 = *(_QWORD *)(a2 + 24);
    **(_QWORD **)(a1 + 48) = *(_QWORD *)(a2 + 32);
  }
  return (v2 >> 1) & 1;
}

void *nw_http3_copy_application_error_callback(void *a1)
{
  id v1;
  id v2;
  void *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  void *(*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http3_options(v1);
    v3 = (void *)nw_http3_copy_application_error_callback();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v17 = __Block_byref_object_copy__72473;
    v18 = __Block_byref_object_dispose__72474;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_copy_application_error_callback_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    v3 = _Block_copy(*(const void **)(*(_QWORD *)&buf[8] + 40));
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_copy_application_error_callback";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_copy_application_error_callback";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_copy_application_error_callback";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_copy_application_error_callback";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_copy_application_error_callback";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_5:

  return v3;
}

void sub_183A269A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_copy_application_error_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = _Block_copy(*(const void **)(a2 + 40));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void __nw_get_http3_override_block_invoke()
{
  char *v0;
  NSObject *v1;
  int v2;
  const char *v3;
  __int16 v4;
  int v5;
  uint64_t v6;

  v6 = *MEMORY[0x1E0C80C00];
  v0 = getenv("CFN_USE_HTTP3");
  if (v0)
  {
    nw_get_http3_override_value = strtol(v0, 0, 10);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v1 = (id)gLogObj;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      v2 = 136446466;
      v3 = "nw_get_http3_override_block_invoke";
      v4 = 1024;
      v5 = nw_get_http3_override_value;
      _os_log_impl(&dword_182FBE000, v1, OS_LOG_TYPE_INFO, "%{public}s HTTP/3 override %d via env", (uint8_t *)&v2, 0x12u);
    }

  }
}

void nw_http3_set_application_error_callback(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id *v6;
  id v7;
  _BOOL4 is_equal_unsafe;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  id v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v5 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_application_error_callback(v5, v4);

    goto LABEL_9;
  }
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http3_set_application_error_callback";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http3_set_application_error_callback";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http3_set_application_error_callback";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_43:
        if (!v10)
          goto LABEL_9;
LABEL_44:
        free(v10);
        goto LABEL_9;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http3_set_application_error_callback";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http3_set_application_error_callback";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_42:

    goto LABEL_43;
  }
  if (v4)
  {
    v6 = (id *)v3;
    v7 = v6[1];

    if (nw_protocol_copy_http3_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http3_definition_onceToken, &__block_literal_global_10_72326);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http3_definition_http3_definition);

    if (is_equal_unsafe)
    {
      v23[0] = MEMORY[0x1E0C809B0];
      v23[1] = 3221225472;
      v23[2] = __nw_http3_set_application_error_callback_block_invoke;
      v23[3] = &unk_1E14A9DD0;
      v24 = v4;
      nw_protocol_options_access_handle(v6, v23);

    }
    goto LABEL_9;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http3_set_application_error_callback";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25))
    goto LABEL_43;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http3_set_application_error_callback";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null callback", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (!v25)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http3_set_application_error_callback";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null callback, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_42;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http3_set_application_error_callback";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null callback, no backtrace", buf, 0xCu);
    }
    goto LABEL_42;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http3_set_application_error_callback";
    v29 = 2082;
    v30 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null callback, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_44;
LABEL_9:

}

uint64_t __nw_http3_set_application_error_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = *(void **)(a2 + 40);
  *(_QWORD *)(a2 + 40) = v3;

  return 1;
}

void nw_http3_set_stream_mode(void *a1, uint64_t a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  _QWORD v12[4];
  int v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_http_messaging(v3))
  {
    v4 = nw_http_messaging_options_copy_http3_options(v3);
    nw_http3_set_stream_mode(v4, a2);

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_http3_set_stream_mode_block_invoke;
    v12[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http3_set_stream_mode";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_stream_mode";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options)";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http3_set_stream_mode";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_stream_mode";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http3_set_stream_mode";
        v9 = "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_5:

}

uint64_t __nw_http3_set_stream_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 68) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http3_get_stream_mode(void *a1)
{
  id v1;
  id v2;
  uint64_t stream_mode;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_http_messaging(v1))
  {
    v2 = nw_http_messaging_options_copy_http3_options(v1);
    stream_mode = nw_http3_get_stream_mode();

    goto LABEL_5;
  }
  if (nw_protocol_options_is_http3(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v17 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http3_get_stream_mode_block_invoke;
    v13[3] = &unk_1E14A9D68;
    v13[4] = buf;
    nw_protocol_options_access_handle(v1, v13);
    stream_mode = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http3_get_stream_mode";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v6, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_stream_mode";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_http3(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http3_get_stream_mode";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_stream_mode";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_http3(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http3_get_stream_mode";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_http3(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  stream_mode = 0;
LABEL_5:

  return stream_mode;
}

void sub_183A276B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http3_get_stream_mode_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 68);
  return 1;
}

id nw_protocol_copy_http_definition()
{
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  return (id)nw_protocol_copy_http_definition_http_definition;
}

void __nw_protocol_copy_http_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *named;
  void *v1;

  named = nw_protocol_definition_create_named(1, "http");
  v1 = (void *)nw_protocol_copy_http_definition_http_definition;
  nw_protocol_copy_http_definition_http_definition = (uint64_t)named;

  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_copy_http_definition_http_definition, (uint64_t)nw_http_allocate_metadata, (uint64_t)nw_http_deallocate_metadata);
  nw_protocol_definition_set_metadata_comparator((void *)nw_protocol_copy_http_definition_http_definition, (uint64_t)nw_http_compare_metadata);
}

BOOL nw_http_allocate_metadata(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x38uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void nw_http_deallocate_metadata(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v3 = (void *)a2[2];
  a2[2] = 0;

  v4 = (void *)a2[3];
  a2[3] = 0;

  v5 = (void *)a2[4];
  a2[4] = 0;

  v6 = (void *)a2[5];
  a2[5] = 0;

  free(a2);
}

uint64_t nw_http_compare_metadata(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  int is_equal;
  void *v11;
  void *v12;
  id v13;
  id v14;
  int v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  int v20;
  uint64_t v21;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  void *v28;
  char *backtrace_string;
  _BOOL4 v30;
  const char *v31;
  _BOOL4 v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_http_compare_metadata";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v24, &type, &v33))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http_compare_metadata";
        v27 = "%{public}s called with null handle1";
LABEL_48:
        _os_log_impl(&dword_182FBE000, v25, v26, v27, buf, 0xCu);
      }
LABEL_49:

LABEL_50:
      if (v24)
        free(v24);
      goto LABEL_19;
    }
    if (!v33)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http_compare_metadata";
        v27 = "%{public}s called with null handle1, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v30 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http_compare_metadata";
        v27 = "%{public}s called with null handle1, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http_compare_metadata";
      v37 = 2082;
      v38 = backtrace_string;
      v31 = "%{public}s called with null handle1, dumping backtrace:%{public}s";
LABEL_38:
      _os_log_impl(&dword_182FBE000, v25, v26, v31, buf, 0x16u);
    }
LABEL_39:

    free(backtrace_string);
    goto LABEL_50;
  }
  if (!a3)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_http_compare_metadata";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (!__nwlog_fault(v24, &type, &v33))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http_compare_metadata";
        v27 = "%{public}s called with null handle2";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (!v33)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http_compare_metadata";
        v27 = "%{public}s called with null handle2, backtrace limit exceeded";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v32 = os_log_type_enabled(v25, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v36 = "nw_http_compare_metadata";
        v27 = "%{public}s called with null handle2, no backtrace";
        goto LABEL_48;
      }
      goto LABEL_49;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v36 = "nw_http_compare_metadata";
      v37 = 2082;
      v38 = backtrace_string;
      v31 = "%{public}s called with null handle2, dumping backtrace:%{public}s";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  if (*(_DWORD *)(a2 + 48) == *(_DWORD *)(a3 + 48))
  {
    v6 = *(void **)(a2 + 24);
    v7 = *(void **)(a3 + 24);
    if (v6)
    {
      if (!v7)
        goto LABEL_19;
      v8 = v6;
      v9 = v7;
      is_equal = _nw_http_fields_is_equal((uint64_t)v8);

      if (!is_equal)
        goto LABEL_19;
    }
    else if (v7)
    {
      goto LABEL_19;
    }
    v11 = *(void **)(a2 + 32);
    v12 = *(void **)(a3 + 32);
    if (v11)
    {
      if (!v12)
        goto LABEL_19;
      v13 = v11;
      v14 = v12;
      v15 = _nw_http_fields_is_equal((uint64_t)v13);

      if (!v15)
        goto LABEL_19;
    }
    else if (v12)
    {
      goto LABEL_19;
    }
    v16 = *(void **)(a2 + 40);
    v17 = *(void **)(a3 + 40);
    if (v16)
    {
      if (v17)
      {
        v18 = v16;
        v19 = v17;
        v20 = _nw_http_fields_is_equal((uint64_t)v18);

        if (v20)
          goto LABEL_21;
      }
    }
    else if (!v17)
    {
LABEL_21:
      v21 = 1;
      goto LABEL_20;
    }
  }
LABEL_19:
  v21 = 0;
LABEL_20:

  return v21;
}

id nw_protocol_copy_http_cookie_definition()
{
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
  return (id)nw_protocol_copy_http_cookie_definition_http_cookie_definition;
}

BOOL __nw_protocol_copy_http_cookie_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_cookie_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_cookie_identifier::onceToken, &__block_literal_global_15648);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition;
  nw_protocol_copy_http_cookie_definition_http_cookie_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition, (uint64_t)nw_http_cookie_allocate_options, (uint64_t)nw_http_cookie_copy_options, (uint64_t)nw_http_cookie_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition, (uint64_t)nw_http_cookie_options_compare);
  nw_protocol_definition_set_metadata_allocator((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition, (uint64_t)nw_http_cookie_allocate_metadata, (uint64_t)nw_http_cookie_deallocate_metadata);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition, 0, (uint64_t)nw_http_cookie_serialize_options, (uint64_t)nw_http_cookie_deserialize_options);
  if (nw_protocol_http_cookie_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_cookie_identifier::onceToken, &__block_literal_global_15648);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_cookie_identifier::http_cookie_protocol_identifier, (void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition, (uint64_t)nw_protocol_http_cookie_create, 0);
}

BOOL nw_http_cookie_allocate_options(void *a1)
{
  id v1;
  id *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = (id *)malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    v5 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v5);
  }
  if (nw_http_cookie_storage_copy_shared_token != -1)
    dispatch_once(&nw_http_cookie_storage_copy_shared_token, &__block_literal_global_62896);
  objc_storeStrong(v2, (id)nw_http_cookie_storage_copy_shared_storage);

  return (BOOL)v2;
}

BOOL nw_http_cookie_copy_options(void *a1, uint64_t a2)
{
  id v3;
  id *v4;
  void *v5;
  id v6;
  char v7;
  _BOOL8 result;
  void *v9;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  void *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http_cookie_copy_options";
    v10 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault((const char *)v10, &type, &v18))
    {
LABEL_22:
      if (v10)
        free(v10);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_cookie_copy_options";
        v13 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v17 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_http_cookie_copy_options";
            v22 = 2082;
            v23 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v17)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_cookie_copy_options";
        v13 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_cookie_copy_options";
        v13 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = (id *)malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    objc_storeStrong(v4, *(id *)a2);
    v5 = _Block_copy(*(const void **)(a2 + 8));
    v6 = v4[1];
    v4[1] = v5;

    objc_storeStrong(v4 + 2, *(id *)(a2 + 16));
    v7 = (_BYTE)v4[3] & 0xFE | *(_BYTE *)(a2 + 24) & 1;
    *((_BYTE *)v4 + 24) = v7;
    *((_BYTE *)v4 + 24) = v7 & 0xF9 | *(_BYTE *)(a2 + 24) & 6;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v21 = "strict_calloc";
  v22 = 2048;
  v23 = 1;
  v24 = 2048;
  v25 = 32;
  v15 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_cookie_deallocate_options(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *a2;
    *a2 = 0;

    v4 = a2[1];
    a2[1] = 0;

    v5 = a2[2];
    a2[2] = 0;

    free(a2);
    return;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_http_cookie_deallocate_options";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http_cookie_deallocate_options";
        v10 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_http_cookie_deallocate_options";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v12)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http_cookie_deallocate_options";
        v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http_cookie_deallocate_options";
        v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v7)
    free(v7);
}

BOOL nw_http_cookie_options_compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2 && a3)
  {
    if (*(_QWORD *)a2 == *(_QWORD *)a3)
    {
      if (*(_QWORD *)(a2 + 8) == *(_QWORD *)(a3 + 8))
      {
        if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a3 + 16))
          return ((*(_BYTE *)(a3 + 24) ^ *(_BYTE *)(a2 + 24)) & 3) == 0
              && ((*(_BYTE *)(a3 + 24) ^ *(_BYTE *)(a2 + 24)) & 4) == 0;
        else
          return 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

BOOL nw_http_cookie_allocate_metadata(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void nw_http_cookie_deallocate_metadata(int a1, void *a2)
{
  if (a2)
    free(a2);
}

BOOL nw_http_cookie_serialize_options(void *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_cookie_copy_options(a1, a2);
    *a3 = 32;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_cookie_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_cookie_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_cookie_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_cookie_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_cookie_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_cookie_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 32)
    {
      v7 = nw_http_cookie_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_cookie_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_cookie_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_cookie_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options)), backt"
                "race limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_cookie_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_cookie_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_cookie_options)), dumping b"
            "acktrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_cookie_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_cookie_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_cookie_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_cookie_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_cookie_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

id nw_protocol_copy_http_alt_svc_definition()
{
  if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72702);
  return (id)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;
}

BOOL __nw_protocol_copy_http_alt_svc_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_alt_svc_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_alt_svc_identifier::onceToken, &__block_literal_global_70353);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_alt_svc_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition;
  nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition, (uint64_t)nw_http_alt_svc_allocate_options, (uint64_t)nw_http_alt_svc_copy_options, (uint64_t)nw_http_alt_svc_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition, (uint64_t)nw_http_alt_svc_options_compare);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition, 0, (uint64_t)nw_http_alt_svc_serialize_options, (uint64_t)nw_http_alt_svc_deserialize_options);
  if (nw_protocol_http_alt_svc_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_alt_svc_identifier::onceToken, &__block_literal_global_70353);
  return nw_protocol_register_handle((uint64_t)nw_protocol_http_alt_svc_identifier::protocol_identifier, (void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition, (uint64_t)nw_protocol_http_alt_svc_create, 0);
}

BOOL nw_http_alt_svc_allocate_options(void *a1)
{
  id v1;
  id *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = (id *)malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    v5 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v5);
  }
  if (nw_http_alt_svc_storage_copy_shared_token != -1)
    dispatch_once(&nw_http_alt_svc_storage_copy_shared_token, &__block_literal_global_51921);
  objc_storeStrong(v2, (id)nw_http_alt_svc_storage_copy_shared_storage);

  return (BOOL)v2;
}

BOOL nw_http_alt_svc_copy_options(void *a1, uint64_t a2)
{
  id v3;
  id *v4;
  _BOOL8 result;
  void *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_http_alt_svc_copy_options";
    v7 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7)
        free(v7);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_alt_svc_copy_options";
        v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_http_alt_svc_copy_options";
            v19 = 2082;
            v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_alt_svc_copy_options";
        v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_alt_svc_copy_options";
        v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = (id *)malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    objc_storeStrong(v4, *(id *)a2);
    *((_BYTE *)v4 + 8) = (_BYTE)v4[1] & 0xFE | *(_BYTE *)(a2 + 8) & 1;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v18 = "strict_calloc";
  v19 = 2048;
  v20 = 1;
  v21 = 2048;
  v22 = 16;
  v12 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_alt_svc_deallocate_options(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *a2;
    *a2 = 0;

    free(a2);
    return;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_http_alt_svc_deallocate_options";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http_alt_svc_deallocate_options";
        v8 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "nw_http_alt_svc_deallocate_options";
            v15 = 2082;
            v16 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v10)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http_alt_svc_deallocate_options";
        v8 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_http_alt_svc_deallocate_options";
        v8 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v5)
    free(v5);
}

BOOL nw_http_alt_svc_options_compare(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2 && a3)
    return *(_QWORD *)a2 == *(_QWORD *)a3 && ((*(unsigned __int8 *)(a3 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) == 0;
  return result;
}

BOOL nw_http_alt_svc_serialize_options(void *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_alt_svc_copy_options(a1, a2);
    *a3 = 16;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_alt_svc_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_alt_svc_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_alt_svc_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_alt_svc_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_alt_svc_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_alt_svc_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 16)
    {
      v7 = nw_http_alt_svc_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_alt_svc_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_alt_svc_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_alt_svc_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options)), back"
                "trace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_alt_svc_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_alt_svc_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_alt_svc_options)), dumping "
            "backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_alt_svc_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_alt_svc_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_alt_svc_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_alt_svc_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_alt_svc_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

NWConcrete_nw_protocol_options *nw_http_cookie_create_options()
{
  if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_cookie_definition_http_cookie_definition);
}

NWConcrete_nw_protocol_options *nw_http_alt_svc_create_options()
{
  if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72702);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);
}

const char *nw_http_version_to_string(unsigned int a1)
{
  if (a1 > 5)
    return "<unknown>";
  else
    return off_1E14AA400[a1];
}

char *nw_http_version_get_alpn(int a1)
{
  if ((a1 - 3) > 2)
    return 0;
  else
    return off_1E14AA430[a1 - 3];
}

NWConcrete_nw_protocol_options *nw_http_authentication_create_options()
{
  if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition);
}

BOOL __nw_protocol_copy_http_authentication_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_authentication_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_authentication_identifier::onceToken, &__block_literal_global_13801);
  v0 = nw_protocol_definition_create_with_identifier(&nw_protocol_http_authentication_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition;
  nw_protocol_copy_http_authentication_definition_http_authentication_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition, (uint64_t)nw_http_authentication_allocate_options, (uint64_t)nw_http_authentication_copy_options, (uint64_t)nw_http_authentication_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition, (uint64_t)nw_http_authentication_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition, 0, (uint64_t)nw_http_authentication_serialize_options, (uint64_t)nw_http_authentication_deserialize_options);
  if (nw_protocol_http_authentication_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_authentication_identifier::onceToken, &__block_literal_global_13801);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_authentication_identifier::protocol_identifier, (void *)nw_protocol_copy_http_authentication_definition_http_authentication_definition, (uint64_t)nw_protocol_http_authentication_create, 0);
}

BOOL nw_http_authentication_allocate_options(void *a1)
{
  id v1;
  id *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = (id *)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (!v2)
  {
    __nwlog_obj();
    v4 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    v5 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v5);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v5);
  }
  if (nw_authentication_credential_storage_copy_shared_token != -1)
    dispatch_once(&nw_authentication_credential_storage_copy_shared_token, &__block_literal_global_26071);
  objc_storeStrong(v2 + 1, (id)nw_authentication_credential_storage_copy_shared_storage);

  return (BOOL)v2;
}

BOOL nw_http_authentication_copy_options(void *a1, uint64_t a2)
{
  id v3;
  id *v4;
  void *v5;
  id v6;
  _BOOL8 result;
  void *v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  NSObject *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_http_authentication_copy_options";
    v9 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault((const char *)v9, &type, &v17))
    {
LABEL_22:
      if (v9)
        free(v9);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_authentication_copy_options";
        v12 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_http_authentication_copy_options";
            v21 = 2082;
            v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v16)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_authentication_copy_options";
        v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_authentication_copy_options";
        v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = (id *)malloc_type_calloc(1uLL, 0x30uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    objc_storeStrong(v4 + 5, *(id *)(a2 + 40));
    v5 = _Block_copy(*(const void **)a2);
    v6 = *v4;
    *v4 = v5;

    objc_storeStrong(v4 + 1, *(id *)(a2 + 8));
    objc_storeStrong(v4 + 2, *(id *)(a2 + 16));
    objc_storeStrong(v4 + 3, *(id *)(a2 + 24));
    objc_storeStrong(v4 + 4, *(id *)(a2 + 32));
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v20 = "strict_calloc";
  v21 = 2048;
  v22 = 1;
  v23 = 2048;
  v24 = 48;
  v14 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_authentication_deallocate_options(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *a2;
    *a2 = 0;

    v4 = a2[5];
    a2[5] = 0;

    v5 = a2[1];
    a2[1] = 0;

    v6 = a2[2];
    a2[2] = 0;

    v7 = a2[3];
    a2[3] = 0;

    v8 = a2[4];
    a2[4] = 0;

    free(a2);
    return;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_http_authentication_deallocate_options";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_http_authentication_deallocate_options";
        v13 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_http_authentication_deallocate_options";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v15)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_http_authentication_deallocate_options";
        v13 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_http_authentication_deallocate_options";
        v13 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v10)
    free(v10);
}

BOOL nw_http_authentication_options_are_equal(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2 && a3)
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3] && a2[4] == a3[4] && a2[5] == a3[5];
  return result;
}

BOOL nw_http_authentication_serialize_options(void *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_authentication_copy_options(a1, a2);
    *a3 = 48;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_authentication_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_authentication_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_authentication_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_authentication_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_authentication_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_authentication_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 48)
    {
      v7 = nw_http_authentication_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_authentication_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_authentication_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_authentication_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options)"
                "), backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_authentication_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_authentication_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_authentication_options)), d"
            "umping backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_authentication_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_authentication_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_authentication_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_authentication_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_authentication_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

id nw_protocol_copy_http_authentication_definition()
{
  if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
  return (id)nw_protocol_copy_http_authentication_definition_http_authentication_definition;
}

BOOL nw_protocol_options_is_http_authentication(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_authentication";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_authentication";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_authentication";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_authentication";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_authentication";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

void nw_http_authentication_options_set_challenge_handler(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id *v8;
  id v9;
  BOOL is_equal_unsafe;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD v25[4];
  id v26;
  id v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_http_authentication_options_set_challenge_handler";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_authentication_options_set_challenge_handler";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_http_authentication_options_set_challenge_handler";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12)
          goto LABEL_6;
LABEL_41:
        free(v12);
        goto LABEL_6;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_authentication_options_set_challenge_handler";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_authentication_options_set_challenge_handler";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v8 = (id *)v5;
  v9 = v8[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v9, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __nw_http_authentication_options_set_challenge_handler_block_invoke;
    v25[3] = &unk_1E14AA370;
    v27 = v6;
    v26 = v7;
    nw_protocol_options_access_handle(v8, v25);

    goto LABEL_6;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_http_authentication_options_set_challenge_handler";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (!__nwlog_fault(v12, &type, &v28))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_http_authentication_options_set_challenge_handler";
      _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s protocol options are not http authentication", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v28)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_http_authentication_options_set_challenge_handler";
      _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s protocol options are not http authentication, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v21 = type;
  v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_http_authentication_options_set_challenge_handler";
      _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s protocol options are not http authentication, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    v31 = "nw_http_authentication_options_set_challenge_handler";
    v32 = 2082;
    v33 = v20;
    _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s protocol options are not http authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_authentication_options_set_challenge_handler_block_invoke(uint64_t a1, void **a2)
{
  void *v4;
  void *v5;

  v4 = _Block_copy(*(const void **)(a1 + 40));
  v5 = *a2;
  *a2 = v4;

  objc_storeStrong(a2 + 5, *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_authentication_options_copy_challenge_handler_block_invoke(uint64_t a1, const void **a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = _Block_copy(*a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

uint64_t __nw_http_authentication_options_copy_challenge_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 40));
  return 1;
}

uint64_t __nw_http_authentication_options_copy_credential_storage_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 8));
  return 1;
}

void nw_http_authentication_options_set_credential_storage(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_authentication_options_set_credential_storage";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_authentication_options_set_credential_storage";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_authentication_options_set_credential_storage";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_authentication_options_set_credential_storage";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_authentication_options_set_credential_storage";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_authentication_options_set_credential_storage_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_authentication_options_set_credential_storage";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_authentication_options_set_credential_storage";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http_authentication", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_authentication_options_set_credential_storage";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_authentication_options_set_credential_storage";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_authentication_options_set_credential_storage";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_authentication_options_set_credential_storage_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 8), *(id *)(a1 + 32));
  return 1;
}

id nw_http_authentication_options_copy_credential_cache(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v24 = __Block_byref_object_copy__4;
      v25 = __Block_byref_object_dispose__5;
      v26 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_authentication_options_copy_credential_cache_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_authentication", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_credential_cache";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A2C2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_authentication_options_copy_credential_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 16));
  return 1;
}

void nw_http_authentication_options_set_credential_cache(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id *v6;
  id v7;
  BOOL is_equal_unsafe;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[4];
  id v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_authentication_options_set_credential_cache";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http_authentication_options_set_credential_cache";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v10)
          goto LABEL_7;
LABEL_58:
        free(v10);
        goto LABEL_7;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v4)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_authentication_options_set_credential_cache";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null credential_cache", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_182FBE000, v11, v26, "%{public}s called with null credential_cache, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null credential_cache, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_authentication_options_set_credential_cache";
      v34 = 2082;
      v35 = v20;
      _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null credential_cache, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  v6 = (id *)v3;
  v7 = v6[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_authentication_options_set_credential_cache";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s protocol options are not http_authentication", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_credential_cache";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_authentication_options_set_credential_cache";
      v34 = 2082;
      v35 = v20;
      _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v20);
    if (!v10)
      goto LABEL_7;
    goto LABEL_58;
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __nw_http_authentication_options_set_credential_cache_block_invoke;
  v28[3] = &unk_1E14A9F20;
  v29 = v5;
  nw_protocol_options_access_handle(v6, v28);

LABEL_7:
}

uint64_t __nw_http_authentication_options_set_credential_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 16), *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_authentication_options_copy_h1_fallback_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 24));
  return 1;
}

void nw_http_authentication_options_set_h1_fallback_cache(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id *v6;
  id v7;
  BOOL is_equal_unsafe;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[4];
  id v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_authentication_options_set_h1_fallback_cache";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http_authentication_options_set_h1_fallback_cache";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v10)
          goto LABEL_7;
LABEL_58:
        free(v10);
        goto LABEL_7;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  if (!v4)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_authentication_options_set_h1_fallback_cache";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null h1_fallback_cache", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_182FBE000, v11, v26, "%{public}s called with null h1_fallback_cache, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null h1_fallback_cache, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_authentication_options_set_h1_fallback_cache";
      v34 = 2082;
      v35 = v20;
      _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null h1_fallback_cache, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  v6 = (id *)v3;
  v7 = v6[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_authentication_options_set_h1_fallback_cache";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s protocol options are not http_authentication", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_authentication_options_set_h1_fallback_cache";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_authentication_options_set_h1_fallback_cache";
      v34 = 2082;
      v35 = v20;
      _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v20);
    if (!v10)
      goto LABEL_7;
    goto LABEL_58;
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __nw_http_authentication_options_set_h1_fallback_cache_block_invoke;
  v28[3] = &unk_1E14A9F20;
  v29 = v5;
  nw_protocol_options_access_handle(v6, v28);

LABEL_7:
}

uint64_t __nw_http_authentication_options_set_h1_fallback_cache_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  return 1;
}

uint64_t nw_http_authentication_options_copy_appsso_h1_fallback_headers(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_authentication_definition_http_authentication_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v24 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_authentication_options_copy_appsso_h1_fallback_headers_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_authentication", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_authentication_options_copy_appsso_h1_fallback_headers";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A2D768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_authentication_options_copy_appsso_h1_fallback_headers_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(id *)(a2 + 32);
  return 1;
}

void nw_http_authentication_options_set_appsso_h1_fallback_headers(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_authentication_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_authentication_definition_onceToken, &__block_literal_global_29_72742);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_authentication_definition_http_authentication_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_authentication_options_set_appsso_h1_fallback_headers_block_invoke;
    v22[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v22[4] = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &type, &v23))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http_authentication", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http_authentication, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_authentication, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_http_authentication_options_set_appsso_h1_fallback_headers";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_authentication, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_authentication_options_set_appsso_h1_fallback_headers_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 32), *(id *)(a1 + 32));
  return 1;
}

const char *nw_http_encoding_type_to_string(unsigned int a1)
{
  if (a1 > 5)
    return "<unknown>";
  else
    return off_1E14AA448[a1];
}

NWConcrete_nw_protocol_options *nw_http_encoding_create_options()
{
  if (nw_protocol_copy_http_encoding_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_72927);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition);
}

BOOL __nw_protocol_copy_http_encoding_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_encoding_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_encoding_identifier::onceToken, &__block_literal_global_33009);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_encoding_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition;
  nw_protocol_copy_http_encoding_definition_http_encoding_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition, (uint64_t)nw_http_encoding_allocate_options, (uint64_t)nw_http_encoding_copy_options, (uint64_t)nw_http_encoding_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition, (uint64_t)nw_http_encoding_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition, 0, (uint64_t)nw_http_encoding_serialize_options, (uint64_t)nw_http_encoding_deserialize_options);
  if (nw_protocol_http_encoding_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_encoding_identifier::onceToken, &__block_literal_global_33009);
  return nw_protocol_register_handle((uint64_t)nw_protocol_http_encoding_identifier::protocol_identifier, (void *)nw_protocol_copy_http_encoding_definition_http_encoding_definition, (uint64_t)nw_protocol_http_encoding_create, 0);
}

BOOL nw_http_encoding_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_encoding_copy_options(void *a1, _DWORD *a2)
{
  id v3;
  _DWORD *v4;
  _BOOL8 result;
  void *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_http_encoding_copy_options";
    v7 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7)
        free(v7);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_encoding_copy_options";
        v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_http_encoding_copy_options";
            v19 = 2082;
            v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_encoding_copy_options";
        v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_encoding_copy_options";
        v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v18 = "strict_calloc";
  v19 = 2048;
  v20 = 1;
  v21 = 2048;
  v22 = 4;
  v12 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_encoding_deallocate_options(int a1, void *a2)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    free(a2);
    return;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_http_encoding_deallocate_options";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_encoding_deallocate_options";
        v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_http_encoding_deallocate_options";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_encoding_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_encoding_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
}

BOOL nw_http_encoding_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3)
      return *a2 == *a3;
  }
  return result;
}

BOOL nw_http_encoding_serialize_options(void *a1, _DWORD *a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_encoding_copy_options(a1, a2);
    *a3 = 4;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_encoding_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_encoding_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_encoding_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_encoding_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_encoding_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_encoding_deserialize_options(void *a1, _DWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      v7 = nw_http_encoding_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_encoding_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_encoding_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_encoding_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_encoding_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_encoding_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_encoding_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_encoding_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_encoding_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_encoding_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_encoding_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_encoding_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

id nw_protocol_copy_http_encoding_definition()
{
  if (nw_protocol_copy_http_encoding_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_72927);
  return (id)nw_protocol_copy_http_encoding_definition_http_encoding_definition;
}

BOOL nw_protocol_options_is_http_encoding(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_encoding_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_72927);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_encoding_definition_http_encoding_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_encoding";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_encoding";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_encoding";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_encoding";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_encoding";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

void nw_http_encoding_options_set_type(void *a1, int a2)
{
  id v3;
  void *v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  int v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_encoding_options_set_type";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_encoding_options_set_type";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_encoding_options_set_type";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_encoding_options_set_type";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_encoding_options_set_type";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_encoding_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_72927);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_encoding_definition_http_encoding_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_encoding_options_set_type_block_invoke;
    v22[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v23 = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_encoding_options_set_type";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_encoding_options_set_type";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http encoding", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_encoding_options_set_type";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http encoding, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_encoding_options_set_type";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http encoding, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_encoding_options_set_type";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http encoding, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_encoding_options_set_type_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_encoding_options_get_type(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_encoding_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_encoding_definition_onceToken, &__block_literal_global_30_72927);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_encoding_definition_http_encoding_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v24 = 1;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_encoding_options_get_type_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http encoding", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http encoding, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http encoding, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http encoding, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_encoding_options_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 1;
LABEL_6:

  return v5;
}

void sub_183A2F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_encoding_options_get_type_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_redirect_create_options()
{
  NWConcrete_nw_protocol_options *options;

  if (nw_protocol_copy_http_redirect_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_72984);
  options = nw_protocol_create_options((void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition);
  nw_http_redirect_options_set_limit(options, 20);
  return options;
}

void nw_http_redirect_options_set_limit(void *a1, int a2)
{
  id v3;
  void *v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  int v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_redirect_options_set_limit";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_redirect_options_set_limit";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_redirect_options_set_limit";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_redirect_options_set_limit";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_redirect_options_set_limit";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_redirect_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_72984);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_redirect_definition_http_redirect_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_redirect_options_set_limit_block_invoke;
    v22[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v23 = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_redirect_options_set_limit";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_redirect_options_set_limit";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http redirect", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_redirect_options_set_limit";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http redirect, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_redirect_options_set_limit";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http redirect, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_redirect_options_set_limit";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_redirect_options_set_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 32);
  return 1;
}

BOOL __nw_protocol_copy_http_redirect_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_redirect_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_redirect_identifier::onceToken, &__block_literal_global_916);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_redirect_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition;
  nw_protocol_copy_http_redirect_definition_http_redirect_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition, (uint64_t)nw_http_redirect_allocate_options, (uint64_t)nw_http_redirect_copy_options, (uint64_t)nw_http_redirect_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition, (uint64_t)nw_http_redirect_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition, 0, (uint64_t)nw_http_redirect_serialize_options, (uint64_t)nw_http_redirect_deserialize_options);
  if (nw_protocol_http_redirect_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_redirect_identifier::onceToken, &__block_literal_global_916);
  return nw_protocol_register_handle((uint64_t)nw_protocol_http_redirect_identifier::protocol_identifier, (void *)nw_protocol_copy_http_redirect_definition_http_redirect_definition, (uint64_t)nw_protocol_http_redirect_create, 0);
}

BOOL nw_http_redirect_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_redirect_copy_options(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  void *v6;
  _BOOL8 result;
  void *v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  NSObject *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  uint64_t v22;
  __int16 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_http_redirect_copy_options";
    v9 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault((const char *)v9, &type, &v17))
    {
LABEL_22:
      if (v9)
        free(v9);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_redirect_copy_options";
        v12 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v16 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_http_redirect_copy_options";
            v21 = 2082;
            v22 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v16)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_redirect_copy_options";
        v12 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_redirect_copy_options";
        v12 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = malloc_type_calloc(1uLL, 0x18uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *((_DWORD *)v4 + 4) = *(_DWORD *)(a2 + 16);
    v5 = _Block_copy(*(const void **)a2);
    v6 = *(void **)v4;
    *(_QWORD *)v4 = v5;

    objc_storeStrong((id *)v4 + 1, *(id *)(a2 + 8));
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v20 = "strict_calloc";
  v21 = 2048;
  v22 = 1;
  v23 = 2048;
  v24 = 24;
  v14 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_redirect_deallocate_options(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *a2;
    *a2 = 0;

    v4 = a2[1];
    a2[1] = 0;

    free(a2);
    return;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_redirect_deallocate_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_redirect_deallocate_options";
        v9 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_redirect_deallocate_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v11)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_redirect_deallocate_options";
        v9 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_redirect_deallocate_options";
        v9 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v6)
    free(v6);
}

BOOL nw_http_redirect_options_are_equal(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2 && a3)
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2];
  return result;
}

BOOL nw_http_redirect_serialize_options(void *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_redirect_copy_options(a1, a2);
    *a3 = 24;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_redirect_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_redirect_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_redirect_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_redirect_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_redirect_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_redirect_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 24)
    {
      v7 = nw_http_redirect_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_redirect_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_redirect_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_redirect_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_redirect_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_redirect_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_redirect_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_redirect_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_redirect_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_redirect_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_redirect_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_redirect_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

id nw_protocol_copy_http_redirect_definition()
{
  if (nw_protocol_copy_http_redirect_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_72984);
  return (id)nw_protocol_copy_http_redirect_definition_http_redirect_definition;
}

BOOL nw_protocol_options_is_http_redirect(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_redirect_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_72984);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_redirect_definition_http_redirect_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_redirect";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_redirect";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_redirect";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_redirect";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_redirect";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

void nw_http_redirect_options_set_handler(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id *v8;
  id v9;
  BOOL is_equal_unsafe;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD v25[4];
  id v26;
  id v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_http_redirect_options_set_handler";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_redirect_options_set_handler";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_http_redirect_options_set_handler";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12)
          goto LABEL_6;
LABEL_41:
        free(v12);
        goto LABEL_6;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_redirect_options_set_handler";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_redirect_options_set_handler";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v8 = (id *)v5;
  v9 = v8[1];

  if (nw_protocol_copy_http_redirect_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_72984);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v9, nw_protocol_copy_http_redirect_definition_http_redirect_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __nw_http_redirect_options_set_handler_block_invoke;
    v25[3] = &unk_1E14AA370;
    v27 = v6;
    v26 = v7;
    nw_protocol_options_access_handle(v8, v25);

    goto LABEL_6;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_http_redirect_options_set_handler";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (!__nwlog_fault(v12, &type, &v28))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_http_redirect_options_set_handler";
      _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s protocol options are not http redirect", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v28)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_http_redirect_options_set_handler";
      _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s protocol options are not http redirect, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v21 = type;
  v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_http_redirect_options_set_handler";
      _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s protocol options are not http redirect, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    v31 = "nw_http_redirect_options_set_handler";
    v32 = 2082;
    v33 = v20;
    _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_redirect_options_set_handler_block_invoke(uint64_t a1, void **a2)
{
  void *v4;
  void *v5;

  v4 = _Block_copy(*(const void **)(a1 + 40));
  v5 = *a2;
  *a2 = v4;

  objc_storeStrong(a2 + 1, *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_redirect_options_copy_handler_block_invoke(uint64_t a1, const void **a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = _Block_copy(*a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

uint64_t __nw_http_redirect_options_copy_handler_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 8));
  return 1;
}

uint64_t nw_http_redirect_options_get_limit(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_redirect_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_redirect_definition_onceToken, &__block_literal_global_31_72984);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_redirect_definition_http_redirect_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v24 = 0;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_redirect_options_get_limit_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http redirect", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http redirect, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http redirect, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http redirect, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_redirect_options_get_limit";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A31CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_redirect_options_get_limit_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 16);
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_retry_create_options()
{
  NWConcrete_nw_protocol_options *options;

  if (nw_protocol_copy_http_retry_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73077);
  options = nw_protocol_create_options((void *)nw_protocol_copy_http_retry_definition_http_retry_definition);
  nw_http_retry_options_set_limit(options, 3);
  return options;
}

void nw_http_retry_options_set_limit(void *a1, int a2)
{
  id v3;
  void *v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  int v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_retry_options_set_limit";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_retry_options_set_limit";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_retry_options_set_limit";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_retry_options_set_limit";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_retry_options_set_limit";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_retry_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73077);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_retry_definition_http_retry_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_retry_options_set_limit_block_invoke;
    v22[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v23 = a2;
    nw_protocol_options_access_handle(v5, v22);
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_retry_options_set_limit";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_retry_options_set_limit";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http retry", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_retry_options_set_limit";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http retry, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_retry_options_set_limit";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http retry, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_retry_options_set_limit";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http retry, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_retry_options_set_limit_block_invoke(uint64_t a1, _DWORD *a2)
{
  *a2 = *(_DWORD *)(a1 + 32);
  return 1;
}

BOOL __nw_protocol_copy_http_retry_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_retry_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_retry_identifier::onceToken, &__block_literal_global_41545);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_retry_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_retry_definition_http_retry_definition;
  nw_protocol_copy_http_retry_definition_http_retry_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_retry_definition_http_retry_definition, (uint64_t)nw_http_retry_allocate_options, (uint64_t)nw_http_retry_copy_options, (uint64_t)nw_http_retry_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_retry_definition_http_retry_definition, (uint64_t)nw_http_retry_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_retry_definition_http_retry_definition, 0, (uint64_t)nw_http_retry_serialize_options, (uint64_t)nw_http_retry_deserialize_options);
  if (nw_protocol_http_retry_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_retry_identifier::onceToken, &__block_literal_global_41545);
  return nw_protocol_register_handle((uint64_t)nw_protocol_http_retry_identifier::protocol_identifier, (void *)nw_protocol_copy_http_retry_definition_http_retry_definition, (uint64_t)nw_protocol_http_retry_create, 0);
}

BOOL nw_http_retry_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_retry_copy_options(void *a1, _DWORD *a2)
{
  id v3;
  _DWORD *v4;
  _BOOL8 result;
  void *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_http_retry_copy_options";
    v7 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7)
        free(v7);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_retry_copy_options";
        v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_http_retry_copy_options";
            v19 = 2082;
            v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_retry_copy_options";
        v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_retry_copy_options";
        v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v18 = "strict_calloc";
  v19 = 2048;
  v20 = 1;
  v21 = 2048;
  v22 = 4;
  v12 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_retry_deallocate_options(int a1, void *a2)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    free(a2);
    return;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_http_retry_deallocate_options";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_retry_deallocate_options";
        v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_http_retry_deallocate_options";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_retry_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_retry_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
}

BOOL nw_http_retry_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3)
      return *a2 == *a3;
  }
  return result;
}

BOOL nw_http_retry_serialize_options(void *a1, _DWORD *a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_retry_copy_options(a1, a2);
    *a3 = 4;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_retry_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_retry_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_retry_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_retry_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_retry_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_retry_deserialize_options(void *a1, _DWORD *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      v7 = nw_http_retry_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_retry_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_retry_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_retry_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options)), backtr"
                "ace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_retry_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_retry_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_retry_options)), dumping ba"
            "cktrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_retry_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_retry_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_retry_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_retry_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_retry_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

id nw_protocol_copy_http_retry_definition()
{
  if (nw_protocol_copy_http_retry_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73077);
  return (id)nw_protocol_copy_http_retry_definition_http_retry_definition;
}

BOOL nw_protocol_options_is_http_retry(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_retry_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73077);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_retry_definition_http_retry_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_retry";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_retry";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_retry";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_retry";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_retry";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_http_retry_options_get_limit(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_retry_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_retry_definition_onceToken, &__block_literal_global_32_73077);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_retry_definition_http_retry_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v24 = 0;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_retry_options_get_limit_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http retry", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http retry, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http retry, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http retry, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_retry_options_get_limit";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A3396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_retry_options_get_limit_block_invoke(uint64_t a1, _DWORD *a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_security_create_options()
{
  if (nw_protocol_copy_http_security_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_security_definition_http_security_definition);
}

BOOL __nw_protocol_copy_http_security_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_security_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_security_identifier::onceToken, &__block_literal_global_28368);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_security_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_security_definition_http_security_definition;
  nw_protocol_copy_http_security_definition_http_security_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_security_definition_http_security_definition, (uint64_t)nw_http_security_allocate_options, (uint64_t)nw_http_security_copy_options, (uint64_t)nw_http_security_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_security_definition_http_security_definition, (uint64_t)nw_http_security_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_security_definition_http_security_definition, 0, (uint64_t)nw_http_security_serialize_options, (uint64_t)nw_http_security_deserialize_options);
  if (nw_protocol_http_security_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_security_identifier::onceToken, &__block_literal_global_28368);
  return nw_protocol_register_handle((uint64_t)nw_protocol_http_security_identifier::protocol_identifier, (void *)nw_protocol_copy_http_security_definition_http_security_definition, (uint64_t)nw_protocol_http_security_create, 0);
}

BOOL nw_http_security_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_security_copy_options(void *a1, uint64_t a2)
{
  id v3;
  id *v4;
  void *v5;
  id v6;
  char v7;
  _BOOL8 result;
  void *v9;
  void *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  NSObject *v14;
  void *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http_security_copy_options";
    v10 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault((const char *)v10, &type, &v18))
    {
LABEL_22:
      if (v10)
        free(v10);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_security_copy_options";
        v13 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v17 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_http_security_copy_options";
            v22 = 2082;
            v23 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v17)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_security_copy_options";
        v13 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_security_copy_options";
        v13 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = (id *)malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    objc_storeStrong(v4, *(id *)a2);
    v5 = _Block_copy(*(const void **)(a2 + 8));
    v6 = v4[1];
    v4[1] = v5;

    objc_storeStrong(v4 + 2, *(id *)(a2 + 16));
    v7 = (_BYTE)v4[3] & 0xFE | *(_BYTE *)(a2 + 24) & 1;
    *((_BYTE *)v4 + 24) = v7;
    *((_BYTE *)v4 + 24) = v7 & 0xFD | *(_BYTE *)(a2 + 24) & 2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v21 = "strict_calloc";
  v22 = 2048;
  v23 = 1;
  v24 = 2048;
  v25 = 32;
  v15 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v15);
  if (!result)
  {
    free(v15);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_security_deallocate_options(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *a2;
    *a2 = 0;

    v4 = a2[1];
    a2[1] = 0;

    v5 = a2[2];
    a2[2] = 0;

    free(a2);
    return;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_http_security_deallocate_options";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http_security_deallocate_options";
        v10 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_http_security_deallocate_options";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v12)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http_security_deallocate_options";
        v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http_security_deallocate_options";
        v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v7)
    free(v7);
}

BOOL nw_http_security_options_are_equal(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2 && a3)
    return *a2 == *a3 && a2[1] == a3[1] && a2[2] == a3[2] && a2[3] == a3[3];
  return result;
}

BOOL nw_http_security_serialize_options(void *a1, uint64_t a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_security_copy_options(a1, a2);
    *a3 = 32;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_security_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_security_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_security_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_security_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_security_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_security_deserialize_options(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 32)
    {
      v7 = nw_http_security_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_security_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_security_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_security_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_security_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_security_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_security_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_security_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_security_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_security_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_security_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_security_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

id nw_protocol_copy_http_security_definition()
{
  if (nw_protocol_copy_http_security_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
  return (id)nw_protocol_copy_http_security_definition_http_security_definition;
}

BOOL nw_protocol_options_is_http_security(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_security_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_security_definition_http_security_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_security";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_security";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_security";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_security";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_security";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

uint64_t __nw_http_security_options_copy_hsts_storage_block_invoke(uint64_t a1, id *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *a2);
  return 1;
}

void nw_http_security_options_set_hsts_storage(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_security_options_set_hsts_storage";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_security_options_set_hsts_storage";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_security_options_set_hsts_storage";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_security_options_set_hsts_storage";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_security_options_set_hsts_storage";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_security_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_security_definition_http_security_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_security_options_set_hsts_storage_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_security_options_set_hsts_storage";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_security_options_set_hsts_storage";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http security", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_security_options_set_hsts_storage";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_security_options_set_hsts_storage";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_security_options_set_hsts_storage";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_security_options_set_hsts_storage_block_invoke(uint64_t a1, id *location)
{
  objc_storeStrong(location, *(id *)(a1 + 32));
  return 1;
}

void nw_http_security_options_set_handler(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id *v8;
  id v9;
  BOOL is_equal_unsafe;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD v25[4];
  id v26;
  id v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_http_security_options_set_handler";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_security_options_set_handler";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_http_security_options_set_handler";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v12)
          goto LABEL_6;
LABEL_41:
        free(v12);
        goto LABEL_6;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_security_options_set_handler";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_http_security_options_set_handler";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v8 = (id *)v5;
  v9 = v8[1];

  if (nw_protocol_copy_http_security_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v9, nw_protocol_copy_http_security_definition_http_security_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __nw_http_security_options_set_handler_block_invoke;
    v25[3] = &unk_1E14AA370;
    v27 = v6;
    v26 = v7;
    nw_protocol_options_access_handle(v8, v25);

    goto LABEL_6;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_http_security_options_set_handler";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (!__nwlog_fault(v12, &type, &v28))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_http_security_options_set_handler";
      _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s protocol options are not http security", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v28)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_http_security_options_set_handler";
      _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v21 = type;
  v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      v31 = "nw_http_security_options_set_handler";
      _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    v31 = "nw_http_security_options_set_handler";
    v32 = 2082;
    v33 = v20;
    _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_security_options_set_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;

  v4 = _Block_copy(*(const void **)(a1 + 40));
  v5 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v4;

  objc_storeStrong((id *)(a2 + 16), *(id *)(a1 + 32));
  return 1;
}

void *nw_http_security_options_copy_handler(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  void *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  void *(*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_security_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v24 = __Block_byref_object_copy__72473;
      v25 = __Block_byref_object_dispose__72474;
      v26 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_security_options_copy_handler_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = _Block_copy(*(const void **)(*(_QWORD *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http security", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A35CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_security_options_copy_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = _Block_copy(*(const void **)(a2 + 8));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

id nw_http_security_options_copy_handler_queue(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_security_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v24 = __Block_byref_object_copy__4;
      v25 = __Block_byref_object_dispose__5;
      v26 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_security_options_copy_handler_queue_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http security", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_security_options_copy_handler_queue";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A36280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_security_options_copy_handler_queue_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 16));
  return 1;
}

uint64_t __nw_http_security_options_get_skip_hsts_lookup_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 24) & 1;
  return 1;
}

uint64_t __nw_http_security_options_set_skip_hsts_lookup_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

BOOL nw_http_security_options_get_save_hsts_with_untrusted_root_cert(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL is_equal;
  _BOOL8 v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  char v15;
  os_log_type_t type;
  _BYTE buf[24];
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = nw_protocol_options_copy_definition(v1);
  if (nw_protocol_copy_http_security_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_security_definition_onceToken, &__block_literal_global_33_73134);
  is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_security_definition_http_security_definition);

  if (is_equal)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v18 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_http_security_options_get_save_hsts_with_untrusted_root_cert_block_invoke;
    v14[3] = &unk_1E14A9D68;
    v14[4] = buf;
    nw_protocol_options_access_handle(v1, v14);
    v4 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s protocol options are not http security", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s protocol options are not http security, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s protocol options are not http security, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_security_options_get_save_hsts_with_untrusted_root_cert";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s protocol options are not http security, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_5:

  return v4;
}

void sub_183A36644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_security_options_get_save_hsts_with_untrusted_root_cert_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(_BYTE *)(a2 + 24) & 2) != 0;
  return 1;
}

uint64_t __nw_http_security_options_set_save_hsts_with_untrusted_root_cert_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1;
}

id nw_http_cookie_options_copy_cookie_storage(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v24 = __Block_byref_object_copy__4;
      v25 = __Block_byref_object_dispose__5;
      v26 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_cookie_options_copy_cookie_storage_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_cookie_storage";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A36C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_cookie_options_copy_cookie_storage_block_invoke(uint64_t a1, id *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *a2);
  return 1;
}

void nw_http_cookie_options_set_cookie_storage(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_cookie_options_set_cookie_storage";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_cookie_options_set_cookie_storage";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_cookie_options_set_cookie_storage";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_cookie_options_set_cookie_storage";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_cookie_options_set_cookie_storage";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_cookie_definition_http_cookie_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_cookie_options_set_cookie_storage_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_cookie_options_set_cookie_storage";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_cookie_options_set_cookie_storage";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http_cookie", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_cookie_options_set_cookie_storage";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_cookie_options_set_cookie_storage";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_cookie_options_set_cookie_storage";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_cookie_options_set_cookie_storage_block_invoke(uint64_t a1, id *location)
{
  objc_storeStrong(location, *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_cookie_options_copy_transform_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = _Block_copy(*(const void **)(a2 + 8));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

uint64_t __nw_http_cookie_options_set_transform_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v3;

  return 1;
}

uint64_t nw_http_cookie_options_copy_site_for_cookies(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v24 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_cookie_options_copy_site_for_cookies_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_cookie_options_copy_site_for_cookies";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A37778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_cookie_options_copy_site_for_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(id *)(a2 + 16);
  return 1;
}

uint64_t __nw_http_cookie_options_set_site_for_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 16), *(id *)(a1 + 32));
  return 1;
}

BOOL nw_http_cookie_options_get_is_top_level_navigation(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  _BOOL8 v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_cookie_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_cookie_definition_onceToken, &__block_literal_global_13_72674);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_cookie_definition_http_cookie_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v24 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_cookie_options_get_is_top_level_navigation_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_cookie", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_cookie, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_cookie, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_cookie, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_cookie_options_get_is_top_level_navigation";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A37D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_cookie_options_get_is_top_level_navigation_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 24) & 1;
  return 1;
}

uint64_t __nw_http_cookie_options_set_is_top_level_navigation_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_cookie_options_get_should_not_send_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(_BYTE *)(a2 + 24) & 2) != 0;
  return 1;
}

uint64_t __nw_http_cookie_options_set_should_not_send_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFD | (2 * *(_BYTE *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_cookie_options_get_should_not_save_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = (*(_BYTE *)(a2 + 24) & 4) != 0;
  return 1;
}

uint64_t __nw_http_cookie_options_set_should_not_save_cookies_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFB | (4 * *(_BYTE *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_alt_svc_options_copy_alt_svc_storage_block_invoke(uint64_t a1, id *a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *a2);
  return 1;
}

void nw_http_alt_svc_options_set_alt_svc_storage(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_alt_svc_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_alt_svc_definition_onceToken, &__block_literal_global_14_72702);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_alt_svc_definition_http_alt_svc_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_alt_svc_options_set_alt_svc_storage_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http_alt_svc", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http_alt_svc, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_alt_svc, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_alt_svc_options_set_alt_svc_storage";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_alt_svc, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_alt_svc_options_set_alt_svc_storage_block_invoke(uint64_t a1, id *location)
{
  objc_storeStrong(location, *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_alt_svc_options_set_assumes_http3_capable_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(a2 + 8) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_alt_svc_options_get_assumes_http3_capable_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 8) & 1;
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_early_data_create_options()
{
  if (nw_protocol_copy_http_early_data_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_early_data_definition_onceToken, &__block_literal_global_34_73465);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition);
}

BOOL __nw_protocol_copy_http_early_data_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_early_data_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_early_data_identifier::onceToken, &__block_literal_global_63386);
  v0 = nw_protocol_definition_create_with_identifier(&nw_protocol_http_early_data_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition;
  nw_protocol_copy_http_early_data_definition_http_early_data_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition, (uint64_t)nw_http_early_data_allocate_options, (uint64_t)nw_http_early_data_copy_options, (uint64_t)nw_http_early_data_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition, (uint64_t)nw_http_early_data_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition, 0, (uint64_t)nw_http_early_data_serialize_options, (uint64_t)nw_http_early_data_deserialize_options);
  if (nw_protocol_http_early_data_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_early_data_identifier::onceToken, &__block_literal_global_63386);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_early_data_identifier::protocol_identifier, (void *)nw_protocol_copy_http_early_data_definition_http_early_data_definition, (uint64_t)nw_protocol_http_early_data_create, 0);
}

BOOL nw_http_early_data_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_early_data_copy_options(void *a1, _BYTE *a2)
{
  id v3;
  _BYTE *v4;
  _BOOL8 result;
  void *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_http_early_data_copy_options";
    v7 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7)
        free(v7);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_early_data_copy_options";
        v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_http_early_data_copy_options";
            v19 = 2082;
            v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_early_data_copy_options";
        v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_early_data_copy_options";
        v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v18 = "strict_calloc";
  v19 = 2048;
  v20 = 1;
  v21 = 2048;
  v22 = 4;
  v12 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_early_data_deallocate_options(int a1, void *a2)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    free(a2);
    return;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_http_early_data_deallocate_options";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_early_data_deallocate_options";
        v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_http_early_data_deallocate_options";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_early_data_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_early_data_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
}

BOOL nw_http_early_data_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3)
      return *a2 == *a3;
  }
  return result;
}

BOOL nw_http_early_data_serialize_options(void *a1, _BYTE *a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_early_data_copy_options(a1, a2);
    *a3 = 4;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_early_data_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_early_data_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_early_data_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_early_data_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_early_data_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_early_data_deserialize_options(void *a1, _BYTE *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      v7 = nw_http_early_data_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_early_data_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_early_data_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_early_data_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options)), b"
                "acktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_early_data_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_early_data_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_early_data_options)), dumpi"
            "ng backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_early_data_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_early_data_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_early_data_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_early_data_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_early_data_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

id nw_protocol_copy_http_early_data_definition()
{
  if (nw_protocol_copy_http_early_data_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_early_data_definition_onceToken, &__block_literal_global_34_73465);
  return (id)nw_protocol_copy_http_early_data_definition_http_early_data_definition;
}

BOOL nw_protocol_options_is_http_early_data(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_early_data_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_early_data_definition_onceToken, &__block_literal_global_34_73465);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_early_data_definition_http_early_data_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_early_data";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_early_data";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_early_data";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_early_data";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_early_data";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

NWConcrete_nw_protocol_options *nw_http_sniffing_create_options()
{
  if (nw_protocol_copy_http_sniffing_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_35_73498);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition);
}

BOOL __nw_protocol_copy_http_sniffing_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_sniffing_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_sniffing_identifier::onceToken, &__block_literal_global_488);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_http_sniffing_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;
  nw_protocol_copy_http_sniffing_definition_http_sniffing_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition, (uint64_t)nw_http_sniffing_allocate_options, (uint64_t)nw_http_sniffing_copy_options, (uint64_t)nw_http_sniffing_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition, (uint64_t)nw_http_sniffing_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition, 0, (uint64_t)nw_http_sniffing_serialize_options, (uint64_t)nw_http_sniffing_deserialize_options);
  if (nw_protocol_http_sniffing_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_sniffing_identifier::onceToken, &__block_literal_global_488);
  return nw_protocol_register_handle((uint64_t)nw_protocol_http_sniffing_identifier::protocol_identifier, (void *)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition, (uint64_t)nw_protocol_http_sniffing_create, 0);
}

BOOL nw_http_sniffing_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_sniffing_copy_options(void *a1, _BYTE *a2)
{
  id v3;
  _BYTE *v4;
  _BOOL8 result;
  void *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  NSObject *v11;
  void *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_http_sniffing_copy_options";
    v7 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault((const char *)v7, &type, &v15))
    {
LABEL_22:
      if (v7)
        free(v7);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_sniffing_copy_options";
        v10 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_http_sniffing_copy_options";
            v19 = 2082;
            v20 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v14)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_sniffing_copy_options";
        v10 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_http_sniffing_copy_options";
        v10 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = malloc_type_calloc(1uLL, 4uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    *v4 = *a2;
LABEL_4:

    return (BOOL)v4;
  }
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v18 = "strict_calloc";
  v19 = 2048;
  v20 = 1;
  v21 = 2048;
  v22 = 4;
  v12 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_sniffing_deallocate_options(int a1, void *a2)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    free(a2);
    return;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_http_sniffing_deallocate_options";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_sniffing_deallocate_options";
        v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_http_sniffing_deallocate_options";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_sniffing_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_sniffing_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
}

BOOL nw_http_sniffing_options_are_equal(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2)
  {
    if (a3)
      return *a2 == *a3;
  }
  return result;
}

BOOL nw_http_sniffing_serialize_options(void *a1, _BYTE *a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_sniffing_copy_options(a1, a2);
    *a3 = 4;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_sniffing_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_sniffing_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_sniffing_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_sniffing_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_sniffing_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_sniffing_deserialize_options(void *a1, _BYTE *a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 4)
    {
      v7 = nw_http_sniffing_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_sniffing_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_sniffing_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_sniffing_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options)), bac"
                "ktrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_sniffing_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_sniffing_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_sniffing_options)), dumping"
            " backtrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_sniffing_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_sniffing_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_sniffing_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_sniffing_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_sniffing_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

id nw_protocol_copy_http_sniffing_definition()
{
  if (nw_protocol_copy_http_sniffing_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_35_73498);
  return (id)nw_protocol_copy_http_sniffing_definition_http_sniffing_definition;
}

BOOL nw_protocol_options_is_http_sniffing(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_sniffing_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_sniffing_definition_onceToken, &__block_literal_global_35_73498);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_sniffing_definition_http_sniffing_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_sniffing";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_sniffing";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_sniffing";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_sniffing";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_sniffing";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

id nw_protocol_copy_oblivious_http_definition()
{
  if (nw_protocol_copy_oblivious_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_36_73533);
  return (id)nw_protocol_copy_oblivious_http_definition_ohttp_definition;
}

BOOL __nw_protocol_copy_oblivious_http_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_oblivious_http_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28508);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier);
  v1 = (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition;
  nw_protocol_copy_oblivious_http_definition_ohttp_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition, (uint64_t)nw_oblivious_http_allocate_options, (uint64_t)nw_oblivious_http_copy_options, (uint64_t)nw_oblivious_http_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition, (uint64_t)nw_oblivious_http_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition, 0, (uint64_t)nw_oblivious_http_serialize_options, (uint64_t)nw_oblivious_http_deserialize_options);
  if (nw_protocol_oblivious_http_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_oblivious_http_identifier::onceToken, &__block_literal_global_28508);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_oblivious_http_identifier::ohttp_protocol_identifier, (void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition, (uint64_t)nw_protocol_oblivious_http_create, 0);
}

BOOL nw_oblivious_http_allocate_options(void *a1)
{
  id v1;
  _QWORD *v2;
  void *v3;
  _BOOL8 result;
  NSObject *v5;
  void *v6;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v5 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
  v6 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v6);
  if (!result)
  {
    free(v6);
LABEL_2:
    v3 = (void *)v2[1];
    v2[1] = 0;

    v2[2] = 0;
    v2[3] = 0;

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_oblivious_http_copy_options(void *a1, uint64_t a2)
{
  id v3;
  id *v4;
  const char *v5;
  char *v6;
  const char *v7;
  char *v8;
  char v9;
  _BOOL8 result;
  void *v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  NSObject *v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  char *backtrace_string;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_oblivious_http_copy_options";
    v12 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v24))
    {
LABEL_32:
      if (v12)
        free(v12);
      v4 = 0;
      goto LABEL_10;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_oblivious_http_copy_options";
        v15 = "%{public}s called with null existing_handle";
LABEL_30:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v23 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_oblivious_http_copy_options";
            v28 = 2082;
            v29 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_32;
        }
        if (!v23)
          goto LABEL_31;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_oblivious_http_copy_options";
        v15 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_30;
      }
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_oblivious_http_copy_options";
        v15 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_30;
      }
    }
LABEL_31:

    goto LABEL_32;
  }
  v4 = (id *)malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (!v4)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v16, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v27 = "strict_calloc";
    v28 = 2048;
    v29 = 1;
    v30 = 2048;
    v31 = 40;
    v17 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v17);
    if (result)
      goto LABEL_35;
    free(v17);
  }
  objc_storeStrong(v4 + 1, *(id *)(a2 + 8));
  v5 = *(const char **)(a2 + 16);
  if (v5)
  {
    v6 = strdup(v5);
    if (!v6)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v27 = "strict_strdup";
      v19 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v19);
      if (result)
        goto LABEL_35;
      free(v19);
    }
    v4[2] = v6;
  }
  v7 = *(const char **)(a2 + 24);
  if (!v7)
  {
LABEL_9:
    v9 = (_BYTE)v4[4] & 0xFE | *(_BYTE *)(a2 + 32) & 1;
    *((_BYTE *)v4 + 32) = v9;
    *((_BYTE *)v4 + 32) = v9 & 0xF9 | *(_BYTE *)(a2 + 32) & 6;
    *v4 = *(id *)a2;
LABEL_10:

    return (BOOL)v4;
  }
  v8 = strdup(v7);
  if (v8)
  {
LABEL_8:
    v4[3] = v8;
    goto LABEL_9;
  }
  __nwlog_obj();
  v20 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v27 = "strict_strdup";
  v21 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v21);
  if (!result)
  {
    free(v21);
    goto LABEL_8;
  }
LABEL_35:
  __break(1u);
  return result;
}

void nw_oblivious_http_deallocate_options(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = (void *)a2[1];
    a2[1] = 0;

    v4 = (void *)a2[2];
    if (v4)
    {
      free(v4);
      a2[2] = 0;
    }
    v5 = (void *)a2[3];
    if (v5)
      free(v5);
    free(a2);
    return;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_oblivious_http_deallocate_options";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_oblivious_http_deallocate_options";
        v10 = "%{public}s called with null allocated_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_oblivious_http_deallocate_options";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v12)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_oblivious_http_deallocate_options";
        v10 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_oblivious_http_deallocate_options";
        v10 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

  }
LABEL_22:
  if (v7)
    free(v7);
}

BOOL nw_oblivious_http_options_are_equal(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  _BOOL8 v6;
  void *v7;
  void *v8;
  const char *v9;
  const char *v10;
  const char *v11;
  const char *v12;

  v5 = a1;
  v6 = a2 == a3;
  if (a2 != a3 && a2 && a3)
  {
    v7 = *(void **)(a2 + 8);
    v8 = *(void **)(a3 + 8);
    if (v7 != v8 && v7 && v8)
    {
      if (!xpc_equal(v7, v8))
        goto LABEL_23;
    }
    else if (v7 != v8)
    {
      goto LABEL_23;
    }
    v9 = *(const char **)(a2 + 16);
    v10 = *(const char **)(a3 + 16);
    if (v9 != v10 && v9 && v10)
    {
      if (strcmp(v9, v10))
        goto LABEL_23;
    }
    else if (v9 != v10)
    {
      goto LABEL_23;
    }
    v11 = *(const char **)(a2 + 24);
    v12 = *(const char **)(a3 + 24);
    if (v11 != v12 && v11 && v12)
    {
      if (!strcmp(v11, v12))
      {
LABEL_22:
        if (((*(_BYTE *)(a3 + 32) ^ *(_BYTE *)(a2 + 32)) & 7) == 0)
        {
          v6 = *(_QWORD *)a2 == *(_QWORD *)a3;
          goto LABEL_24;
        }
      }
    }
    else if (v11 == v12)
    {
      goto LABEL_22;
    }
LABEL_23:
    v6 = 0;
  }
LABEL_24:

  return v6;
}

BOOL nw_oblivious_http_serialize_options(void *a1, uint64_t a2, _QWORD *a3)
{
  id v5;
  id v6;
  void *v7;
  size_t length;
  const char *v9;
  size_t v10;
  const char *v11;
  size_t v12;
  size_t v13;
  size_t v14;
  _QWORD *v15;
  char v16;
  unsigned __int8 *v17;
  _BYTE *v18;
  uint64_t v19;
  size_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  _BYTE *v25;
  int v26;
  _BOOL8 result;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  void *v33;
  NSObject *v34;
  void *v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  char *backtrace_string;
  _BOOL4 v41;
  const char *v42;
  _BOOL4 v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  uint64_t v49;
  __int16 v50;
  size_t v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_oblivious_http_serialize_options";
    v29 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_oblivious_http_serialize_options";
          v32 = "%{public}s called with null existing_handle";
LABEL_63:
          _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0xCu);
        }
LABEL_64:

        goto LABEL_65;
      }
      if (!v44)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_oblivious_http_serialize_options";
          v32 = "%{public}s called with null existing_handle, backtrace limit exceeded";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v41 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_oblivious_http_serialize_options";
          v32 = "%{public}s called with null existing_handle, no backtrace";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      if (!v41)
        goto LABEL_54;
      *(_DWORD *)buf = 136446466;
      v47 = "nw_oblivious_http_serialize_options";
      v48 = 2082;
      v49 = (uint64_t)backtrace_string;
      v42 = "%{public}s called with null existing_handle, dumping backtrace:%{public}s";
      goto LABEL_53;
    }
LABEL_65:
    if (v29)
      free(v29);
    v15 = 0;
    goto LABEL_30;
  }
  if (!a3)
  {
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_oblivious_http_serialize_options";
    v29 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v29, &type, &v44))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_oblivious_http_serialize_options";
          v32 = "%{public}s called with null out_length";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      if (!v44)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_oblivious_http_serialize_options";
          v32 = "%{public}s called with null out_length, backtrace limit exceeded";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v43 = os_log_type_enabled(v30, type);
      if (!backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_oblivious_http_serialize_options";
          v32 = "%{public}s called with null out_length, no backtrace";
          goto LABEL_63;
        }
        goto LABEL_64;
      }
      if (!v43)
        goto LABEL_54;
      *(_DWORD *)buf = 136446466;
      v47 = "nw_oblivious_http_serialize_options";
      v48 = 2082;
      v49 = (uint64_t)backtrace_string;
      v42 = "%{public}s called with null out_length, dumping backtrace:%{public}s";
LABEL_53:
      _os_log_impl(&dword_182FBE000, v30, v31, v42, buf, 0x16u);
LABEL_54:

      free(backtrace_string);
      goto LABEL_65;
    }
    goto LABEL_65;
  }
  v6 = *(id *)(a2 + 8);
  v7 = v6;
  if (v6)
  {
    length = xpc_data_get_length(v6);
    v9 = *(const char **)(a2 + 24);
    if (v9)
      goto LABEL_5;
LABEL_8:
    v10 = 0;
    v11 = *(const char **)(a2 + 16);
    if (v11)
      goto LABEL_6;
    goto LABEL_9;
  }
  length = 0;
  v9 = *(const char **)(a2 + 24);
  if (!v9)
    goto LABEL_8;
LABEL_5:
  v10 = strlen(v9) + 1;
  v11 = *(const char **)(a2 + 16);
  if (v11)
  {
LABEL_6:
    v12 = strlen(v11) + 1;
    goto LABEL_10;
  }
LABEL_9:
  v12 = 0;
LABEL_10:
  v13 = length + v10 + v12;
  v14 = v13 + 32;
  *a3 = v13 + 32;
  if (v13 == -32)
  {
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v34, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v47 = "strict_calloc";
    v35 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v35);
    if (result)
      goto LABEL_68;
    free(v35);
  }
  v15 = malloc_type_calloc(1uLL, v14, 0xEAFB8F1AuLL);
  if (!v15)
  {
    __nwlog_obj();
    v36 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v47 = "strict_calloc";
    v48 = 2048;
    v49 = 1;
    v50 = 2048;
    v51 = v14;
    v37 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v37);
    if (result)
      goto LABEL_68;
    free(v37);
  }
  v15[1] = length;
  v15[2] = v10;
  v16 = v15[3] & 0xFE | *(_BYTE *)(a2 + 32) & 1;
  *((_BYTE *)v15 + 24) = v16;
  *((_BYTE *)v15 + 24) = v16 & 0xF9 | *(_BYTE *)(a2 + 32) & 6;
  *v15 = *(_QWORD *)a2;
  if (v7)
    xpc_data_get_bytes(v7, (char *)v15 + 25, 0, length);
  v17 = *(unsigned __int8 **)(a2 + 24);
  if (v17)
  {
    v18 = (char *)v15 + v15[1] + 25;
    if (v10 < 2)
    {
      v19 = v10;
      if (v10)
      {
LABEL_21:
        if (v19)
          *v18 = 0;
      }
    }
    else
    {
      v19 = 1;
      v20 = v10;
      while (1)
      {
        v21 = *v17;
        *v18 = v21;
        if (!v21)
          break;
        ++v18;
        ++v17;
        if (--v20 <= 1)
          goto LABEL_21;
      }
    }
  }
  if (!v12)
    goto LABEL_29;
  v22 = v15[1];
  v23 = v15[2];
  v24 = *(unsigned __int8 **)(a2 + 16);
  if (v24)
  {
LABEL_25:
    v25 = (char *)v15 + v22 + v23 + 25;
    if (v12 < 2)
    {
LABEL_28:
      *v25 = 0;
    }
    else
    {
      while (1)
      {
        v26 = *v24;
        *v25 = v26;
        if (!v26)
          break;
        ++v25;
        ++v24;
        if (--v12 <= 1)
          goto LABEL_28;
      }
    }
LABEL_29:

LABEL_30:
    return (BOOL)v15;
  }
  __nwlog_obj();
  v38 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v47 = "_strict_strlcpy";
  v39 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v39);
  if (!result)
  {
    free(v39);
    goto LABEL_25;
  }
LABEL_68:
  __break(1u);
  return result;
}

BOOL nw_oblivious_http_deserialize_options(void *a1, uint64_t a2, unint64_t a3)
{
  id v5;
  _BYTE *v6;
  char v7;
  size_t v8;
  xpc_object_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unint64_t v18;
  int v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  void *v25;
  NSObject *v26;
  void *v27;
  _BOOL8 result;
  char *backtrace_string;
  _BOOL4 v30;
  const char *v31;
  _BOOL4 v32;
  NSObject *v33;
  void *v34;
  NSObject *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  size_t v39;
  _BYTE *v40;
  _BYTE *v41;
  unsigned __int8 *v42;
  size_t v43;
  int v44;
  NSObject *v45;
  void *v46;
  NSObject *v47;
  void *v48;
  uint64_t v49;
  char v50;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  uint64_t v55;
  __int16 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_oblivious_http_deserialize_options";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v21, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_oblivious_http_deserialize_options";
          v24 = "%{public}s called with null serialized_bytes";
LABEL_61:
          _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
        }
LABEL_62:

        goto LABEL_63;
      }
      if (!v50)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_oblivious_http_deserialize_options";
          v24 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v30 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_oblivious_http_deserialize_options";
          v24 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      if (!v30)
        goto LABEL_33;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_oblivious_http_deserialize_options";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_32;
    }
LABEL_63:
    if (v21)
      free(v21);
    v6 = 0;
    goto LABEL_52;
  }
  if (a3 <= 0x1F)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_oblivious_http_deserialize_options";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v21, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_oblivious_http_deserialize_options";
          v24 = "%{public}s called with null (serialized_length >= sizeof(struct nw_serialized_oblivious_http_options))";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      if (!v50)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_oblivious_http_deserialize_options";
          v24 = "%{public}s called with null (serialized_length >= sizeof(struct nw_serialized_oblivious_http_options)), "
                "backtrace limit exceeded";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v32 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v53 = "nw_oblivious_http_deserialize_options";
          v24 = "%{public}s called with null (serialized_length >= sizeof(struct nw_serialized_oblivious_http_options)), no backtrace";
          goto LABEL_61;
        }
        goto LABEL_62;
      }
      if (!v32)
        goto LABEL_33;
      *(_DWORD *)buf = 136446466;
      v53 = "nw_oblivious_http_deserialize_options";
      v54 = 2082;
      v55 = (uint64_t)backtrace_string;
      v31 = "%{public}s called with null (serialized_length >= sizeof(struct nw_serialized_oblivious_http_options)), dump"
            "ing backtrace:%{public}s";
LABEL_32:
      _os_log_impl(&dword_182FBE000, v22, v23, v31, buf, 0x16u);
LABEL_33:

      free(backtrace_string);
      goto LABEL_63;
    }
    goto LABEL_63;
  }
  v6 = malloc_type_calloc(1uLL, 0x28uLL, 0xEAFB8F1AuLL);
  if (!v6)
  {
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v53 = "strict_calloc";
    v54 = 2048;
    v55 = 1;
    v56 = 2048;
    v57 = 40;
    v27 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v27);
    if (result)
      goto LABEL_66;
    free(v27);
  }
  v7 = v6[32] & 0xFE | *(_BYTE *)(a2 + 24) & 1;
  v6[32] = v7;
  v6[32] = v7 & 0xF9 | *(_BYTE *)(a2 + 24) & 6;
  *(_QWORD *)v6 = *(_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (v8 + 32 > a3)
  {
LABEL_52:

    return (BOOL)v6;
  }
  if (v8)
  {
    v9 = xpc_data_create((const void *)(a2 + 25), v8);
    v10 = (void *)*((_QWORD *)v6 + 1);
    *((_QWORD *)v6 + 1) = v9;

  }
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(a2 + 8);
    v13 = malloc_type_calloc(1uLL, *(_QWORD *)(a2 + 16), 0xEAFB8F1AuLL);
    v14 = v13;
    if (v13)
    {
      *((_QWORD *)v6 + 3) = v13;
      v15 = *(_QWORD *)(a2 + 16);
      if (v15 >= 2)
      {
LABEL_10:
        v16 = (unsigned __int8 *)(a2 + v12 + 25);
        v17 = 1;
        v18 = v15;
        while (1)
        {
          v19 = *v16;
          *v14 = v19;
          if (!v19)
            goto LABEL_41;
          ++v14;
          ++v16;
          if (--v18 <= 1)
            goto LABEL_38;
        }
      }
    }
    else
    {
      __nwlog_obj();
      v33 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v33, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      v53 = "strict_calloc";
      v54 = 2048;
      v55 = 1;
      v56 = 2048;
      v57 = v11;
      v34 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v34);
      if (result)
        goto LABEL_66;
      free(v34);
      *((_QWORD *)v6 + 3) = 0;
      v15 = *(_QWORD *)(a2 + 16);
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v35, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v53 = "_strict_strlcpy";
      v36 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v36);
      if (result)
        goto LABEL_66;
      free(v36);
      if (v15 >= 2)
        goto LABEL_10;
    }
    v17 = v15;
LABEL_38:
    if (v15 && v17)
      *v14 = 0;
  }
LABEL_41:
  v38 = *(_QWORD *)(a2 + 8);
  v37 = *(_QWORD *)(a2 + 16);
  v39 = a3 - (v38 + v37 + 32);
  if (!v39)
    goto LABEL_52;
  v40 = malloc_type_calloc(1uLL, v39, 0xEAFB8F1AuLL);
  v41 = v40;
  if (v40)
  {
    *((_QWORD *)v6 + 2) = v40;
    if (v39 >= 2)
      goto LABEL_44;
LABEL_51:
    *v41 = 0;
    goto LABEL_52;
  }
  v49 = v37;
  __nwlog_obj();
  v45 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v45, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v53 = "strict_calloc";
  v54 = 2048;
  v55 = 1;
  v56 = 2048;
  v57 = v39;
  v46 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v46);
  if (!result)
  {
    free(v46);
    *((_QWORD *)v6 + 2) = 0;
    __nwlog_obj();
    v47 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v47, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v53 = "_strict_strlcpy";
    v48 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v48);
    if (!result)
    {
      free(v48);
      v37 = v49;
      if (v39 >= 2)
      {
LABEL_44:
        v42 = (unsigned __int8 *)(a2 + v38 + v37 + 25);
        v43 = v39;
        while (1)
        {
          v44 = *v42;
          *v41 = v44;
          if (!v44)
            goto LABEL_52;
          ++v41;
          ++v42;
          if (--v43 <= 1)
            goto LABEL_51;
        }
      }
      goto LABEL_51;
    }
  }
LABEL_66:
  __break(1u);
  return result;
}

id nw_protocol_copy_oblivious_http_contexts_definition()
{
  if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_37);
  return (id)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition;
}

BOOL __nw_protocol_copy_oblivious_http_contexts_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28514);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier);
  v1 = (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition;
  nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition, (uint64_t)nw_oblivious_http_allocate_options, (uint64_t)nw_oblivious_http_copy_options, (uint64_t)nw_oblivious_http_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition, (uint64_t)nw_oblivious_http_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition, 0, (uint64_t)nw_oblivious_http_serialize_options, (uint64_t)nw_oblivious_http_deserialize_options);
  if (nw_protocol_oblivious_http_contexts_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_oblivious_http_contexts_identifier::onceToken, &__block_literal_global_3_28514);
  return nw_protocol_register_handle((uint64_t)nw_protocol_oblivious_http_contexts_identifier::ohttp_protocol_identifier, (void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition, (uint64_t)nw_protocol_oblivious_http_create, 0);
}

NWConcrete_nw_protocol_options *nw_oblivious_http_create_options(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NWConcrete_nw_protocol_options *options;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  void *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_oblivious_http_create_options";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v9, &type, &v20))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_oblivious_http_create_options";
      v12 = "%{public}s called with null oblivious_config";
LABEL_46:
      _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      goto LABEL_47;
    }
    if (!v20)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_oblivious_http_create_options";
        v12 = "%{public}s called with null oblivious_config, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_oblivious_http_create_options";
        v12 = "%{public}s called with null oblivious_config, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v16)
      goto LABEL_33;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_oblivious_http_create_options";
    v24 = 2082;
    v25 = backtrace_string;
    v17 = "%{public}s called with null oblivious_config, dumping backtrace:%{public}s";
LABEL_32:
    _os_log_impl(&dword_182FBE000, v10, v11, v17, buf, 0x16u);
LABEL_33:

    free(backtrace_string);
    goto LABEL_48;
  }
  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_oblivious_http_create_options";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v9, &type, &v20))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (!os_log_type_enabled(v10, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v23 = "nw_oblivious_http_create_options";
      v12 = "%{public}s called with null oblivious_config_length";
      goto LABEL_46;
    }
    if (!v20)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_oblivious_http_create_options";
        v12 = "%{public}s called with null oblivious_config_length, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_oblivious_http_create_options";
        v12 = "%{public}s called with null oblivious_config_length, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v18)
      goto LABEL_33;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_oblivious_http_create_options";
    v24 = 2082;
    v25 = backtrace_string;
    v17 = "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s";
    goto LABEL_32;
  }
  if (a3)
  {
    if (nw_protocol_copy_oblivious_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_36_73533);
    options = nw_protocol_create_options((void *)nw_protocol_copy_oblivious_http_definition_ohttp_definition);
    nw_oblivious_http_set_config(options, a1, a2);
    nw_oblivious_http_set_request_path(options, a3);
    return options;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_oblivious_http_create_options";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_oblivious_http_create_options";
        v12 = "%{public}s called with null request_path";
        goto LABEL_46;
      }
LABEL_47:

      goto LABEL_48;
    }
    if (!v20)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_oblivious_http_create_options";
        v12 = "%{public}s called with null request_path, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    v19 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_oblivious_http_create_options";
        v12 = "%{public}s called with null request_path, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v19)
      goto LABEL_33;
    *(_DWORD *)buf = 136446466;
    v23 = "nw_oblivious_http_create_options";
    v24 = 2082;
    v25 = backtrace_string;
    v17 = "%{public}s called with null request_path, dumping backtrace:%{public}s";
    goto LABEL_32;
  }
LABEL_48:
  if (v9)
    free(v9);
  return 0;
}

void nw_oblivious_http_set_config(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  _QWORD v13[6];
  char v14;
  os_log_type_t v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (nw_protocol_options_is_oblivious_http(v5))
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_oblivious_http_set_config_block_invoke;
    v13[3] = &__block_descriptor_48_e9_B16__0_v8l;
    v13[4] = a2;
    v13[5] = a3;
    nw_protocol_options_access_handle(v5, v13);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_oblivious_http_set_config";
  v7 = (char *)_os_log_send_and_compose_impl();

  v15 = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &v15, &v14))
  {
    if (v15 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v15;
      if (os_log_type_enabled(v8, v15))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_oblivious_http_set_config";
        v10 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = v15;
        v12 = os_log_type_enabled(v8, v15);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_oblivious_http_set_config";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v12)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_oblivious_http_set_config";
        v10 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = v15;
      if (os_log_type_enabled(v8, v15))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_oblivious_http_set_config";
        v10 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v7)
    free(v7);
LABEL_3:

}

void nw_oblivious_http_set_request_path(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  _QWORD v11[5];
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __nw_oblivious_http_set_request_path_block_invoke;
    v11[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v11[4] = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_oblivious_http_set_request_path";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_oblivious_http_set_request_path";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_oblivious_http_set_request_path";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_oblivious_http_set_request_path";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_oblivious_http_set_request_path";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v5)
    free(v5);
LABEL_3:

}

BOOL nw_protocol_options_is_oblivious_http(void *a1)
{
  id *v1;
  id v2;
  id v3;
  _BOOL8 is_equal_unsafe;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_oblivious_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_oblivious_http_definition_onceToken, &__block_literal_global_36_73533);
    v3 = (id)nw_protocol_copy_oblivious_http_definition_ohttp_definition;
    if (nw_protocol_definition_is_equal_unsafe((uint64_t)v2, (uint64_t)v3))
    {
      is_equal_unsafe = 1;
    }
    else
    {
      if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1)
        dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_37);
      is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition);
    }

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_protocol_options_is_oblivious_http";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_options_is_oblivious_http";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_options_is_oblivious_http";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_options_is_oblivious_http";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_options_is_oblivious_http";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v7)
    free(v7);
  return 0;
}

BOOL __nw_oblivious_http_set_request_path_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  const char *v5;
  char *v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;

  v4 = *(void **)(a2 + 16);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a2 + 16) = 0;
  }
  v5 = *(const char **)(a1 + 32);
  if (!v5)
    return 1;
  v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(_QWORD *)(a2 + 16) = v6;
    return 1;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __nw_oblivious_http_set_config_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  xpc_object_t v6;
  void *v7;

  v4 = *(const void **)(a1 + 32);
  if (v4 && (v5 = *(_QWORD *)(a1 + 40)) != 0)
  {
    v6 = xpc_data_create(v4, v5);
    v7 = *(void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v6;
  }
  else
  {
    v7 = *(void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
  }

  *(_BYTE *)(a2 + 32) &= ~4u;
  return 1;
}

NWConcrete_nw_protocol_options *nw_oblivious_http_create_options_with_context(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NWConcrete_nw_protocol_options *options;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  void *v15;
  void *v16;
  char *backtrace_string;
  _BOOL4 v18;
  const char *v19;
  _BOOL4 v20;
  _BOOL4 v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_oblivious_http_create_options_with_context";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v11, &type, &v22))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_oblivious_http_create_options_with_context";
      v14 = "%{public}s called with null oblivious_config";
LABEL_46:
      _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      goto LABEL_47;
    }
    if (!v22)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_oblivious_http_create_options_with_context";
        v14 = "%{public}s called with null oblivious_config, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_oblivious_http_create_options_with_context";
        v14 = "%{public}s called with null oblivious_config, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v18)
      goto LABEL_33;
    *(_DWORD *)buf = 136446466;
    v25 = "nw_oblivious_http_create_options_with_context";
    v26 = 2082;
    v27 = backtrace_string;
    v19 = "%{public}s called with null oblivious_config, dumping backtrace:%{public}s";
LABEL_32:
    _os_log_impl(&dword_182FBE000, v12, v13, v19, buf, 0x16u);
LABEL_33:

    free(backtrace_string);
    goto LABEL_48;
  }
  if (!a2)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_oblivious_http_create_options_with_context";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v11, &type, &v22))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (!os_log_type_enabled(v12, type))
        goto LABEL_47;
      *(_DWORD *)buf = 136446210;
      v25 = "nw_oblivious_http_create_options_with_context";
      v14 = "%{public}s called with null oblivious_config_length";
      goto LABEL_46;
    }
    if (!v22)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_oblivious_http_create_options_with_context";
        v14 = "%{public}s called with null oblivious_config_length, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_oblivious_http_create_options_with_context";
        v14 = "%{public}s called with null oblivious_config_length, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v20)
      goto LABEL_33;
    *(_DWORD *)buf = 136446466;
    v25 = "nw_oblivious_http_create_options_with_context";
    v26 = 2082;
    v27 = backtrace_string;
    v19 = "%{public}s called with null oblivious_config_length, dumping backtrace:%{public}s";
    goto LABEL_32;
  }
  if (a3)
  {
    if (nw_protocol_copy_oblivious_http_contexts_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_oblivious_http_contexts_definition_onceToken, &__block_literal_global_37);
    options = nw_protocol_create_options((void *)nw_protocol_copy_oblivious_http_contexts_definition_ohttp_definition);
    nw_oblivious_http_set_config(options, a1, a2);
    nw_oblivious_http_set_request_path(options, a3);
    nw_oblivious_http_set_use_chunks(options, 1);
    nw_oblivious_http_set_context_id(options, a4);
    return options;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_oblivious_http_create_options_with_context";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v11, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_oblivious_http_create_options_with_context";
        v14 = "%{public}s called with null request_path";
        goto LABEL_46;
      }
LABEL_47:

      goto LABEL_48;
    }
    if (!v22)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_oblivious_http_create_options_with_context";
        v14 = "%{public}s called with null request_path, backtrace limit exceeded";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    v21 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_oblivious_http_create_options_with_context";
        v14 = "%{public}s called with null request_path, no backtrace";
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (!v21)
      goto LABEL_33;
    *(_DWORD *)buf = 136446466;
    v25 = "nw_oblivious_http_create_options_with_context";
    v26 = 2082;
    v27 = backtrace_string;
    v19 = "%{public}s called with null request_path, dumping backtrace:%{public}s";
    goto LABEL_32;
  }
LABEL_48:
  if (v11)
    free(v11);
  return 0;
}

void nw_oblivious_http_set_use_chunks(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  _QWORD v11[4];
  char v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __nw_oblivious_http_set_use_chunks_block_invoke;
    v11[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v12 = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_oblivious_http_set_use_chunks";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_oblivious_http_set_use_chunks";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_oblivious_http_set_use_chunks";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_oblivious_http_set_use_chunks";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_oblivious_http_set_use_chunks";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v5)
    free(v5);
LABEL_3:

}

void nw_oblivious_http_set_context_id(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  _QWORD v11[5];
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __nw_oblivious_http_set_context_id_block_invoke;
    v11[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v11[4] = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_oblivious_http_set_context_id";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_oblivious_http_set_context_id";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_oblivious_http_set_context_id";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_oblivious_http_set_context_id";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_oblivious_http_set_context_id";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v5)
    free(v5);
LABEL_3:

}

uint64_t __nw_oblivious_http_set_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) |= 2u;
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 32);
  return 1;
}

uint64_t __nw_oblivious_http_set_use_chunks_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 32) = *(_BYTE *)(a2 + 32) & 0xFE | *(_BYTE *)(a1 + 32);
  return 1;
}

uint64_t nw_oblivious_http_set_standalone_aead_key(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[6];

  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_oblivious_http_set_standalone_aead_key_block_invoke;
  v4[3] = &__block_descriptor_48_e9_B16__0_v8l;
  v4[4] = a2;
  v4[5] = a3;
  return nw_protocol_options_access_handle(a1, v4);
}

uint64_t __nw_oblivious_http_set_standalone_aead_key_block_invoke(uint64_t a1, uint64_t a2)
{
  const void *v4;
  size_t v5;
  xpc_object_t v6;
  void *v7;

  v4 = *(const void **)(a1 + 32);
  if (v4 && (v5 = *(_QWORD *)(a1 + 40)) != 0)
  {
    v6 = xpc_data_create(v4, v5);
    v7 = *(void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = v6;
  }
  else
  {
    v7 = *(void **)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
  }

  *(_BYTE *)(a2 + 32) |= 4u;
  return 1;
}

uint64_t nw_oblivious_http_get_config_is_standalone_aead(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    v2 = nw_protocol_options_access_handle(v1, &__block_literal_global_39_73644);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_oblivious_http_get_config_is_standalone_aead";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_oblivious_http_get_config_is_standalone_aead";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "nw_oblivious_http_get_config_is_standalone_aead";
            v15 = 2082;
            v16 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_oblivious_http_get_config_is_standalone_aead";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_oblivious_http_get_config_is_standalone_aead";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

uint64_t __nw_oblivious_http_get_config_is_standalone_aead_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 32) >> 2) & 1;
}

id nw_oblivious_http_copy_config(void *a1)
{
  id v1;
  id v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v16 = __Block_byref_object_copy__4;
    v17 = __Block_byref_object_dispose__5;
    v18 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_oblivious_http_copy_config_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(id *)(*(_QWORD *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_oblivious_http_copy_config";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_copy_config";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_oblivious_http_copy_config";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_copy_config";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_copy_config";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_183A3E50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_oblivious_http_copy_config_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 8));
  return 1;
}

uint64_t nw_oblivious_http_get_request_path(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_oblivious_http_get_request_path_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_oblivious_http_get_request_path";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_get_request_path";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_oblivious_http_get_request_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_get_request_path";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_get_request_path";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_183A3E84C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_oblivious_http_get_request_path_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 16);
  return 1;
}

uint64_t nw_oblivious_http_get_use_chunks(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    v2 = nw_protocol_options_access_handle(v1, &__block_literal_global_40_73666);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_oblivious_http_get_use_chunks";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_oblivious_http_get_use_chunks";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "nw_oblivious_http_get_use_chunks";
            v15 = 2082;
            v16 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_oblivious_http_get_use_chunks";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_oblivious_http_get_use_chunks";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

uint64_t __nw_oblivious_http_get_use_chunks_block_invoke(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 32) & 1;
}

uint64_t nw_oblivious_http_get_use_context_ids(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    v2 = nw_protocol_options_access_handle(v1, &__block_literal_global_41_73674);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_oblivious_http_get_use_context_ids";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v5, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_oblivious_http_get_use_context_ids";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v14 = "nw_oblivious_http_get_use_context_ids";
            v15 = 2082;
            v16 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_oblivious_http_get_use_context_ids";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_oblivious_http_get_use_context_ids";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

uint64_t __nw_oblivious_http_get_use_context_ids_block_invoke(uint64_t a1, uint64_t a2)
{
  return (*(unsigned __int8 *)(a2 + 32) >> 1) & 1;
}

uint64_t nw_oblivious_http_get_context_id(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_oblivious_http_get_context_id_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_oblivious_http_get_context_id";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_get_context_id";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_oblivious_http_get_context_id";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_get_context_id";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_get_context_id";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_183A3F078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_oblivious_http_get_context_id_block_invoke(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

void nw_oblivious_http_set_media_type(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  _QWORD v11[5];
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_oblivious_http(v3))
  {
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __nw_oblivious_http_set_media_type_block_invoke;
    v11[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v11[4] = a2;
    nw_protocol_options_access_handle(v3, v11);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_oblivious_http_set_media_type";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_oblivious_http_set_media_type";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options)";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_oblivious_http_set_media_type";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v10)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_oblivious_http_set_media_type";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_oblivious_http_set_media_type";
        v8 = "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v5)
    free(v5);
LABEL_3:

}

BOOL __nw_oblivious_http_set_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  const char *v5;
  char *v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;

  v4 = *(void **)(a2 + 24);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a2 + 24) = 0;
  }
  v5 = *(const char **)(a1 + 32);
  if (!v5)
    return 1;
  v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(_QWORD *)(a2 + 24) = v6;
    return 1;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t nw_oblivious_http_get_media_type(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_oblivious_http(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_oblivious_http_get_media_type_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_oblivious_http_get_media_type";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_get_media_type";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_oblivious_http(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_oblivious_http_get_media_type";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_get_media_type";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_oblivious_http_get_media_type";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_oblivious_http(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_183A3F758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_oblivious_http_get_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 24);
  return 1;
}

id *nw_http_create_metadata_for_request(void *a1)
{
  id v1;
  id *singleton;
  id v3;
  uint64_t v4;
  void *v5;
  id *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  _QWORD v15[4];
  id v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
  if (singleton)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_http_create_metadata_for_request_block_invoke;
    v15[3] = &unk_1E14A9F20;
    v3 = v1;
    v16 = v3;
    v4 = (uint64_t)singleton[4];
    if (v4)
    {
      __nw_http_create_metadata_for_request_block_invoke((uint64_t)v15, v4);
      v5 = v16;
    }
    else
    {
      v5 = v3;
    }
    v6 = singleton;

    goto LABEL_8;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_http_create_metadata_for_request";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_create_metadata_for_request";
        v12 = "%{public}s called with null metadata";
LABEL_22:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_http_create_metadata_for_request";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v14)
          goto LABEL_23;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_create_metadata_for_request";
        v12 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_22;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_create_metadata_for_request";
        v12 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:

  }
LABEL_24:
  if (v9)
    free(v9);
LABEL_8:

  return singleton;
}

uint64_t __nw_http_create_metadata_for_request_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  return 1;
}

id *nw_http_create_metadata_for_response(void *a1)
{
  id v1;
  id *singleton;
  id v3;
  uint64_t v4;
  void *v5;
  id *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  char *backtrace_string;
  _BOOL4 v14;
  _QWORD v15[4];
  id v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
  if (singleton)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_http_create_metadata_for_response_block_invoke;
    v15[3] = &unk_1E14A9F20;
    v3 = v1;
    v16 = v3;
    v4 = (uint64_t)singleton[4];
    if (v4)
    {
      __nw_http_create_metadata_for_response_block_invoke((uint64_t)v15, v4);
      v5 = v16;
    }
    else
    {
      v5 = v3;
    }
    v6 = singleton;

    goto LABEL_8;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_http_create_metadata_for_response";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v9, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_create_metadata_for_response";
        v12 = "%{public}s called with null metadata";
LABEL_22:
        _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_http_create_metadata_for_response";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v14)
          goto LABEL_23;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_create_metadata_for_response";
        v12 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_22;
      }
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_create_metadata_for_response";
        v12 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:

  }
LABEL_24:
  if (v9)
    free(v9);
LABEL_8:

  return singleton;
}

uint64_t __nw_http_create_metadata_for_response_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 32), *(id *)(a1 + 32));
  return 1;
}

id *nw_http_create_metadata()
{
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  return nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
}

BOOL nw_protocol_metadata_is_http(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_definition_http_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_metadata_is_http";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_metadata_is_http";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_metadata_is_http";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_metadata_is_http";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_metadata_is_http";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_http_metadata_get_type(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  unsigned int *v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v26 = 0;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_get_type_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_type_block_invoke((uint64_t)v22, isa);
        v6 = (unsigned int *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = (unsigned int *)&v26;
      }
      v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_type";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

void sub_183A4062C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_metadata_get_type_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  void *v6;
  id v7;
  int status_code;

  if (*(_QWORD *)(a2 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v4 = 1;
  }
  else
  {
    v6 = *(void **)(a2 + 32);
    if (!v6)
      return 1;
    v7 = v6;
    status_code = _nw_http_response_get_status_code();

    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if ((status_code - 100) > 0x63)
      v4 = 2;
    else
      v4 = 3;
  }
  *(_DWORD *)(v3 + 24) = v4;
  return 1;
}

id nw_http_metadata_copy_request(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_copy_request_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_copy_request_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_request";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_metadata_copy_request_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 24));
  return 1;
}

id nw_http_metadata_copy_response(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_copy_response_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_copy_response_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_response";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_metadata_copy_response_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 32));
  return 1;
}

void nw_http_metadata_set_trailer_fields(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_metadata_set_trailer_fields";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_metadata_set_trailer_fields";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_metadata_set_trailer_fields";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_metadata_set_trailer_fields";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_metadata_set_trailer_fields";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_metadata_set_trailer_fields_block_invoke;
    v24[3] = &unk_1E14A9F20;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_metadata_set_trailer_fields_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_metadata_set_trailer_fields";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_metadata_set_trailer_fields";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_metadata_set_trailer_fields";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_metadata_set_trailer_fields";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_metadata_set_trailer_fields";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_metadata_set_trailer_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 40), *(id *)(a1 + 32));
  return 1;
}

id nw_http_metadata_copy_trailer_fields(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_copy_trailer_fields_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_copy_trailer_fields_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_trailer_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_metadata_copy_trailer_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 40));
  return 1;
}

void nw_http_metadata_set_version(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  int v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_metadata_set_version";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_metadata_set_version";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_metadata_set_version";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_metadata_set_version";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_metadata_set_version";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_metadata_set_version_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v24 = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_metadata_set_version_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_metadata_set_version";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_metadata_set_version";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v25)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_metadata_set_version";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_metadata_set_version";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_metadata_set_version";
    v29 = 2082;
    v30 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_metadata_set_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 48) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_metadata_get_version(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  unsigned int *v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v26 = 0;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_get_version_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_version_block_invoke((uint64_t)v22, isa);
        v6 = (unsigned int *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = (unsigned int *)&v26;
      }
      v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_metadata_get_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 48);
  return 1;
}

void nw_http_metadata_set_method(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[4];
  int v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_set_method";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http_metadata_set_method";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v10)
          goto LABEL_8;
LABEL_59:
        free(v10);
        goto LABEL_8;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_57:

    goto LABEL_58;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_set_method";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_182FBE000, v11, v26, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_metadata_set_method";
      v34 = 2082;
      v35 = v20;
      _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (!a2)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_set_method";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null method", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s called with null method, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_method";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null method, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_metadata_set_method";
      v34 = 2082;
      v35 = v20;
      _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null method, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(v20);
    if (!v10)
      goto LABEL_8;
    goto LABEL_59;
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __nw_http_metadata_set_method_block_invoke;
  v28[3] = &__block_descriptor_36_e9_B16__0_v8l;
  v29 = a2;
  v8 = *((_QWORD *)v5 + 4);
  if (v8)
    __nw_http_metadata_set_method_block_invoke((uint64_t)v28, v8);
LABEL_8:

}

uint64_t __nw_http_metadata_set_method_block_invoke(uint64_t a1, uint64_t a2)
{
  id *v3;
  id v4;
  int v5;
  uint64_t v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  const char *v12;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  NSObject *v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = (id *)(a2 + 24);
  v4 = *(id *)(a2 + 24);
  if (!v4)
  {
    v4 = (id)_nw_http_request_create("GET", "https", 0, "/");
    objc_storeStrong(v3, v4);
  }
  v5 = *(_DWORD *)(a1 + 32);
  v6 = 1;
  switch(v5)
  {
    case 0:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v22 = "nw_http_metadata_set_method_block_invoke";
      v8 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v19 = 0;
      if (!__nwlog_fault(v8, &type, &v19))
        goto LABEL_30;
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_metadata_set_method_block_invoke";
          v11 = "%{public}s Setting invalid method";
LABEL_27:
          v17 = v9;
          v18 = v10;
LABEL_28:
          _os_log_impl(&dword_182FBE000, v17, v18, v11, buf, 0xCu);
          goto LABEL_29;
        }
        goto LABEL_29;
      }
      if (!v19)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_metadata_set_method_block_invoke";
          v11 = "%{public}s Setting invalid method, backtrace limit exceeded";
          goto LABEL_27;
        }
LABEL_29:

        goto LABEL_30;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v15 = type;
      v16 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v16)
          goto LABEL_29;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_http_metadata_set_method_block_invoke";
        v11 = "%{public}s Setting invalid method, no backtrace";
        v17 = v9;
        v18 = v15;
        goto LABEL_28;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v22 = "nw_http_metadata_set_method_block_invoke";
        v23 = 2082;
        v24 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v15, "%{public}s Setting invalid method, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
LABEL_30:
      if (v8)
        free(v8);
      v6 = 0;
LABEL_19:

      return v6;
    case 1:
      v12 = "GET";
      goto LABEL_18;
    case 2:
      v12 = "HEAD";
      goto LABEL_18;
    case 3:
      v12 = "POST";
      goto LABEL_18;
    case 4:
      v12 = "PUT";
      goto LABEL_18;
    case 5:
      v12 = "DELETE";
      goto LABEL_18;
    case 6:
      v12 = "CONNECT";
      goto LABEL_18;
    case 7:
      v12 = "OPTIONS";
      goto LABEL_18;
    case 8:
      v12 = "TRACE";
      goto LABEL_18;
    case 9:
      v12 = "PATCH";
      goto LABEL_18;
    case 100:
      v12 = "CONNECT-UDP";
LABEL_18:
      nw_http_request_set_method(v4, (uint64_t)v12);
      goto LABEL_19;
    default:
      goto LABEL_19;
  }
}

uint64_t nw_http_metadata_get_method(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  unsigned int *v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v26 = 0;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_get_method_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_method_block_invoke((uint64_t)v22, isa);
        v6 = (unsigned int *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = (unsigned int *)&v26;
      }
      v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_method";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

void sub_183A43800(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_http_metadata_get_method_block_invoke(uint64_t a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  int has_method;
  id v7;
  int v8;
  id v9;
  int v10;
  id v11;
  int v12;
  id v13;
  int v14;
  id v15;
  int v16;
  _BOOL4 v17;
  uint64_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  const char *v23;
  char *backtrace_string;
  _BOOL4 v25;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = *(id *)(a2 + 24);
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    has_method = _nw_http_request_has_method((uint64_t)v5);

    if (has_method)
    {
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    }
    else
    {
      v7 = v5;
      v8 = _nw_http_request_has_method((uint64_t)v7);

      if (v8)
      {
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
      }
      else
      {
        v9 = v7;
        v10 = _nw_http_request_has_method((uint64_t)v9);

        if (v10)
        {
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 3;
        }
        else
        {
          v11 = v9;
          v12 = _nw_http_request_has_method((uint64_t)v11);

          if (v12)
          {
            *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 4;
          }
          else
          {
            v13 = v11;
            v14 = _nw_http_request_has_method((uint64_t)v13);

            if (v14)
            {
              *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 5;
            }
            else
            {
              v15 = v13;
              v16 = _nw_http_request_has_method((uint64_t)v15);

              if (v16)
              {
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 6;
              }
              else if (nw_http_request_has_method(v15, (uint64_t)"OPTIONS"))
              {
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 7;
              }
              else if (nw_http_request_has_method(v15, (uint64_t)"TRACE"))
              {
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 8;
              }
              else if (nw_http_request_has_method(v15, (uint64_t)"PATCH"))
              {
                *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 9;
              }
              else
              {
                v17 = nw_http_request_has_method(v15, (uint64_t)"CONNECT-UDP");
                v18 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
                if (v17)
                  *(_DWORD *)(v18 + 24) = 100;
                else
                  *(_DWORD *)(v18 + 24) = 0;
              }
            }
          }
        }
      }
    }
    goto LABEL_40;
  }
  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_http_metadata_get_method_block_invoke";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (__nwlog_fault(v20, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_metadata_get_method_block_invoke";
        v23 = "%{public}s metadata not request";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v21, v22, v23, buf, 0xCu);
      }
    }
    else
    {
      if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_http_metadata_get_method_block_invoke";
            v31 = 2082;
            v32 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s metadata not request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v25)
          goto LABEL_37;
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_metadata_get_method_block_invoke";
        v23 = "%{public}s metadata not request, no backtrace";
        goto LABEL_36;
      }
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_http_metadata_get_method_block_invoke";
        v23 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

  }
LABEL_38:
  if (v20)
    free(v20);
LABEL_40:

  return v4 != 0;
}

void nw_http_metadata_set_path(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[5];
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_http_metadata_set_path";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v10, &type, &v29))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_http_metadata_set_path";
          v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v10)
          goto LABEL_8;
LABEL_59:
        free(v10);
        goto LABEL_8;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_57:

    goto LABEL_58;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_http_metadata_set_path";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v10, &type, &v29))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v29)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_182FBE000, v11, v26, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_http_metadata_set_path";
      v33 = 2082;
      v34 = v20;
      _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (!a2)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_http_metadata_set_path";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v10, &type, &v29))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v29)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_http_metadata_set_path";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_http_metadata_set_path";
      v33 = 2082;
      v34 = v20;
      _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(v20);
    if (!v10)
      goto LABEL_8;
    goto LABEL_59;
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __nw_http_metadata_set_path_block_invoke;
  v28[3] = &__block_descriptor_40_e9_B16__0_v8l;
  v28[4] = a2;
  v8 = *((_QWORD *)v5 + 4);
  if (v8)
    __nw_http_metadata_set_path_block_invoke((uint64_t)v28, v8);
LABEL_8:

}

uint64_t __nw_http_metadata_set_path_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  id v4;
  uint64_t v6;

  v2 = *(void **)(a2 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    v4 = v2;
    _nw_http_request_set_path(v4, v3);
  }
  else
  {
    v6 = _nw_http_request_create("GET", "https", 0, v3);
    v4 = *(id *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v6;
  }

  return 1;
}

uint64_t nw_http_metadata_get_path(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_get_path_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_path_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = objc_msgSend(objc_retainAutorelease(v6), "cStringUsingEncoding:", 5);
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_path";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

void sub_183A44990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_http_metadata_get_path_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  _QWORD *v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a2 + 24);
  if (v2)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_http_metadata_get_path_block_invoke_44;
    v13[3] = &unk_1E14AA0E8;
    v13[4] = *(_QWORD *)(a1 + 32);
    v3 = v2;
    v4 = v13;
    _nw_http_request_access_path((uint64_t)v3, v4);

    return v2 != 0;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http_metadata_get_path_block_invoke";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http_metadata_get_path_block_invoke";
        v10 = "%{public}s metadata not request";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http_metadata_get_path_block_invoke";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s metadata not request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v12)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http_metadata_get_path_block_invoke";
        v10 = "%{public}s metadata not request, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http_metadata_get_path_block_invoke";
        v10 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v7)
    free(v7);
  return v2 != 0;
}

void __nw_http_metadata_get_path_block_invoke_44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (a2)
  {
    objc_msgSend(MEMORY[0x1E0CB3940], "stringWithCString:encoding:", a2, 5);
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
}

id nw_http_metadata_copy_endpoint(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_copy_endpoint_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_copy_endpoint_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_endpoint";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

void sub_183A45220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_http_metadata_copy_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;
  const char *v5;
  nw_endpoint_t url;
  uint64_t v7;
  void *v8;
  char *v9;
  void *v11;
  const char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a2 + 24);
  if (!v2)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http_metadata_copy_endpoint_block_invoke";
    v12 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v12, &type, &v18))
    {
LABEL_21:
      if (!v12)
        return v2 != 0;
      v9 = (char *)v12;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_metadata_copy_endpoint_block_invoke";
        v15 = "%{public}s metadata not request";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_http_metadata_copy_endpoint_block_invoke";
            v22 = 2082;
            v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s metadata not request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v17)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_metadata_copy_endpoint_block_invoke";
        v15 = "%{public}s metadata not request, no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_metadata_copy_endpoint_block_invoke";
        v15 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

    goto LABEL_21;
  }
  v4 = v2;
  v5 = (const char *)_nw_http_request_copy_url();

  if (v5)
  {
    url = nw_endpoint_create_url(v5);
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = url;

    v9 = (char *)v5;
LABEL_4:
    free(v9);
  }
  return v2 != 0;
}

void nw_http_metadata_set_endpoint(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  int v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  int v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  id v18;
  int v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  id v23;
  int v24;
  os_log_type_t v25;
  id v26;
  int v27;
  id v28;
  int v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  void *v35;
  os_log_type_t v36;
  char *backtrace_string;
  os_log_type_t v38;
  _BOOL4 v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  os_log_type_t v46;
  os_log_type_t v47;
  uint64_t v48;
  _QWORD v49[5];
  char v50;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v53;
  __int16 v54;
  _WORD v55[17];

  *(_QWORD *)&v55[13] = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_metadata_set_endpoint";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v15, &type, &v50))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v50)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      v39 = os_log_type_enabled(v31, type);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v53 = "nw_http_metadata_set_endpoint";
          v54 = 2082;
          *(_QWORD *)v55 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v31, v38, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_27:
        if (!v15)
          goto LABEL_29;
LABEL_28:
        free(v15);
        goto LABEL_29;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_182FBE000, v31, v38, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_182FBE000, v31, v45, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_78:

    goto LABEL_27;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_metadata_set_endpoint";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v15, &type, &v50))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (!v50)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_182FBE000, v31, v46, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_78;
    }
    v40 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v31 = objc_claimAutoreleasedReturnValue();
    v41 = type;
    v42 = os_log_type_enabled(v31, type);
    if (!v40)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_182FBE000, v31, v41, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_metadata_set_endpoint";
      v54 = 2082;
      *(_QWORD *)v55 = v40;
      _os_log_impl(&dword_182FBE000, v31, v41, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_59;
  }
  if (!v4)
  {
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v53 = "nw_http_metadata_set_endpoint";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (!__nwlog_fault(v15, &type, &v50))
      goto LABEL_27;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_182FBE000, v31, v36, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (!v50)
    {
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v31, type))
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_182FBE000, v31, v47, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_78;
    }
    v40 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v31 = objc_claimAutoreleasedReturnValue();
    v43 = type;
    v44 = os_log_type_enabled(v31, type);
    if (!v40)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v53 = "nw_http_metadata_set_endpoint";
        _os_log_impl(&dword_182FBE000, v31, v43, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_78;
    }
    if (v44)
    {
      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_metadata_set_endpoint";
      v54 = 2082;
      *(_QWORD *)v55 = v40;
      _os_log_impl(&dword_182FBE000, v31, v43, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_59:

    free(v40);
    if (!v15)
      goto LABEL_29;
    goto LABEL_28;
  }
  v8 = v4;
  v9 = objc_msgSend(v8, "type");

  if (v9 == 4)
  {
    v49[0] = MEMORY[0x1E0C809B0];
    v49[1] = 3221225472;
    v49[2] = __nw_http_metadata_set_endpoint_block_invoke;
    v49[3] = &unk_1E14A9F20;
    v10 = v8;
    v49[4] = v10;
    v11 = *((_QWORD *)v5 + 4);
    if (v11)
      __nw_http_metadata_set_endpoint_block_invoke((uint64_t)v49, v11);

    goto LABEL_29;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  v13 = v8;
  v14 = objc_msgSend(v13, "type");

  *(_DWORD *)buf = 136446466;
  v53 = "nw_http_metadata_set_endpoint";
  v54 = 1024;
  *(_DWORD *)v55 = v14;
  LODWORD(v48) = 18;
  v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v50 = 0;
  if (!__nwlog_fault(v15, &type, &v50))
    goto LABEL_27;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    v17 = type;
    if (os_log_type_enabled(v16, type))
    {
      v18 = v13;
      v19 = objc_msgSend(v18, "type", buf, v48);

      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_metadata_set_endpoint";
      v54 = 1024;
      *(_DWORD *)v55 = v19;
      _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s incorrect endpoint type %u", buf, 0x12u);
    }
LABEL_26:

    goto LABEL_27;
  }
  if (!v50)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    v25 = type;
    if (os_log_type_enabled(v16, type))
    {
      v26 = v13;
      v27 = objc_msgSend(v26, "type", buf, v48);

      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_metadata_set_endpoint";
      v54 = 1024;
      *(_DWORD *)v55 = v27;
      _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_26;
  }
  v20 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  v21 = type;
  v22 = os_log_type_enabled(v16, type);
  if (!v20)
  {
    if (v22)
    {
      v28 = v13;
      v29 = objc_msgSend(v28, "type", buf, v48);

      *(_DWORD *)buf = 136446466;
      v53 = "nw_http_metadata_set_endpoint";
      v54 = 1024;
      *(_DWORD *)v55 = v29;
      _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_26;
  }
  if (v22)
  {
    v23 = v13;
    v24 = objc_msgSend(v23, "type", buf, v48);

    *(_DWORD *)buf = 136446722;
    v53 = "nw_http_metadata_set_endpoint";
    v54 = 1024;
    *(_DWORD *)v55 = v24;
    v55[2] = 2082;
    *(_QWORD *)&v55[3] = v20;
    _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v20);
  if (v15)
    goto LABEL_28;
LABEL_29:

}

void sub_183A45F20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL __nw_http_metadata_set_endpoint_block_invoke(uint64_t a1, uint64_t a2)
{
  const char *url;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  url = nw_endpoint_get_url(*(nw_endpoint_t *)(a1 + 32));
  if (url)
  {
    v4 = *(void **)(a2 + 24);
    if (v4)
    {
      v5 = v4;
      _nw_http_request_set_url();

    }
    else
    {
      v6 = _nw_http_request_create_from_url("GET", url);
      v7 = *(void **)(a2 + 24);
      *(_QWORD *)(a2 + 24) = v6;

    }
    return url != 0;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_http_metadata_set_endpoint_block_invoke";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v10, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_http_metadata_set_endpoint_block_invoke";
        v13 = "%{public}s endpoint isn't url";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_http_metadata_set_endpoint_block_invoke";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s endpoint isn't url, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v15)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_http_metadata_set_endpoint_block_invoke";
        v13 = "%{public}s endpoint isn't url, no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_http_metadata_set_endpoint_block_invoke";
        v13 = "%{public}s endpoint isn't url, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v10)
    free(v10);
  return url != 0;
}

void nw_http_metadata_set_status(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[4];
  int v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_set_status";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http_metadata_set_status";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_58:
        if (!v10)
          goto LABEL_8;
LABEL_59:
        free(v10);
        goto LABEL_8;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_57:

    goto LABEL_58;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_set_status";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_182FBE000, v11, v26, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_metadata_set_status";
      v34 = 2082;
      v35 = v20;
      _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (!a2)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_set_status";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v10, &type, &v30))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null status", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v30)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s called with null status, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_set_status";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null status, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_metadata_set_status";
      v34 = 2082;
      v35 = v20;
      _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null status, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(v20);
    if (!v10)
      goto LABEL_8;
    goto LABEL_59;
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __nw_http_metadata_set_status_block_invoke;
  v28[3] = &__block_descriptor_36_e9_B16__0_v8l;
  v29 = a2;
  v8 = *((_QWORD *)v5 + 4);
  if (v8)
    __nw_http_metadata_set_status_block_invoke((uint64_t)v28, v8);
LABEL_8:

}

uint64_t __nw_http_metadata_set_status_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;
  uint64_t v5;

  v2 = *(void **)(a2 + 32);
  if (v2)
  {
    v3 = v2;
    _nw_http_response_set_status_code();
  }
  else
  {
    v5 = _nw_http_response_create((unsigned __int16)*(_DWORD *)(a1 + 32), 0);
    v3 = *(id *)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v5;
  }

  return 1;
}

uint64_t nw_http_metadata_get_status(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  unsigned int *v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v26 = 0;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_get_status_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_status_block_invoke((uint64_t)v22, isa);
        v6 = (unsigned int *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = (unsigned int *)&v26;
      }
      v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_status";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

void sub_183A46F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

BOOL __nw_http_metadata_get_status_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;
  int status_code;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a2 + 32);
  if (v2)
  {
    v4 = v2;
    status_code = _nw_http_response_get_status_code();

    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = status_code;
    return v2 != 0;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_http_metadata_get_status_block_invoke";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v8, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http_metadata_get_status_block_invoke";
        v11 = "%{public}s metadata not response";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http_metadata_get_status_block_invoke";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s metadata not response, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v13)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http_metadata_get_status_block_invoke";
        v11 = "%{public}s metadata not response, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http_metadata_get_status_block_invoke";
        v11 = "%{public}s metadata not response, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v8)
    free(v8);
  return v2 != 0;
}

void nw_http_metadata_add_header(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;
  void *v6;
  id v7;
  id v8;
  BOOL is_equal_unsafe;
  uint64_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  os_log_type_t v32;
  os_log_type_t v33;
  os_log_type_t v34;
  _QWORD v35[6];
  char v36;
  os_log_type_t v37;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http_metadata_add_header";
    v12 = (char *)_os_log_send_and_compose_impl();

    v37 = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v12, &v37, &v36))
      goto LABEL_75;
    if (v37 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v22 = v37;
      v23 = os_log_type_enabled(v13, v37);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_http_metadata_add_header";
          v40 = 2082;
          v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_75:
        if (!v12)
          goto LABEL_9;
LABEL_76:
        free(v12);
        goto LABEL_9;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v31 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v31, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_74:

    goto LABEL_75;
  }
  v7 = v5;
  v8 = *((id *)v7 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v8, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http_metadata_add_header";
    v12 = (char *)_os_log_send_and_compose_impl();

    v37 = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v12, &v37, &v36))
      goto LABEL_75;
    if (v37 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v36)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v32 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v32, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    v24 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v25 = v37;
    v26 = os_log_type_enabled(v13, v37);
    if (!v24)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http_metadata_add_header";
      v40 = 2082;
      v41 = v24;
      _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (!a2)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http_metadata_add_header";
    v12 = (char *)_os_log_send_and_compose_impl();

    v37 = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v12, &v37, &v36))
      goto LABEL_75;
    if (v37 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null name", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v36)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v33 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v33, "%{public}s called with null name, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    v24 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v27 = v37;
    v28 = os_log_type_enabled(v13, v37);
    if (!v24)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http_metadata_add_header";
      v40 = 2082;
      v41 = v24;
      _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (!a3)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_http_metadata_add_header";
    v12 = (char *)_os_log_send_and_compose_impl();

    v37 = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v12, &v37, &v36))
      goto LABEL_75;
    if (v37 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null value", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (!v36)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v34 = v37;
      if (os_log_type_enabled(v13, v37))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v34, "%{public}s called with null value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_74;
    }
    v24 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v29 = v37;
    v30 = os_log_type_enabled(v13, v37);
    if (!v24)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_add_header";
        _os_log_impl(&dword_182FBE000, v13, v29, "%{public}s called with null value, no backtrace", buf, 0xCu);
      }
      goto LABEL_74;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v39 = "nw_http_metadata_add_header";
      v40 = 2082;
      v41 = v24;
      _os_log_impl(&dword_182FBE000, v13, v29, "%{public}s called with null value, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_49:

    free(v24);
    if (!v12)
      goto LABEL_9;
    goto LABEL_76;
  }
  v35[0] = MEMORY[0x1E0C809B0];
  v35[1] = 3221225472;
  v35[2] = __nw_http_metadata_add_header_block_invoke;
  v35[3] = &__block_descriptor_48_e9_B16__0_v8l;
  v35[4] = a2;
  v35[5] = a3;
  v10 = *((_QWORD *)v7 + 4);
  if (v10)
    __nw_http_metadata_add_header_block_invoke((uint64_t)v35, v10);
LABEL_9:

}

uint64_t __nw_http_metadata_add_header_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;
  void *v5;
  id v6;
  uint64_t v7;
  id v8;
  id *v9;
  void *v10;
  NSObject *v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  char *backtrace_string;
  _BOOL4 v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v4 = strcmp(*(const char **)(a1 + 32), ":protocol");
  v5 = *(void **)(a2 + 24);
  if (v4)
  {
    if (v5)
    {
      v6 = v5;
    }
    else
    {
      v10 = *(void **)(a2 + 32);
      v9 = (id *)(a2 + 32);
      v6 = v10;
      if (!v6)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_http_metadata_add_header_block_invoke";
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_INFO, "%{public}s Unknown metadata type, assuming response for bincompat", buf, 0xCu);
        }

        v6 = (id)_nw_http_response_create(200, 0);
        objc_storeStrong(v9, v6);
      }
    }
    nw_http_fields_append(v6, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

    return 1;
  }
  if (v5)
  {
    v7 = *(_QWORD *)(a1 + 40);
    v8 = v5;
    _nw_http_request_set_extended_connect_protocol(v8, v7);

    return 1;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_http_metadata_add_header_block_invoke";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v14, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_http_metadata_add_header_block_invoke";
        v17 = "%{public}s metadata not request";
LABEL_26:
        _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
      }
    }
    else
    {
      if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v19 = os_log_type_enabled(v15, type);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v23 = "nw_http_metadata_add_header_block_invoke";
            v24 = 2082;
            v25 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s metadata not request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (!v19)
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_http_metadata_add_header_block_invoke";
        v17 = "%{public}s metadata not request, no backtrace";
        goto LABEL_26;
      }
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_http_metadata_add_header_block_invoke";
        v17 = "%{public}s metadata not request, backtrace limit exceeded";
        goto LABEL_26;
      }
    }
LABEL_27:

  }
LABEL_28:
  if (v14)
    free(v14);
  return 0;
}

void nw_http_metadata_enumerate_headers(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  os_log_type_t v28;
  _QWORD v29[5];
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_enumerate_headers";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v11, &type, &v30))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_http_metadata_enumerate_headers";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_59:
        if (!v11)
          goto LABEL_9;
LABEL_60:
        free(v11);
        goto LABEL_9;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_58:

    goto LABEL_59;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_enumerate_headers";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v11, &type, &v30))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v30)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_metadata_enumerate_headers";
      v34 = 2082;
      v35 = v21;
      _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_39;
  }
  if (!v4)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_http_metadata_enumerate_headers";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v11, &type, &v30))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null enumerator", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v30)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    v21 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v12, type);
    if (!v21)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_http_metadata_enumerate_headers";
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_http_metadata_enumerate_headers";
      v34 = 2082;
      v35 = v21;
      _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_39:

    free(v21);
    if (!v11)
      goto LABEL_9;
    goto LABEL_60;
  }
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = __nw_http_metadata_enumerate_headers_block_invoke;
  v29[3] = &unk_1E14A9DD0;
  v8 = v4;
  v29[4] = v8;
  v9 = *((_QWORD *)v5 + 4);
  if (v9)
    __nw_http_metadata_enumerate_headers_block_invoke((uint64_t)v29, v9);

LABEL_9:
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  void *v8;
  id v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  _QWORD v26[4];
  id v27;
  _BYTE *v28;
  _QWORD v29[4];
  id v30;
  _BYTE *v31;
  _BYTE buf[24];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v4 = *(void **)(a2 + 24);
  v5 = MEMORY[0x1E0C809B0];
  if (v4)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v33 = 1;
    v29[0] = MEMORY[0x1E0C809B0];
    v29[1] = 3221225472;
    v29[2] = __nw_http_metadata_enumerate_headers_block_invoke_2;
    v29[3] = &unk_1E14AA138;
    v31 = buf;
    v30 = *(id *)(a1 + 32);
    v6 = v4;
    v7 = v29;
    _nw_http_request_access_authority_field((uint64_t)v6, v7);

    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      v8 = *(void **)(a2 + 24);
      v26[0] = v5;
      v26[1] = 3221225472;
      v26[2] = __nw_http_metadata_enumerate_headers_block_invoke_4;
      v26[3] = &unk_1E14AA138;
      v28 = buf;
      v27 = *(id *)(a1 + 32);
      nw_http_request_access_path_field(v8, v26);
      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      {
        v9 = *(id *)(a2 + 24);
        v10 = 0;
      }
      else
      {
        v9 = 0;
        v10 = 1;
      }

    }
    else
    {
      v9 = 0;
      v10 = 1;
    }

    _Block_object_dispose(buf, 8);
    if (v10)
      goto LABEL_12;
  }
  else
  {
    v9 = *(id *)(a2 + 32);
  }
  if (v9)
  {
    v22[0] = v5;
    v22[1] = 3221225472;
    v22[2] = __nw_http_metadata_enumerate_headers_block_invoke_49;
    v22[3] = &unk_1E14AA160;
    v23 = *(id *)(a1 + 32);
    v9 = v9;
    v11 = v22;
    _nw_http_fields_enumerate((uint64_t)v9, v11);

LABEL_12:
    v12 = 1;
    goto LABEL_13;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
  v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v15, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null headers", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null headers, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null headers, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_metadata_enumerate_headers_block_invoke";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null headers, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_30:
  if (v15)
    free(v15);
  v9 = 0;
  v12 = 0;
LABEL_13:

  return v12;
}

void sub_183A48974(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 144), 8);
  _Unwind_Resume(a1);
}

void __nw_http_metadata_enumerate_headers_block_invoke_2(uint64_t a1, uint64_t a2)
{
  id v3;
  __int128 v4;
  _QWORD v5[4];
  id v6[2];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __nw_http_metadata_enumerate_headers_block_invoke_3;
  v5[3] = &unk_1E14AA110;
  v4 = *(_OWORD *)(a1 + 32);
  v3 = (id)v4;
  *(_OWORD *)v6 = v4;
  nw_http_field_access(a2, v5);

}

void __nw_http_metadata_enumerate_headers_block_invoke_4(uint64_t a1, uint64_t a2)
{
  id v3;
  __int128 v4;
  _QWORD v5[4];
  id v6[2];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = __nw_http_metadata_enumerate_headers_block_invoke_5;
  v5[3] = &unk_1E14AA110;
  v4 = *(_OWORD *)(a1 + 32);
  v3 = (id)v4;
  *(_OWORD *)v6 = v4;
  nw_http_field_access(a2, v5);

}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke_49(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke_5(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t __nw_http_metadata_enumerate_headers_block_invoke_3(uint64_t a1)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

id *nw_http_create_metadata_for_capsule(uint64_t a1, void *a2)
{
  id v3;
  id *singleton;
  id v5;
  uint64_t v6;
  void *v7;
  id *v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  _QWORD v17[4];
  id v18;
  uint64_t v19;
  char v20;
  os_log_type_t v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_definition_http_definition);
  if (singleton)
  {
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __nw_http_create_metadata_for_capsule_block_invoke;
    v17[3] = &unk_1E14AA188;
    v19 = a1;
    v5 = v3;
    v18 = v5;
    v6 = (uint64_t)singleton[4];
    if (v6)
    {
      __nw_http_create_metadata_for_capsule_block_invoke((uint64_t)v17, v6);
      v7 = v18;
    }
    else
    {
      v7 = v5;
    }
    v8 = singleton;

    goto LABEL_8;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_http_create_metadata_for_capsule";
  v11 = (char *)_os_log_send_and_compose_impl();

  v21 = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v11, &v21, &v20))
  {
    if (v21 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v21;
      if (os_log_type_enabled(v12, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_http_create_metadata_for_capsule";
        v14 = "%{public}s called with null metadata";
LABEL_22:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = v21;
        v16 = os_log_type_enabled(v12, v21);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v23 = "nw_http_create_metadata_for_capsule";
            v24 = 2082;
            v25 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v16)
          goto LABEL_23;
        *(_DWORD *)buf = 136446210;
        v23 = "nw_http_create_metadata_for_capsule";
        v14 = "%{public}s called with null metadata, no backtrace";
        goto LABEL_22;
      }
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v21;
      if (os_log_type_enabled(v12, v21))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_http_create_metadata_for_capsule";
        v14 = "%{public}s called with null metadata, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:

  }
LABEL_24:
  if (v11)
    free(v11);
LABEL_8:

  return singleton;
}

uint64_t __nw_http_create_metadata_for_capsule_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 40);
  objc_storeStrong((id *)(a2 + 16), *(id *)(a1 + 32));
  return 1;
}

BOOL nw_http_metadata_is_capsule(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  BOOL is_equal_unsafe;
  _QWORD *v6;
  _BOOL8 v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_http_metadata_is_capsule";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_http_metadata_is_capsule";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  v3 = (id *)v1;
  v4 = v3[1];

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_definition_http_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_http_metadata_is_capsule";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http", buf, 0xCu);
      }
LABEL_38:

LABEL_39:
      if (v9)
        free(v9);
      goto LABEL_41;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_http_metadata_is_capsule";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_http_metadata_is_capsule";
      v26 = 2082;
      v27 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_26:

    free(backtrace_string);
    goto LABEL_39;
  }
  v6 = v3[4];
  if (!v6)
  {
LABEL_41:
    v7 = 0;
    goto LABEL_42;
  }
  v7 = v6[2] != 0;
LABEL_42:

  return v7;
}

uint64_t nw_http_metadata_get_capsule_type(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  _QWORD *isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_metadata_get_capsule_type_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_capsule_type_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_capsule_type";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_metadata_get_capsule_type_block_invoke(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

id nw_http_metadata_copy_capsule_data(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_copy_capsule_data_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_copy_capsule_data_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_capsule_data";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_metadata_copy_capsule_data_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 16));
  return 1;
}

uint64_t nw_http_metadata_get_datagram_context_id(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_metadata_get_datagram_context_id_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_get_datagram_context_id_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_get_datagram_context_id";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_metadata_get_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 8);
  return 1;
}

void nw_http_metadata_set_datagram_context_id(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_metadata_set_datagram_context_id";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_metadata_set_datagram_context_id";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_metadata_set_datagram_context_id";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_metadata_set_datagram_context_id";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_metadata_set_datagram_context_id";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_metadata_set_datagram_context_id_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_metadata_set_datagram_context_id_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_metadata_set_datagram_context_id";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_metadata_set_datagram_context_id";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_metadata_set_datagram_context_id";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_metadata_set_datagram_context_id";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_metadata_set_datagram_context_id";
    v28 = 2082;
    v29 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_metadata_set_datagram_context_id_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) = *(_QWORD *)(a1 + 32);
  return 1;
}

id *nw_http_create_metadata_with_parsed_fields(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id *metadata_for_request;
  id *v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *backtrace_string;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    if (a2)
    {
      v6 = (void *)_nw_http_parsed_fields_copy_request();

      if (v6)
      {
        metadata_for_request = nw_http_create_metadata_for_request(v6);
LABEL_7:
        v8 = metadata_for_request;
LABEL_9:

        goto LABEL_10;
      }
    }
    else
    {
      v6 = (void *)_nw_http_parsed_fields_copy_response();

      if (v6)
      {
        metadata_for_request = nw_http_create_metadata_for_response(v6);
        goto LABEL_7;
      }
    }
    v8 = 0;
    goto LABEL_9;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_http_create_metadata_with_parsed_fields";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_create_metadata_with_parsed_fields";
        v14 = "%{public}s called with null parsed_fields";
LABEL_24:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_http_create_metadata_with_parsed_fields";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parsed_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (!v16)
          goto LABEL_25;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_create_metadata_with_parsed_fields";
        v14 = "%{public}s called with null parsed_fields, no backtrace";
        goto LABEL_24;
      }
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_http_create_metadata_with_parsed_fields";
        v14 = "%{public}s called with null parsed_fields, backtrace limit exceeded";
        goto LABEL_24;
      }
    }
LABEL_25:

  }
LABEL_26:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_10:

  return v8;
}

id nw_http_metadata_copy_header_fields(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_metadata_copy_header_fields_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_metadata_copy_header_fields_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_copy_header_fields";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

BOOL __nw_http_metadata_copy_header_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v4 = *(void **)(a2 + 24);
  if (!v4)
    v4 = *(void **)(a2 + 32);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v4);
  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  if (!v5)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_http_metadata_copy_header_fields_block_invoke";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v8, &type, &v14))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http_metadata_copy_header_fields_block_invoke";
        v11 = "%{public}s called with null header_fields";
LABEL_18:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_http_metadata_copy_header_fields_block_invoke";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null header_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (!v13)
          goto LABEL_19;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http_metadata_copy_header_fields_block_invoke";
        v11 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_18;
      }
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_http_metadata_copy_header_fields_block_invoke";
        v11 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
LABEL_19:

LABEL_20:
    if (v8)
      free(v8);
  }
  return v5 != 0;
}

void nw_http_metadata_set_request(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  BOOL is_equal_unsafe;
  id v9;
  uint64_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  os_log_type_t v34;
  _QWORD v35[5];
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v5;
  if (v5)
  {
    v7 = *((id *)v5 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_protocol_metadata_copy_definition";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (__nwlog_fault(v12, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_protocol_metadata_copy_definition";
          v40 = 2082;
          v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v13, v32, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v12)
    free(v12);
  v7 = 0;
LABEL_3:

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __nw_http_metadata_set_request_block_invoke;
    v35[3] = &unk_1E14A9F20;
    v9 = v4;
    v35[4] = v9;
    if (v6)
    {
      v10 = v6[4];
      if (v10)
        __nw_http_metadata_set_request_block_invoke((uint64_t)v35, v10);
LABEL_9:

      goto LABEL_10;
    }
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_protocol_metadata_access_handle";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v20, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null metadata", buf, 0xCu);
        }
      }
      else if (v36)
      {
        v29 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v31 = os_log_type_enabled(v21, type);
        if (v29)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            v39 = "nw_protocol_metadata_access_handle";
            v40 = 2082;
            v41 = v29;
            _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v29);
          goto LABEL_64;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_64:
    if (v20)
      free(v20);
    goto LABEL_9;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_http_metadata_set_request";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (__nwlog_fault(v16, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_set_request";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s metadata must be http", buf, 0xCu);
      }
    }
    else if (v36)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v17, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_http_metadata_set_request";
          v40 = 2082;
          v41 = v26;
          _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_59;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_set_request";
        _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_set_request";
        _os_log_impl(&dword_182FBE000, v17, v33, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_59:
  if (v16)
    free(v16);
LABEL_10:

}

uint64_t __nw_http_metadata_set_request_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;

  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  v3 = *(void **)(a2 + 32);
  *(_QWORD *)(a2 + 32) = 0;

  return 1;
}

BOOL __nw_http_metadata_enumerate_modern_header_fields_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _BOOL8 result;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a2 + 24);
  if (!v3)
  {
    v4 = *(id *)(a2 + 32);
    if (v4)
      goto LABEL_4;
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
    v12 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v18))
    {
LABEL_24:
      if (v12)
        free(v12);
      return 0;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
        v15 = "%{public}s called with null header_fields";
LABEL_22:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
            v22 = 2082;
            v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null header_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v17)
          goto LABEL_23;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
        v15 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_22;
      }
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_metadata_enumerate_modern_header_fields_block_invoke";
        v15 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:

    goto LABEL_24;
  }
  v4 = v3;
LABEL_4:
  v5 = *(void **)(a1 + 32);
  v6 = v4;
  v7 = v5;
  if (!v7)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http_fields_enumerate_modern_header_fields";
    v10 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v10);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v10);
  }
  _nw_http_fields_enumerate_modern_header_fields((uint64_t)v6, v7);

  return 1;
}

void nw_http_metadata_enumerate_modern_header_fields_combined(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  _QWORD *v6;
  id v7;
  BOOL is_equal_unsafe;
  id v9;
  uint64_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  os_log_type_t v34;
  _QWORD v35[5];
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v3;
  v6 = v5;
  if (v5)
  {
    v7 = *((id *)v5 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_protocol_metadata_copy_definition";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (__nwlog_fault(v12, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_protocol_metadata_copy_definition";
          v40 = 2082;
          v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v13, v32, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v12)
    free(v12);
  v7 = 0;
LABEL_3:

  if (nw_protocol_copy_http_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v7, nw_protocol_copy_http_definition_http_definition);

  if (is_equal_unsafe)
  {
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke;
    v35[3] = &unk_1E14A9DD0;
    v9 = v4;
    v35[4] = v9;
    if (v6)
    {
      v10 = v6[4];
      if (v10)
        __nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke((uint64_t)v35, v10);
LABEL_9:

      goto LABEL_10;
    }
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_protocol_metadata_access_handle";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v20, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null metadata", buf, 0xCu);
        }
      }
      else if (v36)
      {
        v29 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        v31 = os_log_type_enabled(v21, type);
        if (v29)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            v39 = "nw_protocol_metadata_access_handle";
            v40 = 2082;
            v41 = v29;
            _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v29);
          goto LABEL_64;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_protocol_metadata_access_handle";
          _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_64:
    if (v20)
      free(v20);
    goto LABEL_9;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (__nwlog_fault(v16, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s metadata must be http", buf, 0xCu);
      }
    }
    else if (v36)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v17, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
          v40 = 2082;
          v41 = v26;
          _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_59;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
        _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_http_metadata_enumerate_modern_header_fields_combined";
        _os_log_impl(&dword_182FBE000, v17, v33, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_59:
  if (v16)
    free(v16);
LABEL_10:

}

BOOL __nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  _BOOL8 result;
  NSObject *v9;
  void *v10;
  void *v11;
  void *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  char *backtrace_string;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a2 + 24);
  if (!v3)
  {
    v4 = *(id *)(a2 + 32);
    if (v4)
      goto LABEL_4;
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
    v12 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault((const char *)v12, &type, &v18))
    {
LABEL_24:
      if (v12)
        free(v12);
      return 0;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
        v15 = "%{public}s called with null header_fields";
LABEL_22:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else
    {
      if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
            v22 = 2082;
            v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null header_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (!v17)
          goto LABEL_23;
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
        v15 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_22;
      }
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_http_metadata_enumerate_modern_header_fields_combined_block_invoke";
        v15 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_22;
      }
    }
LABEL_23:

    goto LABEL_24;
  }
  v4 = v3;
LABEL_4:
  v5 = *(void **)(a1 + 32);
  v6 = v4;
  v7 = v5;
  if (!v7)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v9, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v21 = "nw_http_fields_enumerate_modern_header_fields_combined";
    v10 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v10);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v10);
  }
  _nw_http_fields_enumerate_modern_header_fields_combined((uint64_t)v6, v7);

  return 1;
}

uint64_t nw_http_metadata_legacy_serialize(void *a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[6];
  char v32;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v35;
  uint8_t v36[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (a2)
  {
    v5 = nw_protocol_metadata_copy_definition(v3);
    if (nw_protocol_copy_http_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_definition_onceToken, &__block_literal_global_11_72660);
    is_equal = nw_protocol_definition_is_equal(v5, (nw_protocol_definition_t)nw_protocol_copy_http_definition_http_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v35 = 0;
      v31[0] = MEMORY[0x1E0C809B0];
      v31[1] = 3221225472;
      v31[2] = __nw_http_metadata_legacy_serialize_block_invoke;
      v31[3] = &unk_1E14AA1B0;
      v31[4] = buf;
      v31[5] = a2;
      if (v4)
      {
        isa = (uint64_t)v4[4].isa;
        if (isa)
          __nw_http_metadata_legacy_serialize_block_invoke((uint64_t)v31, isa);
LABEL_8:
        v8 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
        _Block_object_dispose(buf, 8);
        goto LABEL_9;
      }
      __nwlog_obj();
      v16 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v36 = 136446210;
      v37 = "nw_protocol_metadata_access_handle";
      v17 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v32 = 0;
      if (__nwlog_fault(v17, &type, &v32))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v19 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)v36 = 136446210;
            v37 = "nw_protocol_metadata_access_handle";
            _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null metadata", v36, 0xCu);
          }
        }
        else if (v32)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v26 = type;
          v27 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v27)
            {
              *(_DWORD *)v36 = 136446466;
              v37 = "nw_protocol_metadata_access_handle";
              v38 = 2082;
              v39 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v18, v26, "%{public}s called with null metadata, dumping backtrace:%{public}s", v36, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_61;
          }
          if (v27)
          {
            *(_DWORD *)v36 = 136446210;
            v37 = "nw_protocol_metadata_access_handle";
            _os_log_impl(&dword_182FBE000, v18, v26, "%{public}s called with null metadata, no backtrace", v36, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v30 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)v36 = 136446210;
            v37 = "nw_protocol_metadata_access_handle";
            _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s called with null metadata, backtrace limit exceeded", v36, 0xCu);
          }
        }

      }
LABEL_61:
      if (v17)
        free(v17);
      goto LABEL_8;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
    v11 = (char *)_os_log_send_and_compose_impl();

    v36[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v11, v36, &type))
    {
      if (v36[0] == 17)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = v36[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v36[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http", buf, 0xCu);
        }
LABEL_54:

        goto LABEL_55;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v29 = v36[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v36[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_182FBE000, v12, v29, "%{public}s metadata must be http, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_54;
      }
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v23 = v36[0];
      v24 = os_log_type_enabled(v12, (os_log_type_t)v36[0]);
      if (!v20)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http, no backtrace", buf, 0xCu);
        }
        goto LABEL_54;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v20;
        _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_34;
    }
  }
  else
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
    v11 = (char *)_os_log_send_and_compose_impl();

    v36[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v11, v36, &type))
    {
      if (v36[0] == 17)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = v36[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v36[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null serialized_length", buf, 0xCu);
        }
        goto LABEL_54;
      }
      if (type == OS_LOG_TYPE_DEFAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v28 = v36[0];
        if (os_log_type_enabled(v12, (os_log_type_t)v36[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s called with null serialized_length, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_54;
      }
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v21 = v36[0];
      v22 = os_log_type_enabled(v12, (os_log_type_t)v36[0]);
      if (!v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null serialized_length, no backtrace", buf, 0xCu);
        }
        goto LABEL_54;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_metadata_legacy_serialize";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v20;
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null serialized_length, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_34:

      free(v20);
    }
  }
LABEL_55:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_9:

  return v8;
}

void sub_183A4D044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_metadata_legacy_serialize_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *(void **)(a2 + 24);
  if (v3)
  {
    v4 = v3;
LABEL_4:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = nw_http_fields_legacy_serialize(v4, *(_QWORD *)(a1 + 40));

    return 1;
  }
  v4 = *(id *)(a2 + 32);
  if (v4)
    goto LABEL_4;
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_http_metadata_legacy_serialize_block_invoke";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v7, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http_metadata_legacy_serialize_block_invoke";
        v10 = "%{public}s called with null header_fields";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_http_metadata_legacy_serialize_block_invoke";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null header_fields, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v12)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http_metadata_legacy_serialize_block_invoke";
        v10 = "%{public}s called with null header_fields, no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_http_metadata_legacy_serialize_block_invoke";
        v10 = "%{public}s called with null header_fields, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v7)
    free(v7);
  return 0;
}

id nw_protocol_copy_http_client_definition()
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  return (id)nw_protocol_copy_http_client_definition_definition;
}

BOOL __nw_protocol_copy_http_client_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_client_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_client_identifier::onceToken, &__block_literal_global_29660);
  v0 = nw_protocol_definition_create_with_identifier((__int128 *)&nw_protocol_http_client_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_client_definition_definition;
  nw_protocol_copy_http_client_definition_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_client_definition_definition, (uint64_t)nw_http_client_allocate_options, (uint64_t)nw_http_client_copy_options, (uint64_t)nw_http_client_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_http_client_definition_definition, (uint64_t)nw_http_client_options_are_equal);
  nw_protocol_definition_set_options_serializer((void *)nw_protocol_copy_http_client_definition_definition, 0, (uint64_t)nw_http_client_serialize_options, (uint64_t)nw_http_client_deserialize_options);
  nw_protocol_definition_set_metadata_initializer((void *)nw_protocol_copy_http_client_definition_definition, 0x48u, nw_http_client_initialize_metadata, nw_http_client_finalize_metadata);
  if (nw_protocol_http_client_identifier::onceToken != -1)
    dispatch_once(&nw_protocol_http_client_identifier::onceToken, &__block_literal_global_29660);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_client_identifier::protocol_identifier, (void *)nw_protocol_copy_http_client_definition_definition, (uint64_t)nw_protocol_http_client_create, 0);
}

BOOL nw_http_client_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_client_copy_options(void *a1, const void **a2)
{
  id v3;
  void **v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL8 result;
  void *v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  NSObject *v15;
  void *v16;
  char *backtrace_string;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_client_copy_options";
    v11 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (!__nwlog_fault((const char *)v11, &type, &v19))
    {
LABEL_22:
      if (v11)
        free(v11);
      v4 = 0;
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_http_client_copy_options";
        v14 = "%{public}s called with null existing_handle";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v18 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_http_client_copy_options";
            v23 = 2082;
            v24 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v18)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v22 = "nw_http_client_copy_options";
        v14 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_http_client_copy_options";
        v14 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

    goto LABEL_22;
  }
  v4 = (void **)malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
LABEL_3:
    v5 = _Block_copy(*a2);
    v6 = *v4;
    *v4 = v5;

    v7 = _Block_copy(a2[1]);
    v8 = v4[1];
    v4[1] = v7;

LABEL_4:
    return (BOOL)v4;
  }
  __nwlog_obj();
  v15 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v15, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v22 = "strict_calloc";
  v23 = 2048;
  v24 = 1;
  v25 = 2048;
  v26 = 16;
  v16 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v16);
  if (!result)
  {
    free(v16);
    goto LABEL_3;
  }
  __break(1u);
  return result;
}

void nw_http_client_deallocate_options(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v3 = *a2;
    *a2 = 0;

    v4 = a2[1];
    a2[1] = 0;

    free(a2);
    return;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_client_deallocate_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_client_deallocate_options";
        v9 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_client_deallocate_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v11)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_client_deallocate_options";
        v9 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_client_deallocate_options";
        v9 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v6)
    free(v6);
}

BOOL nw_http_client_options_are_equal(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _BOOL8 result;

  result = a2 == a3;
  if (a2 != a3 && a2 && a3)
    return *a2 == *a3 && a2[1] == a3[1];
  return result;
}

BOOL nw_http_client_serialize_options(void *a1, const void **a2, _QWORD *a3)
{
  _BOOL8 result;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    result = nw_http_client_copy_options(a1, a2);
    *a3 = 16;
    return result;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_http_client_serialize_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_client_serialize_options";
        v9 = "%{public}s called with null existing_handle";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_http_client_serialize_options";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v11)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_client_serialize_options";
        v9 = "%{public}s called with null existing_handle, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_http_client_serialize_options";
        v9 = "%{public}s called with null existing_handle, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

  }
LABEL_19:
  if (v6)
    free(v6);
  return 0;
}

BOOL nw_http_client_deserialize_options(void *a1, const void **a2, uint64_t a3)
{
  id v5;
  void *v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  char *backtrace_string;
  _BOOL4 v16;
  const char *v17;
  _BOOL4 v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (a2)
  {
    if (a3 == 16)
    {
      v7 = nw_http_client_copy_options(v5, a2);
      goto LABEL_4;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_client_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_client_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options))";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_client_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options)), backt"
                "race limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v18 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_client_deserialize_options";
          v13 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options)), no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v18)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_client_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null (serialized_length == sizeof(struct nw_protocol_http_client_options)), dumping b"
            "acktrace:%{public}s";
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v17, buf, 0x16u);
LABEL_22:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_http_client_deserialize_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_client_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes";
LABEL_31:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_32:

        goto LABEL_33;
      }
      if (!v19)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_client_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, backtrace limit exceeded";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v16 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_http_client_deserialize_options";
          v13 = "%{public}s called with null serialized_bytes, no backtrace";
          goto LABEL_31;
        }
        goto LABEL_32;
      }
      if (!v16)
        goto LABEL_22;
      *(_DWORD *)buf = 136446466;
      v22 = "nw_http_client_deserialize_options";
      v23 = 2082;
      v24 = backtrace_string;
      v17 = "%{public}s called with null serialized_bytes, dumping backtrace:%{public}s";
      goto LABEL_21;
    }
  }
LABEL_33:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

void nw_http_client_initialize_metadata(uint64_t a1, uint64_t a2)
{
  _BOOL8 v3;
  void *v4;

  mach_get_times();
  *(_QWORD *)a2 = 1;
  *(double *)(a2 + 16) = (double)0 - *MEMORY[0x1E0C9ADF8] + (double)0 * 0.000000001;
  v3 = nw_array_create();
  v4 = *(void **)(a2 + 24);
  *(_QWORD *)(a2 + 24) = v3;

}

void nw_http_client_finalize_metadata(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = (void *)a2[3];
  a2[3] = 0;

  v4 = (void *)a2[4];
  a2[4] = 0;

  v5 = (void *)a2[5];
  if (v5)
  {
    free(v5);
    a2[5] = 0;
  }
  v6 = (void *)a2[6];
  a2[6] = 0;

  v7 = (void *)a2[7];
  a2[7] = 0;

}

NWConcrete_nw_protocol_options *nw_http_client_create_options()
{
  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_client_definition_definition);
}

BOOL nw_protocol_options_is_http_client(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_client_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_client_definition_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_client";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_client";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_client";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_client";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_client";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

uint64_t __nw_http_client_options_set_resend_handler_block_invoke(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;

  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = *a2;
  *a2 = v3;

  return 1;
}

void *nw_http_client_options_copy_resend_handler(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  void *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  void *(*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v24 = __Block_byref_object_copy__72473;
      v25 = __Block_byref_object_dispose__72474;
      v26 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_client_options_copy_resend_handler_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = _Block_copy(*(const void **)(*(_QWORD *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_client", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_options_copy_resend_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A4EB98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_client_options_copy_resend_handler_block_invoke(uint64_t a1, const void **a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = _Block_copy(*a2);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

uint64_t __nw_http_client_options_set_retry_with_h1_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v3;

  return 1;
}

void *nw_http_client_options_copy_retry_with_h1_handler(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  void *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  _QWORD v20[5];
  char v21;
  os_log_type_t type;
  _BYTE buf[24];
  void *(*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_options_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v24 = __Block_byref_object_copy__72473;
      v25 = __Block_byref_object_dispose__72474;
      v26 = 0;
      v20[0] = MEMORY[0x1E0C809B0];
      v20[1] = 3221225472;
      v20[2] = __nw_http_client_options_copy_retry_with_h1_handler_block_invoke;
      v20[3] = &unk_1E14A9D68;
      v20[4] = buf;
      nw_protocol_options_access_handle(v2, v20);
      v5 = _Block_copy(*(const void **)(*(_QWORD *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s protocol options are not http_client", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s protocol options are not http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s protocol options are not http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v8, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v21)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_options_copy_retry_with_h1_handler";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_6:

  return v5;
}

void sub_183A4F190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_client_options_copy_retry_with_h1_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  v3 = _Block_copy(*(const void **)(a2 + 8));
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

  return 1;
}

void nw_http_client_metadata_create_next_transaction(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  int v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_client_metadata_create_next_transaction";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_create_next_transaction";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_client_metadata_create_next_transaction";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_create_next_transaction";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_create_next_transaction";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_client_metadata_create_next_transaction_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v24 = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_client_metadata_create_next_transaction_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_client_metadata_create_next_transaction";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_create_next_transaction";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_client", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v25)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_create_next_transaction";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_create_next_transaction";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_client_metadata_create_next_transaction";
    v29 = 2082;
    v30 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_client_metadata_create_next_transaction_block_invoke(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id *singleton;
  int v9;
  id *v10;
  id *v11;
  id *v12;
  id v13;
  BOOL is_equal_unsafe;
  uint64_t v15;
  uint64_t start_time;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  char v32;
  os_log_type_t type;
  _BYTE buf[24];
  void *v35;
  int v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a2 + 24);
  if (v4)
  {
    v6 = v4[2];
    v5 = v4[3];
    if (v6 == v5)
      v4 = 0;
    else
      v4 = *(_QWORD **)(v5 - 8);
  }
  v7 = v4;
  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_transaction_definition_definition);
  v9 = *(_DWORD *)(a1 + 32);
  v10 = singleton;
  v11 = v10;
  if (!v10)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v19, &type, &v32))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_49:
        if (!v19)
          goto LABEL_13;
        goto LABEL_50;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
        _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_48:

    goto LABEL_49;
  }
  v12 = v10;
  v13 = v12[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v13, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_http_transaction_metadata_set_start_reason_block_invoke;
    v35 = &__block_descriptor_36_e9_B16__0_v8l;
    v36 = v9;
    v15 = (uint64_t)v12[4];
    if (v15)
      __nw_http_transaction_metadata_set_start_reason_block_invoke((uint64_t)buf, v15);
    goto LABEL_13;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (!__nwlog_fault(v19, &type, &v32))
    goto LABEL_49;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
      _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (!v32)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v31 = type;
    if (os_log_type_enabled(v20, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
      _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_48;
  }
  v27 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v20 = objc_claimAutoreleasedReturnValue();
  v28 = type;
  v29 = os_log_type_enabled(v20, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
      _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_48;
  }
  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_set_start_reason";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v27;
    _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v19)
LABEL_50:
    free(v19);
LABEL_13:

  nw_array_append(*(_QWORD *)(a2 + 24), v11);
  if (v7)
  {
    start_time = nw_http_transaction_metadata_get_start_time(v11);
    nw_http_transaction_metadata_set_end_time(v7, start_time);
  }

  return 1;
}

uint64_t nw_http_transaction_metadata_get_start_time(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_start_time_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_start_time_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

void nw_http_transaction_metadata_set_end_time(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  id *v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[6];
  char v25;
  os_log_type_t v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_transaction_metadata_set_end_time";
    v11 = (char *)_os_log_send_and_compose_impl();

    v26 = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &v26, &v25))
      goto LABEL_42;
    if (v26 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = v26;
      if (os_log_type_enabled(v12, v26))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_transaction_metadata_set_end_time";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = v26;
      v18 = os_log_type_enabled(v12, v26);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_transaction_metadata_set_end_time";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_transaction_metadata_set_end_time";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = v26;
      if (os_log_type_enabled(v12, v26))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_transaction_metadata_set_end_time";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_transaction_metadata_set_end_time_block_invoke;
    v24[3] = &unk_1E14AA188;
    v24[5] = a2;
    v8 = v5;
    v24[4] = v8;
    v9 = (uint64_t)v8[4];
    if (v9)
      __nw_http_transaction_metadata_set_end_time_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_transaction_metadata_set_end_time";
  v11 = (char *)_os_log_send_and_compose_impl();

  v26 = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &v26, &v25))
    goto LABEL_42;
  if (v26 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = v26;
    if (os_log_type_enabled(v12, v26))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_transaction_metadata_set_end_time";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = v26;
    if (os_log_type_enabled(v12, v26))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_transaction_metadata_set_end_time";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = v26;
  v21 = os_log_type_enabled(v12, v26);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_transaction_metadata_set_end_time";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_transaction_metadata_set_end_time";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

BOOL __nw_http_transaction_metadata_set_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a2 + 56);
  if (!v2)
  {
    *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 40);
    v3 = *(_QWORD *)(a2 + 120);
    if (v3)
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 16))(v3, *(_QWORD *)(a1 + 32), 4);
  }
  return v2 == 0;
}

uint64_t __nw_http_transaction_metadata_get_start_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 48);
  return 1;
}

uint64_t __nw_http_transaction_metadata_set_start_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 136) = *(_DWORD *)(a1 + 32);
  return 1;
}

void __nw_protocol_copy_http_transaction_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *named;
  void *v1;

  named = nw_protocol_definition_create_named(1, "http_transaction");
  v1 = (void *)nw_protocol_copy_http_transaction_definition_definition;
  nw_protocol_copy_http_transaction_definition_definition = (uint64_t)named;

  nw_protocol_definition_set_metadata_initializer((void *)nw_protocol_copy_http_transaction_definition_definition, 0x90u, nw_http_transaction_initialize_metadata, nw_http_transaction_finalize_metadata);
}

uint64_t nw_http_transaction_initialize_metadata(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v4;

  result = mach_continuous_time();
  if (result <= 1)
    v4 = 1;
  else
    v4 = result;
  *(_QWORD *)(a2 + 48) = v4;
  return result;
}

void nw_http_transaction_finalize_metadata(uint64_t a1, _QWORD *a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  v3 = (void *)a2[12];
  a2[12] = 0;

  v4 = (void *)a2[13];
  a2[13] = 0;

  v5 = (void *)a2[14];
  a2[14] = 0;

  v6 = (void *)a2[15];
  a2[15] = 0;

  v7 = (void *)a2[16];
  a2[16] = 0;

}

id nw_http_client_metadata_copy_current_transaction_metadata(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_client_metadata_copy_current_transaction_metadata_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_client_metadata_copy_current_transaction_metadata_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_client", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_copy_current_transaction_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_client_metadata_copy_current_transaction_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a2 + 24);
  if (!v2 || (v4 = *(_QWORD *)(v2 + 16), v3 = *(_QWORD *)(v2 + 24), v4 == v3))
    v5 = 0;
  else
    v5 = *(void **)(v3 - 8);
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), v5);
  return 1;
}

uint64_t __nw_http_client_metadata_get_transaction_count_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
    v2 = (uint64_t)(*(_QWORD *)(v2 + 24) - *(_QWORD *)(v2 + 16)) >> 3;
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v2;
  return 1;
}

void nw_http_client_metadata_enumerate_transactions(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_client_metadata_enumerate_transactions";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_enumerate_transactions";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_client_metadata_enumerate_transactions";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_enumerate_transactions";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_enumerate_transactions";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_client_metadata_enumerate_transactions_block_invoke;
    v24[3] = &unk_1E14A9DD0;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_client_metadata_enumerate_transactions_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_client_metadata_enumerate_transactions";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_enumerate_transactions";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_client", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_enumerate_transactions";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_enumerate_transactions";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_client_metadata_enumerate_transactions";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_client_metadata_enumerate_transactions_block_invoke(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v2;
  _QWORD v4[4];
  id v5;

  v2 = *(unsigned __int8 **)(a2 + 24);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_http_client_metadata_enumerate_transactions_block_invoke_2;
  v4[3] = &unk_1E14AC278;
  v5 = *(id *)(a1 + 32);
  nw_array_apply(v2, (uint64_t)v4);

  return 1;
}

uint64_t __nw_http_client_metadata_enumerate_transactions_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void nw_http_client_metadata_set_initial_request(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_client_metadata_set_initial_request";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_set_initial_request";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_client_metadata_set_initial_request";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_set_initial_request";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_set_initial_request";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_client_metadata_set_initial_request_block_invoke;
    v24[3] = &unk_1E14A9F20;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_client_metadata_set_initial_request_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_client_metadata_set_initial_request";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_set_initial_request";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_client", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_set_initial_request";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_set_initial_request";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_client_metadata_set_initial_request";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_client_metadata_set_initial_request_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 32), *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_client_metadata_get_initial_request_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 32));
  return 1;
}

void nw_http_client_metadata_set_prevent_timeout_callback(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_client_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_client_metadata_set_prevent_timeout_callback_block_invoke;
    v24[3] = &unk_1E14A9DD0;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_client_metadata_set_prevent_timeout_callback_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_client", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_client_metadata_set_prevent_timeout_callback";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_client_metadata_set_prevent_timeout_callback_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = *(void **)(a2 + 48);
  *(_QWORD *)(a2 + 48) = v3;

  return 1;
}

BOOL __nw_http_client_metadata_mark_end_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;

  v2 = *(_QWORD *)(a2 + 8);
  if (!v2)
  {
    mach_get_times();
    *(_QWORD *)(a2 + 8) = 1;
    *(double *)(a2 + 16) = (double)0 - *MEMORY[0x1E0C9ADF8] + (double)0 * 0.000000001;
    v4 = *(_QWORD *)(a2 + 24);
    if (!v4 || (v6 = *(_QWORD *)(v4 + 16), v5 = *(_QWORD *)(v4 + 24), v6 == v5))
    {
      v8 = 0;
    }
    else
    {
      v7 = *(id *)(v5 - 8);
      v8 = v7;
      if (v7)
        nw_http_transaction_metadata_set_end_time(v7, *(_QWORD *)(a2 + 8));
    }

  }
  return v2 == 0;
}

uint64_t nw_http_client_metadata_get_start_time(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  _QWORD *isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_client_metadata_get_start_time_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = v2[4].isa;
      if (isa)
      {
        __nw_http_client_metadata_get_start_time_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_client", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_client_metadata_get_start_time_block_invoke(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

uint64_t nw_http_client_metadata_get_end_time(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_client_metadata_get_end_time_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_client_metadata_get_end_time_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_client", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_client_metadata_get_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 8);
  return 1;
}

double nw_http_client_metadata_convert_time_to_absolute(void *a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  BOOL is_equal;
  uint64_t isa;
  double v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[6];
  char v29;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v29)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_182FBE000, v12, v25, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_40:

    free(backtrace_string);
    goto LABEL_59;
  }
  if (!a2)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v11, &type, &v29))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null time", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (!v29)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s called with null time, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null time, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null time, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  v5 = nw_protocol_metadata_copy_definition(v3);
  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  is_equal = nw_protocol_definition_is_equal(v5, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

  if (is_equal)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v32 = 0;
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __nw_http_client_metadata_convert_time_to_absolute_block_invoke;
    v28[3] = &unk_1E14AA1B0;
    v28[4] = buf;
    v28[5] = a2;
    isa = (uint64_t)v4[4].isa;
    if (isa)
    {
      __nw_http_client_metadata_convert_time_to_absolute_block_invoke((uint64_t)v28, isa);
      v8 = *(double *)(*(_QWORD *)&buf[8] + 24);
    }
    else
    {
      v8 = 0.0;
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_10;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (__nwlog_fault(v11, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s metadata must be http_client", buf, 0xCu);
      }
LABEL_58:

      goto LABEL_59;
    }
    if (!v29)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
        _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }
      goto LABEL_58;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_http_client_metadata_convert_time_to_absolute";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
LABEL_59:
  if (v11)
    free(v11);
  v8 = 0.0;
LABEL_10:

  return v8;
}

uint64_t __nw_http_client_metadata_convert_time_to_absolute_block_invoke(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    v4 = *(_QWORD *)a2;
  if (v4 <= *(_QWORD *)(a1 + 40))
  {
    v9 = nw_delta_nanos(v4, *(_QWORD *)(a1 + 40));
    v6 = *(double *)(a2 + 16);
    v7 = (double)(unint64_t)v9;
    v8 = 0.000000001;
  }
  else
  {
    v5 = nw_delta_nanos(*(_QWORD *)(a1 + 40), v4);
    v6 = *(double *)(a2 + 16);
    v7 = (double)(unint64_t)v5;
    v8 = -0.000000001;
  }
  *(double *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = v6 + v7 * v8;
  return 1;
}

void nw_http_client_metadata_set_sniffed_media_type(void *a1, uint64_t a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  BOOL is_equal_unsafe;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  _QWORD v30[5];
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((id *)v3 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_protocol_metadata_copy_definition";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v9, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_protocol_metadata_copy_definition";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v27, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v9)
    free(v9);
  v5 = 0;
LABEL_3:

  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, nw_protocol_copy_http_client_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_http_client_metadata_set_sniffed_media_type";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_http_client_metadata_set_sniffed_media_type";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s metadata must be http_client", buf, 0xCu);
      }
    }
    else if (v31)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_http_client_metadata_set_sniffed_media_type";
          v35 = 2082;
          v36 = v21;
          _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
LABEL_62:
        if (!v13)
          goto LABEL_9;
LABEL_63:
        free(v13);
        goto LABEL_9;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_http_client_metadata_set_sniffed_media_type";
        _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_http_client_metadata_set_sniffed_media_type";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __nw_http_client_metadata_set_sniffed_media_type_block_invoke;
  v30[3] = &__block_descriptor_40_e9_B16__0_v8l;
  v30[4] = a2;
  if (v4)
  {
    v7 = v4[4];
    if (v7)
      __nw_http_client_metadata_set_sniffed_media_type_block_invoke((uint64_t)v30, v7);
    goto LABEL_9;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_protocol_metadata_access_handle";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (!__nwlog_fault(v13, &type, &v31))
    goto LABEL_62;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null metadata", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v31)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v29 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  v24 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  v25 = type;
  v26 = os_log_type_enabled(v14, type);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    v34 = "nw_protocol_metadata_access_handle";
    v35 = 2082;
    v36 = v24;
    _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v24);
  if (v13)
    goto LABEL_63;
LABEL_9:

}

BOOL __nw_http_client_metadata_set_sniffed_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  const char *v5;
  char *v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;

  v4 = *(void **)(a2 + 40);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(a2 + 40) = 0;
  }
  v5 = *(const char **)(a1 + 32);
  if (!v5)
    return 1;
  v6 = strdup(v5);
  if (v6)
  {
LABEL_5:
    *(_QWORD *)(a2 + 40) = v6;
    return 1;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

uint64_t __nw_http_client_metadata_get_sniffed_media_type_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 40);
  return 1;
}

void nw_http_client_metadata_set_client_error(void *a1, int a2)
{
  id v3;
  _QWORD *v4;
  id v5;
  BOOL is_equal_unsafe;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  _QWORD v30[4];
  int v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((id *)v3 + 1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v35 = "nw_protocol_metadata_copy_definition";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (__nwlog_fault(v9, &type, &v32))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_protocol_metadata_copy_definition";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_protocol_metadata_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v27, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v9)
    free(v9);
  v5 = 0;
LABEL_3:

  if (nw_protocol_copy_http_client_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, nw_protocol_copy_http_client_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_http_client_metadata_set_client_error";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_client_metadata_set_client_error";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s metadata must be http_client", buf, 0xCu);
      }
    }
    else if (v32)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_http_client_metadata_set_client_error";
          v36 = 2082;
          v37 = v21;
          _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
LABEL_62:
        if (!v13)
          goto LABEL_9;
LABEL_63:
        free(v13);
        goto LABEL_9;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_client_metadata_set_client_error";
        _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_http_client_metadata_set_client_error";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  v30[0] = MEMORY[0x1E0C809B0];
  v30[1] = 3221225472;
  v30[2] = __nw_http_client_metadata_set_client_error_block_invoke;
  v30[3] = &__block_descriptor_36_e9_B16__0_v8l;
  v31 = a2;
  if (v4)
  {
    v7 = v4[4];
    if (v7)
      __nw_http_client_metadata_set_client_error_block_invoke((uint64_t)v30, v7);
    goto LABEL_9;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v35 = "nw_protocol_metadata_access_handle";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (!__nwlog_fault(v13, &type, &v32))
    goto LABEL_62;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null metadata", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v32)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v29 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  v24 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  v25 = type;
  v26 = os_log_type_enabled(v14, type);
  if (!v24)
  {
    if (v26)
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_protocol_metadata_access_handle";
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v26)
  {
    *(_DWORD *)buf = 136446466;
    v35 = "nw_protocol_metadata_access_handle";
    v36 = 2082;
    v37 = v24;
    _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v24);
  if (v13)
    goto LABEL_63;
LABEL_9:

}

uint64_t __nw_http_client_metadata_set_client_error_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 64) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t __nw_http_client_metadata_get_client_error_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 64);
  return 1;
}

id nw_http_client_metadata_get_sec_metadata(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_client_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_client_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_client_metadata_get_sec_metadata_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_client_metadata_get_sec_metadata_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_client", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http_client, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_client, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_client, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_client_metadata_get_sec_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_client_metadata_get_sec_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 56));
  return 1;
}

id nw_protocol_copy_http_client_bottom_definition()
{
  if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_56);
  return (id)nw_protocol_copy_http_client_bottom_definition_definition;
}

BOOL __nw_protocol_copy_http_client_bottom_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *v0;
  void *v1;

  if (nw_protocol_http_client_bottom_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_client_bottom_identifier::onceToken, &__block_literal_global_22197);
  v0 = nw_protocol_definition_create_with_identifier(&nw_protocol_http_client_bottom_identifier::protocol_identifier);
  v1 = (void *)nw_protocol_copy_http_client_bottom_definition_definition;
  nw_protocol_copy_http_client_bottom_definition_definition = (uint64_t)v0;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_http_client_bottom_definition_definition, (uint64_t)nw_http_client_bottom_allocate_options, (uint64_t)nw_http_client_bottom_copy_options, (uint64_t)nw_http_client_bottom_deallocate_options);
  nw_protocol_definition_set_options_comparator((void *)nw_protocol_copy_http_client_bottom_definition_definition, (uint64_t)nw_http_client_bottom_options_compare);
  if (nw_protocol_http_client_bottom_identifier::onceToken[0] != -1)
    dispatch_once(nw_protocol_http_client_bottom_identifier::onceToken, &__block_literal_global_22197);
  return nw_protocol_register_handle((uint64_t)&nw_protocol_http_client_bottom_identifier::protocol_identifier, (void *)nw_protocol_copy_http_client_bottom_definition_definition, (uint64_t)nw_protocol_http_client_bottom_create, (uint64_t)nw_protocol_http_client_bottom_accept);
}

BOOL nw_http_client_bottom_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

BOOL nw_http_client_bottom_copy_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 1uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void nw_http_client_bottom_deallocate_options(int a1, void *a2)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    free(a2);
    return;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_http_client_bottom_deallocate_options";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v3, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_client_bottom_deallocate_options";
        v6 = "%{public}s called with null allocated_handle";
LABEL_16:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_http_client_bottom_deallocate_options";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null allocated_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_18;
        }
        if (!v8)
          goto LABEL_17;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_client_bottom_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, no backtrace";
        goto LABEL_16;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_http_client_bottom_deallocate_options";
        v6 = "%{public}s called with null allocated_handle, backtrace limit exceeded";
        goto LABEL_16;
      }
    }
LABEL_17:

  }
LABEL_18:
  if (v3)
    free(v3);
}

uint64_t nw_http_client_bottom_options_compare()
{
  return 1;
}

NWConcrete_nw_protocol_options *nw_http_client_bottom_create_options()
{
  if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_56);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_client_bottom_definition_definition);
}

BOOL nw_protocol_options_is_http_client_bottom(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_client_bottom_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_client_bottom_definition_onceToken, &__block_literal_global_56);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_client_bottom_definition_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_is_http_client_bottom";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_client_bottom";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_is_http_client_bottom";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_client_bottom";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_is_http_client_bottom";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

id nw_protocol_copy_http_messaging_definition()
{
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  return (id)nw_protocol_copy_http_messaging_definition_definition;
}

NWConcrete_nw_protocol_options *nw_http_messaging_create_options()
{
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  return nw_protocol_create_options((void *)nw_protocol_copy_http_messaging_definition_definition);
}

void nw_http_messaging_options_set_http1_options(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_messaging_options_set_http1_options";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_http1_options";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_messaging_options_set_http1_options";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_http1_options";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_http1_options";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_messaging_options_set_http1_options_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_messaging_options_set_http1_options";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_http1_options";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_http1_options";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_http1_options";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_messaging_options_set_http1_options";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_messaging_options_set_http1_options_block_invoke(uint64_t a1, id *location)
{
  objc_storeStrong(location, *(id *)(a1 + 32));
  return 1;
}

void nw_http_messaging_options_set_http2_options(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_messaging_options_set_http2_options";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_http2_options";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_messaging_options_set_http2_options";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_http2_options";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_http2_options";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_messaging_options_set_http2_options_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_messaging_options_set_http2_options";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_http2_options";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_http2_options";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_http2_options";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_messaging_options_set_http2_options";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_messaging_options_set_http2_options_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 8), *(id *)(a1 + 32));
  return 1;
}

void nw_http_messaging_options_set_http3_options(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_messaging_options_set_http3_options";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_http3_options";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_messaging_options_set_http3_options";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_http3_options";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_http3_options";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_messaging_options_set_http3_options_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_messaging_options_set_http3_options";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_http3_options";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_http3_options";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_http3_options";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_messaging_options_set_http3_options";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_messaging_options_set_http3_options_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 16), *(id *)(a1 + 32));
  return 1;
}

void nw_http_messaging_options_set_client_metadata(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_messaging_options_set_client_metadata";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_client_metadata";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_messaging_options_set_client_metadata";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_client_metadata";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_set_client_metadata";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_messaging_options_set_client_metadata_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v23 = v4;
    nw_protocol_options_access_handle(v5, v22);

    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_messaging_options_set_client_metadata";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_client_metadata";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s protocol options are not http_messaging", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_client_metadata";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_messaging_options_set_client_metadata";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_messaging_options_set_client_metadata";
    v28 = 2082;
    v29 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

uint64_t __nw_http_messaging_options_set_client_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  return 1;
}

id nw_parameters_find_http_messaging_options(void *a1, uint64_t a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  id v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD iterate_block[7];
  os_log_type_t type[8];
  os_log_type_t *v18;
  uint64_t v19;
  char v20;
  char v21;
  _BYTE buf[24];
  uint64_t (*v23)(uint64_t, uint64_t);
  void (*v24)(uint64_t);
  id v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_parameters_copy_default_protocol_stack(v3);
    *(_QWORD *)type = 0;
    v18 = type;
    v19 = 0x2020000000;
    v20 = 0;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v23 = __Block_byref_object_copy__4;
    v24 = __Block_byref_object_dispose__5;
    v25 = 0;
    iterate_block[0] = MEMORY[0x1E0C809B0];
    iterate_block[1] = 3221225472;
    iterate_block[2] = __nw_parameters_find_http_messaging_options_block_invoke;
    iterate_block[3] = &unk_1E14AA238;
    iterate_block[4] = type;
    iterate_block[5] = buf;
    iterate_block[6] = a2;
    nw_protocol_stack_iterate_application_protocols(v5, iterate_block);
    v6 = *(id *)(*(_QWORD *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    _Block_object_dispose(type, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_parameters_find_http_messaging_options";
  v9 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v9, type, &v21))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_find_http_messaging_options";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type[0];
      v14 = os_log_type_enabled(v10, type[0]);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_parameters_find_http_messaging_options";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_find_http_messaging_options";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type[0];
      if (os_log_type_enabled(v10, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_find_http_messaging_options";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_3:

  return v6;
}

void __nw_parameters_find_http_messaging_options_block_invoke(_QWORD *a1, void *a2)
{
  id v4;
  void *v5;
  _BOOL4 is_http_messaging;
  uint64_t protocol_handle;
  id v8;
  id v9;

  v4 = a2;
  v5 = v4;
  if (*(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24))
  {
    if (!*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 40))
    {
      v8 = v4;
      is_http_messaging = nw_protocol_options_is_http_messaging(v4);
      v5 = v8;
      if (is_http_messaging)
      {
        objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a2);
        v5 = v8;
      }
    }
  }
  else
  {
    v9 = v4;
    protocol_handle = nw_protocol_options_get_protocol_handle(v4);
    v5 = v9;
    if (protocol_handle == a1[6])
      *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
  }

}

void *nw_http_messaging_options_find_or_create_client_metadata_in_parameters(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id http_messaging_options;
  void *v6;
  void *singleton;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  void *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *v20;
  _BOOL4 v21;
  const char *v22;
  _BOOL4 v23;
  char *backtrace_string;
  _BOOL4 v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      http_messaging_options = nw_parameters_find_http_messaging_options(v3, a2);
      v6 = http_messaging_options;
      if (http_messaging_options)
      {
        singleton = nw_http_messaging_options_copy_client_metadata(http_messaging_options);
        if (!singleton)
        {
          if (nw_protocol_copy_http_client_definition_onceToken != -1)
            dispatch_once(&nw_protocol_copy_http_client_definition_onceToken, &__block_literal_global_52_74156);
          singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_client_definition_definition);
          nw_http_client_metadata_create_next_transaction(singleton, 0);
          nw_http_messaging_options_set_client_metadata(v6, singleton);
        }
LABEL_8:

        goto LABEL_9;
      }
      __nwlog_obj();
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
      v16 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (!__nwlog_fault((const char *)v16, &type, &v26))
      {
LABEL_56:
        if (v16)
          free(v16);
        singleton = 0;
        goto LABEL_8;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          v19 = "%{public}s called with null messaging_options";
LABEL_54:
          _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
        }
      }
      else
      {
        if (v26)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v18 = type;
          v25 = os_log_type_enabled(v17, type);
          if (backtrace_string)
          {
            if (v25)
            {
              *(_DWORD *)buf = 136446466;
              v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
              v30 = 2082;
              v31 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null messaging_options, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_56;
          }
          if (!v25)
            goto LABEL_55;
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          v19 = "%{public}s called with null messaging_options, no backtrace";
          goto LABEL_54;
        }
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          v19 = "%{public}s called with null messaging_options, backtrace limit exceeded";
          goto LABEL_54;
        }
      }
LABEL_55:

      goto LABEL_56;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          v13 = "%{public}s called with null below_protocol";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (!v26)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          v13 = "%{public}s called with null below_protocol, backtrace limit exceeded";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v23 = os_log_type_enabled(v11, type);
      if (!v20)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          v13 = "%{public}s called with null below_protocol, no backtrace";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (!v23)
        goto LABEL_31;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
      v30 = 2082;
      v31 = v20;
      v22 = "%{public}s called with null below_protocol, dumping backtrace:%{public}s";
LABEL_30:
      _os_log_impl(&dword_182FBE000, v11, v12, v22, buf, 0x16u);
LABEL_31:

      free(v20);
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          v13 = "%{public}s called with null parameters";
LABEL_47:
          _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
        }
LABEL_48:

        goto LABEL_49;
      }
      if (!v26)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          v13 = "%{public}s called with null parameters, backtrace limit exceeded";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v21 = os_log_type_enabled(v11, type);
      if (!v20)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
          v13 = "%{public}s called with null parameters, no backtrace";
          goto LABEL_47;
        }
        goto LABEL_48;
      }
      if (!v21)
        goto LABEL_31;
      *(_DWORD *)buf = 136446466;
      v29 = "nw_http_messaging_options_find_or_create_client_metadata_in_parameters";
      v30 = 2082;
      v31 = v20;
      v22 = "%{public}s called with null parameters, dumping backtrace:%{public}s";
      goto LABEL_30;
    }
  }
LABEL_49:
  if (v10)
    free(v10);
  singleton = 0;
LABEL_9:

  return singleton;
}

id nw_http_messaging_options_copy_client_metadata(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  BOOL is_equal;
  id v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[5];
  char v15;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v18)(uint64_t, uint64_t);
  void (*v19)(uint64_t);
  id v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = nw_protocol_options_copy_definition(v1);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v18 = __Block_byref_object_copy__4;
    v19 = __Block_byref_object_dispose__5;
    v20 = 0;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_http_messaging_options_copy_client_metadata_block_invoke;
    v14[3] = &unk_1E14A9D68;
    v14[4] = buf;
    nw_protocol_options_access_handle(v1, v14);
    v4 = *(id *)(*(_QWORD *)&buf[8] + 40);
    _Block_object_dispose(buf, 8);

    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_client_metadata";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v7, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_client_metadata";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s protocol options are not http_messaging", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_client_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s protocol options are not http_messaging, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_client_metadata";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s protocol options are not http_messaging, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_messaging_options_copy_client_metadata";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s protocol options are not http_messaging, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_5:

  return v4;
}

void sub_183A575A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_messaging_options_copy_client_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 24));
  return 1;
}

void nw_http_messaging_options_create_transaction_in_parameters(void *a1, uint64_t a2, int a3)
{
  id v5;
  void *v6;
  id http_messaging_options;
  void *v8;
  id v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  void *v15;
  void *v16;
  NSObject *v17;
  os_log_type_t v18;
  const char *v19;
  char *v20;
  _BOOL4 v21;
  char *backtrace_string;
  _BOOL4 v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    http_messaging_options = nw_parameters_find_http_messaging_options(v5, a2);
    v8 = http_messaging_options;
    if (http_messaging_options)
    {
      v9 = nw_http_messaging_options_copy_client_metadata(http_messaging_options);
      nw_http_client_metadata_create_next_transaction(v9, a3);

LABEL_4:
      goto LABEL_5;
    }
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_messaging_options_create_transaction_in_parameters";
    v16 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault((const char *)v16, &type, &v24))
    {
LABEL_38:
      if (v16)
        free(v16);
      goto LABEL_4;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        v19 = "%{public}s called with null messaging_options";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v17, v18, v19, buf, 0xCu);
      }
    }
    else
    {
      if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v23 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_http_messaging_options_create_transaction_in_parameters";
            v28 = 2082;
            v29 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null messaging_options, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v23)
          goto LABEL_37;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        v19 = "%{public}s called with null messaging_options, no backtrace";
        goto LABEL_36;
      }
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        v19 = "%{public}s called with null messaging_options, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_messaging_options_create_transaction_in_parameters";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v11, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        v14 = "%{public}s called with null parameters";
LABEL_30:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      }
    }
    else
    {
      if (v24)
      {
        v20 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v21 = os_log_type_enabled(v12, type);
        if (v20)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_http_messaging_options_create_transaction_in_parameters";
            v28 = 2082;
            v29 = v20;
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v20);
          goto LABEL_32;
        }
        if (!v21)
          goto LABEL_31;
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        v14 = "%{public}s called with null parameters, no backtrace";
        goto LABEL_30;
      }
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_messaging_options_create_transaction_in_parameters";
        v14 = "%{public}s called with null parameters, backtrace limit exceeded";
        goto LABEL_30;
      }
    }
LABEL_31:

  }
LABEL_32:
  if (v11)
    free(v11);
LABEL_5:

}

id nw_http_messaging_options_copy_transaction_metadata(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  _BOOL4 is_equal;
  id v4;
  _QWORD v6[5];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v1 = a1;
  v2 = nw_protocol_options_copy_definition(v1);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  is_equal = nw_protocol_definition_is_equal(v2, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal)
  {
    v7 = 0;
    v8 = &v7;
    v9 = 0x3032000000;
    v10 = __Block_byref_object_copy__4;
    v11 = __Block_byref_object_dispose__5;
    v12 = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 3221225472;
    v6[2] = __nw_http_messaging_options_copy_transaction_metadata_block_invoke;
    v6[3] = &unk_1E14A9D68;
    v6[4] = &v7;
    nw_protocol_options_access_handle(v1, v6);
    v4 = (id)v8[5];
    _Block_object_dispose(&v7, 8);

  }
  else
  {
    v4 = 0;
  }

  return v4;
}

void sub_183A57B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_messaging_options_copy_transaction_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;

  v2 = *(void **)(a2 + 24);
  if (v2)
  {
    v4 = v2;
    v5 = nw_http_client_metadata_copy_current_transaction_metadata(v4);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v7 = *(void **)(v6 + 40);
    *(_QWORD *)(v6 + 40) = v5;

  }
  return 1;
}

BOOL nw_http_messaging_options_override_version_specific_protocol(void *a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  id v6;
  NSObject *v7;
  _BOOL4 is_equal;
  _BOOL8 v9;
  _QWORD v11[4];
  id v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  char v18;

  v5 = a1;
  v6 = a3;
  v7 = nw_protocol_options_copy_definition(v5);
  if (nw_protocol_copy_http_messaging_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_messaging_definition_onceToken, &__block_literal_global_57_72293);
  is_equal = nw_protocol_definition_is_equal(v7, (nw_protocol_definition_t)nw_protocol_copy_http_messaging_definition_definition);

  if (is_equal)
  {
    v15 = 0;
    v16 = &v15;
    v17 = 0x2020000000;
    v18 = 0;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 3221225472;
    v11[2] = __nw_http_messaging_options_override_version_specific_protocol_block_invoke;
    v11[3] = &unk_1E14AA260;
    v13 = &v15;
    v14 = a2;
    v12 = v6;
    nw_protocol_options_access_handle(v5, v11);
    v9 = *((_BYTE *)v16 + 24) != 0;

    _Block_object_dispose(&v15, 8);
  }
  else
  {
    v9 = 0;
  }

  return v9;
}

void sub_183A57CF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_messaging_options_override_version_specific_protocol_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 32);
    if (v3)
      *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v3 + 16))(v3, a1[6], a1[4]);
  }
  return 1;
}

uint64_t __nw_http_messaging_options_set_override_protocol_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2 && !*(_QWORD *)(a2 + 32))
  {
    v4 = _Block_copy(*(const void **)(a1 + 32));
    v5 = *(void **)(a2 + 32);
    *(_QWORD *)(a2 + 32) = v4;

  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v7 = 136446210;
      v8 = "nw_http_messaging_options_set_override_protocol_handler_block_invoke";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of http_messaging override_protocol handler", (uint8_t *)&v7, 0xCu);
    }

  }
  return 1;
}

uint64_t __nw_http_messaging_options_can_accept_block_invoke(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (a2)
  {
    v3 = *(_QWORD *)(a2 + 40);
    if (v3)
      *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(v3 + 16))(v3, a1[4], a1[5]);
  }
  return 1;
}

uint64_t __nw_http_messaging_options_set_can_accept_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  int v7;
  const char *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (a2 && !*(_QWORD *)(a2 + 40))
  {
    v4 = _Block_copy(*(const void **)(a1 + 32));
    v5 = *(void **)(a2 + 40);
    *(_QWORD *)(a2 + 40) = v4;

  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v7 = 136446210;
      v8 = "nw_http_messaging_options_set_can_accept_handler_block_invoke";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s Ignoring duplicate setting of http_messaging can_accept handler", (uint8_t *)&v7, 0xCu);
    }

  }
  return 1;
}

id nw_protocol_copy_http_transaction_definition()
{
  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  return (id)nw_protocol_copy_http_transaction_definition_definition;
}

void nw_http_transaction_metadata_set_event_handler(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_transaction_metadata_set_event_handler";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_transaction_metadata_set_event_handler";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_transaction_metadata_set_event_handler";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_transaction_metadata_set_event_handler";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_transaction_metadata_set_event_handler";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_transaction_metadata_set_event_handler_block_invoke;
    v24[3] = &unk_1E14A9DD0;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_transaction_metadata_set_event_handler_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_transaction_metadata_set_event_handler";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_transaction_metadata_set_event_handler";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_transaction_metadata_set_event_handler";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_transaction_metadata_set_event_handler";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_transaction_metadata_set_event_handler";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_transaction_metadata_set_event_handler_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;

  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = *(void **)(a2 + 120);
  *(_QWORD *)(a2 + 120) = v3;

  return 1;
}

uint64_t nw_http_transaction_metadata_get_start_reason(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  unsigned int *v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v26 = 0;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_transaction_metadata_get_start_reason_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_start_reason_block_invoke((uint64_t)v22, isa);
        v6 = (unsigned int *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = (unsigned int *)&v26;
      }
      v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_start_reason";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_transaction_metadata_get_start_reason_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 136);
  return 1;
}

void nw_http_transaction_metadata_set_connection_metadata(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  uint64_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_transaction_metadata_set_connection_metadata";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v11, &type, &v25))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_transaction_metadata_set_connection_metadata";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_transaction_metadata_set_connection_metadata";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v11)
          goto LABEL_8;
LABEL_43:
        free(v11);
        goto LABEL_8;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_transaction_metadata_set_connection_metadata";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_transaction_metadata_set_connection_metadata";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_http_transaction_metadata_set_connection_metadata_block_invoke;
    v24[3] = &unk_1E14A9F20;
    v8 = v4;
    v24[4] = v8;
    v9 = *((_QWORD *)v5 + 4);
    if (v9)
      __nw_http_transaction_metadata_set_connection_metadata_block_invoke((uint64_t)v24, v9);

    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_transaction_metadata_set_connection_metadata";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v11, &type, &v25))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_transaction_metadata_set_connection_metadata";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v25)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_transaction_metadata_set_connection_metadata";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = type;
  v21 = os_log_type_enabled(v12, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_transaction_metadata_set_connection_metadata";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_transaction_metadata_set_connection_metadata";
    v29 = 2082;
    v30 = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_transaction_metadata_set_connection_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 96), *(id *)(a1 + 32));
  return 1;
}

id nw_http_transaction_metadata_get_connection_metadata(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_transaction_metadata_get_connection_metadata_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_connection_metadata_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_connection_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_transaction_metadata_get_connection_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 96));
  return 1;
}

void nw_http_transaction_metadata_set_outbound_message(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  id *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD v25[6];
  char v26;
  os_log_type_t v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http_transaction_metadata_set_outbound_message";
    v12 = (char *)_os_log_send_and_compose_impl();

    v27 = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v12, &v27, &v26))
      goto LABEL_42;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http_transaction_metadata_set_outbound_message";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = v27;
      v19 = os_log_type_enabled(v13, v27);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_http_transaction_metadata_set_outbound_message";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v12)
          goto LABEL_8;
LABEL_43:
        free(v12);
        goto LABEL_8;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http_transaction_metadata_set_outbound_message";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http_transaction_metadata_set_outbound_message";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __nw_http_transaction_metadata_set_outbound_message_block_invoke;
    v25[3] = &unk_1E14AA2D0;
    v8 = v4;
    v25[4] = v8;
    v9 = v5;
    v25[5] = v9;
    v10 = (uint64_t)v9[4];
    if (v10)
      __nw_http_transaction_metadata_set_outbound_message_block_invoke((uint64_t)v25, v10);

    goto LABEL_8;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_http_transaction_metadata_set_outbound_message";
  v12 = (char *)_os_log_send_and_compose_impl();

  v27 = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (!__nwlog_fault(v12, &v27, &v26))
    goto LABEL_42;
  if (v27 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v16 = v27;
    if (os_log_type_enabled(v13, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_http_transaction_metadata_set_outbound_message";
      _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v24 = v27;
    if (os_log_type_enabled(v13, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_http_transaction_metadata_set_outbound_message";
      _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v21 = v27;
  v22 = os_log_type_enabled(v13, v27);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_http_transaction_metadata_set_outbound_message";
      _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_http_transaction_metadata_set_outbound_message";
    v30 = 2082;
    v31 = v20;
    _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_transaction_metadata_set_outbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_storeStrong((id *)(a2 + 104), *(id *)(a1 + 32));
  v4 = mach_continuous_time();
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  *(_QWORD *)(a2 + 64) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  if (v6)
    (*(void (**)(uint64_t, _QWORD, _QWORD))(v6 + 16))(v6, *(_QWORD *)(a1 + 40), 0);
  return 1;
}

id nw_http_transaction_metadata_get_outbound_message(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_transaction_metadata_get_outbound_message_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_message_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_transaction_metadata_get_outbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 104));
  return 1;
}

void nw_http_transaction_metadata_set_inbound_message(void *a1, void *a2)
{
  id v3;
  id v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  id v8;
  id *v9;
  uint64_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD v25[6];
  char v26;
  os_log_type_t v27;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_http_transaction_metadata_set_inbound_message";
    v12 = (char *)_os_log_send_and_compose_impl();

    v27 = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v12, &v27, &v26))
      goto LABEL_42;
    if (v27 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http_transaction_metadata_set_inbound_message";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = v27;
      v19 = os_log_type_enabled(v13, v27);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_http_transaction_metadata_set_inbound_message";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v12)
          goto LABEL_8;
LABEL_43:
        free(v12);
        goto LABEL_8;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http_transaction_metadata_set_inbound_message";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = v27;
      if (os_log_type_enabled(v13, v27))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_http_transaction_metadata_set_inbound_message";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v25[0] = MEMORY[0x1E0C809B0];
    v25[1] = 3221225472;
    v25[2] = __nw_http_transaction_metadata_set_inbound_message_block_invoke;
    v25[3] = &unk_1E14AA2D0;
    v8 = v4;
    v25[4] = v8;
    v9 = v5;
    v25[5] = v9;
    v10 = (uint64_t)v9[4];
    if (v10)
      __nw_http_transaction_metadata_set_inbound_message_block_invoke((uint64_t)v25, v10);

    goto LABEL_8;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_http_transaction_metadata_set_inbound_message";
  v12 = (char *)_os_log_send_and_compose_impl();

  v27 = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (!__nwlog_fault(v12, &v27, &v26))
    goto LABEL_42;
  if (v27 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v16 = v27;
    if (os_log_type_enabled(v13, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_http_transaction_metadata_set_inbound_message";
      _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v24 = v27;
    if (os_log_type_enabled(v13, v27))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_http_transaction_metadata_set_inbound_message";
      _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v21 = v27;
  v22 = os_log_type_enabled(v13, v27);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_http_transaction_metadata_set_inbound_message";
      _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_http_transaction_metadata_set_inbound_message";
    v30 = 2082;
    v31 = v20;
    _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_transaction_metadata_set_inbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  objc_storeStrong((id *)(a2 + 112), *(id *)(a1 + 32));
  v4 = mach_continuous_time();
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  *(_QWORD *)(a2 + 80) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  if (v6)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, *(_QWORD *)(a1 + 40), 2);
  return 1;
}

id nw_http_transaction_metadata_get_inbound_message(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v26 = __Block_byref_object_copy__4;
      v27 = __Block_byref_object_dispose__5;
      v28 = 0;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_transaction_metadata_get_inbound_message_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_message_block_invoke((uint64_t)v22, isa);
        v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      }
      else
      {
        v6 = 0;
      }
      v7 = v6;
      _Block_object_dispose(buf, 8);

      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_transaction_metadata_get_inbound_message_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 112));
  return 1;
}

void nw_http_transaction_metadata_set_first_on_connection(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  BOOL is_equal_unsafe;
  _BYTE *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http_transaction_metadata_set_first_on_connection";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http_transaction_metadata_set_first_on_connection";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_http_transaction_metadata_set_first_on_connection";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8)
          goto LABEL_7;
LABEL_42:
        free(v8);
        goto LABEL_7;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http_transaction_metadata_set_first_on_connection";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http_transaction_metadata_set_first_on_connection";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v3 = (id *)v1;
  v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v6 = v3[4];
    if (v6)
      v6[140] |= 1u;
    goto LABEL_7;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_http_transaction_metadata_set_first_on_connection";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http_transaction_metadata_set_first_on_connection";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v21)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http_transaction_metadata_set_first_on_connection";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http_transaction_metadata_set_first_on_connection";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_http_transaction_metadata_set_first_on_connection";
    v25 = 2082;
    v26 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_42;
LABEL_7:

}

BOOL nw_http_transaction_metadata_is_first_on_connection(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  _BOOL8 v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_is_first_on_connection_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_is_first_on_connection_block_invoke((uint64_t)v21, isa);
        v6 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_is_first_on_connection";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_is_first_on_connection_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_BYTE *)(a2 + 140) & 1;
  return 1;
}

void nw_http_transaction_metadata_increment_outbound_header_size(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id *v5;
  id v6;
  BOOL is_equal_unsafe;
  _QWORD *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = (id *)v3;
  v6 = v5[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_transaction_metadata_increment_outbound_header_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    v8 = v5[4];
    if (v8)
      __nw_http_transaction_metadata_increment_outbound_header_size_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_transaction_metadata_increment_outbound_header_size";
    v28 = 2082;
    v29 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_transaction_metadata_increment_outbound_header_size_block_invoke(uint64_t a1, _QWORD *a2)
{
  *a2 += *(_QWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_outbound_header_size(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  _QWORD *isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_outbound_header_size_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_header_size_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_outbound_header_size_block_invoke(uint64_t a1, _QWORD *a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *a2;
  return 1;
}

uint64_t __nw_http_transaction_metadata_increment_outbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 8) += *(_QWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_outbound_body_size(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_outbound_body_size_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_body_size_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_outbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 8);
  return 1;
}

void nw_http_transaction_metadata_increment_outbound_body_transfer_size(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_transaction_metadata_increment_outbound_body_transfer_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_transaction_metadata_increment_outbound_body_transfer_size_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_transaction_metadata_increment_outbound_body_transfer_size";
    v28 = 2082;
    v29 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_transaction_metadata_increment_outbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 16) += *(_QWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_outbound_body_transfer_size(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_outbound_body_transfer_size_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_body_transfer_size_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_outbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 16);
  return 1;
}

void nw_http_transaction_metadata_increment_inbound_header_size(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_transaction_metadata_increment_inbound_header_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_transaction_metadata_increment_inbound_header_size_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_transaction_metadata_increment_inbound_header_size";
    v28 = 2082;
    v29 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_transaction_metadata_increment_inbound_header_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 24) += *(_QWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_inbound_header_size(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_inbound_header_size_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_header_size_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_header_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_inbound_header_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 24);
  return 1;
}

uint64_t __nw_http_transaction_metadata_increment_inbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 32) += *(_QWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_inbound_body_size(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_inbound_body_size_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_body_size_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_inbound_body_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 32);
  return 1;
}

void nw_http_transaction_metadata_increment_inbound_body_transfer_size(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_transaction_metadata_increment_inbound_body_transfer_size_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_transaction_metadata_increment_inbound_body_transfer_size_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_transaction_metadata_increment_inbound_body_transfer_size";
    v28 = 2082;
    v29 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_transaction_metadata_increment_inbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 40) += *(_QWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_inbound_body_transfer_size(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_inbound_body_transfer_size_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_body_transfer_size_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_body_transfer_size";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_inbound_body_transfer_size_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 40);
  return 1;
}

void nw_http_transaction_metadata_mark_outbound_message_end(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  BOOL is_equal_unsafe;
  id *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9)
          goto LABEL_8;
LABEL_43:
        free(v9);
        goto LABEL_8;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v3 = (id *)v1;
  v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_transaction_metadata_mark_outbound_message_end_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v6 = v3;
    v22[4] = v6;
    v7 = (uint64_t)v6[4];
    if (v7)
      __nw_http_transaction_metadata_mark_outbound_message_end_block_invoke((uint64_t)v22, v7);

    goto LABEL_8;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &type, &v23))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_http_transaction_metadata_mark_outbound_message_end";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_transaction_metadata_mark_outbound_message_end_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mach_continuous_time();
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  *(_QWORD *)(a2 + 72) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  if (v6)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, *(_QWORD *)(a1 + 32), 1);
  return 1;
}

void nw_http_transaction_metadata_mark_inbound_message_end(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  BOOL is_equal_unsafe;
  id *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9)
          goto LABEL_8;
LABEL_43:
        free(v9);
        goto LABEL_8;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v3 = (id *)v1;
  v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_transaction_metadata_mark_inbound_message_end_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v6 = v3;
    v22[4] = v6;
    v7 = (uint64_t)v6[4];
    if (v7)
      __nw_http_transaction_metadata_mark_inbound_message_end_block_invoke((uint64_t)v22, v7);

    goto LABEL_8;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &type, &v23))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_http_transaction_metadata_mark_inbound_message_end";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_transaction_metadata_mark_inbound_message_end_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = mach_continuous_time();
  if (v4 <= 1)
    v5 = 1;
  else
    v5 = v4;
  *(_QWORD *)(a2 + 88) = v5;
  v6 = *(_QWORD *)(a2 + 120);
  if (v6)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v6 + 16))(v6, *(_QWORD *)(a1 + 32), 3);
  return 1;
}

void nw_http_transaction_metadata_mark_end(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  BOOL is_equal_unsafe;
  id *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_http_transaction_metadata_mark_end";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_transaction_metadata_mark_end";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_http_transaction_metadata_mark_end";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9)
          goto LABEL_8;
LABEL_43:
        free(v9);
        goto LABEL_8;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_transaction_metadata_mark_end";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_transaction_metadata_mark_end";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v3 = (id *)v1;
  v4 = v3[1];

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_transaction_metadata_mark_end_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v6 = v3;
    v22[4] = v6;
    v7 = (uint64_t)v6[4];
    if (v7)
      __nw_http_transaction_metadata_mark_end_block_invoke((uint64_t)v22, v7);

    goto LABEL_8;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_http_transaction_metadata_mark_end";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &type, &v23))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_transaction_metadata_mark_end";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_transaction_metadata_mark_end";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_transaction_metadata_mark_end";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_http_transaction_metadata_mark_end";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_transaction_metadata_mark_end_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;

  if (!*(_QWORD *)(a2 + 56))
  {
    v2 = *(void **)(a1 + 32);
    v3 = mach_continuous_time();
    if (v3 <= 1)
      v4 = 1;
    else
      v4 = v3;
    nw_http_transaction_metadata_set_end_time(v2, v4);
  }
  return 1;
}

uint64_t nw_http_transaction_metadata_get_end_time(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_end_time_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_end_time_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 56);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_outbound_message_start_time(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_outbound_message_start_time_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_message_start_time_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_outbound_message_start_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 64);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_outbound_message_end_time(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_outbound_message_end_time_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_outbound_message_end_time_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_outbound_message_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_outbound_message_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 72);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_inbound_message_start_time(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_inbound_message_start_time_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_message_start_time_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_start_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_inbound_message_start_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 80);
  return 1;
}

uint64_t nw_http_transaction_metadata_get_inbound_message_end_time(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  uint64_t v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_transaction_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_transaction_metadata_get_inbound_message_end_time_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_transaction_metadata_get_inbound_message_end_time_block_invoke((uint64_t)v21, isa);
        v6 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_transaction", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_transaction_metadata_get_inbound_message_end_time";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_transaction_metadata_get_inbound_message_end_time_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_QWORD *)(a2 + 88);
  return 1;
}

void nw_http_transaction_metadata_set_converted_url_response(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[5];
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_http_transaction_metadata_set_converted_url_response";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v10, &type, &v24))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_set_converted_url_response";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_http_transaction_metadata_set_converted_url_response";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_set_converted_url_response";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_http_transaction_metadata_set_converted_url_response";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_transaction_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_transaction_definition_onceToken, &__block_literal_global_59_74256);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_transaction_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_transaction_metadata_set_converted_url_response_block_invoke;
    v23[3] = &__block_descriptor_40_e9_B16__0_v8l;
    v23[4] = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_transaction_metadata_set_converted_url_response_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_http_transaction_metadata_set_converted_url_response";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v10, &type, &v24))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_set_converted_url_response";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_transaction", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v24)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_set_converted_url_response";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http_transaction, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_http_transaction_metadata_set_converted_url_response";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_http_transaction_metadata_set_converted_url_response";
    v28 = 2082;
    v29 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_transaction, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_transaction_metadata_set_converted_url_response_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 128), *(id *)(a1 + 32));
  return 1;
}

uint64_t __nw_http_transaction_metadata_get_converted_url_response_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(id *)(a2 + 128);
  return 1;
}

id nw_protocol_copy_http_connection_definition()
{
  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  return (id)nw_protocol_copy_http_connection_definition_definition;
}

void __nw_protocol_copy_http_connection_definition_block_invoke()
{
  NWConcrete_nw_protocol_definition *named;
  void *v1;

  named = nw_protocol_definition_create_named(1, "http_connection");
  v1 = (void *)nw_protocol_copy_http_connection_definition_definition;
  nw_protocol_copy_http_connection_definition_definition = (uint64_t)named;

  nw_protocol_definition_set_metadata_initializer((void *)nw_protocol_copy_http_connection_definition_definition, 0xC8u, nw_http_connection_initialize_metadata, nw_http_connection_finalize_metadata);
}

void nw_http_connection_initialize_metadata(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 176) = 0;
}

void nw_http_connection_finalize_metadata(uint64_t a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  const void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  v3 = *(void **)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;

  *(_BYTE *)(a2 + 196) &= ~4u;
  v4 = *(void **)(a2 + 96);
  *(_QWORD *)(a2 + 96) = 0;

  v5 = *(void **)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;

  v6 = *(void **)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;

  v7 = *(void **)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;

  v8 = *(void **)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;

  v9 = *(const void **)(a2 + 80);
  if (v9)
  {
    CFRelease(v9);
    *(_QWORD *)(a2 + 80) = 0;
  }
  *(_QWORD *)(a2 + 16) = 0;
  v10 = *(void **)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;

  v11 = *(void **)(a2 + 120);
  *(_QWORD *)(a2 + 120) = 0;

  v12 = *(void **)(a2 + 128);
  *(_QWORD *)(a2 + 128) = 0;

  v13 = *(void **)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;

  v14 = *(void **)(a2 + 144);
  *(_QWORD *)(a2 + 144) = 0;

  v15 = *(void **)(a2 + 152);
  *(_QWORD *)(a2 + 152) = 0;

}

id *nw_http_connection_create_metadata(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id *singleton;
  id v9;
  id v10;
  id v11;
  _QWORD v13[4];
  id v14;
  id v15;
  id v16;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  singleton = nw_protocol_metadata_create_singleton((void *)nw_protocol_copy_http_connection_definition_definition);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = __nw_http_connection_create_metadata_block_invoke;
  v13[3] = &unk_1E14AA2F8;
  v14 = v5;
  v15 = v6;
  v16 = v7;
  v9 = v7;
  v10 = v6;
  v11 = v5;
  nw_protocol_metadata_access_handle((uint64_t)singleton, (uint64_t)v13);

  return singleton;
}

uint64_t __nw_http_connection_create_metadata_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  objc_storeStrong((id *)(a2 + 120), *(id *)(a1 + 32));
  v4 = _Block_copy(*(const void **)(a1 + 40));
  v5 = *(void **)(a2 + 128);
  *(_QWORD *)(a2 + 128) = v4;

  v6 = _Block_copy(*(const void **)(a1 + 48));
  v7 = *(void **)(a2 + 152);
  *(_QWORD *)(a2 + 152) = v6;

  return 1;
}

BOOL nw_protocol_metadata_is_http_connection(void *a1)
{
  id *v1;
  id v2;
  _BOOL8 is_equal_unsafe;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1;
    v2 = v1[1];

    if (nw_protocol_copy_http_connection_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v2, nw_protocol_copy_http_connection_definition_definition);

    return is_equal_unsafe;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_metadata_is_http_connection";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_metadata_is_http_connection";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_metadata_is_http_connection";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_metadata_is_http_connection";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_metadata_is_http_connection";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
  return 0;
}

void nw_http_connection_metadata_closed(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  BOOL is_equal_unsafe;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  void *v25;
  os_unfair_lock_s *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v9)
          goto LABEL_7;
LABEL_42:
        free(v9);
        goto LABEL_7;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v3 = v1;
  v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v6 = (os_unfair_lock_s *)*((_QWORD *)v3 + 4);
    if (v6)
    {
      v7 = v6 + 44;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_http_connection_metadata_closed_block_invoke_2;
      v25 = &__block_descriptor_40_e5_v8__0l;
      v26 = v6;
      os_unfair_lock_lock(v6 + 44);
      __nw_http_connection_metadata_closed_block_invoke_2((uint64_t)buf);
      os_unfair_lock_unlock(v7);
    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (!__nwlog_fault(v9, &type, &v22))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v22)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_http_connection_metadata_closed";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_42;
LABEL_7:

}

void __nw_http_connection_metadata_closed_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  void *v12;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 128);
  *(_QWORD *)(v2 + 128) = 0;

  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 152);
  *(_QWORD *)(v4 + 152) = 0;

  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(void **)(v6 + 136);
  if (v7)
  {
    v8 = *(NSObject **)(v6 + 144);
    if (v8)
    {
      dispatch_async(v8, v7);
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(void **)(v9 + 136);
      *(_QWORD *)(v9 + 136) = 0;

      v11 = *(_QWORD *)(a1 + 32);
      v12 = *(void **)(v11 + 144);
      *(_QWORD *)(v11 + 144) = 0;

    }
  }
}

BOOL nw_http_connection_metadata_get_is_closed(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  os_unfair_lock_s *isa;
  _BOOL8 v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v25 = 0;
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_http_connection_metadata_get_is_closed_block_invoke;
      v21[3] = &unk_1E14A9D68;
      v21[4] = buf;
      isa = (os_unfair_lock_s *)v2[4].isa;
      if (isa)
      {
        __nw_http_connection_metadata_get_is_closed_block_invoke((uint64_t)v21, isa);
        v6 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
      }
      else
      {
        v6 = 0;
      }
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v9, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v22)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_is_closed";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_9:

  return v6;
}

uint64_t __nw_http_connection_metadata_get_is_closed_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v2;
  _QWORD v4[6];

  v2 = a2 + 44;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_http_connection_metadata_get_is_closed_block_invoke_2;
  v4[3] = &unk_1E14AA320;
  v4[4] = *(_QWORD *)(a1 + 32);
  v4[5] = a2;
  os_unfair_lock_lock(a2 + 44);
  __nw_http_connection_metadata_get_is_closed_block_invoke_2((uint64_t)v4);
  os_unfair_lock_unlock(v2);
  return 1;
}

uint64_t __nw_http_connection_metadata_get_is_closed_block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 40) + 128) == 0;
  return result;
}

void nw_http_connection_metadata_close_connection(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  BOOL is_equal_unsafe;
  id *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_http_connection_metadata_close_connection";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &type, &v23))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_connection_metadata_close_connection";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_http_connection_metadata_close_connection";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v9)
          goto LABEL_8;
LABEL_43:
        free(v9);
        goto LABEL_8;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_connection_metadata_close_connection";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_http_connection_metadata_close_connection";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  v3 = (id *)v1;
  v4 = v3[1];

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_http_connection_metadata_close_connection_block_invoke;
    v22[3] = &unk_1E14A9F20;
    v6 = v3;
    v22[4] = v6;
    v7 = (uint64_t)v6[4];
    if (v7)
      __nw_http_connection_metadata_close_connection_block_invoke((uint64_t)v22, v7);

    goto LABEL_8;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_http_connection_metadata_close_connection";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &type, &v23))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_connection_metadata_close_connection";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_connection_metadata_close_connection";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_http_connection_metadata_close_connection";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_http_connection_metadata_close_connection";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_43;
LABEL_8:

}

uint64_t __nw_http_connection_metadata_close_connection_block_invoke(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_s *v4;
  uint64_t v5;
  void *v6;
  _QWORD v8[4];
  id v9;
  uint64_t v10;
  _QWORD v11[6];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char v15;

  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v4 = (os_unfair_lock_s *)(a2 + 176);
  v5 = MEMORY[0x1E0C809B0];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = __nw_http_connection_metadata_close_connection_block_invoke_2;
  v11[3] = &unk_1E14AA320;
  v11[4] = &v12;
  v11[5] = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(a2 + 176));
  __nw_http_connection_metadata_close_connection_block_invoke_2((uint64_t)v11);
  os_unfair_lock_unlock(v4);
  if (!*((_BYTE *)v13 + 24))
  {
    v6 = *(void **)(a2 + 120);
    v8[0] = v5;
    v8[1] = 3221225472;
    v8[2] = __nw_http_connection_metadata_close_connection_block_invoke_3;
    v8[3] = &unk_1E14AA348;
    v9 = *(id *)(a1 + 32);
    v10 = a2;
    nw_queue_context_async_if_needed(v6, v8);

  }
  _Block_object_dispose(&v12, 8);
  return 1;
}

void sub_183A635F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_http_connection_metadata_close_connection_block_invoke_2(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(result + 40) + 128) == 0;
  return result;
}

void __nw_http_connection_metadata_close_connection_block_invoke_3(uint64_t a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *(*v13)(uint64_t, uint64_t);
  void (*v14)(uint64_t);
  id v15;

  v10 = 0;
  v11 = &v10;
  v12 = 0x3032000000;
  v13 = __Block_byref_object_copy__72473;
  v14 = __Block_byref_object_dispose__72474;
  v15 = 0;
  v1 = *(os_unfair_lock_s **)(a1 + 40);
  v2 = v1 + 44;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 3221225472;
  v9[2] = __nw_http_connection_metadata_close_connection_block_invoke_4;
  v9[3] = &unk_1E14AA320;
  v9[4] = &v10;
  v9[5] = v1;
  os_unfair_lock_lock(v1 + 44);
  __nw_http_connection_metadata_close_connection_block_invoke_4((uint64_t)v9);
  os_unfair_lock_unlock(v2);
  v8 = v11[5];
  if (v8)
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v8, v3, v4, v5, v6, v7);
  _Block_object_dispose(&v10, 8);

}

void sub_183A636E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_http_connection_metadata_close_connection_block_invoke_4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 40) + 128));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(void **)(v5 + 128);
  *(_QWORD *)(v5 + 128) = 0;

}

void nw_http_connection_metadata_set_connection_closed_handler(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  BOOL is_equal_unsafe;
  id v11;
  id v12;
  os_unfair_lock_s *v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  os_log_type_t v37;
  _QWORD v38[6];
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_http_connection_metadata_set_connection_closed_handler";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v15, &type, &v39))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "nw_http_connection_metadata_set_connection_closed_handler";
          v43 = 2082;
          v44 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_76:
        if (!v15)
          goto LABEL_10;
LABEL_77:
        free(v15);
        goto LABEL_10;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v34, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_75:

    goto LABEL_76;
  }
  v8 = v5;
  v9 = *((id *)v8 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v9, nw_protocol_copy_http_connection_definition_definition);

  if (!is_equal_unsafe)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_http_connection_metadata_set_connection_closed_handler";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v15, &type, &v39))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s metadata must be http_connection", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (!v39)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v35, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_75;
    }
    v27 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v28 = type;
    v29 = os_log_type_enabled(v16, type);
    if (!v27)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_http_connection_metadata_set_connection_closed_handler";
      v43 = 2082;
      v44 = v27;
      _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_50;
  }
  if (!v6)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_http_connection_metadata_set_connection_closed_handler";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v15, &type, &v39))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null closed_handler", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (!v39)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v36, "%{public}s called with null closed_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_75;
    }
    v27 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    v31 = os_log_type_enabled(v16, type);
    if (!v27)
    {
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s called with null closed_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (v31)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_http_connection_metadata_set_connection_closed_handler";
      v43 = 2082;
      v44 = v27;
      _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s called with null closed_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_50;
  }
  if (!v7)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_http_connection_metadata_set_connection_closed_handler";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v15, &type, &v39))
      goto LABEL_76;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (!v39)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v37, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_75;
    }
    v27 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v32 = type;
    v33 = os_log_type_enabled(v16, type);
    if (!v27)
    {
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_http_connection_metadata_set_connection_closed_handler";
        _os_log_impl(&dword_182FBE000, v16, v32, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (v33)
    {
      *(_DWORD *)buf = 136446466;
      v42 = "nw_http_connection_metadata_set_connection_closed_handler";
      v43 = 2082;
      v44 = v27;
      _os_log_impl(&dword_182FBE000, v16, v32, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_50:

    free(v27);
    if (!v15)
      goto LABEL_10;
    goto LABEL_77;
  }
  v38[0] = MEMORY[0x1E0C809B0];
  v38[1] = 3221225472;
  v38[2] = __nw_http_connection_metadata_set_connection_closed_handler_block_invoke;
  v38[3] = &unk_1E14AA370;
  v11 = v6;
  v38[5] = v11;
  v12 = v7;
  v38[4] = v12;
  v13 = (os_unfair_lock_s *)*((_QWORD *)v8 + 4);
  if (v13)
    __nw_http_connection_metadata_set_connection_closed_handler_block_invoke((uint64_t)v38, v13);

LABEL_10:
}

uint64_t __nw_http_connection_metadata_set_connection_closed_handler_block_invoke(uint64_t a1, os_unfair_lock_s *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  id v5;
  _QWORD v7[7];

  v3 = a2 + 44;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 3221225472;
  v7[2] = __nw_http_connection_metadata_set_connection_closed_handler_block_invoke_2;
  v7[3] = &unk_1E14AAAF0;
  v7[6] = a2;
  v4 = *(id *)(a1 + 40);
  v7[5] = v4;
  v5 = *(id *)(a1 + 32);
  v7[4] = v5;
  os_unfair_lock_lock(v3);
  __nw_http_connection_metadata_set_connection_closed_handler_block_invoke_2((uint64_t)v7);
  os_unfair_lock_unlock(v3);

  return 1;
}

void __nw_http_connection_metadata_set_connection_closed_handler_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *v3;
  uint64_t v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + 48);
  if (*(_QWORD *)(v1 + 128))
  {
    v3 = _Block_copy(*(const void **)(a1 + 40));
    v4 = *(_QWORD *)(a1 + 48);
    v5 = *(void **)(v4 + 136);
    *(_QWORD *)(v4 + 136) = v3;

    objc_storeStrong((id *)(*(_QWORD *)(a1 + 48) + 144), *(id *)(a1 + 32));
  }
  else
  {
    dispatch_async(*(dispatch_queue_t *)(v1 + 144), *(dispatch_block_t *)(v1 + 136));
  }
}

uint64_t __nw_http_connection_metadata_send_ping_block_invoke(uint64_t a1, uint64_t a2)
{
  void *v4;
  _QWORD v6[4];
  id v7;
  id v8;
  uint64_t v9;

  v4 = *(void **)(a2 + 120);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = __nw_http_connection_metadata_send_ping_block_invoke_2;
  v6[3] = &unk_1E14AAAF0;
  v7 = *(id *)(a1 + 32);
  v9 = a2;
  v8 = *(id *)(a1 + 40);
  nw_queue_context_async_if_needed(v4, v6);

  return 1;
}

void __nw_http_connection_metadata_send_ping_block_invoke_2(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[6];
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  void *(*v12)(uint64_t, uint64_t);
  void (*v13)(uint64_t);
  id v14;

  v9 = 0;
  v10 = &v9;
  v11 = 0x3032000000;
  v12 = __Block_byref_object_copy__72473;
  v13 = __Block_byref_object_dispose__72474;
  v14 = 0;
  v2 = *(os_unfair_lock_s **)(a1 + 48);
  v3 = v2 + 44;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __nw_http_connection_metadata_send_ping_block_invoke_3;
  v8[3] = &unk_1E14AA320;
  v8[4] = &v9;
  v8[5] = v2;
  os_unfair_lock_lock(v2 + 44);
  __nw_http_connection_metadata_send_ping_block_invoke_3((uint64_t)v8);
  os_unfair_lock_unlock(v3);
  v7 = v10[5];
  if (v7)
    (*(void (**)(uint64_t, _QWORD))(v7 + 16))(v7, *(_QWORD *)(a1 + 40));
  else
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, v4, v5, v6);
  _Block_object_dispose(&v9, 8);

}

void sub_183A64350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_http_connection_metadata_send_ping_block_invoke_3(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(*(_QWORD *)(a1 + 40) + 152));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void nw_http_connection_metadata_set_version(void *a1, int a2)
{
  id v3;
  void *v4;
  id v5;
  id v6;
  BOOL is_equal_unsafe;
  uint64_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  _QWORD v23[4];
  int v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_http_connection_metadata_set_version";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v10, &type, &v25))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_version";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_http_connection_metadata_set_version";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v10)
          goto LABEL_7;
LABEL_42:
        free(v10);
        goto LABEL_7;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_version";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_http_connection_metadata_set_version";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v5 = v3;
  v6 = *((id *)v5 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v6, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v23[0] = MEMORY[0x1E0C809B0];
    v23[1] = 3221225472;
    v23[2] = __nw_http_connection_metadata_set_version_block_invoke;
    v23[3] = &__block_descriptor_36_e9_B16__0_v8l;
    v24 = a2;
    v8 = *((_QWORD *)v5 + 4);
    if (v8)
      __nw_http_connection_metadata_set_version_block_invoke((uint64_t)v23, v8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_http_connection_metadata_set_version";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v10, &type, &v25))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_version";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v25)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_version";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v28 = "nw_http_connection_metadata_set_version";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v28 = "nw_http_connection_metadata_set_version";
    v29 = 2082;
    v30 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_42;
LABEL_7:

}

uint64_t __nw_http_connection_metadata_set_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a2 + 160) = *(_DWORD *)(a1 + 32);
  return 1;
}

uint64_t nw_http_connection_metadata_get_version(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  BOOL is_equal;
  uint64_t isa;
  unsigned int *v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  int v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_protocol_metadata_copy_definition(v1);
    if (nw_protocol_copy_http_connection_definition_onceToken != -1)
      dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
    is_equal = nw_protocol_definition_is_equal(v3, (nw_protocol_definition_t)nw_protocol_copy_http_connection_definition_definition);

    if (is_equal)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      v26 = 0;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v22[0] = MEMORY[0x1E0C809B0];
      v22[1] = 3221225472;
      v22[2] = __nw_http_connection_metadata_get_version_block_invoke;
      v22[3] = &unk_1E14A9D68;
      v22[4] = buf;
      isa = (uint64_t)v2[4].isa;
      if (isa)
      {
        __nw_http_connection_metadata_get_version_block_invoke((uint64_t)v22, isa);
        v6 = (unsigned int *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v6 = (unsigned int *)&v26;
      }
      v7 = *v6;
      _Block_object_dispose(buf, 8);
      goto LABEL_9;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s metadata must be http_connection", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v10, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null metadata", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v23)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_http_connection_metadata_get_version";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_9:

  return v7;
}

uint64_t __nw_http_connection_metadata_get_version_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 160);
  return 1;
}

void nw_http_connection_metadata_increment_outbound_message_count(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  BOOL is_equal_unsafe;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_http_connection_metadata_increment_outbound_message_count";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http_connection_metadata_increment_outbound_message_count";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_http_connection_metadata_increment_outbound_message_count";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v8)
          goto LABEL_7;
LABEL_42:
        free(v8);
        goto LABEL_7;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http_connection_metadata_increment_outbound_message_count";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_http_connection_metadata_increment_outbound_message_count";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v3 = v1;
  v4 = *((id *)v3 + 1);

  if (nw_protocol_copy_http_connection_definition_onceToken != -1)
    dispatch_once(&nw_protocol_copy_http_connection_definition_onceToken, &__block_literal_global_62);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_http_connection_definition_definition);

  if (is_equal_unsafe)
  {
    v6 = *((_QWORD *)v3 + 4);
    if (v6)
      __nw_http_connection_metadata_increment_outbound_message_count_block_invoke((uint64_t)&__block_literal_global_66_75168, v6);
    goto LABEL_7;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_http_connection_metadata_increment_outbound_message_count";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_41;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http_connection_metadata_increment_outbound_message_count";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s metadata must be http_connection", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (!v21)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http_connection_metadata_increment_outbound_message_count";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s metadata must be http_connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_40;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_http_connection_metadata_increment_outbound_message_count";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s metadata must be http_connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_40;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_http_connection_metadata_increment_outbound_message_count";
    v25 = 2082;
    v26 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s metadata must be http_connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_42;
LABEL_7:

}

