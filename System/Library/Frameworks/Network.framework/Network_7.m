uint64_t nw_protocol_plugin_retry_get_remote_endpoint(nw_protocol *a1)
{
  _QWORD *handle;
  uint64_t v2;
  uint64_t v3;
  nw_protocol *default_input_handler;
  void *v5;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v7;
  uint64_t (*get_remote_endpoint)(nw_protocol *);
  nw_protocol_callbacks *v10;
  nw_protocol_callbacks *v11;
  void (**v12)(_QWORD);
  const void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  const char *name;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  const char *v23;
  char *backtrace_string;
  _BOOL4 v25;
  const char *v26;
  _BOOL4 v27;
  _BOOL4 v28;
  char *v29;
  _BOOL4 v30;
  const char *v31;
  _BOOL4 v32;
  const char *v33;
  const char *v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  void *v40;
  __int16 v41;
  nw_protocol *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35))
      goto LABEL_101;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
          v17 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v25 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
          v17 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      if (!v25)
        goto LABEL_76;
      *(_DWORD *)buf = 136446466;
      v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
      v39 = 2082;
      v40 = backtrace_string;
      v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_101;
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    v17 = "%{public}s called with null protocol";
LABEL_100:
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
    goto LABEL_101;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35))
      goto LABEL_101;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v35)
      {
        v15 = __nwlog_obj();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
          v17 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj();
      v16 = type;
      v27 = os_log_type_enabled(v15, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
          v17 = "%{public}s called with null protocol->handle, no backtrace";
          goto LABEL_100;
        }
        goto LABEL_101;
      }
      if (!v27)
        goto LABEL_76;
      *(_DWORD *)buf = 136446466;
      v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
      v39 = 2082;
      v40 = backtrace_string;
      v26 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
    v15 = __nwlog_obj();
    v16 = type;
    if (!os_log_type_enabled(v15, type))
      goto LABEL_101;
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    v17 = "%{public}s called with null protocol->handle";
    goto LABEL_100;
  }
  v2 = handle[11];
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_101;
      *(_DWORD *)buf = 136446210;
      v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
      v17 = "%{public}s called with null retry_plugin";
      goto LABEL_100;
    }
    if (!v35)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
        v17 = "%{public}s called with null retry_plugin, backtrace limit exceeded";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v28 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
        v17 = "%{public}s called with null retry_plugin, no backtrace";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    if (!v28)
      goto LABEL_76;
    *(_DWORD *)buf = 136446466;
    v38 = "nw_protocol_plugin_retry_get_remote_endpoint";
    v39 = 2082;
    v40 = backtrace_string;
    v26 = "%{public}s called with null retry_plugin, dumping backtrace:%{public}s";
LABEL_75:
    _os_log_impl(&dword_182FBE000, v15, v16, v26, buf, 0x16u);
    goto LABEL_76;
  }
  v3 = *(_QWORD *)(v2 + 80);
  if (v3)
    return v3;
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v38 = "__nw_protocol_get_remote_endpoint";
    v14 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v14, &type, &v35))
      goto LABEL_101;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "__nw_protocol_get_remote_endpoint";
        v17 = "%{public}s called with null protocol";
        goto LABEL_100;
      }
LABEL_101:
      if (v14)
        free(v14);
      return 0;
    }
    if (!v35)
    {
      v15 = __nwlog_obj();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "__nw_protocol_get_remote_endpoint";
        v17 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v15 = __nwlog_obj();
    v16 = type;
    v32 = os_log_type_enabled(v15, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "__nw_protocol_get_remote_endpoint";
        v17 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_100;
      }
      goto LABEL_101;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v38 = "__nw_protocol_get_remote_endpoint";
      v39 = 2082;
      v40 = backtrace_string;
      v26 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_75;
    }
LABEL_76:
    free(backtrace_string);
    goto LABEL_101;
  }
  v5 = default_input_handler->handle;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    callbacks = default_input_handler[1].callbacks;
    if (callbacks)
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
  }
  v7 = default_input_handler->callbacks;
  if (v7)
  {
    get_remote_endpoint = (uint64_t (*)(nw_protocol *))v7->get_remote_endpoint;
    if (get_remote_endpoint)
    {
      v3 = get_remote_endpoint(default_input_handler);
      if (v5 != &nw_protocol_ref_counted_handle)
        return v3;
      goto LABEL_12;
    }
  }
  __nwlog_obj();
  name = default_input_handler->identifier->name;
  *(_DWORD *)buf = 136446722;
  v38 = "__nw_protocol_get_remote_endpoint";
  if (!name)
    name = "invalid";
  v39 = 2082;
  v40 = (void *)name;
  v41 = 2048;
  v42 = default_input_handler;
  v19 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (!__nwlog_fault(v19, &type, &v35))
    goto LABEL_92;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_92;
    v22 = default_input_handler->identifier->name;
    if (!v22)
      v22 = "invalid";
    *(_DWORD *)buf = 136446722;
    v38 = "__nw_protocol_get_remote_endpoint";
    v39 = 2082;
    v40 = (void *)v22;
    v41 = 2048;
    v42 = default_input_handler;
    v23 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_91:
    _os_log_impl(&dword_182FBE000, v20, v21, v23, buf, 0x20u);
    goto LABEL_92;
  }
  if (!v35)
  {
    v20 = __nwlog_obj();
    v21 = type;
    if (!os_log_type_enabled(v20, type))
      goto LABEL_92;
    v33 = default_input_handler->identifier->name;
    if (!v33)
      v33 = "invalid";
    *(_DWORD *)buf = 136446722;
    v38 = "__nw_protocol_get_remote_endpoint";
    v39 = 2082;
    v40 = (void *)v33;
    v41 = 2048;
    v42 = default_input_handler;
    v23 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
    goto LABEL_91;
  }
  v29 = (char *)__nw_create_backtrace_string();
  v20 = __nwlog_obj();
  v21 = type;
  v30 = os_log_type_enabled(v20, type);
  if (!v29)
  {
    if (!v30)
      goto LABEL_92;
    v34 = default_input_handler->identifier->name;
    if (!v34)
      v34 = "invalid";
    *(_DWORD *)buf = 136446722;
    v38 = "__nw_protocol_get_remote_endpoint";
    v39 = 2082;
    v40 = (void *)v34;
    v41 = 2048;
    v42 = default_input_handler;
    v23 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
    goto LABEL_91;
  }
  if (v30)
  {
    v31 = default_input_handler->identifier->name;
    if (!v31)
      v31 = "invalid";
    *(_DWORD *)buf = 136446978;
    v38 = "__nw_protocol_get_remote_endpoint";
    v39 = 2082;
    v40 = (void *)v31;
    v41 = 2048;
    v42 = default_input_handler;
    v43 = 2082;
    v44 = v29;
    _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v29);
LABEL_92:
  if (v19)
    free(v19);
  v3 = 0;
  if (v5 == &nw_protocol_ref_counted_handle)
  {
LABEL_12:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      v10 = default_input_handler[1].callbacks;
      if (v10)
      {
        v11 = (nw_protocol_callbacks *)((char *)v10 - 1);
        default_input_handler[1].callbacks = v11;
        if (!v11)
        {
          v12 = *(void (***)(_QWORD))default_input_handler[1].flow_id;
          if (v12)
          {
            *(_QWORD *)default_input_handler[1].flow_id = 0;
            v12[2](v12);
            _Block_release(v12);
          }
          if ((default_input_handler[1].flow_id[8] & 1) != 0)
          {
            v13 = *(const void **)default_input_handler[1].flow_id;
            if (v13)
              _Block_release(v13);
          }
          free(default_input_handler);
        }
      }
    }
  }
  return v3;
}

void nw_protocol_plugin_reset_set_callbacks(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  const char *v10;
  _BOOL4 v11;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_plugin_reset_set_callbacks";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v4, &type, &v15))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_plugin_reset_set_callbacks";
      v7 = "%{public}s called with null protocol";
LABEL_58:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      goto LABEL_59;
    }
    if (!v15)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_plugin_reset_set_callbacks";
      v7 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_plugin_reset_set_callbacks";
      v7 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_58;
    }
    if (!v9)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v18 = "nw_protocol_plugin_reset_set_callbacks";
    v19 = 2082;
    v20 = backtrace_string;
    v10 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_34:
    _os_log_impl(&dword_182FBE000, v5, v6, v10, buf, 0x16u);
    goto LABEL_35;
  }
  v2 = *(_QWORD *)(a1 + 40);
  if (!v2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_plugin_reset_set_callbacks";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v4, &type, &v15))
      goto LABEL_59;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_plugin_reset_set_callbacks";
      v7 = "%{public}s called with null protocol->handle";
      goto LABEL_58;
    }
    if (!v15)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_plugin_reset_set_callbacks";
      v7 = "%{public}s called with null protocol->handle, backtrace limit exceeded";
      goto LABEL_58;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v11 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v11)
        goto LABEL_59;
      *(_DWORD *)buf = 136446210;
      v18 = "nw_protocol_plugin_reset_set_callbacks";
      v7 = "%{public}s called with null protocol->handle, no backtrace";
      goto LABEL_58;
    }
    if (!v11)
      goto LABEL_35;
    *(_DWORD *)buf = 136446466;
    v18 = "nw_protocol_plugin_reset_set_callbacks";
    v19 = 2082;
    v20 = backtrace_string;
    v10 = "%{public}s called with null protocol->handle, dumping backtrace:%{public}s";
    goto LABEL_34;
  }
  v3 = *(_QWORD **)(v2 + 80);
  if (v3)
  {
    *v3 = a2;
    if (*(_QWORD *)(a1 + 24))
      return;
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_plugin_reset_set_callbacks";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v4, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_plugin_reset_set_callbacks";
        v7 = "%{public}s called with null callbacks";
        goto LABEL_58;
      }
      if (!v15)
      {
        v5 = __nwlog_obj();
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_plugin_reset_set_callbacks";
        v7 = "%{public}s called with null callbacks, backtrace limit exceeded";
        goto LABEL_58;
      }
      v13 = (char *)__nw_create_backtrace_string();
      v5 = __nwlog_obj();
      v6 = type;
      v14 = os_log_type_enabled(v5, type);
      if (!v13)
      {
        if (!v14)
          goto LABEL_59;
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_plugin_reset_set_callbacks";
        v7 = "%{public}s called with null callbacks, no backtrace";
        goto LABEL_58;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446466;
        v18 = "nw_protocol_plugin_reset_set_callbacks";
        v19 = 2082;
        v20 = v13;
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null callbacks, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v13);
    }
LABEL_59:
    if (v4)
      goto LABEL_60;
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_plugin_reset_set_callbacks";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v4, &type, &v15))
    goto LABEL_59;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_plugin_reset_set_callbacks";
    v7 = "%{public}s called with null reset_plugin";
    goto LABEL_58;
  }
  if (!v15)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_plugin_reset_set_callbacks";
    v7 = "%{public}s called with null reset_plugin, backtrace limit exceeded";
    goto LABEL_58;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v12 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (!v12)
      goto LABEL_59;
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocol_plugin_reset_set_callbacks";
    v7 = "%{public}s called with null reset_plugin, no backtrace";
    goto LABEL_58;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_protocol_plugin_reset_set_callbacks";
    v19 = 2082;
    v20 = backtrace_string;
    v10 = "%{public}s called with null reset_plugin, dumping backtrace:%{public}s";
    goto LABEL_34;
  }
LABEL_35:
  free(backtrace_string);
  if (v4)
LABEL_60:
    free(v4);
}

nw_protocol_definition_t nw_protocol_copy_ws_definition(void)
{
  if (nw_protocol_copy_ws_definition::onceToken != -1)
    dispatch_once(&nw_protocol_copy_ws_definition::onceToken, &__block_literal_global_3588);
  return (nw_protocol_definition_t)(id)nw_protocol_copy_ws_definition::definition;
}

void __nw_protocol_copy_ws_definition_block_invoke()
{
  nw_protocol_definition_t definition;
  void *v1;

  definition = nw_framer_create_definition("WebSocket", 0, &__block_literal_global_5);
  v1 = (void *)nw_protocol_copy_ws_definition::definition;
  nw_protocol_copy_ws_definition::definition = (uint64_t)definition;

  nw_protocol_definition_set_options_allocator((void *)nw_protocol_copy_ws_definition::definition, (uint64_t)nw_ws_allocate_options, (uint64_t)nw_ws_copy_options, (uint64_t)nw_ws_deallocate_options);
  nw_protocol_definition_set_options_equality_check((void *)nw_protocol_copy_ws_definition::definition, (uint64_t)nw_ws_option_is_equal);
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_2(uint64_t a1, void *a2)
{
  NSObject *v2;
  uint64_t v3;
  _BOOL8 v4;
  void *v5;
  nw_protocol_options_t v6;
  _BOOL4 v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v10;
  void *v11;
  NSObject *v12;
  NSObject *v13;
  NSObject *v14;
  void *v15;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  os_log_type_t v32;
  _QWORD v33[5];
  _QWORD cleanup_handler[5];
  _QWORD stop_handler[5];
  _QWORD output_handler[4];
  NSObject *v37;
  uint64_t *v38;
  _QWORD input_handler[4];
  NSObject *v40;
  uint64_t *v41;
  uint64_t async_block;
  uint64_t p_async_block;
  uint64_t v44;
  void *v45;
  NSObject *v46;
  char v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  __n128 (*v51)(uint64_t, uint64_t);
  void (*v52)(id *);
  const char *v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  _BYTE v68[88];
  _BYTE applier[24];
  void *v70;
  NSObject *v71;
  uint64_t *v72;
  __int128 *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  v48 = 0;
  v49 = &v48;
  v50 = 0x16812000000;
  v51 = __Block_byref_object_copy__3591;
  v52 = __Block_byref_object_dispose__3592;
  v53 = "!0!2/\x130";
  v54 = 0u;
  v55 = 0u;
  v56 = 0u;
  v57 = 0u;
  v58 = 0u;
  v59 = 0u;
  v60 = 0u;
  v61 = 0u;
  v62 = 0u;
  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v66 = 0u;
  v67 = 0u;
  memset(v68, 0, 87);
  v2 = a2;
  v3 = MEMORY[0x1E0C809B0];
  if (v2)
  {
    v4 = nw_array_create();
    v5 = (void *)*((_QWORD *)&v57 + 1);
    *((_QWORD *)&v57 + 1) = v4;

    v6 = nw_framer_copy_options(v2);
    nw_protocol_options_get_log_id_str(v6, &v68[3], 84);
    HIWORD(v67) = 0;
    v68[0] = 0;
    async_block = 0;
    p_async_block = (uint64_t)&async_block;
    v44 = 0x2020000000;
    LOBYTE(v45) = 0;
    *(_QWORD *)applier = v3;
    *(_QWORD *)&applier[8] = 3221225472;
    *(_QWORD *)&applier[16] = ___ZL18nw_ws_create_stateP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObject_block_invoke;
    v70 = &unk_1E14AA260;
    v73 = &v54;
    v71 = v2;
    v72 = &async_block;
    nw_protocol_options_access_handle(v6, applier);
    v7 = *(_BYTE *)(p_async_block + 24) == 0;

    _Block_object_dispose(&async_block, 8);
    if (v7)
      v8 = 2;
    else
      v8 = 1;
    goto LABEL_5;
  }
  __nwlog_obj();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)applier = 136446210;
  *(_QWORD *)&applier[4] = "nw_ws_create_state";
  v18 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(async_block) = 16;
  v47 = 0;
  if (__nwlog_fault(v18, &async_block, &v47))
  {
    if (async_block == 17)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = async_block;
      if (os_log_type_enabled(v19, (os_log_type_t)async_block))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_ws_create_state";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null framer", applier, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v26 = async_block;
      v27 = os_log_type_enabled(v19, (os_log_type_t)async_block);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)applier = 136446466;
          *(_QWORD *)&applier[4] = "nw_ws_create_state";
          *(_WORD *)&applier[12] = 2082;
          *(_QWORD *)&applier[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v26, "%{public}s called with null framer, dumping backtrace:%{public}s", applier, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v27)
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_ws_create_state";
        _os_log_impl(&dword_182FBE000, v19, v26, "%{public}s called with null framer, no backtrace", applier, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v31 = async_block;
      if (os_log_type_enabled(v19, (os_log_type_t)async_block))
      {
        *(_DWORD *)applier = 136446210;
        *(_QWORD *)&applier[4] = "nw_ws_create_state";
        _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null framer, backtrace limit exceeded", applier, 0xCu);
      }
    }

  }
LABEL_36:
  if (v18)
    free(v18);
  v8 = 2;
LABEL_5:

  input_handler[0] = v3;
  input_handler[1] = 3221225472;
  input_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_6;
  input_handler[3] = &unk_1E14A4FF0;
  v41 = &v48;
  v9 = v2;
  v40 = v9;
  nw_framer_set_input_handler(v9, input_handler);
  output_handler[0] = v3;
  output_handler[1] = 3221225472;
  output_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_26;
  output_handler[3] = &unk_1E14A5040;
  v38 = &v48;
  v10 = v9;
  v37 = v10;
  nw_framer_set_output_handler(v10, output_handler);
  stop_handler[0] = v3;
  stop_handler[1] = 3221225472;
  stop_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_29;
  stop_handler[3] = &unk_1E149AA20;
  stop_handler[4] = &v48;
  nw_framer_set_stop_handler(v10, stop_handler);
  cleanup_handler[0] = v3;
  cleanup_handler[1] = 3221225472;
  cleanup_handler[2] = __nw_protocol_copy_ws_definition_block_invoke_33;
  cleanup_handler[3] = &unk_1E14A5068;
  cleanup_handler[4] = &v48;
  nw_framer_set_cleanup_handler(v10, cleanup_handler);
  v33[0] = v3;
  v33[1] = 3221225472;
  v33[2] = __nw_protocol_copy_ws_definition_block_invoke_2_35;
  v33[3] = &unk_1E149AA48;
  v33[4] = &v48;
  nw_framer_set_copy_metadata(v10, v33);
  v11 = (void *)v49[11];
  if (v11)
  {
    v12 = v10;
    v13 = v11;
    if (v2)
    {
      *(_QWORD *)applier = v3;
      *(_QWORD *)&applier[8] = 3221225472;
      *(_QWORD *)&applier[16] = __nw_framer_trigger_input_block_invoke;
      v70 = &unk_1E149DCC8;
      v14 = v12;
      v71 = v14;
      dispatch_data_apply(v13, applier);
      async_block = v3;
      p_async_block = 3221225472;
      v44 = (uint64_t)__nw_framer_trigger_input_block_invoke_2;
      v45 = &unk_1E14ACFD0;
      v46 = v14;
      nw_framer_async(v46, &async_block);

LABEL_8:
      v15 = (void *)v49[11];
      v49[11] = 0;

      goto LABEL_9;
    }
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "nw_framer_trigger_input";
    v22 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(async_block) = 16;
    v47 = 0;
    if (__nwlog_fault(v22, &async_block, &v47))
    {
      if (async_block == 17)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = async_block;
        if (os_log_type_enabled(v23, (os_log_type_t)async_block))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_framer_trigger_input";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null framer", applier, 0xCu);
        }
      }
      else if (v47)
      {
        v28 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v29 = async_block;
        v30 = os_log_type_enabled(v23, (os_log_type_t)async_block);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_framer_trigger_input";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = v28;
            _os_log_impl(&dword_182FBE000, v23, v29, "%{public}s called with null framer, dumping backtrace:%{public}s", applier, 0x16u);
          }

          free(v28);
          goto LABEL_45;
        }
        if (v30)
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_framer_trigger_input";
          _os_log_impl(&dword_182FBE000, v23, v29, "%{public}s called with null framer, no backtrace", applier, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v32 = async_block;
        if (os_log_type_enabled(v23, (os_log_type_t)async_block))
        {
          *(_DWORD *)applier = 136446210;
          *(_QWORD *)&applier[4] = "nw_framer_trigger_input";
          _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null framer, backtrace limit exceeded", applier, 0xCu);
        }
      }

    }
LABEL_45:
    if (v22)
      free(v22);
    goto LABEL_8;
  }
LABEL_9:

  _Block_object_dispose(&v48, 8);
  return v8;
}

void sub_1833B3AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,char a46)
{
  id *v46;
  void *v47;
  void *v48;
  void *v49;
  uint64_t v50;

  _Block_object_dispose(&a46, 8);
  nw_ws_state_t::~nw_ws_state_t(v46);

  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__3591(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __n128 result;
  __int128 v15;
  __int128 v16;

  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v2 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a1 + 64) = v2;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  v3 = *(_OWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_OWORD *)(a1 + 88) = v3;
  v4 = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a1 + 104) = v4;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  v5 = *(_OWORD *)(a2 + 128);
  v6 = *(_OWORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v7;
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 144) = v6;
  v8 = *(_OWORD *)(a2 + 192);
  v9 = *(_OWORD *)(a2 + 208);
  v10 = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 208) = v9;
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 192) = v8;
  v11 = *(_QWORD *)(a2 + 244);
  *(_QWORD *)(a2 + 244) = 0;
  *(_QWORD *)(a1 + 244) = v11;
  v12 = *(_OWORD *)(a2 + 252);
  v13 = *(_OWORD *)(a2 + 268);
  *(_OWORD *)(a1 + 284) = *(_OWORD *)(a2 + 284);
  *(_OWORD *)(a1 + 268) = v13;
  *(_OWORD *)(a1 + 252) = v12;
  result = *(__n128 *)(a2 + 300);
  v15 = *(_OWORD *)(a2 + 316);
  v16 = *(_OWORD *)(a2 + 332);
  *(_OWORD *)(a1 + 343) = *(_OWORD *)(a2 + 343);
  *(_OWORD *)(a1 + 316) = v15;
  *(_OWORD *)(a1 + 332) = v16;
  *(__n128 *)(a1 + 300) = result;
  return result;
}

void __Block_byref_object_dispose__3592(id *a1)
{

}

uint64_t ___ZL18nw_ws_create_stateP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  nw_parameters_t v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  uint64_t v13;
  const __CFData *client_request;
  const __CFData *v15;
  NSObject *v16;
  const uint8_t *BytePtr;
  CFIndex Length;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  nw_endpoint_t v23;
  NSObject *v24;
  NSObject *v25;
  int v26;
  NSObject *v27;
  id *v28;
  NSObject *v29;
  const char *v30;
  NSObject *v31;
  unsigned int v32;
  NSObject *v33;
  uint64_t v34;
  const char *v35;
  NSObject *v36;
  uint64_t v37;
  const char *v38;
  NSObject *v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  const char *v43;
  NSObject *v44;
  uint64_t v45;
  const char *v46;
  _BYTE url[12];
  __int16 v48;
  const char *v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v4 + 96) = *(_QWORD *)(a2 + 32);
  *(_WORD *)(v4 + 225) = *(_WORD *)(v4 + 225) & 0xFFFE | ((*(_BYTE *)(a2 + 70) & 4) != 0);
  v5 = nw_framer_copy_parameters(*(nw_framer_t *)(a1 + 32));
  if (nw_parameters_get_server_mode(v5))
    v6 = 4;
  else
    v6 = 0;
  *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) = *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) & 0xFFFB | v6;

  v7 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v7 + 176) = -1;
  *(_QWORD *)(v7 + 168) = -1;
  *(_WORD *)(v7 + 225) = *(_WORD *)(v7 + 225) & 0xFFBF | (8 * *(unsigned __int8 *)(a2 + 70)) & 0x40;
  *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) = *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) & 0xFF7F | (8
                                                                                                * *(unsigned __int8 *)(a2 + 70)) & 0x80;
  *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) = *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) & 0xFEFF | (((*(_BYTE *)(a2 + 70) & 0x20) != 0) << 8);
  v8 = *(_QWORD *)(a1 + 48);
  *(_WORD *)(v8 + 220) = *(_WORD *)(a2 + 68);
  *(_QWORD *)(v8 + 152) = *(unsigned int *)(a2 + 64);
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 80) = 0;
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) = 0;
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v9 + 144) = *(unsigned int *)(a2 + 60);
  *(_WORD *)(v9 + 225) &= ~0x200u;
  *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) &= ~0x400u;
  *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) &= ~0x800u;
  v10 = *(_QWORD *)(a1 + 48);
  *(_DWORD *)(v10 + 212) = 0;
  if ((*(_BYTE *)(a2 + 70) & 2) == 0)
  {
    *(_DWORD *)(v10 + 180) = 1;
    *(_DWORD *)(v10 + 188) = 1;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        v40 = *(_QWORD *)(a1 + 48);
        if (v40)
          v41 = (const char *)(v40 + 227);
        else
          v41 = "";
        *(_DWORD *)url = 136446466;
        *(_QWORD *)&url[4] = "nw_ws_create_state_block_invoke";
        v48 = 2082;
        v49 = v41;
        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s don't skip handshake", url, 0x16u);
      }

    }
    v11 = nw_framer_copy_parameters(*(nw_framer_t *)(a1 + 32));
    v12 = nw_parameters_copy_url_endpoint(v11);
    v13 = *(_QWORD *)(a1 + 48);
    if ((*(_WORD *)(v13 + 225) & 4) != 0)
      goto LABEL_10;
    if (!v12)
    {
      v23 = nw_framer_copy_remote_endpoint(*(nw_framer_t *)(a1 + 32));
      if (!v23)
        goto LABEL_25;
      v24 = 0;
      do
      {
        v25 = v23;
        v26 = -[NSObject type](v25, "type");

        if (v26 == 2)
        {
          v27 = v25;

          v24 = v27;
        }
        v28 = v25;
        v23 = (nw_endpoint_t)v28[14];

      }
      while (v23);
      if (!v24)
        goto LABEL_25;
      *(_QWORD *)url = 0;
      v29 = v24;
      v30 = (const char *)-[NSObject hostname](v29, "hostname");

      v31 = v29;
      v32 = -[NSObject port](v31, "port");

      asprintf((char **)url, "ws://%s:%d", v30, __rev16(v32));
      v12 = nw_endpoint_create_url(*(const char **)url);
      if (*(_QWORD *)url)
        free(*(void **)url);

      if (!v12)
      {
LABEL_25:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
        {
          v34 = *(_QWORD *)(a1 + 48);
          if (v34)
            v35 = (const char *)(v34 + 227);
          else
            v35 = "";
          *(_DWORD *)url = 136446466;
          *(_QWORD *)&url[4] = "nw_ws_create_state_block_invoke";
          v48 = 2082;
          v49 = v35;
          _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_ERROR, "%{public}s %{public}s unable to create url endpoint", url, 0x16u);
        }

        nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 53);
        v12 = 0;
        goto LABEL_37;
      }
      v13 = *(_QWORD *)(a1 + 48);
    }
    client_request = nw_ws_create_client_request(v13, *(void **)(a1 + 32), v12);
    v15 = client_request;
    if (client_request)
    {
      v16 = *(NSObject **)(a1 + 32);
      BytePtr = CFDataGetBytePtr(client_request);
      Length = CFDataGetLength(v15);
      nw_framer_write_output(v16, BytePtr, Length);
      CFRelease(v15);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          v45 = *(_QWORD *)(a1 + 48);
          if (v45)
            v46 = (const char *)(v45 + 227);
          else
            v46 = "";
          *(_DWORD *)url = 136446466;
          *(_QWORD *)&url[4] = "nw_ws_create_state_block_invoke";
          v48 = 2082;
          v49 = v46;
          _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s sent handshake request", url, 0x16u);
        }

      }
LABEL_10:

      goto LABEL_11;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = (id)gLogObj;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
    {
      v37 = *(_QWORD *)(a1 + 48);
      if (v37)
        v38 = (const char *)(v37 + 227);
      else
        v38 = "";
      *(_DWORD *)url = 136446466;
      *(_QWORD *)&url[4] = "nw_ws_create_state_block_invoke";
      v48 = 2082;
      v49 = v38;
      _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_ERROR, "%{public}s %{public}s create_client_request failed", url, 0x16u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 53);
LABEL_37:

    v21 = 0;
    goto LABEL_14;
  }
  *(_DWORD *)(v10 + 180) = 2;
  *(_DWORD *)(v10 + 188) = 2;
  if (!gLogDatapath)
    goto LABEL_13;
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
  {
    v42 = *(_QWORD *)(a1 + 48);
    if (v42)
      v43 = (const char *)(v42 + 227);
    else
      v43 = "";
    *(_DWORD *)url = 136446466;
    *(_QWORD *)&url[4] = "nw_ws_create_state_block_invoke";
    v48 = 2082;
    v49 = v43;
    _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s skip handshake", url, 0x16u);
  }
LABEL_11:

  v10 = *(_QWORD *)(a1 + 48);
LABEL_13:
  v20 = *(void **)(a2 + 24);
  v19 = a2 + 24;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(_BYTE *)(v19 + 46) & 2) != 0;
  objc_storeStrong((id *)(v10 + 40), v20);
  v11 = *(NSObject **)v19;
  *(_QWORD *)v19 = 0;
  v21 = 1;
LABEL_14:

  return v21;
}

void sub_1833B4248(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL __nw_protocol_copy_ws_definition_block_invoke_6(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  int v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _WORD *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int v47;
  uint64_t v48;
  int v49;
  nw_ws_opcode_t v50;
  nw_protocol_metadata_t metadata;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  id v58;
  NSObject *v59;
  id v60;
  _QWORD *v61;
  void *v62;
  size_t v63;
  _BOOL4 v64;
  NSObject *v65;
  _BOOL4 v66;
  _BOOL4 v67;
  void *v68;
  void *v69;
  NSObject *v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  BOOL v87;
  const char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  void *v93;
  _BOOL8 result;
  NSObject *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  const char *v110;
  NSObject *v111;
  uint32_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  id v116;
  void *v117;
  char *v118;
  NSObject *v119;
  os_log_type_t v120;
  char *backtrace_string;
  NSObject *v122;
  os_log_type_t v123;
  _BOOL4 v124;
  os_log_type_t v125;
  NSObject *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  NSObject *v130;
  uint64_t v131;
  const char *v132;
  void *v133;
  void *v134;
  uint64_t v135;
  _QWORD v136[4];
  id v137;
  NSObject *v138;
  uint64_t v139;
  os_log_type_t *v140;
  _QWORD parse[4];
  NSObject *v142;
  uint64_t v143;
  os_log_type_t *v144;
  _BYTE *v145;
  os_log_type_t type[8];
  os_log_type_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint8_t v150[4];
  const char *v151;
  __int16 v152;
  uint64_t v153;
  __int16 v154;
  const char *v155;
  _BYTE buf[24];
  _BYTE v157[24];
  uint64_t v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = *(_QWORD *)(a1 + 40);
  v6 = *(_QWORD *)(v5 + 8);
  v7 = *(_WORD *)(v6 + 273);
  if ((v7 & 0x10) != 0)
  {
    v116 = v3;
    __nwlog_obj();
    v117 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
    v118 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v150[0] = 0;
    if (__nwlog_fault(v118, type, v150))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v119 = objc_claimAutoreleasedReturnValue();
        v120 = type[0];
        if (os_log_type_enabled(v119, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          _os_log_impl(&dword_182FBE000, v119, v120, "%{public}s ws.input: the websocket state has been destroyed, not handling input", buf, 0xCu);
        }
      }
      else
      {
        if (v150[0])
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v122 = objc_claimAutoreleasedReturnValue();
          v123 = type[0];
          v124 = os_log_type_enabled(v122, type[0]);
          if (backtrace_string)
          {
            if (v124)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v122, v123, "%{public}s ws.input: the websocket state has been destroyed, not handling input, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
          }
          else
          {
            if (v124)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
              _os_log_impl(&dword_182FBE000, v122, v123, "%{public}s ws.input: the websocket state has been destroyed, not handling input, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_168;
        }
        __nwlog_obj();
        v119 = objc_claimAutoreleasedReturnValue();
        v125 = type[0];
        if (os_log_type_enabled(v119, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          _os_log_impl(&dword_182FBE000, v119, v125, "%{public}s ws.input: the websocket state has been destroyed, not handling input, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_168:
    v4 = v116;
    if (v118)
      free(v118);
    goto LABEL_7;
  }
  v8 = *(_DWORD *)(v6 + 228);
  if (v8 != 1)
  {
    if (!v8)
    {
      nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v10;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input The protocol should not be in the invalid state here", buf, 0x16u);
      }
LABEL_6:

LABEL_7:
      v11 = 0xFFFFFFFFLL;
LABEL_17:
      v135 = v11;
      goto LABEL_144;
    }
    goto LABEL_33;
  }
  if ((v7 & 2) != 0)
  {
    v11 = 2;
    goto LABEL_17;
  }
  if (!*(_QWORD *)(v6 + 72))
  {
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 72) = CFHTTPMessageCreateEmpty((CFAllocatorRef)*MEMORY[0x1E0C9AE00], (v7 & 4) != 0);
    v5 = *(_QWORD *)(a1 + 40);
    if (!*(_QWORD *)(*(_QWORD *)(v5 + 8) + 72))
    {
      nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 12);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v17;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s CFHTTPMessageCreateEmpty", buf, 0x16u);
      }
      goto LABEL_6;
    }
  }
  v133 = v4;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v157[0] = 0;
  *(_QWORD *)type = 0;
  v147 = type;
  v148 = 0x2020000000;
  v149 = 0;
  v12 = *(void **)(a1 + 32);
  parse[0] = MEMORY[0x1E0C809B0];
  parse[1] = 3221225472;
  parse[2] = __nw_protocol_copy_ws_definition_block_invoke_7;
  parse[3] = &unk_1E149A968;
  v143 = v5;
  v142 = v12;
  v144 = type;
  v145 = buf;
  nw_framer_parse_input(v142, 1uLL, 0xFFFFFFFFuLL, 0, parse);
  if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
  {
    v14 = 0;
    v15 = 1;
LABEL_22:
    v135 = v15;
    goto LABEL_32;
  }
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48;
  if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 273) & 4) != 0)
  {
    if ((nw_ws_validate_client_request(v13, *(void **)(a1 + 32)) & 1) != 0)
    {
      v16 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 273);
      *v16 |= 2u;
      nw_ws_present_request_to_user(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 48, *(void **)(a1 + 32));
      v14 = 0;
LABEL_21:
      v15 = 2;
      goto LABEL_22;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v21 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
      *(_DWORD *)v150 = 136446466;
      v151 = "nw_protocol_copy_ws_definition_block_invoke";
      v152 = 2082;
      v153 = v21;
      v20 = "%{public}s %{public}s nw_ws_validate_client request";
      goto LABEL_30;
    }
  }
  else
  {
    if ((nw_ws_validate_server_response(v13) & 1) != 0)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v130 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v130, OS_LOG_TYPE_DEBUG))
        {
          v131 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
          if ((*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 273) & 4) != 0)
            v132 = "server";
          else
            v132 = "client";
          *(_DWORD *)v150 = 136446722;
          v151 = "nw_protocol_copy_ws_definition_block_invoke";
          v152 = 2082;
          v153 = v131;
          v154 = 2082;
          v155 = v132;
          _os_log_impl(&dword_182FBE000, v130, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %{public}s handshake complete", v150, 0x20u);
        }

      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 228) = 2;
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 236) = 2;
      nw_framer_mark_ready(*(nw_framer_t *)(a1 + 32));
      v14 = *((_QWORD *)v147 + 3) != 0;
      goto LABEL_21;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
      *(_DWORD *)v150 = 136446466;
      v151 = "nw_protocol_copy_ws_definition_block_invoke";
      v152 = 2082;
      v153 = v19;
      v20 = "%{public}s %{public}s nw_ws_validate_server_response";
LABEL_30:
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, v20, v150, 0x16u);
    }
  }

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 53);
  v14 = 0;
  v135 = 0;
LABEL_32:

  _Block_object_dispose(type, 8);
  _Block_object_dispose(buf, 8);
  v4 = v133;
  if (!v14)
    goto LABEL_144;
LABEL_33:
  v134 = v4;
  v135 = 2;
  v22 = MEMORY[0x1E0C809B0];
  while (1)
  {
    v24 = *(_QWORD *)(a1 + 40);
    v25 = *(_QWORD *)(v24 + 8);
    v26 = *(_DWORD *)(v25 + 228);
    if (v26 != 2)
      goto LABEL_41;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v70 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
      {
        v71 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v71;
        _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_header", buf, 0x16u);
      }

      v25 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    }
    if (!nw_framer_parse_input(*(nw_framer_t *)(a1 + 32), 2uLL, 2uLL, (uint8_t *)(v25 + 264), &__block_literal_global_12_3682))goto LABEL_143;
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 264) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                              + 264)) >> 16;
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 273) = *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                           + 273) & 0xFDFF | (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 264) >> 5) & 0x200;
    v27 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if ((*(_WORD *)(v27 + 264) & 0x3000) != 0)
      break;
    *(_WORD *)(v27 + 273) = *(_WORD *)(v27 + 273) & 0xFFF7 | (*(_WORD *)(v27 + 264) >> 12) & 8;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 232) = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                            + 265) & 0xF;
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v29 = nw_ws_validate_frame((nw_ws_state_t *)(v28 + 48), (*(unsigned __int16 *)(v28 + 273) >> 3) & 1, (*(unsigned __int16 *)(v28 + 273) >> 9) & 1, *(_DWORD *)(v28 + 232), (*(unsigned __int16 *)(v28 + 264) >> 7) & 1, *(_WORD *)(v28 + 264) & 0x7F, 1);
    v30 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    if ((v29 & 1) == 0)
    {
      nw_ws_write_header(v30 + 48, *(void **)(a1 + 32), 8, 0x3EAu, 0, 0, 1);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v95 = (id)gLogObj;
      if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
      {
        v97 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v97;
        _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input nw_ws_validate_server_response", buf, 0x16u);
      }
      goto LABEL_132;
    }
    *(_DWORD *)(v30 + 228) = 3;
    v24 = *(_QWORD *)(a1 + 40);
    v26 = *(_DWORD *)(*(_QWORD *)(v24 + 8) + 228);
LABEL_41:
    if (v26 == 3)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v72 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
        {
          v73 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v73;
          _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_payload_length", buf, 0x16u);
        }

        v24 = *(_QWORD *)(a1 + 40);
      }
      *(_QWORD *)(*(_QWORD *)(v24 + 8) + 160) = 0;
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v32 = *(_WORD *)(v31 + 264) & 0x7F;
      if ((_DWORD)v32 == 126)
      {
        if (!nw_framer_parse_input(*(nw_framer_t *)(a1 + 32), 2uLL, 2uLL, (uint8_t *)(v31 + 266), &__block_literal_global_17))goto LABEL_143;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 160) = bswap32(*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 266)) >> 16;
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 160) < 0x7EuLL)
        {
          __nwlog_obj();
          v100 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
          {
            v113 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
            v114 = v113 + 275;
            v115 = *(_QWORD *)(v113 + 160);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v114;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)v157 = v115;
            v110 = "%{public}s %{public}s expected a payload length of greater than 125, but received %zu";
            v111 = v100;
            v112 = 32;
LABEL_149:
            _os_log_impl(&dword_182FBE000, v111, OS_LOG_TYPE_ERROR, v110, buf, v112);
          }
LABEL_150:
          v106 = 100;
          goto LABEL_151;
        }
        if (!gLogDatapath)
          goto LABEL_56;
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          v39 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v40 = v39 + 275;
          v41 = *(_QWORD *)(v39 + 160);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke_2";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v40;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)v157 = v41;
          v37 = v33;
          v38 = "%{public}s %{public}s input extended payload(16) = %zu";
LABEL_123:
          _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, v38, buf, 0x20u);
        }
      }
      else
      {
        if ((_DWORD)v32 == 127)
        {
          if (!nw_framer_parse_input(*(nw_framer_t *)(a1 + 32), 8uLL, 8uLL, (uint8_t *)(v31 + 48), &__block_literal_global_15))
          {
            v98 = 8;
            goto LABEL_142;
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 160) = bswap64(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8)
                                                                                           + 48));
          if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 160) < 0x10000uLL)
          {
            __nwlog_obj();
            v100 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
            {
              v107 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
              v108 = v107 + 275;
              v109 = *(_QWORD *)(v107 + 160);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v108;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)v157 = 0xFFFF;
              *(_WORD *)&v157[4] = 2048;
              *(_QWORD *)&v157[6] = v109;
              v110 = "%{public}s %{public}s expected a payload length of greater than %u, but received %zu";
              v111 = v100;
              v112 = 38;
              goto LABEL_149;
            }
            goto LABEL_150;
          }
          if (!gLogDatapath)
            goto LABEL_56;
          __nwlog_obj();
          v33 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
            goto LABEL_124;
          v34 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v35 = v34 + 275;
          v36 = *(_QWORD *)(v34 + 160);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke_2";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v35;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)v157 = v36;
          v37 = v33;
          v38 = "%{public}s %{public}s input extended payload(64) = %zu";
          goto LABEL_123;
        }
        *(_QWORD *)(v31 + 160) = v32;
        if (!gLogDatapath)
        {
LABEL_56:
          v42 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          if (!*(_QWORD *)(v42 + 144))
          {
LABEL_60:
            if ((*(_BYTE *)(v42 + 232) & 8) != 0)
            {
              if (*(_QWORD *)(v42 + 136))
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v43 = (id)gLogObj;
                if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
                {
                  v44 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v44;
                  _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}s state.input_buffer should not be present", buf, 0x16u);
                }

                v42 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
              }
              v45 = *(_QWORD *)(v42 + 160);
              if (v45)
              {
                v46 = malloc_type_malloc(*(_QWORD *)(v42 + 160), 0xF2B69DE5uLL);
                if (!v46)
                {
                  __nwlog_obj();
                  v92 = objc_claimAutoreleasedReturnValue();
                  os_log_type_enabled(v92, OS_LOG_TYPE_ERROR);
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "strict_malloc";
                  *(_WORD *)&buf[12] = 2048;
                  *(_QWORD *)&buf[14] = v45;
                  v93 = (void *)_os_log_send_and_compose_impl();

                  result = __nwlog_abort((uint64_t)v93);
                  if (result)
                  {
                    __break(1u);
                    return result;
                  }
                  free(v93);
                }
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 136) = v46;
                v42 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
              }
            }
            if ((*(_WORD *)(v42 + 264) & 0x80) != 0)
              v47 = 4;
            else
              v47 = 5;
            *(_DWORD *)(v42 + 228) = v47;
            v24 = *(_QWORD *)(a1 + 40);
            goto LABEL_72;
          }
          *(_QWORD *)(v42 + 152) += *(_QWORD *)(v42 + 160);
          v42 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          if (*(_QWORD *)(v42 + 152) <= *(_QWORD *)(v42 + 144))
          {
            if ((*(_WORD *)(v42 + 273) & 8) != 0)
            {
              *(_QWORD *)(v42 + 152) = 0;
              v42 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
            }
            goto LABEL_60;
          }
          nw_ws_write_header(v42 + 48, *(void **)(a1 + 32), 8, 0x3F1u, 0, 0, 1);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v100 = (id)gLogObj;
          if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
          {
            v101 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
            v102 = v101 + 275;
            v105 = v101 + 144;
            v103 = *(_QWORD *)(v101 + 144);
            v104 = *(_QWORD *)(v105 + 8);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v102;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)v157 = v104;
            *(_WORD *)&v157[8] = 2048;
            *(_QWORD *)&v157[10] = v103;
            _os_log_impl(&dword_182FBE000, v100, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input message size %zu exceeds maximum message size %zu", buf, 0x2Au);
          }
          v106 = 40;
LABEL_151:

          v4 = v134;
          nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), v106);
          goto LABEL_7;
        }
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
        {
          v89 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v90 = v89 + 275;
          v91 = *(_QWORD *)(v89 + 160);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v90;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)v157 = v91;
          v37 = v33;
          v38 = "%{public}s %{public}s input payload length = %zu";
          goto LABEL_123;
        }
      }
LABEL_124:

      goto LABEL_56;
    }
LABEL_72:
    v48 = *(_QWORD *)(v24 + 8);
    v49 = *(_DWORD *)(v48 + 228);
    if (v49 == 4)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
        {
          v75 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v75;
          _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_mask_key", buf, 0x16u);
        }

        v48 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      }
      if (!nw_framer_parse_input(*(nw_framer_t *)(a1 + 32), 4uLL, 4uLL, (uint8_t *)(v48 + 252), &__block_literal_global_19))
      {
        v98 = 4;
        goto LABEL_142;
      }
      if (gLogDatapath)
      {
        __nwlog_obj();
        v82 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
        {
          v83 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v84 = v83 + 48;
          v85 = v83 + 275;
          v86 = *(_DWORD *)(v83 + 252);
          v87 = (*(_WORD *)(v84 + 225) & 4) == 0;
          v88 = "server";
          if (v87)
            v88 = "client";
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke_2";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v85;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)v157 = v86;
          *(_WORD *)&v157[4] = 2082;
          *(_QWORD *)&v157[6] = v88;
          _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input masking_key = %u, %{public}s", buf, 0x26u);
        }

      }
      *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 228) = 5;
      v48 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v49 = *(_DWORD *)(v48 + 228);
    }
    if (v49 == 5)
    {
      v50 = *(_DWORD *)(v48 + 232);
      if ((v50 - 8) > 2)
      {
        v52 = *(void **)(v48 + 244);
        if (v52)
        {
          metadata = v52;
        }
        else
        {
          metadata = nw_ws_create_metadata(v50);
          nw_ws_metadata_set_negotiated_permessage_deflate(metadata, (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 273) >> 6) & 1);
          objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 244), metadata);
        }
      }
      else
      {
        metadata = nw_ws_create_metadata(v50);
        nw_ws_metadata_set_negotiated_permessage_deflate(metadata, (*(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 273) >> 6) & 1);
        nw_ws_metadata_set_permessage_deflate(metadata, 0);
      }
      if (gLogDatapath)
      {
        __nwlog_obj();
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
        {
          v77 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v78 = v77 + 275;
          v81 = v77 + 160;
          v79 = *(_QWORD *)(v77 + 160);
          v80 = *(_QWORD *)(v81 + 8);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v78;
          *(_WORD *)&buf[22] = 2048;
          *(_QWORD *)v157 = v80;
          *(_WORD *)&v157[8] = 2048;
          *(_QWORD *)&v157[10] = v79;
          _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_payload, itr=%zu, len=%zu", buf, 0x2Au);
        }

      }
      *(_QWORD *)type = 0;
      v147 = type;
      v148 = 0x2020000000;
      LOBYTE(v149) = 0;
      v53 = *(_QWORD *)(a1 + 40);
      v54 = *(_QWORD *)(v53 + 8);
      v55 = *(_QWORD *)(v54 + 160);
      v56 = *(_QWORD *)(v54 + 168);
      while (1)
      {
        v57 = *(void **)(a1 + 32);
        v136[0] = v22;
        v136[1] = 3221225472;
        v136[2] = __nw_protocol_copy_ws_definition_block_invoke_20;
        v136[3] = &unk_1E149A9D0;
        v139 = v53;
        v140 = type;
        v58 = v57;
        v137 = v58;
        v59 = metadata;
        v138 = v59;
        v60 = v58;
        v61 = v136;
        v62 = v61;
        v63 = v55 - v56;
        if (v63)
        {
          *(_QWORD *)buf = v22;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL17nw_ws_parse_inputPU23objcproto12OS_nw_framer8NSObjectP13nw_ws_state_tmmPhU13block_pointerFmS4_mbbE_block_invoke;
          *(_QWORD *)v157 = &unk_1E149AA70;
          v158 = v54 + 48;
          v65 = v60;
          *(_QWORD *)&v157[8] = v65;
          *(_QWORD *)&v157[16] = v62;
          v66 = nw_framer_parse_input(v65, 1uLL, v63, 0, buf);

        }
        else
        {
          v64 = (*(_WORD *)(v54 + 273) & 8) != 0 && *(_QWORD *)(v54 + 168) == *(_QWORD *)(v54 + 160);
          v66 = 1;
          __nw_protocol_copy_ws_definition_block_invoke_20((uint64_t)v61, 0, 0, 1, v64);
        }

        v67 = !*((_BYTE *)v147 + 24) && v66;
        v53 = *(_QWORD *)(a1 + 40);
        v54 = *(_QWORD *)(v53 + 8);
        if (!v67)
          break;
        v55 = *(_QWORD *)(v54 + 160);
        v56 = *(_QWORD *)(v54 + 168);
        if (v56 >= v55)
          goto LABEL_99;
      }
      if (*((_BYTE *)v147 + 24))
      {
        nw_ws_write_header(v54 + 48, *(void **)(a1 + 32), 8, 0x3EAu, 0, 0, 1);
        nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
        v99 = 0xFFFFFFFFLL;
LABEL_140:
        v135 = v99;
        _Block_object_dispose(type, 8);

        goto LABEL_143;
      }
      if (*(_QWORD *)(v54 + 168) < *(_QWORD *)(v54 + 160))
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v126 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v126, OS_LOG_TYPE_DEBUG))
          {
            v127 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
            v128 = v127 + 275;
            v129 = *(_QWORD *)(v127 + 160) - *(_QWORD *)(v127 + 168);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v128;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)v157 = v129;
            _os_log_impl(&dword_182FBE000, v126, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input nw_ws_parse_state_payload is asking for %zu bytes", buf, 0x20u);
          }

          v54 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        }
        v99 = *(_QWORD *)(v54 + 160) - *(_QWORD *)(v54 + 168);
        goto LABEL_140;
      }
LABEL_99:
      if ((*(_WORD *)(v54 + 273) & 8) != 0 && (*(_DWORD *)(v54 + 232) - 8) >= 3)
      {
        v68 = *(void **)(v54 + 244);
        *(_QWORD *)(v54 + 244) = 0;

        v54 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      }
      v69 = *(void **)(v54 + 136);
      if (v69)
      {
        free(v69);
        *(_QWORD *)(v54 + 136) = 0;
      }
      *(_QWORD *)(v54 + 48) = 0;
      v23 = v54 + 48;
      *(_DWORD *)(v23 + 204) = 0;
      *(_DWORD *)(v23 + 216) = 0;
      *(_QWORD *)(v23 + 112) = 0;
      *(_QWORD *)(v23 + 120) = 0;
      *(_QWORD *)(v23 + 180) = 2;
      *(_WORD *)(v23 + 225) &= 0xFDF7u;
      _Block_object_dispose(type, 8);

    }
  }
  nw_ws_write_header(v27 + 48, *(void **)(a1 + 32), 8, 0x3EAu, 0, 0, 1);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v95 = (id)gLogObj;
  if (os_log_type_enabled(v95, OS_LOG_TYPE_ERROR))
  {
    v96 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke_2";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v96;
    _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_ERROR, "%{public}s %{public}s input rsv bits are not 0", buf, 0x16u);
  }
LABEL_132:

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
  v98 = 0xFFFFFFFFLL;
LABEL_142:
  v135 = v98;
LABEL_143:
  v4 = v134;
LABEL_144:

  return v135;
}

void sub_1833B59D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;

  _Block_object_dispose(&a37, 8);

  _Unwind_Resume(a1);
}

void __nw_protocol_copy_ws_definition_block_invoke_26(uint64_t a1, uint64_t a2, void *a3, size_t a4, int a5)
{
  NSObject *v8;
  nw_ws_opcode_t opcode;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  _QWORD *v19;
  void *v20;
  NSObject *v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  _QWORD v35[4];
  NSObject *v36;
  id v37;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  char v41;
  _QWORD v42[3];
  size_t v43;
  char v44;
  os_log_type_t type;
  _BYTE parse[24];
  __int128 v47;
  NSObject *v48;
  id v49;
  uint64_t v50;
  size_t *v51;
  int v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v8 = a3;
  if (gLogDatapath)
  {
    __nwlog_obj();
    v25 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
      *(_DWORD *)parse = 136446466;
      *(_QWORD *)&parse[4] = "nw_protocol_copy_ws_definition_block_invoke";
      *(_WORD *)&parse[12] = 2082;
      *(_QWORD *)&parse[14] = v26;
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output", parse, 0x16u);
    }

  }
  if (v8)
  {
    opcode = nw_ws_metadata_get_opcode(v8);
    v10 = opcode;
    v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v12 = *(_DWORD *)(v11 + 224);
    if (v12 == -1)
    {
      if ((a5 & 1) == 0)
      {
LABEL_10:
        *(_DWORD *)(v11 + 224) = v10;
        v11 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
        v10 = opcode;
        goto LABEL_11;
      }
LABEL_9:
      opcode = v10;
      v10 = -1;
      goto LABEL_10;
    }
    if (v12 == opcode)
    {
      v10 = 0;
      if (!a5)
      {
LABEL_11:
        *(_DWORD *)(v11 + 236) = 2;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 176) = 0;
        v42[0] = 0;
        v42[1] = v42;
        v42[2] = 0x2020000000;
        v43 = a4;
        v14 = *(void **)(a1 + 32);
        v13 = *(_QWORD *)(a1 + 40);
        v15 = MEMORY[0x1E0C809B0];
        v16 = *(_QWORD *)(v13 + 8);
        v35[0] = MEMORY[0x1E0C809B0];
        v35[1] = 3221225472;
        v35[2] = __nw_protocol_copy_ws_definition_block_invoke_27;
        v35[3] = &unk_1E149A9F8;
        v38 = v13;
        v40 = v10;
        v36 = v8;
        v39 = v42;
        v41 = a5;
        v37 = *(id *)(a1 + 32);
        v17 = v14;
        v18 = v36;
        v19 = v35;
        v20 = v19;
        if (v17)
        {
          if (a4)
          {
            *(_QWORD *)parse = v15;
            *(_QWORD *)&parse[8] = 3221225472;
            *(_QWORD *)&parse[16] = ___ZL18nw_ws_parse_outputPU23objcproto12OS_nw_framer8NSObjectPU34objcproto23OS_nw_protocol_metadataS_P13nw_ws_state_t14nw_ws_opcode_tbPmPhU13block_pointerFmS8_mbbE_block_invoke;
            *(_QWORD *)&v47 = &unk_1E149AAC0;
            v50 = v16 + 48;
            *((_QWORD *)&v47 + 1) = v18;
            v52 = v10;
            v21 = v17;
            v53 = a5;
            v48 = v21;
            v51 = &v43;
            v49 = v20;
            nw_framer_parse_output(v21, a4, a4, 0, parse);

          }
          else
          {
            __nw_protocol_copy_ws_definition_block_invoke_27((uint64_t)v19, 0, 0, 0);
          }
LABEL_18:

          _Block_object_dispose(v42, 8);
          goto LABEL_19;
        }
        __nwlog_obj();
        v27 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)parse = 136446210;
        *(_QWORD *)&parse[4] = "nw_ws_parse_output";
        v28 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v44 = 0;
        if (__nwlog_fault(v28, &type, &v44))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v29 = objc_claimAutoreleasedReturnValue();
            v30 = type;
            if (os_log_type_enabled(v29, type))
            {
              *(_DWORD *)parse = 136446210;
              *(_QWORD *)&parse[4] = "nw_ws_parse_output";
              _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null framer", parse, 0xCu);
            }
          }
          else if (v44)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v29 = objc_claimAutoreleasedReturnValue();
            v32 = type;
            v33 = os_log_type_enabled(v29, type);
            if (backtrace_string)
            {
              if (v33)
              {
                *(_DWORD *)parse = 136446466;
                *(_QWORD *)&parse[4] = "nw_ws_parse_output";
                *(_WORD *)&parse[12] = 2082;
                *(_QWORD *)&parse[14] = backtrace_string;
                _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null framer, dumping backtrace:%{public}s", parse, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_39;
            }
            if (v33)
            {
              *(_DWORD *)parse = 136446210;
              *(_QWORD *)&parse[4] = "nw_ws_parse_output";
              _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null framer, no backtrace", parse, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v29 = objc_claimAutoreleasedReturnValue();
            v34 = type;
            if (os_log_type_enabled(v29, type))
            {
              *(_DWORD *)parse = 136446210;
              *(_QWORD *)&parse[4] = "nw_ws_parse_output";
              _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null framer, backtrace limit exceeded", parse, 0xCu);
            }
          }

        }
LABEL_39:
        if (v28)
          free(v28);
        goto LABEL_18;
      }
      goto LABEL_9;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v24 = v23 + 275;
      LODWORD(v23) = *(_DWORD *)(v23 + 224);
      *(_DWORD *)parse = 136446978;
      *(_QWORD *)&parse[4] = "nw_protocol_copy_ws_definition_block_invoke";
      *(_WORD *)&parse[12] = 2082;
      *(_QWORD *)&parse[14] = v24;
      *(_WORD *)&parse[22] = 1024;
      LODWORD(v47) = v23;
      WORD2(v47) = 1024;
      *(_DWORD *)((char *)&v47 + 6) = v10;
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, "%{public}s %{public}s trying to send a new message before completing the first, %d, %d", parse, 0x22u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
  }
  else
  {
    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 5);
  }
LABEL_19:

}

void sub_1833B6050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_29(uint64_t a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  _QWORD v4[5];

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(unsigned __int8 **)(*(_QWORD *)(v1 + 8) + 104);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_protocol_copy_ws_definition_block_invoke_2_30;
  v4[3] = &unk_1E14A8DC0;
  v4[4] = v1;
  nw_array_apply(v2, (uint64_t)v4);
  return 1;
}

void __nw_protocol_copy_ws_definition_block_invoke_33(uint64_t a1)
{
  uint64_t v1;
  const void *v2;
  const void *v3;
  void *v4;
  z_stream *v5;
  void *v6;
  void *v7;
  z_stream *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  NSObject *v15;
  int v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v15 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
    {
      v16 = 136446466;
      v17 = "nw_ws_destroy_state";
      v18 = 2082;
      v19 = v1 + 275;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s destroying websocket state", (uint8_t *)&v16, 0x16u);
    }

  }
  v2 = *(const void **)(v1 + 72);
  if (v2)
  {
    CFRelease(v2);
    *(_QWORD *)(v1 + 72) = 0;
  }
  v3 = *(const void **)(v1 + 56);
  if (v3)
  {
    CFRelease(v3);
    *(_QWORD *)(v1 + 56) = 0;
  }
  v4 = *(void **)(v1 + 136);
  if (v4)
  {
    free(v4);
    *(_QWORD *)(v1 + 136) = 0;
  }
  v5 = *(z_stream **)(v1 + 112);
  if (v5)
  {
    inflateEnd(v5);
    v6 = *(void **)(v1 + 112);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(v1 + 112) = 0;
    }
  }
  v7 = *(void **)(v1 + 128);
  if (v7)
  {
    free(v7);
    *(_QWORD *)(v1 + 128) = 0;
  }
  v8 = *(z_stream **)(v1 + 120);
  if (v8)
  {
    deflateEnd(v8);
    v9 = *(void **)(v1 + 120);
    if (v9)
    {
      free(v9);
      *(_QWORD *)(v1 + 120) = 0;
    }
  }
  v10 = *(void **)(v1 + 64);
  *(_QWORD *)(v1 + 64) = 0;

  v11 = *(void **)(v1 + 88);
  *(_QWORD *)(v1 + 88) = 0;

  v12 = *(void **)(v1 + 96);
  *(_QWORD *)(v1 + 96) = 0;

  v13 = *(void **)(v1 + 104);
  *(_QWORD *)(v1 + 104) = 0;

  v14 = *(void **)(v1 + 244);
  *(_QWORD *)(v1 + 244) = 0;

  *(_WORD *)(v1 + 273) |= 0x10u;
}

nw_protocol_metadata_t __nw_protocol_copy_ws_definition_block_invoke_2_35(uint64_t a1)
{
  nw_protocol_metadata_t metadata;
  nw_protocol_metadata_t v3;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  metadata = nw_ws_create_metadata(nw_ws_opcode_invalid);
  v3 = metadata;
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 96);
  if (v5)
  {
    v6 = metadata;
    v7 = v5;
    if (nw_protocol_metadata_is_ws(v6))
    {
      nw_framer_message_set_value(v6, "server_response", v7, &__block_literal_global_24_50506);
LABEL_4:

      v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      goto LABEL_5;
    }
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_ws_metadata_set_server_response";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if ((__nwlog_fault(v10, &type, &v17) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_ws_metadata_set_server_response";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_ws_metadata_set_server_response";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_ws_metadata_set_server_response";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_ws_metadata_set_server_response";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_22:
    if (v10)
      free(v10);
    goto LABEL_4;
  }
LABEL_5:
  nw_ws_metadata_set_negotiated_permessage_deflate(v3, (*(unsigned __int16 *)(v4 + 273) >> 6) & 1);
  return v3;
}

void sub_1833B65B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_ws_state_t::~nw_ws_state_t(id *this)
{

}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_2_30(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  unint64_t v5;
  id v6;
  NSObject *v7;
  _DWORD *v8;
  NSObject *v9;
  uint64_t v10;
  _QWORD v12[4];
  id v13;
  id v14;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = (unint64_t)nw_ws_ping_request_copy_pong_handler(v4);
  v6 = nw_ws_ping_request_copy_client_queue(v4);
  v7 = v6;
  if (v5 && v6)
  {
    v8 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 53);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_protocol_copy_ws_definition_block_invoke_3;
    v12[3] = &unk_1E14ACE18;
    v13 = v8;
    v14 = (id)v5;
    v9 = v8;
    dispatch_async(v7, v12);

LABEL_7:
    goto LABEL_8;
  }
  if (v5 | (unint64_t)v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 275;
      *(_DWORD *)buf = 136446466;
      v16 = "nw_protocol_copy_ws_definition_block_invoke_2";
      v17 = 2082;
      v18 = v10;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s %{public}s pong handler and client queue should both be nil", buf, 0x16u);
    }
    goto LABEL_7;
  }
LABEL_8:

  return 1;
}

void sub_1833B67D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_3(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

size_t __nw_protocol_copy_ws_definition_block_invoke_27(uint64_t a1, uint8_t *output_buffer, size_t output_length, unsigned int a4)
{
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  int v14;
  nw_ws_close_code_t close_code;
  id v16;
  NSObject *v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  unint64_t v21;
  NWConcrete_nw_ws_ping_request *v22;
  NSObject *v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  void *v27;
  NSObject *v28;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  _BOOL4 v34;
  char *v35;
  _BOOL4 v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v42;
  os_log_type_t type;
  NSObject *typea;
  os_log_type_t typeb;
  os_log_type_t v46;
  char *v47;
  dispatch_data_t v48;
  uint64_t access_value;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, void *);
  void *v52;
  _BYTE *v53;
  char v54;
  os_log_type_t v55;
  _BYTE buf[24];
  void *v57;
  void (*v58)(uint64_t);
  id v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 236);
  if (v8 != 2)
  {
LABEL_10:
    if (v8 != 5)
      return output_length;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        v26 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 275;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v26;
        *(_WORD *)&buf[22] = 2048;
        v57 = (void *)output_length;
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output parsed %zu bytes", buf, 0x20u);
      }

    }
    if (!*(_BYTE *)(a1 + 68) || *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 240) != 9)
      goto LABEL_72;
    v48 = (dispatch_data_t)MEMORY[0x1E0C80D00];
    v16 = MEMORY[0x1E0C80D00];
    if (output_buffer && output_length)
    {
      v48 = dispatch_data_create(output_buffer, output_length, 0, 0);

    }
    v17 = *(id *)(a1 + 32);
    if (nw_protocol_metadata_is_ws(v17))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v57 = __Block_byref_object_copy__21_50491;
      v58 = __Block_byref_object_dispose__22_50492;
      v59 = 0;
      v18 = MEMORY[0x1E0C809B0];
      access_value = MEMORY[0x1E0C809B0];
      v50 = 3221225472;
      v51 = __nw_ws_metadata_copy_client_queue_block_invoke;
      v52 = &unk_1E14A4848;
      v53 = buf;
      nw_framer_message_access_value(v17, "client_queue", &access_value);
      v19 = (unint64_t)*(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_19;
    }
    v18 = MEMORY[0x1E0C809B0];
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_client_queue";
    v47 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(access_value) = 16;
    v55 = OS_LOG_TYPE_DEFAULT;
    if ((__nwlog_fault(v47, &access_value, &v55) & 1) != 0)
    {
      if (access_value == 17)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        type = access_value;
        if (os_log_type_enabled(v28, (os_log_type_t)access_value))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_client_queue";
          _os_log_impl(&dword_182FBE000, v28, type, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
        }
      }
      else
      {
        if (v55)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          typea = objc_claimAutoreleasedReturnValue();
          v42 = access_value;
          v34 = os_log_type_enabled(typea, (os_log_type_t)access_value);
          if (backtrace_string)
          {
            if (v34)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_client_queue";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, typea, v42, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
          }
          else
          {
            if (v34)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_client_queue";
              _os_log_impl(&dword_182FBE000, typea, v42, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_58;
        }
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        typeb = access_value;
        if (os_log_type_enabled(v28, (os_log_type_t)access_value))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_client_queue";
          _os_log_impl(&dword_182FBE000, v28, typeb, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_58:
    if (v47)
      free(v47);
    v19 = 0;
LABEL_19:

    v20 = *(id *)(a1 + 32);
    if (nw_protocol_metadata_is_ws(v20))
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v57 = __Block_byref_object_copy__50482;
      v58 = __Block_byref_object_dispose__50483;
      v59 = 0;
      access_value = v18;
      v50 = 3221225472;
      v51 = __nw_ws_metadata_copy_pong_handler_block_invoke;
      v52 = &unk_1E14A4848;
      v53 = buf;
      nw_framer_message_access_value(v20, "pong_handler", &access_value);
      v21 = (unint64_t)_Block_copy(*(const void **)(*(_QWORD *)&buf[8] + 40));
      _Block_object_dispose(buf, 8);

      if (v19 && v21)
      {
        v22 = nw_ws_ping_request_create(v48, (void *)v19, (void *)v21);
        nw_array_append(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 104), v22);
LABEL_71:

LABEL_72:
        if (output_buffer && output_length)
        {
          if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 256))
          {
            v39 = 0;
            do
            {
              output_buffer[v39] ^= *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                             + (((_BYTE)v39
                                               + *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8)
                                                                            + 176)) & 3)
                                             + 256);
              ++v39;
            }
            while (output_length != v39);
            nw_framer_write_output(*(nw_framer_t *)(a1 + 40), output_buffer, output_length);
          }
          else
          {
            v40 = *(NSObject **)(a1 + 40);
            if (a4)
            {
              nw_framer_write_output(v40, output_buffer, output_length);
            }
            else
            {
              nw_framer_write_output_no_copy(v40, output_length);
              output_length = 0;
            }
          }
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 176) += output_length;
        }
        return output_length;
      }
LABEL_67:
      if (v19 | v21)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (NWConcrete_nw_ws_ping_request *)(id)gLogObj;
        if (os_log_type_enabled(&v22->super, OS_LOG_TYPE_ERROR))
        {
          v38 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 275;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v38;
          _os_log_impl(&dword_182FBE000, &v22->super, OS_LOG_TYPE_ERROR, "%{public}s %{public}s client queue or pong handler not set", buf, 0x16u);
        }
      }
      else
      {
        v22 = nw_ws_ping_request_create(v48, 0, 0);
        nw_array_append(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 104), v22);
        v21 = 0;
      }
      goto LABEL_71;
    }
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_pong_handler";
    v30 = (char *)_os_log_send_and_compose_impl();

    v55 = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if ((__nwlog_fault(v30, &v55, &v54) & 1) != 0)
    {
      if (v55 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = v55;
        if (os_log_type_enabled(v31, v55))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_pong_handler";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null nw_protocol_metadata_is_ws(metadata)", buf, 0xCu);
        }
      }
      else if (v54)
      {
        v35 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v46 = v55;
        v36 = os_log_type_enabled(v31, v55);
        if (v35)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_pong_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v35;
            _os_log_impl(&dword_182FBE000, v31, v46, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          goto LABEL_64;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_pong_handler";
          _os_log_impl(&dword_182FBE000, v31, v46, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v37 = v55;
        if (os_log_type_enabled(v31, v55))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_metadata_copy_pong_handler";
          _os_log_impl(&dword_182FBE000, v31, v37, "%{public}s called with null nw_protocol_metadata_is_ws(metadata), backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_64:
    if (v30)
      free(v30);

    v21 = 0;
    goto LABEL_67;
  }
  nw_ws_metadata_set_permessage_deflate(*(void **)(a1 + 32), a4);
  v9 = *(_DWORD *)(a1 + 64);
  if (v9)
    v10 = a4;
  else
    v10 = 0;
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) >= 0x7FuLL)
    LODWORD(v11) = 127;
  else
    v11 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
  if ((nw_ws_validate_frame((nw_ws_state_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48), *(unsigned __int8 *)(a1 + 68), v10, v9, (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 273) & 4) == 0, v11, 0) & 1) != 0)
  {
    v12 = *(void **)(a1 + 40);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 48;
    v14 = *(_DWORD *)(a1 + 64);
    close_code = nw_ws_metadata_get_close_code(*(nw_protocol_metadata_t *)(a1 + 32));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 256) = nw_ws_write_header(v13, v12, v14, close_code, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8)+ 24), v10, *(unsigned __int8 *)(a1 + 68));
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 240) = *(_DWORD *)(a1 + 64);
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 236) = 5;
    v8 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 236);
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v23 = (id)gLogObj;
  if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
  {
    v24 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 275;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v24;
    _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s %{public}s got invalid frame", buf, 0x16u);
  }

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 40), 100);
  return 0;
}

void sub_1833B7240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t ___ZL18nw_ws_parse_outputPU23objcproto12OS_nw_framer8NSObjectPU34objcproto23OS_nw_protocol_metadataS_P13nw_ws_state_t14nw_ws_opcode_tbPmPhU13block_pointerFmS8_mbbE_block_invoke(uint64_t a1, uint64_t a2, const char *a3)
{
  _QWORD *v6;
  NSObject *alloc;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  size_t size;
  dispatch_data_t subrange;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  BOOL v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  const char *v29;
  const char *v30;
  NSObject *v31;
  uint64_t v32;
  const char *v33;
  const char *v34;
  size_t v35;
  NSObject *v36;
  size_t v37;
  size_t v38;
  uint64_t v39;
  __int16 v40;
  size_t v41;
  uint64_t v42;
  _BOOL4 v43;
  uint64_t result;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  NSObject *v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  NSObject *v53;
  void *v54;
  NSObject *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD applier[4];
  id v61;
  uint64_t v62;
  uint8_t buf[4];
  const char *v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  const char *v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  if (!a2
    || !a3
    || (*(_WORD *)(*(_QWORD *)(a1 + 56) + 225) & 0x40) == 0
    || !nw_ws_metadata_get_permessage_deflate(*(void **)(a1 + 32))
    || *(_DWORD *)(a1 + 72) > 2u)
  {
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2);
  }
  *(_WORD *)(*(_QWORD *)(a1 + 56) + 225) |= 0x400u;
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 72);
  if (!v6)
  {
    v45 = malloc_type_malloc(0x70uLL, 0xF2B69DE5uLL);
    if (!v45)
    {
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v53, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446466;
      v64 = "strict_malloc";
      v65 = 2048;
      v66 = 112;
      v54 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v54);
      if ((_DWORD)result)
      {
        __break(1u);
        return result;
      }
      free(v54);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 72) = v45;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 72) + 64) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 72) + 72) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 72) + 80) = 0;
    v46 = *(_QWORD *)(a1 + 56);
    v47 = 220;
    if ((*(_WORD *)(v46 + 225) & 4) == 0)
      v47 = 221;
    v48 = deflateInit2_(*(z_streamp *)(v46 + 72), -1, 8, -*(unsigned __int8 *)(v46 + v47), 8, 0, "1.2.12", 112);
    if (v48)
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        v50 = *(_QWORD *)(a1 + 56);
        v51 = zError(v48);
        v52 = (const char *)(v50 + 227);
        v64 = "nw_ws_parse_output_block_invoke";
        *(_DWORD *)buf = 136446722;
        if (!v50)
          v52 = "";
        v65 = 2082;
        v66 = (uint64_t)v52;
        v67 = 2080;
        v68 = v51;
        _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_ERROR, "%{public}s %{public}s deflateInit2 returned %s", buf, 0x20u);
      }

      nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 40), 100);
      return 0;
    }
    v6 = *(_QWORD **)(*(_QWORD *)(a1 + 56) + 72);
  }
  *v6 = a2;
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 72) + 8) = (_DWORD)a3;
  v62 = 0;
  alloc = dispatch_data_create_alloc();
  v8 = *(_QWORD *)(a1 + 56);
  v9 = *(_QWORD *)(v8 + 152);
  v10 = *(_QWORD *)(v8 + 72);
  *(_DWORD *)(v10 + 32) = v9;
  *(_QWORD *)(v10 + 24) = v62;
  while (1)
  {
    v11 = deflate(*(z_streamp *)(*(_QWORD *)(a1 + 56) + 72), 2);
    v12 = v11;
    if (v11)
      break;
    v13 = *(_QWORD *)(a1 + 56);
    v14 = *(unsigned int *)(*(_QWORD *)(v13 + 72) + 32);
    if (gLogDatapath)
    {
      v59 = *(_QWORD *)(v13 + 152);
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        v18 = *(_QWORD *)(a1 + 56);
        v19 = (const char *)(v18 + 227);
        v20 = v18 == 0;
        *(_DWORD *)buf = 136446722;
        v21 = "";
        if (!v20)
          v21 = v19;
        v64 = "nw_ws_parse_output_block_invoke";
        v65 = 2082;
        v66 = (uint64_t)v21;
        v67 = 2048;
        v68 = (const char *)(v59 - v14);
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s writing %zu bytes of compressed data", buf, 0x20u);
      }

      v22 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 72);
      v14 = *(unsigned int *)(v22 + 32);
      if (*(_DWORD *)(v22 + 32))
      {
LABEL_11:
        size = dispatch_data_get_size(alloc);
        subrange = dispatch_data_create_subrange(alloc, 0, size - v14);
        goto LABEL_18;
      }
    }
    else if (*(_DWORD *)(*(_QWORD *)(v13 + 72) + 32))
    {
      goto LABEL_11;
    }
    v23 = dispatch_data_create_alloc();
    v24 = *(_QWORD *)(a1 + 56);
    v25 = *(_QWORD *)(v24 + 152);
    v26 = *(_QWORD *)(v24 + 72);
    *(_DWORD *)(v26 + 32) = v25;
    *(_QWORD *)(v26 + 24) = v62;
    subrange = dispatch_data_create_concat(alloc, v23);

    alloc = v23;
LABEL_18:

    alloc = subrange;
  }
  if (v11 == -5)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        v28 = *(_QWORD *)(a1 + 56);
        v29 = (const char *)(v28 + 227);
        v20 = v28 == 0;
        v30 = "";
        if (!v20)
          v30 = v29;
        *(_DWORD *)buf = 136446722;
        v64 = "nw_ws_parse_output_block_invoke";
        v65 = 2082;
        v66 = (uint64_t)v30;
        v67 = 2048;
        v68 = a3;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s compressed %zu bytes of data", buf, 0x20u);
      }

    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      v32 = *(_QWORD *)(a1 + 56);
      v33 = zError(v12);
      v34 = (const char *)(v32 + 227);
      *(_DWORD *)buf = 136446722;
      if (!v32)
        v34 = "";
      v64 = "nw_ws_parse_output_block_invoke";
      v65 = 2082;
      v66 = (uint64_t)v34;
      v67 = 2080;
      v68 = v33;
      _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s %{public}s deflate returned %s", buf, 0x20u);
    }

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 40), 100);
  }
  if (*(_BYTE *)(a1 + 76))
  {
    v35 = dispatch_data_get_size(alloc);
    v36 = dispatch_data_create_subrange(alloc, 0, v35 - 4);

    v37 = dispatch_data_get_size(v36);
    if ((*(_DWORD *)(a1 + 72) - 1) <= 1)
    {
      v38 = v37;
      if (v37 >= **(_QWORD **)(a1 + 64))
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v55 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
          {
            v56 = *(_QWORD *)(a1 + 56);
            v20 = v56 == 0;
            v57 = (const char *)(v56 + 227);
            if (v20)
              v57 = "";
            v58 = **(_QWORD **)(a1 + 64);
            *(_DWORD *)buf = 136446978;
            v64 = "nw_ws_parse_output_block_invoke";
            v65 = 2082;
            v66 = (uint64_t)v57;
            v67 = 2048;
            v68 = (const char *)v38;
            v69 = 2048;
            v70 = v58;
            _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Not compressing frame because compressed (%zu bytes) is no better than uncompressed (%zu bytes)", buf, 0x2Au);
          }

        }
        deflateReset(*(z_streamp *)(*(_QWORD *)(a1 + 56) + 72));

        v36 = 0;
      }
    }
    v39 = *(_QWORD *)(a1 + 56);
    v40 = *(_WORD *)(v39 + 225);
    if ((v40 & 0x84) == 4 || (*(_WORD *)(v39 + 225) & 0x104) == 0)
    {
      deflateReset(*(z_streamp *)(v39 + 72));
      v39 = *(_QWORD *)(a1 + 56);
      v40 = *(_WORD *)(v39 + 225);
    }
    *(_WORD *)(v39 + 225) = v40 & 0xFBFF;
    if (v36)
    {
LABEL_40:
      v41 = dispatch_data_get_size(v36);
      v42 = MEMORY[0x1E0C809B0];
      **(_QWORD **)(a1 + 64) = v41;
      applier[0] = v42;
      applier[1] = 3221225472;
      applier[2] = ___ZL18nw_ws_parse_outputPU23objcproto12OS_nw_framer8NSObjectPU34objcproto23OS_nw_protocol_metadataS_P13nw_ws_state_t14nw_ws_opcode_tbPmPhU13block_pointerFmS8_mbbE_block_invoke_50;
      applier[3] = &unk_1E149AA98;
      v61 = *(id *)(a1 + 48);
      v43 = dispatch_data_apply(v36, applier);

      return v43;
    }
  }
  else
  {
    v36 = alloc;
    if (alloc)
      goto LABEL_40;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), a2);
}

void sub_1833B7A18(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL18nw_ws_parse_outputPU23objcproto12OS_nw_framer8NSObjectPU34objcproto23OS_nw_protocol_metadataS_P13nw_ws_state_t14nw_ws_opcode_tbPmPhU13block_pointerFmS8_mbbE_block_invoke_50(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))() != 0;
}

uint64_t nw_ws_validate_frame(nw_ws_state_t *a1, int a2, int a3, unsigned int a4, int a5, unsigned int a6, int a7)
{
  __int16 v14;
  NSObject *v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  const char *v19;
  const char *v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  const char *v24;
  _BOOL4 v26;
  int v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  const char *v32;
  NSObject *v33;
  __int16 v34;
  const char *v35;
  const char *v36;
  const char *v37;
  char *backtrace_string;
  _BOOL4 v39;
  char v40;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  int v53;
  __int16 v54;
  int v55;
  __int16 v56;
  unsigned int v57;
  __int16 v58;
  int v59;
  __int16 v60;
  unsigned int v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v43 = "nw_ws_validate_frame";
    v29 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (!__nwlog_fault(v29, &type, &v40))
      goto LABEL_108;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_ws_validate_frame";
        v32 = "%{public}s called with null state";
LABEL_106:
        _os_log_impl(&dword_182FBE000, v30, v31, v32, buf, 0xCu);
      }
    }
    else
    {
      if (v40)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v39 = os_log_type_enabled(v30, type);
        if (backtrace_string)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            v43 = "nw_ws_validate_frame";
            v44 = 2082;
            v45 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_108;
        }
        if (!v39)
          goto LABEL_107;
        *(_DWORD *)buf = 136446210;
        v43 = "nw_ws_validate_frame";
        v32 = "%{public}s called with null state, no backtrace";
        goto LABEL_106;
      }
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v30, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_ws_validate_frame";
        v32 = "%{public}s called with null state, backtrace limit exceeded";
        goto LABEL_106;
      }
    }
LABEL_107:

LABEL_108:
    if (v29)
      free(v29);
    return 0;
  }
  if (!gLogDatapath)
  {
    v14 = *(_WORD *)((char *)a1 + 225);
    if ((v14 & 1) == 0)
      goto LABEL_4;
    return 1;
  }
  __nwlog_obj();
  v33 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
  {
    v34 = *(_WORD *)((char *)a1 + 225);
    v35 = "output";
    *(_DWORD *)buf = 136448514;
    v43 = "nw_ws_validate_frame";
    v44 = 2082;
    v45 = (char *)a1 + 227;
    v46 = 2082;
    if ((v34 & 4) != 0)
      v36 = "server";
    else
      v36 = "client";
    if (a7)
      v35 = "input";
    v47 = v35;
    v48 = 2082;
    v49 = v36;
    v37 = "reads";
    v50 = 2082;
    if (!a7)
      v37 = "sends";
    v51 = v37;
    v52 = 1024;
    v53 = a2;
    v54 = 1024;
    v55 = a3;
    v56 = 1024;
    v57 = a4;
    v58 = 1024;
    v59 = a5;
    v60 = 1024;
    v61 = a6;
    _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %{public}s  %{public}s %{public}s {fin: %u, rsv1: %u, op: %u, msk: %u, len: %u}", buf, 0x52u);
  }

  v14 = *(_WORD *)((char *)a1 + 225);
  if ((v14 & 1) != 0)
    return 1;
LABEL_4:
  if (a4 - 8 <= 2)
  {
    if (a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = "output";
        v43 = "nw_ws_validate_frame";
        *(_DWORD *)buf = 136446722;
        v44 = 2082;
        v45 = (char *)a1 + 227;
        if (a7)
          v16 = "input";
        v46 = 2082;
        v47 = v16;
        v17 = "%{public}s %{public}s %{public}s control frame can not be compressed";
LABEL_35:
        v22 = v15;
        v23 = 32;
LABEL_36:
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, v17, buf, v23);
        goto LABEL_37;
      }
      goto LABEL_37;
    }
    if ((a2 & 1) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v24 = "output";
        v43 = "nw_ws_validate_frame";
        *(_DWORD *)buf = 136446722;
        v44 = 2082;
        v45 = (char *)a1 + 227;
        if (a7)
          v24 = "input";
        v46 = 2082;
        v47 = v24;
        v17 = "%{public}s %{public}s %{public}s control frame was not marked final";
        goto LABEL_35;
      }
      goto LABEL_37;
    }
    if (a6 >= 0x7E)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v20 = "output";
        v43 = "nw_ws_validate_frame";
        *(_DWORD *)buf = 136446722;
        v44 = 2082;
        v45 = (char *)a1 + 227;
        if (a7)
          v20 = "input";
        v46 = 2082;
        v47 = v20;
        v17 = "%{public}s %{public}s %{public}s control frame has length >125 bytes";
        goto LABEL_35;
      }
LABEL_37:

      return 0;
    }
    if (a4 == 8 && a6 == 1)
      return 0;
LABEL_71:
    v26 = (v14 & 4) == 0;
    v27 = a5 ^ 1;
    if ((v14 & 4) != 0 && (a7 & 1) == 0 && !v27)
      return 0;
    goto LABEL_74;
  }
  if (!a4)
  {
    if (a7)
    {
      if (*((_DWORD *)a1 + 42) == -1)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_ws_validate_frame";
          v44 = 2082;
          v45 = (char *)a1 + 227;
          v19 = "%{public}s %{public}s input continuation frame was received without context";
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      if (!a3)
      {
        if (a2)
          *((_DWORD *)a1 + 42) = -1;
        goto LABEL_68;
      }
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_65;
    }
    else
    {
      if (*((_DWORD *)a1 + 43) == -1)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_ws_validate_frame";
          v44 = 2082;
          v45 = (char *)a1 + 227;
          v19 = "%{public}s %{public}s output continuation frame was sent without context";
          goto LABEL_64;
        }
        goto LABEL_65;
      }
      if (!a3)
      {
        if (a2)
          *((_DWORD *)a1 + 43) = -1;
        goto LABEL_71;
      }
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        goto LABEL_65;
    }
    *(_DWORD *)buf = 136446466;
    v43 = "nw_ws_validate_frame";
    v44 = 2082;
    v45 = (char *)a1 + 227;
    v19 = "%{public}s %{public}s rsv1 cannot be set on continuation frame";
    goto LABEL_64;
  }
  if (a4 > 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      v21 = "output";
      *(_DWORD *)buf = 136446978;
      v43 = "nw_ws_validate_frame";
      v45 = (char *)a1 + 227;
      v44 = 2082;
      if (a7)
        v21 = "input";
      v46 = 2082;
      v47 = v21;
      v48 = 1024;
      LODWORD(v49) = a4;
      v17 = "%{public}s %{public}s %{public}s unknown opcode %d for message";
      v22 = v15;
      v23 = 38;
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (!a7)
  {
    if (*((_DWORD *)a1 + 43) == -1)
    {
      if ((v14 & 0x40) != 0 || !a3)
      {
        if ((a2 & 1) == 0)
          *((_DWORD *)a1 + 43) = a4;
        goto LABEL_71;
      }
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v43 = "nw_ws_validate_frame";
        v44 = 2082;
        v45 = (char *)a1 + 227;
        v19 = "%{public}s %{public}s sending compressed data without correct state";
        goto LABEL_64;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v43 = "nw_ws_validate_frame";
        v44 = 2082;
        v45 = (char *)a1 + 227;
        v19 = "%{public}s %{public}s output continuation context should be invalid here";
        goto LABEL_64;
      }
    }
    goto LABEL_65;
  }
  if (*((_DWORD *)a1 + 42) != -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v43 = "nw_ws_validate_frame";
      v44 = 2082;
      v45 = (char *)a1 + 227;
      v19 = "%{public}s %{public}s input continuation context should be invalid here";
LABEL_64:
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, v19, buf, 0x16u);
    }
LABEL_65:

    return 0;
  }
  if ((v14 & 0x40) == 0 && a3)
  {
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v43 = "nw_ws_validate_frame";
      v44 = 2082;
      v45 = (char *)a1 + 227;
      v19 = "%{public}s %{public}s received compressed data without correct state";
      goto LABEL_64;
    }
    goto LABEL_65;
  }
  if ((a2 & 1) == 0)
    *((_DWORD *)a1 + 42) = a4;
LABEL_68:
  v26 = (v14 & 4) == 0;
  v27 = a5 ^ 1;
LABEL_74:
  if (!v26 && a7 && !a5 || v26 && (a7 & 1) == 0 && !a5)
    return 0;
  return v27 | v26 & a7 ^ 1u;
}

uint64_t nw_ws_write_header(uint64_t a1, void *a2, int a3, unsigned int a4, unint64_t a5, unsigned __int8 a6, int a7)
{
  NSObject *v13;
  NSObject *v14;
  int v15;
  int v16;
  unsigned int v17;
  int v18;
  BOOL v19;
  int v20;
  unsigned int v21;
  NSObject *v22;
  __int16 v23;
  unsigned int v24;
  __int16 v25;
  uint64_t v26;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  NSObject *v34;
  char *backtrace_string;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  _BOOL4 v39;
  NSObject *v40;
  const char *v41;
  NSObject *v42;
  NSObject *v43;
  NSObject *v44;
  NSObject *v45;
  os_log_type_t v46;
  os_log_type_t v47;
  uint8_t v48[2];
  uint8_t v49[8];
  uint8_t output_buffer[2];
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  char *v54;
  __int16 v55;
  _BYTE v56[10];
  _BYTE v57[6];
  __int16 v58;
  int v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v13 = a2;
  v14 = v13;
  if (!a1)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_ws_write_header";
    v29 = (char *)_os_log_send_and_compose_impl();

    v49[0] = 16;
    output_buffer[0] = 0;
    if (!__nwlog_fault(v29, v49, output_buffer))
      goto LABEL_102;
    if (v49[0] == 17)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v31 = v49[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_ws_write_header";
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null state", buf, 0xCu);
      }
      goto LABEL_101;
    }
    if (!output_buffer[0])
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v46 = v49[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_ws_write_header";
        _os_log_impl(&dword_182FBE000, v30, v46, "%{public}s called with null state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v30 = objc_claimAutoreleasedReturnValue();
    v36 = v49[0];
    v37 = os_log_type_enabled(v30, (os_log_type_t)v49[0]);
    if (!backtrace_string)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_ws_write_header";
        _os_log_impl(&dword_182FBE000, v30, v36, "%{public}s called with null state, no backtrace", buf, 0xCu);
      }
      goto LABEL_101;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      v52 = "nw_ws_write_header";
      v53 = 2082;
      v54 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v30, v36, "%{public}s called with null state, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_66;
  }
  if (!v13)
  {
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v52 = "nw_ws_write_header";
    v29 = (char *)_os_log_send_and_compose_impl();

    v49[0] = 16;
    output_buffer[0] = 0;
    if (!__nwlog_fault(v29, v49, output_buffer))
      goto LABEL_102;
    if (v49[0] == 17)
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v33 = v49[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_ws_write_header";
        _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null framer", buf, 0xCu);
      }
LABEL_101:

LABEL_102:
      if (v29)
        free(v29);
      goto LABEL_42;
    }
    if (!output_buffer[0])
    {
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v47 = v49[0];
      if (os_log_type_enabled(v30, (os_log_type_t)v49[0]))
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_ws_write_header";
        _os_log_impl(&dword_182FBE000, v30, v47, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_101;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v30 = objc_claimAutoreleasedReturnValue();
    v38 = v49[0];
    v39 = os_log_type_enabled(v30, (os_log_type_t)v49[0]);
    if (!backtrace_string)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v52 = "nw_ws_write_header";
        _os_log_impl(&dword_182FBE000, v30, v38, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
      goto LABEL_101;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      v52 = "nw_ws_write_header";
      v53 = 2082;
      v54 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v30, v38, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_66:

    free(backtrace_string);
    goto LABEL_102;
  }
  if (a7)
    v15 = 0x8000;
  else
    v15 = 0;
  if (((a3 != 0) & a6) != 0)
    v16 = 0x4000;
  else
    v16 = 0;
  v17 = (v15 & 0xFFFFFF7F | (a3 << 8) | v16 & 0xFFFFFF7F | (((*(unsigned __int16 *)(a1 + 225) >> 2) & 1) << 7)) ^ 0x80;
  if (a5 < 0x10000)
    v18 = 126;
  else
    v18 = 127;
  v19 = a4 != 1005 && a3 == 8;
  v20 = a5 + 2;
  if (!v19)
    v20 = a5;
  if (a5 <= 0x7D)
    v18 = v20;
  v21 = v17 | v18;
  *(_WORD *)output_buffer = bswap32(v17 | v18) >> 16;
  nw_framer_write_output(v13, output_buffer, 2uLL);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136447490;
      v52 = "nw_ws_write_header";
      v53 = 2082;
      v54 = (char *)(a1 + 227);
      v55 = 1024;
      *(_DWORD *)v56 = (v21 >> 15) & 1;
      *(_WORD *)&v56[4] = 1024;
      *(_DWORD *)&v56[6] = (v21 >> 8) & 0xF;
      *(_WORD *)v57 = 1024;
      *(_DWORD *)&v57[2] = (v21 >> 7) & 1;
      v58 = 1024;
      v59 = v21 & 0x7F;
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output base header = {fin: %u, opcode: %u, mask: %u, payload: %u}", buf, 0x2Eu);
    }

  }
  if ((v21 & 0x7F) == 0x7F)
  {
    *(_QWORD *)v49 = bswap64(a5);
    nw_framer_write_output(v14, v49, 8uLL);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v52 = "nw_ws_write_header";
        v53 = 2082;
        v54 = (char *)(a1 + 227);
        v55 = 2048;
        *(_QWORD *)v56 = a5;
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output extended payload(64) = %llu", buf, 0x20u);
      }
      goto LABEL_25;
    }
  }
  else if ((v21 & 0x7F) == 0x7E)
  {
    *(_WORD *)v49 = bswap32(a5) >> 16;
    nw_framer_write_output(v14, v49, 2uLL);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v52 = "nw_ws_write_header";
        v53 = 2082;
        v54 = (char *)(a1 + 227);
        v55 = 1024;
        *(_DWORD *)v56 = (unsigned __int16)a5;
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output extended payload(16) = %hu", buf, 0x1Cu);
      }
LABEL_25:

    }
  }
  v23 = *(_WORD *)(a1 + 225);
  if (a3 == 8)
  {
    v23 |= 0x20u;
    *(_WORD *)(a1 + 225) = v23;
  }
  if ((v23 & 4) != 0)
  {
    if (a3 == 8 && a4 != 1005)
    {
      if (a5 >= 0x7C)
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446210;
          v52 = "nw_ws_write_header";
          _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s ws.output: attempted to send close frame of >125 bytes", buf, 0xCu);
        }
LABEL_80:

LABEL_42:
        v26 = 0;
        goto LABEL_43;
      }
      *(_WORD *)v49 = bswap32(a4) >> 16;
      nw_framer_write_output(v14, v49, 2uLL);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v45 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v52 = "nw_ws_write_header";
          v53 = 2082;
          v54 = (char *)(a1 + 227);
          v55 = 1024;
          *(_DWORD *)v56 = *(unsigned __int16 *)v49;
          _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output wrote unmasked close code %hu", buf, 0x1Cu);
        }

      }
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v52 = "nw_ws_write_header";
        v53 = 2082;
        v54 = (char *)(a1 + 227);
        v55 = 1024;
        *(_DWORD *)v56 = 0;
        _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output masking_key = %u", buf, 0x1Cu);
      }

    }
    goto LABEL_42;
  }
  *(_DWORD *)v49 = arc4random_uniform(0xFFFFFFFF);
  nw_framer_write_output(v14, v49, 4uLL);
  if (a3 == 8 && a4 != 1005)
  {
    if (a5 < 0x7C)
    {
      v24 = bswap32(a4);
      v48[0] = v49[0] ^ BYTE2(v24);
      v48[1] = v49[1] ^ HIBYTE(v24);
      nw_framer_write_output(v14, v48, 2uLL);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v44 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v52 = "nw_ws_write_header";
          v53 = 2082;
          v54 = (char *)(a1 + 227);
          v55 = 1024;
          *(_DWORD *)v56 = *(unsigned __int16 *)v48;
          _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output wrote masked close code %hu", buf, 0x1Cu);
        }

      }
      v25 = *(_WORD *)v49;
      v49[0] = v49[2];
      v49[1] = v49[3];
      *(_WORD *)&v49[2] = v25;
      goto LABEL_35;
    }
    __nwlog_obj();
    v43 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v52 = "nw_ws_write_header";
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s ws.output: attempted to send close frame of >125 bytes", buf, 0xCu);
    }
    goto LABEL_80;
  }
LABEL_35:
  if (gLogDatapath)
  {
    __nwlog_obj();
    v40 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
    {
      v41 = "server";
      v19 = (*(_WORD *)(a1 + 225) & 4) == 0;
      v52 = "nw_ws_write_header";
      *(_DWORD *)buf = 136446978;
      if (v19)
        v41 = "client";
      v53 = 2082;
      v54 = (char *)(a1 + 227);
      v55 = 2082;
      *(_QWORD *)v56 = v41;
      *(_WORD *)&v56[8] = 1024;
      *(_DWORD *)v57 = *(_DWORD *)v49;
      _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s %{public}s output masking_key = %u", buf, 0x26u);
    }

  }
  v26 = *(unsigned int *)v49;
LABEL_43:

  return v26;
}

void sub_1833B8F38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_7(uint64_t a1, const UInt8 *a2, unint64_t numBytes)
{
  unint64_t v3;
  const __CFData *Length;
  const __CFData *v7;
  unint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint64_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v3 = 0;
  v41 = *MEMORY[0x1E0C80C00];
  if (!a2 || !numBytes)
    return v3;
  if (CFHTTPMessageAppendBytes(*(CFHTTPMessageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 72), a2, numBytes))
  {
    if (!CFHTTPMessageIsHeaderComplete(*(CFHTTPMessageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 72)))
    {
      v3 = numBytes;
LABEL_32:
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 80) += v3;
      if (gLogDatapath)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          v28 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
          v29 = v28 + 275;
          v30 = *(_QWORD *)(v28 + 80);
          *(_DWORD *)buf = 136446722;
          v34 = "nw_protocol_copy_ws_definition_block_invoke";
          v35 = 2082;
          v36 = v29;
          v37 = 2048;
          v38 = v30;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Appended %zu bytes to http_message", buf, 0x20u);
        }

      }
      return v3;
    }
    Length = CFHTTPMessageCopyBody(*(CFHTTPMessageRef *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 72));
    v7 = Length;
    if (Length)
      Length = (const __CFData *)CFDataGetLength(Length);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = Length;
    v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    v3 = numBytes - v8;
    if (numBytes >= v8)
    {
LABEL_29:
      if (v7)
        CFRelease(v7);
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
      goto LABEL_32;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
    *(_DWORD *)buf = 136446722;
    v34 = "nw_protocol_copy_ws_definition_block_invoke";
    v35 = 2048;
    v36 = v3;
    v37 = 2048;
    v38 = v10;
    v11 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault((const char *)v11, &type, &v31))
    {
LABEL_26:
      if (v11)
        free(v11);
      v3 = 0;
      goto LABEL_29;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_protocol_copy_ws_definition_block_invoke";
        v35 = 2048;
        v36 = v3;
        v37 = 2048;
        v38 = v14;
        v15 = "%{public}s UNDERFLOW: buffer length = %zu, body length = %zu";
LABEL_23:
        v23 = v12;
        v24 = v13;
LABEL_24:
        _os_log_impl(&dword_182FBE000, v23, v24, v15, buf, 0x20u);
      }
    }
    else
    {
      if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v19 = type;
        v20 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v20)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
            *(_DWORD *)buf = 136446978;
            v34 = "nw_protocol_copy_ws_definition_block_invoke";
            v35 = 2048;
            v36 = v3;
            v37 = 2048;
            v38 = v21;
            v39 = 2082;
            v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s UNDERFLOW: buffer length = %zu, body length = %zu, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (!v20)
          goto LABEL_25;
        v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_protocol_copy_ws_definition_block_invoke";
        v35 = 2048;
        v36 = v3;
        v37 = 2048;
        v38 = v26;
        v15 = "%{public}s UNDERFLOW: buffer length = %zu, body length = %zu, no backtrace";
        v23 = v12;
        v24 = v19;
        goto LABEL_24;
      }
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_protocol_copy_ws_definition_block_invoke";
        v35 = 2048;
        v36 = v3;
        v37 = 2048;
        v38 = v22;
        v15 = "%{public}s UNDERFLOW: buffer length = %zu, body length = %zu, backtrace limit exceeded";
        goto LABEL_23;
      }
    }
LABEL_25:

    goto LABEL_26;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    v17 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
    *(_DWORD *)buf = 136446466;
    v34 = "nw_protocol_copy_ws_definition_block_invoke";
    v35 = 2082;
    v36 = v17;
    _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s %{public}s CFHTTPMessageAppendBytes", buf, 0x16u);
  }

  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 12);
  return 1;
}

BOOL __nw_protocol_copy_ws_definition_block_invoke_20(uint64_t a1, const uint8_t *a2, unint64_t a3, uint64_t a4, int a5)
{
  const uint8_t *v6;
  uint64_t v8;
  int v9;
  int v10;
  char v11;
  uint64_t v12;
  int v13;
  int v14;
  NSObject *v15;
  nw_protocol_options_t v16;
  int v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  NSObject *v24;
  uint32_t v25;
  void *v26;
  id v27;
  NSObject *v28;
  unsigned __int16 *v29;
  unint64_t v30;
  unsigned int v31;
  nw_ws_close_code_t v32;
  BOOL v33;
  dispatch_data_t v34;
  id v35;
  const void *v36;
  unsigned __int8 *v37;
  _BOOL8 v38;
  unint64_t v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  id v44;
  NSObject *v45;
  NSObject *v46;
  uint64_t v47;
  size_t v48;
  NSObject *v49;
  int v50;
  size_t v51;
  NSObject *v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  int v56;
  void *v57;
  _BOOL8 result;
  unint64_t v59;
  void *v60;
  NSObject *v61;
  uint64_t v62;
  int v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  void *v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  void *v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  NSObject *v79;
  uint64_t v80;
  uint64_t v81;
  char *backtrace_string;
  os_log_type_t v83;
  _BOOL4 v84;
  char *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  os_log_type_t v88;
  os_log_type_t v89;
  NSObject *v90;
  void *v91;
  NSObject *v92;
  BOOL is_complete[4];
  _QWORD async_block[4];
  NSObject *v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  _BYTE buf[24];
  _BYTE v103[28];
  __int16 v104;
  const char *v105;
  uint8_t v106[4];
  const char *v107;
  __int16 v108;
  uint64_t v109;
  uint64_t block;
  uint64_t v111;
  uint64_t (*v112)(uint64_t);
  void *v113;
  NSObject *v114;
  uint64_t v115;

  v6 = a2;
  v115 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    v63 = a5;
    __nwlog_obj();
    v64 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
      v65 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 275;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v65;
      *(_WORD *)&buf[22] = 2048;
      *(_QWORD *)v103 = a3;
      _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input parse_input got %zu bytes", buf, 0x20u);
    }

    a5 = v63;
    if (!v6)
      goto LABEL_8;
  }
  else if (!a2)
  {
    goto LABEL_8;
  }
  if (a3)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(_DWORD *)(v8 + 232);
    if (v9 == 1 || !v9 && *(_BYTE *)(v8 + 272))
    {
      v10 = a5;
      v11 = nw_utf8_validator_parse((char *)(v8 + 270), (uint64_t)v6, a3, a5);
      a5 = v10;
      if ((v11 & 1) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v18 = (id)gLogObj;
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 275;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v19;
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s %{public}s received invalid utf-8 sequence", buf, 0x16u);
        }

        a3 = 0;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
        return a3;
      }
    }
  }
LABEL_8:
  v12 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  if (!a5)
  {
    if ((*(_BYTE *)(v12 + 232) & 8) != 0)
      return a3;
LABEL_17:
    v17 = 0;
    goto LABEL_67;
  }
  v13 = *(_DWORD *)(v12 + 232);
  if (v13 != 8)
  {
    if (v13 != 10)
    {
      if (v13 == 9)
      {
        v14 = a5;
        v15 = *(id *)(a1 + 32);
        if (v15)
        {
          if (gLogDatapath)
          {
            __nwlog_obj();
            v79 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
            {
              v80 = *(_QWORD *)(v12 + 160);
              v81 = *(_QWORD *)(v12 + 136);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_ws_process_ping_frame";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v12 + 275;
              *(_WORD *)&buf[22] = 1040;
              *(_DWORD *)v103 = v80;
              *(_WORD *)&v103[4] = 2096;
              *(_QWORD *)&v103[6] = v81;
              _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s got ping frame '%{network:data}.*P'", buf, 0x26u);
            }

          }
          v16 = nw_framer_copy_options(v15);
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL24nw_ws_process_ping_frameP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObject_block_invoke;
          *(_QWORD *)v103 = &unk_1E14AA188;
          *(_QWORD *)&v103[16] = v12 + 48;
          *(_QWORD *)&v103[8] = v15;
          nw_protocol_options_access_handle(v16, buf);

LABEL_15:
          v17 = 0;
          a5 = v14;
          goto LABEL_67;
        }
        __nwlog_obj();
        v71 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ws_process_ping_frame";
        v72 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(block) = 16;
        LOBYTE(v98) = 0;
        if (__nwlog_fault(v72, &block, &v98))
        {
          if (block == 17)
          {
            __nwlog_obj();
            v73 = objc_claimAutoreleasedReturnValue();
            v74 = block;
            if (os_log_type_enabled(v73, (os_log_type_t)block))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_ws_process_ping_frame";
              _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s called with null framer", buf, 0xCu);
            }
          }
          else if ((_BYTE)v98)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v73 = objc_claimAutoreleasedReturnValue();
            v83 = block;
            v84 = os_log_type_enabled(v73, (os_log_type_t)block);
            if (backtrace_string)
            {
              if (v84)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_ws_process_ping_frame";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = backtrace_string;
                _os_log_impl(&dword_182FBE000, v73, v83, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_142;
            }
            if (v84)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_ws_process_ping_frame";
              _os_log_impl(&dword_182FBE000, v73, v83, "%{public}s called with null framer, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v73 = objc_claimAutoreleasedReturnValue();
            v88 = block;
            if (os_log_type_enabled(v73, (os_log_type_t)block))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_ws_process_ping_frame";
              _os_log_impl(&dword_182FBE000, v73, v88, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_142:
        if (v72)
          free(v72);
        goto LABEL_15;
      }
      goto LABEL_17;
    }
    *(_DWORD *)is_complete = a5;
    if (*(_QWORD *)(v12 + 136))
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          v21 = *(_QWORD *)(v12 + 160);
          v22 = *(_QWORD *)(v12 + 136);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_ws_process_pong_frame";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 275;
          *(_WORD *)&buf[22] = 1040;
          *(_DWORD *)v103 = v21;
          *(_WORD *)&v103[4] = 2096;
          *(_QWORD *)&v103[6] = v22;
          v23 = "%{public}s %{public}s got pong frame '%{network:data}.*P'";
          v24 = v20;
          v25 = 38;
LABEL_131:
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, v23, buf, v25);
          goto LABEL_132;
        }
        goto LABEL_132;
      }
    }
    else if (gLogDatapath)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_ws_process_pong_frame";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 275;
        v23 = "%{public}s %{public}s got empty pong frame, looking for first empty pong handler";
        v24 = v20;
        v25 = 22;
        goto LABEL_131;
      }
LABEL_132:

    }
    v34 = (dispatch_data_t)MEMORY[0x1E0C80D00];
    v35 = MEMORY[0x1E0C80D00];
    v36 = *(const void **)(v12 + 136);
    if (v36)
    {
      v34 = dispatch_data_create(v36, *(_QWORD *)(v12 + 160), 0, 0);

    }
    v98 = 0;
    v99 = &v98;
    v100 = 0x2020000000;
    v101 = 0;
    v37 = *(unsigned __int8 **)(v12 + 104);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL24nw_ws_process_pong_frameP13nw_ws_state_t_block_invoke;
    *(_QWORD *)v103 = &unk_1E14AB5F0;
    v92 = v34;
    *(_QWORD *)&v103[8] = v92;
    *(_QWORD *)&v103[16] = &v98;
    if (!nw_array_apply(v37, (uint64_t)buf))
    {
      v38 = nw_array_create();
      v39 = 0;
      v40 = *(_QWORD **)(v12 + 104);
      if (v40)
      {
        while (1)
        {
          if (v39 >= (uint64_t)(v40[3] - v40[2]) >> 3)
            goto LABEL_64;
          nw_array_get_object_at_index((uint64_t)v40, v39);
          v41 = (void *)objc_claimAutoreleasedReturnValue();
          v42 = v41;
          if (v39 <= v99[3])
            break;
          nw_array_get_object_at_index(*(_QWORD *)(v12 + 104), v39);
          v43 = objc_claimAutoreleasedReturnValue();
          nw_array_append(v38, (void *)v43);
LABEL_60:

          ++v39;
          v40 = *(_QWORD **)(v12 + 104);
          if (!v40)
            goto LABEL_64;
        }
        v43 = (uint64_t)nw_ws_ping_request_copy_pong_handler(v41);
        v44 = nw_ws_ping_request_copy_client_queue(v42);
        v45 = v44;
        if (v43 && v44)
        {
          block = MEMORY[0x1E0C809B0];
          v111 = 3221225472;
          v112 = ___ZL24nw_ws_process_pong_frameP13nw_ws_state_t_block_invoke_2;
          v113 = &unk_1E14AC390;
          v114 = (id)v43;
          dispatch_async(v45, &block);
          v46 = v114;
        }
        else
        {
          if (!(v43 | (unint64_t)v44))
            goto LABEL_59;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v46 = (id)gLogObj;
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v106 = 136446466;
            v107 = "nw_ws_process_pong_frame";
            v108 = 2082;
            v109 = v12 + 275;
            _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_ERROR, "%{public}s %{public}s pong handler and client queue should both be nil", v106, 0x16u);
          }
        }

LABEL_59:
        goto LABEL_60;
      }
LABEL_64:
      *(_QWORD *)(v12 + 104) = v38;

    }
    _Block_object_dispose(&v98, 8);

    v17 = 0;
LABEL_66:
    a5 = *(_DWORD *)is_complete;
LABEL_67:
    v47 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v48 = a3;
    if ((*(_BYTE *)(v47 + 232) & 8) != 0)
    {
      v6 = *(const uint8_t **)(v47 + 136);
      v48 = *(_QWORD *)(v47 + 160);
    }
    v49 = *(NSObject **)(a1 + 32);
    if (v6 && v48)
    {
      v50 = a5;
      nw_framer_deliver_input(v49, v6, v48, *(nw_framer_message_t *)(a1 + 40), a5);
      block = 0;
      v111 = 0;
      LOBYTE(v112) = 0;
      if (v48 >= 0x10)
        v51 = 16;
      else
        v51 = v48;
      strncpy((char *)&block, (const char *)v6, v51);
      if (!gLogDatapath)
        goto LABEL_81;
      __nwlog_obj();
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        v53 = *(_QWORD *)(a1 + 40);
        v54 = "";
        v55 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 275;
        if (v50)
          v54 = ", complete";
        *(_DWORD *)buf = 136447490;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v55;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)v103 = &block;
        *(_WORD *)&v103[8] = 2048;
        *(_QWORD *)&v103[10] = v53;
        *(_WORD *)&v103[18] = 2048;
        *(_QWORD *)&v103[20] = v48;
        v104 = 2082;
        v105 = v54;
        _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input delivering input '%{public}s' %p (%zu bytes)%{public}s", buf, 0x3Eu);
      }
    }
    else
    {
      v56 = a5;
      nw_framer_deliver_input_no_copy(v49, 0, *(nw_framer_message_t *)(a1 + 40), a5);
      if (!gLogDatapath)
      {
LABEL_81:
        if (v17)
        {
          v57 = *(void **)(a1 + 32);
          async_block[0] = MEMORY[0x1E0C809B0];
          async_block[1] = 3221225472;
          async_block[2] = __nw_protocol_copy_ws_definition_block_invoke_23;
          async_block[3] = &unk_1E14AB500;
          v96 = *(_QWORD *)(a1 + 48);
          v97 = v17;
          v95 = v57;
          nw_framer_async(v95, async_block);

        }
        return a3;
      }
      __nwlog_obj();
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEBUG))
      {
        v66 = *(_QWORD *)(a1 + 40);
        v67 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v68 = v67 + 275;
        v69 = *(_QWORD *)(v67 + 160);
        v70 = "";
        if (v56)
          v70 = ", complete";
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_copy_ws_definition_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v68;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)v103 = v66;
        *(_WORD *)&v103[8] = 2048;
        *(_QWORD *)&v103[10] = v69;
        *(_WORD *)&v103[18] = 2082;
        *(_QWORD *)&v103[20] = v70;
        _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input delivering input %p (%zu bytes)%{public}s", buf, 0x34u);
      }
    }

    goto LABEL_81;
  }
  *(_DWORD *)is_complete = a5;
  v26 = *(void **)(a1 + 40);
  v27 = *(id *)(a1 + 32);
  v28 = v26;
  if (!v27)
  {
    __nwlog_obj();
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_ws_process_close_frame";
    v76 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(block) = 16;
    LOBYTE(v98) = 0;
    if (__nwlog_fault(v76, &block, &v98))
    {
      if (block == 17)
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v78 = block;
        if (os_log_type_enabled(v77, (os_log_type_t)block))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_process_close_frame";
          _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if ((_BYTE)v98)
      {
        v85 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v86 = block;
        v87 = os_log_type_enabled(v77, (os_log_type_t)block);
        if (v85)
        {
          if (v87)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_ws_process_close_frame";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v85;
            _os_log_impl(&dword_182FBE000, v77, v86, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v85);
          goto LABEL_147;
        }
        if (v87)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_process_close_frame";
          _os_log_impl(&dword_182FBE000, v77, v86, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v77 = objc_claimAutoreleasedReturnValue();
        v89 = block;
        if (os_log_type_enabled(v77, (os_log_type_t)block))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_ws_process_close_frame";
          _os_log_impl(&dword_182FBE000, v77, v89, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_147:
    if (v76)
      free(v76);
    goto LABEL_35;
  }
  v29 = *(unsigned __int16 **)(v12 + 136);
  if (!v29 || (v30 = *(_QWORD *)(v12 + 160), v30 < 2))
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v61 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_ws_process_close_frame";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v12 + 275;
        _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s got close frame with no close code", buf, 0x16u);
      }
      v32 = nw_ws_close_code_no_status_received;
      goto LABEL_118;
    }
    v32 = nw_ws_close_code_no_status_received;
LABEL_38:
    if ((*(_WORD *)(v12 + 273) & 0x20) == 0)
      nw_ws_write_control_frame(v12 + 48, v27, 8, v32, *(_QWORD *)(v12 + 136), *(_QWORD *)(v12 + 160));
    if (v32 == nw_ws_close_code_message_too_big)
      v17 = 40;
    else
      v17 = 57;
    goto LABEL_43;
  }
  v31 = *v29;
  v32 = __rev16(v31);
  v33 = v31 != 63235 && (unsigned __int16)(v32 - 1007) >= 5u;
  if (v33 && (unsigned __int16)(v32 - 3000) >= 0x7D0u && (v32 & 0xFFFC) != 0x3E8)
  {
LABEL_35:
    v17 = 22;
LABEL_43:

    goto LABEL_66;
  }
  v59 = v30 - 2;
  *(_QWORD *)(v12 + 160) = v30 - 2;
  if (v30 == 2)
  {
    v60 = 0;
    goto LABEL_89;
  }
  v60 = malloc_type_malloc(v30 - 2, 0xF2B69DE5uLL);
  if (v60)
  {
LABEL_86:
    memcpy(v60, (const void *)(*(_QWORD *)(v12 + 136) + 2), *(_QWORD *)(v12 + 160));
    v29 = *(unsigned __int16 **)(v12 + 136);
    if (!v29)
    {
LABEL_90:
      *(_QWORD *)(v12 + 136) = v60;
      nw_ws_metadata_set_close_code(v28, v32);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          v62 = *(_QWORD *)(v12 + 160);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_ws_process_close_frame";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v12 + 275;
          *(_WORD *)&buf[22] = 1040;
          *(_DWORD *)v103 = v62;
          *(_WORD *)&v103[4] = 2082;
          *(_QWORD *)&v103[6] = v60;
          *(_WORD *)&v103[14] = 1024;
          *(_DWORD *)&v103[16] = v32;
          _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s got close frame '%{public}.*s (%u)", buf, 0x2Cu);
        }
LABEL_118:

        goto LABEL_38;
      }
      goto LABEL_38;
    }
LABEL_89:
    free(v29);
    *(_QWORD *)(v12 + 136) = 0;
    goto LABEL_90;
  }
  __nwlog_obj();
  v90 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v90, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  *(_QWORD *)&buf[4] = "strict_malloc";
  *(_WORD *)&buf[12] = 2048;
  *(_QWORD *)&buf[14] = v59;
  v91 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v91);
  if (!result)
  {
    free(v91);
    v60 = 0;
    goto LABEL_86;
  }
  __break(1u);
  return result;
}

void sub_1833BA480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZL17nw_ws_parse_inputPU23objcproto12OS_nw_framer8NSObjectP13nw_ws_state_tmmPhU13block_pointerFmS4_mbbE_block_invoke(uint64_t a1, uint64_t a2, const char *a3)
{
  const char *v3;
  uint64_t v6;
  BOOL v7;
  const char *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  __int16 v13;
  _BOOL4 v14;
  void *v15;
  uint64_t v16;
  BOOL v17;
  void *v18;
  size_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  unsigned int v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  _QWORD *v36;
  uint64_t v37;
  NSObject *v38;
  uint64_t v39;
  const char *v40;
  const char *v41;
  NSObject *v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  uint64_t v46;
  const char *v47;
  const char *v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  _BOOL8 result;
  NSObject *v53;
  uint64_t v54;
  const char *v55;
  const char *v56;
  int v57;
  NSObject *v58;
  void *v59;
  NSObject *v60;
  void *v61;
  NSObject *v62;
  void *v63;
  NSObject *log;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  uint64_t v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  int v72;
  __int16 v73;
  _BOOL4 v74;
  uint64_t v75;

  v3 = a3;
  v75 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 48);
  if ((*(_WORD *)(v6 + 216) & 0x80) != 0)
  {
    if (!a3)
      goto LABEL_14;
  }
  else
  {
    if (*(_QWORD *)(v6 + 88))
      v7 = a3 == 0;
    else
      v7 = 1;
    if (v7)
      goto LABEL_14;
  }
  v8 = 0;
  do
  {
    v9 = *(_BYTE *)(*(_QWORD *)(a1 + 48)
                  + (((_BYTE)v8 + *(_DWORD *)(*(_QWORD *)(a1 + 48) + 120)) & 3)
                  + 204) ^ v8[a2];
    v8[a2] = v9;
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_QWORD *)(v10 + 88);
    if (v11)
      v8[v11 + *(_QWORD *)(v10 + 120)] = v9;
    ++v8;
  }
  while (a3 != v8);
  v6 = *(_QWORD *)(a1 + 48);
LABEL_14:
  v12 = &a3[*(_QWORD *)(v6 + 120)];
  *(_QWORD *)(v6 + 120) = v12;
  v13 = *(_WORD *)(v6 + 225);
  v14 = (v13 & 8) != 0 && v12 == *(const char **)(v6 + 112);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v53 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
    {
      v54 = *(_QWORD *)(a1 + 48);
      v55 = (const char *)(v54 + 227);
      v56 = *(const char **)(v54 + 120);
      if (!v54)
        v55 = "";
      v57 = (*(unsigned __int16 *)(v54 + 225) >> 11) & 1;
      *(_DWORD *)buf = 136447234;
      v66 = "nw_ws_parse_input_block_invoke";
      v67 = 2082;
      v68 = (uint64_t)v55;
      v69 = 2048;
      v70 = v56;
      v71 = 1024;
      v72 = v57;
      v73 = 1024;
      v74 = v14;
      _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s input input_itr=%zu, inflating = %d, is_final = %d", buf, 0x2Cu);
    }

    v6 = *(_QWORD *)(a1 + 48);
    v13 = *(_WORD *)(v6 + 225);
  }
  v15 = *(void **)(v6 + 196);
  if ((v13 & 0xA00) == 0)
  {
    if (v15)
      nw_ws_metadata_set_permessage_deflate(v15, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    return (BOOL)v3;
  }
  nw_ws_metadata_set_permessage_deflate(v15, 1u);
  *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) |= 0x800u;
  v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64);
  if (v16)
  {
LABEL_20:
    *(_DWORD *)(v16 + 8) = (_DWORD)v3;
    *(_QWORD *)v16 = a2;
    v17 = v14;
    while (1)
    {
      v30 = inflate(*(z_streamp *)(*(_QWORD *)(a1 + 48) + 64), 2);
      v31 = v30;
      if (v30 > 1)
      {
        if (v30 != -5)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v26 = (id)gLogObj;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
          {
            v49 = *(_QWORD *)(a1 + 48);
            v50 = zError(v31);
            v51 = (const char *)(v49 + 227);
            *(_DWORD *)buf = 136446722;
            if (!v49)
              v51 = "";
            v66 = "nw_ws_parse_input_block_invoke";
            v67 = 2082;
            v68 = (uint64_t)v51;
            v69 = 2080;
            v70 = v50;
            _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s inflate returned %s", buf, 0x20u);
          }
          goto LABEL_69;
        }
        if (gLogDatapath)
        {
          __nwlog_obj();
          v42 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
          {
            v43 = *(_QWORD *)(a1 + 48);
            v44 = (const char *)(v43 + 227);
            v7 = v43 == 0;
            v45 = "";
            if (!v7)
              v45 = v44;
            *(_DWORD *)buf = 136446722;
            v66 = "nw_ws_parse_input_block_invoke";
            v67 = 2082;
            v68 = (uint64_t)v45;
            v69 = 2048;
            v70 = v3;
            _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s finished processing %zu bytes of compressed data", buf, 0x20u);
          }

        }
        if (!v14)
          return (BOOL)v3;
        if (!v17)
        {
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0);
          *(_WORD *)(*(_QWORD *)(a1 + 48) + 225) &= ~0x800u;
          return (BOOL)v3;
        }
        if (gLogDatapath)
        {
          __nwlog_obj();
          v38 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            v39 = *(_QWORD *)(a1 + 48);
            v40 = (const char *)(v39 + 227);
            v7 = v39 == 0;
            v41 = "";
            if (!v7)
              v41 = v40;
            *(_DWORD *)buf = 136446466;
            v66 = "nw_ws_parse_input_block_invoke";
            v67 = 2082;
            v68 = (uint64_t)v41;
            _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s adding trailer to last compressed payload in message", buf, 0x16u);
          }

        }
        v17 = 0;
        v29 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64);
        *(_DWORD *)(v29 + 8) = 4;
        *(_QWORD *)v29 = &inflate_final_payload_trailer;
      }
      else
      {
        if (v30 == 1)
          inflateReset(*(z_streamp *)(*(_QWORD *)(a1 + 48) + 64));
        v32 = *(_QWORD **)(a1 + 48);
        v33 = v32[18];
        v34 = *(unsigned int *)(v32[8] + 32);
        v35 = (const char *)(v33 - v34);
        if (v33 != v34)
        {
          if (gLogDatapath)
          {
            __nwlog_obj();
            log = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              v46 = *(_QWORD *)(a1 + 48);
              v47 = (const char *)(v46 + 227);
              v7 = v46 == 0;
              v48 = "";
              if (!v7)
                v48 = v47;
              *(_DWORD *)buf = 136446722;
              v66 = "nw_ws_parse_input_block_invoke";
              v67 = 2082;
              v68 = (uint64_t)v48;
              v69 = 2048;
              v70 = v35;
              _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s delivering %zu bytes of uncompressed data", buf, 0x20u);
            }

            v32 = *(_QWORD **)(a1 + 48);
          }
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v32[10]);
          v36 = *(_QWORD **)(a1 + 48);
          v37 = v36[8];
          *(_DWORD *)(v37 + 32) = v36[18];
          *(_QWORD *)(v37 + 24) = v36[10];
        }
      }
      if (v31 == 1)
        return (BOOL)v3;
    }
  }
  v18 = malloc_type_malloc(0x70uLL, 0xF2B69DE5uLL);
  if (!v18)
  {
    __nwlog_obj();
    v58 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v58, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    v66 = "strict_malloc";
    v67 = 2048;
    v68 = 112;
    v59 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v59);
    if (result)
      goto LABEL_83;
    free(v59);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) = v18;
  v19 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 144);
  if (!v19)
  {
    __nwlog_obj();
    v60 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v60, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v66 = "strict_malloc";
    v61 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v61);
    if (result)
      goto LABEL_83;
    free(v61);
  }
  v20 = malloc_type_malloc(v19, 0xF2B69DE5uLL);
  if (v20)
  {
LABEL_27:
    *(_QWORD *)(*(_QWORD *)(a1 + 48) + 80) = v20;
    v21 = *(_QWORD **)(a1 + 48);
    v22 = v21[8];
    *(_DWORD *)(v22 + 32) = v21[18];
    *(_QWORD *)(v22 + 24) = v21[10];
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) + 64) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) + 72) = 0;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 64) + 80) = 0;
    v23 = *(_QWORD *)(a1 + 48);
    v24 = 220;
    if ((*(_WORD *)(v23 + 225) & 4) != 0)
      v24 = 221;
    v25 = inflateInit2_(*(z_streamp *)(v23 + 64), -*(unsigned __int8 *)(v23 + v24), "1.2.12", 112);
    if (!v25)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 64);
      goto LABEL_20;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v27 = *(_QWORD *)(a1 + 48);
      *(_DWORD *)buf = 136446722;
      v66 = "nw_ws_parse_input_block_invoke";
      if (v27)
        v28 = (const char *)(v27 + 227);
      else
        v28 = "";
      v67 = 2082;
      v68 = (uint64_t)v28;
      v69 = 1024;
      LODWORD(v70) = v25;
      _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %{public}s inflateInit2 returned %d", buf, 0x1Cu);
    }
LABEL_69:

    nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), 100);
    return 1;
  }
  __nwlog_obj();
  v62 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v62, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v66 = "strict_malloc";
  v67 = 2048;
  v68 = v19;
  v63 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v63);
  if (!result)
  {
    free(v63);
    goto LABEL_27;
  }
LABEL_83:
  __break(1u);
  return result;
}

void sub_1833BADD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL24nw_ws_process_ping_frameP13nw_ws_state_tPU23objcproto12OS_nw_framer8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  const char *v12;
  __int16 v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if ((*(_BYTE *)(a2 + 70) & 1) != 0)
  {
    nw_ws_write_control_frame(*(_QWORD *)(a1 + 40), *(void **)(a1 + 32), 10, 0x3EDu, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 88), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 112));
    if (gLogDatapath)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v5 = *(_QWORD *)(a1 + 40);
        v6 = (const char *)(v5 + 227);
        if (!v5)
          v6 = "";
        v7 = *(_QWORD *)(v5 + 112);
        v8 = *(_QWORD *)(v5 + 88);
        v9 = 136446978;
        v10 = "nw_ws_process_ping_frame_block_invoke";
        v11 = 2082;
        v12 = v6;
        v13 = 1040;
        v14 = v7;
        v15 = 2096;
        v16 = v8;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s replying to ping frame '%{network:data}.*P'", (uint8_t *)&v9, 0x26u);
      }

    }
  }
  return 1;
}

BOOL ___ZL24nw_ws_process_pong_frameP13nw_ws_state_t_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id *v5;
  id *v6;
  NSObject *v7;
  _BOOL4 is_equal;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5[1];
    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v10 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v21 = "nw_ws_ping_request_copy_contents";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_ws_ping_request_copy_contents";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null ping_request", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_ws_ping_request_copy_contents";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null ping_request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_ws_ping_request_copy_contents";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null ping_request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v12 = (id)gLogObj;
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_ws_ping_request_copy_contents";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null ping_request, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v11)
    free(v11);
  v7 = 0;
LABEL_3:

  is_equal = nw_dispatch_data_is_equal(v7, *(NSObject **)(a1 + 32));
  if (is_equal)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
  return !is_equal;
}

uint64_t ___ZL24nw_ws_process_pong_frameP13nw_ws_state_t_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void nw_ws_write_control_frame(uint64_t a1, void *a2, int a3, unsigned int a4, uint64_t a5, unint64_t a6)
{
  NSObject *v11;
  _BYTE *v12;
  uint64_t v13;
  NSObject *v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  NSObject *v22;
  void *v23;
  os_log_type_t v24;
  os_log_type_t type[15];
  char v26;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  unint64_t v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  if (!a1)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_ws_write_control_frame";
    v16 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v16, type, &v26))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_ws_write_control_frame";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null state", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v20 = type[0];
        v21 = os_log_type_enabled(v17, type[0]);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v28 = "nw_ws_write_control_frame";
            v29 = 2082;
            v30 = (unint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_ws_write_control_frame";
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null state, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v24 = type[0];
        if (os_log_type_enabled(v17, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_ws_write_control_frame";
          _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null state, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_27:
    if (v16)
      free(v16);
    goto LABEL_8;
  }
  *(_DWORD *)type = nw_ws_write_header(a1, v11, a3, a4, a6, 0, 1);
  if (!a5 || !a6)
    goto LABEL_8;
  v12 = malloc_type_malloc(a6, 0xF2B69DE5uLL);
  if (v12)
  {
LABEL_5:
    v13 = 0;
    do
    {
      v12[v13] = *(_BYTE *)((unint64_t)type | v13 & 3) ^ *(_BYTE *)(a5 + v13);
      ++v13;
    }
    while (a6 != v13);
    v14 = dispatch_data_create(v12, a6, 0, (dispatch_block_t)*MEMORY[0x1E0C80CE0]);
    nw_framer_write_output_data(v11, v14);

LABEL_8:
    return;
  }
  __nwlog_obj();
  v22 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v28 = "strict_malloc";
  v29 = 2048;
  v30 = a6;
  v23 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v23))
  {
    free(v23);
    goto LABEL_5;
  }
  __break(1u);
}

void sub_1833BB618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_protocol_copy_ws_definition_block_invoke_23(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (gLogDatapath)
  {
    __nwlog_obj();
    v2 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 275;
      v4 = *(_DWORD *)(a1 + 48);
      v5 = 136446722;
      v6 = "nw_protocol_copy_ws_definition_block_invoke";
      v7 = 2082;
      v8 = v3;
      v9 = 1024;
      v10 = v4;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s marking failed with error code %d", (uint8_t *)&v5, 0x1Cu);
    }

  }
  nw_framer_mark_failed_with_error(*(nw_framer_t *)(a1 + 32), *(_DWORD *)(a1 + 48));
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_18(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 4 || a2 == 0)
    return 0;
  else
    return 4;
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_16(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 2 || a2 == 0)
    return 0;
  else
    return 2;
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_14(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 8 || a2 == 0)
    return 0;
  else
    return 8;
}

uint64_t __nw_protocol_copy_ws_definition_block_invoke_11(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 < 2 || a2 == 0)
    return 0;
  else
    return 2;
}

uint64_t __Block_byref_object_copy__3855(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3856(uint64_t a1)
{

}

BOOL ___ZL61nw_protocol_instance_registrar_copy_tls_metadata_for_protocolP41NWConcrete_nw_protocol_instance_registrarP11nw_protocol_block_invoke(_QWORD *a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  _BOOL4 is_tls;
  NSObject *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  __int16 v15;
  NSObject *v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  is_tls = nw_protocol_metadata_is_tls(v5);
  if (is_tls)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
        v9 = a1[4];
        v10 = a1[6];
        v11 = 136446978;
        v12 = "nw_protocol_instance_registrar_copy_tls_metadata_for_protocol_block_invoke";
        v13 = 2112;
        v14 = v9;
        v15 = 2112;
        v16 = v5;
        v17 = 2048;
        v18 = v10;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %@ found TLS metadata %@ for protocol %p", (uint8_t *)&v11, 0x2Au);
      }

    }
    objc_storeStrong((id *)(*(_QWORD *)(a1[5] + 8) + 40), a3);
  }

  return !is_tls;
}

void sub_1833BB9F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL62nw_protocol_instance_registrar_copy_san_list_from_tls_metadataP41NWConcrete_nw_protocol_instance_registrarP11nw_protocolPU34objcproto23OS_nw_protocol_metadata8NSObjectt_block_invoke(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  char *v7;
  const char *v8;
  _BOOL8 host_with_numeric_port;
  NSObject *v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int *p_buf;
  uint64_t v25;
  SecCertificateRef cf;
  id obj;
  char v28;
  os_log_type_t type;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[128];
  int buf;
  const char *v36;
  __int16 v37;
  char *v38;
  __int16 v39;
  uint64_t v40;
  __int16 v41;
  uint64_t v42;
  __int16 v43;
  NSObject *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (gLogDatapath)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(char **)(a1 + 32);
      v23 = *(_QWORD *)(a1 + 40);
      buf = 136447234;
      v36 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
      v37 = 2112;
      v38 = v22;
      v39 = 2048;
      v40 = v21;
      v41 = 2112;
      v42 = v23;
      v43 = 2112;
      v44 = v3;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %@ protocol %p, tls metdata %@ found certificate: %@", (uint8_t *)&buf, 0x34u);
    }

  }
  cf = sec_certificate_copy_ref(v3);
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  obj = (id)SecCertificateCopyDNSNames();
  v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
  if (v4)
  {
    v5 = *(_QWORD *)v31;
    do
    {
      for (i = 0; i != v4; ++i)
      {
        if (*(_QWORD *)v31 != v5)
          objc_enumerationMutation(obj);
        v7 = *(char **)(*((_QWORD *)&v30 + 1) + 8 * i);
        if (gLogDatapath)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            buf = 136446466;
            v36 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
            v37 = 2112;
            v38 = v7;
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s \tgot dns name: %@", (uint8_t *)&buf, 0x16u);
          }

        }
        v8 = (const char *)objc_msgSend(v7, "UTF8String", p_buf, v25);
        if (v8)
        {
          host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v8, *(unsigned __int16 *)(a1 + 64));
          nw_array_append(*(_QWORD *)(a1 + 48), (void *)host_with_numeric_port);

          continue;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
        {
          buf = 136446466;
          v36 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
          v37 = 2112;
          v38 = v7;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s failed to get UTF8 string from name %@", (uint8_t *)&buf, 0x16u);
        }

        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        buf = 136446210;
        v36 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
        LODWORD(v25) = 12;
        p_buf = &buf;
        v12 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v28 = 0;
        if (!__nwlog_fault(v12, &type, &v28))
          goto LABEL_18;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = (id)gLogObj;
          v14 = type;
          if (os_log_type_enabled(v13, type))
          {
            buf = 136446210;
            v36 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s failed to get UTF8 string from DNS name", (uint8_t *)&buf, 0xCu);
          }
LABEL_17:

LABEL_18:
          if (!v12)
            continue;
LABEL_19:
          free(v12);
          continue;
        }
        if (!v28)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v13 = (id)gLogObj;
          v18 = type;
          if (os_log_type_enabled(v13, type))
          {
            buf = 136446210;
            v36 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
            _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s failed to get UTF8 string from DNS name, backtrace limit exceeded", (uint8_t *)&buf, 0xCu);
          }
          goto LABEL_17;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v16 = type;
        v17 = os_log_type_enabled(v13, type);
        if (!backtrace_string)
        {
          if (v17)
          {
            buf = 136446210;
            v36 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s failed to get UTF8 string from DNS name, no backtrace", (uint8_t *)&buf, 0xCu);
          }
          goto LABEL_17;
        }
        if (v17)
        {
          buf = 136446466;
          v36 = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata_block_invoke";
          v37 = 2082;
          v38 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s failed to get UTF8 string from DNS name, dumping backtrace:%{public}s", (uint8_t *)&buf, 0x16u);
        }

        free(backtrace_string);
        if (v12)
          goto LABEL_19;
      }
      v4 = objc_msgSend(obj, "countByEnumeratingWithState:objects:count:", &v30, v34, 16);
    }
    while (v4);
  }

  if (cf)
    CFRelease(cf);

}

void sub_1833BBFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

uint64_t ___ZL62nw_protocol_instance_registrar_copy_san_list_from_tls_metadataP41NWConcrete_nw_protocol_instance_registrarP11nw_protocolPU34objcproto23OS_nw_protocol_metadata8NSObjectt_block_invoke_70(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  _BOOL4 v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD v25[4];
  id v26;
  _BYTE *v27;
  char v28;
  os_log_type_t type;
  _BYTE buf[24];
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(id *)(a1 + 32);
  v6 = v4;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null array", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null array, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v12)
          goto LABEL_41;
        goto LABEL_40;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null array, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null array, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_38;
  }
  if (!v6)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v12, &type, &v28))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v28)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v13, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v20;
          _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
LABEL_39:
        if (!v12)
        {
LABEL_41:

          goto LABEL_4;
        }
LABEL_40:
        free(v12);
        goto LABEL_41;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_array_contains_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v31 = 0;
  v25[0] = MEMORY[0x1E0C809B0];
  v25[1] = 3221225472;
  v25[2] = ___ZL54nw_protocol_instance_registrar_array_contains_endpointPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS__block_invoke;
  v25[3] = &unk_1E14AB5F0;
  v8 = v6;
  v26 = v8;
  v27 = buf;
  nw_array_apply((unsigned __int8 *)v5, (uint64_t)v25);
  v9 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) == 0;

  _Block_object_dispose(buf, 8);
  if (v9)
LABEL_4:
    nw_array_append(*(_QWORD *)(a1 + 32), v7);

  return 1;
}

uint64_t __nw_protocol_instance_registrar_add_edges_for_instance_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  _BYTE *v13;
  char v14;
  id v15;
  _QWORD *v16;
  id v17;
  _BYTE *v18;
  _BOOL4 v19;
  _QWORD *v20;
  id v21;
  id v22;
  NSObject *v23;
  uint64_t v24;
  NWConcrete_nw_endpoint_edge *v25;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  void *v35;
  os_log_type_t v36;
  void *v37;
  os_log_type_t v38;
  void *v39;
  os_log_type_t v40;
  char *backtrace_string;
  os_log_type_t v42;
  _BOOL4 v43;
  char *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  _BOOL4 v52;
  void *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  os_log_type_t v57;
  _BOOL4 v58;
  void *v59;
  char *v60;
  NSObject *v61;
  os_log_type_t v62;
  NSObject *v63;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  char *v71;
  os_log_type_t v72;
  _BOOL4 v73;
  os_log_type_t v74;
  os_log_type_t v75;
  os_log_type_t v76;
  os_log_type_t v77;
  os_log_type_t v78;
  os_log_type_t v79;
  os_log_type_t v80;
  os_log_type_t v81;
  NSObject *log;
  char v83;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v86;
  __int16 v87;
  char *v88;
  __int16 v89;
  uint64_t v90;
  __int16 v91;
  uint64_t v92;
  __int16 v93;
  _BYTE *v94;
  __int16 v95;
  _BYTE *v96;
  __int16 v97;
  id v98;
  __int16 v99;
  id v100;
  uint64_t v101;

  v101 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(void **)(a1 + 40);
  v6 = *(void **)(a1 + 48);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = (char *)*(id *)(a1 + 32);
  v9 = v5;
  v10 = v4;
  v11 = v6;
  v12 = v11;
  if (!v8)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83))
      goto LABEL_153;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null registrar", buf, 0xCu);
      }
    }
    else if (v83)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      v43 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          v87 = 2082;
          v88 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null registrar, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_153:
        if (!v28)
          goto LABEL_26;
LABEL_154:
        free(v28);
        goto LABEL_26;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null registrar, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v74 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v74, "%{public}s called with null registrar, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_152:

    goto LABEL_153;
  }
  if (!v7)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83))
      goto LABEL_153;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null protocol", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v75 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v75, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    v44 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v45 = type;
    v46 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v45, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      v87 = 2082;
      v88 = v44;
      _os_log_impl(&dword_182FBE000, v29, v45, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_91;
  }
  if (!*(_QWORD *)(v7 + 16))
  {
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83))
      goto LABEL_153;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null protocol->identifier", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v76 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v76, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    v44 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v47 = type;
    v48 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v47, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      v87 = 2082;
      v88 = v44;
      _os_log_impl(&dword_182FBE000, v29, v47, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_91;
  }
  if (!v9)
  {
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83))
      goto LABEL_153;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v36, "%{public}s called with null to_endpoint", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v77 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v77, "%{public}s called with null to_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    v44 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v49 = type;
    v50 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v49, "%{public}s called with null to_endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      v87 = 2082;
      v88 = v44;
      _os_log_impl(&dword_182FBE000, v29, v49, "%{public}s called with null to_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_91;
  }
  if (!v10)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83))
      goto LABEL_153;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v38, "%{public}s called with null from_endpoint", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v78 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v78, "%{public}s called with null from_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    v44 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v51 = type;
    v52 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v51, "%{public}s called with null from_endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      v87 = 2082;
      v88 = v44;
      _os_log_impl(&dword_182FBE000, v29, v51, "%{public}s called with null from_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_91;
  }
  if (!v11)
  {
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (!__nwlog_fault(v28, &type, &v83))
      goto LABEL_153;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v40, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (!v83)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v79 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v79, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_152;
    }
    v44 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v57 = type;
    v58 = os_log_type_enabled(v29, type);
    if (!v44)
    {
      if (v58)
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        _os_log_impl(&dword_182FBE000, v29, v57, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_152;
    }
    if (v58)
    {
      *(_DWORD *)buf = 136446466;
      v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      v87 = 2082;
      v88 = v44;
      _os_log_impl(&dword_182FBE000, v29, v57, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_91:

    free(v44);
    if (!v28)
      goto LABEL_26;
    goto LABEL_154;
  }
  v13 = v9;
  v14 = v13[231];

  v15 = v13;
  if ((v14 & 4) != 0)
    goto LABEL_11;
  v16 = v12;
  v17 = *(id *)(v16[13] + 136);

  if (!v17)
  {
    __nwlog_obj();
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v54 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (__nwlog_fault(v54, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v56 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v83)
      {
        v68 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v69 = type;
        v70 = os_log_type_enabled(v55, type);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446466;
            v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            v87 = 2082;
            v88 = v68;
            _os_log_impl(&dword_182FBE000, v55, v69, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v68);
          goto LABEL_164;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v55, v69, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v80 = type;
        if (os_log_type_enabled(v55, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v55, v80, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_164:
    if (v54)
      free(v54);
    goto LABEL_25;
  }
  v15 = nw_context_copy_registered_endpoint_internal(v17, v13, 0);

  if (gLogDatapath)
  {
    __nwlog_obj();
    v63 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
    {
      v64 = *(_QWORD *)(v7 + 16);
      *(_DWORD *)buf = 136448002;
      v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      v87 = 2112;
      v88 = v8;
      v89 = 2048;
      v90 = v7;
      v91 = 2080;
      v92 = v64;
      v93 = 2112;
      v94 = v13;
      v95 = 2048;
      v96 = v13;
      v97 = 2112;
      v98 = v15;
      v99 = 2048;
      v100 = v15;
      _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s replacing unregistered endpoint %@ (%p) with endpoint %@ (%p)", buf, 0x52u);
    }

  }
LABEL_11:
  v18 = v10;
  v19 = (v18[231] & 4) == 0;

  if (v19)
  {
    v20 = v12;
    v21 = *(id *)(v20[13] + 136);

    if (v21)
    {
      v22 = nw_context_copy_registered_endpoint_internal(v21, v18, 0);

      if (gLogDatapath)
      {
        __nwlog_obj();
        log = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
        {
          v67 = *(_QWORD *)(v7 + 16);
          *(_DWORD *)buf = 136448002;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          v87 = 2112;
          v88 = v8;
          v89 = 2048;
          v90 = v7;
          v91 = 2080;
          v92 = v67;
          v93 = 2112;
          v94 = v18;
          v95 = 2048;
          v96 = v18;
          v97 = 2112;
          v98 = v22;
          v99 = 2048;
          v100 = v22;
          _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s replacing unregistered endpoint %@ (%p) with endpoint %@ (%p)", buf, 0x52u);
        }

      }
      goto LABEL_16;
    }
    __nwlog_obj();
    v59 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v60 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v83 = 0;
    if (__nwlog_fault(v60, &type, &v83))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v61 = objc_claimAutoreleasedReturnValue();
        v62 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v61, v62, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v83)
      {
        v71 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v61 = objc_claimAutoreleasedReturnValue();
        v72 = type;
        v73 = os_log_type_enabled(v61, type);
        if (v71)
        {
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            v87 = 2082;
            v88 = v71;
            _os_log_impl(&dword_182FBE000, v61, v72, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v71);
          goto LABEL_169;
        }
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v61, v72, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v61 = objc_claimAutoreleasedReturnValue();
        v81 = type;
        if (os_log_type_enabled(v61, type))
        {
          *(_DWORD *)buf = 136446210;
          v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v61, v81, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_169:
    if (v60)
      free(v60);
    goto LABEL_24;
  }
  v22 = v18;
LABEL_16:
  if (nw_endpoint_is_equal(v22, v15, 31))
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        v24 = *(_QWORD *)(v7 + 16);
        *(_DWORD *)buf = 136447490;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        v87 = 2112;
        v88 = v8;
        v89 = 2048;
        v90 = v7;
        v91 = 2080;
        v92 = v24;
        v93 = 2112;
        v94 = v22;
        v95 = 2112;
        v96 = v15;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s source and destination endpoints (%@ -> %@) are the same, skipping", buf, 0x3Eu);
      }

    }
  }
  else
  {
    v25 = nw_endpoint_edge_create(v15, *(__int128 **)(v7 + 16), 0);
    nw_endpoint_add_edge(v22, v25);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        v66 = *(_QWORD *)(v7 + 16);
        *(_DWORD *)buf = 136447490;
        v86 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        v87 = 2112;
        v88 = v8;
        v89 = 2048;
        v90 = v7;
        v91 = 2080;
        v92 = v66;
        v93 = 2112;
        v94 = v22;
        v95 = 2112;
        v96 = v15;
        _os_log_impl(&dword_182FBE000, v65, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s added edge from endpoint %@ to endpoint %@", buf, 0x3Eu);
      }

    }
  }
  v18 = v22;
LABEL_24:

  v13 = v15;
LABEL_25:

LABEL_26:
  return 1;
}

void sub_1833BD9E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;

  _Unwind_Resume(a1);
}

uint64_t ___ZL54nw_protocol_instance_registrar_array_contains_endpointPU22objcproto11OS_nw_array8NSObjectPU25objcproto14OS_nw_endpointS__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  int is_equal;

  is_equal = nw_endpoint_is_equal(*(void **)(a1 + 32), a3, 31);
  if (is_equal)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return is_equal ^ 1u;
}

void nw_protocol_instance_registrar_add_wildcard_edge_for_instance(void *a1, void *a2, uint64_t a3, void *a4)
{
  char *v7;
  id v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  NSObject *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t);
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  _BOOL4 v22;
  NSObject *v23;
  NSObject *v24;
  id v25;
  NSObject *v26;
  NSObject *v27;
  _BOOL4 v28;
  NSObject *v29;
  id v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  void *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  void *v40;
  os_log_type_t v41;
  void *v42;
  os_log_type_t v43;
  char *backtrace_string;
  os_log_type_t v45;
  _BOOL4 v46;
  char *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  os_log_type_t v50;
  _BOOL4 v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  void *v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  void *v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  void *v64;
  char *v65;
  NSObject *v66;
  os_log_type_t v67;
  char *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t v71;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  char *v76;
  _BOOL4 v77;
  os_log_type_t v78;
  os_log_type_t v79;
  os_log_type_t v80;
  char *v81;
  os_log_type_t v82;
  _BOOL4 v83;
  char *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  os_log_type_t v87;
  os_log_type_t v88;
  os_log_type_t v89;
  os_log_type_t v90;
  os_log_type_t v91;
  const char *log;
  NSObject *loga;
  void *v94;
  char *v95;
  id v96;
  id v97;
  char v98;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v101;
  __int16 v102;
  char *v103;
  __int16 v104;
  uint64_t v105;
  __int16 v106;
  uint64_t v107;
  __int16 v108;
  NSObject *v109;
  __int16 v110;
  NSObject *v111;
  __int16 v112;
  NSObject *v113;
  __int16 v114;
  NSObject *v115;
  uint64_t v116;

  v116 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v97 = a4;
  if (!v7)
  {
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    v37 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (!__nwlog_fault(v37, &type, &v98))
      goto LABEL_131;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null registrar", buf, 0xCu);
      }
    }
    else if (v98)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      v46 = os_log_type_enabled(v38, type);
      if (backtrace_string)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
          v102 = 2082;
          v103 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v38, v45, "%{public}s called with null registrar, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_131:
        if (!v37)
          goto LABEL_42;
LABEL_132:
        free(v37);
        goto LABEL_42;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_182FBE000, v38, v45, "%{public}s called with null registrar, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v78 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_182FBE000, v38, v78, "%{public}s called with null registrar, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_130:

    goto LABEL_131;
  }
  if (!v8)
  {
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    v37 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (!__nwlog_fault(v37, &type, &v98))
      goto LABEL_131;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (!v98)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v79 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_182FBE000, v38, v79, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_130;
    }
    v47 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v38 = objc_claimAutoreleasedReturnValue();
    v48 = type;
    v49 = os_log_type_enabled(v38, type);
    if (!v47)
    {
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_182FBE000, v38, v48, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (v49)
    {
      *(_DWORD *)buf = 136446466;
      v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      v102 = 2082;
      v103 = v47;
      _os_log_impl(&dword_182FBE000, v38, v48, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_72;
  }
  if (!*(_QWORD *)(a3 + 16))
  {
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    v37 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (!__nwlog_fault(v37, &type, &v98))
      goto LABEL_131;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_182FBE000, v38, v43, "%{public}s called with null protocol->identifier", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (!v98)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v80 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_182FBE000, v38, v80, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_130;
    }
    v47 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v38 = objc_claimAutoreleasedReturnValue();
    v50 = type;
    v51 = os_log_type_enabled(v38, type);
    if (!v47)
    {
      if (v51)
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
        _os_log_impl(&dword_182FBE000, v38, v50, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_130;
    }
    if (v51)
    {
      *(_DWORD *)buf = 136446466;
      v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      v102 = 2082;
      v103 = v47;
      _os_log_impl(&dword_182FBE000, v38, v50, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_72:

    free(v47);
    if (!v37)
      goto LABEL_42;
    goto LABEL_132;
  }
  v9 = *(_QWORD *)(a3 + 24);
  if (!v9)
    goto LABEL_24;
  v10 = *(void (**)(uint64_t))(v9 + 136);
  if (!v10)
    goto LABEL_24;
  v10(a3);
  v11 = objc_claimAutoreleasedReturnValue();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    v13 = *(_QWORD *)(a3 + 16);
    *(_DWORD *)buf = 136447234;
    v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    v102 = 2112;
    v103 = v7;
    v104 = 2048;
    v105 = a3;
    v106 = 2080;
    v107 = v13;
    v108 = 2112;
    v109 = v11;
    _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s has endpoint %@, adding edges", buf, 0x34u);
  }

  if (!v11)
  {
LABEL_24:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
    {
      v32 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)buf = 136446978;
      v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      v102 = 2112;
      v103 = v7;
      v104 = 2048;
      v105 = a3;
      v106 = 2080;
      v107 = v32;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s does not have endpoint, cannot add edges", buf, 0x2Au);
    }
    goto LABEL_41;
  }
  v14 = *(_QWORD *)(a3 + 24);
  if (!v14)
    goto LABEL_26;
  v15 = *(void (**)(uint64_t))(v14 + 112);
  if (!v15)
    goto LABEL_26;
  v15(a3);
  v16 = objc_claimAutoreleasedReturnValue();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v17 = (id)gLogObj;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v18 = *(_QWORD *)(a3 + 16);
    *(_DWORD *)buf = 136447234;
    v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
    v102 = 2112;
    v103 = v7;
    v104 = 2048;
    v105 = a3;
    v106 = 2080;
    v107 = v18;
    v108 = 2112;
    v109 = v16;
    _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s has parameters %@, adding edges", buf, 0x34u);
  }

  if (!v16)
  {
LABEL_26:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = (id)gLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v33 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)buf = 136446978;
      v101 = "nw_protocol_instance_registrar_add_wildcard_edge_for_instance";
      v102 = 2112;
      v103 = v7;
      v104 = 2048;
      v105 = a3;
      v106 = 2080;
      v107 = v33;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s does not have parameters, cannot add edges", buf, 0x2Au);
    }
    goto LABEL_40;
  }
  v95 = v7;
  v19 = v8;
  v96 = v97;
  v20 = v16;
  v94 = v19;
  if (!*(_QWORD *)(a3 + 16))
  {
    __nwlog_obj();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v53 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (__nwlog_fault(v53, &type, &v98))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)buf = 136446210;
          v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null protocol->identifier", buf, 0xCu);
        }
      }
      else if (v98)
      {
        v68 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v69 = type;
        v70 = os_log_type_enabled(v54, type);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446466;
            v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            v102 = 2082;
            v103 = v68;
            _os_log_impl(&dword_182FBE000, v54, v69, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v68);
          goto LABEL_152;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v54, v69, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v87 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)buf = 136446210;
          v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v54, v87, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_152:
    if (v53)
      free(v53);
    goto LABEL_39;
  }
  v21 = v19;
  v22 = (HIBYTE(v21[28].isa) & 4) == 0;

  v23 = v21;
  if (!v22)
    goto LABEL_19;
  v24 = v20;
  v25 = *((id *)v24[13].isa + 17);

  if (!v25)
  {
    __nwlog_obj();
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v65 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (__nwlog_fault(v65, &type, &v98))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v67 = type;
        if (os_log_type_enabled(v66, type))
        {
          *(_DWORD *)buf = 136446210;
          v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v66, v67, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v98)
      {
        v84 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v85 = type;
        v86 = os_log_type_enabled(v66, type);
        if (v84)
        {
          if (v86)
          {
            *(_DWORD *)buf = 136446466;
            v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            v102 = 2082;
            v103 = v84;
            _os_log_impl(&dword_182FBE000, v66, v85, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v84);
          goto LABEL_175;
        }
        if (v86)
        {
          *(_DWORD *)buf = 136446210;
          v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v66, v85, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v90 = type;
        if (os_log_type_enabled(v66, type))
        {
          *(_DWORD *)buf = 136446210;
          v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v66, v90, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_175:
    if (v65)
      free(v65);
    goto LABEL_38;
  }
  v23 = nw_context_copy_registered_endpoint_internal(v25, v21, 0);

  if (gLogDatapath)
  {
    __nwlog_obj();
    v72 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      v73 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)buf = 136448002;
      v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      v102 = 2112;
      v103 = v95;
      v104 = 2048;
      v105 = a3;
      v106 = 2080;
      v107 = v73;
      v108 = 2112;
      v109 = v21;
      v110 = 2048;
      v111 = v21;
      v112 = 2112;
      v113 = v23;
      v114 = 2048;
      v115 = v23;
      _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s replacing unregistered endpoint %@ (%p) with endpoint %@ (%p)", buf, 0x52u);
    }

  }
LABEL_19:
  v26 = v96;
  v27 = v26;
  if (!v26)
  {
    __nwlog_obj();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_endpoint_is_registered";
    log = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    v57 = (char *)log;
    if (!__nwlog_fault(log, &type, &v98))
      goto LABEL_158;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      v59 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v98)
    {
      v76 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      v91 = type;
      v77 = os_log_type_enabled(v58, type);
      if (v76)
      {
        if (v77)
        {
          *(_DWORD *)buf = 136446466;
          v101 = "nw_endpoint_is_registered";
          v102 = 2082;
          v103 = v76;
          _os_log_impl(&dword_182FBE000, v58, v91, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v76);
        goto LABEL_157;
      }
      if (v77)
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_182FBE000, v58, v91, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v58 = objc_claimAutoreleasedReturnValue();
      v88 = type;
      if (os_log_type_enabled(v58, type))
      {
        *(_DWORD *)buf = 136446210;
        v101 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_182FBE000, v58, v88, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_157:
    v57 = (char *)log;
LABEL_158:
    if (v57)
      free(v57);
    goto LABEL_21;
  }
  v28 = (HIBYTE(v26[28].isa) & 4) == 0;

  if (!v28)
  {
    v31 = v27;
    goto LABEL_29;
  }
LABEL_21:
  v29 = v20;
  v30 = *((id *)v29[13].isa + 17);

  if (!v30)
  {
    __nwlog_obj();
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
    v61 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v98 = 0;
    if (__nwlog_fault(v61, &type, &v98))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v62 = objc_claimAutoreleasedReturnValue();
        v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v98)
      {
        v81 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v62 = objc_claimAutoreleasedReturnValue();
        v82 = type;
        v83 = os_log_type_enabled(v62, type);
        if (v81)
        {
          if (v83)
          {
            *(_DWORD *)buf = 136446466;
            v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
            v102 = 2082;
            v103 = v81;
            _os_log_impl(&dword_182FBE000, v62, v82, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v81);
          goto LABEL_170;
        }
        if (v83)
        {
          *(_DWORD *)buf = 136446210;
          v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v62, v82, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v62 = objc_claimAutoreleasedReturnValue();
        v89 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
          _os_log_impl(&dword_182FBE000, v62, v89, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_170:
    if (v61)
      free(v61);
    goto LABEL_37;
  }
  v31 = nw_context_copy_registered_endpoint_internal(v30, v27, 0);

  if (gLogDatapath)
  {
    __nwlog_obj();
    loga = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(loga, OS_LOG_TYPE_DEBUG))
    {
      v71 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)buf = 136448002;
      v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      v102 = 2112;
      v103 = v95;
      v104 = 2048;
      v105 = a3;
      v106 = 2080;
      v107 = v71;
      v108 = 2112;
      v109 = v27;
      v110 = 2048;
      v111 = v27;
      v112 = 2112;
      v113 = v31;
      v114 = 2048;
      v115 = v31;
      _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s replacing unregistered endpoint %@ (%p) with endpoint %@ (%p)", buf, 0x52u);
    }

  }
LABEL_29:
  if (!nw_endpoint_is_equal(v31, v23, 31))
  {
    v34 = nw_endpoint_edge_create(v23, *(__int128 **)(a3 + 16), 1);
    nw_endpoint_add_edge(v31, v34);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        v75 = *(_QWORD *)(a3 + 16);
        *(_DWORD *)buf = 136447490;
        v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
        v102 = 2112;
        v103 = v95;
        v104 = 2048;
        v105 = a3;
        v106 = 2080;
        v107 = v75;
        v108 = 2112;
        v109 = v31;
        v110 = 2112;
        v111 = v23;
        _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s added edge from endpoint %@ to endpoint %@", buf, 0x3Eu);
      }

    }
    goto LABEL_35;
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      v35 = *(_QWORD *)(a3 + 16);
      *(_DWORD *)buf = 136447490;
      v101 = "nw_protocol_instance_registrar_add_edge_for_endpoint";
      v102 = 2112;
      v103 = v95;
      v104 = 2048;
      v105 = a3;
      v106 = 2080;
      v107 = v35;
      v108 = 2112;
      v109 = v31;
      v110 = 2112;
      v111 = v23;
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s source and destination endpoints (%@ -> %@) are the same, skipping", buf, 0x3Eu);
    }
LABEL_35:

  }
  v27 = v31;
LABEL_37:

  v21 = v23;
LABEL_38:

LABEL_39:
LABEL_40:

LABEL_41:
LABEL_42:

}

void sub_1833BF07C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_instance_registrar_find_quic_instance_by_id(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  id v5;
  char *identifier;
  os_unfair_lock_s *v7;
  void (**v8)(_QWORD);
  uint64_t v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  NSObject *v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  NSObject *v19;
  os_log_type_t v20;
  _QWORD aBlock[4];
  os_unfair_lock_s *v22;
  id v23;
  _BYTE *v24;
  char *v25;
  char v26;
  os_log_type_t type[4];
  const char *v28;
  __int16 v29;
  os_unfair_lock_s *v30;
  _BYTE buf[24];
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v4)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v3;
        *(_WORD *)&buf[22] = 2112;
        v32 = v4;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s %@ finding instance of quic to join for CID %@", buf, 0x20u);
      }

    }
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
    v5 = (id)nw_protocol_copy_quic_stream_definition::quic_definition;
    identifier = nw_protocol_definition_get_identifier(v5);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v32 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke;
    aBlock[3] = &unk_1E14A2B60;
    v7 = v3;
    v22 = v7;
    v25 = identifier;
    v23 = v4;
    v24 = buf;
    v8 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 2);
    v8[2](v8);
    os_unfair_lock_unlock(v3 + 2);

    v9 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
    if (!v9)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v19 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)type = 136446466;
          v28 = "nw_protocol_instance_registrar_find_quic_instance_by_id";
          v29 = 2112;
          v30 = v7;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %@ could not find protocol", (uint8_t *)type, 0x16u);
        }

        v9 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
      }
      else
      {
        v9 = 0;
      }
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_9;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
  v12 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v12, type, &v26))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null connection_id", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v17 = type[0];
      v18 = os_log_type_enabled(v13, type[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s called with null connection_id, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
        _os_log_impl(&dword_182FBE000, v13, v17, "%{public}s called with null connection_id, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = type[0];
      if (os_log_type_enabled(v13, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id";
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null connection_id, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_32:
  if (v12)
    free(v12);
  v9 = 0;
LABEL_9:

  return v9;
}

void sub_1833BF594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v23;

  _Block_object_dispose((const void *)(v23 - 128), 8);
  _Unwind_Resume(a1);
}

void __nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, _QWORD);
  id *v7;
  uint64_t *v8;
  NSObject *v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint32_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  _QWORD v32[4];
  id v33;
  _BYTE *v34;
  uint8_t v35[4];
  const char *v36;
  __int16 v37;
  uint64_t v38;
  __int16 v39;
  uint64_t v40;
  _BYTE buf[24];
  uint64_t v42;
  __int16 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 16);
  if (v1)
  {
    v3 = MEMORY[0x1E0C809B0];
    while (1)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          v22 = *(_QWORD *)(a1 + 32);
          v23 = v1[2];
          v24 = *(_QWORD *)(v23 + 16);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v22;
          *(_WORD *)&buf[22] = 2048;
          v42 = v23;
          v43 = 2080;
          v44 = v24;
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s %@ checking instance %p (%s) for joining by quic", buf, 0x2Au);
        }

      }
      v4 = v1[2];
      if (v4)
        break;
      if (gLogDatapath)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v27 = *(_QWORD *)(a1 + 32);
          v28 = v1[2];
          v29 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v27;
          *(_WORD *)&buf[22] = 2048;
          v42 = v28;
          v43 = 2080;
          v44 = v29;
          v14 = v10;
          v15 = "%{public}s %@ instance %p of %s not eligible, missing protocol handle";
LABEL_35:
          v16 = 42;
LABEL_36:
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, v15, buf, v16);
        }
LABEL_17:

      }
LABEL_4:
      v1 = (_QWORD *)*v1;
      if (!v1)
        return;
    }
    if (nw_protocols_are_equal(*(_QWORD **)(a1 + 56), *(_QWORD **)(v4 + 16)))
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5 && (v6 = *(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v5 + 224)) != 0)
      {
        v7 = (id *)v6(v4, 4, 0);
        v8 = (uint64_t *)v7;
        if (v7)
        {
          v9 = *v7;
          if (v9)
          {
            v10 = v9;
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2020000000;
            LOBYTE(v42) = 0;
            v32[0] = v3;
            v32[1] = 3221225472;
            v32[2] = __nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke_8;
            v32[3] = &unk_1E14AB5F0;
            v33 = *(id *)(a1 + 40);
            v34 = buf;
            nw_array_apply((unsigned __int8 *)v10, (uint64_t)v32);
            nw_array_remove_all_objects(*v8);
            if (*v8)
              os_release((void *)*v8);
            free(v8);
            if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v4;

              _Block_object_dispose(buf, 8);
              return;
            }
            if (gLogDatapath)
            {
              __nwlog_obj();
              v30 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
              {
                v31 = *(_QWORD *)(a1 + 32);
                *(_DWORD *)v35 = 136446722;
                v36 = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
                v37 = 2112;
                v38 = v31;
                v39 = 2048;
                v40 = v4;
                _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p did not match", v35, 0x20u);
              }

            }
            _Block_object_dispose(buf, 8);
          }
          else
          {
            if (!gLogDatapath)
              goto LABEL_4;
            __nwlog_obj();
            v10 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            {
              v19 = *(_QWORD *)(a1 + 32);
              v20 = *(_QWORD *)(a1 + 56);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v19;
              *(_WORD *)&buf[22] = 2048;
              v42 = v4;
              v43 = 2080;
              v44 = v20;
              v14 = v10;
              v15 = "%{public}s %@ instance %p of %s not eligible, missing required quic_info";
              goto LABEL_35;
            }
          }
        }
        else
        {
          if (!gLogDatapath)
            goto LABEL_4;
          __nwlog_obj();
          v10 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
          {
            v17 = *(_QWORD *)(a1 + 32);
            v18 = *(_QWORD *)(a1 + 56);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v17;
            *(_WORD *)&buf[22] = 2048;
            v42 = v4;
            v43 = 2080;
            v44 = v18;
            v14 = v10;
            v15 = "%{public}s %@ instance %p of %s not eligible, missing quic_info";
            goto LABEL_35;
          }
        }
      }
      else
      {
        if (!gLogDatapath)
          goto LABEL_4;
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v25 = *(_QWORD *)(a1 + 32);
          v26 = *(_QWORD *)(a1 + 56);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v25;
          *(_WORD *)&buf[22] = 2048;
          v42 = v4;
          v43 = 2080;
          v44 = v26;
          v14 = v10;
          v15 = "%{public}s %@ instance %p of %s not eligible, missing required callbacks";
          goto LABEL_35;
        }
      }
    }
    else
    {
      if (!gLogDatapath)
        goto LABEL_4;
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v11 = *(_QWORD *)(a1 + 32);
        v12 = *(_QWORD *)(v4 + 16);
        v13 = *(_QWORD *)(a1 + 56);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v11;
        *(_WORD *)&buf[22] = 2048;
        v42 = v4;
        v43 = 2080;
        v44 = v12;
        v45 = 2080;
        v46 = v13;
        v14 = v10;
        v15 = "%{public}s %@ instance %p (%s) not eligible for joining by %s, identifier doesn't match";
        v16 = 52;
        goto LABEL_36;
      }
    }
    goto LABEL_17;
  }
}

BOOL __nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke_8(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  _BOOL4 is_equal;
  NSObject *v7;
  uint64_t v8;
  int v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;
  __int16 v13;
  NSObject *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  is_equal = nw_dispatch_data_is_equal(*(dispatch_data_t *)(a1 + 32), v4);
  if (is_equal)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = *(_QWORD *)(a1 + 32);
        v9 = 136446722;
        v10 = "nw_protocol_instance_registrar_find_quic_instance_by_id_block_invoke";
        v11 = 2112;
        v12 = v8;
        v13 = 2112;
        v14 = v4;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Comparing CID %@ with %@", (uint8_t *)&v9, 0x20u);
      }

    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

  return !is_equal;
}

uint64_t __nw_protocol_instance_registrar_enumerate_instances_block_invoke(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD **)(*(_QWORD *)(result + 32) + 16);
  if (v1)
  {
    v2 = result;
    do
    {
      v3 = v1[2];
      if (v3)
      {
        result = nw_protocols_are_equal(*(_QWORD **)(v2 + 48), *(_QWORD **)(v3 + 16));
        if ((_DWORD)result)
          result = (*(uint64_t (**)(void))(*(_QWORD *)(v2 + 40) + 16))();
      }
      v1 = (_QWORD *)*v1;
    }
    while (v1);
  }
  return result;
}

uint64_t nw_protocol_instance_registrar_find_instance_to_join(void *a1, void *a2, uint64_t a3, int a4, char a5, char a6, void *a7, void *a8, void *a9, uint64_t a10)
{
  os_unfair_lock_s *v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  os_unfair_lock_s *v21;
  id v22;
  id v23;
  void (**v24)(_QWORD);
  uint64_t v25;
  NSObject *v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  id v32;
  void *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  void *v37;
  os_log_type_t v38;
  void *v39;
  os_log_type_t v40;
  id v41;
  NSObject *v42;
  char *backtrace_string;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  _BOOL4 v49;
  NSObject *v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  void *v55;
  void *v56;
  void *v57;
  _QWORD aBlock[4];
  os_unfair_lock_s *v59;
  id v60;
  id v61;
  id v62;
  os_log_type_t *v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  os_log_type_t type[8];
  os_log_type_t *v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint8_t buf[4];
  const char *v76;
  __int16 v77;
  os_unfair_lock_s *v78;
  __int16 v79;
  void *v80;
  __int16 v81;
  id v82;
  __int16 v83;
  id v84;
  __int16 v85;
  id v86;
  __int16 v87;
  int v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  v16 = a1;
  v17 = a7;
  v18 = a8;
  v19 = a9;
  v20 = v19;
  v56 = v17;
  v57 = v18;
  if (!a2)
  {
    v32 = v19;
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_protocol_instance_registrar_find_instance_to_join";
    v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (!__nwlog_fault(v34, type, &v74))
      goto LABEL_74;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v36 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (!v74)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v51 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_182FBE000, v35, v51, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v35 = objc_claimAutoreleasedReturnValue();
    v44 = type[0];
    v45 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_182FBE000, v35, v44, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      v77 = 2082;
      v78 = (os_unfair_lock_s *)backtrace_string;
      _os_log_impl(&dword_182FBE000, v35, v44, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_48;
  }
  if (!v18)
  {
    v32 = v19;
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_protocol_instance_registrar_find_instance_to_join";
    v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (!__nwlog_fault(v34, type, &v74))
      goto LABEL_74;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_182FBE000, v35, v38, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (!v74)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v52 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_182FBE000, v35, v52, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v35 = objc_claimAutoreleasedReturnValue();
    v46 = type[0];
    v47 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_182FBE000, v35, v46, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      v77 = 2082;
      v78 = (os_unfair_lock_s *)backtrace_string;
      _os_log_impl(&dword_182FBE000, v35, v46, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_48;
  }
  if (!v19)
  {
    v32 = 0;
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v76 = "nw_protocol_instance_registrar_find_instance_to_join";
    v34 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (!__nwlog_fault(v34, type, &v74))
      goto LABEL_74;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v40 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_182FBE000, v35, v40, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_73:

LABEL_74:
      v20 = v32;
      if (v34)
        free(v34);
      goto LABEL_11;
    }
    if (!v74)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v53 = type[0];
      if (os_log_type_enabled(v35, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_182FBE000, v35, v53, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_73;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v35 = objc_claimAutoreleasedReturnValue();
    v48 = type[0];
    v49 = os_log_type_enabled(v35, type[0]);
    if (!backtrace_string)
    {
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        _os_log_impl(&dword_182FBE000, v35, v48, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_73;
    }
    if (v49)
    {
      *(_DWORD *)buf = 136446466;
      v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      v77 = 2082;
      v78 = (os_unfair_lock_s *)backtrace_string;
      _os_log_impl(&dword_182FBE000, v35, v48, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_48:

    free(backtrace_string);
    goto LABEL_74;
  }
  if (a10)
  {
    v55 = v19;
    if (gLogDatapath)
    {
      v41 = v17;
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136447490;
        v76 = "nw_protocol_instance_registrar_find_instance_to_join";
        v77 = 2112;
        v78 = v16;
        v79 = 2080;
        v80 = a2;
        v81 = 2112;
        v82 = v57;
        v83 = 2112;
        v84 = v55;
        v85 = 1024;
        LODWORD(v86) = a4;
        _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %@ finding instance of %s to join for endpoint %@, parameters %@, (proxy: %u)", buf, 0x3Au);
      }

      v17 = v41;
    }
    *(_QWORD *)type = 0;
    v71 = type;
    v72 = 0x2020000000;
    v73 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_protocol_instance_registrar_find_instance_to_join_block_invoke;
    aBlock[3] = &unk_1E149AAE8;
    v21 = v16;
    v59 = v21;
    v64 = a2;
    v67 = a5;
    v68 = a6;
    v22 = v57;
    v60 = v22;
    v61 = v17;
    v23 = v55;
    v69 = a4;
    v65 = a3;
    v66 = a10;
    v62 = v23;
    v63 = type;
    v24 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v16 + 2);
    v24[2](v24);
    os_unfair_lock_unlock(v16 + 2);

    v25 = *((_QWORD *)v71 + 3);
    if (v25)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          v27 = (void *)*((_QWORD *)v71 + 3);
          *(_DWORD *)buf = 136447746;
          v76 = "nw_protocol_instance_registrar_find_instance_to_join";
          v77 = 2112;
          v78 = v21;
          v79 = 2048;
          v80 = v27;
          v81 = 2080;
          v82 = a2;
          v83 = 2112;
          v84 = v22;
          v85 = 2112;
          v86 = v23;
          v87 = 1024;
          v88 = a4;
          v28 = "%{public}s %@ returning instance %p of %s to join for endpoint %@, parameters %@, (proxy: %u)";
          v29 = v26;
          v30 = 68;
LABEL_54:
          _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, v28, buf, v30);
          goto LABEL_55;
        }
        goto LABEL_55;
      }
    }
    else
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v76 = "nw_protocol_instance_registrar_find_instance_to_join";
          v77 = 2112;
          v78 = v21;
          v79 = 2080;
          v80 = a2;
          v28 = "%{public}s %@ did not find instance of %s to join";
          v29 = v26;
          v30 = 32;
          goto LABEL_54;
        }
LABEL_55:

        v25 = *((_QWORD *)v71 + 3);
        goto LABEL_14;
      }
      v25 = 0;
    }
LABEL_14:

    _Block_object_dispose(type, 8);
    v20 = v55;
    goto LABEL_15;
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v50 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136447490;
      v76 = "nw_protocol_instance_registrar_find_instance_to_join";
      v77 = 2112;
      v78 = v16;
      v79 = 2080;
      v80 = a2;
      v81 = 2112;
      v82 = v18;
      v83 = 2112;
      v84 = v20;
      v85 = 1024;
      LODWORD(v86) = a4;
      _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_DEBUG, "%{public}s %@ no accept function for %s, cannot join for endpoint %@, parameters %@, (proxy: %u)", buf, 0x3Au);
    }

  }
LABEL_11:
  v25 = 0;
LABEL_15:

  return v25;
}

void sub_1833C076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  void *v28;
  void *v29;
  void *v30;
  void *v31;
  void *v32;

  _Block_object_dispose(&a28, 8);
  _Unwind_Resume(a1);
}

void __nw_protocol_instance_registrar_find_instance_to_join_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  NSObject *v7;
  void *v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  NSObject *v17;
  const char *v18;
  uint32_t v19;
  void *v20;
  id v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(void);
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint8_t buf[4];
  const char *v60;
  __int16 v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  __int16 v65;
  uint64_t v66;
  __int16 v67;
  NSObject *v68;
  __int16 v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v2 = (_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  do
  {
    v2 = (_QWORD *)*v2;
    if (!v2)
      break;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        v42 = *(_QWORD *)(a1 + 32);
        v43 = v2[2];
        v44 = *(_QWORD *)(v43 + 16);
        v45 = *(NSObject **)(a1 + 72);
        *(_DWORD *)buf = 136447234;
        v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
        v61 = 2112;
        v62 = v42;
        v63 = 2048;
        v64 = v43;
        v65 = 2080;
        v66 = v44;
        v67 = 2080;
        v68 = v45;
        _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %@ checking instance %p (%s) for joining by %s", buf, 0x34u);
      }

    }
    v4 = v2[2];
    if (v4)
    {
      if (nw_protocols_are_equal(*(_QWORD **)(a1 + 72), *(_QWORD **)(v4 + 16)))
      {
        v5 = *(_QWORD *)(v4 + 24);
        if (v5)
        {
          v6 = *(void (**)(uint64_t))(v5 + 136);
          if (v6)
          {
            if (*(_QWORD *)(v5 + 112))
            {
              v6(v4);
              v7 = objc_claimAutoreleasedReturnValue();
              (*(void (**)(uint64_t))(*(_QWORD *)(v4 + 24) + 112))(v4);
              v8 = (void *)objc_claimAutoreleasedReturnValue();
              if (*(_BYTE *)(a1 + 96))
                v9 = 1;
              else
                v9 = 3;
              if (*(_BYTE *)(a1 + 97))
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v10 = (id)gLogObj;
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
                {
                  v11 = *(_QWORD *)(a1 + 72);
                  v12 = *(_QWORD *)(a1 + 32);
                  v13 = *(_QWORD *)(a1 + 40);
                  *(_DWORD *)buf = 136447490;
                  v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                  v61 = 2112;
                  v62 = v12;
                  v63 = 2048;
                  v64 = v4;
                  v65 = 2080;
                  v66 = v11;
                  v67 = 2112;
                  v68 = v7;
                  v69 = 2112;
                  v70 = v13;
                  _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s skipping endpoint comparison (candidate %@, endpoint %@)", buf, 0x3Eu);
                }
LABEL_18:

LABEL_19:
                if ((nw_parameters_get_prohibit_joining_protocols(v8) & 1) != 0
                  || nw_parameters_get_prohibit_joining_protocols(*(void **)(a1 + 56)))
                {
                  if (!gLogDatapath)
                    goto LABEL_22;
                  __nwlog_obj();
                  v28 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                  {
                    v51 = *(_QWORD *)(a1 + 32);
                    v52 = *(_QWORD *)(a1 + 72);
                    *(_DWORD *)buf = 136446978;
                    v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                    v61 = 2112;
                    v62 = v51;
                    v63 = 2048;
                    v64 = v4;
                    v65 = 2080;
                    v66 = v52;
                    _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, parameters prohibit joining", buf, 0x2Au);
                  }
LABEL_78:

                  goto LABEL_22;
                }
                if (!nw_parameters_are_compatible(*(void **)(a1 + 56), *(_QWORD *)(a1 + 80), v8, v4, *(unsigned __int8 *)(a1 + 98)))
                {
                  if (gLogDatapath)
                  {
                    __nwlog_obj();
                    v28 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                    {
                      v32 = *(_QWORD *)(a1 + 32);
                      v33 = *(_QWORD *)(a1 + 72);
                      *(_DWORD *)buf = 136446978;
                      v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      v61 = 2112;
                      v62 = v32;
                      v63 = 2048;
                      v64 = v4;
                      v65 = 2080;
                      v66 = v33;
                      _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, parameters are not compatible", buf, 0x2Au);
                    }
                    goto LABEL_78;
                  }
                  goto LABEL_22;
                }
                if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(a1 + 88))(v4, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 56)) & 1) == 0)
                {
                  if (gLogDatapath)
                  {
                    __nwlog_obj();
                    v28 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                    {
                      v35 = *(_QWORD *)(a1 + 32);
                      v36 = *(_QWORD *)(a1 + 72);
                      *(_DWORD *)buf = 136446978;
                      v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      v61 = 2112;
                      v62 = v35;
                      v63 = 2048;
                      v64 = v4;
                      v65 = 2080;
                      v66 = v36;
                      _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, new input handler rejected", buf, 0x2Au);
                    }
                    goto LABEL_78;
                  }
                  goto LABEL_22;
                }
                *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v4;
                v3 = 2;
              }
              else
              {
                if ((nw_endpoint_is_equal(v7, *(void **)(a1 + 40), v9) & 1) == 0)
                {
                  if (nw_endpoint_get_type(*(nw_endpoint_t *)(a1 + 40)) == nw_endpoint_type_address)
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v28 = (id)gLogObj;
                    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                    {
                      v29 = *(_QWORD *)(a1 + 72);
                      v30 = *(_QWORD *)(a1 + 32);
                      v31 = *(_QWORD *)(a1 + 40);
                      *(_DWORD *)buf = 136447490;
                      v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      v61 = 2112;
                      v62 = v30;
                      v63 = 2048;
                      v64 = v4;
                      v65 = 2080;
                      v66 = v29;
                      v67 = 2112;
                      v68 = v7;
                      v69 = 2112;
                      v70 = v31;
                      _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, endpoints (candidate %@, endpoint %@) do not match", buf, 0x3Eu);
                    }
                    goto LABEL_78;
                  }
                  v34 = nw_endpoint_copy_parent_endpoint(v7);
                  if (!nw_endpoint_is_equal(v34, *(void **)(a1 + 40), v9))
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v37 = (id)gLogObj;
                    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
                    {
                      v38 = *(_QWORD *)(a1 + 72);
                      v39 = *(_QWORD *)(a1 + 32);
                      v40 = *(_QWORD *)(a1 + 40);
                      *(_DWORD *)buf = 136447490;
                      v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      v61 = 2112;
                      v62 = v39;
                      v63 = 2048;
                      v64 = v4;
                      v65 = 2080;
                      v66 = v38;
                      v67 = 2112;
                      v68 = v34;
                      v69 = 2112;
                      v70 = v40;
                      _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, endpoints (candidate parent %@, endpoint %@) do not match", buf, 0x3Eu);
                    }

                    goto LABEL_22;
                  }

                }
                if ((nw_endpoint_is_equal(*(void **)(a1 + 40), *(void **)(a1 + 48), 0) & 1) != 0)
                  goto LABEL_19;
                v20 = *(void **)(a1 + 48);
                if (!v20)
                  goto LABEL_19;
                v21 = v20;
                v22 = objc_msgSend(v21, "type");

                if (v22 != 1)
                  goto LABEL_19;
                v23 = v4;
                do
                {
                  v24 = v23;
                  v23 = *(_QWORD *)(v23 + 32);
                  if (!v23)
                    break;
                  v25 = *(_QWORD *)(v23 + 24);
                  if (!v25)
                    break;
                }
                while (*(_QWORD *)(v25 + 136));
                v26 = *(_QWORD *)(v24 + 24);
                if (v26 && (v27 = *(void (**)(void))(v26 + 136)) != 0)
                {
                  v27();
                  v10 = objc_claimAutoreleasedReturnValue();
                  if ((nw_endpoint_is_equal(v10, *(void **)(a1 + 48), 0) & 1) != 0)
                    goto LABEL_18;
                  if (gLogDatapath)
                  {
                    __nwlog_obj();
                    v55 = objc_claimAutoreleasedReturnValue();
                    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
                    {
                      v56 = *(_QWORD *)(a1 + 32);
                      v57 = *(_QWORD *)(a1 + 72);
                      v58 = *(_QWORD *)(a1 + 48);
                      *(_DWORD *)buf = 136447490;
                      v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                      v61 = 2112;
                      v62 = v56;
                      v63 = 2048;
                      v64 = v4;
                      v65 = 2080;
                      v66 = v57;
                      v67 = 2112;
                      v68 = v10;
                      v69 = 2112;
                      v70 = v58;
                      _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, transport endpoints (candidate %@, endpoint %@) do not match", buf, 0x3Eu);
                    }

                  }
                }
                else if (gLogDatapath)
                {
                  __nwlog_obj();
                  v28 = objc_claimAutoreleasedReturnValue();
                  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
                  {
                    v53 = *(_QWORD *)(a1 + 32);
                    v54 = *(_QWORD *)(a1 + 72);
                    *(_DWORD *)buf = 136446978;
                    v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
                    v61 = 2112;
                    v62 = v53;
                    v63 = 2048;
                    v64 = v4;
                    v65 = 2080;
                    v66 = v54;
                    _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s not eligible, transport protocol does not support get endpoint", buf, 0x2Au);
                  }
                  goto LABEL_78;
                }
LABEL_22:
                v3 = 4;
              }

LABEL_24:
              continue;
            }
          }
        }
        if (gLogDatapath)
        {
          __nwlog_obj();
          v7 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            v46 = *(_QWORD *)(a1 + 32);
            v47 = *(_QWORD *)(a1 + 72);
            *(_DWORD *)buf = 136446978;
            v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
            v61 = 2112;
            v62 = v46;
            v63 = 2048;
            v64 = v4;
            v65 = 2080;
            v66 = v47;
            v17 = v7;
            v18 = "%{public}s %@ instance %p of %s not eligible, missing required callbacks";
            goto LABEL_69;
          }
LABEL_71:
          v3 = 4;
          goto LABEL_24;
        }
      }
      else if (gLogDatapath)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          goto LABEL_71;
        v14 = *(_QWORD *)(a1 + 32);
        v15 = *(_QWORD *)(v4 + 16);
        v16 = *(NSObject **)(a1 + 72);
        *(_DWORD *)buf = 136447234;
        v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
        v61 = 2112;
        v62 = v14;
        v63 = 2048;
        v64 = v4;
        v65 = 2080;
        v66 = v15;
        v67 = 2080;
        v68 = v16;
        v17 = v7;
        v18 = "%{public}s %@ instance %p (%s) not eligible for joining by %s, identifier doesn't match";
        v19 = 52;
LABEL_70:
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, v18, buf, v19);
        goto LABEL_71;
      }
    }
    else if (gLogDatapath)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        goto LABEL_71;
      v48 = *(_QWORD *)(a1 + 32);
      v49 = v2[2];
      v50 = *(_QWORD *)(a1 + 72);
      *(_DWORD *)buf = 136446978;
      v60 = "nw_protocol_instance_registrar_find_instance_to_join_block_invoke";
      v61 = 2112;
      v62 = v48;
      v63 = 2048;
      v64 = v49;
      v65 = 2080;
      v66 = v50;
      v17 = v7;
      v18 = "%{public}s %@ instance %p of %s not eligible, missing protocol handle";
LABEL_69:
      v19 = 42;
      goto LABEL_70;
    }
    v3 = 4;
  }
  while (v3 == 4);
}

void sub_1833C1118(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t ___ZL70nw_protocol_instance_registrar_search_edges_for_instance_to_join_innerPK22nw_protocol_identifiermPU25objcproto14OS_nw_endpoint8NSObjectS4_S4_PU27objcproto16OS_nw_parametersS2_bb_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  void *v5;
  int v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t accept_function_for_identifier;
  uint64_t v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  NSObject *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  void *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (v4)
  {
    v6 = *((_BYTE *)v4 + 64) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v28 = "nw_endpoint_edge_is_wildcard";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v14, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_endpoint_edge_is_wildcard";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null edge", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "nw_endpoint_edge_is_wildcard";
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_33;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_endpoint_edge_is_wildcard";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null edge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_endpoint_edge_is_wildcard";
        _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_33:
  if (v14)
    free(v14);
  v6 = 0;
LABEL_3:

  if (*(unsigned __int8 *)(a1 + 80) != v6)
  {
LABEL_12:
    v11 = 1;
    goto LABEL_13;
  }
  nw_endpoint_edge_get_endpoint(v5);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (!v7)
  {
LABEL_11:

    goto LABEL_12;
  }
  v9 = nw_endpoint_copy_registrar_for_identifier(v7, *(__int128 **)(a1 + 64), 0);
  if (v9)
  {
    accept_function_for_identifier = nw_protocol_registrar_get_accept_function_for_identifier(*(_QWORD **)(a1 + 64));
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = nw_protocol_instance_registrar_find_instance_to_join(v9, *(void **)(a1 + 64), *(_QWORD *)(a1 + 72), *(unsigned __int8 *)(a1 + 81), 1, *(_BYTE *)(a1 + 80), *(void **)(a1 + 32), *(void **)(a1 + 40), *(void **)(a1 + 48), accept_function_for_identifier);
  }
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {

    goto LABEL_11;
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(char **)(a1 + 40);
      v22 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
      v23 = *(_QWORD *)(v22 + 16);
      *(_DWORD *)buf = 136447234;
      v28 = "nw_protocol_instance_registrar_search_edges_for_instance_to_join_inner_block_invoke";
      v29 = 2112;
      v30 = v21;
      v31 = 2080;
      v32 = v23;
      v33 = 2048;
      v34 = v22;
      v35 = 2112;
      v36 = v8;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s destination %@ found protocol to join %s (%p) in endpoint %@", buf, 0x34u);
    }

  }
  v11 = 0;
LABEL_13:

  return v11;
}

void sub_1833C1548(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __nw_protocol_instance_registrar_copy_shared_connection_state_block_invoke(uint64_t a1)
{
  _QWORD *i;
  void *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  void *v7;
  char __str[16];
  _WORD v9[13];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  for (i = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 16); i; i = (_QWORD *)*i)
  {
    if (i[2] == *(_QWORD *)(a1 + 64))
    {
      if (i[3]
        || *(_BYTE *)(a1 + 72) && (v6 = nw_dictionary_create(), v7 = (void *)i[3], i[3] = v6, v7, i[3]))
      {
        *(_OWORD *)__str = 0u;
        memset(v9, 0, sizeof(v9));
        snprintf(__str, 0x2AuLL, "%p%p", *(const void **)(a1 + 40), *(const void **)(a1 + 48));
        v3 = nw_dictionary_copy_value(i[3], (uint64_t)__str);
        v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        v5 = *(void **)(v4 + 40);
        *(_QWORD *)(v4 + 40) = v3;

      }
    }
  }
}

BOOL nw_framer_parse_input(nw_framer_t framer, size_t minimum_incomplete_length, size_t maximum_length, uint8_t *temp_buffer, nw_framer_parse_completion_t parse)
{
  nw_framer_t v9;
  nw_framer_parse_completion_t v10;
  char v11;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  NSObject *v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = framer;
  v10 = parse;
  if (v9)
  {
    nw_context_assert_queue(v9[46].isa);
    if (v9[63].isa)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_framer_parse_input";
          v26 = 2080;
          v27 = (char *)&v9[76].isa + 1;
          _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %s Cannot start a new parse with an outstanding parse", buf, 0x16u);
        }

      }
      (*((void (**)(nw_framer_parse_completion_t, _QWORD, _QWORD, _QWORD))v10 + 2))(v10, 0, 0, 0);
      v11 = 0;
    }
    else
    {
      v11 = nw_framer_parse_array(v9, &v9[64].isa, 1, (BYTE6(v9[75].isa) & 2) != 0, minimum_incomplete_length, maximum_length, (uint64_t)temp_buffer, v10);
    }
    goto LABEL_6;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v25 = "nw_framer_parse_input";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v14, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_framer_parse_input";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_framer_parse_input";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v19, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_framer_parse_input";
        _os_log_impl(&dword_182FBE000, v15, v19, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_framer_parse_input";
        _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v14)
    free(v14);
  v11 = 0;
LABEL_6:

  return v11;
}

void sub_1833C1D94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_parse_array(void *a1, _QWORD *a2, char a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  char *v15;
  id v16;
  void (**v17)(_QWORD, _QWORD, _QWORD, _QWORD);
  unsigned int v18;
  uint64_t v19;
  BOOL v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  id v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  void *v30;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  NSObject *v37;
  NSObject *v38;
  uint64_t v39;
  _QWORD v40[2];
  BOOL (*v41)(uint64_t, void *);
  void *v42;
  char *v43;
  _BYTE *v44;
  _QWORD *v45;
  char v46;
  _QWORD v47[2];
  BOOL (*v48)(uint64_t, void *);
  void *v49;
  char *v50;
  id v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  _BYTE *v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  char v62;
  _QWORD v63[3];
  char v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  _BYTE v77[24];
  uint64_t v78;
  _BYTE buf[24];
  uint64_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v15 = a1;
  v16 = a8;
  v17 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v16;
  v18 = 0;
  v19 = *a2;
  while (v19)
  {
    v23 = *(_DWORD *)(v19 + 52);
    if (v23)
      v23 -= *(_DWORD *)(v19 + 56) + *(_DWORD *)(v19 + 60);
    v19 = *(_QWORD *)(v19 + 32);
    v20 = __CFADD__(v18, v23);
    v21 = v18 + v23;
    v18 += v23;
    if (v20)
      v22 = -1;
    else
      v22 = v21;
    if (v22 >= a5)
      goto LABEL_12;
  }
  if (v18 >= a5)
  {
LABEL_12:
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    LOBYTE(v80) = 0;
    v73 = 0;
    v74 = &v73;
    v75 = 0x2020000000;
    v76 = 0;
    v69 = 0;
    v70 = &v69;
    v71 = 0x2020000000;
    v72 = a7;
    v65 = 0;
    v66 = &v65;
    v67 = 0x2020000000;
    v68 = 0;
    v63[0] = 0;
    v63[1] = v63;
    v63[2] = 0x2020000000;
    v64 = 0;
    v47[0] = MEMORY[0x1E0C809B0];
    v47[1] = 3221225472;
    v48 = ___ZL21nw_framer_parse_arrayP20NWConcrete_nw_framerP16nw_frame_array_sbbmmPhU13block_pointerFmS3_mbE_block_invoke;
    v49 = &unk_1E149AC00;
    v61 = a3;
    v58 = a6;
    v59 = a5;
    v52 = &v65;
    v53 = &v69;
    v57 = a2;
    v54 = &v73;
    v62 = a4;
    v25 = v16;
    v51 = v25;
    v26 = v15;
    v50 = v26;
    v55 = buf;
    v56 = v63;
    v60 = a7;
    v27 = *a2;
    do
    {
      if (!v27)
        break;
      v28 = *(_QWORD *)(v27 + 32);
      v29 = ((uint64_t (*)(_QWORD *))v48)(v47);
      v27 = v28;
    }
    while ((v29 & 1) != 0);
    if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24) && v66[3])
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v38 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
        {
          v39 = v66[3];
          *(_DWORD *)v77 = 136446722;
          *(_QWORD *)&v77[4] = "nw_framer_parse_array";
          *(_WORD *)&v77[12] = 2080;
          *(_QWORD *)&v77[14] = v26 + 609;
          *(_WORD *)&v77[22] = 2048;
          v78 = v39;
          _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s %s Reconstructed buffer of %zu bytes", v77, 0x20u);
        }

      }
      v32 = (*((uint64_t (**)(id, uint64_t))v25 + 2))(v25, v70[3]);
      if (v32)
      {
        v33 = v66[3];
        if (v32 < v33)
          LODWORD(v33) = v32;
        *(_QWORD *)v77 = 0;
        *(_QWORD *)&v77[8] = v77;
        *(_QWORD *)&v77[16] = 0x2020000000;
        LODWORD(v78) = v33;
        v40[0] = MEMORY[0x1E0C809B0];
        v40[1] = 3221225472;
        v41 = ___ZL21nw_framer_parse_arrayP20NWConcrete_nw_framerP16nw_frame_array_sbbmmPhU13block_pointerFmS3_mbE_block_invoke_132;
        v42 = &unk_1E149AC28;
        v44 = v77;
        v46 = a3;
        v43 = v26;
        v45 = a2;
        v34 = *a2;
        do
        {
          if (!v34)
            break;
          v35 = *(_QWORD *)(v34 + 32);
          v36 = ((uint64_t (*)(_QWORD *))v41)(v40);
          v34 = v35;
        }
        while ((v36 & 1) != 0);

        _Block_object_dispose(v77, 8);
      }
    }
    v30 = (void *)v74[3];
    if (v30)
    {
      free(v30);
      v74[3] = 0;
    }

    _Block_object_dispose(v63, 8);
    _Block_object_dispose(&v65, 8);
    _Block_object_dispose(&v69, 8);
    _Block_object_dispose(&v73, 8);
    _Block_object_dispose(buf, 8);
    v24 = 1;
    goto LABEL_19;
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v37 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_framer_parse_array";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v15 + 609;
      *(_WORD *)&buf[22] = 2048;
      v80 = a5;
      _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %s Not enough bytes to parse %zu", buf, 0x20u);
    }

  }
  v17[2](v17, 0, 0, 0);
  v24 = 0;
LABEL_19:

  return v24;
}

void sub_1833C21F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  void *v41;
  void *v42;
  uint64_t v43;

  _Block_object_dispose(&a33, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a41, 8);
  _Block_object_dispose((const void *)(v43 - 224), 8);
  _Block_object_dispose((const void *)(v43 - 160), 8);

  _Unwind_Resume(a1);
}

BOOL ___ZL21nw_framer_parse_arrayP20NWConcrete_nw_framerP16nw_frame_array_sbbmmPhU13block_pointerFmS3_mbE_block_invoke(uint64_t a1, void *a2)
{
  _DWORD *v3;
  NSObject *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  void *v10;
  size_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  void *v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD *v39;
  _BOOL8 result;
  NSObject *v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  uint64_t v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  void *v62;
  NSObject *v63;
  void *v64;
  NSObject *v65;
  void *v66;
  NSObject *v67;
  void *v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  size_t __n;
  uint8_t buf[4];
  const char *v75;
  __int16 v76;
  size_t v77;
  __int16 v78;
  uint64_t v79;
  __int16 v80;
  size_t v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (!nw_frame_uses_external_data((uint64_t)v3))
  {
    HIDWORD(__n) = 0;
    v12 = (const void *)nw_frame_unclaimed_bytes((uint64_t)v3, (_DWORD *)&__n + 1);
    v13 = HIDWORD(__n);
    if (HIDWORD(__n))
    {
      v14 = v12;
      v15 = *(_QWORD *)(a1 + 48);
      v16 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 24);
      if (*(_QWORD *)(a1 + 96) - v16 >= (unint64_t)HIDWORD(__n))
        v17 = HIDWORD(__n);
      else
        v17 = *(_QWORD *)(a1 + 96) - v16;
      if (!v16 && v17 >= *(_QWORD *)(a1 + 104))
      {
        if (*(_QWORD *)(a1 + 112))
          memcpy(*(void **)(a1 + 112), v12, v17);
        v30 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        if (v30)
        {
          if (v30 >= v17)
            v32 = v17;
          else
            v32 = v30;
          nw_frame_claim((uint64_t)v3, v31, v32, 0);
        }
        if (*(_BYTE *)(a1 + 120) && !nw_frame_unclaimed_length(v3))
        {
          v33 = *((_QWORD *)v3 + 4);
          v34 = (_QWORD *)*((_QWORD *)v3 + 5);
          if (v33)
          {
            *(_QWORD *)(v33 + 40) = v34;
            v34 = (_QWORD *)*((_QWORD *)v3 + 5);
          }
          else
          {
            *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) = v34;
          }
          *v34 = v33;
          *((_QWORD *)v3 + 4) = 0;
          *((_QWORD *)v3 + 5) = 0;
          nw_frame_finalize((uint64_t)v3);
        }
        v23 = 0;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
        goto LABEL_91;
      }
      if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
      {
        v18 = *(_QWORD *)(a1 + 104);
        if (!v18)
        {
          __nwlog_obj();
          v63 = objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          v75 = "strict_malloc";
          v64 = (void *)_os_log_send_and_compose_impl();

          result = __nwlog_abort((uint64_t)v64);
          if (result)
            goto LABEL_128;
          free(v64);
        }
        v19 = malloc_type_malloc(v18, 0xF2B69DE5uLL);
        if (!v19)
        {
          __nwlog_obj();
          v67 = objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          v75 = "strict_malloc";
          v76 = 2048;
          v77 = v18;
          v68 = (void *)_os_log_send_and_compose_impl();

          result = __nwlog_abort((uint64_t)v68);
          if (result)
            goto LABEL_128;
          free(v68);
          v19 = 0;
        }
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v19;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8)
                                                                                + 24);
        v15 = *(_QWORD *)(a1 + 48);
        v16 = *(_QWORD *)(*(_QWORD *)(v15 + 8) + 24);
        v13 = HIDWORD(__n);
      }
      v20 = *(_QWORD *)(a1 + 104) - v16;
      if (v20 <= v13)
      {
        if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
          v17 = v20;
        if (v17 == v13)
        {
          if (*(_BYTE *)(a1 + 121))
            v27 = 1;
          else
            v27 = *((char *)v3 + 186) < 0;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v27;
        }
        if (gLogDatapath)
        {
          __nwlog_obj();
          v56 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
          {
            v57 = *(_QWORD *)(a1 + 32);
            if (v57)
              v58 = (const char *)(v57 + 609);
            else
              v58 = "";
            v59 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
            v60 = *(_QWORD *)(a1 + 104);
            *(_DWORD *)buf = 136447234;
            v75 = "nw_framer_parse_array_block_invoke";
            v76 = 2080;
            v77 = (size_t)v58;
            v78 = 2048;
            v79 = v59;
            v80 = 2048;
            v81 = v59 + v17;
            v82 = 2048;
            v83 = v60;
            _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s %s Reading from %zu-%zu of %zu (complete)", buf, 0x34u);
          }

        }
        memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24)), v14, v17);
        v23 = 0;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += v17;
        goto LABEL_91;
      }
      if (gLogDatapath)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
          v47 = *(_QWORD *)(a1 + 32);
          if (v47)
            v48 = (const char *)(v47 + 609);
          else
            v48 = "";
          v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          v50 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)buf = 136447234;
          v75 = "nw_framer_parse_array_block_invoke";
          v76 = 2080;
          v77 = (size_t)v48;
          v78 = 2048;
          v79 = v49;
          v80 = 2048;
          v81 = v49 + HIDWORD(__n);
          v82 = 2048;
          v83 = v50;
          _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, "%{public}s %s Reading from %zu-%zu of %zu (partial)", buf, 0x34u);
        }

        v15 = *(_QWORD *)(a1 + 48);
        LODWORD(v13) = HIDWORD(__n);
      }
      memcpy((void *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) + *(_QWORD *)(*(_QWORD *)(v15 + 8) + 24)), v14, v13);
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += HIDWORD(__n);
    }
    else if (*(_BYTE *)(a1 + 120))
    {
      v24 = *((_QWORD *)v3 + 4);
      v25 = (_QWORD *)*((_QWORD *)v3 + 5);
      if (v24)
      {
        *(_QWORD *)(v24 + 40) = v25;
        v25 = (_QWORD *)*((_QWORD *)v3 + 5);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) = v25;
      }
      *v25 = v24;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      v23 = 1;
      nw_frame_finalize((uint64_t)v3);
      goto LABEL_91;
    }
    v23 = 1;
LABEL_91:

    return v23;
  }
  __n = 0;
  v4 = nw_frame_copy_external_data((uint64_t)v3, &__n, (_DWORD *)&__n + 1);
  v5 = HIDWORD(__n);
  if (!HIDWORD(__n))
  {
    if (*(_BYTE *)(a1 + 120))
    {
      v21 = *((_QWORD *)v3 + 4);
      v22 = (_QWORD *)*((_QWORD *)v3 + 5);
      if (v21)
      {
        *(_QWORD *)(v21 + 40) = v22;
        v22 = (_QWORD *)*((_QWORD *)v3 + 5);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) = v22;
      }
      *v22 = v21;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      v23 = 1;
      nw_frame_finalize((uint64_t)v3);
      goto LABEL_90;
    }
LABEL_31:
    v23 = 1;
LABEL_90:

    goto LABEL_91;
  }
  v6 = *(_QWORD *)(a1 + 48);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 24);
  if (*(_QWORD *)(a1 + 96) - v7 >= (unint64_t)HIDWORD(__n))
    v8 = HIDWORD(__n);
  else
    v8 = *(_QWORD *)(a1 + 96) - v7;
  if (!v7 && v8 >= *(_QWORD *)(a1 + 104))
  {
    v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    if (!v28)
    {
      if (!v8)
      {
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446210;
        v75 = "strict_malloc";
        v70 = (void *)_os_log_send_and_compose_impl();

        result = __nwlog_abort((uint64_t)v70);
        if (result)
          goto LABEL_128;
        free(v70);
      }
      v29 = malloc_type_malloc(v8, 0xF2B69DE5uLL);
      if (!v29)
      {
        __nwlog_obj();
        v71 = objc_claimAutoreleasedReturnValue();
        os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
        *(_DWORD *)buf = 136446466;
        v75 = "strict_malloc";
        v76 = 2048;
        v77 = v8;
        v72 = (void *)_os_log_send_and_compose_impl();

        result = __nwlog_abort((uint64_t)v72);
        if (result)
          goto LABEL_128;
        free(v72);
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v29;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8)
                                                                              + 24);
      v28 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24);
    }
    nw_dispatch_data_copyout_from_offset(v4, v28, v8, __n);
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24));
    if (v35)
    {
      if (v35 >= v8)
        v37 = v8;
      else
        v37 = v35;
      nw_frame_claim((uint64_t)v3, v36, v37, 0);
    }
    if (*(_BYTE *)(a1 + 120) && !nw_frame_unclaimed_length(v3))
    {
      v38 = *((_QWORD *)v3 + 4);
      v39 = (_QWORD *)*((_QWORD *)v3 + 5);
      if (v38)
      {
        *(_QWORD *)(v38 + 40) = v39;
        v39 = (_QWORD *)*((_QWORD *)v3 + 5);
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) = v39;
      }
      *v39 = v38;
      *((_QWORD *)v3 + 4) = 0;
      *((_QWORD *)v3 + 5) = 0;
      nw_frame_finalize((uint64_t)v3);
    }
    v23 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
    goto LABEL_90;
  }
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
LABEL_12:
    v11 = *(_QWORD *)(a1 + 104) - v7;
    if (v11 <= v5)
    {
      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
        v8 = v11;
      if (v8 == v5)
      {
        if (*(_BYTE *)(a1 + 121))
          v26 = 1;
        else
          v26 = *((char *)v3 + 186) < 0;
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = v26;
      }
      if (gLogDatapath)
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v51, OS_LOG_TYPE_DEBUG))
        {
          v52 = *(_QWORD *)(a1 + 32);
          if (v52)
            v53 = (const char *)(v52 + 609);
          else
            v53 = "";
          v54 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          v55 = *(_QWORD *)(a1 + 104);
          *(_DWORD *)buf = 136447234;
          v75 = "nw_framer_parse_array_block_invoke";
          v76 = 2080;
          v77 = (size_t)v53;
          v78 = 2048;
          v79 = v54;
          v80 = 2048;
          v81 = v54 + v8;
          v82 = 2048;
          v83 = v55;
          _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_DEBUG, "%{public}s %s Reading from %zu-%zu of %zu (complete)", buf, 0x34u);
        }

      }
      nw_dispatch_data_copyout_from_offset(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24)+ *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), v8, __n);
      v23 = 0;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += v8;
      goto LABEL_90;
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
      {
        v42 = *(_QWORD *)(a1 + 32);
        if (v42)
          v43 = (const char *)(v42 + 609);
        else
          v43 = "";
        v44 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        v45 = *(_QWORD *)(a1 + 104);
        *(_DWORD *)buf = 136447234;
        v75 = "nw_framer_parse_array_block_invoke";
        v76 = 2080;
        v77 = (size_t)v43;
        v78 = 2048;
        v79 = v44;
        v80 = 2048;
        v81 = v44 + HIDWORD(__n);
        v82 = 2048;
        v83 = v45;
        _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_DEBUG, "%{public}s %s Reading from %zu-%zu of %zu (partial)", buf, 0x34u);
      }

      v6 = *(_QWORD *)(a1 + 48);
      LODWORD(v5) = HIDWORD(__n);
    }
    nw_dispatch_data_copyout_from_offset(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) + *(_QWORD *)(*(_QWORD *)(v6 + 8) + 24), v5, __n);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) += HIDWORD(__n);
    goto LABEL_31;
  }
  v9 = *(_QWORD *)(a1 + 104);
  if (!v9)
  {
    __nwlog_obj();
    v61 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v75 = "strict_malloc";
    v62 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v62);
    if (result)
      goto LABEL_128;
    free(v62);
  }
  v10 = malloc_type_malloc(v9, 0xF2B69DE5uLL);
  if (v10)
  {
LABEL_11:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v10;
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8)
                                                                            + 24);
    v6 = *(_QWORD *)(a1 + 48);
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 24);
    v5 = HIDWORD(__n);
    goto LABEL_12;
  }
  __nwlog_obj();
  v65 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v65, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v75 = "strict_malloc";
  v76 = 2048;
  v77 = v9;
  v66 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v66);
  if (!result)
  {
    free(v66);
    v10 = 0;
    goto LABEL_11;
  }
LABEL_128:
  __break(1u);
  return result;
}

void sub_1833C2EF0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL ___ZL21nw_framer_parse_arrayP20NWConcrete_nw_framerP16nw_frame_array_sbbmmPhU13block_pointerFmS3_mbE_block_invoke_132(uint64_t a1, void *a2)
{
  _DWORD *v3;
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _BOOL8 v9;

  v3 = a2;
  v4 = nw_frame_unclaimed_length(v3);
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) >= v4)
    v6 = v4;
  else
    v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
  nw_frame_claim((uint64_t)v3, v5, v6, 0);
  if (*(_BYTE *)(a1 + 56) && !nw_frame_unclaimed_length(v3))
  {
    v7 = *((_QWORD *)v3 + 4);
    v8 = (_QWORD *)*((_QWORD *)v3 + 5);
    if (v7)
    {
      *(_QWORD *)(v7 + 40) = v8;
      v8 = (_QWORD *)*((_QWORD *)v3 + 5);
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) = v8;
    }
    *v8 = v7;
    *((_QWORD *)v3 + 4) = 0;
    *((_QWORD *)v3 + 5) = 0;
    nw_frame_finalize((uint64_t)v3);
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) -= v6;
  v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) != 0;

  return v9;
}

void nw_framer_deliver_input(nw_framer_t framer, const uint8_t *input_buffer, size_t input_length, nw_framer_message_t message, BOOL is_complete)
{
  _BOOL4 v5;
  NWConcrete_nw_framer *v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  objc_class *v13;
  char is_framer;
  uint64_t frame;
  void *v16;
  _QWORD *tqh_last;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  os_log_type_t v43;
  os_log_type_t v44;
  os_log_type_t v45;
  os_log_type_t v46;
  char v47;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  char *v52;
  uint64_t v53;

  v5 = is_complete;
  v53 = *MEMORY[0x1E0C80C00];
  v9 = framer;
  v10 = message;
  v11 = v10;
  if (!v9)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_framer_deliver_input";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v47)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v20, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v50 = "nw_framer_deliver_input";
          v51 = 2082;
          v52 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_89:
        if (!v19)
          goto LABEL_7;
LABEL_90:
        free(v19);
        goto LABEL_7;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v42, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_88:

    goto LABEL_89;
  }
  if (!v10)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_framer_deliver_input";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null message", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v47)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v43, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v20, type);
    if (!v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v50 = "nw_framer_deliver_input";
      v51 = 2082;
      v52 = v33;
      _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  v12 = v10;
  v13 = v12[1].isa;

  is_framer = nw_protocol_definition_is_framer(v13);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_framer_deliver_input";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v47)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v44, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v36 = type;
    v37 = os_log_type_enabled(v20, type);
    if (!v33)
    {
      if (v37)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v36, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v37)
    {
      *(_DWORD *)buf = 136446466;
      v50 = "nw_framer_deliver_input";
      v51 = 2082;
      v52 = v33;
      _os_log_impl(&dword_182FBE000, v20, v36, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  if (!input_buffer)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_framer_deliver_input";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v27, "%{public}s called with null input_buffer", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v47)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v45, "%{public}s called with null input_buffer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v38 = type;
    v39 = os_log_type_enabled(v20, type);
    if (!v33)
    {
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v38, "%{public}s called with null input_buffer, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v39)
    {
      *(_DWORD *)buf = 136446466;
      v50 = "nw_framer_deliver_input";
      v51 = 2082;
      v52 = v33;
      _os_log_impl(&dword_182FBE000, v20, v38, "%{public}s called with null input_buffer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_57;
  }
  if (!input_length)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v50 = "nw_framer_deliver_input";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v19, &type, &v47))
      goto LABEL_89;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s called with null input_length", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (!v47)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v46, "%{public}s called with null input_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_88;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    v40 = type;
    v41 = os_log_type_enabled(v20, type);
    if (!v33)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_framer_deliver_input";
        _os_log_impl(&dword_182FBE000, v20, v40, "%{public}s called with null input_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_88;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      v50 = "nw_framer_deliver_input";
      v51 = 2082;
      v52 = v33;
      _os_log_impl(&dword_182FBE000, v20, v40, "%{public}s called with null input_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_57:

    free(v33);
    if (!v19)
      goto LABEL_7;
    goto LABEL_90;
  }
  nw_context_assert_queue(v9->context);
  frame = nw_framer_protocol_create_frame(v9, input_length, (uint64_t)nw_framer_protocol_inbound_data_finalizer, (uint64_t)&v9->inbound_frames, 0);
  v16 = (void *)nw_frame_unclaimed_bytes(frame, 0);
  nw_frame_set_metadata(frame, v12, 1, v5);
  memcpy(v16, input_buffer, input_length);
  *(_QWORD *)(frame + 32) = 0;
  tqh_last = v9->pending_input_frames.tqh_last;
  *(_QWORD *)(frame + 40) = tqh_last;
  *tqh_last = frame;
  v9->pending_input_frames.tqh_last = (nw_frame **)(frame + 32);
  ++v9->pending_input_frame_count;
  nw_framer_signal_input_available(v9);

LABEL_7:
}

void sub_1833C3B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_metadata_is_framer_message(nw_protocol_metadata_t metadata)
{
  NSObject *v1;
  NSObject *v2;
  id *v3;
  id v4;
  char is_framer;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = metadata;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    v4 = v3[1];

    is_framer = nw_protocol_definition_is_framer(v4);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_metadata_is_framer_message";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_metadata_is_framer_message";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_metadata_is_framer_message";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_metadata_is_framer_message";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_metadata_is_framer_message";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  is_framer = 0;
LABEL_3:

  return is_framer;
}

void nw_framer_protocol_inbound_data_finalizer(void *a1, int a2, char *a3)
{
  id v5;
  NSObject *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (a2)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = "";
        if (a3)
          v7 = a3 + 609;
        v10 = 136446466;
        v11 = "nw_framer_protocol_inbound_data_finalizer";
        v12 = 2080;
        v13 = v7;
        v8 = "%{public}s %s Finalizing inbound frame (success)";
LABEL_13:
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v10, 0x16u);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else if (gLogDatapath)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v9 = "";
      if (a3)
        v9 = a3 + 609;
      v10 = 136446466;
      v11 = "nw_framer_protocol_inbound_data_finalizer";
      v12 = 2080;
      v13 = v9;
      v8 = "%{public}s %s Finalizing inbound frame (drop)";
      goto LABEL_13;
    }
LABEL_14:

  }
  nw_framer_protocol_finalizer(v5, (uint64_t)(a3 + 464));

}

BOOL nw_framer_protocol_create_frame(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, char a5)
{
  id v9;
  void *v10;
  void *v11;
  _QWORD *external;
  uint64_t buffer_manager_with_context;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _BOOL8 result;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  _BOOL4 v29;
  NSObject *v30;
  void *v31;
  os_log_type_t v32;
  os_log_type_t v33;
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_framer_protocol_create_frame";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v20, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (!v34)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      v27 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        v37 = "nw_framer_protocol_create_frame";
        v38 = 2082;
        v39 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_38:

      free(backtrace_string);
    }
LABEL_53:
    if (v20)
      free(v20);
    external = 0;
    goto LABEL_18;
  }
  v11 = (void *)*((_QWORD *)v9 + 46);
  if (!v11)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_framer_protocol_create_frame";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v20, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null framer->context", buf, 0xCu);
        }
LABEL_52:

        goto LABEL_53;
      }
      if (!v34)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_182FBE000, v21, v33, "%{public}s called with null framer->context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_52;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v29 = os_log_type_enabled(v21, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446210;
          v37 = "nw_framer_protocol_create_frame";
          _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null framer->context, no backtrace", buf, 0xCu);
        }
        goto LABEL_52;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        v37 = "nw_framer_protocol_create_frame";
        v38 = 2082;
        v39 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v21, v28, "%{public}s called with null framer->context, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_38;
    }
    goto LABEL_53;
  }
  if ((a5 & 1) != 0)
  {
    external = (_QWORD *)nw_frame_create_external(0, a2, a3, (uint64_t)v10);
    if (!external)
      goto LABEL_18;
    goto LABEL_17;
  }
  if (!a2)
  {
    external = (_QWORD *)nw_frame_create(0, 0, 0, a3, (uint64_t)v10);
    if (!external)
      goto LABEL_18;
    goto LABEL_17;
  }
  buffer_manager_with_context = nw_frame_get_buffer_manager_with_context(v11, a2);
  if (buffer_manager_with_context)
  {
    v14 = buffer_manager_with_context;
    v15 = nw_mem_buffer_allocate(buffer_manager_with_context);
    if (v15)
    {
LABEL_11:
      v16 = nw_frame_create(0, v15, a2, a3, (uint64_t)v10);
      external = (_QWORD *)v16;
      if (v14)
      {
        nw_frame_set_buffer_used_manager(v16, v14);
        if (!external)
          goto LABEL_18;
      }
      else
      {
        nw_frame_set_buffer_used_malloc(v16, 1);
        if (!external)
        {
LABEL_18:

          return (BOOL)external;
        }
      }
LABEL_17:
      external = external;
      external[2] = 0;
      v17 = *(_QWORD **)(a4 + 8);
      external[3] = v17;
      *v17 = external;
      *(_QWORD *)(a4 + 8) = external + 2;
      goto LABEL_18;
    }
  }
  v15 = (uint64_t)malloc_type_malloc(a2, 0xF2B69DE5uLL);
  if (v15)
  {
    v14 = 0;
    goto LABEL_11;
  }
  __nwlog_obj();
  v30 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v37 = "strict_malloc";
  v38 = 2048;
  v39 = (char *)a2;
  v31 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v31);
  if (!result)
  {
    free(v31);
    v14 = 0;
    v15 = 0;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

void sub_1833C4594(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_signal_input_available(NWConcrete_nw_framer *a1)
{
  NWConcrete_nw_framer *v1;
  NWConcrete_nw_framer *v2;
  char v3;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  nw_protocol_callbacks *v6;
  void (*input_available)(void);
  void *v8;
  nw_protocol *v9;
  const char *v10;
  const char *name;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  nw_protocol *v15;
  const char *v16;
  const char *v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  nw_protocol *v21;
  const char *v22;
  const char *v23;
  os_log_type_t v24;
  nw_protocol *v25;
  const char *v26;
  const char *v27;
  nw_protocol *v28;
  const char *v29;
  const char *v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  v3 = *((_BYTE *)v1 + 607);
  if ((v3 & 1) == 0 && (*((char *)v1 + 606) & 0x80000000) == 0)
  {
    default_input_handler = v1->protocol.default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        if (callbacks->input_available)
        {
          *((_BYTE *)v2 + 607) = v3 | 1;
          if (v2->pending_input_frames.tqh_first)
            *((_BYTE *)v2 + 608) |= 0x20u;
          v6 = default_input_handler->callbacks;
          if (v6)
          {
            input_available = (void (*)(void))v6->input_available;
            if (input_available)
            {
              input_available();
LABEL_11:
              *((_BYTE *)v2 + 607) &= ~1u;
              goto LABEL_12;
            }
          }
          __nwlog_obj();
          v8 = (void *)objc_claimAutoreleasedReturnValue();
          v9 = v2->protocol.default_input_handler;
          v10 = "invalid";
          if (v9)
          {
            name = v9->identifier->name;
            if (name)
              v10 = name;
          }
          *(_DWORD *)buf = 136446466;
          v34 = "nw_framer_signal_input_available";
          v35 = 2082;
          v36 = v10;
          v12 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v31 = 0;
          if (__nwlog_fault(v12, &type, &v31))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v13 = objc_claimAutoreleasedReturnValue();
              v14 = type;
              if (os_log_type_enabled(v13, type))
              {
                v15 = v2->protocol.default_input_handler;
                v16 = "invalid";
                if (v15)
                {
                  v17 = v15->identifier->name;
                  if (v17)
                    v16 = v17;
                }
                *(_DWORD *)buf = 136446466;
                v34 = "nw_framer_signal_input_available";
                v35 = 2082;
                v36 = v16;
                _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s protocol %{public}s has invalid input_available callback", buf, 0x16u);
              }
            }
            else if (v31)
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v13 = objc_claimAutoreleasedReturnValue();
              v19 = type;
              v20 = os_log_type_enabled(v13, type);
              if (backtrace_string)
              {
                if (v20)
                {
                  v21 = v2->protocol.default_input_handler;
                  v22 = "invalid";
                  if (v21)
                  {
                    v23 = v21->identifier->name;
                    if (v23)
                      v22 = v23;
                  }
                  *(_DWORD *)buf = 136446722;
                  v34 = "nw_framer_signal_input_available";
                  v35 = 2082;
                  v36 = v22;
                  v37 = 2082;
                  v38 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
                }

                free(backtrace_string);
                goto LABEL_44;
              }
              if (v20)
              {
                v28 = v2->protocol.default_input_handler;
                v29 = "invalid";
                if (v28)
                {
                  v30 = v28->identifier->name;
                  if (v30)
                    v29 = v30;
                }
                *(_DWORD *)buf = 136446466;
                v34 = "nw_framer_signal_input_available";
                v35 = 2082;
                v36 = v29;
                _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s protocol %{public}s has invalid input_available callback, no backtrace", buf, 0x16u);
              }
            }
            else
            {
              __nwlog_obj();
              v13 = objc_claimAutoreleasedReturnValue();
              v24 = type;
              if (os_log_type_enabled(v13, type))
              {
                v25 = v2->protocol.default_input_handler;
                v26 = "invalid";
                if (v25)
                {
                  v27 = v25->identifier->name;
                  if (v27)
                    v26 = v27;
                }
                *(_DWORD *)buf = 136446466;
                v34 = "nw_framer_signal_input_available";
                v35 = 2082;
                v36 = v26;
                _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded", buf, 0x16u);
              }
            }

          }
LABEL_44:
          if (v12)
            free(v12);
          goto LABEL_11;
        }
      }
    }
  }
LABEL_12:

}

void sub_1833C4944(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_protocol_finalizer(void *a1, uint64_t a2)
{
  void *buffer;
  uint64_t manager;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;

  v8 = a1;
  if (nw_frame_buffer_used_malloc((uint64_t)v8))
  {
    buffer = (void *)nw_frame_get_buffer((uint64_t)v8, 0);
    if (buffer)
      free(buffer);
  }
  else if (nw_frame_buffer_used_manager((uint64_t)v8))
  {
    manager = nw_frame_buffer_get_manager((uint64_t)v8);
    v5 = nw_frame_get_buffer((uint64_t)v8, 0);
    nw_mem_buffer_free(manager, v5);
  }
  else if (nw_frame_uses_external_data((uint64_t)v8))
  {
    nw_frame_set_external_data((uint64_t)v8, 0, 0);
  }
  nw_frame_reset((uint64_t)v8, 0, 0, 0, 0);
  v6 = v8[2];
  v7 = (_QWORD *)v8[3];
  if (v6)
  {
    *(_QWORD *)(v6 + 24) = v7;
    v7 = (_QWORD *)v8[3];
  }
  else
  {
    *(_QWORD *)(a2 + 8) = v7;
  }
  *v7 = v6;
  v8[2] = 0;
  v8[3] = 0;

}

BOOL nw_framer_deliver_input_no_copy(nw_framer_t framer, size_t input_length, nw_framer_message_t message, BOOL is_complete)
{
  _BOOL4 v4;
  nw_framer_t v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  objc_class *v11;
  char is_framer;
  BOOL v13;
  char v14;
  Class isa;
  objc_class *v16;
  char v17;
  uint64_t frame;
  _QWORD *v19;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  NSObject *v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  _QWORD v40[2];
  BOOL (*v41)(uint64_t, void *);
  void *v42;
  NSObject *v43;
  NSObject *v44;
  _BYTE *v45;
  BOOL v46;
  char v47;
  os_log_type_t type;
  _BYTE buf[24];
  size_t v50;
  uint64_t v51;

  v4 = is_complete;
  v51 = *MEMORY[0x1E0C80C00];
  v7 = framer;
  v8 = message;
  v9 = v8;
  if (!v7)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v22, &type, &v47))
      goto LABEL_69;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null framer", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (!v47)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_182FBE000, v23, v37, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_68;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v31 = type;
    v32 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_182FBE000, v23, v31, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v31, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_50;
  }
  if (!v8)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v22, &type, &v47))
      goto LABEL_69;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null message", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (!v47)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_182FBE000, v23, v38, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_68;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    v34 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_182FBE000, v23, v33, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (v34)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v33, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_50;
  }
  v10 = v8;
  v11 = v10[1].isa;

  is_framer = nw_protocol_definition_is_framer(v11);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v22, &type, &v47))
      goto LABEL_69;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
LABEL_68:

LABEL_69:
      if (v22)
        free(v22);
      goto LABEL_6;
    }
    if (!v47)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_182FBE000, v23, v39, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_68;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v35 = type;
    v36 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        _os_log_impl(&dword_182FBE000, v23, v35, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_68;
    }
    if (v36)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v35, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_50:

    free(backtrace_string);
    goto LABEL_69;
  }
  nw_context_assert_queue(v7[46].isa);
  if (v7[63].isa)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_deliver_input_no_copy";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = (char *)v7 + 609;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %s Cannot start a new parse with an outstanding parse", buf, 0x16u);
      }

    }
LABEL_6:
    v13 = 0;
    goto LABEL_17;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v50 = input_length;
  if (input_length)
  {
    v7[63].isa = (Class)input_length;
    objc_storeStrong((id *)&v7[48].isa, message);
    if (v4)
      v14 = 8;
    else
      v14 = 0;
    HIBYTE(v7[75].isa) = HIBYTE(v7[75].isa) & 0xF7 | v14;
    v40[0] = MEMORY[0x1E0C809B0];
    v40[1] = 3221225472;
    v41 = __nw_framer_deliver_input_no_copy_block_invoke;
    v42 = &unk_1E149AB88;
    v45 = buf;
    v43 = v7;
    v44 = v10;
    v46 = v4;
    isa = v7[64].isa;
    do
    {
      if (!isa)
        break;
      v16 = (objc_class *)*((_QWORD *)isa + 4);
      v17 = ((uint64_t (*)(_QWORD *))v41)(v40);
      isa = v16;
    }
    while ((v17 & 1) != 0);
    v13 = v7[63].isa == 0;

    frame = (uint64_t)v43;
  }
  else
  {
    frame = nw_framer_protocol_create_frame(v7, 0, (uint64_t)nw_framer_protocol_inbound_data_finalizer, (uint64_t)&v7[58], 0);
    v13 = 1;
    nw_frame_set_metadata(frame, v10, 1, v4);
    *(_QWORD *)(frame + 32) = 0;
    v19 = v7[67].isa;
    *(_QWORD *)(frame + 40) = v19;
    *v19 = frame;
    v7[67].isa = (Class)(frame + 32);
    ++LODWORD(v7[68].isa);
  }

  _Block_object_dispose(buf, 8);
LABEL_17:

  return v13;
}

void sub_1833C52BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL __nw_framer_deliver_input_no_copy_block_invoke(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  const void *v10;
  uint64_t frame;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  _BOOL4 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  _BOOL8 result;
  NSObject *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  NSObject *v40;
  void *v41;
  NSObject *v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  uint64_t v49;
  unsigned int v50;
  uint8_t buf[4];
  const char *v52;
  __int16 v53;
  const char *v54;
  __int16 v55;
  unsigned int v56;
  __int16 v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
    goto LABEL_10;
  v50 = 0;
  v5 = nw_frame_unclaimed_bytes((uint64_t)v3, &v50);
  v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  if (v6 == v50)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
      {
        v33 = *(_QWORD *)(a1 + 32);
        if (v33)
          v34 = (const char *)(v33 + 609);
        else
          v34 = "";
        v35 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v52 = "nw_framer_deliver_input_no_copy_block_invoke";
        v53 = 2080;
        v54 = v34;
        v55 = 1024;
        v56 = v50;
        v57 = 2048;
        v58 = v35;
        _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s %s Parsing exact body (%u/%zu)", buf, 0x26u);
      }

    }
    nw_frame_set_metadata((uint64_t)v4, *(NSObject **)(a1 + 40), 1, *(unsigned __int8 *)(a1 + 56));
    v8 = v4[4];
    v9 = (_QWORD *)v4[5];
    v7 = v4 + 4;
    if (v8)
    {
      *(_QWORD *)(v8 + 40) = v9;
      v9 = (_QWORD *)v4[5];
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520) = v9;
    }
    *v9 = v8;
    *v7 = 0;
    v4[5] = 0;
    v23 = *(_QWORD *)(a1 + 32);
    v22 = a1 + 32;
    v24 = *(_QWORD **)(v23 + 536);
    v4[5] = v24;
    *v24 = v4;
    *(_QWORD *)(v23 + 536) = v7;
    ++*(_DWORD *)(*(_QWORD *)v22 + 544);
    v25 = *(void **)(*(_QWORD *)v22 + 384);
    *(_QWORD *)(*(_QWORD *)v22 + 384) = 0;

    v18 = 0;
    *(_QWORD *)(*(_QWORD *)v22 + 504) = 0;
    goto LABEL_25;
  }
  if (v6 >= v50)
  {
    if (v50)
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
        {
          v43 = *(_QWORD *)(a1 + 32);
          if (v43)
            v44 = (const char *)(v43 + 609);
          else
            v44 = "";
          v45 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          v52 = "nw_framer_deliver_input_no_copy_block_invoke";
          v53 = 2080;
          v54 = v44;
          v55 = 1024;
          v56 = v50;
          v57 = 2048;
          v58 = v45;
          _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s %s Parsing partial body (%u/%zu)", buf, 0x26u);
        }

      }
      nw_frame_set_metadata((uint64_t)v4, *(NSObject **)(a1 + 40), 1, 0);
      v20 = v4[4];
      v21 = (_QWORD *)v4[5];
      v19 = v4 + 4;
      if (v20)
      {
        *(_QWORD *)(v20 + 40) = v21;
        v21 = (_QWORD *)v4[5];
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520) = v21;
      }
      *v21 = v20;
      *v19 = 0;
      v4[5] = 0;
      v29 = *(_QWORD *)(a1 + 32);
      v30 = *(_QWORD **)(v29 + 536);
      v4[5] = v30;
      *v30 = v4;
      *(_QWORD *)(v29 + 536) = v19;
      ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 544);
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504) = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) - v50;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504);
    }
    else
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
        {
          v47 = *(_QWORD *)(a1 + 32);
          if (v47)
            v48 = (const char *)(v47 + 609);
          else
            v48 = "";
          v49 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
          *(_DWORD *)buf = 136446978;
          v52 = "nw_framer_deliver_input_no_copy_block_invoke";
          v53 = 2080;
          v54 = v48;
          v55 = 1024;
          v56 = v50;
          v57 = 2048;
          v58 = v49;
          _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, "%{public}s %s Not enough bytes to parse body (%u/%zu)", buf, 0x26u);
        }

        v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
        v26 = v50 == 0;
      }
      else
      {
        v26 = 1;
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504) = v6;
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 504);
      if (v26)
      {
        v27 = v4[4];
        v28 = (_QWORD *)v4[5];
        if (v27)
        {
          *(_QWORD *)(v27 + 40) = v28;
          v28 = (_QWORD *)v4[5];
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)(a1 + 32) + 520) = v28;
        }
        *v28 = v27;
        v4[4] = 0;
        v4[5] = 0;
        v18 = 1;
        nw_frame_finalize((uint64_t)v4);
        goto LABEL_25;
      }
    }
    v18 = 1;
LABEL_25:

    return v18;
  }
  v10 = (const void *)v5;
  if (gLogDatapath)
  {
    __nwlog_obj();
    v36 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
    {
      v37 = *(_QWORD *)(a1 + 32);
      if (v37)
        v38 = (const char *)(v37 + 609);
      else
        v38 = "";
      v39 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      *(_DWORD *)buf = 136446978;
      v52 = "nw_framer_deliver_input_no_copy_block_invoke";
      v53 = 2080;
      v54 = v38;
      v55 = 1024;
      v56 = v50;
      v57 = 2048;
      v58 = v39;
      _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s %s Parsing full body (%u/%zu)", buf, 0x26u);
    }

    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
  }
  frame = nw_framer_protocol_create_frame(*(void **)(a1 + 32), v6, (uint64_t)nw_framer_protocol_inbound_data_finalizer, *(_QWORD *)(a1 + 32) + 464, 0);
  v12 = (void *)nw_frame_unclaimed_bytes(frame, 0);
  nw_frame_set_metadata(frame, *(NSObject **)(a1 + 40), 1, *(unsigned __int8 *)(a1 + 56));
  memcpy(v12, v10, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24));
  nw_frame_claim((uint64_t)v4, v13, *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24), 0);
  if (nw_frame_unclaimed_length(v4))
  {
LABEL_9:
    v15 = *(_QWORD *)(a1 + 32);
    v14 = a1 + 32;
    *(_QWORD *)(frame + 32) = 0;
    v16 = *(uint64_t **)(v15 + 536);
    *(_QWORD *)(frame + 40) = v16;
    *v16 = frame;
    *(_QWORD *)(v15 + 536) = frame + 32;
    ++*(_DWORD *)(*(_QWORD *)v14 + 544);
    v17 = *(void **)(*(_QWORD *)v14 + 384);
    *(_QWORD *)(*(_QWORD *)v14 + 384) = 0;

    *(_QWORD *)(*(_QWORD *)v14 + 504) = 0;
LABEL_10:
    v18 = 0;
    goto LABEL_25;
  }
  __nwlog_obj();
  v40 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v52 = "nw_framer_deliver_input_no_copy_block_invoke";
  v41 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v41);
  if (!result)
  {
    free(v41);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

void sub_1833C595C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_framer_parse_output(nw_framer_t framer, size_t minimum_incomplete_length, size_t maximum_length, uint8_t *temp_buffer, nw_framer_parse_completion_t parse)
{
  nw_framer_t v9;
  nw_framer_parse_completion_t v10;
  NSObject *v11;
  char v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v9 = framer;
  v10 = parse;
  if (!v9)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_framer_parse_output";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v15, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_framer_parse_output";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v25 = "nw_framer_parse_output";
            v26 = 2082;
            v27 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_framer_parse_output";
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_framer_parse_output";
          _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_25:
    if (v15)
      free(v15);
    goto LABEL_6;
  }
  nw_context_assert_queue(v9[46].isa);
  if ((HIBYTE(v9[75].isa) & 4) != 0)
  {
    v12 = nw_framer_parse_array(v9, &v9[71].isa, 0, 0, minimum_incomplete_length, maximum_length, (uint64_t)temp_buffer, v10);
    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v25 = "nw_framer_parse_output";
    _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s Cannot parse output when not in output handler", buf, 0xCu);
  }

LABEL_6:
  v12 = 0;
LABEL_8:

  return v12;
}

void sub_1833C5CCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_framer_write_output_data(nw_framer_t framer, dispatch_data_t output_data)
{
  nw_framer_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t isa;
  _BOOL8 v7;
  Class v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  dispatch_data_t concat;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = framer;
  v4 = output_data;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_write_output_data";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_write_output_data";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_48:
        if (!v14)
          goto LABEL_14;
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (!v4)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_write_output_data";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v14, &type, &v27))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null output_data", buf, 0xCu);
      }
    }
    else if (v27)
    {
      v22 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v15, type);
      if (v22)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_write_output_data";
          v31 = 2082;
          v32 = v22;
          _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null output_data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v22);
        if (!v14)
          goto LABEL_14;
LABEL_49:
        free(v14);
        goto LABEL_14;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null output_data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_write_output_data";
        _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s called with null output_data, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_47;
  }
  nw_context_assert_queue(v3[46].isa);
  if (v3[69].isa)
  {
    if ((BYTE6(v3[75].isa) & 2) == 0)
    {
LABEL_5:
      isa = (uint64_t)v3[69].isa;
LABEL_8:
      if (isa)
      {
        v9 = *(_QWORD *)(isa + 24) - *(_QWORD *)(isa + 16);
        if (v9)
        {
          v10 = nw_array_remove_object_at_index(isa, (char *)((v9 >> 3) - 1));
          v11 = (uint64_t)v3[69].isa;
          concat = dispatch_data_create_concat(v10, v5);
          nw_array_append(v11, concat);

          if ((HIBYTE(v3[75].isa) & 4) != 0)
            goto LABEL_14;
          goto LABEL_13;
        }
      }
      goto LABEL_12;
    }
  }
  else
  {
    v7 = nw_array_create();
    v8 = v3[69].isa;
    v3[69].isa = (Class)v7;

    if ((BYTE6(v3[75].isa) & 2) == 0)
      goto LABEL_5;
  }
  isa = (uint64_t)v3[69].isa;
  if ((HIBYTE(v3[75].isa) & 4) != 0)
    goto LABEL_8;
LABEL_12:
  nw_array_append(isa, v5);
  if ((HIBYTE(v3[75].isa) & 4) == 0)
LABEL_13:
    nw_framer_flush_output(v3, 0);
LABEL_14:

}

void sub_1833C623C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_flush_output(void *a1, void *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  size_t size;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, char *, uint64_t, size_t, uint64_t, _QWORD *);
  int v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  uint64_t v15;
  void (*v16)(uint64_t, _QWORD *);
  int v17;
  void *v18;
  const char *v19;
  char *v20;
  NSObject *v21;
  const char *v22;
  char *v23;
  _BOOL4 v24;
  const char *v25;
  const char *v26;
  const char *v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  void (*v31)(uint64_t, char *);
  void *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  void *v37;
  os_log_type_t v38;
  void *v39;
  const char *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  const char *v44;
  char *backtrace_string;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  _BOOL4 v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  const char *v53;
  os_log_type_t v54;
  os_log_type_t v55;
  os_log_type_t v56;
  const char *v57;
  const char *v58;
  os_log_type_t v59;
  os_log_type_t v60;
  NSObject *v61;
  os_log_type_t v62;
  NSObject *log;
  const char *loga;
  id v65;
  char v66;
  os_log_type_t type;
  _QWORD v68[2];
  uint64_t (*v69)(_QWORD *);
  void *v70;
  char *v71;
  id v72;
  _BYTE *v73;
  os_log_type_t *v74;
  _QWORD *v75;
  _QWORD v76[2];
  os_log_type_t v77[8];
  os_log_type_t *v78;
  uint64_t v79;
  size_t v80;
  uint8_t buf[4];
  const char *v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  char *v86;
  _BYTE v87[24];
  uint64_t (*v88)(uint64_t, uint64_t);
  void (*v89)(uint64_t);
  id v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v65 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v87 = 136446210;
    *(_QWORD *)&v87[4] = "nw_framer_flush_output";
    v34 = (char *)_os_log_send_and_compose_impl();

    v77[0] = OS_LOG_TYPE_ERROR;
    buf[0] = 0;
    if (__nwlog_fault(v34, v77, buf))
    {
      if (v77[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = v77[0];
        if (os_log_type_enabled(v35, v77[0]))
        {
          *(_DWORD *)v87 = 136446210;
          *(_QWORD *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null framer", v87, 0xCu);
        }
        goto LABEL_123;
      }
      if (!buf[0])
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v54 = v77[0];
        if (os_log_type_enabled(v35, v77[0]))
        {
          *(_DWORD *)v87 = 136446210;
          *(_QWORD *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_182FBE000, v35, v54, "%{public}s called with null framer, backtrace limit exceeded", v87, 0xCu);
        }
        goto LABEL_123;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v46 = v77[0];
      v47 = os_log_type_enabled(v35, v77[0]);
      if (!backtrace_string)
      {
        if (v47)
        {
          *(_DWORD *)v87 = 136446210;
          *(_QWORD *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_182FBE000, v35, v46, "%{public}s called with null framer, no backtrace", v87, 0xCu);
        }
        goto LABEL_123;
      }
      if (v47)
      {
        *(_DWORD *)v87 = 136446466;
        *(_QWORD *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(_QWORD *)&v87[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v35, v46, "%{public}s called with null framer, dumping backtrace:%{public}s", v87, 0x16u);
      }
LABEL_99:

      free(backtrace_string);
    }
LABEL_124:
    if (v34)
      free(v34);
LABEL_62:
    v28 = 0;
    goto LABEL_70;
  }
  v4 = *((_QWORD *)v3 + 40);
  if (!v4)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v87 = 136446210;
    *(_QWORD *)&v87[4] = "nw_framer_flush_output";
    v34 = (char *)_os_log_send_and_compose_impl();

    v77[0] = OS_LOG_TYPE_ERROR;
    buf[0] = 0;
    if (__nwlog_fault(v34, v77, buf))
    {
      if (v77[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v38 = v77[0];
        if (os_log_type_enabled(v35, v77[0]))
        {
          *(_DWORD *)v87 = 136446210;
          *(_QWORD *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_182FBE000, v35, v38, "%{public}s called with null output_handler", v87, 0xCu);
        }
LABEL_123:

        goto LABEL_124;
      }
      if (!buf[0])
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v55 = v77[0];
        if (os_log_type_enabled(v35, v77[0]))
        {
          *(_DWORD *)v87 = 136446210;
          *(_QWORD *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_182FBE000, v35, v55, "%{public}s called with null output_handler, backtrace limit exceeded", v87, 0xCu);
        }
        goto LABEL_123;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v48 = v77[0];
      v49 = os_log_type_enabled(v35, v77[0]);
      if (!backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)v87 = 136446210;
          *(_QWORD *)&v87[4] = "nw_framer_flush_output";
          _os_log_impl(&dword_182FBE000, v35, v48, "%{public}s called with null output_handler, no backtrace", v87, 0xCu);
        }
        goto LABEL_123;
      }
      if (v49)
      {
        *(_DWORD *)v87 = 136446466;
        *(_QWORD *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(_QWORD *)&v87[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v35, v48, "%{public}s called with null output_handler, dumping backtrace:%{public}s", v87, 0x16u);
      }
      goto LABEL_99;
    }
    goto LABEL_124;
  }
  while (1)
  {
    v5 = *((_QWORD *)v3 + 69);
    if (!v5)
      break;
    if (*(_QWORD *)(v5 + 24) == *(_QWORD *)(v5 + 16))
      goto LABEL_61;
    *(_QWORD *)v87 = 0;
    *(_QWORD *)&v87[8] = v87;
    *(_QWORD *)&v87[16] = 0x3032000000;
    v88 = __Block_byref_object_copy__4439;
    v89 = __Block_byref_object_dispose__4440;
    v90 = nw_array_remove_object_at_index(v5, 0);
    *(_QWORD *)v77 = 0;
    v78 = v77;
    v79 = 0x2020000000;
    v80 = 0;
    size = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)&v87[8] + 40));
    v80 = size;
    v76[0] = 0;
    v76[1] = v76;
    if ((v3[606] & 2) != 0)
      v7 = size;
    else
      v7 = 1;
    v8 = *(_QWORD *)(v4 + 24);
    if (v8 && (v9 = *(uint64_t (**)(uint64_t, char *, uint64_t, size_t, uint64_t, _QWORD *))(v8 + 88)) != 0)
    {
      v10 = v9(v4, v3 + 288, v7, size, 1, v76);
      if (!gLogDatapath)
        goto LABEL_11;
    }
    else
    {
      v10 = 0;
      if (!gLogDatapath)
        goto LABEL_11;
    }
    __nwlog_obj();
    log = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v82 = "nw_framer_flush_output";
      v83 = 2080;
      v84 = v3 + 609;
      v85 = 1024;
      LODWORD(v86) = v10;
      _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s %s Got %u output frames", buf, 0x1Cu);
    }

LABEL_11:
    v3[608] = v3[608] & 0xBF | ((v10 == 0) << 6);
    if (v10)
    {
      v68[0] = MEMORY[0x1E0C809B0];
      v68[1] = 3221225472;
      v69 = (uint64_t (*)(_QWORD *))___ZL22nw_framer_flush_outputP20NWConcrete_nw_framerPU22objcproto11OS_nw_frame8NSObject_block_invoke;
      v70 = &unk_1E149C998;
      v73 = v87;
      v75 = v76;
      v71 = v3;
      v74 = v77;
      v72 = v65;
      v11 = v76[0];
      do
      {
        if (!v11)
          break;
        v12 = *(_QWORD *)(v11 + 32);
        v13 = v69(v68);
        v11 = v12;
      }
      while ((v13 & 1) != 0);
      v14 = *(void **)(*(_QWORD *)&v87[8] + 40);
      if (v14)
        nw_array_prepend(*((_QWORD *)v3 + 69), v14);
      if (v76[0])
      {
        v15 = *(_QWORD *)(v4 + 24);
        if (v15)
        {
          v16 = *(void (**)(uint64_t, _QWORD *))(v15 + 96);
          if (v16)
          {
            v16(v4, v76);
            goto LABEL_21;
          }
        }
        __nwlog_obj();
        v18 = (void *)objc_claimAutoreleasedReturnValue();
        v19 = *(const char **)(v4 + 16);
        if (!v19)
          v19 = "invalid";
        *(_DWORD *)buf = 136446466;
        v82 = "nw_framer_flush_output";
        v83 = 2082;
        v84 = v19;
        loga = (const char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v66 = 0;
        v20 = (char *)loga;
        if (__nwlog_fault(loga, &type, &v66))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v21 = objc_claimAutoreleasedReturnValue();
            v60 = type;
            if (os_log_type_enabled(v21, type))
            {
              v22 = *(const char **)(v4 + 16);
              if (!v22)
                v22 = "invalid";
              *(_DWORD *)buf = 136446466;
              v82 = "nw_framer_flush_output";
              v83 = 2082;
              v84 = v22;
              _os_log_impl(&dword_182FBE000, v21, v60, "%{public}s protocol %{public}s has invalid finalize_output_frames callback", buf, 0x16u);
            }
            goto LABEL_39;
          }
          if (v66)
          {
            v23 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v61 = objc_claimAutoreleasedReturnValue();
            v59 = type;
            v24 = os_log_type_enabled(v61, type);
            if (v23)
            {
              if (v24)
              {
                v25 = *(const char **)(v4 + 16);
                if (!v25)
                  v25 = "invalid";
                *(_DWORD *)buf = 136446722;
                v82 = "nw_framer_flush_output";
                v83 = 2082;
                v84 = v25;
                v85 = 2082;
                v86 = v23;
                _os_log_impl(&dword_182FBE000, v61, v59, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(v23);
            }
            else
            {
              if (v24)
              {
                v27 = *(const char **)(v4 + 16);
                if (!v27)
                  v27 = "invalid";
                *(_DWORD *)buf = 136446466;
                v82 = "nw_framer_flush_output";
                v83 = 2082;
                v84 = v27;
                _os_log_impl(&dword_182FBE000, v61, v59, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, no backtrace", buf, 0x16u);
              }

            }
          }
          else
          {
            __nwlog_obj();
            v21 = objc_claimAutoreleasedReturnValue();
            v62 = type;
            if (os_log_type_enabled(v21, type))
            {
              v26 = *(const char **)(v4 + 16);
              if (!v26)
                v26 = "invalid";
              *(_DWORD *)buf = 136446466;
              v82 = "nw_framer_flush_output";
              v83 = 2082;
              v84 = v26;
              _os_log_impl(&dword_182FBE000, v21, v62, "%{public}s protocol %{public}s has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x16u);
            }
LABEL_39:

          }
          v20 = (char *)loga;
        }
        if (v20)
          free(v20);
LABEL_21:
        v17 = 0;
      }
      else
      {
        v17 = 27;
      }

      goto LABEL_25;
    }
    nw_array_prepend(*((_QWORD *)v3 + 69), *(void **)(*(_QWORD *)&v87[8] + 40));
    v17 = 27;
LABEL_25:
    _Block_object_dispose(v77, 8);
    _Block_object_dispose(v87, 8);

    if (v17)
    {
      v5 = *((_QWORD *)v3 + 69);
      if (!v5)
        break;
LABEL_61:
      if (*(_QWORD *)(v5 + 24) != *(_QWORD *)(v5 + 16))
        goto LABEL_62;
      break;
    }
  }
  if ((v3[607] & 0x40) == 0)
    goto LABEL_69;
  v3[607] &= ~0x40u;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v29 = (id)gLogObj;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)v87 = 136446466;
    *(_QWORD *)&v87[4] = "nw_framer_flush_output";
    *(_WORD *)&v87[12] = 2080;
    *(_QWORD *)&v87[14] = v3 + 609;
    _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_INFO, "%{public}s %s Delivering delayed output_finished", v87, 0x16u);
  }

  v30 = *(_QWORD *)(v4 + 24);
  if (v30)
  {
    v31 = *(void (**)(uint64_t, char *))(v30 + 192);
    if (v31)
    {
      v31(v4, v3 + 288);
      goto LABEL_69;
    }
  }
  __nwlog_obj();
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  v40 = *(const char **)(v4 + 16);
  if (!v40)
    v40 = "invalid";
  *(_DWORD *)v87 = 136446466;
  *(_QWORD *)&v87[4] = "nw_framer_flush_output";
  *(_WORD *)&v87[12] = 2082;
  *(_QWORD *)&v87[14] = v40;
  v41 = (char *)_os_log_send_and_compose_impl();

  v77[0] = OS_LOG_TYPE_ERROR;
  buf[0] = 0;
  if (__nwlog_fault(v41, v77, buf))
  {
    if (v77[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v43 = v77[0];
      if (os_log_type_enabled(v42, v77[0]))
      {
        v44 = *(const char **)(v4 + 16);
        if (!v44)
          v44 = "invalid";
        *(_DWORD *)v87 = 136446466;
        *(_QWORD *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(_QWORD *)&v87[14] = v44;
        _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s protocol %{public}s has invalid output_finished callback", v87, 0x16u);
      }
      goto LABEL_130;
    }
    if (buf[0])
    {
      v50 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v51 = v77[0];
      v52 = os_log_type_enabled(v42, v77[0]);
      if (v50)
      {
        if (v52)
        {
          v53 = *(const char **)(v4 + 16);
          if (!v53)
            v53 = "invalid";
          *(_DWORD *)v87 = 136446722;
          *(_QWORD *)&v87[4] = "nw_framer_flush_output";
          *(_WORD *)&v87[12] = 2082;
          *(_QWORD *)&v87[14] = v53;
          *(_WORD *)&v87[22] = 2082;
          v88 = (uint64_t (*)(uint64_t, uint64_t))v50;
          _os_log_impl(&dword_182FBE000, v42, v51, "%{public}s protocol %{public}s has invalid output_finished callback, dumping backtrace:%{public}s", v87, 0x20u);
        }

        free(v50);
        goto LABEL_131;
      }
      if (v52)
      {
        v58 = *(const char **)(v4 + 16);
        if (!v58)
          v58 = "invalid";
        *(_DWORD *)v87 = 136446466;
        *(_QWORD *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(_QWORD *)&v87[14] = v58;
        _os_log_impl(&dword_182FBE000, v42, v51, "%{public}s protocol %{public}s has invalid output_finished callback, no backtrace", v87, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v56 = v77[0];
      if (os_log_type_enabled(v42, v77[0]))
      {
        v57 = *(const char **)(v4 + 16);
        if (!v57)
          v57 = "invalid";
        *(_DWORD *)v87 = 136446466;
        *(_QWORD *)&v87[4] = "nw_framer_flush_output";
        *(_WORD *)&v87[12] = 2082;
        *(_QWORD *)&v87[14] = v57;
        _os_log_impl(&dword_182FBE000, v42, v56, "%{public}s protocol %{public}s has invalid output_finished callback, backtrace limit exceeded", v87, 0x16u);
      }
    }
LABEL_130:

  }
LABEL_131:
  if (v41)
    free(v41);
LABEL_69:
  v28 = 1;
LABEL_70:

  return v28;
}

void sub_1833C6FEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__4439(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__4440(uint64_t a1)
{

}

uint64_t ___ZL22nw_framer_flush_outputP20NWConcrete_nw_framerPU22objcproto11OS_nw_frame8NSObject_block_invoke(_QWORD *a1, void *a2)
{
  id v3;
  uint64_t v4;
  unsigned int v5;
  unint64_t v6;
  size_t v7;
  NSObject *v8;
  dispatch_data_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  dispatch_data_t subrange;
  uint64_t v19;
  void *v20;
  size_t size;
  NSObject *v22;
  uint64_t v23;
  const char *v24;
  NSObject *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int ecn_flag;
  int v38;
  uint64_t expire_time;
  uint64_t v40;
  uint64_t packet_id;
  _OWORD *v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  NSObject *v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  NSObject *v55;
  uint64_t v56;
  const char *v57;
  NSObject *v58;
  uint64_t v59;
  const char *v60;
  NSObject *v61;
  uint64_t v62;
  const char *v63;
  NSObject *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  NSObject *v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  char *backtrace_string;
  _BOOL4 v73;
  unsigned int v74;
  NSObject *v75;
  uint64_t v76;
  const char *v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  NSObject *v85;
  uint64_t v86;
  const char *v87;
  uint64_t v88;
  char *v89;
  unsigned int offset;
  char offset_7;
  uint8_t buf[4];
  const char *v93;
  __int16 v94;
  void *v95;
  __int16 v96;
  _QWORD v97[3];

  v97[2] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = (uint64_t)v3;
  if (!*(_QWORD *)(*(_QWORD *)(a1[6] + 8) + 40))
  {
    nw_frame_finalize((uint64_t)v3);
    v12 = *(_QWORD *)(v4 + 32);
    v13 = *(_QWORD **)(v4 + 40);
    if (v12)
    {
      *(_QWORD *)(v12 + 40) = v13;
      v13 = *(_QWORD **)(v4 + 40);
    }
    else
    {
      *(_QWORD *)(a1[8] + 8) = v13;
    }
    *v13 = v12;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        v23 = a1[4];
        if (v23)
          v24 = (const char *)(v23 + 609);
        else
          v24 = "";
        *(_DWORD *)buf = 136446466;
        v93 = "nw_framer_flush_output_block_invoke";
        v94 = 2080;
        v95 = (void *)v24;
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %s No output data, dropping output frame", buf, 0x16u);
      }

    }
    goto LABEL_55;
  }
  if (!nw_frame_uses_external_data((uint64_t)v3))
  {
    offset = 0;
    v14 = nw_frame_unclaimed_bytes(v4, &offset);
    if (v14)
    {
      v15 = v14;
      v16 = offset;
      v17 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
      if (offset)
      {
        if (v17 > offset)
        {
          if (gLogDatapath)
          {
            v84 = v14;
            __nwlog_obj();
            v85 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
            {
              v86 = a1[4];
              if (v86)
                v87 = (const char *)(v86 + 609);
              else
                v87 = "";
              v88 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
              *(_DWORD *)buf = 136446978;
              v93 = "nw_framer_flush_output_block_invoke";
              v94 = 2080;
              v95 = (void *)v87;
              v96 = 1024;
              LODWORD(v97[0]) = offset;
              WORD2(v97[0]) = 2048;
              *(_QWORD *)((char *)v97 + 6) = v88;
              _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s %s Set partial frame output_length %u < %zu bytes", buf, 0x26u);
            }

            v16 = offset;
            v15 = v84;
          }
          nw_dispatch_data_copyout_from_offset(*(NSObject **)(*(_QWORD *)(a1[6] + 8) + 40), v15, v16, 0);
          subrange = dispatch_data_create_subrange(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40), offset, *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) - offset);
          v19 = *(_QWORD *)(a1[6] + 8);
          v20 = *(void **)(v19 + 40);
          *(_QWORD *)(v19 + 40) = subrange;

          size = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
          goto LABEL_60;
        }
LABEL_56:
        if (gLogDatapath)
        {
          v79 = v14;
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            v81 = a1[4];
            if (v81)
              v82 = (const char *)(v81 + 609);
            else
              v82 = "";
            v83 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
            *(_DWORD *)buf = 136446722;
            v93 = "nw_framer_flush_output_block_invoke";
            v94 = 2080;
            v95 = (void *)v82;
            v96 = 2048;
            v97[0] = v83;
            _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, "%{public}s %s Set frame %zu bytes", buf, 0x20u);
          }

          v17 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
          v15 = v79;
        }
        nw_dispatch_data_copyout_from_offset(*(NSObject **)(*(_QWORD *)(a1[6] + 8) + 40), v15, v17, 0);
        if ((*(_BYTE *)(a1[4] + 607) & 0x20) != 0)
        {
          *(_BYTE *)(v4 + 186) |= 0x80u;
          *(_BYTE *)(a1[4] + 607) &= ~0x20u;
        }
        nw_frame_claim(v4, v44, *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24), 0);
        nw_frame_collapse(v4);
        nw_frame_unclaim(v4, v45, *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24), 0);
        v46 = *(_QWORD *)(a1[6] + 8);
        v47 = *(void **)(v46 + 40);
        *(_QWORD *)(v46 + 40) = 0;

        size = 0;
LABEL_60:
        *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = size;
        v33 = a1[5];
        if (!v33)
          goto LABEL_55;
        goto LABEL_42;
      }
      if (!v17)
        goto LABEL_56;
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v64 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        v65 = a1[4];
        if (v65)
          v66 = (const char *)(v65 + 609);
        else
          v66 = "";
        v67 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v93 = "nw_framer_flush_output_block_invoke";
        v94 = 2080;
        v95 = (void *)v66;
        v96 = 1024;
        LODWORD(v97[0]) = offset;
        WORD2(v97[0]) = 2048;
        *(_QWORD *)((char *)v97 + 6) = v67;
        _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %s Dropping empty output frame %u < %zu bytes", buf, 0x26u);
      }

    }
    goto LABEL_37;
  }
  v5 = nw_frame_unclaimed_length((_DWORD *)v4);
  v6 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
  if (v5)
  {
    v7 = v5;
    if (v6 > v5)
    {
      if (gLogDatapath)
      {
        v74 = v5;
        __nwlog_obj();
        v75 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
        {
          v76 = a1[4];
          if (v76)
            v77 = (const char *)(v76 + 609);
          else
            v77 = "";
          v78 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
          *(_DWORD *)buf = 136446978;
          v93 = "nw_framer_flush_output_block_invoke";
          v94 = 2080;
          v95 = (void *)v77;
          v96 = 1024;
          LODWORD(v97[0]) = v74;
          WORD2(v97[0]) = 2048;
          *(_QWORD *)((char *)v97 + 6) = v78;
          _os_log_impl(&dword_182FBE000, v75, OS_LOG_TYPE_DEBUG, "%{public}s %s Set partial external frame output_length %u < %zu bytes", buf, 0x26u);
        }

      }
      v8 = dispatch_data_create_subrange(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40), 0, v7);
      v9 = dispatch_data_create_subrange(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40), v7, *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) - v7);
      v10 = *(_QWORD *)(a1[6] + 8);
      v11 = *(void **)(v10 + 40);
      *(_QWORD *)(v10 + 40) = v9;

      nw_frame_set_external_data(v4, v8, 0);
      *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8)
                                                                                               + 40));

LABEL_41:
      v33 = a1[5];
      if (!v33)
        goto LABEL_55;
LABEL_42:
      v36 = *(_DWORD *)(v33 + 176);
      if (!v36)
      {
LABEL_46:
        ecn_flag = nw_frame_get_ecn_flag(a1[5]);
        if (ecn_flag)
        {
          v38 = ecn_flag;
          if (gLogDatapath)
          {
            __nwlog_obj();
            v55 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
            {
              v56 = a1[4];
              *(_DWORD *)buf = 136446722;
              v93 = "nw_framer_flush_output_block_invoke";
              if (v56)
                v57 = (const char *)(v56 + 609);
              else
                v57 = "";
              v94 = 2080;
              v95 = (void *)v57;
              v96 = 1024;
              LODWORD(v97[0]) = v38;
              _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %s Setting ECN flag %u on output frame", buf, 0x1Cu);
            }

          }
          nw_frame_set_ecn_flag(v4, v38);
        }
        expire_time = nw_frame_get_expire_time(a1[5]);
        if (expire_time)
        {
          v40 = expire_time;
          if (gLogDatapath)
          {
            __nwlog_obj();
            v58 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
            {
              v59 = a1[4];
              *(_DWORD *)buf = 136446722;
              v93 = "nw_framer_flush_output_block_invoke";
              if (v59)
                v60 = (const char *)(v59 + 609);
              else
                v60 = "";
              v94 = 2080;
              v95 = (void *)v60;
              v96 = 2048;
              v97[0] = v40;
              _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %s Setting expire time %llu on output frame", buf, 0x20u);
            }

          }
          nw_frame_set_expire_time(v4, v40);
        }
        packet_id = nw_frame_get_packet_id(a1[5]);
        if (packet_id)
        {
          v42 = (_OWORD *)packet_id;
          if (gLogDatapath)
          {
            __nwlog_obj();
            v61 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
            {
              v62 = a1[4];
              if (v62)
                v63 = (const char *)(v62 + 609);
              else
                v63 = "";
              *(_DWORD *)buf = 136446466;
              v93 = "nw_framer_flush_output_block_invoke";
              v94 = 2080;
              v95 = (void *)v63;
              _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_DEBUG, "%{public}s %s Setting packet ID on output frame", buf, 0x16u);
            }

          }
          nw_frame_set_packet_id(v4, v42);
        }
        goto LABEL_55;
      }
      if (gLogDatapath)
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEBUG))
        {
          v49 = a1[4];
          *(_DWORD *)buf = 136446722;
          v93 = "nw_framer_flush_output_block_invoke";
          if (v49)
            v50 = (const char *)(v49 + 609);
          else
            v50 = "";
          v94 = 2080;
          v95 = (void *)v50;
          v96 = 1024;
          LODWORD(v97[0]) = v36;
          _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_DEBUG, "%{public}s %s Setting service class 0x%x on output frame", buf, 0x1Cu);
        }

      }
      if (v4)
      {
        *(_DWORD *)(v4 + 176) = v36;
        goto LABEL_46;
      }
      __nwlog_obj();
      *(_DWORD *)buf = 136446210;
      v93 = "nw_frame_set_service_class";
      v51 = (const char *)_os_log_send_and_compose_impl();
      LOBYTE(offset) = 16;
      offset_7 = 0;
      v89 = (char *)v51;
      if (__nwlog_fault(v51, &offset, &offset_7))
      {
        if (offset == 17)
        {
          v52 = __nwlog_obj();
          v53 = offset;
          if (!os_log_type_enabled(v52, (os_log_type_t)offset))
            goto LABEL_130;
          *(_DWORD *)buf = 136446210;
          v93 = "nw_frame_set_service_class";
          v54 = "%{public}s called with null frame";
          goto LABEL_129;
        }
        if (!offset_7)
        {
          v52 = __nwlog_obj();
          v53 = offset;
          if (!os_log_type_enabled(v52, (os_log_type_t)offset))
            goto LABEL_130;
          *(_DWORD *)buf = 136446210;
          v93 = "nw_frame_set_service_class";
          v54 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_129;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        v52 = __nwlog_obj();
        v53 = offset;
        v73 = os_log_type_enabled(v52, (os_log_type_t)offset);
        if (backtrace_string)
        {
          if (v73)
          {
            *(_DWORD *)buf = 136446466;
            v93 = "nw_frame_set_service_class";
            v94 = 2082;
            v95 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_130;
        }
        if (v73)
        {
          *(_DWORD *)buf = 136446210;
          v93 = "nw_frame_set_service_class";
          v54 = "%{public}s called with null frame, no backtrace";
LABEL_129:
          _os_log_impl(&dword_182FBE000, v52, v53, v54, buf, 0xCu);
        }
      }
LABEL_130:
      if (v89)
        free(v89);
      goto LABEL_46;
    }
    goto LABEL_30;
  }
  if (v6)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
      {
        v26 = a1[4];
        if (v26)
          v27 = (const char *)(v26 + 609);
        else
          v27 = "";
        v28 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v93 = "nw_framer_flush_output_block_invoke";
        v94 = 2080;
        v95 = (void *)v27;
        v96 = 1024;
        LODWORD(v97[0]) = 0;
        WORD2(v97[0]) = 2048;
        *(_QWORD *)((char *)v97 + 6) = v28;
        _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s %s Dropping empty output external frame %u < %zu bytes", buf, 0x26u);
      }

    }
LABEL_37:
    nw_frame_finalize(v4);
    v34 = *(_QWORD *)(v4 + 32);
    v35 = *(_QWORD **)(v4 + 40);
    if (v34)
    {
      *(_QWORD *)(v34 + 40) = v35;
      v35 = *(_QWORD **)(v4 + 40);
    }
    else
    {
      *(_QWORD *)(a1[8] + 8) = v35;
    }
    *v35 = v34;
    *(_QWORD *)(v4 + 32) = 0;
    *(_QWORD *)(v4 + 40) = 0;
    goto LABEL_41;
  }
LABEL_30:
  if (gLogDatapath)
  {
    __nwlog_obj();
    v68 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
    {
      v69 = a1[4];
      if (v69)
        v70 = (const char *)(v69 + 609);
      else
        v70 = "";
      v71 = *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24);
      *(_DWORD *)buf = 136446722;
      v93 = "nw_framer_flush_output_block_invoke";
      v94 = 2080;
      v95 = (void *)v70;
      v96 = 2048;
      v97[0] = v71;
      _os_log_impl(&dword_182FBE000, v68, OS_LOG_TYPE_DEBUG, "%{public}s %s Set external frame %zu bytes", buf, 0x20u);
    }

  }
  nw_frame_set_external_data(v4, *(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40), 0);
  if ((*(_BYTE *)(a1[4] + 607) & 0x20) != 0)
  {
    *(_BYTE *)(v4 + 186) |= 0x80u;
    *(_BYTE *)(a1[4] + 607) &= ~0x20u;
  }
  nw_frame_claim(v4, v29, *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24), 0);
  nw_frame_collapse(v4);
  nw_frame_unclaim(v4, v30, *(_DWORD *)(*(_QWORD *)(a1[7] + 8) + 24), 0);
  v31 = *(_QWORD *)(a1[6] + 8);
  v32 = *(void **)(v31 + 40);
  *(_QWORD *)(v31 + 40) = 0;

  *(_QWORD *)(*(_QWORD *)(a1[7] + 8) + 24) = 0;
  v33 = a1[5];
  if (v33)
    goto LABEL_42;
LABEL_55:

  return 1;
}

void nw_framer_write_output(nw_framer_t framer, const uint8_t *output_buffer, size_t output_length)
{
  nw_framer_t v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v5 = framer;
  v6 = v5;
  if (v5)
  {
    nw_context_assert_queue(v5[46].isa);
    v7 = dispatch_data_create(output_buffer, output_length, 0, 0);
    nw_framer_write_output_data(v6, v7);

    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_framer_write_output";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_framer_write_output";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_framer_write_output";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_framer_write_output";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_framer_write_output";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void sub_1833C8008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_framer_write_output_no_copy(nw_framer_t framer, size_t output_length)
{
  nw_framer_t v3;
  nw_framer_t v4;
  NSObject *v5;
  BOOL v6;
  NSObject *v7;
  uint64_t (*v8)(uint64_t, uint64_t);
  int v9;
  int v10;
  uint64_t isa;
  _BOOL8 v12;
  Class v13;
  uint64_t v14;
  void *v15;
  void *v16;
  char *v17;
  Class v18;
  objc_class *v19;
  char v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _QWORD v34[2];
  uint64_t (*v35)(_QWORD *);
  void *v36;
  id v37;
  os_log_type_t *v38;
  _BYTE *v39;
  os_log_type_t type[8];
  os_log_type_t *v41;
  uint64_t v42;
  size_t v43;
  uint8_t v44[4];
  const char *v45;
  __int16 v46;
  char *v47;
  __int16 v48;
  uint64_t v49;
  _BYTE buf[24];
  uint64_t (*v51)(uint64_t, uint64_t);
  void (*v52)(uint64_t);
  id v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v3 = framer;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_write_output_no_copy";
    v27 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44[0] = 0;
    if (__nwlog_fault(v27, type, v44))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_framer_write_output_no_copy";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v44[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type[0];
        v32 = os_log_type_enabled(v28, type[0]);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_framer_write_output_no_copy";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_46;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_framer_write_output_no_copy";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type[0];
        if (os_log_type_enabled(v28, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_framer_write_output_no_copy";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_46:
    if (v27)
      free(v27);
    goto LABEL_6;
  }
  nw_context_assert_queue(v3[46].isa);
  if ((HIBYTE(v4[75].isa) & 4) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_framer_write_output_no_copy";
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s Cannot write output when not in output handler", buf, 0xCu);
    }

LABEL_6:
    v6 = 0;
    goto LABEL_29;
  }
  *(_QWORD *)type = 0;
  v41 = type;
  v42 = 0x2020000000;
  v43 = output_length;
  if (output_length)
  {
    if (LODWORD(v4[75].isa) + output_length <= LODWORD(v4[74].isa))
    {
      isa = (uint64_t)v4[69].isa;
      if (!isa)
      {
        v12 = nw_array_create();
        v13 = v4[69].isa;
        v4[69].isa = (Class)v12;

        isa = (uint64_t)v4[69].isa;
      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v51 = __Block_byref_object_copy__4439;
      v52 = __Block_byref_object_dispose__4440;
      v53 = 0;
      if (isa)
      {
        v14 = *(_QWORD *)(isa + 24) - *(_QWORD *)(isa + 16);
        if (v14)
        {
          v15 = nw_array_remove_object_at_index(isa, (char *)((v14 >> 3) - 1));
          v16 = *(void **)(*(_QWORD *)&buf[8] + 40);
          *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v15;

        }
      }
      v34[0] = MEMORY[0x1E0C809B0];
      v34[1] = 3221225472;
      v35 = (uint64_t (*)(_QWORD *))__nw_framer_write_output_no_copy_block_invoke;
      v36 = &unk_1E149ABB0;
      v17 = v4;
      v37 = v17;
      v38 = type;
      v39 = buf;
      v18 = v4[71].isa;
      do
      {
        if (!v18)
          break;
        v19 = (objc_class *)*((_QWORD *)v18 + 4);
        v20 = v35(v34);
        v18 = v19;
      }
      while ((v20 & 1) != 0);
      v21 = *(void **)(*(_QWORD *)&buf[8] + 40);
      if (v21)
        nw_array_append((uint64_t)v4[69].isa, v21);
      v22 = *((_QWORD *)v41 + 3);
      v6 = v22 == 0;
      if (v22)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = (id)gLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          v24 = *((_QWORD *)v41 + 3);
          *(_DWORD *)v44 = 136446722;
          v45 = "nw_framer_write_output_no_copy";
          v46 = 2080;
          v47 = v17 + 609;
          v48 = 2048;
          v49 = v24;
          _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s %s Failed to write entire length, still have %zu bytes", v44, 0x20u);
        }

      }
      _Block_object_dispose(buf, 8);

    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = (id)gLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        v8 = (uint64_t (*)(uint64_t, uint64_t))*((_QWORD *)v41 + 3);
        v9 = (int)v4[75].isa;
        v10 = (int)v4[74].isa;
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_framer_write_output_no_copy";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = (char *)v4 + 609;
        *(_WORD *)&buf[22] = 2048;
        v51 = v8;
        LOWORD(v52) = 1024;
        *(_DWORD *)((char *)&v52 + 2) = v9;
        HIWORD(v52) = 1024;
        LODWORD(v53) = v10;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s %s Cannot write %zu bytes, already have %u/%u", buf, 0x2Cu);
      }

      v6 = 0;
    }
  }
  else
  {
    nw_framer_flush_output(v4, 0);
    v6 = 1;
  }
  _Block_object_dispose(type, 8);
LABEL_29:

  return v6;
}

void sub_1833C8600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL __nw_framer_write_output_no_copy_block_invoke(_QWORD *a1, void *a2)
{
  _QWORD *v3;
  NSObject *v4;
  size_t v5;
  uint64_t v6;
  const void *v7;
  NSObject *v8;
  uint64_t v9;
  id *v10;
  NSObject *v11;
  NSObject *v12;
  dispatch_data_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  size_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  id *v25;
  NSObject *v26;
  NSObject *v27;
  dispatch_data_t v28;
  uint64_t v29;
  void *v30;
  NSObject *v31;
  uint64_t v32;
  const char *v33;
  size_t v34;
  int v35;
  const char *v36;
  NSObject *subrange;
  uint64_t v38;
  id *v39;
  NSObject *v40;
  NSObject *v41;
  dispatch_data_t concat;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  const char *v48;
  size_t v49;
  uint64_t v50;
  const char *v51;
  uint64_t v52;
  id *v53;
  NSObject *v54;
  NSObject *v55;
  dispatch_data_t v56;
  uint64_t v57;
  void *v58;
  NSObject *v59;
  uint64_t v60;
  const char *v61;
  size_t v62;
  const char *v63;
  NSObject *v64;
  uint64_t v65;
  const char *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  id *v70;
  NSObject *v71;
  NSObject *v72;
  dispatch_data_t v73;
  uint64_t v74;
  void *v75;
  NSObject *v76;
  uint64_t v77;
  const char *v78;
  size_t v79;
  const char *v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  const char *v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  int v97;
  uint64_t v98;
  NSObject *v99;
  uint64_t v100;
  const char *v101;
  NSObject *v102;
  uint64_t v103;
  const char *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  const char *v108;
  int v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  size_t v113;
  uint64_t v114;
  int v115;
  uint64_t v116;
  const char *v117;
  size_t v118;
  int v119;
  uint64_t v120;
  const char *v121;
  size_t v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  size_t v126;
  uint64_t v127;
  const char *v128;
  size_t v129;
  size_t size;
  uint8_t buf[4];
  const char *v132;
  __int16 v133;
  const char *v134;
  __int16 v135;
  _BYTE v136[20];
  int v137;
  uint64_t v138;

  v138 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  if (nw_frame_uses_external_data((uint64_t)v3))
  {
    size = 0;
    v4 = nw_frame_copy_external_data((uint64_t)v3, (_DWORD *)&size + 1, &size);
    if (gLogDatapath)
    {
      __nwlog_obj();
      v99 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v99, OS_LOG_TYPE_DEBUG))
      {
        v100 = a1[4];
        if (v100)
          v101 = (const char *)(v100 + 609);
        else
          v101 = "";
        *(_DWORD *)buf = 136446978;
        v132 = "nw_framer_write_output_no_copy_block_invoke";
        v133 = 2080;
        v134 = v101;
        v135 = 1024;
        *(_DWORD *)v136 = size;
        *(_WORD *)&v136[4] = 1024;
        *(_DWORD *)&v136[6] = HIDWORD(size);
        _os_log_impl(&dword_182FBE000, v99, OS_LOG_TYPE_DEBUG, "%{public}s %s Writing %u external data bytes from offset %u", buf, 0x22u);
      }

    }
    if (HIDWORD(size))
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
      goto LABEL_22;
    }
    v5 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    if (v5 < size)
    {
LABEL_22:
      if (v5 < size)
      {
        subrange = dispatch_data_create_subrange(v4, HIDWORD(size), v5);
        v38 = *(_QWORD *)(a1[6] + 8);
        v41 = *(NSObject **)(v38 + 40);
        v39 = (id *)(v38 + 40);
        v40 = v41;
        if (v41)
        {
          concat = dispatch_data_create_concat(v40, subrange);
          v43 = *(_QWORD *)(a1[6] + 8);
          v44 = *(void **)(v43 + 40);
          *(_QWORD *)(v43 + 40) = concat;

          if (!gLogDatapath)
            goto LABEL_57;
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
            goto LABEL_121;
          v47 = a1[4];
          if (v47)
            v48 = (const char *)(v47 + 609);
          else
            v48 = "";
          v49 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
          v50 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
          *(_DWORD *)buf = 136447234;
          v132 = "nw_framer_write_output_no_copy_block_invoke";
          v133 = 2080;
          v134 = v48;
          v135 = 2048;
          *(_QWORD *)v136 = v49;
          *(_WORD *)&v136[8] = 2048;
          *(_QWORD *)&v136[10] = v50;
          *(_WORD *)&v136[18] = 1024;
          v137 = HIDWORD(size);
          v51 = "%{public}s %s Appending subrange data to output data, now %zu bytes from length %zu offset %u";
        }
        else
        {
          objc_storeStrong(v39, subrange);
          if (!gLogDatapath)
            goto LABEL_57;
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
          {
LABEL_121:

LABEL_57:
            nw_frame_claim((uint64_t)v3, v45, *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
            *(_DWORD *)(a1[4] + 600) += *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
            *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
            if (gLogDatapath)
            {
              __nwlog_obj();
              v82 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
              {
                v83 = a1[4];
                v84 = (const char *)(v83 + 609);
                if (!v83)
                  v84 = "";
                v85 = *(_DWORD *)(v83 + 600);
                v86 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
                *(_DWORD *)buf = 136446978;
                v132 = "nw_framer_write_output_no_copy_block_invoke";
                v133 = 2080;
                v134 = v84;
                v135 = 1024;
                *(_DWORD *)v136 = v85;
                *(_WORD *)&v136[4] = 2048;
                *(_QWORD *)&v136[6] = v86;
                _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %s Pending output cursor %u, remaining output %zu", buf, 0x26u);
              }
LABEL_62:

            }
LABEL_68:

LABEL_69:
            goto LABEL_70;
          }
          v120 = a1[4];
          if (v120)
            v121 = (const char *)(v120 + 609);
          else
            v121 = "";
          v122 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
          v123 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
          *(_DWORD *)buf = 136447234;
          v132 = "nw_framer_write_output_no_copy_block_invoke";
          v133 = 2080;
          v134 = v121;
          v135 = 2048;
          *(_QWORD *)v136 = v122;
          *(_WORD *)&v136[8] = 2048;
          *(_QWORD *)&v136[10] = v123;
          *(_WORD *)&v136[18] = 1024;
          v137 = HIDWORD(size);
          v51 = "%{public}s %s Setting subrange data as output data, %zu bytes from length %zu offset %u";
        }
        _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, v51, buf, 0x30u);
        goto LABEL_121;
      }
      subrange = dispatch_data_create_subrange(v4, HIDWORD(size), size);
      v52 = *(_QWORD *)(a1[6] + 8);
      v55 = *(NSObject **)(v52 + 40);
      v53 = (id *)(v52 + 40);
      v54 = v55;
      if (v55)
      {
        v56 = dispatch_data_create_concat(v54, subrange);
        v57 = *(_QWORD *)(a1[6] + 8);
        v58 = *(void **)(v57 + 40);
        *(_QWORD *)(v57 + 40) = v56;

        if (gLogDatapath)
        {
          __nwlog_obj();
          v59 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            v60 = a1[4];
            if (v60)
              v61 = (const char *)(v60 + 609);
            else
              v61 = "";
            v62 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
            *(_DWORD *)buf = 136446978;
            v132 = "nw_framer_write_output_no_copy_block_invoke";
            v133 = 2080;
            v134 = v61;
            v135 = 2048;
            *(_QWORD *)v136 = v62;
            *(_WORD *)&v136[8] = 1024;
            *(_DWORD *)&v136[10] = HIDWORD(size);
            v63 = "%{public}s %s Appending subrange data to output data, now %zu bytes from offset %u";
LABEL_127:
            _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_DEBUG, v63, buf, 0x26u);
            goto LABEL_128;
          }
          goto LABEL_128;
        }
      }
      else
      {
        objc_storeStrong(v53, subrange);
        if (gLogDatapath)
        {
          __nwlog_obj();
          v59 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
          {
            v124 = a1[4];
            if (v124)
              v125 = (const char *)(v124 + 609);
            else
              v125 = "";
            v126 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
            *(_DWORD *)buf = 136446978;
            v132 = "nw_framer_write_output_no_copy_block_invoke";
            v133 = 2080;
            v134 = v125;
            v135 = 2048;
            *(_QWORD *)v136 = v126;
            *(_WORD *)&v136[8] = 1024;
            *(_DWORD *)&v136[10] = HIDWORD(size);
            v63 = "%{public}s %s Setting subrange data as output data, %zu bytes from offset %u";
            goto LABEL_127;
          }
LABEL_128:

        }
      }
      nw_frame_set_external_data((uint64_t)v3, 0, 0);
      v87 = v3[4];
      v88 = (_QWORD *)v3[5];
      if (v87)
      {
        *(_QWORD *)(v87 + 40) = v88;
        v88 = (_QWORD *)v3[5];
      }
      else
      {
        *(_QWORD *)(a1[4] + 576) = v88;
      }
      *v88 = v87;
      v3[4] = 0;
      v3[5] = 0;
      nw_frame_finalize((uint64_t)v3);
      v89 = size;
      *(_DWORD *)(a1[4] + 600) += size;
      *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v89;
      if (!gLogDatapath)
        goto LABEL_68;
      __nwlog_obj();
      v82 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
      {
        v107 = a1[4];
        v108 = (const char *)(v107 + 609);
        if (!v107)
          v108 = "";
        v109 = *(_DWORD *)(v107 + 600);
        v110 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
        *(_DWORD *)buf = 136446978;
        v132 = "nw_framer_write_output_no_copy_block_invoke";
        v133 = 2080;
        v134 = v108;
        v135 = 1024;
        *(_DWORD *)v136 = v109;
        *(_WORD *)&v136[4] = 2048;
        *(_QWORD *)&v136[6] = v110;
        _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s %s Pending output cursor %u, remaining output %zu", buf, 0x26u);
      }
      goto LABEL_62;
    }
    v69 = *(_QWORD *)(a1[6] + 8);
    v72 = *(NSObject **)(v69 + 40);
    v70 = (id *)(v69 + 40);
    v71 = v72;
    if (v72)
    {
      v73 = dispatch_data_create_concat(v71, v4);
      v74 = *(_QWORD *)(a1[6] + 8);
      v75 = *(void **)(v74 + 40);
      *(_QWORD *)(v74 + 40) = v73;

      if (gLogDatapath)
      {
        __nwlog_obj();
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
        {
          v77 = a1[4];
          if (v77)
            v78 = (const char *)(v77 + 609);
          else
            v78 = "";
          v79 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
          *(_DWORD *)buf = 136446722;
          v132 = "nw_framer_write_output_no_copy_block_invoke";
          v133 = 2080;
          v134 = v78;
          v135 = 2048;
          *(_QWORD *)v136 = v79;
          v80 = "%{public}s %s Appending message data to output data, now %zu bytes";
LABEL_134:
          _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_DEBUG, v80, buf, 0x20u);
          goto LABEL_135;
        }
        goto LABEL_135;
      }
    }
    else
    {
      objc_storeStrong(v70, v4);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v76 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
        {
          v127 = a1[4];
          if (v127)
            v128 = (const char *)(v127 + 609);
          else
            v128 = "";
          v129 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
          *(_DWORD *)buf = 136446722;
          v132 = "nw_framer_write_output_no_copy_block_invoke";
          v133 = 2080;
          v134 = v128;
          v135 = 2048;
          *(_QWORD *)v136 = v129;
          v80 = "%{public}s %s Setting message data as output data, %zu bytes";
          goto LABEL_134;
        }
LABEL_135:

      }
    }
    nw_frame_set_external_data((uint64_t)v3, 0, 0);
    v92 = v3[4];
    v93 = (_QWORD *)v3[5];
    if (v92)
    {
      *(_QWORD *)(v92 + 40) = v93;
      v93 = (_QWORD *)v3[5];
    }
    else
    {
      *(_QWORD *)(a1[4] + 576) = v93;
    }
    *v93 = v92;
    v3[4] = 0;
    v3[5] = 0;
    nw_frame_finalize((uint64_t)v3);
    v94 = size;
    *(_DWORD *)(a1[4] + 600) += size;
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v94;
    if (!gLogDatapath)
      goto LABEL_69;
    __nwlog_obj();
    subrange = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(subrange, OS_LOG_TYPE_DEBUG))
    {
      v95 = a1[4];
      v96 = (const char *)(v95 + 609);
      if (!v95)
        v96 = "";
      v97 = *(_DWORD *)(v95 + 600);
      v98 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
      *(_DWORD *)buf = 136446978;
      v132 = "nw_framer_write_output_no_copy_block_invoke";
      v133 = 2080;
      v134 = v96;
      v135 = 1024;
      *(_DWORD *)v136 = v97;
      *(_WORD *)&v136[4] = 2048;
      *(_QWORD *)&v136[6] = v98;
      _os_log_impl(&dword_182FBE000, subrange, OS_LOG_TYPE_DEBUG, "%{public}s %s Pending output cursor %u, remaining output %zu", buf, 0x26u);
    }
    goto LABEL_68;
  }
  HIDWORD(size) = 0;
  v6 = nw_frame_unclaimed_bytes((uint64_t)v3, (_DWORD *)&size + 1);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v102 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
    {
      v103 = a1[4];
      v104 = (const char *)(v103 + 609);
      if (!v103)
        v104 = "";
      *(_DWORD *)buf = 136446722;
      v132 = "nw_framer_write_output_no_copy_block_invoke";
      v133 = 2080;
      v134 = v104;
      v135 = 1024;
      *(_DWORD *)v136 = HIDWORD(size);
      _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_DEBUG, "%{public}s %s Writing %u data bytes", buf, 0x1Cu);
    }

  }
  v7 = (const void *)(v6 + *(unsigned int *)(a1[4] + 600));
  if (*(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) >= (unint64_t)HIDWORD(size))
  {
    v8 = dispatch_data_create(v7, HIDWORD(size), 0, 0);
    v24 = *(_QWORD *)(a1[6] + 8);
    v27 = *(NSObject **)(v24 + 40);
    v25 = (id *)(v24 + 40);
    v26 = v27;
    if (v27)
    {
      v28 = dispatch_data_create_concat(v26, v8);
      v29 = *(_QWORD *)(a1[6] + 8);
      v30 = *(void **)(v29 + 40);
      *(_QWORD *)(v29 + 40) = v28;

      if (gLogDatapath)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          v32 = a1[4];
          if (v32)
            v33 = (const char *)(v32 + 609);
          else
            v33 = "";
          v34 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
          v35 = *(_DWORD *)(v32 + 600);
          *(_DWORD *)buf = 136447234;
          v132 = "nw_framer_write_output_no_copy_block_invoke";
          v133 = 2080;
          v134 = v33;
          v135 = 2048;
          *(_QWORD *)v136 = v34;
          *(_WORD *)&v136[8] = 1024;
          *(_DWORD *)&v136[10] = HIDWORD(size);
          *(_WORD *)&v136[14] = 1024;
          *(_DWORD *)&v136[16] = v35;
          v36 = "%{public}s %s Appending message data to output data, now %zu bytes, %u bytes from offset %u";
LABEL_113:
          _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, v36, buf, 0x2Cu);
          goto LABEL_114;
        }
        goto LABEL_114;
      }
    }
    else
    {
      objc_storeStrong(v25, v8);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
        {
          v116 = a1[4];
          if (v116)
            v117 = (const char *)(v116 + 609);
          else
            v117 = "";
          v118 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
          v119 = *(_DWORD *)(v116 + 600);
          *(_DWORD *)buf = 136447234;
          v132 = "nw_framer_write_output_no_copy_block_invoke";
          v133 = 2080;
          v134 = v117;
          v135 = 2048;
          *(_QWORD *)v136 = v118;
          *(_WORD *)&v136[8] = 1024;
          *(_DWORD *)&v136[10] = HIDWORD(size);
          *(_WORD *)&v136[14] = 1024;
          *(_DWORD *)&v136[16] = v119;
          v36 = "%{public}s %s Setting message data as output data, %zu bytes, %u bytes from offset %u";
          goto LABEL_113;
        }
LABEL_114:

      }
    }
    v67 = v3[4];
    v68 = (_QWORD *)v3[5];
    if (v67)
    {
      *(_QWORD *)(v67 + 40) = v68;
      v68 = (_QWORD *)v3[5];
    }
    else
    {
      *(_QWORD *)(a1[4] + 576) = v68;
    }
    *v68 = v67;
    v3[4] = 0;
    v3[5] = 0;
    nw_frame_finalize((uint64_t)v3);
    v81 = HIDWORD(size);
    *(_DWORD *)(a1[4] + 600) += HIDWORD(size);
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) -= v81;
    if (!gLogDatapath)
      goto LABEL_55;
    __nwlog_obj();
    v64 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      goto LABEL_95;
    v65 = a1[4];
    v66 = (const char *)(v65 + 609);
    if (!v65)
      v66 = "";
    goto LABEL_94;
  }
  v8 = dispatch_data_create(v7, *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24), 0, 0);
  v9 = *(_QWORD *)(a1[6] + 8);
  v12 = *(NSObject **)(v9 + 40);
  v10 = (id *)(v9 + 40);
  v11 = v12;
  if (v12)
  {
    v13 = dispatch_data_create_concat(v11, v8);
    v14 = *(_QWORD *)(a1[6] + 8);
    v15 = *(void **)(v14 + 40);
    *(_QWORD *)(v14 + 40) = v13;

    if (!gLogDatapath)
      goto LABEL_38;
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      goto LABEL_107;
    v18 = a1[4];
    if (v18)
      v19 = (const char *)(v18 + 609);
    else
      v19 = "";
    v20 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
    v21 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v22 = *(_DWORD *)(v18 + 600);
    *(_DWORD *)buf = 136447234;
    v132 = "nw_framer_write_output_no_copy_block_invoke";
    v133 = 2080;
    v134 = v19;
    v135 = 2048;
    *(_QWORD *)v136 = v20;
    *(_WORD *)&v136[8] = 2048;
    *(_QWORD *)&v136[10] = v21;
    *(_WORD *)&v136[18] = 1024;
    v137 = v22;
    v23 = "%{public}s %s Appending message data to output data, now %zu bytes, %zu bytes from offset %u";
    goto LABEL_106;
  }
  objc_storeStrong(v10, v8);
  if (!gLogDatapath)
    goto LABEL_38;
  __nwlog_obj();
  v17 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    v111 = a1[4];
    if (v111)
      v112 = (const char *)(v111 + 609);
    else
      v112 = "";
    v113 = dispatch_data_get_size(*(dispatch_data_t *)(*(_QWORD *)(a1[6] + 8) + 40));
    v114 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v115 = *(_DWORD *)(v111 + 600);
    *(_DWORD *)buf = 136447234;
    v132 = "nw_framer_write_output_no_copy_block_invoke";
    v133 = 2080;
    v134 = v112;
    v135 = 2048;
    *(_QWORD *)v136 = v113;
    *(_WORD *)&v136[8] = 2048;
    *(_QWORD *)&v136[10] = v114;
    *(_WORD *)&v136[18] = 1024;
    v137 = v115;
    v23 = "%{public}s %s Setting message data to output data, now %zu bytes, %zu bytes from offset %u";
LABEL_106:
    _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, v23, buf, 0x30u);
  }
LABEL_107:

LABEL_38:
  nw_frame_claim((uint64_t)v3, v16, *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24), 0);
  *(_DWORD *)(a1[4] + 600) += *(_DWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
  *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = 0;
  if (gLogDatapath)
  {
    __nwlog_obj();
    v64 = objc_claimAutoreleasedReturnValue();
    if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
    {
LABEL_95:

      goto LABEL_55;
    }
    v65 = a1[4];
    v66 = (const char *)(v65 + 609);
    if (!v65)
      v66 = "";
LABEL_94:
    v105 = *(_DWORD *)(v65 + 600);
    v106 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    *(_DWORD *)buf = 136446978;
    v132 = "nw_framer_write_output_no_copy_block_invoke";
    v133 = 2080;
    v134 = v66;
    v135 = 1024;
    *(_DWORD *)v136 = v105;
    *(_WORD *)&v136[4] = 2048;
    *(_QWORD *)&v136[6] = v106;
    _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s %s Pending output cursor %u, remaining output %zu", buf, 0x26u);
    goto LABEL_95;
  }
LABEL_55:

LABEL_70:
  v90 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) != 0;

  return v90;
}

void nw_framer_resume_input(void *a1)
{
  void **v1;
  void **v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46]);
    if (((_BYTE)v2[76] & 1) == 0)
    {
      *((_BYTE *)v2 + 608) &= ~4u;
      nw_framer_input_loop((NWConcrete_nw_framer *)v2);
      nw_framer_signal_input_available((NWConcrete_nw_framer *)v2);
    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_framer_resume_input";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_resume_input";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_framer_resume_input";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_resume_input";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_resume_input";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v4)
    free(v4);
LABEL_4:

}

void sub_1833C985C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_input_loop(NWConcrete_nw_framer *a1)
{
  NWConcrete_nw_framer *v1;
  int v2;

  v1 = a1;
  do
  {
    if (v1->received_input_frames.tqh_first)
    {
      v2 = 0;
      nw_frame_array_get_frame_count((uint64_t *)&v1->received_input_frames, 1, &v2);
    }
    nw_framer_get_input_from_below(v1);
    if ((*((_BYTE *)v1 + 607) & 2) == 0)
      break;
    nw_framer_process_input_callout(v1);
    if (v1->protocol.default_input_handler)
      break;
  }
  while ((*((_BYTE *)v1 + 608) & 4) == 0);

}

void sub_1833C9910(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_get_input_from_below(NWConcrete_nw_framer *a1)
{
  NWConcrete_nw_framer *v1;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*get_input_frames)(void);
  nw_frame **v5;
  uint64_t v6;
  nw_frame **v7;

  v1 = a1;
  v6 = 0;
  v7 = (nw_frame **)&v6;
  output_handler = v1->protocol.output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      get_input_frames = (void (*)(void))callbacks->get_input_frames;
      if (get_input_frames)
      {
        get_input_frames();
        if (v6)
        {
          *v1->received_input_frames.tqh_last = (nw_frame *)v6;
          v5 = v7;
          *(_QWORD *)(v6 + 40) = v1->received_input_frames.tqh_last;
          v1->received_input_frames.tqh_last = v5;
          *((_BYTE *)v1 + 607) |= 2u;
        }
      }
    }
  }

}

void sub_1833C99C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_process_input_callout(NWConcrete_nw_framer *a1)
{
  NWConcrete_nw_framer *v1;
  NWConcrete_nw_framer *v2;
  int v3;
  int v4;
  uint64_t (**parse_input)(id, NWConcrete_nw_framer *);
  _BYTE *v6;
  int v7;
  int v8;
  uint64_t (**v9)(id, NWConcrete_nw_framer *);
  NSObject *v10;
  unint64_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  NSObject *v20;
  unint64_t input_needed;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *log_str;
  __int16 v28;
  unint64_t v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_framer_process_input_callout";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v13, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_framer_process_input_callout";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v25 = "nw_framer_process_input_callout";
            v26 = 2082;
            log_str = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_framer_process_input_callout";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_framer_process_input_callout";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_41:
    if (v13)
      free(v13);
    goto LABEL_6;
  }
  nw_framer_process_body_input(v1);
  v3 = *((char *)v2 + 607);
  if ((v3 & 0x80000000) == 0)
  {
    v4 = *((char *)v2 + 606);
    if ((v4 & 0x80000000) == 0)
    {
      parse_input = (uint64_t (**)(id, NWConcrete_nw_framer *))v2->parse_input;
      if (parse_input)
      {
        if (!v2->input_body_remaining && v2->received_input_frames.tqh_first)
        {
          *((_BYTE *)v2 + 606) = v4 | 0x80;
          *((_BYTE *)v2 + 607) = v3 & 0xFD;
          v2->input_needed = parse_input[2](parse_input, v2);
          *((_BYTE *)v2 + 606) &= ~0x80u;
          v6 = &unk_1ECD84000;
          if (gLogDatapath)
          {
            __nwlog_obj();
            v20 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
            {
              input_needed = v2->input_needed;
              *(_DWORD *)buf = 136446722;
              v25 = "nw_framer_process_input_callout";
              v26 = 2080;
              log_str = v2->log_str;
              v28 = 2048;
              v29 = input_needed;
              _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %s Requested %zu more bytes", buf, 0x20u);
            }

          }
          if ((*((_BYTE *)v2 + 607) & 2) == 0 || (*((_BYTE *)v2 + 608) & 1) != 0)
          {
LABEL_23:
            if (v2->pending_input_frames.tqh_first)
              nw_framer_signal_input_available(v2);
          }
          else
          {
            while (1)
            {
              nw_framer_process_body_input(v2);
              v7 = *((char *)v2 + 607);
              if (v7 < 0)
                break;
              v8 = *((char *)v2 + 606);
              if (v8 < 0)
                goto LABEL_23;
              v9 = (uint64_t (**)(id, NWConcrete_nw_framer *))v2->parse_input;
              if (!v9 || v2->input_body_remaining || !v2->received_input_frames.tqh_first)
                goto LABEL_23;
              *((_BYTE *)v2 + 606) = v8 | 0x80;
              *((_BYTE *)v2 + 607) = v7 & 0xFD;
              v2->input_needed = v9[2](v9, v2);
              *((_BYTE *)v2 + 606) &= ~0x80u;
              if (v6[1345])
              {
                __nwlog_obj();
                v10 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
                {
                  v11 = v2->input_needed;
                  *(_DWORD *)buf = 136446722;
                  v25 = "nw_framer_process_input_callout";
                  v26 = 2080;
                  log_str = v2->log_str;
                  v28 = 2048;
                  v29 = v11;
                  _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s %s Requested %zu more bytes", buf, 0x20u);
                }

                v6 = (_BYTE *)&unk_1ECD84000;
                if ((*((_BYTE *)v2 + 607) & 2) == 0)
                  goto LABEL_23;
              }
              else if ((*((_BYTE *)v2 + 607) & 2) == 0)
              {
                goto LABEL_23;
              }
              if ((*((_BYTE *)v2 + 608) & 1) != 0)
                goto LABEL_23;
            }
          }
        }
      }
    }
  }
LABEL_6:

}

void sub_1833C9E58(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_process_body_input(NWConcrete_nw_framer *a1)
{
  NWConcrete_nw_framer *v1;
  size_t input_body_remaining;
  BOOL v3;
  NWConcrete_nw_framer *framer;

  framer = a1;
  if (framer->input_body_remaining && framer->received_input_frames.tqh_first)
  {
    v1 = framer;
    do
    {
      input_body_remaining = v1->input_body_remaining;
      if (!input_body_remaining)
        break;
      v1->input_body_remaining = 0;
      v3 = nw_framer_deliver_input_no_copy(&v1->super, input_body_remaining, (nw_framer_message_t)v1->pending_inbound_message, (*((_BYTE *)v1 + 607) & 8) != 0);
      v1 = framer;
    }
    while (v3);
    if (v1->pending_input_frames.tqh_first)
      nw_framer_signal_input_available(framer);
  }

}

void sub_1833C9EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_framer_suspend_input(void *a1)
{
  id v1;
  _BYTE *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 46));
    if ((v2[608] & 1) == 0)
      v2[608] |= 4u;
    goto LABEL_4;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_framer_suspend_input";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_suspend_input";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_framer_suspend_input";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_suspend_input";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_suspend_input";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v4)
    free(v4);
LABEL_4:

}

void sub_1833CA1A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_pass_through_input(nw_framer_t framer)
{
  nw_framer_t v1;
  _BYTE *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = framer;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    v2[608] |= 1u;
    goto LABEL_3;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_framer_pass_through_input";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_pass_through_input";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_framer_pass_through_input";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_pass_through_input";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_pass_through_input";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v4)
    free(v4);
LABEL_3:

}

void sub_1833CA454(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_pass_through_output(nw_framer_t framer)
{
  nw_framer_t v1;
  _BYTE *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = framer;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    nw_framer_flush_output(v2, 0);
    v2[608] |= 2u;
    goto LABEL_3;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_framer_pass_through_output";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_pass_through_output";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_framer_pass_through_output";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_pass_through_output";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_framer_pass_through_output";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v4)
    free(v4);
LABEL_3:

}

void sub_1833CA710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_set_input_handler(nw_framer_t framer, nw_framer_input_handler_t input_handler)
{
  nw_framer_t v3;
  nw_framer_input_handler_t v4;
  void *v5;
  objc_class *v6;
  Class isa;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = framer;
  v4 = input_handler;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_set_input_handler";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9)
          goto LABEL_5;
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null input_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null input_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null input_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_input_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null input_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_input_handler";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_input_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9)
      goto LABEL_5;
    goto LABEL_56;
  }
  v6 = (objc_class *)_Block_copy(v4);
  isa = v3[50].isa;
  v3[50].isa = v6;

LABEL_5:
}

void nw_framer_set_output_handler(nw_framer_t framer, nw_framer_output_handler_t output_handler)
{
  nw_framer_t v3;
  nw_framer_output_handler_t v4;
  void *v5;
  objc_class *v6;
  Class isa;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = framer;
  v4 = output_handler;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_output_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_set_output_handler";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9)
          goto LABEL_5;
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_output_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null output_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null output_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null output_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_output_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null output_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_output_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_output_handler";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_output_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9)
      goto LABEL_5;
    goto LABEL_56;
  }
  v6 = (objc_class *)_Block_copy(v4);
  isa = v3[51].isa;
  v3[51].isa = v6;

LABEL_5:
}

void nw_framer_set_wakeup_handler(nw_framer_t framer, nw_framer_wakeup_handler_t wakeup_handler)
{
  nw_framer_t v3;
  nw_framer_wakeup_handler_t v4;
  void *v5;
  objc_class *v6;
  Class isa;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = framer;
  v4 = wakeup_handler;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_wakeup_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_set_wakeup_handler";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9)
          goto LABEL_5;
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_wakeup_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null wakeup_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null wakeup_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null wakeup_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_wakeup_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null wakeup_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_wakeup_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_wakeup_handler";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_wakeup_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9)
      goto LABEL_5;
    goto LABEL_56;
  }
  v6 = (objc_class *)_Block_copy(v4);
  isa = v3[52].isa;
  v3[52].isa = v6;

LABEL_5:
}

void nw_framer_set_stop_handler(nw_framer_t framer, nw_framer_stop_handler_t stop_handler)
{
  nw_framer_t v3;
  nw_framer_stop_handler_t v4;
  void *v5;
  objc_class *v6;
  Class isa;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = framer;
  v4 = stop_handler;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_stop_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_set_stop_handler";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9)
          goto LABEL_5;
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_stop_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null stop_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null stop_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null stop_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_stop_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null stop_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_stop_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_stop_handler";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_stop_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9)
      goto LABEL_5;
    goto LABEL_56;
  }
  v6 = (objc_class *)_Block_copy(v4);
  isa = v3[53].isa;
  v3[53].isa = v6;

LABEL_5:
}

void nw_framer_set_cleanup_handler(nw_framer_t framer, nw_framer_cleanup_handler_t cleanup_handler)
{
  nw_framer_t v3;
  nw_framer_cleanup_handler_t v4;
  void *v5;
  objc_class *v6;
  Class isa;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = framer;
  v4 = cleanup_handler;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_cleanup_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_set_cleanup_handler";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9)
          goto LABEL_5;
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_cleanup_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null cleanup_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null cleanup_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null cleanup_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_cleanup_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null cleanup_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((BYTE6(v3[75].isa) & 4) == 0)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_cleanup_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_cleanup_handler";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_cleanup_handler";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9)
      goto LABEL_5;
    goto LABEL_56;
  }
  v6 = (objc_class *)_Block_copy(v4);
  isa = v3[54].isa;
  v3[54].isa = v6;

LABEL_5:
}

void nw_framer_set_copy_metadata(void *a1, void *a2)
{
  _BYTE *v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_copy_metadata";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_set_copy_metadata";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9)
          goto LABEL_5;
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_copy_metadata";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null copy_handler", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null copy_handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null copy_handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_copy_metadata";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null copy_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if ((v3[606] & 4) == 0)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_framer_set_copy_metadata";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer->in_start", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s called with null framer->in_start, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_set_copy_metadata";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_framer_set_copy_metadata";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null framer->in_start, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9)
      goto LABEL_5;
    goto LABEL_56;
  }
  v6 = _Block_copy(v4);
  v7 = (void *)*((_QWORD *)v3 + 55);
  *((_QWORD *)v3 + 55) = v6;

LABEL_5:
}

void nw_framer_schedule_wakeup(nw_framer_t framer, uint64_t milliseconds)
{
  nw_framer_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD aBlock[4];
  id v23;
  char v24;
  os_log_type_t type;
  _BYTE location[12];
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = framer;
  v4 = (uint64_t)v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)location = 136446210;
    *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v9, &type, &v24))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", location, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)location = 136446466;
          *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer, dumping backtrace:%{public}s", location, 0x16u);
        }

        free(backtrace_string);
LABEL_40:
        if (!v9)
          goto LABEL_6;
LABEL_41:
        free(v9);
        goto LABEL_6;
      }
      if (v16)
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer, no backtrace", location, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)location = 136446210;
        *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null framer, backtrace limit exceeded", location, 0xCu);
      }
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v3[52].isa)
  {
    nw_context_assert_queue(v3[46].isa);
    v5 = *(void **)(v4 + 560);
    if (!v5)
    {
      objc_initWeak((id *)location, (id)v4);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_framer_schedule_wakeup_block_invoke;
      aBlock[3] = &unk_1E14A49C0;
      objc_copyWeak(&v23, (id *)location);
      v6 = _Block_copy(aBlock);
      v7 = *(void **)(v4 + 560);
      *(_QWORD *)(v4 + 560) = v6;

      objc_destroyWeak(&v23);
      objc_destroyWeak((id *)location);
      v5 = *(void **)(v4 + 560);
    }
    nw_context_reset_timer_block(*(void **)(v4 + 368), v4, milliseconds, v5);
    goto LABEL_6;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)location = 136446210;
  *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v9, &type, &v24))
    goto LABEL_40;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)location = 136446210;
      *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null framer->wakeup", location, 0xCu);
    }
    goto LABEL_39;
  }
  if (!v24)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v10, type))
    {
      *(_DWORD *)location = 136446210;
      *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null framer->wakeup, backtrace limit exceeded", location, 0xCu);
    }
    goto LABEL_39;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = type;
  v19 = os_log_type_enabled(v10, type);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)location = 136446210;
      *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null framer->wakeup, no backtrace", location, 0xCu);
    }
    goto LABEL_39;
  }
  if (v19)
  {
    *(_DWORD *)location = 136446466;
    *(_QWORD *)&location[4] = "nw_framer_schedule_wakeup";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null framer->wakeup, dumping backtrace:%{public}s", location, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_41;
LABEL_6:

}

void sub_1833CD520(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_framer_schedule_wakeup_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _QWORD *WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  if (WeakRetained)
  {
    v1 = WeakRetained[52];
    if (v1)
      (*(void (**)(uint64_t, _QWORD *))(v1 + 16))(v1, WeakRetained);
  }

}

void sub_1833CD584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void nw_framer_async(nw_framer_t framer, nw_framer_block_t async_block)
{
  nw_framer_t v3;
  nw_framer_block_t v4;
  void *v5;
  Class isa;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = framer;
  v4 = async_block;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_framer_async";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_async";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_framer_async";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8)
          goto LABEL_5;
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_async";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_async";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v4)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_framer_async";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_async";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null async_block", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_async";
        _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null async_block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_async";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null async_block, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_framer_async";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null async_block, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  isa = v3[46].isa;
  if (!isa)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_framer_async";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v8, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_async";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null framer->context", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_async";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null framer->context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_async";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null framer->context, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_framer_async";
      v30 = 2082;
      v31 = v18;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null framer->context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8)
      goto LABEL_5;
    goto LABEL_56;
  }
  nw_queue_context_async(isa, v5);
LABEL_5:

}

void sub_1833CDC54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

nw_endpoint_t nw_framer_copy_remote_endpoint(nw_framer_t framer)
{
  nw_framer_t v1;
  nw_framer_t v2;
  Class isa;
  uint64_t v4;
  void (*v5)(void);
  NSObject *v6;
  NSObject *v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = framer;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    isa = v2[42].isa;
    if (isa && (v4 = *((_QWORD *)isa + 3)) != 0 && (v5 = *(void (**)(void))(v4 + 136)) != 0)
    {
      v5();
      v6 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = v2[44].isa;
    }
    v7 = v6;
    goto LABEL_7;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_framer_copy_remote_endpoint";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_copy_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_framer_copy_remote_endpoint";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_copy_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_copy_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_7:

  return v7;
}

void sub_1833CDF30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_endpoint_t nw_framer_copy_local_endpoint(nw_framer_t framer)
{
  nw_framer_t v1;
  nw_framer_t v2;
  Class isa;
  uint64_t v4;
  void (*v5)(void);
  uint64_t v6;
  NSObject *v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = framer;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    isa = v2[42].isa;
    if (isa && (v4 = *((_QWORD *)isa + 3)) != 0 && (v5 = *(void (**)(void))(v4 + 128)) != 0)
    {
      v5();
      v6 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = (uint64_t)nw_parameters_copy_local_endpoint((nw_parameters_t)v2[45].isa);
    }
    v7 = v6;
    goto LABEL_7;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_framer_copy_local_endpoint";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_copy_local_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_framer_copy_local_endpoint";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_copy_local_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_copy_local_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_7:

  return v7;
}

void sub_1833CE20C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_parameters_t nw_framer_copy_parameters(nw_framer_t framer)
{
  nw_framer_t v1;
  nw_framer_t v2;
  Class isa;
  uint64_t v4;
  void (*v5)(void);
  NSObject *v6;
  NSObject *v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = framer;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    isa = v2[42].isa;
    if (isa && (v4 = *((_QWORD *)isa + 3)) != 0 && (v5 = *(void (**)(void))(v4 + 112)) != 0)
    {
      v5();
      v6 = objc_claimAutoreleasedReturnValue();
    }
    else
    {
      v6 = v2[45].isa;
    }
    v7 = v6;
    goto LABEL_7;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_framer_copy_parameters";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_copy_parameters";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_framer_copy_parameters";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_copy_parameters";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_copy_parameters";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_7:

  return v7;
}

void sub_1833CE4E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_protocol_options_t nw_framer_copy_options(nw_framer_t framer)
{
  NSObject *v1;
  NSObject *v2;
  nw_parameters_t v3;
  nw_parameters_t v4;
  unsigned __int8 *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = framer;
  v2 = v1;
  if (v1)
  {
    v3 = nw_framer_copy_parameters(v1);
    v4 = v3;
    if (v3)
    {
      v5 = nw_parameters_copy_protocol_options_legacy(v3, (nw_protocol *)&v2[36]);
LABEL_4:

      goto LABEL_5;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_framer_copy_options";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (__nwlog_fault(v12, &type, &v23))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_framer_copy_options";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v23)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v26 = "nw_framer_copy_options";
            v27 = 2082;
            v28 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_framer_copy_options";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v26 = "nw_framer_copy_options";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_41:
    if (v12)
      free(v12);
    v5 = 0;
    goto LABEL_4;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_framer_copy_options";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v8, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_framer_copy_options";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_framer_copy_options";
          v27 = 2082;
          v28 = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_35;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_framer_copy_options";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_framer_copy_options";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_5:

  return (nw_protocol_options_t)v5;
}

void sub_1833CE9BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_prepend_application_protocol_unsafe(void *a1, void *a2)
{
  return nw_framer_prepend_application_protocol_inner(a1, a2, 1);
}

uint64_t nw_framer_prepend_application_protocol_inner(void *a1, void *a2, int a3)
{
  char *v5;
  id v6;
  void *v7;
  NWConcrete_nw_protocol_options *v8;
  NWConcrete_nw_protocol_options *v9;
  uint64_t v10;
  id *v11;
  id v12;
  void *v13;
  void *v14;
  char *v15;
  id v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char v21;
  uint64_t (*v22)(uint64_t, char *, id, char *);
  uint64_t internal;
  uint64_t v24;
  int v25;
  nw_protocol_options_t v26;
  nw_protocol_stack_t v27;
  id *v28;
  NSObject *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *isa;
  NSObject *v35;
  id v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  NSObject *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43;
  _BOOL8 v44;
  NSObject *v45;
  _BOOL8 *v46;
  Class v47;
  int v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t (**v52)(uint64_t, uint64_t);
  uint64_t (*v53)(uint64_t, uint64_t);
  uint64_t v54;
  uint64_t (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, char *);
  NSObject *v59;
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  NSObject *v62;
  char *v63;
  NSObject *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  NSObject *v67;
  uint64_t v68;
  unsigned int (*v69)(uint64_t, uint64_t, _QWORD);
  unsigned int (**v70)(char *, uint64_t);
  unsigned int (*v71)(char *, uint64_t);
  id v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  os_log_type_t v76;
  char *v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  id v82;
  os_log_type_t v83;
  char *v84;
  os_log_type_t v85;
  _BOOL4 v86;
  os_log_type_t v87;
  os_log_type_t v88;
  void *v89;
  char *v90;
  NSObject *v91;
  os_log_type_t v92;
  void *v93;
  os_log_type_t v94;
  void *v95;
  char *v96;
  NSObject *v97;
  os_log_type_t v98;
  void *v99;
  char *v100;
  NSObject *v101;
  os_log_type_t v102;
  char *backtrace_string;
  NSObject *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  char *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  char *v110;
  NSObject *v111;
  os_log_type_t v112;
  _BOOL4 v113;
  void *v114;
  char *v115;
  NSObject *v116;
  os_log_type_t v117;
  void *v118;
  os_log_type_t v119;
  char *v120;
  os_log_type_t v121;
  _BOOL4 v122;
  char *v123;
  os_log_type_t v124;
  _BOOL4 v125;
  char *v126;
  os_log_type_t v127;
  _BOOL4 v128;
  void *v129;
  const char *v130;
  char *v131;
  NSObject *v132;
  os_log_type_t v133;
  const char *v134;
  os_log_type_t v135;
  os_log_type_t v136;
  os_log_type_t v137;
  os_log_type_t v138;
  char *v139;
  NSObject *v140;
  os_log_type_t v141;
  _BOOL4 v142;
  const char *v143;
  os_log_type_t v144;
  os_log_type_t v145;
  os_log_type_t v146;
  const char *v147;
  const char *v148;
  nw_protocol_stack_t v149;
  id *v150;
  nw_protocol_stack_t v151;
  NSObject *v152;
  NWConcrete_nw_protocol_options *v153;
  void *v154;
  char *v155;
  os_log_type_t type[8];
  uint64_t v157;
  BOOL (*v158)(_QWORD *, uint64_t, uint64_t);
  void *v159;
  NSObject *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  char v170;
  _BYTE buf[24];
  char *v172;
  __int128 v173;
  uint64_t *v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v154 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v89 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
    v90 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v167) = 0;
    if (!__nwlog_fault(v90, type, &v167))
      goto LABEL_208;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v92 = type[0];
      if (os_log_type_enabled(v91, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        _os_log_impl(&dword_182FBE000, v91, v92, "%{public}s called with null framer", buf, 0xCu);
      }
      goto LABEL_195;
    }
    if (!(_BYTE)v167)
    {
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v135 = type[0];
      if (os_log_type_enabled(v91, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        _os_log_impl(&dword_182FBE000, v91, v135, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_195;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v104 = objc_claimAutoreleasedReturnValue();
    v105 = type[0];
    v106 = os_log_type_enabled(v104, type[0]);
    if (backtrace_string)
    {
      if (v106)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v104, v105, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
      if (!v90)
        goto LABEL_210;
      goto LABEL_209;
    }
    if (v106)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
      _os_log_impl(&dword_182FBE000, v104, v105, "%{public}s called with null framer, no backtrace", buf, 0xCu);
    }
    goto LABEL_207;
  }
  v7 = v6;
  if (!v6)
  {
    __nwlog_obj();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
    v90 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v167) = 0;
    if (!__nwlog_fault(v90, type, &v167))
      goto LABEL_208;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v94 = type[0];
      if (os_log_type_enabled(v91, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        _os_log_impl(&dword_182FBE000, v91, v94, "%{public}s called with null orig_protocol_options", buf, 0xCu);
      }
LABEL_195:

      goto LABEL_208;
    }
    if (!(_BYTE)v167)
    {
      __nwlog_obj();
      v91 = objc_claimAutoreleasedReturnValue();
      v136 = type[0];
      if (os_log_type_enabled(v91, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        _os_log_impl(&dword_182FBE000, v91, v136, "%{public}s called with null orig_protocol_options, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_195;
    }
    v107 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v104 = objc_claimAutoreleasedReturnValue();
    v108 = type[0];
    v109 = os_log_type_enabled(v104, type[0]);
    if (v107)
    {
      if (v109)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v107;
        _os_log_impl(&dword_182FBE000, v104, v108, "%{public}s called with null orig_protocol_options, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v107);
LABEL_208:
      if (!v90)
      {
LABEL_210:
        v41 = 0;
        goto LABEL_88;
      }
LABEL_209:
      free(v90);
      goto LABEL_210;
    }
    if (v109)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
      _os_log_impl(&dword_182FBE000, v104, v108, "%{public}s called with null orig_protocol_options, no backtrace", buf, 0xCu);
    }
LABEL_207:

    goto LABEL_208;
  }
  nw_context_assert_queue(*((void **)v5 + 46));
  v8 = nw_protocol_options_copy(v7);
  v9 = v8;
  if (!v8)
  {
    __nwlog_obj();
    v95 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
    v96 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v167) = 0;
    if (__nwlog_fault(v96, type, &v167))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v97 = objc_claimAutoreleasedReturnValue();
        v98 = type[0];
        if (os_log_type_enabled(v97, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
          _os_log_impl(&dword_182FBE000, v97, v98, "%{public}s called with null protocol_options", buf, 0xCu);
        }
      }
      else
      {
        if ((_BYTE)v167)
        {
          v110 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v111 = objc_claimAutoreleasedReturnValue();
          v112 = type[0];
          v113 = os_log_type_enabled(v111, type[0]);
          if (v110)
          {
            if (v113)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v110;
              _os_log_impl(&dword_182FBE000, v111, v112, "%{public}s called with null protocol_options, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v110);
          }
          else
          {
            if (v113)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
              _os_log_impl(&dword_182FBE000, v111, v112, "%{public}s called with null protocol_options, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_214;
        }
        __nwlog_obj();
        v97 = objc_claimAutoreleasedReturnValue();
        v137 = type[0];
        if (os_log_type_enabled(v97, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
          _os_log_impl(&dword_182FBE000, v97, v137, "%{public}s called with null protocol_options, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_214:
    if (v96)
      free(v96);
    v41 = 0;
    v9 = 0;
    goto LABEL_87;
  }
  if ((v5[606] & 0x10) != 0)
  {
    if (!a3)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v40 = (id)gLogObj;
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v5 + 609;
        _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_ERROR, "%{public}s %s Already in the ready state, cannot prepend application protocol", buf, 0x16u);
      }

      v41 = 0;
      goto LABEL_87;
    }
    v5[606] &= ~0x10u;
  }
  v10 = *((_QWORD *)v5 + 42);
  v11 = v8;
  v12 = v11[1];
  v150 = v11;

  v13 = (void *)*((_QWORD *)v5 + 44);
  v14 = (void *)*((_QWORD *)v5 + 45);
  v15 = (char *)v12;
  v16 = v13;
  v17 = v14;
  v153 = v9;
  v155 = v15;
  if (v15)
  {
    v18 = v15;
    v19 = (uint64_t)(v18 + 8);

    v20 = v18;
    v21 = v20[184];

    if ((v21 & 1) != 0
      && (v22 = (uint64_t (*)(uint64_t, char *, id, char *))nw_protocol_definition_get_framer_create(v20)) != 0)
    {
      internal = v22(v19, v20, v16, v17);
    }
    else
    {
      internal = nw_protocol_create_internal(v19, v16, v17, 1);
    }
    v24 = internal;
    goto LABEL_13;
  }
  __nwlog_obj();
  v99 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_framer_create_protocol_for_definition";
  v100 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v167) = 0;
  if (__nwlog_fault(v100, type, &v167))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v101 = objc_claimAutoreleasedReturnValue();
      v102 = type[0];
      if (os_log_type_enabled(v101, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_create_protocol_for_definition";
        _os_log_impl(&dword_182FBE000, v101, v102, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if ((_BYTE)v167)
    {
      v120 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v101 = objc_claimAutoreleasedReturnValue();
      v121 = type[0];
      v122 = os_log_type_enabled(v101, type[0]);
      if (v120)
      {
        if (v122)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_framer_create_protocol_for_definition";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v120;
          _os_log_impl(&dword_182FBE000, v101, v121, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v120);
        goto LABEL_227;
      }
      if (v122)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_create_protocol_for_definition";
        _os_log_impl(&dword_182FBE000, v101, v121, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v101 = objc_claimAutoreleasedReturnValue();
      v138 = type[0];
      if (os_log_type_enabled(v101, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_create_protocol_for_definition";
        _os_log_impl(&dword_182FBE000, v101, v138, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_227:
  if (v100)
    free(v100);
  v24 = 0;
LABEL_13:

  if (!v24)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
    *(_WORD *)&buf[12] = 2114;
    *(_QWORD *)&buf[14] = v15;
    v37 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v167) = 0;
    if (!__nwlog_fault(v37, type, &v167))
      goto LABEL_83;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      v39 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v15;
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed", buf, 0x16u);
      }
    }
    else
    {
      if ((_BYTE)v167)
      {
        v63 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v64 = (id)gLogObj;
        v65 = type[0];
        v66 = os_log_type_enabled(v64, type[0]);
        if (v63)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
            *(_WORD *)&buf[12] = 2114;
            *(_QWORD *)&buf[14] = v15;
            *(_WORD *)&buf[22] = 2082;
            v172 = v63;
            _os_log_impl(&dword_182FBE000, v64, v65, "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v63);
          if (!v37)
            goto LABEL_85;
          goto LABEL_84;
        }
        if (v66)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2114;
          *(_QWORD *)&buf[14] = v15;
          _os_log_impl(&dword_182FBE000, v64, v65, "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed, no backtrace", buf, 0x16u);
        }

LABEL_83:
        if (!v37)
        {
LABEL_85:
          v41 = 0;
          goto LABEL_86;
        }
LABEL_84:
        free(v37);
        goto LABEL_85;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      v76 = type[0];
      if (os_log_type_enabled(v38, type[0]))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2114;
        *(_QWORD *)&buf[14] = v15;
        _os_log_impl(&dword_182FBE000, v38, v76, "%{public}s nw_framer_create_protocol_for_definition(%{public}@) failed, backtrace limit exceeded", buf, 0x16u);
      }
    }

    goto LABEL_83;
  }
  v25 = *((unsigned __int16 *)v5 + 302);
  if (v25 != 0xFFFF)
    *((_WORD *)v5 + 302) = v25 + 1;
  v149 = nw_parameters_copy_default_protocol_stack(*((nw_parameters_t *)v5 + 45));
  v26 = nw_framer_copy_options((nw_framer_t)v5);
  v27 = v149;
  v28 = v150;
  v29 = v26;
  v151 = v27;
  v152 = v29;
  if (!v27)
  {
    __nwlog_obj();
    v114 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
    v115 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v167) = 0;
    if (!__nwlog_fault(v115, type, &v167))
      goto LABEL_242;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      v117 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
        _os_log_impl(&dword_182FBE000, v116, v117, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if ((_BYTE)v167)
    {
      v123 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      v124 = type[0];
      v125 = os_log_type_enabled(v116, type[0]);
      if (v123)
      {
        if (v125)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v123;
          _os_log_impl(&dword_182FBE000, v116, v124, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v123);
LABEL_242:
        if (!v115)
          goto LABEL_32;
        goto LABEL_243;
      }
      if (v125)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
        _os_log_impl(&dword_182FBE000, v116, v124, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v116 = objc_claimAutoreleasedReturnValue();
      v144 = type[0];
      if (os_log_type_enabled(v116, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
        _os_log_impl(&dword_182FBE000, v116, v144, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_241:

    goto LABEL_242;
  }
  if (v29)
  {
    v30 = v24;
    v31 = v5;
    v32 = v10;
    v167 = 0;
    v168 = &v167;
    v169 = 0x2020000000;
    v170 = 0;
    v163 = 0;
    v164 = &v163;
    v165 = 0x2020000000;
    v166 = 0;
    v33 = MEMORY[0x1E0C809B0];
    isa = (unsigned __int8 *)v27[1].isa;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_protocol_stack_insert_application_protocol_before_block_invoke;
    v172 = (char *)&unk_1E149CF10;
    *((_QWORD *)&v173 + 1) = &v167;
    v35 = v29;
    *(_QWORD *)&v173 = v35;
    v174 = &v163;
    nw_array_apply(isa, (uint64_t)buf);
    if (*((_BYTE *)v168 + 24))
    {
      nw_array_insert_object_at_index((uint64_t)v27[1].isa, v28, (char *)v164[3]);
      v10 = v32;
      v5 = v31;
      v24 = v30;
    }
    else
    {
      v42 = (unsigned __int8 *)v27[2].isa;
      v43 = v33;
      v10 = v32;
      v5 = v31;
      v24 = v30;
      if (!v42)
      {
        v44 = nw_array_create();
        v45 = v27;
        v47 = v27[2].isa;
        v46 = (_BOOL8 *)&v27[2];
        *v46 = v44;

        v42 = (unsigned __int8 *)*v46;
        v27 = v45;
      }
      *(_QWORD *)type = v43;
      v157 = 3221225472;
      v158 = __nw_protocol_stack_insert_application_protocol_before_block_invoke_2;
      v159 = &unk_1E149CF10;
      v161 = &v167;
      v160 = v35;
      v162 = &v163;
      nw_array_apply(v42, (uint64_t)type);
      nw_array_insert_object_at_index((uint64_t)v27[2].isa, v28, (char *)v164[3]);

    }
    _Block_object_dispose(&v163, 8);
    _Block_object_dispose(&v167, 8);
    goto LABEL_32;
  }
  __nwlog_obj();
  v118 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
  v115 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v167) = 0;
  if (!__nwlog_fault(v115, type, &v167))
    goto LABEL_242;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v116 = objc_claimAutoreleasedReturnValue();
    v119 = type[0];
    if (os_log_type_enabled(v116, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
      _os_log_impl(&dword_182FBE000, v116, v119, "%{public}s called with null insert_before", buf, 0xCu);
    }
    goto LABEL_241;
  }
  if (!(_BYTE)v167)
  {
    __nwlog_obj();
    v116 = objc_claimAutoreleasedReturnValue();
    v145 = type[0];
    if (os_log_type_enabled(v116, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
      _os_log_impl(&dword_182FBE000, v116, v145, "%{public}s called with null insert_before, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_241;
  }
  v126 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v116 = objc_claimAutoreleasedReturnValue();
  v127 = type[0];
  v128 = os_log_type_enabled(v116, type[0]);
  if (!v126)
  {
    if (v128)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
      _os_log_impl(&dword_182FBE000, v116, v127, "%{public}s called with null insert_before, no backtrace", buf, 0xCu);
    }
    goto LABEL_241;
  }
  if (v128)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_insert_application_protocol_before";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v126;
    _os_log_impl(&dword_182FBE000, v116, v127, "%{public}s called with null insert_before, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v126);
  if (v115)
LABEL_243:
    free(v115);
LABEL_32:

  v48 = *((unsigned __int16 *)v5 + 302);
  v49 = v28;
  v50 = v49;
  if (v5[609])
  {
    *((_WORD *)v49 + 68) = v48;
    snprintf(v49 + 48, 0x54uLL, "[%s%s:%u]", "", v5 + 609, v48);
  }

  v51 = v50;
  *((_QWORD *)v51 + 2) = v24;

  *(_OWORD *)v24 = *((_OWORD *)v5 + 18);
  v52 = *(uint64_t (***)(uint64_t, uint64_t))(v24 + 24);
  if (!v52 || (v53 = *v52) == 0 || (v53(v24, v10) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v62 = (id)gLogObj;
    if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v5 + 609;
      *(_WORD *)&buf[22] = 2114;
      v172 = v155;
      _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_ERROR, "%{public}s %s Failed to attach %{public}@ protocol", buf, 0x20u);
    }
    goto LABEL_52;
  }
  nw_protocol_set_output_handler(v10, v24);
  v54 = *((_QWORD *)v5 + 39);
  if (!v54
    || (v55 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v54 + 16)) == 0
    || (v55(v5 + 288, v10, v24) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v67 = (id)gLogObj;
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v5 + 609;
      *(_WORD *)&buf[22] = 2114;
      v172 = v155;
      _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_ERROR, "%{public}s %s Failed to replace flow protocol with %{public}@ protocol", buf, 0x20u);
    }

    v68 = *(_QWORD *)(v24 + 24);
    if (v68 && (v69 = *(unsigned int (**)(uint64_t, uint64_t, _QWORD))(v68 + 8)) != 0 && v69(v24, v10, 0))
    {
      v70 = (unsigned int (**)(char *, uint64_t))*((_QWORD *)v5 + 39);
      if (v70)
      {
        v71 = *v70;
        if (v71)
        {
          if (v71(v5 + 288, v10))
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v62 = (id)gLogObj;
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v5 + 609;
              *(_WORD *)&buf[22] = 2114;
              v172 = v155;
              _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_ERROR, "%{public}s %s Successfully repaired protocol stack after failed %{public}@ insertion", buf, 0x20u);
            }
LABEL_52:

LABEL_53:
            v41 = 0;
            goto LABEL_54;
          }
        }
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v82 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v5 + 609;
      v73 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v167) = 0;
      if (!__nwlog_fault(v73, type, &v167))
        goto LABEL_117;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v83 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v5 + 609;
          _os_log_impl(&dword_182FBE000, v74, v83, "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol", buf, 0x16u);
        }
LABEL_113:

        goto LABEL_117;
      }
      if (!(_BYTE)v167)
      {
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v88 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v5 + 609;
          _os_log_impl(&dword_182FBE000, v74, v88, "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol, backtrace limit exceeded", buf, 0x16u);
        }
        goto LABEL_113;
      }
      v84 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v79 = objc_claimAutoreleasedReturnValue();
      v85 = type[0];
      v86 = os_log_type_enabled(v79, type[0]);
      if (v84)
      {
        if (v86)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v5 + 609;
          *(_WORD *)&buf[22] = 2082;
          v172 = v84;
          _os_log_impl(&dword_182FBE000, v79, v85, "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v84);
LABEL_117:
        if (!v73)
          goto LABEL_53;
LABEL_118:
        free(v73);
        goto LABEL_53;
      }
      if (v86)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v5 + 609;
        _os_log_impl(&dword_182FBE000, v79, v85, "%{public}s %s Failed to repair protocol stack: Could not add old input_protocol, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v72 = (id)gLogObj;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = v5 + 609;
      *(_WORD *)&buf[22] = 2114;
      v172 = v155;
      v73 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v167) = 0;
      if (!__nwlog_fault(v73, type, &v167))
        goto LABEL_117;
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v74 = (id)gLogObj;
        v75 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v5 + 609;
          *(_WORD *)&buf[22] = 2114;
          v172 = v155;
          _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion", buf, 0x20u);
        }
        goto LABEL_113;
      }
      if (!(_BYTE)v167)
      {
        __nwlog_obj();
        v74 = objc_claimAutoreleasedReturnValue();
        v87 = type[0];
        if (os_log_type_enabled(v74, type[0]))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v5 + 609;
          *(_WORD *)&buf[22] = 2114;
          v172 = v155;
          _os_log_impl(&dword_182FBE000, v74, v87, "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion, backtrace limit exceeded", buf, 0x20u);
        }
        goto LABEL_113;
      }
      v78 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v79 = objc_claimAutoreleasedReturnValue();
      v80 = type[0];
      v81 = os_log_type_enabled(v79, type[0]);
      if (v78)
      {
        if (v81)
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
          *(_WORD *)&buf[12] = 2080;
          *(_QWORD *)&buf[14] = v5 + 609;
          *(_WORD *)&buf[22] = 2114;
          v172 = v155;
          LOWORD(v173) = 2082;
          *(_QWORD *)((char *)&v173 + 2) = v78;
          _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v78);
        if (!v73)
          goto LABEL_53;
        goto LABEL_118;
      }
      if (v81)
      {
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v5 + 609;
        *(_WORD *)&buf[22] = 2114;
        v172 = v155;
        _os_log_impl(&dword_182FBE000, v79, v80, "%{public}s %s Failed to repair protocol stack: Could not undo failed %{public}@ insertion, no backtrace", buf, 0x20u);
      }
    }

    goto LABEL_117;
  }
  v56 = *((_QWORD *)v5 + 40);
  if (v56)
  {
    v57 = *(_QWORD *)(v56 + 24);
    if (v57)
    {
      v58 = *(void (**)(uint64_t, char *))(v57 + 16);
      if (v58)
        v58(v56, v5 + 288);
    }
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v59 = (id)gLogObj;
  if (os_log_type_enabled(v59, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
    *(_WORD *)&buf[12] = 2080;
    *(_QWORD *)&buf[14] = v5 + 609;
    *(_WORD *)&buf[22] = 2114;
    v172 = v155;
    _os_log_impl(&dword_182FBE000, v59, OS_LOG_TYPE_INFO, "%{public}s %s Attached %{public}@ protocol above framer", buf, 0x20u);
  }

  v60 = *(_QWORD *)(v24 + 24);
  if (!v60 || (v61 = *(void (**)(uint64_t, uint64_t))(v60 + 24)) == 0)
  {
    __nwlog_obj();
    v129 = (void *)objc_claimAutoreleasedReturnValue();
    v130 = *(const char **)(v24 + 16);
    if (!v130)
      v130 = "invalid";
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v130;
    v131 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v167) = 0;
    if (!__nwlog_fault(v131, type, &v167))
      goto LABEL_254;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v132 = objc_claimAutoreleasedReturnValue();
      v133 = type[0];
      if (os_log_type_enabled(v132, type[0]))
      {
        v134 = *(const char **)(v24 + 16);
        if (!v134)
          v134 = "invalid";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v134;
        _os_log_impl(&dword_182FBE000, v132, v133, "%{public}s protocol %{public}s has invalid connect callback", buf, 0x16u);
      }
    }
    else
    {
      if ((_BYTE)v167)
      {
        v139 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v140 = objc_claimAutoreleasedReturnValue();
        v141 = type[0];
        v142 = os_log_type_enabled(v140, type[0]);
        if (v139)
        {
          if (v142)
          {
            v143 = *(const char **)(v24 + 16);
            if (!v143)
              v143 = "invalid";
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v143;
            *(_WORD *)&buf[22] = 2082;
            v172 = v139;
            _os_log_impl(&dword_182FBE000, v140, v141, "%{public}s protocol %{public}s has invalid connect callback, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v139);
        }
        else
        {
          if (v142)
          {
            v148 = *(const char **)(v24 + 16);
            if (!v148)
              v148 = "invalid";
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v148;
            _os_log_impl(&dword_182FBE000, v140, v141, "%{public}s protocol %{public}s has invalid connect callback, no backtrace", buf, 0x16u);
          }

        }
        goto LABEL_254;
      }
      __nwlog_obj();
      v132 = objc_claimAutoreleasedReturnValue();
      v146 = type[0];
      if (os_log_type_enabled(v132, type[0]))
      {
        v147 = *(const char **)(v24 + 16);
        if (!v147)
          v147 = "invalid";
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_prepend_application_protocol_inner";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v147;
        _os_log_impl(&dword_182FBE000, v132, v146, "%{public}s protocol %{public}s has invalid connect callback, backtrace limit exceeded", buf, 0x16u);
      }
    }

LABEL_254:
    if (v131)
      free(v131);
    goto LABEL_49;
  }
  v61(v24, v10);
LABEL_49:
  v41 = 1;
LABEL_54:

LABEL_86:
  v9 = v153;
LABEL_87:

LABEL_88:
  return v41;
}

void sub_1833D091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,void *a25)
{
  void *v25;

  _Unwind_Resume(a1);
}

BOOL nw_framer_prepend_application_protocol(nw_framer_t framer, nw_protocol_options_t protocol_options)
{
  return nw_framer_prepend_application_protocol_inner(framer, protocol_options, 0);
}

void nw_framer_mark_ready(nw_framer_t framer)
{
  nw_framer_t v1;
  nw_framer_t v2;
  Class isa;
  uint64_t v4;
  void (*v5)(void);
  Class v6;
  void (*v7)(void);
  NSObject *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = framer;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(v1[46].isa);
    if ((BYTE6(v2[75].isa) & 0x10) != 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v20 = "nw_framer_mark_ready";
        v21 = 2080;
        v22 = (char *)&v2[76].isa + 1;
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %s Already in the ready state", buf, 0x16u);
      }

    }
    else
    {
      BYTE6(v2[75].isa) |= 0x10u;
      isa = v2[42].isa;
      if (isa)
      {
        v4 = *((_QWORD *)isa + 3);
        if (v4)
        {
          v5 = *(void (**)(void))(v4 + 40);
          if (!v5 || (v5(), (v6 = v2[42].isa) != 0) && (v4 = *((_QWORD *)v6 + 3)) != 0)
          {
            v7 = *(void (**)(void))(v4 + 72);
            if (v7)
              v7();
          }
        }
      }
    }
    goto LABEL_13;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_framer_mark_ready";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_mark_ready";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_framer_mark_ready";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_mark_ready";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_framer_mark_ready";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_30:
  if (v10)
    free(v10);
LABEL_13:

}

void sub_1833D0CFC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_mark_failed_with_error(nw_framer_t framer, int error_code)
{
  nw_framer_t v2;
  nw_framer_t v3;
  Class isa;
  uint64_t v5;
  void (*v6)(void);
  Class v7;
  void (*v8)(void);
  Class v9;
  uint64_t v10;
  void (*v11)(void);
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = framer;
  v3 = v2;
  if (v2)
  {
    nw_context_assert_queue(v2[46].isa);
    HIBYTE(v3[75].isa) |= 0x80u;
    isa = v3[42].isa;
    if (isa)
    {
      v5 = *((_QWORD *)isa + 3);
      if (v5)
      {
        v6 = *(void (**)(void))(v5 + 56);
        if (!v6 || (v6(), (v7 = v3[42].isa) != 0) && (v5 = *((_QWORD *)v7 + 3)) != 0)
        {
          v8 = *(void (**)(void))(v5 + 48);
          if (v8)
            v8();
        }
      }
    }
    v9 = v3[40].isa;
    if (v9)
    {
      v10 = *((_QWORD *)v9 + 3);
      if (v10)
      {
        v11 = *(void (**)(void))(v10 + 32);
        if (v11)
          v11();
      }
    }
    goto LABEL_13;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_framer_mark_failed_with_error";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_framer_mark_failed_with_error";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_framer_mark_failed_with_error";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_30;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_framer_mark_failed_with_error";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_framer_mark_failed_with_error";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_30:
  if (v13)
    free(v13);
LABEL_13:

}

void sub_1833D1018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_connection_state_set_object_value(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  _QWORD *v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  os_log_type_t v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_framer_connection_state_set_object_value";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v11, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_connection_state_set_object_value";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_framer_connection_state_set_object_value";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v11)
          goto LABEL_8;
LABEL_56:
        free(v11);
        goto LABEL_8;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_connection_state_set_object_value";
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_connection_state_set_object_value";
        _os_log_impl(&dword_182FBE000, v12, v29, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (a2)
  {
    nw_context_assert_queue(*((void **)v5 + 46));
    v7 = *((id *)v5 + 47);
    if (v7
      || (v7 = (id)nw_protocol_copy_shared_connection_state((uint64_t)v5 + 288, *((_QWORD *)v5 + 1), *((void **)v5 + 46), 1)) != 0|| (v8 = nw_dictionary_create(), v9 = (void *)*((_QWORD *)v5 + 47), *((_QWORD *)v5 + 47) = v8, v9, (v7 = *((id *)v5 + 47)) != 0))
    {
      nw_dictionary_set_value((uint64_t)v7, a2, v6);
LABEL_7:

      goto LABEL_8;
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_framer_connection_state_set_object_value";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (__nwlog_fault(v17, &type, &v32))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_framer_connection_state_set_object_value";
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null connection_state", buf, 0xCu);
        }
      }
      else if (v32)
      {
        v26 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v18, type);
        if (v26)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v35 = "nw_framer_connection_state_set_object_value";
            v36 = 2082;
            v37 = v26;
            _os_log_impl(&dword_182FBE000, v18, v27, "%{public}s called with null connection_state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v26);
          goto LABEL_60;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_framer_connection_state_set_object_value";
          _os_log_impl(&dword_182FBE000, v18, v27, "%{public}s called with null connection_state, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v35 = "nw_framer_connection_state_set_object_value";
          _os_log_impl(&dword_182FBE000, v18, v31, "%{public}s called with null connection_state, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_60:
    if (v17)
      free(v17);
    v7 = 0;
    goto LABEL_7;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v35 = "nw_framer_connection_state_set_object_value";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (!__nwlog_fault(v11, &type, &v32))
    goto LABEL_55;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_framer_connection_state_set_object_value";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null key", buf, 0xCu);
    }
    goto LABEL_54;
  }
  if (!v32)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    if (os_log_type_enabled(v12, type))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_framer_connection_state_set_object_value";
      _os_log_impl(&dword_182FBE000, v12, v30, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_54;
  }
  v23 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v24 = type;
  v25 = os_log_type_enabled(v12, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_framer_connection_state_set_object_value";
      _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null key, no backtrace", buf, 0xCu);
    }
    goto LABEL_54;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    v35 = "nw_framer_connection_state_set_object_value";
    v36 = 2082;
    v37 = v23;
    _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v23);
  if (v11)
    goto LABEL_56;
LABEL_8:

}

void sub_1833D1760(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void *nw_framer_connection_state_copy_object_value(void *a1, uint64_t a2)
{
  void **v3;
  void **v4;
  id v5;
  void *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_framer_connection_state_copy_object_value";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (!v21)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v15 = type;
    v16 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v16)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_framer_connection_state_copy_object_value";
      v25 = 2082;
      v26 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  if (!a2)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_framer_connection_state_copy_object_value";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v9, &type, &v21))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null key", buf, 0xCu);
      }
LABEL_38:

LABEL_39:
      if (v9)
        free(v9);
      goto LABEL_41;
    }
    if (!v21)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v10, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_framer_connection_state_copy_object_value";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_framer_connection_state_copy_object_value";
      v25 = 2082;
      v26 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_26:

    free(backtrace_string);
    goto LABEL_39;
  }
  nw_context_assert_queue(v3[46]);
  v5 = v4[47];
  if (!v5)
  {
    v5 = (id)nw_protocol_copy_shared_connection_state((uint64_t)(v4 + 36), (uint64_t)v4[1], v4[46], 0);
    if (!v5)
    {
LABEL_41:
      v6 = 0;
      goto LABEL_6;
    }
  }
  v6 = nw_dictionary_copy_value((uint64_t)v5, a2);

LABEL_6:
  return v6;
}

void sub_1833D1C5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_protocol_definition_t nw_framer_create_definition(const char *identifier, uint32_t flags, nw_framer_start_handler_t start_handler)
{
  char v3;
  nw_framer_start_handler_t v5;
  void *v6;
  id v7;
  NWConcrete_nw_protocol_definition *named;
  NWConcrete_nw_protocol_definition *v9;
  char v10;
  void *v11;
  nw_protocol_definition_common_state *common_state;
  id var10;
  NWConcrete_nw_protocol_definition *v14;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v3 = flags;
  v35 = *MEMORY[0x1E0C80C00];
  v5 = start_handler;
  v6 = v5;
  if (identifier)
  {
    if (v5)
    {
      v7 = v5;
      named = nw_protocol_definition_create_named(v3 & 2 | 1u, (unsigned __int8 *)identifier);
      v9 = named;
      if (named)
      {
        nw_protocol_definition_initialize_common_state(named);
        if ((v3 & 1) != 0)
          v10 = 3;
        else
          v10 = 1;
        *((_BYTE *)v9 + 184) = v10 | *((_BYTE *)v9 + 184) & 0xFC;
        v9->common_state->var9 = nw_framer_protocol_create;
        v11 = _Block_copy(v7);
        common_state = v9->common_state;
        var10 = common_state->var10;
        common_state->var10 = v11;

        v14 = v9;
      }

      nw_protocol_definition_set_metadata_allocator(v9, (uint64_t)nw_framer_allocate_metadata, (uint64_t)nw_framer_deallocate_metadata);
      nw_protocol_definition_set_metadata_copy_reply(v9, nw_framer_message_create_reply, nw_framer_metadata_copy_original, nw_framer_metadata_set_original);
      nw_protocol_definition_set_options_allocator(v9, (uint64_t)nw_framer_allocate_options, (uint64_t)nw_framer_duplicate_options, (uint64_t)nw_framer_deallocate_options);
      nw_protocol_definition_set_options_equality_check(v9, (uint64_t)nw_framer_options_are_equal);
      goto LABEL_9;
    }
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_framer_create_definition";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v17, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null start", buf, 0xCu);
        }
LABEL_41:

        goto LABEL_42;
      }
      if (!v29)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s called with null start, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s called with null start, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_framer_create_definition";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s called with null start, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_29;
    }
  }
  else
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_framer_create_definition";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v17, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null identifier_string", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (!v29)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_182FBE000, v18, v27, "%{public}s called with null identifier_string, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_41;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_framer_create_definition";
          _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null identifier_string, no backtrace", buf, 0xCu);
        }
        goto LABEL_41;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_framer_create_definition";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null identifier_string, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_29:

      free(backtrace_string);
    }
  }
LABEL_42:
  if (v17)
    free(v17);
  v9 = 0;
LABEL_9:

  return &v9->super;
}

void sub_1833D21EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

nw_protocol *nw_framer_protocol_create(nw_protocol_identifier *a1, void *a2, void *a3, void *a4)
{
  id v8;
  id v9;
  id v10;
  NWConcrete_nw_framer *v11;
  NWConcrete_nw_framer *v12;
  OS_nw_context *v13;
  OS_nw_context *context;
  nw_protocol *p_protocol;
  NWConcrete_nw_framer *v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = objc_alloc_init(NWConcrete_nw_framer);
  v12 = v11;
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v29 = "nw_framer_protocol_create";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v18, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_framer_protocol_create";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s [nw_framer init] failed", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v23 = type;
        v24 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "nw_framer_protocol_create";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s [nw_framer init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v18)
            goto LABEL_10;
          goto LABEL_9;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_framer_protocol_create";
          _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s [nw_framer init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v25 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_framer_protocol_create";
          _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s [nw_framer init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v18)
    {
LABEL_10:
      p_protocol = 0;
      goto LABEL_11;
    }
LABEL_9:
    free(v18);
    goto LABEL_10;
  }
  objc_storeStrong((id *)&v11->endpoint, a3);
  objc_storeStrong((id *)&v12->parameters, a4);
  v13 = (OS_nw_context *)nw_parameters_copy_context(v10);
  context = v12->context;
  v12->context = v13;

  objc_storeStrong((id *)&v12->parent_definition, a2);
  p_protocol = &v12->protocol;
  v12->protocol.identifier = a1;
  v12->protocol.callbacks = &v12->callbacks;
  v12->inbound_frames.tqh_first = 0;
  v12->inbound_frames.tqh_last = &v12->inbound_frames.tqh_first;
  v12->outbound_frames.tqh_first = 0;
  v12->outbound_frames.tqh_last = &v12->outbound_frames.tqh_first;
  v12->pending_input_frames.tqh_first = 0;
  v12->pending_input_frames.tqh_last = &v12->pending_input_frames.tqh_first;
  v12->received_input_frames.tqh_first = 0;
  v12->received_input_frames.tqh_last = &v12->received_input_frames.tqh_first;
  v12->received_output_frames.tqh_first = 0;
  v12->received_output_frames.tqh_last = &v12->received_output_frames.tqh_first;
  v12->callbacks.register_notification = nw_protocol_default_register_notification;
  v12->callbacks.unregister_notification = nw_protocol_default_unregister_notification;
  v12->callbacks.notify = nw_protocol_default_notify;
  v12->callbacks.updated_path = nw_protocol_default_updated_path;
  v12->callbacks.add_input_handler = nw_framer_protocol_add_input_handler;
  v12->callbacks.remove_input_handler = nw_framer_protocol_remove_input_handler;
  v12->callbacks.replace_input_handler = nw_framer_protocol_replace_input_handler;
  v12->callbacks.connect = nw_framer_protocol_connect;
  v12->callbacks.disconnect = nw_framer_protocol_disconnect;
  v12->callbacks.connected = nw_framer_protocol_connected;
  v12->callbacks.disconnected = nw_framer_protocol_disconnected;
  v12->callbacks.error = nw_protocol_default_error;
  v12->callbacks.remove_listen_handler = nw_protocol_default_remove_listen_handler;
  v12->callbacks.get_message_properties = nw_framer_protocol_get_message_properties;
  v12->callbacks.supports_external_data = nw_framer_protocol_supports_external_data;
  v12->callbacks.input_finished = nw_protocol_default_input_finished;
  v12->callbacks.get_output_interface = nw_protocol_default_get_output_interface;
  v12->callbacks.waiting_for_output = nw_framer_protocol_waiting_for_output;
  v12->callbacks.finalize_output_frames = nw_framer_protocol_finalize_output_frames;
  v12->callbacks.link_state = nw_framer_protocol_link_state;
  v12->callbacks.get_input_frames = nw_framer_protocol_get_input_frames;
  v12->callbacks.get_output_frames = nw_framer_protocol_get_output_frames;
  v12->callbacks.reset = nw_protocol_default_reset;
  v12->callbacks.input_flush = nw_framer_protocol_input_flush;
  v12->callbacks.input_available = nw_framer_protocol_input_available;
  v12->callbacks.output_available = nw_framer_protocol_output_available;
  v12->callbacks.output_finished = nw_framer_protocol_output_finished;
  v12->callbacks.get_output_local_endpoint = nw_protocol_default_get_output_local;
  v12->callbacks.copy_info = nw_framer_protocol_copy_info;
  v12->callbacks.add_listen_handler = nw_protocol_default_add_listen_handler;
  v12->callbacks.get_local_endpoint = nw_protocol_default_get_local;
  v12->callbacks.get_remote_endpoint = nw_framer_protocol_get_remote_endpoint;
  v12->callbacks.get_parameters = nw_framer_protocol_get_parameters;
  v12->callbacks.get_path = nw_protocol_default_get_path;
  v16 = v12;
  v16->protocol.handle = v16;
LABEL_11:

  return p_protocol;
}

void sub_1833D2720(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_framer_allocate_metadata(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_1833D2868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_deallocate_metadata(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  _QWORD applier[5];

  v3 = *a2;
  if (*a2)
  {
    applier[0] = MEMORY[0x1E0C809B0];
    applier[1] = 3221225472;
    applier[2] = ___ZL29nw_framer_deallocate_metadataPU36objcproto25OS_nw_protocol_definition8NSObjectPv_block_invoke;
    applier[3] = &__block_descriptor_40_e37_B24__0r_8__NSObject_OS_xpc_object__16l;
    applier[4] = a2;
    xpc_dictionary_apply(v3, applier);
    v4 = *a2;
  }
  else
  {
    v4 = 0;
  }
  *a2 = 0;

  v5 = a2[1];
  a2[1] = 0;

  v6 = a2[2];
  a2[2] = 0;

  v7 = a2[3];
  a2[3] = 0;

  free(a2);
}

nw_framer_message_t nw_framer_message_create_reply(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  char is_framer;
  id *v6;
  NSObject *v7;
  nw_framer_message_t message;
  id *v9;
  uint64_t isa;
  id *v11;
  NSObject *v12;
  NSObject *v13;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[4];
  id *v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_framer_message_create_reply";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v16, &type, &v30))
      goto LABEL_47;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null original_message", buf, 0xCu);
      }
      goto LABEL_46;
    }
    if (!v30)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null original_message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null original_message, no backtrace", buf, 0xCu);
      }
      goto LABEL_46;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_framer_message_create_reply";
      v34 = 2082;
      v35 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null original_message, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_34;
  }
  v3 = (id *)v1;
  v4 = v3[1];

  is_framer = nw_protocol_definition_is_framer(v4);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_framer_message_create_reply";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v16, &type, &v30))
      goto LABEL_47;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message)", buf, 0xCu);
      }
LABEL_46:

LABEL_47:
      if (v16)
        free(v16);
      goto LABEL_10;
    }
    if (!v30)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_framer_message_create_reply";
        _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message), no backtrace", buf, 0xCu);
      }
      goto LABEL_46;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_framer_message_create_reply";
      v34 = 2082;
      v35 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null nw_protocol_metadata_is_framer_message(original_message), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_34:

    free(backtrace_string);
    goto LABEL_47;
  }
  if ((nw_protocol_metadata_supports_replies(v3) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v33 = "nw_framer_message_create_reply";
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s Protocol does not support replies, cannot create a reply", buf, 0xCu);
    }

LABEL_10:
    message = 0;
    goto LABEL_14;
  }
  v6 = v3;
  v7 = v3[1];

  message = nw_framer_protocol_create_message(v7);
  if (message)
  {
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __nw_framer_message_create_reply_block_invoke;
    v28[3] = &unk_1E14A9F20;
    v9 = v6;
    v29 = v9;
    isa = (uint64_t)message[4].isa;
    if (isa)
    {
      __nw_framer_message_create_reply_block_invoke((uint64_t)v28, isa);
      v11 = v29;
    }
    else
    {
      v11 = v9;
    }
    v13 = message;

  }
LABEL_14:

  return message;
}

void sub_1833D2EEC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void *nw_framer_metadata_copy_original(uint64_t a1, uint64_t a2)
{
  void *v2;
  id v3;

  v2 = *(void **)(a2 + 24);
  if (v2)
    v3 = v2;
  return v2;
}

void nw_framer_metadata_set_original(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  char is_framer;
  id v9;
  uint64_t v10;
  NSObject *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[5];
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_framer_metadata_set_original";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null metadata", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_framer_metadata_set_original";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null metadata, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_61:
        if (!v13)
          goto LABEL_11;
LABEL_62:
        free(v13);
        goto LABEL_11;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null metadata, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null metadata, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  if (!v4)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_framer_metadata_set_original";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null original", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null original, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null original, no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_framer_metadata_set_original";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null original, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_41;
  }
  v6 = v3;
  v7 = *((id *)v6 + 1);

  is_framer = nw_protocol_definition_is_framer(v7);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_framer_metadata_set_original";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &type, &v32))
      goto LABEL_61;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata)", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_metadata_set_original";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata), no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_framer_metadata_set_original";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null nw_protocol_metadata_is_framer_message(metadata), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_41:

    free(v23);
    if (!v13)
      goto LABEL_11;
    goto LABEL_62;
  }
  if ((nw_protocol_metadata_supports_replies(v5) & 1) != 0)
  {
    v31[0] = MEMORY[0x1E0C809B0];
    v31[1] = 3221225472;
    v31[2] = ___ZL31nw_framer_metadata_set_originalPU34objcproto23OS_nw_protocol_metadata8NSObjectS1__block_invoke;
    v31[3] = &unk_1E14A9F20;
    v9 = v5;
    v31[4] = v9;
    v10 = *((_QWORD *)v6 + 4);
    if (v10)
      ___ZL31nw_framer_metadata_set_originalPU34objcproto23OS_nw_protocol_metadata8NSObjectS1__block_invoke((uint64_t)v31, v10);

  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v35 = "nw_framer_metadata_set_original";
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s Protocol does not support replies, cannot create a reply", buf, 0xCu);
    }

  }
LABEL_11:

}

BOOL nw_framer_allocate_options(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 result;
  NSObject *v4;
  void *v5;

  v1 = a1;
  v2 = malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v2)
    goto LABEL_2;
  __nwlog_obj();
  v4 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
  v5 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v5);
  if (!result)
  {
    free(v5);
LABEL_2:

    return (BOOL)v2;
  }
  __break(1u);
  return result;
}

void sub_1833D3814(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_framer_duplicate_options(void *a1, uint64_t *a2)
{
  id v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BOOL8 result;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  NSObject *v13;
  void *v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (!a2)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_framer_duplicate_options";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v10, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_framer_duplicate_options";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null existing_handle", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_framer_duplicate_options";
            v23 = 2082;
            v24 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null existing_handle, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_framer_duplicate_options";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null existing_handle, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_framer_duplicate_options";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null existing_handle, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_25:
    if (v10)
      free(v10);
    v4 = 0;
    goto LABEL_5;
  }
  v4 = (void **)malloc_type_calloc(1uLL, 0x10uLL, 0xEAFB8F1AuLL);
  if (v4)
  {
    v5 = *a2;
    if (!*a2)
    {
LABEL_5:

      return (BOOL)v4;
    }
LABEL_4:
    v6 = nw_dictionary_copy(v5);
    v7 = *v4;
    *v4 = (void *)v6;

    goto LABEL_5;
  }
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v22 = "strict_calloc";
  v23 = 2048;
  v24 = 1;
  v25 = 2048;
  v26 = 16;
  v14 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v14);
  if (!result)
  {
    free(v14);
    v5 = *a2;
    if (!*a2)
      goto LABEL_5;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void sub_1833D3BA4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_deallocate_options(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;

  v3 = *a2;
  *a2 = 0;

  v4 = a2[1];
  a2[1] = 0;

  free(a2);
}

BOOL nw_framer_options_are_equal(void *a1, uint64_t *a2, uint64_t *a3)
{
  id v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL8 v9;
  size_t count;
  uint64_t v11;
  _QWORD v13[6];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;

  v5 = a1;
  v6 = *a2;
  v7 = *a3;
  if (*a2)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    v9 = v6 == v7;
  }
  else
  {
    count = nw_dictionary_get_count(v6);
    if (count == nw_dictionary_get_count(*a3))
    {
      v14 = 0;
      v15 = &v14;
      v16 = 0x2020000000;
      v17 = 1;
      v11 = *a2;
      v13[0] = MEMORY[0x1E0C809B0];
      v13[1] = 3221225472;
      v13[2] = ___ZL27nw_framer_options_are_equalPU36objcproto25OS_nw_protocol_definition8NSObjectPvS2__block_invoke;
      v13[3] = &unk_1E149C778;
      v13[4] = &v14;
      v13[5] = a3;
      nw_dictionary_apply(v11, (uint64_t)v13);
      v9 = *((_BYTE *)v15 + 24) != 0;
      _Block_object_dispose(&v14, 8);
    }
    else
    {
      v9 = 0;
    }
  }

  return v9;
}

uint64_t ___ZL27nw_framer_options_are_equalPU36objcproto25OS_nw_protocol_definition8NSObjectPvS2__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  id v6;
  void *v7;
  uint64_t v8;

  v5 = a3;
  v6 = nw_dictionary_copy_value(**(_QWORD **)(a1 + 40), a2);
  v7 = v6;
  if (v6 && (v6 == v5 || (objc_msgSend(v5, "isEqual:", v6) & 1) != 0))
  {
    v8 = 1;
  }
  else
  {
    v8 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 0;
  }

  return v8;
}

void sub_1833D3D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_framer_metadata_set_originalPU34objcproto23OS_nw_protocol_metadata8NSObjectS1__block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  return 1;
}

nw_framer_message_t nw_framer_protocol_create_message(nw_protocol_definition_t definition)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *singleton;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = definition;
  v2 = v1;
  if (v1)
  {
    singleton = nw_protocol_metadata_create_singleton(v1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_framer_protocol_create_message";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_framer_protocol_create_message";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_framer_protocol_create_message";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_framer_protocol_create_message";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_framer_protocol_create_message";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  singleton = 0;
LABEL_3:

  return singleton;
}

void sub_1833D4038(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_framer_message_create_reply_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 24), *(id *)(a1 + 32));
  return 1;
}

uint64_t ___ZL29nw_framer_deallocate_metadataPU36objcproto25OS_nw_protocol_definition8NSObjectPv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t value;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  value = xpc_pointer_get_value();
  if (value)
  {
    v5 = value;
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (v6)
    {
      v7 = nw_dictionary_copy_value(v6, a2);
      v8 = v7;
      if (v7)
        (*((void (**)(void *, uint64_t))v7 + 2))(v7, v5);

    }
  }
  return 1;
}

void sub_1833D40DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  id v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  id *v16;
  id v17;
  os_log_type_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  unsigned __int8 *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  nw_protocol_callbacks *callbacks;
  uint64_t (*supports_external_data)(nw_protocol *);
  uint64_t v30;
  NSObject *v31;
  void *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  void *v37;
  os_log_type_t v38;
  void *v39;
  os_log_type_t v40;
  char *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  char *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  os_log_type_t v47;
  _BOOL4 v48;
  NSObject *v49;
  void *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  void *v54;
  os_log_type_t v55;
  os_log_type_t v56;
  os_log_type_t v57;
  os_log_type_t v58;
  char *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  os_log_type_t v65;
  char v66;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v69;
  __int16 v70;
  char *v71;
  __int16 v72;
  char *v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1->handle;
    v5 = v4;
    if (v4)
    {
      if (v4[1])
      {
        if (a1->default_input_handler)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v6 = (id)gLogObj;
          *(_DWORD *)buf = 136446466;
          v69 = "nw_framer_protocol_add_input_handler";
          v70 = 2080;
          v71 = (char *)v5 + 609;
          v7 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v66 = 0;
          if (!__nwlog_fault(v7, &type, &v66))
            goto LABEL_50;
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v8 = (id)gLogObj;
            v9 = type;
            if (os_log_type_enabled(v8, type))
            {
              *(_DWORD *)buf = 136446466;
              v69 = "nw_framer_protocol_add_input_handler";
              v70 = 2080;
              v71 = (char *)v5 + 609;
              _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s %s Protocol instance already has default input handler", buf, 0x16u);
            }
          }
          else if (v66)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v8 = (id)gLogObj;
            v12 = type;
            v13 = os_log_type_enabled(v8, type);
            if (backtrace_string)
            {
              if (v13)
              {
                *(_DWORD *)buf = 136446722;
                v69 = "nw_framer_protocol_add_input_handler";
                v70 = 2080;
                v71 = (char *)v5 + 609;
                v72 = 2082;
                v73 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s %s Protocol instance already has default input handler, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(backtrace_string);
              if (!v7)
                goto LABEL_52;
              goto LABEL_51;
            }
            if (v13)
            {
              *(_DWORD *)buf = 136446466;
              v69 = "nw_framer_protocol_add_input_handler";
              v70 = 2080;
              v71 = (char *)v5 + 609;
              _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s %s Protocol instance already has default input handler, no backtrace", buf, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v8 = (id)gLogObj;
            v18 = type;
            if (os_log_type_enabled(v8, type))
            {
              *(_DWORD *)buf = 136446466;
              v69 = "nw_framer_protocol_add_input_handler";
              v70 = 2080;
              v71 = (char *)v5 + 609;
              _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s %s Protocol instance already has default input handler, backtrace limit exceeded", buf, 0x16u);
            }
          }
          goto LABEL_49;
        }
        if (gLogDatapath)
        {
          __nwlog_obj();
          v49 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            v69 = "nw_framer_protocol_add_input_handler";
            v70 = 2080;
            v71 = (char *)v5 + 609;
            _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %s Protocol add input handler", buf, 0x16u);
          }

        }
        nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
        if (a2)
        {
          *(_OWORD *)a1->flow_id = *(_OWORD *)a2->flow_id;
          if (!a2->output_handler)
            nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
          v10 = (void *)v5[45];
          if (!v10)
          {
LABEL_40:
            callbacks = a2->callbacks;
            if (callbacks)
            {
              supports_external_data = (uint64_t (*)(nw_protocol *))callbacks->supports_external_data;
              if (supports_external_data)
                *((_BYTE *)v5 + 606) = *((_BYTE *)v5 + 606) & 0xFE | supports_external_data(a2);
            }
            goto LABEL_43;
          }
        }
        else
        {
          v10 = (void *)v5[45];
          if (!v10)
            goto LABEL_43;
        }
        v14 = nw_parameters_copy_protocol_options_legacy(v10, (nw_protocol *)(v5 + 36));
        v15 = v14;
        if (v14)
        {
          v16 = v14;
          v17 = v16[1];

        }
        else
        {
          v17 = (id)v5[1];
        }
        v19 = v17;
        v20 = v19;
        if (v19)
        {
          v21 = *((_QWORD *)v19 + 9);
          if (v21)
          {
            v22 = _Block_copy(*(const void **)(v21 + 80));
            goto LABEL_32;
          }
          __nwlog_obj();
          v54 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v69 = "nw_protocol_definition_copy_framer_start";
          v51 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v66 = 0;
          if (__nwlog_fault(v51, &type, &v66))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v52 = objc_claimAutoreleasedReturnValue();
              v55 = type;
              if (os_log_type_enabled(v52, type))
              {
                *(_DWORD *)buf = 136446210;
                v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_182FBE000, v52, v55, "%{public}s called with null definition->common_state", buf, 0xCu);
              }
LABEL_140:

              goto LABEL_141;
            }
            if (!v66)
            {
              __nwlog_obj();
              v52 = objc_claimAutoreleasedReturnValue();
              v65 = type;
              if (os_log_type_enabled(v52, type))
              {
                *(_DWORD *)buf = 136446210;
                v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_182FBE000, v52, v65, "%{public}s called with null definition->common_state, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_140;
            }
            v59 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v52 = objc_claimAutoreleasedReturnValue();
            v62 = type;
            v63 = os_log_type_enabled(v52, type);
            if (!v59)
            {
              if (v63)
              {
                *(_DWORD *)buf = 136446210;
                v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_182FBE000, v52, v62, "%{public}s called with null definition->common_state, no backtrace", buf, 0xCu);
              }
              goto LABEL_140;
            }
            if (v63)
            {
              *(_DWORD *)buf = 136446466;
              v69 = "nw_protocol_definition_copy_framer_start";
              v70 = 2082;
              v71 = v59;
              _os_log_impl(&dword_182FBE000, v52, v62, "%{public}s called with null definition->common_state, dumping backtrace:%{public}s", buf, 0x16u);
            }
            goto LABEL_128;
          }
        }
        else
        {
          __nwlog_obj();
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v69 = "nw_protocol_definition_copy_framer_start";
          v51 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v66 = 0;
          if (__nwlog_fault(v51, &type, &v66))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v52 = objc_claimAutoreleasedReturnValue();
              v53 = type;
              if (os_log_type_enabled(v52, type))
              {
                *(_DWORD *)buf = 136446210;
                v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s called with null definition", buf, 0xCu);
              }
              goto LABEL_140;
            }
            if (!v66)
            {
              __nwlog_obj();
              v52 = objc_claimAutoreleasedReturnValue();
              v64 = type;
              if (os_log_type_enabled(v52, type))
              {
                *(_DWORD *)buf = 136446210;
                v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_182FBE000, v52, v64, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_140;
            }
            v59 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v52 = objc_claimAutoreleasedReturnValue();
            v60 = type;
            v61 = os_log_type_enabled(v52, type);
            if (!v59)
            {
              if (v61)
              {
                *(_DWORD *)buf = 136446210;
                v69 = "nw_protocol_definition_copy_framer_start";
                _os_log_impl(&dword_182FBE000, v52, v60, "%{public}s called with null definition, no backtrace", buf, 0xCu);
              }
              goto LABEL_140;
            }
            if (v61)
            {
              *(_DWORD *)buf = 136446466;
              v69 = "nw_protocol_definition_copy_framer_start";
              v70 = 2082;
              v71 = v59;
              _os_log_impl(&dword_182FBE000, v52, v60, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
            }
LABEL_128:

            free(v59);
          }
        }
LABEL_141:
        if (v51)
          free(v51);
        v22 = 0;
LABEL_32:

        v23 = (void *)v5[49];
        v5[49] = v22;

        if (!v5[49])
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = (id)gLogObj;
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v69 = "nw_framer_protocol_add_input_handler";
            v70 = 2080;
            v71 = (char *)v5 + 609;
            _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s %s Failed to find start block on framer", buf, 0x16u);
          }

          goto LABEL_52;
        }
        if (v15)
        {
          v24 = v15;
          *((_BYTE *)v5 + 609) = 0;
          v25 = 84;
          v26 = 609;
          while (1)
          {
            v27 = v24[v26 - 561];
            *((_BYTE *)v5 + v26) = v27;
            if (!v27)
              break;
            --v25;
            ++v26;
            if (v25 <= 1)
            {
              *((_BYTE *)v5 + v26) = 0;
              break;
            }
          }

        }
        if (a2)
          goto LABEL_40;
LABEL_43:
        v30 = 1;
LABEL_53:

        return v30;
      }
      __nwlog_obj();
      v39 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v69 = "nw_framer_protocol_add_input_handler";
      v7 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v66 = 0;
      if (!__nwlog_fault(v7, &type, &v66))
      {
LABEL_50:
        if (!v7)
        {
LABEL_52:
          v30 = 0;
          goto LABEL_53;
        }
LABEL_51:
        free(v7);
        goto LABEL_52;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v40 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_182FBE000, v8, v40, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_49:

        goto LABEL_50;
      }
      if (!v66)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v58 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_182FBE000, v8, v58, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_49;
      }
      v44 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      v48 = os_log_type_enabled(v8, type);
      if (!v44)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_182FBE000, v8, v47, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_49;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        v69 = "nw_framer_protocol_add_input_handler";
        v70 = 2082;
        v71 = v44;
        _os_log_impl(&dword_182FBE000, v8, v47, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v69 = "nw_framer_protocol_add_input_handler";
      v7 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v66 = 0;
      if (!__nwlog_fault(v7, &type, &v66))
        goto LABEL_50;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_182FBE000, v8, v38, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_49;
      }
      if (!v66)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v57 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_182FBE000, v8, v57, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_49;
      }
      v44 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      v46 = os_log_type_enabled(v8, type);
      if (!v44)
      {
        if (v46)
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_add_input_handler";
          _os_log_impl(&dword_182FBE000, v8, v45, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_49;
      }
      if (v46)
      {
        *(_DWORD *)buf = 136446466;
        v69 = "nw_framer_protocol_add_input_handler";
        v70 = 2082;
        v71 = v44;
        _os_log_impl(&dword_182FBE000, v8, v45, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v44);
    goto LABEL_50;
  }
  __nwlog_obj();
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v69 = "nw_framer_protocol_add_input_handler";
  v34 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v66 = 0;
  if (__nwlog_fault(v34, &type, &v66))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v69 = "nw_framer_protocol_add_input_handler";
        _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v66)
    {
      v41 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      v43 = os_log_type_enabled(v35, type);
      if (v41)
      {
        if (v43)
        {
          *(_DWORD *)buf = 136446466;
          v69 = "nw_framer_protocol_add_input_handler";
          v70 = 2082;
          v71 = v41;
          _os_log_impl(&dword_182FBE000, v35, v42, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v41);
        goto LABEL_110;
      }
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        v69 = "nw_framer_protocol_add_input_handler";
        _os_log_impl(&dword_182FBE000, v35, v42, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v35 = objc_claimAutoreleasedReturnValue();
      v56 = type;
      if (os_log_type_enabled(v35, type))
      {
        *(_DWORD *)buf = 136446210;
        v69 = "nw_framer_protocol_add_input_handler";
        _os_log_impl(&dword_182FBE000, v35, v56, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_110:
  if (v34)
    free(v34);
  return 0;
}

void sub_1833D5078(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_replace_input_handler(nw_protocol *a1, nw_protocol *a2, nw_protocol *a3)
{
  _QWORD *v6;
  char *v7;
  id v8;
  nw_protocol *default_input_handler;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  nw_protocol *v13;
  nw_protocol_callbacks *callbacks;
  uint64_t (*supports_external_data)(nw_protocol *);
  char v16;
  uint64_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  nw_protocol *v21;
  os_log_type_t v22;
  nw_protocol *v23;
  nw_protocol *v24;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  void *v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  void *v35;
  os_log_type_t v36;
  void *v37;
  os_log_type_t v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  char *v42;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  _BOOL4 v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  os_log_type_t v55;
  char v56;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v59;
  __int16 v60;
  char *v61;
  __int16 v62;
  nw_protocol *v63;
  __int16 v64;
  nw_protocol *v65;
  __int16 v66;
  char *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v6 = a1->handle;
    v7 = (char *)v6;
    if (v6)
    {
      if (v6[1])
      {
        if (a2)
        {
          if (a3)
          {
            if (a1->default_input_handler == a2)
            {
              nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a3);
              *(_OWORD *)a1->flow_id = *(_OWORD *)a3->flow_id;
              if (!a3->output_handler)
                nw_protocol_set_output_handler((uint64_t)a3, (uint64_t)a1);
              callbacks = a3->callbacks;
              if (callbacks
                && (supports_external_data = (uint64_t (*)(nw_protocol *))callbacks->supports_external_data) != 0)
              {
                v16 = v7[606] & 0xFE | supports_external_data(a3);
              }
              else
              {
                v16 = v7[606] & 0xFE;
              }
              v7[606] = v16;
              v17 = 1;
              goto LABEL_33;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v8 = (id)gLogObj;
            default_input_handler = a1->default_input_handler;
            *(_DWORD *)buf = 136446978;
            v59 = "nw_framer_protocol_replace_input_handler";
            v60 = 2080;
            v61 = v7 + 609;
            v62 = 2048;
            v63 = default_input_handler;
            v64 = 2048;
            v65 = a2;
            v10 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v56 = 0;
            if (__nwlog_fault(v10, &type, &v56))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v11 = (id)gLogObj;
                v12 = type;
                if (os_log_type_enabled(v11, type))
                {
                  v13 = a1->default_input_handler;
                  *(_DWORD *)buf = 136446978;
                  v59 = "nw_framer_protocol_replace_input_handler";
                  v60 = 2080;
                  v61 = v7 + 609;
                  v62 = 2048;
                  v63 = v13;
                  v64 = 2048;
                  v65 = a2;
                  _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s %s Old input handler does not match (%p != %p)", buf, 0x2Au);
                }
              }
              else if (v56)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v11 = (id)gLogObj;
                v19 = type;
                v20 = os_log_type_enabled(v11, type);
                if (backtrace_string)
                {
                  if (v20)
                  {
                    v21 = a1->default_input_handler;
                    *(_DWORD *)buf = 136447234;
                    v59 = "nw_framer_protocol_replace_input_handler";
                    v60 = 2080;
                    v61 = v7 + 609;
                    v62 = 2048;
                    v63 = v21;
                    v64 = 2048;
                    v65 = a2;
                    v66 = 2082;
                    v67 = backtrace_string;
                    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s %s Old input handler does not match (%p != %p), dumping backtrace:%{public}s", buf, 0x34u);
                  }

                  free(backtrace_string);
                  if (!v10)
                    goto LABEL_32;
                  goto LABEL_31;
                }
                if (v20)
                {
                  v24 = a1->default_input_handler;
                  *(_DWORD *)buf = 136446978;
                  v59 = "nw_framer_protocol_replace_input_handler";
                  v60 = 2080;
                  v61 = v7 + 609;
                  v62 = 2048;
                  v63 = v24;
                  v64 = 2048;
                  v65 = a2;
                  _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s %s Old input handler does not match (%p != %p), no backtrace", buf, 0x2Au);
                }
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v11 = (id)gLogObj;
                v22 = type;
                if (os_log_type_enabled(v11, type))
                {
                  v23 = a1->default_input_handler;
                  *(_DWORD *)buf = 136446978;
                  v59 = "nw_framer_protocol_replace_input_handler";
                  v60 = 2080;
                  v61 = v7 + 609;
                  v62 = 2048;
                  v63 = v23;
                  v64 = 2048;
                  v65 = a2;
                  _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s %s Old input handler does not match (%p != %p), backtrace limit exceeded", buf, 0x2Au);
                }
              }

            }
LABEL_30:
            if (!v10)
            {
LABEL_32:
              v17 = 0;
LABEL_33:

              return v17;
            }
LABEL_31:
            free(v10);
            goto LABEL_32;
          }
          __nwlog_obj();
          v37 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v59 = "nw_framer_protocol_replace_input_handler";
          v10 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v56 = 0;
          if (!__nwlog_fault(v10, &type, &v56))
            goto LABEL_30;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v31 = objc_claimAutoreleasedReturnValue();
            v38 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)buf = 136446210;
              v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_182FBE000, v31, v38, "%{public}s called with null new_input_handler", buf, 0xCu);
            }
LABEL_118:

            goto LABEL_30;
          }
          if (!v56)
          {
            __nwlog_obj();
            v31 = objc_claimAutoreleasedReturnValue();
            v55 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)buf = 136446210;
              v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_182FBE000, v31, v55, "%{public}s called with null new_input_handler, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_118;
          }
          v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v31 = objc_claimAutoreleasedReturnValue();
          v49 = type;
          v50 = os_log_type_enabled(v31, type);
          if (!v42)
          {
            if (v50)
            {
              *(_DWORD *)buf = 136446210;
              v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_182FBE000, v31, v49, "%{public}s called with null new_input_handler, no backtrace", buf, 0xCu);
            }
            goto LABEL_118;
          }
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            v59 = "nw_framer_protocol_replace_input_handler";
            v60 = 2082;
            v61 = v42;
            _os_log_impl(&dword_182FBE000, v31, v49, "%{public}s called with null new_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
        else
        {
          __nwlog_obj();
          v35 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446210;
          v59 = "nw_framer_protocol_replace_input_handler";
          v10 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v56 = 0;
          if (!__nwlog_fault(v10, &type, &v56))
            goto LABEL_30;
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v31 = objc_claimAutoreleasedReturnValue();
            v36 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)buf = 136446210;
              v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_182FBE000, v31, v36, "%{public}s called with null old_input_handler", buf, 0xCu);
            }
            goto LABEL_118;
          }
          if (!v56)
          {
            __nwlog_obj();
            v31 = objc_claimAutoreleasedReturnValue();
            v54 = type;
            if (os_log_type_enabled(v31, type))
            {
              *(_DWORD *)buf = 136446210;
              v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_182FBE000, v31, v54, "%{public}s called with null old_input_handler, backtrace limit exceeded", buf, 0xCu);
            }
            goto LABEL_118;
          }
          v42 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v31 = objc_claimAutoreleasedReturnValue();
          v47 = type;
          v48 = os_log_type_enabled(v31, type);
          if (!v42)
          {
            if (v48)
            {
              *(_DWORD *)buf = 136446210;
              v59 = "nw_framer_protocol_replace_input_handler";
              _os_log_impl(&dword_182FBE000, v31, v47, "%{public}s called with null old_input_handler, no backtrace", buf, 0xCu);
            }
            goto LABEL_118;
          }
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            v59 = "nw_framer_protocol_replace_input_handler";
            v60 = 2082;
            v61 = v42;
            _os_log_impl(&dword_182FBE000, v31, v47, "%{public}s called with null old_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }
        }
      }
      else
      {
        __nwlog_obj();
        v33 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v59 = "nw_framer_protocol_replace_input_handler";
        v10 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v56 = 0;
        if (!__nwlog_fault(v10, &type, &v56))
          goto LABEL_30;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v31 = objc_claimAutoreleasedReturnValue();
          v34 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            v59 = "nw_framer_protocol_replace_input_handler";
            _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
          goto LABEL_118;
        }
        if (!v56)
        {
          __nwlog_obj();
          v31 = objc_claimAutoreleasedReturnValue();
          v53 = type;
          if (os_log_type_enabled(v31, type))
          {
            *(_DWORD *)buf = 136446210;
            v59 = "nw_framer_protocol_replace_input_handler";
            _os_log_impl(&dword_182FBE000, v31, v53, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_118;
        }
        v42 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        v46 = os_log_type_enabled(v31, type);
        if (!v42)
        {
          if (v46)
          {
            *(_DWORD *)buf = 136446210;
            v59 = "nw_framer_protocol_replace_input_handler";
            _os_log_impl(&dword_182FBE000, v31, v45, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_118;
        }
        if (v46)
        {
          *(_DWORD *)buf = 136446466;
          v59 = "nw_framer_protocol_replace_input_handler";
          v60 = 2082;
          v61 = v42;
          _os_log_impl(&dword_182FBE000, v31, v45, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v59 = "nw_framer_protocol_replace_input_handler";
      v10 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v56 = 0;
      if (!__nwlog_fault(v10, &type, &v56))
        goto LABEL_30;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v59 = "nw_framer_protocol_replace_input_handler";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_118;
      }
      if (!v56)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v52 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v59 = "nw_framer_protocol_replace_input_handler";
          _os_log_impl(&dword_182FBE000, v31, v52, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_118;
      }
      v42 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      v44 = os_log_type_enabled(v31, type);
      if (!v42)
      {
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v59 = "nw_framer_protocol_replace_input_handler";
          _os_log_impl(&dword_182FBE000, v31, v43, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_118;
      }
      if (v44)
      {
        *(_DWORD *)buf = 136446466;
        v59 = "nw_framer_protocol_replace_input_handler";
        v60 = 2082;
        v61 = v42;
        _os_log_impl(&dword_182FBE000, v31, v43, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v42);
    goto LABEL_30;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v59 = "nw_framer_protocol_replace_input_handler";
  v27 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v56 = 0;
  if (__nwlog_fault(v27, &type, &v56))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v59 = "nw_framer_protocol_replace_input_handler";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v56)
    {
      v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      v41 = os_log_type_enabled(v28, type);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v59 = "nw_framer_protocol_replace_input_handler";
          v60 = 2082;
          v61 = v39;
          _os_log_impl(&dword_182FBE000, v28, v40, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        goto LABEL_104;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v59 = "nw_framer_protocol_replace_input_handler";
        _os_log_impl(&dword_182FBE000, v28, v40, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v59 = "nw_framer_protocol_replace_input_handler";
        _os_log_impl(&dword_182FBE000, v28, v51, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_104:
  if (v27)
    free(v27);
  return 0;
}

void sub_1833D5EB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_framer_protocol_remove_input_handler(nw_protocol *a1, nw_protocol *a2, int a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*remove_input_handler)(void);
  char *v25;
  char *v26;
  NSObject *v27;
  void *v28;
  _BOOL8 result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, char *);
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  void *v56;
  os_log_type_t v57;
  NSObject *v58;
  char *backtrace_string;
  os_log_type_t v60;
  _BOOL4 v61;
  char *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  os_log_type_t v65;
  _BOOL4 v66;
  NSObject *v67;
  NSObject *v68;
  NSObject *v69;
  os_log_type_t v70;
  os_log_type_t v71;
  NSObject *v72;
  os_log_type_t v73;
  char v74;
  os_log_type_t type;
  _BYTE buf[24];
  void *v77;
  _QWORD *v78;
  char v79;
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
    v49 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (__nwlog_fault(v49, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v51 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (v74)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v60 = type;
        v61 = os_log_type_enabled(v50, type);
        if (backtrace_string)
        {
          if (v61)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v50, v60, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_111;
        }
        if (v61)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
          _os_log_impl(&dword_182FBE000, v50, v60, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v70 = type;
        if (os_log_type_enabled(v50, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
          _os_log_impl(&dword_182FBE000, v50, v70, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_111:
    if (v49)
      free(v49);
    return 0;
  }
  v6 = a1->handle;
  v7 = v6;
  if (!v6)
  {
    __nwlog_obj();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
    v53 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (!__nwlog_fault(v53, &type, &v74))
      goto LABEL_120;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v55 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null framer", buf, 0xCu);
      }
      goto LABEL_119;
    }
    if (!v74)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v71 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v54, v71, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_119;
    }
    v62 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v54 = objc_claimAutoreleasedReturnValue();
    v63 = type;
    v64 = os_log_type_enabled(v54, type);
    if (!v62)
    {
      if (v64)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v54, v63, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
      goto LABEL_119;
    }
    if (v64)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v62;
      _os_log_impl(&dword_182FBE000, v54, v63, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_86;
  }
  if (!v6[1])
  {
    __nwlog_obj();
    v56 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
    v53 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (!__nwlog_fault(v53, &type, &v74))
      goto LABEL_120;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v57 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v54, v57, "%{public}s called with null framer->parent_definition", buf, 0xCu);
      }
LABEL_119:

LABEL_120:
      if (v53)
        free(v53);
      goto LABEL_9;
    }
    if (!v74)
    {
      __nwlog_obj();
      v54 = objc_claimAutoreleasedReturnValue();
      v73 = type;
      if (os_log_type_enabled(v54, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v54, v73, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_119;
    }
    v62 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v54 = objc_claimAutoreleasedReturnValue();
    v65 = type;
    v66 = os_log_type_enabled(v54, type);
    if (!v62)
    {
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
        _os_log_impl(&dword_182FBE000, v54, v65, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_119;
    }
    if (v66)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v62;
      _os_log_impl(&dword_182FBE000, v54, v65, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_86:

    free(v62);
    goto LABEL_120;
  }
  if (a2 && a2->output_handler == a1)
    nw_protocol_set_output_handler((uint64_t)a2, 0);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v58 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = (char *)v7 + 609;
      _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s %s Remove input handler", buf, 0x16u);
    }

  }
  if (a1->default_input_handler != a2)
  {
LABEL_9:
    v8 = 0;
LABEL_52:

    return v8;
  }
  v9 = MEMORY[0x1E0C809B0];
  if (v7[66])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = (char *)v7 + 609;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s %s finalizing remaining pending input frames", buf, 0x16u);
    }

    if (gLogDatapath)
    {
      __nwlog_obj();
      v67 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }

    }
    *(_QWORD *)buf = v9;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5189;
    v77 = &__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    v78 = v7 + 66;
    v79 = 0;
    v11 = v7[66];
    do
    {
      if (!v11)
        break;
      v12 = *(_QWORD *)(v11 + 32);
      v13 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v11 = v12;
    }
    while ((v13 & 1) != 0);
  }
  if (v7[64])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = (char *)v7 + 609;
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s %s finalizing remaining received input frames", buf, 0x16u);
    }

    if (gLogDatapath)
    {
      __nwlog_obj();
      v68 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v68, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }

    }
    *(_QWORD *)buf = v9;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5189;
    v77 = &__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    v78 = v7 + 64;
    v79 = 0;
    v15 = v7[64];
    do
    {
      if (!v15)
        break;
      v16 = *(_QWORD *)(v15 + 32);
      v17 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v15 = v16;
    }
    while ((v17 & 1) != 0);
  }
  if (v7[71])
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_protocol_remove_input_handler";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = (char *)v7 + 609;
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_INFO, "%{public}s %s finalizing remaining received output frames", buf, 0x16u);
    }

    if (gLogDatapath)
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_finalize_temp_frame_array";
        _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_DEBUG, "%{public}s called", buf, 0xCu);
      }

    }
    *(_QWORD *)buf = v9;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5189;
    v77 = &__block_descriptor_41_e31_B16__0__NSObject_OS_nw_frame__8l;
    v78 = v7 + 71;
    v79 = 0;
    v19 = v7[71];
    do
    {
      if (!v19)
        break;
      v20 = *(_QWORD *)(v19 + 32);
      v21 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
      v19 = v20;
    }
    while ((v21 & 1) != 0);
  }
  nw_protocol_set_input_handler((uint64_t)a1, 0);
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      remove_input_handler = (void (*)(void))callbacks->remove_input_handler;
      if (remove_input_handler)
      {
        remove_input_handler();
        nw_protocol_set_output_handler((uint64_t)a1, 0);
      }
    }
  }
  if (!a3)
  {
LABEL_51:
    v8 = 1;
    goto LABEL_52;
  }
  v25 = v7;
  v26 = (char *)*((_QWORD *)v25 + 41);
  if (v26 == v25)
  {
LABEL_39:
    if (gLogDatapath)
    {
      __nwlog_obj();
      v72 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_framer_protocol_destroy";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v25 + 609;
        _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_DEBUG, "%{public}s %s Destroying protocol", buf, 0x16u);
      }

    }
    v30 = *((_QWORD *)v25 + 54);
    if (v30)
      (*(void (**)(uint64_t, char *))(v30 + 16))(v30, v25);
    nw_protocol_remove_instance((uint64_t)(v25 + 288));
    v31 = *((_QWORD *)v25 + 40);
    if (v31)
    {
      v32 = *(_QWORD *)(v31 + 24);
      if (v32)
      {
        v33 = *(void (**)(uint64_t, char *))(v32 + 8);
        if (v33)
        {
          v33(v31, v25 + 288);
          nw_protocol_set_output_handler((uint64_t)(v25 + 288), 0);
        }
      }
    }
    while (1)
    {
      v34 = (void *)*((_QWORD *)v25 + 58);
      if (!v34)
        break;
      v35 = v34;
      nw_frame_finalize((uint64_t)v35);

    }
    while (1)
    {
      v37 = (void *)*((_QWORD *)v25 + 60);
      if (!v37)
        break;
      v36 = v37;
      nw_frame_finalize((uint64_t)v36);

    }
    v38 = *((id *)v25 + 46);
    nw_context_reset_timer_block_with_time(v38, (uint64_t)v25, -1, 0);

    v39 = (void *)*((_QWORD *)v25 + 70);
    *((_QWORD *)v25 + 70) = 0;

    *((_QWORD *)v25 + 41) = 0;
    v40 = (void *)*((_QWORD *)v25 + 45);
    *((_QWORD *)v25 + 45) = 0;

    v41 = (void *)*((_QWORD *)v25 + 44);
    *((_QWORD *)v25 + 44) = 0;

    v42 = (void *)*((_QWORD *)v25 + 49);
    *((_QWORD *)v25 + 49) = 0;

    v43 = (void *)*((_QWORD *)v25 + 50);
    *((_QWORD *)v25 + 50) = 0;

    v44 = (void *)*((_QWORD *)v25 + 51);
    *((_QWORD *)v25 + 51) = 0;

    v45 = (void *)*((_QWORD *)v25 + 52);
    *((_QWORD *)v25 + 52) = 0;

    v46 = (void *)*((_QWORD *)v25 + 53);
    *((_QWORD *)v25 + 53) = 0;

    v47 = (void *)*((_QWORD *)v25 + 54);
    *((_QWORD *)v25 + 54) = 0;

    goto LABEL_51;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v27 = (id)gLogObj;
  os_log_type_enabled(v27, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_framer_protocol_destroy";
  v28 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v28);
  if (!result)
  {
    free(v28);
    goto LABEL_39;
  }
  __break(1u);
  return result;
}

void sub_1833D6C48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_connect(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t v7;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  void *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = a1->handle;
    v4 = v3;
    if (v3)
    {
      if (v3[1])
      {
        output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            if (callbacks->connect)
            {
              v7 = nw_protocol_connect((uint64_t)output_handler, (uint64_t)a1);
LABEL_8:

              return v7;
            }
          }
        }
        v9 = (void *)v4[45];
        if (v9 && nw_parameters_is_custom_protocols_only(v9))
        {
          nw_framer_protocol_connected(a1, 0);
          v7 = 1;
          goto LABEL_8;
        }
LABEL_66:
        v7 = 0;
        goto LABEL_8;
      }
      __nwlog_obj();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v34 = "nw_framer_protocol_connect";
      v15 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v31 = 0;
      if (!__nwlog_fault((const char *)v15, &type, &v31))
      {
LABEL_64:
        if (v15)
          free(v15);
        goto LABEL_66;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_63:

        goto LABEL_64;
      }
      if (!v31)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_63;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      v27 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_63;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446466;
        v34 = "nw_framer_protocol_connect";
        v35 = 2082;
        v36 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v34 = "nw_framer_protocol_connect";
      v15 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v31 = 0;
      if (!__nwlog_fault((const char *)v15, &type, &v31))
        goto LABEL_64;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_63;
      }
      if (!v31)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_182FBE000, v16, v29, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_63;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v16, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_framer_protocol_connect";
          _os_log_impl(&dword_182FBE000, v16, v24, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_63;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        v34 = "nw_framer_protocol_connect";
        v35 = 2082;
        v36 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v16, v24, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_64;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_framer_protocol_connect";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v11, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_framer_protocol_connect";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v31)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v12, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_framer_protocol_connect";
          v35 = 2082;
          v36 = v20;
          _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_55;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_framer_protocol_connect";
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_framer_protocol_connect";
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_55:
  if (v11)
    free(v11);
  return 0;
}

void sub_1833D7374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_protocol_connected(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*connected)(void);
  char v9;
  nw_protocol_callbacks *v10;
  uint64_t v11;
  nw_protocol *v12;
  nw_protocol_callbacks *v13;
  void (*v14)(void);
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  NSObject *v37;
  os_log_type_t type[15];
  char v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1->handle;
    v5 = v4;
    if (v4)
    {
      if (v4[1])
      {
        default_input_handler = a1->default_input_handler;
        if (default_input_handler)
        {
          callbacks = default_input_handler->callbacks;
          if (callbacks)
          {
            connected = (void (*)(void))callbacks->connected;
            if (connected)
              connected();
          }
        }
        if (a1->output_handler == a2)
        {
          v9 = *((_BYTE *)v5 + 606);
          if ((v9 & 8) != 0)
          {
            if ((*((_BYTE *)v5 + 606) & 0x10) != 0)
            {
              v12 = a1->default_input_handler;
              if (v12)
              {
                v13 = v12->callbacks;
                if (v13)
                {
                  v14 = (void (*)(void))v13->connected;
                  if (v14)
                    v14();
                }
              }
            }
          }
          else
          {
            *(_QWORD *)type = 0;
            if (a2)
            {
              v10 = a2->callbacks;
              if (v10)
              {
                v10 = (nw_protocol_callbacks *)v10->get_message_properties;
                if (v10)
                {
                  ((void (*)(nw_protocol *, nw_protocol *, os_log_type_t *))v10)(a2, a1, type);
                  LOBYTE(v10) = type[4];
                  v9 = *((_BYTE *)v5 + 606);
                }
              }
            }
            else
            {
              LOBYTE(v10) = 0;
            }
            *((_BYTE *)v5 + 606) = (2 * (v10 & 1)) | v9 & 0xFD;
            if ((v10 & 1) != 0 && gLogDatapath)
            {
              __nwlog_obj();
              v37 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446466;
                v41 = "nw_framer_protocol_connected";
                v42 = 2080;
                v43 = (char *)v5 + 609;
                _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s %s Output frames will be treated as separate messages", buf, 0x16u);
              }

            }
            v11 = v5[49];
            if (v11)
            {
              *((_BYTE *)v5 + 606) |= 0xCu;
              if ((*(unsigned int (**)(uint64_t, _QWORD *))(v11 + 16))(v11, v5) == 1)
                nw_framer_mark_ready((nw_framer_t)v5);
              *((_BYTE *)v5 + 606) &= ~4u;
              nw_framer_input_loop((NWConcrete_nw_framer *)v5);
            }
            else
            {
              nw_framer_mark_failed_with_error((nw_framer_t)v5, 22);
            }
          }
        }
        goto LABEL_9;
      }
      __nwlog_obj();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v41 = "nw_framer_protocol_connected";
      v20 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v39 = 0;
      if (__nwlog_fault(v20, type, &v39))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v21 = objc_claimAutoreleasedReturnValue();
          v24 = type[0];
          if (os_log_type_enabled(v21, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v41 = "nw_framer_protocol_connected";
            _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v39)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v21 = objc_claimAutoreleasedReturnValue();
          v32 = type[0];
          v33 = os_log_type_enabled(v21, type[0]);
          if (backtrace_string)
          {
            if (v33)
            {
              *(_DWORD *)buf = 136446466;
              v41 = "nw_framer_protocol_connected";
              v42 = 2082;
              v43 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v20)
              goto LABEL_9;
            goto LABEL_81;
          }
          if (v33)
          {
            *(_DWORD *)buf = 136446210;
            v41 = "nw_framer_protocol_connected";
            _os_log_impl(&dword_182FBE000, v21, v32, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v21 = objc_claimAutoreleasedReturnValue();
          v36 = type[0];
          if (os_log_type_enabled(v21, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            v41 = "nw_framer_protocol_connected";
            _os_log_impl(&dword_182FBE000, v21, v36, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_79;
      }
LABEL_80:
      if (!v20)
      {
LABEL_9:

        return;
      }
LABEL_81:
      free(v20);
      goto LABEL_9;
    }
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_framer_protocol_connected";
    v20 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v20, type, &v39))
      goto LABEL_80;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v39)
    {
      v28 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v29 = type[0];
      v30 = os_log_type_enabled(v21, type[0]);
      if (v28)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v41 = "nw_framer_protocol_connected";
          v42 = 2082;
          v43 = v28;
          _os_log_impl(&dword_182FBE000, v21, v29, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v28);
        goto LABEL_80;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_182FBE000, v21, v29, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v35 = type[0];
      if (os_log_type_enabled(v21, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_182FBE000, v21, v35, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_79:

    goto LABEL_80;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v41 = "nw_framer_protocol_connected";
  v16 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v39 = 0;
  if (__nwlog_fault(v16, type, &v39))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v39)
    {
      v25 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v26 = type[0];
      v27 = os_log_type_enabled(v17, type[0]);
      if (v25)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v41 = "nw_framer_protocol_connected";
          v42 = 2082;
          v43 = v25;
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v25);
        goto LABEL_72;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v34 = type[0];
      if (os_log_type_enabled(v17, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_protocol_connected";
        _os_log_impl(&dword_182FBE000, v17, v34, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_72:
  if (v16)
    free(v16);
}

void sub_1833D7BB4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_protocol_disconnect(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  nw_protocol_callbacks *callbacks;
  void (*disconnected)(nw_protocol *, nw_protocol *);
  uint64_t v9;
  uint64_t v10;
  void (*v11)(void);
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  NSObject *v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  os_log_type_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1->handle;
    v5 = v4;
    if (v4)
    {
      if (v4[1])
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_framer_protocol_disconnect";
            v39 = 2080;
            v40 = (char *)v5 + 609;
            _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s %s Disconnect from input handler", buf, 0x16u);
          }

        }
        v6 = v5[53];
        if (!v6 || (*(unsigned int (**)(uint64_t, _QWORD *))(v6 + 16))(v6, v5))
        {
          *((_BYTE *)v5 + 607) |= 0x80u;
          if (a2)
          {
            callbacks = a2->callbacks;
            if (callbacks)
            {
              disconnected = (void (*)(nw_protocol *, nw_protocol *))callbacks->disconnected;
              if (disconnected)
                disconnected(a2, a1);
            }
          }
          v9 = v5[40];
          if (v9)
          {
            v10 = *(_QWORD *)(v9 + 24);
            if (v10)
            {
              v11 = *(void (**)(void))(v10 + 32);
              if (v11)
                v11();
            }
          }
        }
        goto LABEL_15;
      }
      __nwlog_obj();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v38 = "nw_framer_protocol_disconnect";
      v17 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v35 = 0;
      if (__nwlog_fault(v17, &type, &v35))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v21 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_framer_protocol_disconnect";
            _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v35)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v30 = type;
          v31 = os_log_type_enabled(v18, type);
          if (backtrace_string)
          {
            if (v31)
            {
              *(_DWORD *)buf = 136446466;
              v38 = "nw_framer_protocol_disconnect";
              v39 = 2082;
              v40 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v17)
              goto LABEL_15;
            goto LABEL_72;
          }
          if (v31)
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_framer_protocol_disconnect";
            _os_log_impl(&dword_182FBE000, v18, v30, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v18 = objc_claimAutoreleasedReturnValue();
          v34 = type;
          if (os_log_type_enabled(v18, type))
          {
            *(_DWORD *)buf = 136446210;
            v38 = "nw_framer_protocol_disconnect";
            _os_log_impl(&dword_182FBE000, v18, v34, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_70;
      }
LABEL_71:
      if (!v17)
      {
LABEL_15:

        return;
      }
LABEL_72:
      free(v17);
      goto LABEL_15;
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_framer_protocol_disconnect";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (!__nwlog_fault(v17, &type, &v35))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v35)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v18, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_framer_protocol_disconnect";
          v39 = 2082;
          v40 = v26;
          _os_log_impl(&dword_182FBE000, v18, v27, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v26);
        goto LABEL_71;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_182FBE000, v18, v27, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_182FBE000, v18, v33, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_70:

    goto LABEL_71;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v38 = "nw_framer_protocol_disconnect";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (__nwlog_fault(v13, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v35)
    {
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v14, type);
      if (v23)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_framer_protocol_disconnect";
          v39 = 2082;
          v40 = v23;
          _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v23);
        goto LABEL_63;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_framer_protocol_disconnect";
        _os_log_impl(&dword_182FBE000, v14, v32, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_63:
  if (v13)
    free(v13);
}

void sub_1833D8360(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_protocol_disconnected(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  NSObject *v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  NSObject *v30;
  os_log_type_t v31;
  os_log_type_t v32;
  os_log_type_t v33;
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v3 = a1->handle;
    v4 = v3;
    if (v3)
    {
      if (v3[1])
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v20 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            v37 = "nw_framer_protocol_disconnected";
            v38 = 2080;
            v39 = (char *)v4 + 609;
            _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s %s Disconnected from output handler", buf, 0x16u);
          }

        }
        nw_protocol_remove_instance((uint64_t)a1);
        v5 = *((char *)v4 + 607);
        if (v5 < 0)
        {
          if (gLogDatapath)
          {
            __nwlog_obj();
            v30 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              v37 = "nw_framer_protocol_disconnected";
              v38 = 2080;
              v39 = (char *)v4 + 609;
              _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %s Framer is already failed, not calling stop", buf, 0x16u);
            }

          }
        }
        else
        {
          *((_BYTE *)v4 + 607) = v5 | 0x80;
          v6 = v4[53];
          if (v6)
            (*(void (**)(uint64_t, _QWORD *))(v6 + 16))(v6, v4);
          v7 = v4[42];
          if (v7)
          {
            v8 = *(_QWORD *)(v7 + 24);
            if (v8)
            {
              v9 = *(void (**)(void))(v8 + 48);
              if (v9)
                v9();
            }
          }
        }
        goto LABEL_13;
      }
      __nwlog_obj();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v37 = "nw_framer_protocol_disconnected";
      v15 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v34 = 0;
      if (__nwlog_fault(v15, &type, &v34))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v16 = objc_claimAutoreleasedReturnValue();
          v19 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446210;
            v37 = "nw_framer_protocol_disconnected";
            _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v34)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v16 = objc_claimAutoreleasedReturnValue();
          v28 = type;
          v29 = os_log_type_enabled(v16, type);
          if (backtrace_string)
          {
            if (v29)
            {
              *(_DWORD *)buf = 136446466;
              v37 = "nw_framer_protocol_disconnected";
              v38 = 2082;
              v39 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            if (!v15)
              goto LABEL_13;
            goto LABEL_73;
          }
          if (v29)
          {
            *(_DWORD *)buf = 136446210;
            v37 = "nw_framer_protocol_disconnected";
            _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v16 = objc_claimAutoreleasedReturnValue();
          v33 = type;
          if (os_log_type_enabled(v16, type))
          {
            *(_DWORD *)buf = 136446210;
            v37 = "nw_framer_protocol_disconnected";
            _os_log_impl(&dword_182FBE000, v16, v33, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_71;
      }
LABEL_72:
      if (!v15)
      {
LABEL_13:

        return;
      }
LABEL_73:
      free(v15);
      goto LABEL_13;
    }
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_framer_protocol_disconnected";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v15, &type, &v34))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v34)
    {
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v16, type);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_framer_protocol_disconnected";
          v38 = 2082;
          v39 = v24;
          _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        goto LABEL_72;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v16, v32, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_71:

    goto LABEL_72;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v37 = "nw_framer_protocol_disconnected";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (__nwlog_fault(v11, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v34)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v12, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_framer_protocol_disconnected";
          v38 = 2082;
          v39 = v21;
          _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        goto LABEL_64;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_protocol_disconnected";
        _os_log_impl(&dword_182FBE000, v12, v31, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_64:
  if (v11)
    free(v11);
}

void sub_1833D8B64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_protocol_link_state(nw_protocol *a1, nw_protocol *a2, void *a3)
{
  id v5;
  _BYTE *v6;
  _BYTE *v7;
  _DWORD *v8;
  int v9;
  char v10;
  char v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  char *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  char v40;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v43 = "nw_framer_protocol_link_state";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v40 = 0;
    if (!__nwlog_fault(v13, &type, &v40))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_framer_protocol_link_state";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null link_info", buf, 0xCu);
      }
    }
    else if (v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_framer_protocol_link_state";
          v44 = 2082;
          v45 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null link_info, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_73:
        if (!v13)
          goto LABEL_12;
LABEL_74:
        free(v13);
        goto LABEL_12;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_framer_protocol_link_state";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null link_info, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_framer_protocol_link_state";
        _os_log_impl(&dword_182FBE000, v14, v36, "%{public}s called with null link_info, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  if (a1)
  {
    v6 = a1->handle;
    v7 = v6;
    if (v6)
    {
      if (*((_QWORD *)v6 + 1))
      {
        v8 = v5;
        v9 = v8[2];

        if (v9 == 1)
        {
          v11 = v7[606] | 0x20;
        }
        else
        {
          if (v9)
            goto LABEL_11;
          v10 = v7[606];
          v7[606] = v10 & 0xDF;
          if ((v10 & 0x40) == 0)
            goto LABEL_11;
          nw_framer_protocol_output_available(a1, a2);
          v11 = v7[606] & 0xBF;
        }
        v7[606] = v11;
LABEL_11:

        goto LABEL_12;
      }
      __nwlog_obj();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v43 = "nw_framer_protocol_link_state";
      v19 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v40 = 0;
      if (!__nwlog_fault(v19, &type, &v40))
        goto LABEL_81;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
      }
      else if (v40)
      {
        v33 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v20, type);
        if (v33)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v43 = "nw_framer_protocol_link_state";
            v44 = 2082;
            v45 = v33;
            _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v33);
          if (!v19)
            goto LABEL_11;
          goto LABEL_82;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_182FBE000, v20, v34, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_182FBE000, v20, v39, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v18 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v43 = "nw_framer_protocol_link_state";
      v19 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v40 = 0;
      if (!__nwlog_fault(v19, &type, &v40))
        goto LABEL_81;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v40)
      {
        v30 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v20, type);
        if (v30)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v43 = "nw_framer_protocol_link_state";
            v44 = 2082;
            v45 = v30;
            _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v30);
LABEL_81:
          if (!v19)
            goto LABEL_11;
LABEL_82:
          free(v19);
          goto LABEL_11;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_link_state";
          _os_log_impl(&dword_182FBE000, v20, v38, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_81;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v43 = "nw_framer_protocol_link_state";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v40 = 0;
  if (!__nwlog_fault(v13, &type, &v40))
    goto LABEL_73;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "nw_framer_protocol_link_state";
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_72;
  }
  if (!v40)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v37 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v43 = "nw_framer_protocol_link_state";
      _os_log_impl(&dword_182FBE000, v14, v37, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_72;
  }
  v27 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  v28 = type;
  v29 = os_log_type_enabled(v14, type);
  if (!v27)
  {
    if (v29)
    {
      *(_DWORD *)buf = 136446210;
      v43 = "nw_framer_protocol_link_state";
      _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_72;
  }
  if (v29)
  {
    *(_DWORD *)buf = 136446466;
    v43 = "nw_framer_protocol_link_state";
    v44 = 2082;
    v45 = v27;
    _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v27);
  if (v13)
    goto LABEL_74;
LABEL_12:

}

void sub_1833D9490(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_framer_protocol_get_message_properties(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  unsigned __int8 *v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  void *v21;
  uint64_t v22;
  const char *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  const char *v28;
  const char *v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *backtrace_string;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  os_log_type_t v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  char v55;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v58;
  __int16 v59;
  void *v60;
  __int16 v61;
  char *v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v5 = (unsigned __int8 *)*(id *)(a1 + 40);
    v6 = v5;
    if (v5)
    {
      if (*((_QWORD *)v5 + 1))
      {
        if (!a3)
        {
LABEL_11:

          return;
        }
        if ((~v5[608] & 3) != 0)
        {
          v10 = a3[1] & 0xFFFFFFFC;
          *a3 = -1;
          a3[1] = v10;
          goto LABEL_11;
        }
        v7 = *(_QWORD *)(a1 + 32);
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 24);
          if (v8)
          {
            v9 = *(void (**)(void))(v8 + 248);
            if (v9)
            {
              v9();
              goto LABEL_11;
            }
          }
        }
        __nwlog_obj();
        v21 = (void *)objc_claimAutoreleasedReturnValue();
        v22 = *(_QWORD *)(a1 + 32);
        v23 = "invalid";
        if (v22)
        {
          v24 = *(const char **)(v22 + 16);
          if (v24)
            v23 = v24;
        }
        *(_DWORD *)buf = 136446466;
        v58 = "nw_framer_protocol_get_message_properties";
        v59 = 2082;
        v60 = (void *)v23;
        v16 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v55 = 0;
        if (__nwlog_fault(v16, &type, &v55))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v25 = objc_claimAutoreleasedReturnValue();
            v26 = type;
            if (os_log_type_enabled(v25, type))
            {
              v27 = *(_QWORD *)(a1 + 32);
              v28 = "invalid";
              if (v27)
              {
                v29 = *(const char **)(v27 + 16);
                if (v29)
                  v28 = v29;
              }
              *(_DWORD *)buf = 136446466;
              v58 = "nw_framer_protocol_get_message_properties";
              v59 = 2082;
              v60 = (void *)v28;
              _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s protocol %{public}s has invalid get_message_properties callback", buf, 0x16u);
            }
          }
          else if (v55)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v25 = objc_claimAutoreleasedReturnValue();
            v40 = type;
            v41 = os_log_type_enabled(v25, type);
            if (backtrace_string)
            {
              if (v41)
              {
                v42 = *(_QWORD *)(a1 + 32);
                v43 = "invalid";
                if (v42)
                {
                  v44 = *(const char **)(v42 + 16);
                  if (v44)
                    v43 = v44;
                }
                *(_DWORD *)buf = 136446722;
                v58 = "nw_framer_protocol_get_message_properties";
                v59 = 2082;
                v60 = (void *)v43;
                v61 = 2082;
                v62 = backtrace_string;
                _os_log_impl(&dword_182FBE000, v25, v40, "%{public}s protocol %{public}s has invalid get_message_properties callback, dumping backtrace:%{public}s", buf, 0x20u);
              }

              free(backtrace_string);
              if (!v16)
                goto LABEL_11;
              goto LABEL_97;
            }
            if (v41)
            {
              v52 = *(_QWORD *)(a1 + 32);
              v53 = "invalid";
              if (v52)
              {
                v54 = *(const char **)(v52 + 16);
                if (v54)
                  v53 = v54;
              }
              *(_DWORD *)buf = 136446466;
              v58 = "nw_framer_protocol_get_message_properties";
              v59 = 2082;
              v60 = (void *)v53;
              _os_log_impl(&dword_182FBE000, v25, v40, "%{public}s protocol %{public}s has invalid get_message_properties callback, no backtrace", buf, 0x16u);
            }
          }
          else
          {
            __nwlog_obj();
            v25 = objc_claimAutoreleasedReturnValue();
            v48 = type;
            if (os_log_type_enabled(v25, type))
            {
              v49 = *(_QWORD *)(a1 + 32);
              v50 = "invalid";
              if (v49)
              {
                v51 = *(const char **)(v49 + 16);
                if (v51)
                  v50 = v51;
              }
              *(_DWORD *)buf = 136446466;
              v58 = "nw_framer_protocol_get_message_properties";
              v59 = 2082;
              v60 = (void *)v50;
              _os_log_impl(&dword_182FBE000, v25, v48, "%{public}s protocol %{public}s has invalid get_message_properties callback, backtrace limit exceeded", buf, 0x16u);
            }
          }

        }
        goto LABEL_96;
      }
      __nwlog_obj();
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v58 = "nw_framer_protocol_get_message_properties";
      v16 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v55 = 0;
      if (__nwlog_fault(v16, &type, &v55))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v20 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v58 = "nw_framer_protocol_get_message_properties";
            _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v55)
        {
          v36 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v37 = type;
          v38 = os_log_type_enabled(v17, type);
          if (v36)
          {
            if (v38)
            {
              *(_DWORD *)buf = 136446466;
              v58 = "nw_framer_protocol_get_message_properties";
              v59 = 2082;
              v60 = v36;
              _os_log_impl(&dword_182FBE000, v17, v37, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v36);
            if (!v16)
              goto LABEL_11;
            goto LABEL_97;
          }
          if (v38)
          {
            *(_DWORD *)buf = 136446210;
            v58 = "nw_framer_protocol_get_message_properties";
            _os_log_impl(&dword_182FBE000, v17, v37, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v17 = objc_claimAutoreleasedReturnValue();
          v47 = type;
          if (os_log_type_enabled(v17, type))
          {
            *(_DWORD *)buf = 136446210;
            v58 = "nw_framer_protocol_get_message_properties";
            _os_log_impl(&dword_182FBE000, v17, v47, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_89;
      }
LABEL_96:
      if (!v16)
        goto LABEL_11;
LABEL_97:
      free(v16);
      goto LABEL_11;
    }
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v58 = "nw_framer_protocol_get_message_properties";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v55 = 0;
    if (!__nwlog_fault(v16, &type, &v55))
      goto LABEL_96;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v55)
    {
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      v35 = os_log_type_enabled(v17, type);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v58 = "nw_framer_protocol_get_message_properties";
          v59 = 2082;
          v60 = v33;
          _os_log_impl(&dword_182FBE000, v17, v34, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_96;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_182FBE000, v17, v34, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_182FBE000, v17, v46, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_89:

    goto LABEL_96;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v58 = "nw_framer_protocol_get_message_properties";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v55 = 0;
  if (__nwlog_fault(v12, &type, &v55))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v55)
    {
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v13, type);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v58 = "nw_framer_protocol_get_message_properties";
          v59 = 2082;
          v60 = v30;
          _os_log_impl(&dword_182FBE000, v13, v31, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
        goto LABEL_82;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_182FBE000, v13, v31, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v45 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v58 = "nw_framer_protocol_get_message_properties";
        _os_log_impl(&dword_182FBE000, v13, v45, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_82:
  if (v12)
    free(v12);
}

void sub_1833D9E54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_supports_external_data(nw_protocol *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1->handle;
    v2 = v1;
    if (v1)
    {
      if (*((_QWORD *)v1 + 1))
      {
        v3 = *((_BYTE *)v1 + 606) & 1;
LABEL_5:

        return v3;
      }
      __nwlog_obj();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v29 = "nw_framer_protocol_supports_external_data";
      v10 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (__nwlog_fault(v10, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v11 = objc_claimAutoreleasedReturnValue();
          v14 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
LABEL_57:

          goto LABEL_58;
        }
        if (!v26)
        {
          __nwlog_obj();
          v11 = objc_claimAutoreleasedReturnValue();
          v25 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_57;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        v22 = os_log_type_enabled(v11, type);
        if (!backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_framer_protocol_supports_external_data";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_36;
      }
    }
    else
    {
      __nwlog_obj();
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v29 = "nw_framer_protocol_supports_external_data";
      v10 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (__nwlog_fault(v10, &type, &v26))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v11 = objc_claimAutoreleasedReturnValue();
          v12 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null framer", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (!v26)
        {
          __nwlog_obj();
          v11 = objc_claimAutoreleasedReturnValue();
          v24 = type;
          if (os_log_type_enabled(v11, type))
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_182FBE000, v11, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_57;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v11, type);
        if (!backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446210;
            v29 = "nw_framer_protocol_supports_external_data";
            _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_framer_protocol_supports_external_data";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_36:

        free(backtrace_string);
      }
    }
LABEL_58:
    if (v10)
      free(v10);
    v3 = 0;
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_framer_protocol_supports_external_data";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v6, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_protocol_supports_external_data";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v26)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v7, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_framer_protocol_supports_external_data";
          v30 = 2082;
          v31 = v15;
          _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_49;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_protocol_supports_external_data";
        _os_log_impl(&dword_182FBE000, v7, v16, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_protocol_supports_external_data";
        _os_log_impl(&dword_182FBE000, v7, v23, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_49:
  if (v6)
    free(v6);
  return 0;
}

uint64_t nw_framer_protocol_waiting_for_output(nw_protocol *a1, nw_protocol *a2)
{
  unsigned __int8 *v2;
  void *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1->handle;
    v3 = v2;
    if (v2)
    {
      if (*((_QWORD *)v2 + 1))
      {
        v4 = (v2[608] >> 3) & 1;
LABEL_5:

        return v4;
      }
      __nwlog_obj();
      v14 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v30 = "nw_framer_protocol_waiting_for_output";
      v11 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (__nwlog_fault(v11, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v15 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
LABEL_57:

          goto LABEL_58;
        }
        if (!v27)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v26 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_57;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        v23 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_protocol_waiting_for_output";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_36;
      }
    }
    else
    {
      __nwlog_obj();
      v10 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v30 = "nw_framer_protocol_waiting_for_output";
      v11 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v27 = 0;
      if (__nwlog_fault(v11, &type, &v27))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v13 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null framer", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (!v27)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v25 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v12, v25, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_57;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        v21 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446210;
            v30 = "nw_framer_protocol_waiting_for_output";
            _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }
          goto LABEL_57;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_protocol_waiting_for_output";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_36:

        free(backtrace_string);
      }
    }
LABEL_58:
    if (v11)
      free(v11);
    v4 = 0;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_framer_protocol_waiting_for_output";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (__nwlog_fault(v7, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_protocol_waiting_for_output";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v27)
    {
      v16 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v8, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_framer_protocol_waiting_for_output";
          v31 = 2082;
          v32 = v16;
          _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
        goto LABEL_49;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_protocol_waiting_for_output";
        _os_log_impl(&dword_182FBE000, v8, v17, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_framer_protocol_waiting_for_output";
        _os_log_impl(&dword_182FBE000, v8, v24, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_49:
  if (v7)
    free(v7);
  return 0;
}

uint64_t nw_framer_protocol_get_output_frames(nw_protocol *a1, nw_protocol *a2, uint64_t a3, uint64_t a4, uint64_t a5, nw_frame_array_s *a6)
{
  char *v11;
  char *v12;
  uint64_t frame;
  nw_frame **tqh_last;
  uint64_t v15;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_output_frames)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, nw_frame_array_s *);
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  NSObject *v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  uint64_t v42;
  NSObject *v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  char *v49;
  __int16 v50;
  nw_protocol *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v11 = a1->handle;
    v12 = v11;
    if (v11)
    {
      if (*((_QWORD *)v11 + 1))
      {
        if (((v11[606] & 0x10) != 0 || (v11[608] & 8) != 0) && (v11[607] & 0x80000000) == 0)
        {
          if ((v11[608] & 2) != 0)
          {
            output_handler = a1->output_handler;
            if (output_handler)
            {
              callbacks = output_handler->callbacks;
              if (callbacks)
              {
                get_output_frames = (uint64_t (*)(nw_protocol *, nw_protocol *, uint64_t, uint64_t, uint64_t, nw_frame_array_s *))callbacks->get_output_frames;
                if (get_output_frames)
                {
                  v15 = get_output_frames(a1->output_handler, a1, a3, a4, a5, a6);
LABEL_19:

                  return v15;
                }
              }
            }
            __nwlog_obj();
            v30 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              v47 = "nw_framer_protocol_get_output_frames";
              v48 = 2080;
              v49 = v12 + 609;
              v50 = 2048;
              v51 = output_handler;
              _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, "%{public}s %s Unable to call get_output_frames with output_handler %p", buf, 0x20u);
            }
          }
          else
          {
            if ((v11[608] & 0x40) == 0)
            {
              if (a4 >= 0x80000000)
                LODWORD(a4) = 0x80000000;
              frame = nw_framer_protocol_create_frame(v11, a4, (uint64_t)nw_framer_protocol_outbound_data_finalizer, (uint64_t)(v11 + 480), v11[606] & 1);
              *(_QWORD *)(frame + 32) = 0;
              tqh_last = a6->tqh_last;
              *(_QWORD *)(frame + 40) = tqh_last;
              *tqh_last = (nw_frame *)frame;
              a6->tqh_last = (nw_frame **)(frame + 32);
              if (gLogDatapath)
              {
                v42 = frame;
                __nwlog_obj();
                v43 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446722;
                  v47 = "nw_framer_protocol_get_output_frames";
                  v48 = 2080;
                  v49 = v12 + 609;
                  v50 = 1024;
                  LODWORD(v51) = a4;
                  _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s %s Created 1 outbound frame with total of %u bytes", buf, 0x1Cu);
                }

                frame = v42;
              }

              v15 = 1;
              goto LABEL_19;
            }
            if (!gLogDatapath)
              goto LABEL_18;
            __nwlog_obj();
            v30 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              v47 = "nw_framer_protocol_get_output_frames";
              v48 = 2080;
              v49 = v12 + 609;
              _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s %s Output is blocked, returning 0 frames", buf, 0x16u);
            }
          }

        }
LABEL_18:
        v15 = 0;
        goto LABEL_19;
      }
      __nwlog_obj();
      v28 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v47 = "nw_framer_protocol_get_output_frames";
      v25 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault((const char *)v25, &type, &v44))
      {
LABEL_81:
        if (v25)
          free(v25);
        goto LABEL_18;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_80:

        goto LABEL_81;
      }
      if (!v44)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_182FBE000, v26, v41, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_80;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_framer_protocol_get_output_frames";
        v48 = 2082;
        v49 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v47 = "nw_framer_protocol_get_output_frames";
      v25 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault((const char *)v25, &type, &v44))
        goto LABEL_81;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (!v44)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v40 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_182FBE000, v26, v40, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_80;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v26, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_output_frames";
          _os_log_impl(&dword_182FBE000, v26, v35, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_framer_protocol_get_output_frames";
        v48 = 2082;
        v49 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v26, v35, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_81;
  }
  __nwlog_obj();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v47 = "nw_framer_protocol_get_output_frames";
  v21 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (__nwlog_fault(v21, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_framer_protocol_get_output_frames";
        _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v44)
    {
      v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v22, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v47 = "nw_framer_protocol_get_output_frames";
          v48 = 2082;
          v49 = v31;
          _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        goto LABEL_66;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_framer_protocol_get_output_frames";
        _os_log_impl(&dword_182FBE000, v22, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_framer_protocol_get_output_frames";
        _os_log_impl(&dword_182FBE000, v22, v39, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_66:
  if (v21)
    free(v21);
  return 0;
}

void sub_1833DB4A8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  _DWORD *v4;
  char *v5;
  void *v6;
  uint64_t v7;
  char *v8;
  nw_frame *tqh_first;
  nw_frame *v10;
  char v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  void *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*finalize_output_frames)(nw_protocol *, nw_frame_array_s *);
  NSObject *v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  void *v35;
  os_log_type_t v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  char *backtrace_string;
  os_log_type_t v44;
  _BOOL4 v45;
  NSObject *v46;
  int v47;
  const char *v48;
  int v49;
  os_log_type_t v50;
  os_log_type_t v51;
  os_log_type_t v52;
  _QWORD v53[2];
  uint64_t (*v54)(uint64_t, void *);
  void *v55;
  char *v56;
  _QWORD v57[2];
  uint64_t (*v58)(uint64_t, void *);
  void *v59;
  char *v60;
  _QWORD v61[2];
  uint64_t (*v62)(uint64_t, void *);
  void *v63;
  char *v64;
  nw_frame_array_s *v65;
  char v66;
  os_log_type_t v67;
  uint8_t buf[4];
  const char *v69;
  __int16 v70;
  char *v71;
  __int16 v72;
  _BYTE v73[14];
  __int16 v74;
  int v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = a1->handle;
    v5 = (char *)v4;
    if (v4)
    {
      if (*((_QWORD *)v4 + 1))
      {
        if ((v4[152] & 2) == 0)
        {
          v4[150] = 0;
          v6 = (void *)*((_QWORD *)v4 + 73);
          *((_QWORD *)v4 + 73) = 0;

          v5[607] &= ~0x10u;
          v7 = MEMORY[0x1E0C809B0];
          *((_QWORD *)v5 + 74) = 0;
          v61[0] = v7;
          v61[1] = 3221225472;
          v62 = ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke;
          v63 = &unk_1E149AC50;
          v65 = a2;
          v8 = v5;
          v64 = v8;
          tqh_first = a2->tqh_first;
          do
          {
            if (!tqh_first)
              break;
            v10 = (nw_frame *)*((_QWORD *)tqh_first + 4);
            v11 = ((uint64_t (*)(_QWORD *))v62)(v61);
            tqh_first = v10;
          }
          while ((v11 & 1) != 0);
          if (*((_QWORD *)v8 + 51))
          {
            v5[607] |= 4u;
            v57[0] = v7;
            v57[1] = 3221225472;
            v58 = ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2;
            v59 = &unk_1E14AB5A0;
            v12 = v8;
            v60 = v12;
            v13 = *((_QWORD *)v8 + 71);
            do
            {
              if (!v13)
                break;
              v14 = *(_QWORD *)(v13 + 32);
              v15 = ((uint64_t (*)(_QWORD *))v58)(v57);
              v13 = v14;
            }
            while ((v15 & 1) != 0);
            if (*((_QWORD *)v5 + 73) || *((_DWORD *)v5 + 148))
            {
              if (gLogDatapath)
              {
                __nwlog_obj();
                v46 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
                {
                  v47 = *((_DWORD *)v5 + 149);
                  v48 = "s";
                  v49 = *((_DWORD *)v5 + 148);
                  v69 = "nw_framer_protocol_finalize_output_frames";
                  *(_DWORD *)buf = 136447234;
                  if (v47 == 1)
                    v48 = "";
                  v70 = 2080;
                  v71 = v12 + 609;
                  v72 = 1024;
                  *(_DWORD *)v73 = v47;
                  *(_WORD *)&v73[4] = 2080;
                  *(_QWORD *)&v73[6] = v48;
                  v74 = 1024;
                  v75 = v49;
                  _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, "%{public}s %s Asking to write %u outbound frame%s with %u bytes", buf, 0x2Cu);
                }

              }
              (*(void (**)(void))(*((_QWORD *)v8 + 51) + 16))();
            }
            v5[607] &= ~4u;

          }
          *((_DWORD *)v5 + 150) = 0;
          v16 = (void *)*((_QWORD *)v5 + 73);
          *((_QWORD *)v5 + 73) = 0;

          v5[607] &= ~0x10u;
          *((_QWORD *)v5 + 74) = 0;
          v53[0] = v7;
          v53[1] = 3221225472;
          v54 = ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_136;
          v55 = &unk_1E14AB5A0;
          v17 = v8;
          v56 = v17;
          v18 = *((_QWORD *)v8 + 71);
          do
          {
            if (!v18)
              break;
            v19 = *(_QWORD *)(v18 + 32);
            v20 = ((uint64_t (*)(_QWORD *))v54)(v53);
            v18 = v19;
          }
          while ((v20 & 1) != 0);
          nw_framer_flush_output(v17, 0);

          v21 = 1;
          goto LABEL_25;
        }
        output_handler = a1->output_handler;
        if (output_handler)
        {
          callbacks = output_handler->callbacks;
          if (callbacks)
          {
            finalize_output_frames = (uint64_t (*)(nw_protocol *, nw_frame_array_s *))callbacks->finalize_output_frames;
            if (finalize_output_frames)
            {
              v21 = finalize_output_frames(output_handler, a2);
LABEL_25:

              return v21;
            }
          }
        }
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446722;
          v69 = "nw_framer_protocol_finalize_output_frames";
          v70 = 2080;
          v71 = v5 + 609;
          v72 = 2048;
          *(_QWORD *)v73 = output_handler;
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s %s Unable to call finalize_output_frames with output_handler %p", buf, 0x20u);
        }

LABEL_89:
        v21 = 0;
        goto LABEL_25;
      }
      __nwlog_obj();
      v35 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v69 = "nw_framer_protocol_finalize_output_frames";
      v32 = (char *)_os_log_send_and_compose_impl();

      v67 = OS_LOG_TYPE_ERROR;
      v66 = 0;
      if (!__nwlog_fault(v32, &v67, &v66))
        goto LABEL_87;
      if (v67 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v36 = v67;
        if (os_log_type_enabled(v33, v67))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v33, v36, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
      }
      else if (v66)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v44 = v67;
        v45 = os_log_type_enabled(v33, v67);
        if (backtrace_string)
        {
          if (v45)
          {
            *(_DWORD *)buf = 136446466;
            v69 = "nw_framer_protocol_finalize_output_frames";
            v70 = 2082;
            v71 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v33, v44, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v32)
            goto LABEL_89;
          goto LABEL_88;
        }
        if (v45)
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v33, v44, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v52 = v67;
        if (os_log_type_enabled(v33, v67))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v33, v52, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v69 = "nw_framer_protocol_finalize_output_frames";
      v32 = (char *)_os_log_send_and_compose_impl();

      v67 = OS_LOG_TYPE_ERROR;
      v66 = 0;
      if (!__nwlog_fault(v32, &v67, &v66))
        goto LABEL_87;
      if (v67 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = v67;
        if (os_log_type_enabled(v33, v67))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v66)
      {
        v40 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v41 = v67;
        v42 = os_log_type_enabled(v33, v67);
        if (v40)
        {
          if (v42)
          {
            *(_DWORD *)buf = 136446466;
            v69 = "nw_framer_protocol_finalize_output_frames";
            v70 = 2082;
            v71 = v40;
            _os_log_impl(&dword_182FBE000, v33, v41, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v40);
LABEL_87:
          if (!v32)
            goto LABEL_89;
LABEL_88:
          free(v32);
          goto LABEL_89;
        }
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v33, v41, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v51 = v67;
        if (os_log_type_enabled(v33, v67))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_framer_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v33, v51, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_87;
  }
  __nwlog_obj();
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v69 = "nw_framer_protocol_finalize_output_frames";
  v28 = (char *)_os_log_send_and_compose_impl();

  v67 = OS_LOG_TYPE_ERROR;
  v66 = 0;
  if (__nwlog_fault(v28, &v67, &v66))
  {
    if (v67 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = v67;
      if (os_log_type_enabled(v29, v67))
      {
        *(_DWORD *)buf = 136446210;
        v69 = "nw_framer_protocol_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v66)
    {
      v37 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v38 = v67;
      v39 = os_log_type_enabled(v29, v67);
      if (v37)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v69 = "nw_framer_protocol_finalize_output_frames";
          v70 = 2082;
          v71 = v37;
          _os_log_impl(&dword_182FBE000, v29, v38, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v37);
        goto LABEL_78;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v69 = "nw_framer_protocol_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v29, v38, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v50 = v67;
      if (os_log_type_enabled(v29, v67))
      {
        *(_DWORD *)buf = 136446210;
        v69 = "nw_framer_protocol_finalize_output_frames";
        _os_log_impl(&dword_182FBE000, v29, v50, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_78:
  if (v28)
    free(v28);
  return 0;
}

void sub_1833DBE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28)
{
  void *v28;
  id *v29;

  _Unwind_Resume(a1);
}

void nw_framer_protocol_input_available(nw_protocol *a1, nw_protocol *a2)
{
  NWConcrete_nw_framer *v2;
  NWConcrete_nw_framer *v3;
  char v4;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*input_available)(void);
  void *v8;
  nw_protocol *v9;
  const char *v10;
  const char *name;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  nw_protocol *v15;
  const char *v16;
  const char *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  nw_protocol *v29;
  const char *v30;
  const char *v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  char *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  nw_protocol *v42;
  const char *v43;
  const char *v44;
  NSObject *v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  nw_protocol *v49;
  const char *v50;
  const char *v51;
  char v52;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  void *log_str;
  __int16 v58;
  char *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1->handle;
    v3 = v2;
    if (v2)
    {
      if (v2->parent_definition)
      {
        v4 = *((_BYTE *)v2 + 608);
        if ((v4 & 1) == 0)
        {
          if ((*((_BYTE *)v2 + 606) & 0x10) != 0)
          {
            nw_framer_signal_input_available(v2);
            v4 = *((_BYTE *)v3 + 608);
          }
          if ((v4 & 0x20) != 0)
          {
            if (gLogDatapath)
            {
              __nwlog_obj();
              v45 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446466;
                v55 = "nw_framer_protocol_input_available";
                v56 = 2080;
                log_str = v3->log_str;
                _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, "%{public}s %s Input is unacknowledged, not processing input", buf, 0x16u);
              }

            }
          }
          else
          {
            nw_framer_input_loop(v3);
          }
          goto LABEL_14;
        }
        default_input_handler = v2->protocol.default_input_handler;
        if (default_input_handler)
        {
          callbacks = default_input_handler->callbacks;
          if (callbacks)
          {
            input_available = (void (*)(void))callbacks->input_available;
            if (input_available)
            {
              input_available();
LABEL_14:

              return;
            }
          }
        }
        __nwlog_obj();
        v8 = (void *)objc_claimAutoreleasedReturnValue();
        v9 = v3->protocol.default_input_handler;
        v10 = "invalid";
        if (v9)
        {
          name = v9->identifier->name;
          if (name)
            v10 = name;
        }
        *(_DWORD *)buf = 136446466;
        v55 = "nw_framer_protocol_input_available";
        v56 = 2082;
        log_str = (void *)v10;
        v12 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v52 = 0;
        if (!__nwlog_fault(v12, &type, &v52))
          goto LABEL_102;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v14 = type;
          if (os_log_type_enabled(v13, type))
          {
            v15 = v3->protocol.default_input_handler;
            v16 = "invalid";
            if (v15)
            {
              v17 = v15->identifier->name;
              if (v17)
                v16 = v17;
            }
            *(_DWORD *)buf = 136446466;
            v55 = "nw_framer_protocol_input_available";
            v56 = 2082;
            log_str = (void *)v16;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s protocol %{public}s has invalid input_available callback", buf, 0x16u);
          }
        }
        else if (v52)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v27 = type;
          v28 = os_log_type_enabled(v13, type);
          if (backtrace_string)
          {
            if (v28)
            {
              v29 = v3->protocol.default_input_handler;
              v30 = "invalid";
              if (v29)
              {
                v31 = v29->identifier->name;
                if (v31)
                  v30 = v31;
              }
              *(_DWORD *)buf = 136446722;
              v55 = "nw_framer_protocol_input_available";
              v56 = 2082;
              log_str = (void *)v30;
              v58 = 2082;
              v59 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s protocol %{public}s has invalid input_available callback, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
            if (!v12)
              goto LABEL_14;
            goto LABEL_103;
          }
          if (v28)
          {
            v49 = v3->protocol.default_input_handler;
            v50 = "invalid";
            if (v49)
            {
              v51 = v49->identifier->name;
              if (v51)
                v50 = v51;
            }
            *(_DWORD *)buf = 136446466;
            v55 = "nw_framer_protocol_input_available";
            v56 = 2082;
            log_str = (void *)v50;
            _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s protocol %{public}s has invalid input_available callback, no backtrace", buf, 0x16u);
          }
        }
        else
        {
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          if (os_log_type_enabled(v13, type))
          {
            v42 = v3->protocol.default_input_handler;
            v43 = "invalid";
            if (v42)
            {
              v44 = v42->identifier->name;
              if (v44)
                v43 = v44;
            }
            *(_DWORD *)buf = 136446466;
            v55 = "nw_framer_protocol_input_available";
            v56 = 2082;
            log_str = (void *)v43;
            _os_log_impl(&dword_182FBE000, v13, v41, "%{public}s protocol %{public}s has invalid input_available callback, backtrace limit exceeded", buf, 0x16u);
          }
        }
      }
      else
      {
        __nwlog_obj();
        v24 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v55 = "nw_framer_protocol_input_available";
        v12 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v52 = 0;
        if (!__nwlog_fault(v12, &type, &v52))
          goto LABEL_102;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v25 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)buf = 136446210;
            v55 = "nw_framer_protocol_input_available";
            _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v52)
        {
          v38 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v39 = type;
          v40 = os_log_type_enabled(v13, type);
          if (v38)
          {
            if (v40)
            {
              *(_DWORD *)buf = 136446466;
              v55 = "nw_framer_protocol_input_available";
              v56 = 2082;
              log_str = v38;
              _os_log_impl(&dword_182FBE000, v13, v39, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v38);
            if (!v12)
              goto LABEL_14;
            goto LABEL_103;
          }
          if (v40)
          {
            *(_DWORD *)buf = 136446210;
            v55 = "nw_framer_protocol_input_available";
            _os_log_impl(&dword_182FBE000, v13, v39, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v13 = objc_claimAutoreleasedReturnValue();
          v48 = type;
          if (os_log_type_enabled(v13, type))
          {
            *(_DWORD *)buf = 136446210;
            v55 = "nw_framer_protocol_input_available";
            _os_log_impl(&dword_182FBE000, v13, v48, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
    }
    else
    {
      __nwlog_obj();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v55 = "nw_framer_protocol_input_available";
      v12 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v52 = 0;
      if (!__nwlog_fault(v12, &type, &v52))
        goto LABEL_102;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_framer_protocol_input_available";
          _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v52)
      {
        v35 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        v37 = os_log_type_enabled(v13, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "nw_framer_protocol_input_available";
            v56 = 2082;
            log_str = v35;
            _os_log_impl(&dword_182FBE000, v13, v36, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
LABEL_102:
          if (!v12)
            goto LABEL_14;
LABEL_103:
          free(v12);
          goto LABEL_14;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_framer_protocol_input_available";
          _os_log_impl(&dword_182FBE000, v13, v36, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_framer_protocol_input_available";
          _os_log_impl(&dword_182FBE000, v13, v47, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_102;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v55 = "nw_framer_protocol_input_available";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v52 = 0;
  if (__nwlog_fault(v19, &type, &v52))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_framer_protocol_input_available";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v52)
    {
      v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      v34 = os_log_type_enabled(v20, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v55 = "nw_framer_protocol_input_available";
          v56 = 2082;
          log_str = v32;
          _os_log_impl(&dword_182FBE000, v20, v33, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v32);
        goto LABEL_94;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_framer_protocol_input_available";
        _os_log_impl(&dword_182FBE000, v20, v33, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_framer_protocol_input_available";
        _os_log_impl(&dword_182FBE000, v20, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_94:
  if (v19)
    free(v19);
}

void sub_1833DC8DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_get_input_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  NWConcrete_nw_framer *v8;
  NWConcrete_nw_framer *v9;
  uint64_t v10;
  unsigned int pending_input_frame_count;
  nw_frame *v12;
  nw_frame **v13;
  uint64_t v14;
  nw_frame **v15;
  nw_frame **tqh_last;
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_input_frames)(void);
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  void *v26;
  NSObject *v27;
  os_log_type_t v28;
  void *v29;
  os_log_type_t v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  char *backtrace_string;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  os_log_type_t v40;
  os_log_type_t v41;
  nw_protocol *v42;
  NSObject *v43;
  char v44;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  char *log_str;
  __int16 v50;
  nw_protocol *v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v8 = a1->handle;
    v9 = v8;
    if (v8)
    {
      if (v8->parent_definition)
      {
        if ((*((_BYTE *)v8 + 606) & 0x10) == 0)
          goto LABEL_5;
        *((_BYTE *)v8 + 608) &= ~0x20u;
        pending_input_frame_count = v8->pending_input_frame_count;
        if (!pending_input_frame_count)
        {
          nw_framer_process_body_input(v8);
          pending_input_frame_count = v9->pending_input_frame_count;
          if (!pending_input_frame_count)
          {
            if ((*((_BYTE *)v9 + 608) & 1) != 0)
            {
              output_handler = a1->output_handler;
              if (output_handler)
              {
                callbacks = output_handler->callbacks;
                if (callbacks)
                {
                  get_input_frames = (uint64_t (*)(void))callbacks->get_input_frames;
                  if (get_input_frames)
                  {
                    v10 = get_input_frames();
                    goto LABEL_12;
                  }
                }
              }
              v42 = a1->output_handler;
              __nwlog_obj();
              v43 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                v47 = "nw_framer_protocol_get_input_frames";
                v48 = 2080;
                log_str = v9->log_str;
                v50 = 2048;
                v51 = v42;
                _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s %s Unable to call get_input_frames with output_handler %p", buf, 0x20u);
              }

LABEL_5:
              v10 = 0;
LABEL_12:

              return v10;
            }
            nw_framer_get_input_from_below(v9);
            nw_framer_process_input_callout(v9);
            pending_input_frame_count = v9->pending_input_frame_count;
            if (!pending_input_frame_count)
              goto LABEL_5;
          }
        }
        v9->pending_input_frame_count = pending_input_frame_count - 1;
        v12 = v9->pending_input_frames.tqh_first;
        v13 = (nw_frame **)((char *)v12 + 32);
        v14 = *((_QWORD *)v12 + 4);
        v15 = (nw_frame **)*((_QWORD *)v12 + 5);
        if (v14)
        {
          *(_QWORD *)(v14 + 40) = v15;
          v15 = (nw_frame **)*((_QWORD *)v12 + 5);
        }
        else
        {
          v9->pending_input_frames.tqh_last = v15;
        }
        *v15 = (nw_frame *)v14;
        *v13 = 0;
        *((_QWORD *)v12 + 5) = 0;
        tqh_last = a6->tqh_last;
        *((_QWORD *)v12 + 5) = tqh_last;
        *tqh_last = v12;
        a6->tqh_last = v13;

        v10 = 1;
        goto LABEL_12;
      }
      __nwlog_obj();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v47 = "nw_framer_protocol_get_input_frames";
      v26 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault((const char *)v26, &type, &v44))
      {
LABEL_72:
        if (v26)
          free(v26);
        goto LABEL_5;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_182FBE000, v27, v30, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_71:

        goto LABEL_72;
      }
      if (!v44)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_182FBE000, v27, v41, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_framer_protocol_get_input_frames";
        v48 = 2082;
        log_str = backtrace_string;
        _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v47 = "nw_framer_protocol_get_input_frames";
      v26 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v44 = 0;
      if (!__nwlog_fault((const char *)v26, &type, &v44))
        goto LABEL_72;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (!v44)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v40 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_182FBE000, v27, v40, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_71;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v27, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_framer_protocol_get_input_frames";
          _os_log_impl(&dword_182FBE000, v27, v35, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_71;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v47 = "nw_framer_protocol_get_input_frames";
        v48 = 2082;
        log_str = backtrace_string;
        _os_log_impl(&dword_182FBE000, v27, v35, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_72;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v47 = "nw_framer_protocol_get_input_frames";
  v22 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v44 = 0;
  if (__nwlog_fault(v22, &type, &v44))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_framer_protocol_get_input_frames";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v44)
    {
      v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v23, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v47 = "nw_framer_protocol_get_input_frames";
          v48 = 2082;
          log_str = v31;
          _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        goto LABEL_63;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_framer_protocol_get_input_frames";
        _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v47 = "nw_framer_protocol_get_input_frames";
        _os_log_impl(&dword_182FBE000, v23, v39, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_63:
  if (v22)
    free(v22);
  return 0;
}

void sub_1833DD0F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_protocol_input_flush(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1->handle;
    v3 = v2;
    if (v2)
    {
      if (v2[1])
      {
LABEL_4:

        return;
      }
      __nwlog_obj();
      v12 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v29 = "nw_framer_protocol_input_flush";
      v9 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (!__nwlog_fault(v9, &type, &v26))
        goto LABEL_57;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        v22 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "nw_framer_protocol_input_flush";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
LABEL_57:
          if (!v9)
            goto LABEL_4;
LABEL_58:
          free(v9);
          goto LABEL_4;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v29 = "nw_framer_protocol_input_flush";
      v9 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v26 = 0;
      if (!__nwlog_fault(v9, &type, &v26))
        goto LABEL_57;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v26)
      {
        v17 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        v19 = os_log_type_enabled(v10, type);
        if (v17)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "nw_framer_protocol_input_flush";
            v30 = 2082;
            v31 = v17;
            _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v17);
          if (!v9)
            goto LABEL_4;
          goto LABEL_58;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_framer_protocol_input_flush";
          _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_57;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_framer_protocol_input_flush";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (__nwlog_fault(v5, &type, &v26))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_protocol_input_flush";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v26)
    {
      v14 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v6, type);
      if (v14)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_framer_protocol_input_flush";
          v30 = 2082;
          v31 = v14;
          _os_log_impl(&dword_182FBE000, v6, v15, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v14);
        goto LABEL_49;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_protocol_input_flush";
        _os_log_impl(&dword_182FBE000, v6, v15, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_protocol_input_flush";
        _os_log_impl(&dword_182FBE000, v6, v23, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_49:
  if (v5)
    free(v5);
}

void nw_framer_protocol_output_available(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(void);
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  uint64_t v43;
  const char *v44;
  const char *v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  uint64_t v49;
  const char *v50;
  const char *v51;
  char v52;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v55;
  __int16 v56;
  void *v57;
  __int16 v58;
  char *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1->handle;
    v3 = v2;
    if (v2)
    {
      if (v2[1])
      {
        if ((v2[76] & 2) == 0)
        {
          *((_BYTE *)v2 + 608) &= ~0x40u;
          if (!nw_framer_flush_output(v2, 0))
            goto LABEL_14;
          v4 = v3[42];
          if (!v4)
            goto LABEL_14;
          v5 = *(_QWORD *)(v4 + 24);
          if (!v5)
            goto LABEL_14;
          v6 = *(void (**)(void))(v5 + 72);
          if (!v6)
            goto LABEL_14;
          goto LABEL_13;
        }
        v7 = v2[42];
        if (v7)
        {
          v8 = *(_QWORD *)(v7 + 24);
          if (v8)
          {
            v6 = *(void (**)(void))(v8 + 72);
            if (v6)
            {
LABEL_13:
              v6();
LABEL_14:

              return;
            }
          }
        }
        __nwlog_obj();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = v3[42];
        v11 = "invalid";
        if (v10)
        {
          v12 = *(const char **)(v10 + 16);
          if (v12)
            v11 = v12;
        }
        *(_DWORD *)buf = 136446466;
        v55 = "nw_framer_protocol_output_available";
        v56 = 2082;
        v57 = (void *)v11;
        v13 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v52 = 0;
        if (!__nwlog_fault(v13, &type, &v52))
          goto LABEL_99;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            v16 = v3[42];
            v17 = "invalid";
            if (v16)
            {
              v18 = *(const char **)(v16 + 16);
              if (v18)
                v17 = v18;
            }
            *(_DWORD *)buf = 136446466;
            v55 = "nw_framer_protocol_output_available";
            v56 = 2082;
            v57 = (void *)v17;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %{public}s has invalid output_available callback", buf, 0x16u);
          }
        }
        else if (v52)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v28 = type;
          v29 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v29)
            {
              v30 = v3[42];
              v31 = "invalid";
              if (v30)
              {
                v32 = *(const char **)(v30 + 16);
                if (v32)
                  v31 = v32;
              }
              *(_DWORD *)buf = 136446722;
              v55 = "nw_framer_protocol_output_available";
              v56 = 2082;
              v57 = (void *)v31;
              v58 = 2082;
              v59 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s protocol %{public}s has invalid output_available callback, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
            if (!v13)
              goto LABEL_14;
            goto LABEL_100;
          }
          if (v29)
          {
            v49 = v3[42];
            v50 = "invalid";
            if (v49)
            {
              v51 = *(const char **)(v49 + 16);
              if (v51)
                v50 = v51;
            }
            *(_DWORD *)buf = 136446466;
            v55 = "nw_framer_protocol_output_available";
            v56 = 2082;
            v57 = (void *)v50;
            _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s protocol %{public}s has invalid output_available callback, no backtrace", buf, 0x16u);
          }
        }
        else
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v42 = type;
          if (os_log_type_enabled(v14, type))
          {
            v43 = v3[42];
            v44 = "invalid";
            if (v43)
            {
              v45 = *(const char **)(v43 + 16);
              if (v45)
                v44 = v45;
            }
            *(_DWORD *)buf = 136446466;
            v55 = "nw_framer_protocol_output_available";
            v56 = 2082;
            v57 = (void *)v44;
            _os_log_impl(&dword_182FBE000, v14, v42, "%{public}s protocol %{public}s has invalid output_available callback, backtrace limit exceeded", buf, 0x16u);
          }
        }
      }
      else
      {
        __nwlog_obj();
        v25 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v55 = "nw_framer_protocol_output_available";
        v13 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v52 = 0;
        if (!__nwlog_fault(v13, &type, &v52))
          goto LABEL_99;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v26 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            v55 = "nw_framer_protocol_output_available";
            _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
        }
        else if (v52)
        {
          v39 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v40 = type;
          v41 = os_log_type_enabled(v14, type);
          if (v39)
          {
            if (v41)
            {
              *(_DWORD *)buf = 136446466;
              v55 = "nw_framer_protocol_output_available";
              v56 = 2082;
              v57 = v39;
              _os_log_impl(&dword_182FBE000, v14, v40, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v39);
            if (!v13)
              goto LABEL_14;
            goto LABEL_100;
          }
          if (v41)
          {
            *(_DWORD *)buf = 136446210;
            v55 = "nw_framer_protocol_output_available";
            _os_log_impl(&dword_182FBE000, v14, v40, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v48 = type;
          if (os_log_type_enabled(v14, type))
          {
            *(_DWORD *)buf = 136446210;
            v55 = "nw_framer_protocol_output_available";
            _os_log_impl(&dword_182FBE000, v14, v48, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
        }
      }
    }
    else
    {
      __nwlog_obj();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v55 = "nw_framer_protocol_output_available";
      v13 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v52 = 0;
      if (!__nwlog_fault(v13, &type, &v52))
        goto LABEL_99;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_framer_protocol_output_available";
          _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null framer", buf, 0xCu);
        }
      }
      else if (v52)
      {
        v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v14, type);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            v55 = "nw_framer_protocol_output_available";
            v56 = 2082;
            v57 = v36;
            _os_log_impl(&dword_182FBE000, v14, v37, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
LABEL_99:
          if (!v13)
            goto LABEL_14;
LABEL_100:
          free(v13);
          goto LABEL_14;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_framer_protocol_output_available";
          _os_log_impl(&dword_182FBE000, v14, v37, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v55 = "nw_framer_protocol_output_available";
          _os_log_impl(&dword_182FBE000, v14, v47, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_99;
  }
  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v55 = "nw_framer_protocol_output_available";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v52 = 0;
  if (__nwlog_fault(v20, &type, &v52))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_framer_protocol_output_available";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v52)
    {
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      v35 = os_log_type_enabled(v21, type);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v55 = "nw_framer_protocol_output_available";
          v56 = 2082;
          v57 = v33;
          _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_91;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_framer_protocol_output_available";
        _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v55 = "nw_framer_protocol_output_available";
        _os_log_impl(&dword_182FBE000, v21, v46, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_91:
  if (v20)
    free(v20);
}

void sub_1833DE170(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_framer_protocol_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void);
  void *v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  const char *v31;
  const char *v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  uint64_t v42;
  const char *v43;
  const char *v44;
  uint64_t v45;
  const char *v46;
  const char *v47;
  os_log_type_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  char v51;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  char *v56;
  __int16 v57;
  char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1->handle;
    v3 = (char *)v2;
    if (v2)
    {
      if (v2[1])
      {
        v4 = v2[69];
        if (v4 && *(_QWORD *)(v4 + 16) != *(_QWORD *)(v4 + 24))
        {
          *((_BYTE *)v2 + 607) |= 0x40u;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v5 = (id)gLogObj;
          if (os_log_type_enabled(v5, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)buf = 136446466;
            v54 = "nw_framer_protocol_output_finished";
            v55 = 2080;
            v56 = v3 + 609;
            _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_INFO, "%{public}s %s Data pending in output_data_array, delaying output_finished", buf, 0x16u);
          }

          goto LABEL_13;
        }
        v6 = v2[40];
        if (v6)
        {
          v7 = *(_QWORD *)(v6 + 24);
          if (v7)
          {
            v8 = *(void (**)(void))(v7 + 192);
            if (v8)
            {
              v8();
LABEL_13:

              return;
            }
          }
        }
        __nwlog_obj();
        v9 = (void *)objc_claimAutoreleasedReturnValue();
        v10 = *((_QWORD *)v3 + 40);
        v11 = "invalid";
        if (v10)
        {
          v12 = *(const char **)(v10 + 16);
          if (v12)
            v11 = v12;
        }
        *(_DWORD *)buf = 136446466;
        v54 = "nw_framer_protocol_output_finished";
        v55 = 2082;
        v56 = (char *)v11;
        v13 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v51 = 0;
        if (!__nwlog_fault(v13, &type, &v51))
          goto LABEL_97;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v15 = type;
          if (os_log_type_enabled(v14, type))
          {
            v16 = *((_QWORD *)v3 + 40);
            v17 = "invalid";
            if (v16)
            {
              v18 = *(const char **)(v16 + 16);
              if (v18)
                v17 = v18;
            }
            *(_DWORD *)buf = 136446466;
            v54 = "nw_framer_protocol_output_finished";
            v55 = 2082;
            v56 = (char *)v17;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %{public}s has invalid output_finished callback", buf, 0x16u);
          }
        }
        else if (v51)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v28 = type;
          v29 = os_log_type_enabled(v14, type);
          if (backtrace_string)
          {
            if (v29)
            {
              v30 = *((_QWORD *)v3 + 40);
              v31 = "invalid";
              if (v30)
              {
                v32 = *(const char **)(v30 + 16);
                if (v32)
                  v31 = v32;
              }
              *(_DWORD *)buf = 136446722;
              v54 = "nw_framer_protocol_output_finished";
              v55 = 2082;
              v56 = (char *)v31;
              v57 = 2082;
              v58 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s protocol %{public}s has invalid output_finished callback, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
LABEL_97:
            if (!v13)
              goto LABEL_13;
LABEL_98:
            free(v13);
            goto LABEL_13;
          }
          if (v29)
          {
            v45 = *((_QWORD *)v3 + 40);
            v46 = "invalid";
            if (v45)
            {
              v47 = *(const char **)(v45 + 16);
              if (v47)
                v46 = v47;
            }
            *(_DWORD *)buf = 136446466;
            v54 = "nw_framer_protocol_output_finished";
            v55 = 2082;
            v56 = (char *)v46;
            _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s protocol %{public}s has invalid output_finished callback, no backtrace", buf, 0x16u);
          }
        }
        else
        {
          __nwlog_obj();
          v14 = objc_claimAutoreleasedReturnValue();
          v41 = type;
          if (os_log_type_enabled(v14, type))
          {
            v42 = *((_QWORD *)v3 + 40);
            v43 = "invalid";
            if (v42)
            {
              v44 = *(const char **)(v42 + 16);
              if (v44)
                v43 = v44;
            }
            *(_DWORD *)buf = 136446466;
            v54 = "nw_framer_protocol_output_finished";
            v55 = 2082;
            v56 = (char *)v43;
            _os_log_impl(&dword_182FBE000, v14, v41, "%{public}s protocol %{public}s has invalid output_finished callback, backtrace limit exceeded", buf, 0x16u);
          }
        }
LABEL_96:

        goto LABEL_97;
      }
      __nwlog_obj();
      v25 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v54 = "nw_framer_protocol_output_finished";
      v13 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (!__nwlog_fault(v13, &type, &v51))
        goto LABEL_97;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
        goto LABEL_96;
      }
      if (!v51)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v50 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_182FBE000, v14, v50, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_96;
      }
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      v40 = os_log_type_enabled(v14, type);
      if (!v36)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_182FBE000, v14, v39, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_96;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v54 = "nw_framer_protocol_output_finished";
        v55 = 2082;
        v56 = v36;
        _os_log_impl(&dword_182FBE000, v14, v39, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v54 = "nw_framer_protocol_output_finished";
      v13 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v51 = 0;
      if (!__nwlog_fault(v13, &type, &v51))
        goto LABEL_97;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_96;
      }
      if (!v51)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v49 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_182FBE000, v14, v49, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_96;
      }
      v36 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v14, type);
      if (!v36)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_framer_protocol_output_finished";
          _os_log_impl(&dword_182FBE000, v14, v37, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_96;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446466;
        v54 = "nw_framer_protocol_output_finished";
        v55 = 2082;
        v56 = v36;
        _os_log_impl(&dword_182FBE000, v14, v37, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(v36);
    if (!v13)
      goto LABEL_13;
    goto LABEL_98;
  }
  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v54 = "nw_framer_protocol_output_finished";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v51 = 0;
  if (__nwlog_fault(v20, &type, &v51))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_framer_protocol_output_finished";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v51)
    {
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      v35 = os_log_type_enabled(v21, type);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v54 = "nw_framer_protocol_output_finished";
          v55 = 2082;
          v56 = v33;
          _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_89;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_framer_protocol_output_finished";
        _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_framer_protocol_output_finished";
        _os_log_impl(&dword_182FBE000, v21, v48, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_89:
  if (v20)
    free(v20);
}

void sub_1833DEB98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_framer_protocol_copy_info(uint64_t a1, int a2)
{
  _QWORD *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void);
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(void);
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  char v40;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v43;
  __int16 v44;
  char *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v4 = *(id *)(a1 + 40);
    v5 = v4;
    if (v4)
    {
      if (v4[1])
      {
        if (a2 == 254)
        {
          if (v4[56] && v4[57])
          {
            v11 = *(_QWORD *)(a1 + 32);
            if (!v11
              || (v12 = *(_QWORD *)(v11 + 24)) == 0
              || (v13 = *(uint64_t (**)(void))(v12 + 224)) == 0
              || (v9 = v13()) == 0)
            {
              v9 = nw_array_create();
            }
            v14 = nw_protocol_establishment_report_create(*((void **)v5 + 1), *((_QWORD *)v5 + 56), *((_QWORD *)v5 + 57));
            goto LABEL_28;
          }
        }
        else if (a2 == 255)
        {
          if ((v4[76] & 0x10) == 0)
          {
            v6 = *(_QWORD *)(a1 + 32);
            if (v6)
            {
              v7 = *(_QWORD *)(v6 + 24);
              if (v7)
              {
                v8 = *(uint64_t (**)(void))(v7 + 224);
                if (v8)
                {
                  v9 = v8();
                  v10 = *((_QWORD *)v5 + 55);
                  if (!v10)
                    goto LABEL_30;
                  goto LABEL_25;
                }
              }
            }
          }
          v9 = 0;
          v10 = *((_QWORD *)v5 + 55);
          if (v10)
          {
LABEL_25:
            (*(void (**)(uint64_t, id))(v10 + 16))(v10, v5);
            v14 = (void *)objc_claimAutoreleasedReturnValue();
            if (!v14)
            {
LABEL_29:

              goto LABEL_30;
            }
            if (!v9)
              v9 = nw_array_create();
LABEL_28:
            nw_array_append(v9, v14);
            goto LABEL_29;
          }
LABEL_30:

          return v9;
        }
        v15 = *(_QWORD *)(a1 + 32);
        if (v15)
        {
          v16 = *(_QWORD *)(v15 + 24);
          if (v16)
          {
            v17 = *(uint64_t (**)(void))(v16 + 224);
            if (v17)
            {
              v9 = v17();
              goto LABEL_30;
            }
          }
        }
LABEL_85:
        v9 = 0;
        goto LABEL_30;
      }
      __nwlog_obj();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v43 = "nw_framer_protocol_copy_info";
      v24 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v40 = 0;
      if (!__nwlog_fault((const char *)v24, &type, &v40))
      {
LABEL_83:
        if (v24)
          free(v24);
        goto LABEL_85;
      }
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null framer->parent_definition", buf, 0xCu);
        }
LABEL_82:

        goto LABEL_83;
      }
      if (!v40)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_182FBE000, v25, v39, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_82;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      v36 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446466;
        v43 = "nw_framer_protocol_copy_info";
        v44 = 2082;
        v45 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v43 = "nw_framer_protocol_copy_info";
      v24 = (void *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v40 = 0;
      if (!__nwlog_fault((const char *)v24, &type, &v40))
        goto LABEL_83;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null framer", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (!v40)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_182FBE000, v25, v38, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_82;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      v34 = os_log_type_enabled(v25, type);
      if (!backtrace_string)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v43 = "nw_framer_protocol_copy_info";
          _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null framer, no backtrace", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        v43 = "nw_framer_protocol_copy_info";
        v44 = 2082;
        v45 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
      }
    }

    free(backtrace_string);
    goto LABEL_83;
  }
  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v43 = "nw_framer_protocol_copy_info";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v40 = 0;
  if (__nwlog_fault(v20, &type, &v40))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_framer_protocol_copy_info";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v40)
    {
      v29 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v21, type);
      if (v29)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v43 = "nw_framer_protocol_copy_info";
          v44 = 2082;
          v45 = v29;
          _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v29);
        goto LABEL_74;
      }
      if (v31)
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_framer_protocol_copy_info";
        _os_log_impl(&dword_182FBE000, v21, v30, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v43 = "nw_framer_protocol_copy_info";
        _os_log_impl(&dword_182FBE000, v21, v37, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_74:
  if (v20)
    free(v20);
  return 0;
}

void sub_1833DF374(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_framer_protocol_get_remote_endpoint(nw_protocol *a1)
{
  _QWORD *v2;
  char *v3;
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*get_remote_endpoint)(void);
  void *v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  NSObject *v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  __int16 v37;
  void *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v2 = a1->handle;
    v3 = (char *)v2;
    if (v2)
    {
      if (v2[1])
      {
        default_input_handler = a1->default_input_handler;
        if (default_input_handler
          && (callbacks = default_input_handler->callbacks) != 0
          && (get_remote_endpoint = (void (*)(void))callbacks->get_remote_endpoint) != 0)
        {
          get_remote_endpoint();
          v7 = (void *)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v7 = 0;
        }
        if (gLogDatapath)
        {
          __nwlog_obj();
          v19 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446722;
            v34 = "nw_framer_protocol_get_remote_endpoint";
            v35 = 2080;
            v36 = v3 + 609;
            v37 = 2112;
            v38 = v7;
            _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %s returning remote endpoint: %@", buf, 0x20u);
          }

        }
LABEL_9:

        return v7;
      }
      __nwlog_obj();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v34 = "nw_framer_protocol_get_remote_endpoint";
      v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v31 = 0;
      if (__nwlog_fault(v14, &type, &v31))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v18 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
LABEL_64:

          goto LABEL_65;
        }
        if (!v31)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v30 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_182FBE000, v15, v30, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_64;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        v27 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v27)
          {
            *(_DWORD *)buf = 136446210;
            v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_64;
        }
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_framer_protocol_get_remote_endpoint";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v26, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_43;
      }
    }
    else
    {
      __nwlog_obj();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v34 = "nw_framer_protocol_get_remote_endpoint";
      v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v31 = 0;
      if (__nwlog_fault(v14, &type, &v31))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
          }
          goto LABEL_64;
        }
        if (!v31)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v29 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_182FBE000, v15, v29, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_64;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446210;
            v34 = "nw_framer_protocol_get_remote_endpoint";
            _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }
          goto LABEL_64;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_framer_protocol_get_remote_endpoint";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_43:

        free(backtrace_string);
      }
    }
LABEL_65:
    if (v14)
      free(v14);
    v7 = 0;
    goto LABEL_9;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v34 = "nw_framer_protocol_get_remote_endpoint";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v10, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_framer_protocol_get_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v31)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v11, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_framer_protocol_get_remote_endpoint";
          v35 = 2082;
          v36 = v20;
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_56;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_framer_protocol_get_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_framer_protocol_get_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v11, v28, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_56:
  if (v10)
    free(v10);
  return 0;
}

void sub_1833DFB04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_framer_protocol_get_parameters(nw_protocol *a1)
{
  void **v1;
  void **v2;
  _QWORD *v3;
  uint64_t v4;
  void (*v5)(void);
  id v6;
  void *v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = a1->handle;
    v2 = v1;
    if (v1)
    {
      if (v1[1])
      {
        nw_context_assert_queue(v1[46]);
        v3 = v2[42];
        if (v3 && (v4 = v3[3]) != 0 && (v5 = *(void (**)(void))(v4 + 112)) != 0)
        {
          v5();
          v6 = (id)objc_claimAutoreleasedReturnValue();
        }
        else
        {
          v6 = v2[45];
        }
        v7 = v6;
LABEL_9:

        return v7;
      }
      __nwlog_obj();
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v33 = "nw_framer_protocol_get_parameters";
      v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v30 = 0;
      if (__nwlog_fault(v14, &type, &v30))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v18 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null framer->parent_definition", buf, 0xCu);
          }
LABEL_61:

          goto LABEL_62;
        }
        if (!v30)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v29 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_182FBE000, v15, v29, "%{public}s called with null framer->parent_definition, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_61;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        v26 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446210;
            v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null framer->parent_definition, no backtrace", buf, 0xCu);
          }
          goto LABEL_61;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_framer_protocol_get_parameters";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v25, "%{public}s called with null framer->parent_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_40;
      }
    }
    else
    {
      __nwlog_obj();
      v13 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v33 = "nw_framer_protocol_get_parameters";
      v14 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v30 = 0;
      if (__nwlog_fault(v14, &type, &v30))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v16 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null framer", buf, 0xCu);
          }
          goto LABEL_61;
        }
        if (!v30)
        {
          __nwlog_obj();
          v15 = objc_claimAutoreleasedReturnValue();
          v28 = type;
          if (os_log_type_enabled(v15, type))
          {
            *(_DWORD *)buf = 136446210;
            v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_182FBE000, v15, v28, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_61;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        v24 = os_log_type_enabled(v15, type);
        if (!backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446210;
            v33 = "nw_framer_protocol_get_parameters";
            _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null framer, no backtrace", buf, 0xCu);
          }
          goto LABEL_61;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_framer_protocol_get_parameters";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v23, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_40:

        free(backtrace_string);
      }
    }
LABEL_62:
    if (v14)
      free(v14);
    v7 = 0;
    goto LABEL_9;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v33 = "nw_framer_protocol_get_parameters";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (__nwlog_fault(v10, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_framer_protocol_get_parameters";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v30)
    {
      v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v11, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_framer_protocol_get_parameters";
          v34 = 2082;
          v35 = v19;
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
        goto LABEL_53;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_framer_protocol_get_parameters";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_framer_protocol_get_parameters";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v10)
    free(v10);
  return 0;
}

void sub_1833E01FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke(uint64_t a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = a2;
  v4 = v3 + 4;
  v5 = v3[4];
  v6 = (_QWORD *)v3[5];
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v6;
    v6 = (_QWORD *)v3[5];
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) = v6;
  }
  *v6 = v5;
  *v4 = 0;
  v3[5] = 0;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(_QWORD **)(v7 + 576);
  v3[5] = v8;
  *v8 = v3;
  *(_QWORD *)(v7 + 576) = v4;

  return 1;
}

uint64_t ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_2(uint64_t a1, void *a2)
{
  _BYTE *v3;
  void *v4;
  int is_metadata_complete;
  int v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  NSObject *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  int v21;
  int v22;
  NSObject *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  int v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  int v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  int v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = nw_frame_copy_metadata_for_protocol((uint64_t)v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
  is_metadata_complete = nw_frame_is_metadata_complete((uint64_t)v3);
  v6 = nw_frame_unclaimed_length(v3);
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 607) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 607) & 0xDF | (v3[186] >> 2) & 0x20;
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(void **)(v7 + 584);
  if (v8)
    v9 = v4 == v8;
  else
    v9 = 1;
  if (!v9)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
      {
        v18 = *(_QWORD *)(a1 + 32);
        v19 = (const char *)(v18 + 609);
        v20 = "";
        v21 = *(_DWORD *)(v18 + 596);
        if (!v18)
          v19 = "";
        v22 = *(_DWORD *)(v18 + 592);
        v34 = "nw_framer_protocol_finalize_output_frames_block_invoke_2";
        v33 = 136447234;
        if (v21 != 1)
          v20 = "s";
        v35 = 2080;
        v36 = v19;
        v37 = 1024;
        v38 = v21;
        v39 = 2080;
        v40 = v20;
        v41 = 1024;
        v42 = v22;
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %s Asking to write %u outbound frame%s with %u bytes", (uint8_t *)&v33, 0x2Cu);
      }

      v7 = *(_QWORD *)(a1 + 32);
    }
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v7 + 408) + 16))(*(_QWORD *)(v7 + 408), v7);
    v10 = a1 + 32;
    *(_DWORD *)(*(_QWORD *)(a1 + 32) + 600) = 0;
    v11 = *(_QWORD *)(a1 + 32);
    v12 = *(void **)(v11 + 584);
    *(_QWORD *)(v11 + 584) = 0;

    *(_DWORD *)(*(_QWORD *)v10 + 592) = 0;
    *(_BYTE *)(*(_QWORD *)v10 + 607) &= ~0x10u;
    *(_DWORD *)(*(_QWORD *)v10 + 596) = 0;
    v7 = *(_QWORD *)(a1 + 32);
  }
  objc_storeStrong((id *)(v7 + 584), v4);
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 592) += v6;
  if (is_metadata_complete)
    v13 = 16;
  else
    v13 = 0;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 607) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 607) & 0xEF | v13;
  ++*(_DWORD *)(*(_QWORD *)(a1 + 32) + 596);
  v14 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v14 + 607) & 0x10) != 0)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        v24 = *(_QWORD *)(a1 + 32);
        v25 = (const char *)(v24 + 609);
        v26 = "";
        v27 = *(_DWORD *)(v24 + 596);
        if (!v24)
          v25 = "";
        v28 = *(_DWORD *)(v24 + 592);
        v34 = "nw_framer_protocol_finalize_output_frames_block_invoke";
        v33 = 136447234;
        if (v27 != 1)
          v26 = "s";
        v35 = 2080;
        v36 = v25;
        v37 = 1024;
        v38 = v27;
        v39 = 2080;
        v40 = v26;
        v41 = 1024;
        v42 = v28;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %s Asking to write complete %u outbound frame%s with %u bytes", (uint8_t *)&v33, 0x2Cu);
      }

      v14 = *(_QWORD *)(a1 + 32);
      v15 = *(_QWORD *)(v14 + 552);
      if (v15)
        goto LABEL_13;
    }
    else
    {
      v15 = *(_QWORD *)(v14 + 552);
      if (v15)
      {
LABEL_13:
        v16 = *(_QWORD *)(v15 + 16) != *(_QWORD *)(v15 + 24);
        goto LABEL_29;
      }
    }
    v16 = 0;
LABEL_29:
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v14 + 408) + 16))(*(_QWORD *)(v14 + 408), v14);
    if (!v16
      && (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 606) & 2) != 0
      && (*((_DWORD *)v3 + 44)
       || nw_frame_get_ecn_flag((uint64_t)v3)
       || nw_frame_get_expire_time((uint64_t)v3)
       || nw_frame_get_packet_id((uint64_t)v3)))
    {
      nw_framer_flush_output(*(void **)(a1 + 32), v3);
    }
    v30 = *(_QWORD *)(a1 + 32);
    v29 = a1 + 32;
    *(_DWORD *)(v30 + 600) = 0;
    v31 = *(void **)(*(_QWORD *)v29 + 584);
    *(_QWORD *)(*(_QWORD *)v29 + 584) = 0;

    *(_DWORD *)(*(_QWORD *)v29 + 592) = 0;
    *(_BYTE *)(*(_QWORD *)v29 + 607) &= ~0x10u;
    *(_DWORD *)(*(_QWORD *)v29 + 596) = 0;
  }

  return 1;
}

void sub_1833E063C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_framer_protocol_finalize_output_framesP11nw_protocolP16nw_frame_array_s_block_invoke_136(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = v3;
  v5 = *((_QWORD *)v3 + 4);
  v6 = (_QWORD *)*((_QWORD *)v3 + 5);
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v6;
    v6 = (_QWORD *)*((_QWORD *)v3 + 5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 576) = v6;
  }
  *v6 = v5;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  nw_frame_finalize((uint64_t)v3);
  if (gLogDatapath)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 32);
      if (v9)
        v10 = (const char *)(v9 + 609);
      else
        v10 = "";
      v11 = 136446466;
      v12 = "nw_framer_protocol_finalize_output_frames_block_invoke";
      v13 = 2080;
      v14 = v10;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "%{public}s %s Dropping unused output frame", (uint8_t *)&v11, 0x16u);
    }

  }
  return 1;
}

void nw_framer_protocol_outbound_data_finalizer(void *a1, int a2, char *a3)
{
  id v5;
  NSObject *v6;
  const char *v7;
  const char *v8;
  const char *v9;
  int v10;
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (a2)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = "";
        if (a3)
          v7 = a3 + 609;
        v10 = 136446466;
        v11 = "nw_framer_protocol_outbound_data_finalizer";
        v12 = 2080;
        v13 = v7;
        v8 = "%{public}s %s Finalizing outbound frame (success)";
LABEL_13:
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v10, 0x16u);
        goto LABEL_14;
      }
      goto LABEL_14;
    }
  }
  else if (gLogDatapath)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v9 = "";
      if (a3)
        v9 = a3 + 609;
      v10 = 136446466;
      v11 = "nw_framer_protocol_outbound_data_finalizer";
      v12 = 2080;
      v13 = v9;
      v8 = "%{public}s %s Finalizing outbound frame (drop)";
      goto LABEL_13;
    }
LABEL_14:

  }
  nw_framer_protocol_finalizer(v5, (uint64_t)(a3 + 480));

}

uint64_t ___ZL37nw_protocol_finalize_temp_frame_arrayP16nw_frame_array_sb_block_invoke_5189(uint64_t a1, void *a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = a2;
  v4 = v3;
  v5 = *((_QWORD *)v3 + 4);
  v6 = (_QWORD *)*((_QWORD *)v3 + 5);
  if (v5)
  {
    *(_QWORD *)(v5 + 40) = v6;
    v6 = (_QWORD *)*((_QWORD *)v3 + 5);
  }
  else
  {
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) = v6;
  }
  *v6 = v5;
  *((_QWORD *)v3 + 4) = 0;
  *((_QWORD *)v3 + 5) = 0;
  nw_frame_finalize((uint64_t)v3);

  return 1;
}

uint64_t __nw_framer_trigger_input_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4, size_t a5)
{
  uint64_t frame;
  void *buffer;
  uint64_t v10;
  uint64_t *v11;

  frame = nw_framer_protocol_create_frame(*(void **)(a1 + 32), a5, (uint64_t)nw_framer_protocol_inbound_data_finalizer, *(_QWORD *)(a1 + 32) + 464, 0);
  buffer = (void *)nw_frame_get_buffer(frame, 0);
  memcpy(buffer, a4, a5);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(frame + 32) = 0;
  v11 = *(uint64_t **)(v10 + 520);
  *(_QWORD *)(frame + 40) = v11;
  *v11 = frame;
  *(_QWORD *)(v10 + 520) = frame + 32;

  return 1;
}

void __nw_framer_trigger_input_block_invoke_2(uint64_t a1)
{
  nw_framer_process_input_callout(*(NWConcrete_nw_framer **)(a1 + 32));
}

nw_protocol_options_t nw_framer_create_options(nw_protocol_definition_t framer_definition)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  char isa;
  NWConcrete_nw_protocol_options *options;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = framer_definition;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    isa = (char)v3[23].isa;

    if ((isa & 1) != 0)
    {
      options = nw_protocol_create_options(v3);
      goto LABEL_4;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_framer_create_options";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_framer_create_options";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null nw_protocol_definition_is_framer(definition)", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v20)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_framer_create_options";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null nw_protocol_definition_is_framer(definition), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_framer_create_options";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null nw_protocol_definition_is_framer(definition), no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_framer_create_options";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null nw_protocol_definition_is_framer(definition), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_framer_create_options";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_framer_create_options";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null definition", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v20)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_framer_create_options";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_framer_create_options";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "nw_framer_create_options";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v8)
    free(v8);
  options = 0;
LABEL_4:

  return &options->super;
}

void sub_1833E0EA0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_options_is_framer(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  uint64_t is_framer;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (id *)v1;
    v4 = v3[1];

    is_framer = nw_protocol_definition_is_framer(v4);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_options_is_framer";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_framer";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_options_is_framer";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_framer";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_framer";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  is_framer = 0;
LABEL_3:

  return is_framer;
}

void nw_framer_options_set_object_value(nw_protocol_options_t options, const char *key, id value)
{
  NSObject *v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD v26[4];
  id v27;
  const char *v28;
  char v29;
  os_log_type_t v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v5 = options;
  v6 = value;
  if (!v5)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_framer_options_set_object_value";
    v8 = (char *)_os_log_send_and_compose_impl();

    v30 = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v8, &v30, &v29))
      goto LABEL_55;
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = v30;
      v17 = os_log_type_enabled(v9, v30);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_framer_options_set_object_value";
          v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v8)
          goto LABEL_5;
LABEL_56:
        free(v8);
        goto LABEL_5;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v23 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!nw_protocol_options_has_standard_framer_options(v5))
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_framer_options_set_object_value";
    v8 = (char *)_os_log_send_and_compose_impl();

    v30 = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v8, &v30, &v29))
      goto LABEL_55;
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options)", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v24 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v19 = v30;
    v20 = os_log_type_enabled(v9, v30);
    if (!v18)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_framer_options_set_object_value";
      v33 = 2082;
      v34 = v18;
      _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!key)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_framer_options_set_object_value";
    v8 = (char *)_os_log_send_and_compose_impl();

    v30 = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v8, &v30, &v29))
      goto LABEL_55;
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v29)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v25 = v30;
      if (os_log_type_enabled(v9, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v18 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = v30;
    v22 = os_log_type_enabled(v9, v30);
    if (!v18)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_framer_options_set_object_value";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_framer_options_set_object_value";
      v33 = 2082;
      v34 = v18;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v18);
    if (!v8)
      goto LABEL_5;
    goto LABEL_56;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __nw_framer_options_set_object_value_block_invoke;
  v26[3] = &unk_1E14AA188;
  v28 = key;
  v27 = v6;
  nw_protocol_options_access_handle(v5, v26);

LABEL_5:
}

void sub_1833E1874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_has_standard_framer_options(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  id v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[1];
    goto LABEL_3;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v8 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v27 = "nw_protocol_options_copy_definition";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v9, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_protocol_options_copy_definition";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v22 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v9)
    free(v9);
  v3 = 0;
LABEL_3:

  if (!nw_protocol_definition_is_framer(v3))
  {
    v6 = 0;
    goto LABEL_8;
  }
  v4 = v3;
  v5 = v4;
  if (!v4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_protocol_definition_get_options_allocator";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v13, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_protocol_definition_get_options_allocator";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null definition", buf, 0xCu);
        }
      }
      else if (v24)
      {
        v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v20 = type;
        v21 = os_log_type_enabled(v14, type);
        if (v19)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_protocol_definition_get_options_allocator";
            v28 = 2082;
            v29 = v19;
            _os_log_impl(&dword_182FBE000, v14, v20, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v19);
          goto LABEL_44;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_protocol_definition_get_options_allocator";
          _os_log_impl(&dword_182FBE000, v14, v20, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_protocol_definition_get_options_allocator";
          _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_44:
    if (v13)
      free(v13);
    v6 = 0;
    goto LABEL_6;
  }
  v6 = *((_QWORD *)v4 + 11) == (_QWORD)nw_framer_allocate_options;
LABEL_6:

LABEL_8:
  return v6;
}

uint64_t __nw_framer_options_set_object_value_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v5;
  void *v6;

  v3 = *a2;
  if (!*a2)
  {
    v5 = nw_dictionary_create();
    v6 = (void *)*a2;
    *a2 = (uint64_t)v5;

    v3 = *a2;
  }
  nw_dictionary_set_value(v3, *(const char **)(a1 + 40), *(void **)(a1 + 32));
  return 1;
}

id nw_framer_options_copy_object_value(nw_protocol_options_t options, const char *key)
{
  NSObject *v3;
  NSObject *v4;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD v26[6];
  char v27;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v3 = options;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v8, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_182FBE000, v9, v23, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!nw_protocol_options_has_standard_framer_options(v3))
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v8, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options)", buf, 0xCu);
      }
    }
    else if (v27)
    {
      v18 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v9, type);
      if (v18)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v18;
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v18);
LABEL_55:
        if (!v8)
        {
LABEL_57:
          v5 = 0;
          goto LABEL_5;
        }
LABEL_56:
        free(v8);
        goto LABEL_57;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!key)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v8, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_options_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(backtrace_string);
    if (!v8)
      goto LABEL_57;
    goto LABEL_56;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v30 = __Block_byref_object_copy__4439;
  v31 = __Block_byref_object_dispose__4440;
  v32 = 0;
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __nw_framer_options_copy_object_value_block_invoke;
  v26[3] = &unk_1E14AA1B0;
  v26[4] = buf;
  v26[5] = key;
  nw_protocol_options_access_handle(v4, v26);
  v5 = *(id *)(*(_QWORD *)&buf[8] + 40);
  _Block_object_dispose(buf, 8);

LABEL_5:
  return v5;
}

void sub_1833E25E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;

  _Block_object_dispose(&a21, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_framer_options_copy_object_value_block_invoke(uint64_t a1, uint64_t *a2)
{
  void *v3;
  uint64_t v4;
  void *v5;

  if (*a2)
  {
    v3 = nw_dictionary_copy_value(*a2, *(_QWORD *)(a1 + 40));
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v5 = *(void **)(v4 + 40);
    *(_QWORD *)(v4 + 40) = v3;

  }
  return 1;
}

void nw_framer_options_set_peer_protocol_definition(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[4];
  id v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_framer_options_set_peer_protocol_definition";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v6, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_framer_options_set_peer_protocol_definition";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v6)
          goto LABEL_5;
LABEL_56:
        free(v6);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v7, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v7, v21, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!nw_protocol_options_has_standard_framer_options(v3))
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_framer_options_set_peer_protocol_definition";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v6, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options)", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v7, v22, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v16 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v7, type);
    if (!v16)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_framer_options_set_peer_protocol_definition";
      v30 = 2082;
      v31 = v16;
      _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s called with null nw_protocol_options_has_standard_framer_options(options), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v4)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_framer_options_set_peer_protocol_definition";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v6, &type, &v26))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null peer_protocol_definition", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v26)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v7, v23, "%{public}s called with null peer_protocol_definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v16 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v7 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v7, type);
    if (!v16)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_framer_options_set_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v7, v19, "%{public}s called with null peer_protocol_definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v29 = "nw_framer_options_set_peer_protocol_definition";
      v30 = 2082;
      v31 = v16;
      _os_log_impl(&dword_182FBE000, v7, v19, "%{public}s called with null peer_protocol_definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v16);
    if (!v6)
      goto LABEL_5;
    goto LABEL_56;
  }
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __nw_framer_options_set_peer_protocol_definition_block_invoke;
  v24[3] = &unk_1E14A9F20;
  v25 = v4;
  nw_protocol_options_access_handle(v3, v24);

LABEL_5:
}

void sub_1833E2D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_framer_options_set_peer_protocol_definition_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(a2 + 8), *(id *)(a1 + 32));
  return 1;
}

id nw_framer_options_copy_peer_protocol_definition(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  char is_framer;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v22[5];
  char v23;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v26)(uint64_t, uint64_t);
  void (*v27)(uint64_t);
  id v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v8)
          goto LABEL_40;
        goto LABEL_39;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_37;
  }
  v3 = (id *)v1;
  v4 = v3[1];

  is_framer = nw_protocol_definition_is_framer(v4);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null nw_protocol_options_is_framer(options)", buf, 0xCu);
      }
    }
    else if (v23)
    {
      v16 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v9, type);
      if (v16)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v16;
          _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null nw_protocol_options_is_framer(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v16);
LABEL_38:
        if (!v8)
          goto LABEL_40;
LABEL_39:
        free(v8);
        goto LABEL_40;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null nw_protocol_options_is_framer(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_options_copy_peer_protocol_definition";
        _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null nw_protocol_options_is_framer(options), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (!nw_protocol_options_has_standard_framer_options(v3))
  {
LABEL_40:
    v6 = 0;
    goto LABEL_41;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v26 = __Block_byref_object_copy__4439;
  v27 = __Block_byref_object_dispose__4440;
  v28 = 0;
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = __nw_framer_options_copy_peer_protocol_definition_block_invoke;
  v22[3] = &unk_1E14A9D68;
  v22[4] = buf;
  nw_protocol_options_access_handle(v3, v22);
  v6 = *(id *)(*(_QWORD *)&buf[8] + 40);
  _Block_object_dispose(buf, 8);

LABEL_41:
  return v6;
}

void sub_1833E3308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;

  _Block_object_dispose(&a19, 8);

  _Unwind_Resume(a1);
}

uint64_t __nw_framer_options_copy_peer_protocol_definition_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 8));
  return 1;
}

nw_framer_message_t nw_framer_message_create(nw_framer_t framer)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  char *backtrace_string;
  os_log_type_t v7;
  _BOOL4 v8;
  os_log_type_t v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (framer)
    return nw_framer_protocol_create_message((nw_protocol_definition_t)framer[1].isa);
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_framer_message_create";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_framer_message_create";
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null framer", buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_framer_message_create";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null framer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_19;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_framer_message_create";
        _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null framer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_framer_message_create";
        _os_log_impl(&dword_182FBE000, v4, v9, "%{public}s called with null framer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_19:
  if (v3)
    free(v3);
  return 0;
}

id nw_framer_message_copy_original_message(void *a1)
{
  id v1;
  void *v2;
  id v3;
  id v4;
  char is_framer;
  uint64_t v6;
  void *v7;
  NSObject *v8;
  id v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD v24[5];
  char v25;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v28)(uint64_t, uint64_t);
  void (*v29)(uint64_t);
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null reply", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (!v25)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null reply, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null reply, no backtrace", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null reply, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_32;
  }
  v3 = v1;
  v4 = *((id *)v3 + 1);

  is_framer = nw_protocol_definition_is_framer(v4);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null nw_protocol_metadata_is_framer_message(reply)", buf, 0xCu);
      }
LABEL_44:

LABEL_45:
      if (v12)
        free(v12);
      goto LABEL_9;
    }
    if (!v25)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null nw_protocol_metadata_is_framer_message(reply), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null nw_protocol_metadata_is_framer_message(reply), no backtrace", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null nw_protocol_metadata_is_framer_message(reply), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_32:

    free(backtrace_string);
    goto LABEL_45;
  }
  if ((nw_protocol_metadata_supports_replies(v3) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_framer_message_copy_original_message";
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s Protocol does not support replies, cannot copy reply", buf, 0xCu);
    }

LABEL_9:
    v9 = 0;
    goto LABEL_12;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v28 = __Block_byref_object_copy__4439;
  v29 = __Block_byref_object_dispose__4440;
  v30 = 0;
  v24[0] = MEMORY[0x1E0C809B0];
  v24[1] = 3221225472;
  v24[2] = __nw_framer_message_copy_original_message_block_invoke;
  v24[3] = &unk_1E14A9D68;
  v24[4] = buf;
  v6 = *((_QWORD *)v3 + 4);
  if (v6)
  {
    __nw_framer_message_copy_original_message_block_invoke((uint64_t)v24, v6);
    v7 = *(void **)(*(_QWORD *)&buf[8] + 40);
  }
  else
  {
    v7 = 0;
  }
  v9 = v7;
  _Block_object_dispose(buf, 8);

LABEL_12:
  return v9;
}

uint64_t __nw_framer_message_copy_original_message_block_invoke(uint64_t a1, uint64_t a2)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), *(id *)(a2 + 24));
  return 1;
}

void nw_framer_message_set_value(nw_framer_message_t message, const char *key, void *value, nw_framer_message_dispose_value_t dispose_value)
{
  NSObject *v7;
  nw_framer_message_dispose_value_t v8;
  NSObject *v9;
  objc_class *v10;
  char is_framer;
  id v12;
  uint64_t isa;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  os_log_type_t v32;
  _QWORD v33[7];
  char v34;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v7 = message;
  v8 = dispose_value;
  if (!v7)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_framer_message_set_value";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v15, &type, &v34))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_message_set_value";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null message", buf, 0xCu);
      }
    }
    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v16, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_framer_message_set_value";
          v38 = 2082;
          v39 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v15)
          goto LABEL_7;
LABEL_58:
        free(v15);
        goto LABEL_7;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_message_set_value";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_message_set_value";
        _os_log_impl(&dword_182FBE000, v16, v30, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  v9 = v7;
  v10 = v9[1].isa;

  is_framer = nw_protocol_definition_is_framer(v10);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_framer_message_set_value";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v15, &type, &v34))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_message_set_value";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v34)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_message_set_value";
        _os_log_impl(&dword_182FBE000, v16, v31, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v25 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v16, type);
    if (!v25)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_message_set_value";
        _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "nw_framer_message_set_value";
      v38 = 2082;
      v39 = v25;
      _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!key)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_framer_message_set_value";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v15, &type, &v34))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_message_set_value";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v34)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v16, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_message_set_value";
        _os_log_impl(&dword_182FBE000, v16, v32, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v25 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v28 = type;
    v29 = os_log_type_enabled(v16, type);
    if (!v25)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_framer_message_set_value";
        _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "nw_framer_message_set_value";
      v38 = 2082;
      v39 = v25;
      _os_log_impl(&dword_182FBE000, v16, v28, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v25);
    if (!v15)
      goto LABEL_7;
    goto LABEL_58;
  }
  v33[0] = MEMORY[0x1E0C809B0];
  v33[1] = 3221225472;
  v33[2] = __nw_framer_message_set_value_block_invoke;
  v33[3] = &unk_1E149ABD8;
  v33[5] = key;
  v12 = v8;
  v33[4] = v12;
  v33[6] = value;
  isa = (uint64_t)v9[4].isa;
  if (isa)
    __nw_framer_message_set_value_block_invoke((uint64_t)v33, isa);

LABEL_7:
}

void sub_1833E4320(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_framer_message_set_value_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t pointer;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  const char *v9;
  void *v10;
  xpc_object_t v12;
  void *v13;
  _QWORD *v14;
  void *v15;

  if (*(_QWORD *)a2)
  {
    if (*(_QWORD *)(a2 + 8))
      goto LABEL_3;
  }
  else
  {
    v12 = xpc_dictionary_create(0, 0, 0);
    v13 = *(void **)a2;
    *(_QWORD *)a2 = v12;

    if (*(_QWORD *)(a2 + 8))
      goto LABEL_3;
  }
  v14 = nw_dictionary_create();
  v15 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = v14;

LABEL_3:
  pointer = xpc_dictionary_get_pointer();
  if (pointer)
  {
    v5 = pointer;
    v6 = nw_dictionary_copy_value(*(_QWORD *)(a2 + 8), *(_QWORD *)(a1 + 40));
    v7 = v6;
    if (v6)
      (*((void (**)(void *, uint64_t))v6 + 2))(v6, v5);

  }
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(const char **)(a1 + 40);
  v10 = _Block_copy(*(const void **)(a1 + 32));
  nw_dictionary_set_value(v8, v9, v10);

  xpc_dictionary_set_pointer();
  return 1;
}

void sub_1833E4428(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_framer_message_access_value(nw_framer_message_t message, const char *key, void *access_value)
{
  NSObject *v5;
  void *v6;
  NSObject *v7;
  objc_class *v8;
  char is_framer;
  id v10;
  _QWORD *isa;
  char v12;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  os_log_type_t v35;
  os_log_type_t v36;
  _QWORD v37[6];
  char v38;
  os_log_type_t v39;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v5 = message;
  v6 = access_value;
  if (!v5)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_framer_message_access_value";
    v15 = (char *)_os_log_send_and_compose_impl();

    v39 = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v15, &v39, &v38))
      goto LABEL_50;
    if (v39 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null message", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (!v38)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v33 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v33, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v25 = v39;
    v26 = os_log_type_enabled(v16, v39);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v41 = "nw_framer_message_access_value";
      v42 = 2082;
      v43 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_49:

    free(backtrace_string);
    goto LABEL_50;
  }
  v7 = v5;
  v8 = v7[1].isa;

  is_framer = nw_protocol_definition_is_framer(v8);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_framer_message_access_value";
    v15 = (char *)_os_log_send_and_compose_impl();

    v39 = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v15, &v39, &v38))
      goto LABEL_50;
    if (v39 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v19 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (!v38)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v34 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v34, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v27 = v39;
    v28 = os_log_type_enabled(v16, v39);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v41 = "nw_framer_message_access_value";
      v42 = 2082;
      v43 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (!key)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_framer_message_access_value";
    v15 = (char *)_os_log_send_and_compose_impl();

    v39 = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v15, &v39, &v38))
      goto LABEL_50;
    if (v39 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (!v38)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v35 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v35, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v29 = v39;
    v30 = os_log_type_enabled(v16, v39);
    if (!backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v29, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446466;
      v41 = "nw_framer_message_access_value";
      v42 = 2082;
      v43 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v29, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
  if (v6)
  {
    v37[0] = MEMORY[0x1E0C809B0];
    v37[1] = 3221225472;
    v37[2] = __nw_framer_message_access_value_block_invoke;
    v37[3] = &unk_1E14AA3E0;
    v10 = v6;
    v37[4] = v10;
    v37[5] = key;
    isa = v7[4].isa;
    if (isa)
      v12 = __nw_framer_message_access_value_block_invoke((uint64_t)v37, isa);
    else
      v12 = 0;

    goto LABEL_9;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v41 = "nw_framer_message_access_value";
  v15 = (char *)_os_log_send_and_compose_impl();

  v39 = OS_LOG_TYPE_ERROR;
  v38 = 0;
  if (__nwlog_fault(v15, &v39, &v38))
  {
    if (v39 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v23 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v23, "%{public}s called with null access_value", buf, 0xCu);
      }
LABEL_76:

      goto LABEL_50;
    }
    if (!v38)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v36 = v39;
      if (os_log_type_enabled(v16, v39))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v36, "%{public}s called with null access_value, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_76;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v31 = v39;
    v32 = os_log_type_enabled(v16, v39);
    if (!backtrace_string)
    {
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_framer_message_access_value";
        _os_log_impl(&dword_182FBE000, v16, v31, "%{public}s called with null access_value, no backtrace", buf, 0xCu);
      }
      goto LABEL_76;
    }
    if (v32)
    {
      *(_DWORD *)buf = 136446466;
      v41 = "nw_framer_message_access_value";
      v42 = 2082;
      v43 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v31, "%{public}s called with null access_value, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_49;
  }
LABEL_50:
  if (v15)
    free(v15);
  v12 = 0;
LABEL_9:

  return v12;
}

void sub_1833E4D78(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_framer_message_access_value_block_invoke(uint64_t a1, _QWORD *a2)
{
  uint64_t (*v3)(void);

  if (*a2)
  {
    xpc_dictionary_get_pointer();
    v3 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  else
  {
    v3 = *(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16);
  }
  return v3();
}

void nw_framer_message_set_object_value(nw_framer_message_t message, const char *key, id value)
{
  NSObject *v5;
  id v6;
  NSObject *v7;
  objc_class *v8;
  char is_framer;
  id v10;
  uint64_t isa;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD v31[6];
  char v32;
  os_log_type_t v33;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = message;
  v6 = value;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_framer_message_set_object_value";
    v13 = (char *)_os_log_send_and_compose_impl();

    v33 = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &v33, &v32))
      goto LABEL_57;
    if (v33 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = v33;
      if (os_log_type_enabled(v14, v33))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null message", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = v33;
      v22 = os_log_type_enabled(v14, v33);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_framer_message_set_object_value";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_57:
        if (!v13)
          goto LABEL_7;
LABEL_58:
        free(v13);
        goto LABEL_7;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = v33;
      if (os_log_type_enabled(v14, v33))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_56:

    goto LABEL_57;
  }
  v7 = v5;
  v8 = v7[1].isa;

  is_framer = nw_protocol_definition_is_framer(v8);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_framer_message_set_object_value";
    v13 = (char *)_os_log_send_and_compose_impl();

    v33 = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &v33, &v32))
      goto LABEL_57;
    if (v33 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = v33;
      if (os_log_type_enabled(v14, v33))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = v33;
      if (os_log_type_enabled(v14, v33))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = v33;
    v25 = os_log_type_enabled(v14, v33);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_framer_message_set_object_value";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_37;
  }
  if (!key)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_framer_message_set_object_value";
    v13 = (char *)_os_log_send_and_compose_impl();

    v33 = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v13, &v33, &v32))
      goto LABEL_57;
    if (v33 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = v33;
      if (os_log_type_enabled(v14, v33))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v32)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = v33;
      if (os_log_type_enabled(v14, v33))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = v33;
    v27 = os_log_type_enabled(v14, v33);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_framer_message_set_object_value";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_framer_message_set_object_value";
      v36 = 2082;
      v37 = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_37:

    free(v23);
    if (!v13)
      goto LABEL_7;
    goto LABEL_58;
  }
  v31[0] = MEMORY[0x1E0C809B0];
  v31[1] = 3221225472;
  v31[2] = __nw_framer_message_set_object_value_block_invoke;
  v31[3] = &unk_1E14AA188;
  v31[5] = key;
  v10 = v6;
  v31[4] = v10;
  isa = (uint64_t)v7[4].isa;
  if (isa)
    __nw_framer_message_set_object_value_block_invoke((uint64_t)v31, isa);

LABEL_7:
}

uint64_t __nw_framer_message_set_object_value_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v5;
  void *v6;

  v3 = *(_QWORD *)(a2 + 16);
  if (!v3)
  {
    v5 = nw_dictionary_create();
    v6 = *(void **)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v5;

    v3 = *(_QWORD *)(a2 + 16);
  }
  nw_dictionary_set_value(v3, *(const char **)(a1 + 40), *(void **)(a1 + 32));
  return 1;
}

id nw_framer_message_copy_object_value(nw_framer_message_t message, const char *key)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  objc_class *v6;
  char is_framer;
  uint64_t isa;
  void *v9;
  id v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  _QWORD v30[6];
  char v31;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v34)(uint64_t, uint64_t);
  void (*v35)(uint64_t);
  id v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = message;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null message", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_182FBE000, v14, v27, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v3;
  v6 = v5[1].isa;

  is_framer = nw_protocol_definition_is_framer(v6);
  if ((is_framer & 1) == 0)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null nw_protocol_metadata_is_framer_message(message)", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null nw_protocol_metadata_is_framer_message(message), dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (key)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v34 = __Block_byref_object_copy__4439;
    v35 = __Block_byref_object_dispose__4440;
    v36 = 0;
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 3221225472;
    v30[2] = __nw_framer_message_copy_object_value_block_invoke;
    v30[3] = &unk_1E14AA1B0;
    v30[4] = buf;
    v30[5] = key;
    isa = (uint64_t)v5[4].isa;
    if (isa)
    {
      __nw_framer_message_copy_object_value_block_invoke((uint64_t)v30, isa);
      v9 = *(void **)(*(_QWORD *)&buf[8] + 40);
    }
    else
    {
      v9 = 0;
    }
    v10 = v9;
    _Block_object_dispose(buf, 8);

    goto LABEL_8;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v31 = 0;
  if (__nwlog_fault(v13, &type, &v31))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null key", buf, 0xCu);
      }
LABEL_56:

      goto LABEL_57;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_framer_message_copy_object_value";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
LABEL_57:
  if (v13)
    free(v13);
  v10 = 0;
LABEL_8:

  return v10;
}

uint64_t __nw_framer_message_copy_object_value_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void *v6;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3)
  {
    v4 = nw_dictionary_copy_value(v3, *(_QWORD *)(a1 + 40));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
  return 1;
}

BOOL NWPBEndpointReadFrom(uint64_t a1, uint64_t a2)
{
  int *v3;
  uint64_t v4;
  unint64_t v5;
  int *v6;
  unint64_t v7;
  int *v8;
  int *v10;
  _BYTE *v11;
  char v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  int v50;
  BOOL v51;
  NWPBAddressEndpoint *v52;
  uint64_t v53;

  v3 = (int *)MEMORY[0x1E0D82BF0];
  v4 = (int)*MEMORY[0x1E0D82BF0];
  v5 = *(_QWORD *)(a2 + v4);
  v6 = (int *)MEMORY[0x1E0D82BD8];
  v7 = *(_QWORD *)(a2 + (int)*MEMORY[0x1E0D82BD8]);
  v8 = (int *)MEMORY[0x1E0D82BC8];
  if (v5 < v7)
  {
    v10 = (int *)MEMORY[0x1E0D82BB8];
    while (1)
    {
      v11 = (_BYTE *)(a2 + *v8);
      if (*v11)
        return *(_BYTE *)(a2 + *v8) == 0;
      if (v5 >= v7)
        break;
      v12 = *(_BYTE *)(*(_QWORD *)(a2 + *v10) + v5);
      *(_QWORD *)(a2 + (int)v4) = v5 + 1;
      v13 = v12 & 0x7F;
      if ((v12 & 0x80) == 0)
        goto LABEL_37;
      v14 = *v3;
      v15 = *(_QWORD *)(a2 + v14);
      if (v15 == -1 || v15 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_35;
      v16 = v15 + 1;
      v17 = *(char *)(*(_QWORD *)(a2 + *v10) + v15);
      *(_QWORD *)(a2 + v14) = v16;
      v13 |= (unint64_t)(v17 & 0x7F) << 7;
      if ((v17 & 0x80000000) == 0)
        goto LABEL_37;
      v18 = *v3;
      v19 = *(_QWORD *)(a2 + v18);
      if (v19 == -1 || v19 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_35;
      v20 = v19 + 1;
      v21 = *(char *)(*(_QWORD *)(a2 + *v10) + v19);
      *(_QWORD *)(a2 + v18) = v20;
      v13 |= (unint64_t)(v21 & 0x7F) << 14;
      if ((v21 & 0x80000000) == 0)
        goto LABEL_37;
      v22 = *v3;
      v23 = *(_QWORD *)(a2 + v22);
      if (v23 == -1 || v23 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_35;
      v24 = v23 + 1;
      v25 = *(char *)(*(_QWORD *)(a2 + *v10) + v23);
      *(_QWORD *)(a2 + v22) = v24;
      v13 |= (unint64_t)(v25 & 0x7F) << 21;
      if ((v25 & 0x80000000) == 0)
        goto LABEL_37;
      v26 = *v3;
      v27 = *(_QWORD *)(a2 + v26);
      if (v27 == -1 || v27 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_35;
      v28 = v27 + 1;
      v29 = *(char *)(*(_QWORD *)(a2 + *v10) + v27);
      *(_QWORD *)(a2 + v26) = v28;
      v13 |= (unint64_t)(v29 & 0x7F) << 28;
      if ((v29 & 0x80000000) == 0)
        goto LABEL_37;
      v30 = *v3;
      v31 = *(_QWORD *)(a2 + v30);
      if (v31 == -1 || v31 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_35;
      v32 = v31 + 1;
      v33 = *(char *)(*(_QWORD *)(a2 + *v10) + v31);
      *(_QWORD *)(a2 + v30) = v32;
      if ((v33 & 0x80000000) == 0)
        goto LABEL_37;
      v34 = *v3;
      v35 = *(_QWORD *)(a2 + v34);
      if (v35 == -1 || v35 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_35;
      v36 = v35 + 1;
      v37 = *(char *)(*(_QWORD *)(a2 + *v10) + v35);
      *(_QWORD *)(a2 + v34) = v36;
      if ((v37 & 0x80000000) == 0)
        goto LABEL_37;
      v38 = *v3;
      v39 = *(_QWORD *)(a2 + v38);
      if (v39 == -1 || v39 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_35;
      v40 = v39 + 1;
      v41 = *(char *)(*(_QWORD *)(a2 + *v10) + v39);
      *(_QWORD *)(a2 + v38) = v40;
      if ((v41 & 0x80000000) == 0)
        goto LABEL_37;
      v42 = *v3;
      v43 = *(_QWORD *)(a2 + v42);
      if (v43 == -1 || v43 >= *(_QWORD *)(a2 + *v6))
        goto LABEL_35;
      v44 = v43 + 1;
      v45 = *(char *)(*(_QWORD *)(a2 + *v10) + v43);
      *(_QWORD *)(a2 + v42) = v44;
      if ((v45 & 0x80000000) == 0)
        goto LABEL_37;
      v46 = *v3;
      v47 = *(_QWORD *)(a2 + v46);
      if (v47 == -1 || v47 >= *(_QWORD *)(a2 + *v6))
      {
LABEL_35:
        v11 = (_BYTE *)(a2 + *v8);
        goto LABEL_36;
      }
      v48 = v47 + 1;
      v49 = *(char *)(*(_QWORD *)(a2 + *v10) + v47);
      *(_QWORD *)(a2 + v46) = v48;
      if (v49 < 0)
      {
        v13 = 0;
        v50 = *(unsigned __int8 *)(a2 + *v8);
        goto LABEL_39;
      }
LABEL_37:
      v50 = *(unsigned __int8 *)(a2 + *v8);
      if (*(_BYTE *)(a2 + *v8))
        v13 = 0;
LABEL_39:
      if (v50)
        v51 = 1;
      else
        v51 = (v13 & 7) == 4;
      if (v51)
        return *(_BYTE *)(a2 + *v8) == 0;
      switch((v13 >> 3))
      {
        case 1u:
          v52 = objc_alloc_init(NWPBAddressEndpoint);
          objc_storeStrong((id *)(a1 + 8), v52);
          if (PBReaderPlaceMark() && (NWPBAddressEndpointReadFrom((uint64_t)v52, a2) & 1) != 0)
            goto LABEL_56;
          goto LABEL_64;
        case 2u:
          v52 = objc_alloc_init(NWPBHostEndpoint);
          objc_storeStrong((id *)(a1 + 16), v52);
          if (!PBReaderPlaceMark() || !NWPBHostEndpointReadFrom((uint64_t)v52, a2))
            goto LABEL_64;
          goto LABEL_56;
        case 3u:
          v52 = objc_alloc_init(NWPBServiceEndpoint);
          objc_storeStrong((id *)(a1 + 32), v52);
          if (!PBReaderPlaceMark() || !NWPBServiceEndpointReadFrom((uint64_t)v52, a2))
            goto LABEL_64;
          goto LABEL_56;
        case 4u:
          v52 = objc_alloc_init(NWPBInterface);
          objc_storeStrong((id *)(a1 + 24), v52);
          if (!PBReaderPlaceMark() || (NWPBInterfaceReadFrom((uint64_t)v52, a2) & 1) == 0)
          {
LABEL_64:

            return 0;
          }
LABEL_56:
          PBReaderRecallMark();
LABEL_57:

LABEL_58:
          v4 = *v3;
          v5 = *(_QWORD *)(a2 + v4);
          v7 = *(_QWORD *)(a2 + *v6);
          if (v5 >= v7)
            return *(_BYTE *)(a2 + *v8) == 0;
          break;
        case 5u:
          PBReaderReadData();
          v53 = objc_claimAutoreleasedReturnValue();
          v52 = *(NWPBAddressEndpoint **)(a1 + 40);
          *(_QWORD *)(a1 + 40) = v53;
          goto LABEL_57;
        default:
          if ((PBReaderSkipValueWithTag() & 1) != 0)
            goto LABEL_58;
          return 0;
      }
    }
    v13 = 0;
LABEL_36:
    *v11 = 1;
    goto LABEL_37;
  }
  return *(_BYTE *)(a2 + *v8) == 0;
}

uint64_t __Block_byref_object_copy__5622(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__5623(uint64_t a1)
{

}

uint64_t nw_resolver_get_next_log_id(void)
{
  unsigned int v0;
  uint64_t result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  do
  {
    v0 = __ldaxr((unsigned int *)&nw_resolver_get_next_log_id(void)::s_last_id);
    result = v0 + 1;
  }
  while (__stlxr(result, (unsigned int *)&nw_resolver_get_next_log_id(void)::s_last_id));
  if (v0 == -2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = 136446466;
      v4 = "nw_resolver_get_next_log_id";
      v5 = 1024;
      v6 = -1;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_ERROR, "%{public}s reached %u resolver logging ids, wrapping", (uint8_t *)&v3, 0x12u);
    }

    return nw_resolver_get_next_log_id();
  }
  return result;
}

nw_endpoint_t *nw_resolver_create_with_endpoint(void *a1, void *a2)
{
  id v3;
  id v4;
  nw_endpoint_t *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = -[NWConcrete_nw_resolver initWithEndpoint:parameters:path:log_str:]([NWConcrete_nw_resolver alloc], v3, v4, 0, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_resolver_create_with_endpoint";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_create_with_endpoint";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_resolver_create_with_endpoint";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_create_with_endpoint";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_resolver_create_with_endpoint";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_3:

  return v5;
}

void sub_1833E6BA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_resolver_create_srv_weighted_variant(void *a1)
{
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int priority;
  unsigned int weight;
  unint64_t v11;
  void *v12;
  unint64_t v13;
  void *v14;
  unint64_t v15;
  void *v16;
  unint64_t v17;
  uint32_t v18;
  unint64_t v19;
  void *v20;
  void *v21;
  void **v22;
  void **v23;
  uint32_t v24;
  int v25;
  void *v26;
  void **v27;
  void **v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;

  v1 = a1;
  v2 = v1;
  if (v1 && (v3 = v1[3] - v1[2], (unint64_t)v3 > 0xF))
  {
    v6 = v3 >> 3;
    v4 = nw_array_create();
    v7 = 0;
    v29 = v6;
    do
    {
      v8 = v7;
      nw_array_get_object_at_index((uint64_t)v2, v7);
      v31 = (void *)objc_claimAutoreleasedReturnValue();
      priority = nw_endpoint_get_priority(v31);
      weight = nw_endpoint_get_weight(v31);
      v11 = v7 + 1;
      if (v7 + 1 >= v6)
      {
        v13 = v7++;
      }
      else
      {
        while (1)
        {
          v7 = v11;
          nw_array_get_object_at_index((uint64_t)v2, v11);
          v12 = (void *)objc_claimAutoreleasedReturnValue();

          v31 = v12;
          if (nw_endpoint_get_priority(v12) != priority)
            break;
          weight += nw_endpoint_get_weight(v12);
          v11 = v7 + 1;
          if (v6 == v7 + 1)
          {
            v13 = v7;
            v7 = v6;
            goto LABEL_13;
          }
        }
        v13 = v7 - 1;
      }
LABEL_13:
      v14 = v31;
      if (v8 - v7 == 1 || !weight)
      {
        while (v8 <= v13)
        {
          nw_array_get_object_at_index((uint64_t)v2, v8);
          v16 = (void *)objc_claimAutoreleasedReturnValue();
          nw_array_append(v4, v16);

          ++v8;
        }
      }
      else
      {
        v15 = v7 - v8;
        if (v7 != v8)
        {
          if (v8 <= v13)
          {
            v30 = 0;
            do
            {
              v17 = v8;
              if (weight)
              {
                v18 = arc4random() % weight;
                v19 = v8;
                while (1)
                {
                  nw_array_get_object_at_index((uint64_t)v2, v19);
                  v20 = (void *)objc_claimAutoreleasedReturnValue();
                  v21 = v20;
                  if (!v4 || !v20)
                    goto LABEL_35;
                  v23 = *(void ***)(v4 + 16);
                  v22 = *(void ***)(v4 + 24);
                  if (v23 != v22)
                  {
                    while (*v23 != v20)
                    {
                      if (++v23 == v22)
                      {
                        v23 = *(void ***)(v4 + 24);
                        break;
                      }
                    }
                  }
                  if (v23 == v22)
                  {
LABEL_35:
                    v24 = nw_endpoint_get_weight(v20);
                    v25 = v24;
                    if (v18 < v24)
                      goto LABEL_47;
                    v18 -= v24;
                  }

                  if (++v19 > v13)
                    goto LABEL_23;
                }
              }
              while (1)
              {
                nw_array_get_object_at_index((uint64_t)v2, v17);
                v26 = (void *)objc_claimAutoreleasedReturnValue();
                v21 = v26;
                if (!v4 || !v26)
                  break;
                v28 = *(void ***)(v4 + 16);
                v27 = *(void ***)(v4 + 24);
                if (v28 != v27)
                {
                  while (*v28 != v26)
                  {
                    if (++v28 == v27)
                    {
                      v28 = *(void ***)(v4 + 24);
                      break;
                    }
                  }
                }
                if (v28 == v27)
                  break;

                if (++v17 > v13)
                {
                  weight = 0;
LABEL_23:
                  v6 = v29;
                  goto LABEL_24;
                }
              }
              v25 = nw_endpoint_get_weight(v26);
LABEL_47:
              v6 = v29;
              nw_array_append(v4, v21);
              weight -= v25;

LABEL_24:
              ++v30;
              v14 = v31;
            }
            while (v30 != v7 - v8);
          }
          else
          {
            do
            {
              arc4random();
              --v15;
            }
            while (v15);
          }
        }
      }

    }
    while (v7 < v6);
  }
  else
  {
    v4 = v1;
  }

  return v4;
}

void sub_1833E6EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void ___ZL40nw_resolver_start_custom_resolver_lockedP22NWConcrete_nw_resolver_block_invoke(uint64_t a1, void *a2, int a3)
{
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *object;
  _QWORD v11[4];
  id v12;

  object = a2;
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 144);
  *(_QWORD *)(v5 + 144) = 0;

  if (object)
  {
    if (a3)
    {
      v11[0] = MEMORY[0x1E0C809B0];
      v11[1] = 3221225472;
      v11[2] = ___ZL40nw_resolver_start_custom_resolver_lockedP22NWConcrete_nw_resolver_block_invoke_2;
      v11[3] = &unk_1E14AC200;
      v12 = *(id *)(a1 + 32);
      nw_array_apply(object, (uint64_t)v11);
      v7 = v12;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 32);
      v9 = object;
      v7 = *(void **)(v8 + 144);
      *(_QWORD *)(v8 + 144) = v9;
    }

  }
  nw_resolver_update_status_locked(*(void **)(a1 + 32), 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));

}

void sub_1833E6FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9)
{

  _Unwind_Resume(a1);
}

void __nw_resolver_set_update_handler_block_invoke_73(uint64_t a1, void *a2)
{
  int address_family;
  uint64_t v4;
  _BOOL8 v5;
  uint64_t v6;
  void *v7;
  NSObject *object;

  object = a2;
  if (nw_endpoint_get_type(object) == nw_endpoint_type_address)
  {
    address_family = nw_endpoint_get_address_family(object);
    if (address_family == 30)
    {
      if (*(_BYTE *)(a1 + 64) != 30 && *(_BYTE *)(a1 + 64))
        goto LABEL_12;
      v4 = *(_QWORD *)(a1 + 56);
    }
    else
    {
      if (address_family != 2 || (*(unsigned __int8 *)(a1 + 64) | 2) != 2)
        goto LABEL_12;
      v4 = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(*(_QWORD *)(v4 + 8) + 24) = 1;
    if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40))
    {
      v5 = nw_array_create();
      v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v7 = *(void **)(v6 + 40);
      *(_QWORD *)(v6 + 40) = v5;

    }
    nw_endpoint_set_parent_endpoint(object, *(void **)(*(_QWORD *)(a1 + 32) + 24), 0);
    nw_array_append(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), object);
  }
LABEL_12:

}

void sub_1833E70A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t nw_resolver_get_scoped_interface_index(NWConcrete_nw_resolver *a1, unsigned int *a2)
{
  NWConcrete_nw_resolver *v3;
  NWConcrete_nw_resolver *v4;
  uint64_t v5;
  const char *v6;
  char *v7;
  unsigned int *v8;
  unsigned int v9;
  NSObject *v10;
  const char *v11;
  int v12;
  const char *v13;
  nw_interface_type_t required_interface_type;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  _BYTE v34[20];
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_resolver_get_scoped_interface_index";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v17, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_resolver_get_scoped_interface_index";
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null resolver", buf, 0xCu);
        }
        goto LABEL_67;
      }
      if (!v29)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_resolver_get_scoped_interface_index";
          _os_log_impl(&dword_182FBE000, v18, v27, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_resolver_get_scoped_interface_index";
          _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
        goto LABEL_67;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_resolver_get_scoped_interface_index";
        v33 = 2082;
        *(_QWORD *)v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_55:

      free(backtrace_string);
    }
LABEL_68:
    if (v17)
      free(v17);
    v5 = 0;
    goto LABEL_27;
  }
  if (!a2)
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_resolver_get_scoped_interface_index";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v17, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_resolver_get_scoped_interface_index";
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null service_flags", buf, 0xCu);
        }
LABEL_67:

        goto LABEL_68;
      }
      if (!v29)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_resolver_get_scoped_interface_index";
          _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s called with null service_flags, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_67;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v18, type);
      if (!backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_resolver_get_scoped_interface_index";
          _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s called with null service_flags, no backtrace", buf, 0xCu);
        }
        goto LABEL_67;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_resolver_get_scoped_interface_index";
        v33 = 2082;
        *(_QWORD *)v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v18, v25, "%{public}s called with null service_flags, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_55;
    }
    goto LABEL_68;
  }
  if (*((_DWORD *)v3 + 14))
  {
    *a2 |= 0x10000000u;
    v5 = *((unsigned int *)v3 + 14);
    v6 = "ServiceIndex";
    if (!(_DWORD)v5)
      goto LABEL_27;
  }
  else
  {
    v7 = (char *)*((id *)v3 + 26);
    if (v7
      || (v7 = (char *)nw_parameters_copy_required_interface(*((nw_parameters_t *)v4 + 2))) != 0
      || (v7 = (char *)nw_endpoint_copy_interface(*((void **)v4 + 3))) != 0)
    {
      v6 = v7 + 104;
      v8 = v7;
      v9 = v8[24];

      if (v9 == 4)
        v5 = 0xFFFFFFFFLL;
      else
        v5 = v8[2];
    }
    else if ((*((_BYTE *)v4 + 346) & 0x10) != 0)
    {
      v8 = 0;
      v6 = "LocalOnly";
      v5 = 0xFFFFFFFFLL;
    }
    else
    {
      required_interface_type = nw_parameters_get_required_interface_type(*((nw_parameters_t *)v4 + 2));
      v8 = 0;
      if (required_interface_type == nw_interface_type_loopback)
        v5 = 0xFFFFFFFFLL;
      else
        v5 = 0;
      if (required_interface_type == nw_interface_type_loopback)
        v6 = "loopback";
      else
        v6 = "<NULL>";
    }

    if (!(_DWORD)v5)
      goto LABEL_27;
  }
  if ((*((_BYTE *)v4 + 346) & 0x20) == 0)
  {
    if (*((_BYTE *)v4 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v10 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v11 = "unknown";
        *(_DWORD *)buf = 136446978;
        v32 = "nw_resolver_get_scoped_interface_index";
        v33 = 2082;
        if (v6)
          v11 = v6;
        *(_QWORD *)v34 = (char *)v4 + 256;
        *(_WORD *)&v34[8] = 2082;
        *(_QWORD *)&v34[10] = v11;
        *(_WORD *)&v34[18] = 1024;
        v35 = v5;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Scoping resolution to %{public}s [%d]", buf, 0x26u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v12 = *((_DWORD *)v4 + 85);
        v13 = "unknown";
        if (v6)
          v13 = v6;
        *(_DWORD *)buf = 136446978;
        v32 = "nw_resolver_get_scoped_interface_index";
        v33 = 1024;
        *(_DWORD *)v34 = v12;
        *(_WORD *)&v34[4] = 2082;
        *(_QWORD *)&v34[6] = v13;
        *(_WORD *)&v34[14] = 1024;
        *(_DWORD *)&v34[16] = v5;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s [R%u] Scoping resolution to %{public}s [%d]", buf, 0x22u);
      }
    }

  }
LABEL_27:

  return v5;
}

void nw_resolver_update_status_locked(void *a1, void *a2)
{
  char *v3;
  id v4;
  __int16 v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  uint64_t v10;
  char v11;
  int v12;
  uint64_t *v13;
  unint64_t int64_with_default;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  uint32_t v24;
  int v25;
  _BOOL8 v26;
  id v27;
  void *v28;
  void *v29;
  int v30;
  int v31;
  NSObject *v32;
  const char *logging_description;
  const char *v34;
  NSObject *v35;
  uint32_t v36;
  NSObject *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  const char *v41;
  const char *v42;
  const char *v43;
  const char *v44;
  NSObject *v45;
  uint32_t v46;
  int v47;
  const char *v48;
  int v49;
  const char *v50;
  const char *v51;
  const char *v52;
  const char *v53;
  const char *v54;
  const char *v55;
  void *v56;
  uint64_t *v57;
  _BOOL8 source;
  dispatch_time_t v59;
  uint64_t v60;
  void *v61;
  char *v62;
  NSObject *v63;
  os_log_type_t v64;
  char *backtrace_string;
  os_log_type_t v66;
  _BOOL4 v67;
  os_log_type_t v68;
  _QWORD v69[4];
  char *v70;
  uint64_t v71;
  char v72;
  os_log_type_t type;
  _QWORD v74[4];
  uint64_t *v75;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  _BYTE v79[78];
  uint64_t v80;

  v80 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (*((_DWORD *)v3 + 21) || (v3[346] & 2) != 0)
    goto LABEL_47;
  if (nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) != nw_endpoint_type_host)
  {
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) == nw_endpoint_type_bonjour_service)
    {
      v10 = *((_QWORD *)v3 + 18);
      if (v10
        && *(_QWORD *)(v10 + 24) != *(_QWORD *)(v10 + 16)
        && (nw_parameters_get_indefinite(*((void **)v3 + 2)) & 1) == 0
        && (*((_WORD *)v3 + 44) & 0x10) == 0)
      {
        *((_DWORD *)v3 + 2) = 1;
        nw_resolver_start_query_timer((NWConcrete_nw_resolver *)v3);
        goto LABEL_155;
      }
      goto LABEL_27;
    }
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) == (nw_endpoint_type_url|nw_endpoint_type_address))
    {
      if ((*((_WORD *)v3 + 44) & 0x10) != 0)
      {
LABEL_27:
        v11 = 0;
        v12 = 1;
LABEL_48:
        *((_DWORD *)v3 + 2) = v12;
        goto LABEL_49;
      }
    }
    else if (nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) == nw_endpoint_type_address
           && nw_parameters_get_resolve_ptr(*((void **)v3 + 2))
           && (*((_WORD *)v3 + 44) & 5) == 0)
    {
      goto LABEL_27;
    }
LABEL_47:
    v11 = 0;
    v12 = 2;
    goto LABEL_48;
  }
  v5 = *((_WORD *)v3 + 44);
  if ((v5 & 0x10) == 0)
  {
    if ((v5 & 0x60) == 0 && (v5 & 0xA) != 0 && (v5 & 5) != 0 && (v5 & 0x80) != 0)
    {
      if (*((_QWORD *)v3 + 6)
        && (*((_WORD *)v3 + 44) & 0x802) != 0
        && (*((_WORD *)v3 + 44) & 0x401) != 0
        && (v3[347] & 0xE0) == 0x60)
      {
        if ((v3[346] & 0x20) != 0)
        {
LABEL_76:
          *((_DWORD *)v3 + 2) = 1;
          nw_resolver_cancel_query_locked((NWConcrete_nw_resolver *)v3, 0);
          *((_WORD *)v3 + 44) = 0;
          v3[347] |= 0x80u;
          nw_resolver_create_dns_getaddrinfo_locked((NWConcrete_nw_resolver *)v3, 0);
          v11 = 0;
          goto LABEL_49;
        }
        if (v3[256])
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v6 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
            goto LABEL_75;
          *(_DWORD *)buf = 136446466;
          v77 = "nw_resolver_update_status_locked";
          v78 = 2082;
          *(_QWORD *)v79 = v3 + 256;
          v7 = "%{public}s [C%{public}s] Failed to resolve using oblivious configuration, failing over";
          v8 = v6;
          v9 = 22;
        }
        else
        {
          __nwlog_obj();
          v6 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
          {
LABEL_75:

            goto LABEL_76;
          }
          v25 = *((_DWORD *)v3 + 85);
          *(_DWORD *)buf = 136446466;
          v77 = "nw_resolver_update_status_locked";
          v78 = 1024;
          *(_DWORD *)v79 = v25;
          v7 = "%{public}s [R%u] Failed to resolve using oblivious configuration, failing over";
          v8 = v6;
          v9 = 18;
        }
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, v7, buf, v9);
        goto LABEL_75;
      }
      *((_DWORD *)v3 + 2) = 2;
      if ((v3[348] & 2) != 0)
      {
        v19 = *((_QWORD *)v3 + 18);
        if (v19)
        {
          if (*(_QWORD *)(v19 + 24) != *(_QWORD *)(v19 + 16))
          {
            v20 = nw_array_copy(v19);
            v21 = (void *)v20;
            if (v20)
              v22 = (uint64_t)(*(_QWORD *)(v20 + 24) - *(_QWORD *)(v20 + 16)) >> 3;
            else
              v22 = 0;
            v26 = nw_array_create();
            nw_array_append(v26, v21);
            v27 = nw_storage_copy_shared();
            v28 = (void *)*((_QWORD *)v3 + 3);
            v29 = (void *)*((_QWORD *)v3 + 4);
            v69[0] = MEMORY[0x1E0C809B0];
            v69[1] = 3221225472;
            v69[2] = ___ZL32nw_resolver_update_status_lockedP22NWConcrete_nw_resolverU13block_pointerFvvE_block_invoke;
            v69[3] = &unk_1E14AA348;
            v70 = v3;
            v71 = v22;
            nw_storage_store_items(v27, (uint64_t)"dns_cache", (void *)v26, v28, v29, v69);

          }
        }
      }
      goto LABEL_155;
    }
    *((_DWORD *)v3 + 2) = 1;
    if ((v5 & 0x104) != 0 && (v5 & 0x20) == 0 || (v5 & 0x208) != 0 && (v5 & 0x40) == 0)
      nw_resolver_start_query_timer((NWConcrete_nw_resolver *)v3);
    v13 = v3;
    if ((v5 & 0x20A) != 0 && (v5 & 0x80) != 0
      || (int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_resolver_start_delay, 50)) == 0)
    {

      v11 = 0;
      goto LABEL_49;
    }
    v15 = int64_with_default;
    if ((int64_with_default & 0x8000000000000000) != 0)
    {
      if ((v3[346] & 0x20) == 0)
      {
        if (*((_BYTE *)v13 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            v77 = "nw_resolver_start_delayed_reporting_timer";
            v78 = 2082;
            *(_QWORD *)v79 = v13 + 32;
            *(_WORD *)&v79[8] = 2048;
            *(_QWORD *)&v79[10] = v15;
            *(_WORD *)&v79[18] = 2048;
            v15 = 50;
            *(_QWORD *)&v79[20] = 50;
            v17 = "%{public}s [C%{public}s] Invalid resolver reporting delay %lldms, reverting to default value %llums";
            goto LABEL_71;
          }
        }
        else
        {
          __nwlog_obj();
          v16 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            v30 = *((_DWORD *)v13 + 85);
            *(_DWORD *)buf = 136446978;
            v77 = "nw_resolver_start_delayed_reporting_timer";
            v78 = 1024;
            *(_DWORD *)v79 = v30;
            *(_WORD *)&v79[4] = 2048;
            *(_QWORD *)&v79[6] = v15;
            *(_WORD *)&v79[14] = 2048;
            v15 = 50;
            *(_QWORD *)&v79[16] = 50;
            v17 = "%{public}s [R%u] Invalid resolver reporting delay %lldms, reverting to default value %llums";
            goto LABEL_84;
          }
        }
        v15 = 50;
LABEL_87:

        goto LABEL_88;
      }
      v15 = 50;
    }
    else
    {
      if (int64_with_default < 0xEA61)
        goto LABEL_88;
      if ((v3[346] & 0x20) == 0)
      {
        if (*((_BYTE *)v13 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v16 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446978;
            v77 = "nw_resolver_start_delayed_reporting_timer";
            v78 = 2082;
            *(_QWORD *)v79 = v13 + 32;
            *(_WORD *)&v79[8] = 2048;
            *(_QWORD *)&v79[10] = v15;
            *(_WORD *)&v79[18] = 2048;
            v15 = 60000;
            *(_QWORD *)&v79[20] = 60000;
            v17 = "%{public}s [C%{public}s] Invalid resolver reporting delay %llums, reverting to max value %llums";
LABEL_71:
            v23 = v16;
            v24 = 42;
LABEL_85:
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, v17, buf, v24);
            goto LABEL_87;
          }
LABEL_86:
          v15 = 60000;
          goto LABEL_87;
        }
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
          goto LABEL_86;
        v31 = *((_DWORD *)v13 + 85);
        *(_DWORD *)buf = 136446978;
        v77 = "nw_resolver_start_delayed_reporting_timer";
        v78 = 1024;
        *(_DWORD *)v79 = v31;
        *(_WORD *)&v79[4] = 2048;
        *(_QWORD *)&v79[6] = v15;
        *(_WORD *)&v79[14] = 2048;
        v15 = 60000;
        *(_QWORD *)&v79[16] = 60000;
        v17 = "%{public}s [R%u] Invalid resolver reporting delay %llums, reverting to max value %llums";
LABEL_84:
        v23 = v16;
        v24 = 38;
        goto LABEL_85;
      }
      v15 = 60000;
    }
LABEL_88:
    if (v13[17])
    {
      if ((v3[346] & 0x20) != 0)
      {

        goto LABEL_135;
      }
      if (*((_BYTE *)v13 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v32 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          goto LABEL_116;
        logging_description = nw_endpoint_get_logging_description(*((void **)v3 + 3));
        *(_DWORD *)buf = 136446722;
        v77 = "nw_resolver_start_delayed_reporting_timer";
        v78 = 2082;
        *(_QWORD *)v79 = v13 + 32;
        *(_WORD *)&v79[8] = 2082;
        *(_QWORD *)&v79[10] = logging_description;
        v34 = "%{public}s [C%{public}s] Delayed reporting timer already running for %{public}s";
        v35 = v32;
        v36 = 32;
      }
      else
      {
        __nwlog_obj();
        v32 = objc_claimAutoreleasedReturnValue();
        if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
LABEL_116:

LABEL_135:
          v11 = 1;
          goto LABEL_49;
        }
        v47 = *((_DWORD *)v13 + 85);
        v48 = nw_endpoint_get_logging_description(*((void **)v3 + 3));
        *(_DWORD *)buf = 136446722;
        v77 = "nw_resolver_start_delayed_reporting_timer";
        v78 = 1024;
        *(_DWORD *)v79 = v47;
        *(_WORD *)&v79[4] = 2082;
        *(_QWORD *)&v79[6] = v48;
        v34 = "%{public}s [R%u] Delayed reporting timer already running for %{public}s";
        v35 = v32;
        v36 = 28;
      }
      _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, v34, buf, v36);
      goto LABEL_116;
    }
    if ((v3[346] & 0x20) != 0)
    {
LABEL_133:
      v56 = (void *)v13[4];
      v74[0] = MEMORY[0x1E0C809B0];
      v74[1] = 3221225472;
      v74[2] = ___ZL41nw_resolver_start_delayed_reporting_timerP22NWConcrete_nw_resolverbbb_block_invoke;
      v74[3] = &unk_1E14ACFD0;
      v57 = v13;
      v75 = v57;
      source = nw_queue_context_create_source(v56, 2, 3, 0, v74, 0);
      v13[17] = source;
      if (source)
      {
        v59 = dispatch_time(0x8000000000000000, 1000000 * v15);
        nw_queue_set_timer_values(source, v59, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
        nw_queue_activate_source(v13[17], v60);

        goto LABEL_135;
      }
      __nwlog_obj();
      v61 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v77 = "nw_resolver_start_delayed_reporting_timer";
      v62 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v72 = 0;
      if (!__nwlog_fault(v62, &type, &v72))
        goto LABEL_152;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v63 = objc_claimAutoreleasedReturnValue();
        v64 = type;
        if (os_log_type_enabled(v63, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_resolver_start_delayed_reporting_timer";
          _os_log_impl(&dword_182FBE000, v63, v64, "%{public}s nw_queue_context_create_source failed", buf, 0xCu);
        }
      }
      else if (v72)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v63 = objc_claimAutoreleasedReturnValue();
        v66 = type;
        v67 = os_log_type_enabled(v63, type);
        if (backtrace_string)
        {
          if (v67)
          {
            *(_DWORD *)buf = 136446466;
            v77 = "nw_resolver_start_delayed_reporting_timer";
            v78 = 2082;
            *(_QWORD *)v79 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v63, v66, "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_152;
        }
        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_resolver_start_delayed_reporting_timer";
          _os_log_impl(&dword_182FBE000, v63, v66, "%{public}s nw_queue_context_create_source failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v63 = objc_claimAutoreleasedReturnValue();
        v68 = type;
        if (os_log_type_enabled(v63, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_resolver_start_delayed_reporting_timer";
          _os_log_impl(&dword_182FBE000, v63, v68, "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

LABEL_152:
      if (v62)
        free(v62);

      goto LABEL_155;
    }
    if (*((_BYTE *)v13 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v37 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
        goto LABEL_132;
      v38 = nw_endpoint_get_logging_description(*((void **)v3 + 3));
      *(_DWORD *)buf = 136448258;
      v77 = "nw_resolver_start_delayed_reporting_timer";
      v39 = " SVCB";
      v78 = 2082;
      v40 = "";
      *(_QWORD *)v79 = v13 + 32;
      if ((v5 & 0x80) != 0)
        v41 = "";
      else
        v41 = " SVCB";
      *(_WORD *)&v79[8] = 2082;
      v42 = " IPv6";
      if ((v5 & 0x80) == 0)
        v39 = "";
      if ((v5 & 0x20A) != 0)
        v43 = "";
      else
        v43 = " IPv6";
      if ((v5 & 0x20A) == 0)
        v42 = "";
      if ((v5 & 0x105) != 0)
        v40 = " IPv4";
      *(_QWORD *)&v79[10] = v40;
      *(_WORD *)&v79[18] = 2082;
      *(_QWORD *)&v79[20] = v42;
      *(_WORD *)&v79[28] = 2082;
      *(_QWORD *)&v79[30] = v39;
      *(_WORD *)&v79[38] = 2048;
      *(_QWORD *)&v79[40] = v15;
      *(_WORD *)&v79[48] = 2082;
      *(_QWORD *)&v79[50] = v43;
      *(_WORD *)&v79[58] = 2082;
      *(_QWORD *)&v79[60] = v41;
      *(_WORD *)&v79[68] = 2082;
      *(_QWORD *)&v79[70] = v38;
      v44 = "%{public}s [C%{public}s] Received%{public}s%{public}s%{public}s result, delaying reporting: waiting %llums o"
            "n%{public}s%{public}s for %{public}s";
      v45 = v37;
      v46 = 92;
    }
    else
    {
      __nwlog_obj();
      v37 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
      {
LABEL_132:

        goto LABEL_133;
      }
      v49 = *((_DWORD *)v13 + 85);
      v50 = nw_endpoint_get_logging_description(*((void **)v3 + 3));
      v51 = " SVCB";
      *(_DWORD *)buf = 136448258;
      v77 = "nw_resolver_start_delayed_reporting_timer";
      v52 = "";
      v78 = 1024;
      *(_DWORD *)v79 = v49;
      if ((v5 & 0x80) != 0)
        v53 = "";
      else
        v53 = " SVCB";
      *(_WORD *)&v79[4] = 2082;
      v54 = " IPv6";
      if ((v5 & 0x80) == 0)
        v51 = "";
      if ((v5 & 0x20A) != 0)
        v55 = "";
      else
        v55 = " IPv6";
      if ((v5 & 0x20A) == 0)
        v54 = "";
      if ((v5 & 0x105) != 0)
        v52 = " IPv4";
      *(_QWORD *)&v79[6] = v52;
      *(_WORD *)&v79[14] = 2082;
      *(_QWORD *)&v79[16] = v54;
      *(_WORD *)&v79[24] = 2082;
      *(_QWORD *)&v79[26] = v51;
      *(_WORD *)&v79[34] = 2048;
      *(_QWORD *)&v79[36] = v15;
      *(_WORD *)&v79[44] = 2082;
      *(_QWORD *)&v79[46] = v55;
      *(_WORD *)&v79[54] = 2082;
      *(_QWORD *)&v79[56] = v53;
      *(_WORD *)&v79[64] = 2082;
      *(_QWORD *)&v79[66] = v50;
      v44 = "%{public}s [R%u] Received%{public}s%{public}s%{public}s result, delaying reporting: waiting %llums on%{publi"
            "c}s%{public}s for %{public}s";
      v45 = v37;
      v46 = 88;
    }
    _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, v44, buf, v46);
    goto LABEL_132;
  }
LABEL_155:
  v11 = 0;
LABEL_49:
  if (*((_DWORD *)v3 + 2) == 2)
  {
    if ((nw_parameters_get_use_long_outstanding_queries(*((void **)v3 + 2)) & 1) == 0)
      nw_resolver_cancel_query_locked((NWConcrete_nw_resolver *)v3, 0);
    nw_resolver_cancel_delayed_reporting_timer((NWConcrete_nw_resolver *)v3);
    nw_resolver_cancel_query_timer((NWConcrete_nw_resolver *)v3);
  }
  if (*((_QWORD *)v3 + 12))
    v18 = v11;
  else
    v18 = 1;
  if ((v18 & 1) == 0)
    nw_resolver_update_client(v3, v4);

}

void sub_1833E84AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t __nw_resolver_set_update_handler_block_invoke_76(uint64_t a1, unint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  void *v7;
  _BYTE *v8;
  NSObject *v9;
  uint64_t v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  uint64_t v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  int v18;
  int v19;
  int v21;
  const char *v22;
  __int16 v23;
  _BYTE v24[28];
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  nw_array_get_object_at_index(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 16), a2);
  v6 = objc_claimAutoreleasedReturnValue();
  if (v6 == MEMORY[0x1E0C80D00])
  {

LABEL_11:
    v8 = *(_BYTE **)(a1 + 32);
    if (v8)
    {
      if ((v8[346] & 0x20) != 0)
      {
        v7 = 0;
        goto LABEL_30;
      }
      if (v8[256])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v9 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
          goto LABEL_25;
        v14 = *(_QWORD *)(a1 + 32);
        v21 = 136446722;
        v22 = "nw_resolver_set_update_handler_block_invoke";
        v23 = 2082;
        *(_QWORD *)v24 = v14 + 256;
        *(_WORD *)&v24[8] = 2082;
        *(_QWORD *)&v24[10] = nw_endpoint_get_logging_description(v5);
        v15 = "%{public}s [C%{public}s] found cached alternative %{public}s";
        v16 = v9;
        v17 = 32;
        goto LABEL_24;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v18 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
        v21 = 136446722;
        v22 = "nw_resolver_set_update_handler_block_invoke";
        v23 = 1024;
        *(_DWORD *)v24 = v18;
        *(_WORD *)&v24[4] = 2082;
        *(_QWORD *)&v24[6] = nw_endpoint_get_logging_description(v5);
        v15 = "%{public}s [R%u] found cached alternative %{public}s";
        v16 = v9;
        v17 = 28;
        goto LABEL_24;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        v21 = 136446466;
        v22 = "nw_resolver_set_update_handler_block_invoke";
        v23 = 2082;
        *(_QWORD *)v24 = nw_endpoint_get_logging_description(v5);
        v15 = "%{public}s found cached alternative %{public}s";
        v16 = v9;
        v17 = 22;
LABEL_24:
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, v15, (uint8_t *)&v21, v17);
      }
    }
LABEL_25:
    v7 = 0;
    goto LABEL_29;
  }
  v7 = (void *)v6;
  if (!v6)
    goto LABEL_11;
  v8 = *(_BYTE **)(a1 + 32);
  if (!v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v21 = 136446722;
      v22 = "nw_resolver_set_update_handler_block_invoke";
      v23 = 2082;
      *(_QWORD *)v24 = nw_endpoint_get_logging_description(v5);
      *(_WORD *)&v24[8] = 2114;
      *(_QWORD *)&v24[10] = v7;
      v11 = "%{public}s found cached alternative %{public}s for %{public}@";
      v12 = v9;
      v13 = 32;
LABEL_28:
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, v11, (uint8_t *)&v21, v13);
    }
LABEL_29:

    v8 = *(_BYTE **)(a1 + 32);
    goto LABEL_30;
  }
  if ((v8[346] & 0x20) == 0)
  {
    if (v8[256])
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v9 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
        goto LABEL_29;
      v10 = *(_QWORD *)(a1 + 32);
      v21 = 136446978;
      v22 = "nw_resolver_set_update_handler_block_invoke";
      v23 = 2082;
      *(_QWORD *)v24 = v10 + 256;
      *(_WORD *)&v24[8] = 2082;
      *(_QWORD *)&v24[10] = nw_endpoint_get_logging_description(v5);
      *(_WORD *)&v24[18] = 2114;
      *(_QWORD *)&v24[20] = v7;
      v11 = "%{public}s [C%{public}s] found cached alternative %{public}s for %{public}@";
      v12 = v9;
      v13 = 42;
      goto LABEL_28;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      v19 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
      v21 = 136446978;
      v22 = "nw_resolver_set_update_handler_block_invoke";
      v23 = 1024;
      *(_DWORD *)v24 = v19;
      *(_WORD *)&v24[4] = 2082;
      *(_QWORD *)&v24[6] = nw_endpoint_get_logging_description(v5);
      *(_WORD *)&v24[14] = 2114;
      *(_QWORD *)&v24[16] = v7;
      v11 = "%{public}s [R%u] found cached alternative %{public}s for %{public}@";
      v12 = v9;
      v13 = 38;
      goto LABEL_28;
    }
    goto LABEL_29;
  }
LABEL_30:
  nw_resolver_update_client_alternative(v8, v5, v7);

  return 1;
}

void sub_1833E89B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_resolver_create_dns_getaddrinfo_locked(NWConcrete_nw_resolver *a1, NWConcrete_nw_resolver_service *a2)
{
  NWConcrete_nw_resolver *v3;
  NWConcrete_nw_resolver_service *v4;
  NWConcrete_nw_resolver_service *v5;
  void *v6;
  NSObject *v7;
  _BOOL8 v8;
  _QWORD *v9;
  BOOL v10;
  _BOOL4 v11;
  void *v12;
  NSObject *v13;
  _BOOL4 v14;
  void *v15;
  _DWORD *v16;
  _BOOL4 v17;
  _DWORD *v18;
  int v19;
  int v20;
  unsigned __int8 *v21;
  NWConcrete_nw_resolver *v22;
  NSObject *v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  NWConcrete_nw_resolver_service *v27;
  _BOOL4 v28;
  unsigned int port;
  void *v30;
  id *v31;
  id v32;
  id v33;
  const char *url_scheme;
  NSObject *v35;
  int v36;
  void *v37;
  const char *v38;
  servent *v39;
  int v40;
  int v41;
  int v42;
  NSObject *v43;
  const char *v44;
  NSObject *v45;
  uint32_t v46;
  NSObject *v47;
  const char *v48;
  NSObject *v49;
  uint32_t v50;
  int v51;
  id v52;
  void *v53;
  id v54;
  NSObject *v55;
  const char *v56;
  const char *v57;
  NSObject *v58;
  uint32_t v59;
  int v60;
  const char *v61;
  pid_t v62;
  _BOOL4 v63;
  NSObject *v64;
  const char *v65;
  NSObject *v66;
  uint32_t v67;
  _BOOL4 has_delegated_proc_pid;
  void *v69;
  int pid;
  NSObject *v71;
  const char *v72;
  NSObject *v73;
  uint32_t v74;
  NSObject *v75;
  const char *v76;
  NSObject *v77;
  uint32_t v78;
  int v79;
  int v80;
  int v81;
  int v82;
  void *v83;
  NWConcrete_nw_resolver *v84;
  NWConcrete_nw_resolver_service *v85;
  id v86;
  void *v87;
  void *v88;
  NWConcrete_nw_resolver *v89;
  NWConcrete_nw_resolver_service *v90;
  NWConcrete_nw_resolver_service *v91;
  OS_dnssd_getaddrinfo *v92;
  OS_dnssd_getaddrinfo *gai;
  OS_dnssd_getaddrinfo *v94;
  NSObject *v95;
  const char *logging_description;
  int v97;
  uint64_t v98;
  const char *v99;
  NSObject *v100;
  uint32_t v101;
  int v102;
  const char *v103;
  int v104;
  uint64_t v105;
  NWConcrete_nw_resolver_service *v106;
  void *v108;
  char *v109;
  NSObject *v110;
  os_log_type_t v111;
  void *v112;
  char *v113;
  NSObject *v114;
  os_log_type_t v115;
  void *v116;
  char *v117;
  NSObject *v118;
  os_log_type_t v119;
  char *v120;
  os_log_type_t v121;
  _BOOL4 v122;
  char *v123;
  NSObject *v124;
  os_log_type_t v125;
  _BOOL4 v126;
  char *backtrace_string;
  NSObject *v128;
  os_log_type_t v129;
  _BOOL4 v130;
  os_log_type_t v131;
  os_log_type_t v132;
  os_log_type_t v133;
  _BOOL4 v134;
  NSObject *endpoint;
  NWConcrete_nw_resolver_service *v136;
  id v137;
  _QWORD v138[4];
  NWConcrete_nw_resolver *v139;
  NWConcrete_nw_resolver_service *v140;
  id v141[5];
  NWConcrete_nw_resolver *v142;
  NWConcrete_nw_resolver_service *v143;
  void *v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  _QWORD v149[4];
  NWConcrete_nw_resolver *v150;
  uint8_t *v151;
  size_t out_signature_length;
  unsigned int v153;
  __int128 location;
  uint8_t v155[32];
  uint8_t buf[64];
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  uint64_t v169;

  v169 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v136 = v4;
  if (v3)
  {
    v5 = v4;
    v6 = (void *)dnssd_getaddrinfo_create();
    v134 = v6 != 0;
    if (v6)
    {
      if (v5)
      {
        v7 = v5->service_host;

      }
      else
      {
        v7 = *((id *)v3 + 3);
      }
      v153 = 0;
      endpoint = v7;
      v153 = nw_resolver_derive_service_flags(v3, v7, *((void **)v3 + 2));
      nw_resolver_get_scoped_interface_index(v3, &v153);
      v8 = nw_context_copy_workloop(*((void **)v3 + 4));
      dnssd_getaddrinfo_set_queue();

      dnssd_getaddrinfo_set_flags();
      dnssd_getaddrinfo_set_interface_index();
      nw_endpoint_get_hostname(v7);
      dnssd_getaddrinfo_set_hostname();
      dnssd_getaddrinfo_set_protocols();
      if (nw_parameters_get_sensitive_redacted(*((void **)v3 + 2)))
        dnssd_getaddrinfo_set_log_privacy_level();
      v9 = *((id *)v3 + 2);
      if (v9)
      {
        v10 = (v9[12] & 0x100000000) == 0;

        if (!v10)
          dnssd_getaddrinfo_prohibit_encrypted_dns();
        goto LABEL_11;
      }
      __nwlog_obj();
      v116 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_encrypted_dns";
      v117 = (char *)_os_log_send_and_compose_impl();

      v155[0] = 16;
      LOBYTE(v147) = 0;
      if (__nwlog_fault(v117, v155, &v147))
      {
        if (v155[0] == 17)
        {
          __nwlog_obj();
          v118 = objc_claimAutoreleasedReturnValue();
          v119 = v155[0];
          if (os_log_type_enabled(v118, (os_log_type_t)v155[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_encrypted_dns";
            _os_log_impl(&dword_182FBE000, v118, v119, "%{public}s called with null parameters", buf, 0xCu);
          }
        }
        else
        {
          if ((_BYTE)v147)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v128 = objc_claimAutoreleasedReturnValue();
            v129 = v155[0];
            v130 = os_log_type_enabled(v128, (os_log_type_t)v155[0]);
            if (backtrace_string)
            {
              if (v130)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_encrypted_dns";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = backtrace_string;
                _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
            }
            else
            {
              if (v130)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_encrypted_dns";
                _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
              }

            }
            goto LABEL_234;
          }
          __nwlog_obj();
          v118 = objc_claimAutoreleasedReturnValue();
          v133 = v155[0];
          if (os_log_type_enabled(v118, (os_log_type_t)v155[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_encrypted_dns";
            _os_log_impl(&dword_182FBE000, v118, v133, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_234:
      if (v117)
        free(v117);
LABEL_11:
      out_signature_length = 0;
      if (nw_endpoint_get_signature(*((nw_endpoint_t *)v3 + 3), &out_signature_length) && out_signature_length)
        dnssd_getaddrinfo_set_validation_data();
      if (nw_parameters_get_account_id(*((void **)v3 + 2)))
        dnssd_getaddrinfo_set_account_id();
      v11 = networkd_settings_get_BOOL((const char *)nw_setting_disable_svcb);
      v12 = (void *)MEMORY[0x1E0C809B0];
      if (v11)
      {
        if ((*((_BYTE *)v3 + 346) & 0x20) == 0)
        {
          if (*((_BYTE *)v3 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v13 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = (char *)v3 + 256;
              _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Requesting SVCB disabled", buf, 0x16u);
            }

          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v35 = (id)gLogObj;
            if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
            {
              v36 = *((_DWORD *)v3 + 85);
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v36;
              _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_INFO, "%{public}s [R%u] Requesting SVCB disabled", buf, 0x12u);
            }

          }
        }
        goto LABEL_73;
      }
      v14 = networkd_settings_get_BOOL((const char *)nw_setting_disable_svcb_router);
      v15 = (void *)*((_QWORD *)v3 + 25);
      if (v15)
      {
        v16 = nw_path_copy_interface(v15);

        if (v16)
          v17 = v14;
        else
          v17 = 0;
        if (v17)
        {
          v18 = v16;
          v19 = v18[24];

          if (v19 == 1 || (v16 = v18, v20 = v18[24], v16, v20 == 3))
          {
            v21 = (unsigned __int8 *)nw_path_copy_gateways(*((void **)v3 + 25));
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = buf;
            *(_QWORD *)&buf[16] = 0x2020000000;
            buf[24] = 0;
            v149[0] = v12;
            v149[1] = 3221225472;
            v149[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke;
            v149[3] = &unk_1E14AB5F0;
            v22 = v3;
            v150 = v22;
            v151 = buf;
            nw_array_apply(v21, (uint64_t)v149);
            if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
            {
              if ((*((_BYTE *)v22 + 346) & 0x20) != 0)
              {
LABEL_72:

                _Block_object_dispose(buf, 8);
                goto LABEL_73;
              }
              if (*((_BYTE *)v22 + 256))
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v23 = (id)gconnectionLogObj;
                if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                  goto LABEL_71;
                *(_DWORD *)v155 = 136446466;
                *(_QWORD *)&v155[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&v155[12] = 2082;
                *(_QWORD *)&v155[14] = (char *)v22 + 256;
                v24 = "%{public}s [C%{public}s] Requesting SVCB disabled due to local router mitigation";
                v25 = v23;
                v26 = 22;
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v23 = (id)gLogObj;
                if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
                {
LABEL_71:

                  goto LABEL_72;
                }
                v42 = *((_DWORD *)v22 + 85);
                *(_DWORD *)v155 = 136446466;
                *(_QWORD *)&v155[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&v155[12] = 1024;
                *(_DWORD *)&v155[14] = v42;
                v24 = "%{public}s [R%u] Requesting SVCB disabled due to local router mitigation";
                v25 = v23;
                v26 = 18;
              }
              _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_INFO, v24, v155, v26);
              goto LABEL_71;
            }

            _Block_object_dispose(buf, 8);
            v16 = v18;
          }
        }
      }
      else
      {
        v16 = 0;
      }

      if (v136)
      {
        v27 = v136;
        v28 = v27->priority == 0;

        if (!v28)
          goto LABEL_73;
      }
      port = nw_endpoint_get_port(*((nw_endpoint_t *)v3 + 3));
      if (!port)
        goto LABEL_73;
      v30 = (void *)*((_QWORD *)v3 + 2);
      if (v30)
      {
        v31 = v30;
        v32 = v31[25];

        v33 = v32;
        if (v33)
        {
          url_scheme = (const char *)nw_endpoint_get_url_scheme(v33);
          goto LABEL_57;
        }
        v37 = (void *)*((_QWORD *)v3 + 2);
      }
      else
      {
        v37 = 0;
      }
      if (nw_parameters_get_ip_protocol(v37) == 6)
      {
        if (nw_parameters_get_ip_protocol(*((void **)v3 + 2)) == 17)
          goto LABEL_73;
        v38 = "udp";
      }
      else
      {
        v38 = "tcp";
      }
      v39 = getservbyport(__rev16(port), v38);
      if (!v39)
      {
LABEL_73:
        if (uuid_is_null((const unsigned __int8 *)v3 + 232))
          goto LABEL_93;
        if ((*((char *)v3 + 347) & 0x80000000) == 0)
        {
          if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
          {
LABEL_92:
            dnssd_getaddrinfo_add_resolver_uuid();
            goto LABEL_93;
          }
          if (*((_BYTE *)v3 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v43 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
              goto LABEL_91;
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = (char *)v3 + 256;
            *(_WORD *)&buf[22] = 1042;
            *(_DWORD *)&buf[24] = 16;
            *(_WORD *)&buf[28] = 2098;
            *(_QWORD *)&buf[30] = (char *)v3 + 232;
            v44 = "%{public}s [C%{public}s] Requesting resolver UUID %{public,uuid_t}.16P";
            v45 = v43;
            v46 = 38;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v43 = (id)gLogObj;
            if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
            {
LABEL_91:

              goto LABEL_92;
            }
            v51 = *((_DWORD *)v3 + 85);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v51;
            *(_WORD *)&buf[18] = 1042;
            *(_DWORD *)&buf[20] = 16;
            *(_WORD *)&buf[24] = 2098;
            *(_QWORD *)&buf[26] = (char *)v3 + 232;
            v44 = "%{public}s [R%u] Requesting resolver UUID %{public,uuid_t}.16P";
            v45 = v43;
            v46 = 34;
          }
          _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, v44, buf, v46);
          goto LABEL_91;
        }
        if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
        {
LABEL_93:
          dnssd_getaddrinfo_set_use_failover();
          if (!nw_context_get_require_encrypted_name_resolution(*((void **)v3 + 4)))
          {
LABEL_112:
            v62 = getpid();
            memset(v155, 0, sizeof(v155));
            v147 = 0u;
            v148 = 0u;
            v63 = nw_copy_current_audit_token(v155);
            if (v63 && nw_parameters_has_delegated_proc_audit_token(*((void **)v3 + 2), v155))
              goto LABEL_239;
            if (!nw_parameters_has_delegated_proc_pid(*((void **)v3 + 2), v62)
              && !nw_parameters_has_delegated_proc_uuid(*((void **)v3 + 2)))
            {
LABEL_158:
              objc_initWeak((id *)&location, v3);
              v83 = v12;
              v141[1] = v12;
              v141[2] = (id)3221225472;
              v141[3] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_189;
              v141[4] = &unk_1E149AE68;
              v84 = v3;
              v142 = v84;
              v85 = v136;
              v143 = v85;
              v144 = v6;
              dnssd_getaddrinfo_set_event_handler();
              if ((*((_BYTE *)v84 + 348) & 2) != 0)
              {
                if (nw_storage_copy_shared_token[0] != -1)
                  dispatch_once(nw_storage_copy_shared_token, &__block_literal_global_44834);
                v86 = (id)nw_storage_copy_shared_storage;
                v88 = (void *)*((_QWORD *)v3 + 3);
                v87 = (void *)*((_QWORD *)v3 + 4);
                v138[0] = v83;
                v138[1] = 3221225472;
                v138[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_191;
                v138[3] = &unk_1E149AE90;
                objc_copyWeak(v141, (id *)&location);
                v139 = v84;
                v140 = v85;
                nw_storage_lookup_items(v86, (uint64_t)"dns_cache", v88, v87, v138);

                objc_destroyWeak(v141);
              }
              objc_copyWeak(&v137, (id *)&location);
              v89 = v84;
              v90 = v85;
              dnssd_getaddrinfo_set_result_handler();
              if (v136)
              {
                v91 = v90;
                v92 = v6;
                if (v91->gai)
                {
                  dnssd_getaddrinfo_invalidate();
                  gai = v91->gai;
                  v91->gai = 0;

                  v94 = v91->gai;
                }
                else
                {
                  v94 = 0;
                }
                v91->gai = v92;

              }
              else
              {
                objc_storeStrong((id *)v89 + 6, v6);
              }
              dnssd_getaddrinfo_activate();
              if ((*((_BYTE *)v89 + 346) & 0x20) != 0)
                goto LABEL_178;
              if (*((_BYTE *)v89 + 256))
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v95 = (id)gconnectionLogObj;
                if (!os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
                  goto LABEL_177;
                logging_description = nw_endpoint_get_logging_description(*((void **)v3 + 3));
                v97 = *((_DWORD *)v3 + 20);
                v98 = *((_QWORD *)v89 + 6);
                *(_DWORD *)buf = 136447491;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v89 + 256;
                *(_WORD *)&buf[22] = 2082;
                *(_QWORD *)&buf[24] = logging_description;
                *(_WORD *)&buf[32] = 1024;
                *(_DWORD *)&buf[34] = v153;
                *(_WORD *)&buf[38] = 1024;
                *(_DWORD *)&buf[40] = v97;
                *(_WORD *)&buf[44] = 2117;
                *(_QWORD *)&buf[46] = v98;
                v99 = "%{public}s [C%{public}s] Starting host resolution %{public}s, flags %#x proto %u using %{sensitive}@";
                v100 = v95;
                v101 = 54;
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v95 = (id)gLogObj;
                if (!os_log_type_enabled(v95, OS_LOG_TYPE_INFO))
                {
LABEL_177:

LABEL_178:
                  objc_destroyWeak(&v137);

                  objc_destroyWeak((id *)&location);
LABEL_179:

                  v106 = v136;
                  goto LABEL_180;
                }
                v102 = *((_DWORD *)v89 + 85);
                v103 = nw_endpoint_get_logging_description(*((void **)v3 + 3));
                v104 = *((_DWORD *)v3 + 20);
                v105 = *((_QWORD *)v89 + 6);
                *(_DWORD *)buf = 136447491;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v102;
                *(_WORD *)&buf[18] = 2082;
                *(_QWORD *)&buf[20] = v103;
                *(_WORD *)&buf[28] = 1024;
                *(_DWORD *)&buf[30] = v153;
                *(_WORD *)&buf[34] = 1024;
                *(_DWORD *)&buf[36] = v104;
                *(_WORD *)&buf[40] = 2117;
                *(_QWORD *)&buf[42] = v105;
                v99 = "%{public}s [R%u] Starting host resolution %{public}s, flags %#x proto %u using %{sensitive}@";
                v100 = v95;
                v101 = 50;
              }
              _os_log_impl(&dword_182FBE000, v100, OS_LOG_TYPE_INFO, v99, buf, v101);
              goto LABEL_177;
            }
            if (v63)
            {
LABEL_239:
              if (nw_parameters_has_delegated_proc_audit_token(*((void **)v3 + 2), v155)
                && nw_parameters_get_effective_audit_token(*((void **)v3 + 2), &v147))
              {
                if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
                {
LABEL_157:
                  v145 = v147;
                  v146 = v148;
                  dnssd_getaddrinfo_set_delegate_audit_token();
                  goto LABEL_158;
                }
                if (*((_BYTE *)v3 + 256))
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v64 = (id)gconnectionLogObj;
                  if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                    goto LABEL_156;
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v3 + 256;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = DWORD1(v148);
                  v65 = "%{public}s [C%{public}s] Delegating DNS service to audit_token_t PID %d";
                  v66 = v64;
                  v67 = 28;
                }
                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v64 = (id)gLogObj;
                  if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
                  {
LABEL_156:

                    goto LABEL_157;
                  }
                  v82 = *((_DWORD *)v3 + 85);
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v82;
                  *(_WORD *)&buf[18] = 1024;
                  *(_DWORD *)&buf[20] = DWORD1(v148);
                  v65 = "%{public}s [R%u] Delegating DNS service to audit_token_t PID %d";
                  v66 = v64;
                  v67 = 24;
                }
                _os_log_impl(&dword_182FBE000, v66, OS_LOG_TYPE_DEBUG, v65, buf, v67);
                goto LABEL_156;
              }
            }
            has_delegated_proc_pid = nw_parameters_has_delegated_proc_pid(*((void **)v3 + 2), v62);
            v69 = (void *)*((_QWORD *)v3 + 2);
            if (has_delegated_proc_pid)
            {
              pid = nw_parameters_get_pid(v69);
              if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
              {
LABEL_143:
                dnssd_getaddrinfo_set_delegate_pid();
                goto LABEL_158;
              }
              if (*((_BYTE *)v3 + 256))
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v71 = (id)gconnectionLogObj;
                if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
                  goto LABEL_142;
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v3 + 256;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = pid;
                v72 = "%{public}s [C%{public}s] Delegating DNS service to PID %d";
                v73 = v71;
                v74 = 28;
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v71 = (id)gLogObj;
                if (!os_log_type_enabled(v71, OS_LOG_TYPE_DEBUG))
                {
LABEL_142:

                  goto LABEL_143;
                }
                v79 = *((_DWORD *)v3 + 85);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v79;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = pid;
                v72 = "%{public}s [R%u] Delegating DNS service to PID %d";
                v73 = v71;
                v74 = 24;
              }
              _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_DEBUG, v72, buf, v74);
              goto LABEL_142;
            }
            if (!nw_parameters_has_delegated_proc_uuid(v69))
              goto LABEL_158;
            location = 0uLL;
            nw_parameters_get_e_proc_uuid(*((void **)v3 + 2), &location);
            if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
            {
LABEL_148:
              dnssd_getaddrinfo_set_delegate_uuid();
              goto LABEL_158;
            }
            if (*((_BYTE *)v3 + 256))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v75 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
                goto LABEL_147;
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = (char *)v3 + 256;
              *(_WORD *)&buf[22] = 1042;
              *(_DWORD *)&buf[24] = 16;
              *(_WORD *)&buf[28] = 2098;
              *(_QWORD *)&buf[30] = &location;
              v76 = "%{public}s [C%{public}s] Delegating DNS service to eUUID %{public,uuid_t}.16P";
              v77 = v75;
              v78 = 38;
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v75 = (id)gLogObj;
              if (!os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
              {
LABEL_147:

                goto LABEL_148;
              }
              v80 = *((_DWORD *)v3 + 85);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v80;
              *(_WORD *)&buf[18] = 1042;
              *(_DWORD *)&buf[20] = 16;
              *(_WORD *)&buf[24] = 2098;
              *(_QWORD *)&buf[26] = &location;
              v76 = "%{public}s [R%u] Delegating DNS service to eUUID %{public,uuid_t}.16P";
              v77 = v75;
              v78 = 34;
            }
            _os_log_impl(&dword_182FBE000, v77, OS_LOG_TYPE_DEBUG, v76, buf, v78);
            goto LABEL_147;
          }
          v52 = nw_context_copy_fallback_resolver_config(*((void **)v3 + 4));
          v53 = v52;
          if (v52)
          {
            v54 = nw_resolver_config_copy_dictionary(v52);
            if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
              goto LABEL_111;
          }
          else
          {
            v54 = 0;
            if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
            {
LABEL_111:
              dnssd_getaddrinfo_set_need_encrypted_query();

              goto LABEL_112;
            }
          }
          if (*((_BYTE *)v3 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v55 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
              goto LABEL_110;
            v56 = "";
            *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
            *(_DWORD *)buf = 136446722;
            if (!v54)
              v56 = "out";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = (char *)v3 + 256;
            *(_WORD *)&buf[22] = 2080;
            *(_QWORD *)&buf[24] = v56;
            v57 = "%{public}s [C%{public}s] Requiring encrypted resolution with%s fallback config";
            v58 = v55;
            v59 = 32;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v55 = (id)gLogObj;
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
            {
LABEL_110:

              goto LABEL_111;
            }
            v60 = *((_DWORD *)v3 + 85);
            v61 = "";
            *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
            *(_DWORD *)buf = 136446722;
            if (!v54)
              v61 = "out";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v60;
            *(_WORD *)&buf[18] = 2080;
            *(_QWORD *)&buf[20] = v61;
            v57 = "%{public}s [R%u] Requiring encrypted resolution with%s fallback config";
            v58 = v55;
            v59 = 28;
          }
          _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, v57, buf, v59);
          goto LABEL_110;
        }
        if (*((_BYTE *)v3 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v47 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            goto LABEL_152;
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = (char *)v3 + 256;
          *(_WORD *)&buf[22] = 1042;
          *(_DWORD *)&buf[24] = 16;
          *(_WORD *)&buf[28] = 2098;
          *(_QWORD *)&buf[30] = (char *)v3 + 232;
          v48 = "%{public}s [C%{public}s] Requesting failover from UUID %{public,uuid_t}.16P";
          v49 = v47;
          v50 = 38;
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v47 = (id)gLogObj;
          if (!os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
          {
LABEL_152:

            goto LABEL_93;
          }
          v81 = *((_DWORD *)v3 + 85);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v81;
          *(_WORD *)&buf[18] = 1042;
          *(_DWORD *)&buf[20] = 16;
          *(_WORD *)&buf[24] = 2098;
          *(_QWORD *)&buf[26] = (char *)v3 + 232;
          v48 = "%{public}s [R%u] Requesting failover from UUID %{public,uuid_t}.16P";
          v49 = v47;
          v50 = 34;
        }
        _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, v48, buf, v50);
        goto LABEL_152;
      }
      v33 = 0;
      url_scheme = v39->s_name;
LABEL_57:

      if (url_scheme)
      {
        if (!strcmp(url_scheme, "https") || !strcmp(url_scheme, "http") || port == 80 || port == 443)
        {
          port = 443;
          url_scheme = "https";
        }
        v40 = _os_feature_enabled_impl();
        if (port == 443)
          v41 = 1;
        else
          v41 = v40;
        if (v41 == 1)
        {
          v167 = 0u;
          v168 = 0u;
          v165 = 0u;
          v166 = 0u;
          v163 = 0u;
          v164 = 0u;
          v161 = 0u;
          v162 = 0u;
          v159 = 0u;
          v160 = 0u;
          v157 = 0u;
          v158 = 0u;
          memset(buf, 0, sizeof(buf));
          snprintf((char *)buf, 0x100uLL, "_%u._%s", port, url_scheme);
          dnssd_getaddrinfo_set_service_scheme();
          *((_BYTE *)v3 + 347) |= 2u;
        }
      }
      goto LABEL_73;
    }
    __nwlog_obj();
    v112 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
    v113 = (char *)_os_log_send_and_compose_impl();

    v155[0] = 16;
    LOBYTE(v147) = 0;
    if (__nwlog_fault(v113, v155, &v147))
    {
      if (v155[0] == 17)
      {
        __nwlog_obj();
        v114 = objc_claimAutoreleasedReturnValue();
        v115 = v155[0];
        if (os_log_type_enabled(v114, (os_log_type_t)v155[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
          _os_log_impl(&dword_182FBE000, v114, v115, "%{public}s called with null gai", buf, 0xCu);
        }
      }
      else
      {
        if ((_BYTE)v147)
        {
          v123 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v124 = objc_claimAutoreleasedReturnValue();
          v125 = v155[0];
          v126 = os_log_type_enabled(v124, (os_log_type_t)v155[0]);
          if (v123)
          {
            if (v126)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v123;
              _os_log_impl(&dword_182FBE000, v124, v125, "%{public}s called with null gai, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v123);
          }
          else
          {
            if (v126)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
              _os_log_impl(&dword_182FBE000, v124, v125, "%{public}s called with null gai, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_229;
        }
        __nwlog_obj();
        v114 = objc_claimAutoreleasedReturnValue();
        v132 = v155[0];
        if (os_log_type_enabled(v114, (os_log_type_t)v155[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
          _os_log_impl(&dword_182FBE000, v114, v132, "%{public}s called with null gai, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_229:
    if (v113)
      free(v113);
    goto LABEL_179;
  }
  __nwlog_obj();
  v108 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
  v109 = (char *)_os_log_send_and_compose_impl();

  v155[0] = 16;
  LOBYTE(v147) = 0;
  if (__nwlog_fault(v109, v155, &v147))
  {
    if (v155[0] == 17)
    {
      __nwlog_obj();
      v110 = objc_claimAutoreleasedReturnValue();
      v111 = v155[0];
      if (os_log_type_enabled(v110, (os_log_type_t)v155[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
        _os_log_impl(&dword_182FBE000, v110, v111, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if ((_BYTE)v147)
    {
      v120 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v110 = objc_claimAutoreleasedReturnValue();
      v121 = v155[0];
      v122 = os_log_type_enabled(v110, (os_log_type_t)v155[0]);
      if (v120)
      {
        if (v122)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v120;
          _os_log_impl(&dword_182FBE000, v110, v121, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v120);
        goto LABEL_223;
      }
      if (v122)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
        _os_log_impl(&dword_182FBE000, v110, v121, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v110 = objc_claimAutoreleasedReturnValue();
      v131 = v155[0];
      if (os_log_type_enabled(v110, (os_log_type_t)v155[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked";
        _os_log_impl(&dword_182FBE000, v110, v131, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_223:
  v106 = v136;
  if (v109)
    free(v109);
  v134 = 0;
LABEL_180:

  return v134;
}

void sub_1833EA494(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,id location)
{
  void *v57;
  void *v58;

  _Unwind_Resume(a1);
}

uint64_t nw_resolver_create_dns_service_locked(NWConcrete_nw_resolver *a1)
{
  NWConcrete_nw_resolver *v1;
  NSObject *v2;
  const char *logging_description;
  int v4;
  DNSServiceErrorType v5;
  char v6;
  const char *v7;
  char v8;
  void *v9;
  NWConcrete_nw_resolver *v10;
  id v11;
  pid_t v12;
  int pid;
  NSObject *v14;
  NSObject *v15;
  const char *v16;
  uint32_t v17;
  int Connection;
  int v19;
  NSObject *v20;
  NSObject *v21;
  const char *v22;
  uint32_t v23;
  int v24;
  NSObject *v25;
  const char *string_for_dns_service_error;
  NSObject *v27;
  const char *v28;
  uint32_t v29;
  int v30;
  const char *v31;
  NSObject *v32;
  NSObject *v33;
  const char *v34;
  uint32_t v35;
  int v36;
  NSObject *v37;
  NSObject *v38;
  const char *v39;
  uint32_t v40;
  int v41;
  dispatch_group_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  _BOOL8 v46;
  NWConcrete_nw_resolver *v47;
  uint64_t scoped_interface_index;
  uint64_t v49;
  uint64_t v50;
  const char *hostname;
  DNSServiceErrorType v52;
  NWConcrete_nw_resolver *v53;
  const char *bonjour_service_domain;
  const char *v55;
  DNSServiceErrorType v56;
  const sockaddr *address;
  const sockaddr *v58;
  int sa_family;
  unsigned int v60;
  unsigned int v61;
  size_t v62;
  unsigned int v63;
  BOOL v64;
  size_t v65;
  uint64_t v66;
  unsigned int v67;
  size_t v68;
  uint64_t v69;
  unsigned int v70;
  size_t v71;
  uint64_t v72;
  unsigned int v73;
  size_t v74;
  uint64_t v75;
  unsigned int v76;
  size_t v77;
  uint64_t v78;
  unsigned int v79;
  size_t v80;
  uint64_t v81;
  unsigned int v82;
  size_t v83;
  uint64_t v84;
  unsigned int v85;
  size_t v86;
  uint64_t v87;
  unsigned int v88;
  size_t v89;
  uint64_t v90;
  unsigned int v91;
  size_t v92;
  uint64_t v93;
  unsigned int v94;
  size_t v95;
  uint64_t v96;
  unsigned int v97;
  size_t v98;
  uint64_t v99;
  unsigned int v100;
  size_t v101;
  uint64_t v102;
  unsigned int v103;
  size_t v104;
  uint64_t v105;
  unsigned int v106;
  size_t v107;
  unsigned int v108;
  DNSServiceFlags v109;
  const char *srv_name;
  DNSServiceErrorType RecordWithAttribute;
  const char *v112;
  DNSServiceErrorType v113;
  id v114;
  void *v115;
  _QWORD *v116;
  BOOL v117;
  id v118;
  void *v119;
  int v120;
  NWConcrete_nw_interface *v121;
  const char *bonjour_service_type;
  const char *v123;
  NSObject *v124;
  NSObject *p_super;
  NSObject *v126;
  nw_browser_t v127;
  void *v128;
  NSObject *v129;
  NSObject *v130;
  NSObject *v131;
  uint64_t v132;
  const char *v133;
  NSObject *v134;
  const char *v135;
  uint32_t v136;
  NSObject *v137;
  NSObject *v138;
  const char *v139;
  uint32_t v140;
  int v141;
  const char *v142;
  uint64_t v143;
  NSObject *v144;
  _BOOL8 v145;
  int v146;
  int v147;
  const char *v148;
  int v149;
  uint64_t v150;
  NSObject *v151;
  const char *v152;
  NSObject *v153;
  uint32_t v154;
  int v155;
  NSObject *v156;
  const sockaddr *v157;
  NSObject *v158;
  const char *v159;
  NSObject *v160;
  uint32_t v161;
  id v162;
  nw_endpoint_type_t type;
  char *v164;
  NSObject *v165;
  os_log_type_t v166;
  nw_endpoint_type_t v167;
  const char *v168;
  void *v169;
  int v170;
  nw_endpoint_type_t v171;
  os_log_type_t v172;
  int v173;
  nw_endpoint_type_t v174;
  const char *backtrace_string;
  char *v176;
  NSObject *v177;
  os_log_type_t v178;
  nw_endpoint_type_t v179;
  char *v180;
  os_log_type_t v181;
  _BOOL4 v182;
  int v183;
  nw_endpoint_type_t v184;
  os_log_type_t v185;
  nw_endpoint_type_t v186;
  os_log_type_t v187;
  nw_endpoint_type_t v188;
  os_log_type_t v189;
  int v190;
  nw_endpoint_type_t v191;
  int v192;
  _BOOL8 v193;
  int v194;
  nw_endpoint_type_t v195;
  NSObject *v196;
  const char *v197;
  const char *v198;
  NSObject *v199;
  uint32_t v200;
  _DNSServiceRef_t *v201;
  _BOOL8 v202;
  const char *v203;
  int v204;
  const char *v205;
  const char *v207;
  int v208;
  int v209;
  const char *v210;
  int v211;
  NSObject *v212;
  const char *v213;
  NSObject *v214;
  uint32_t v215;
  int v216;
  NWConcrete_nw_resolver *context;
  NSObject *bonjour_service;
  const char *v219;
  NSObject *v220;
  const char *v221;
  NWConcrete_nw_interface *v222;
  const DNSServiceAttribute *attr;
  DNSServiceRef *v224;
  _BYTE *v225;
  _QWORD v226[4];
  NWConcrete_nw_resolver *v227;
  _QWORD block[4];
  NSObject *v229;
  uint64_t v230;
  size_t out_signature_length;
  DNSServiceFlags flags;
  id location;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  BOOL v237;
  uint64_t v238;
  uint64_t *v239;
  uint64_t v240;
  int v241;
  _BYTE buf[50];
  int v243;
  _BYTE applier[42];
  _BYTE handler[24];
  void *v246;
  uint64_t *v247;
  uint64_t *v248;
  id v249[4];

  v249[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = a1;
  *((_WORD *)v1 + 44) = 0;
  if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) == (nw_endpoint_type_url|nw_endpoint_type_host))
  {
    if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
    {
      if (*((_BYTE *)v1 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v2 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          logging_description = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          v4 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = (char *)v1 + 256;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = logging_description;
          *(_WORD *)&buf[32] = 1024;
          *(_DWORD *)&buf[34] = v4;
          _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Starting application service resolution %{public}s, proto %u", buf, 0x26u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v2 = (id)gLogObj;
        if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
        {
          v147 = *((_DWORD *)v1 + 85);
          v148 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          v149 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v147;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v148;
          *(_WORD *)&buf[28] = 1024;
          *(_DWORD *)&buf[30] = v149;
          _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_INFO, "%{public}s [R%u] Starting application service resolution %{public}s, proto %u", buf, 0x22u);
        }
      }

    }
LABEL_194:
    v150 = 1;
    goto LABEL_297;
  }
  flags = 0;
  flags = nw_resolver_derive_service_flags(v1, *((void **)v1 + 3), *((void **)v1 + 2));
  out_signature_length = 0;
  attr = 0;
  if (nw_endpoint_get_signature(*((nw_endpoint_t *)v1 + 3), &out_signature_length) && out_signature_length)
  {
    attr = DNSServiceAttributeCreate();
    DNSServiceAttrSetValidationData();
  }
  v5 = -65569;
  v224 = (DNSServiceRef *)((char *)v1 + 72);
  v225 = (char *)v1 + 256;
  v219 = "invalid";
  v221 = "DNSServiceCreateDelegateConnection";
  v6 = 1;
  while (1)
  {
    v8 = v6;
    v9 = (void *)*((_QWORD *)v1 + 2);
    v10 = v1;
    v11 = v9;
    v12 = getpid();
    if (!nw_parameters_has_delegated_proc_pid(v11, v12) && !nw_parameters_has_delegated_proc_uuid(v11))
    {
      Connection = DNSServiceCreateConnection((DNSServiceRef *)v1 + 8);
      goto LABEL_76;
    }
    if (!nw_parameters_has_delegated_proc_pid(v11, v12))
    {
      pid = 0;
      Connection = 0;
      goto LABEL_43;
    }
    pid = nw_parameters_get_pid(v11);
    if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
    {
      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v14 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          goto LABEL_30;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)v1 + 256;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = pid;
        v15 = v14;
        v16 = "%{public}s [C%{public}s] Delegating DNS service to PID %d";
        v17 = 28;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
LABEL_30:

          goto LABEL_31;
        }
        v19 = *((_DWORD *)v1 + 85);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v19;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = pid;
        v15 = v14;
        v16 = "%{public}s [R%u] Delegating DNS service to PID %d";
        v17 = 24;
      }
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, v16, buf, v17);
      goto LABEL_30;
    }
LABEL_31:
    Connection = DNSServiceCreateDelegateConnection();
    if (!Connection)
    {

      goto LABEL_78;
    }
    if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
    {
      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v20 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          goto LABEL_42;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)v1 + 256;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = pid;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = Connection;
        v21 = v20;
        v22 = "%{public}s [C%{public}s] DNSServiceCreateDelegateConnection(..., epid=%u, NULL) failed: %d";
        v23 = 34;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
LABEL_42:

          goto LABEL_43;
        }
        v24 = *((_DWORD *)v1 + 85);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v24;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = pid;
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = Connection;
        v21 = v20;
        v22 = "%{public}s [R%u] DNSServiceCreateDelegateConnection(..., epid=%u, NULL) failed: %d";
        v23 = 30;
      }
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, v22, buf, v23);
      goto LABEL_42;
    }
LABEL_43:
    if (nw_parameters_has_delegated_proc_uuid(v11))
    {
      if (!Connection || (*((_BYTE *)v1 + 346) & 0x20) != 0)
      {
LABEL_55:
        *(_QWORD *)handler = 0;
        *(_QWORD *)&handler[8] = 0;
        nw_parameters_get_e_proc_uuid(v11, handler);
        if ((*((_BYTE *)v1 + 346) & 0x20) != 0)
        {
LABEL_65:
          Connection = DNSServiceCreateDelegateConnection();
          if (!Connection || (*((_BYTE *)v1 + 346) & 0x20) != 0)
            goto LABEL_76;
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v37 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
              goto LABEL_75;
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = (char *)v1 + 256;
            *(_WORD *)&buf[22] = 1042;
            *(_DWORD *)&buf[24] = 16;
            *(_WORD *)&buf[28] = 2098;
            *(_QWORD *)&buf[30] = handler;
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = Connection;
            v38 = v37;
            v39 = "%{public}s [C%{public}s] DNSServiceCreateDelegateConnection(..., 0, %{public,uuid_t}.16P) failed: %d";
            v40 = 44;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v37 = (id)gLogObj;
            if (!os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
            {
LABEL_75:

              goto LABEL_76;
            }
            v41 = *((_DWORD *)v1 + 85);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v41;
            *(_WORD *)&buf[18] = 1042;
            *(_DWORD *)&buf[20] = 16;
            *(_WORD *)&buf[24] = 2098;
            *(_QWORD *)&buf[26] = handler;
            *(_WORD *)&buf[34] = 1024;
            *(_DWORD *)&buf[36] = Connection;
            v38 = v37;
            v39 = "%{public}s [R%u] DNSServiceCreateDelegateConnection(..., 0, %{public,uuid_t}.16P) failed: %d";
            v40 = 40;
          }
          _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_ERROR, v39, buf, v40);
          goto LABEL_75;
        }
        if (*v225)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v32 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
            goto LABEL_64;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = (char *)v1 + 256;
          v33 = v32;
          v34 = "%{public}s [C%{public}s] Delegating DNS service to eUUID";
          v35 = 22;
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v32 = (id)gLogObj;
          if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
LABEL_64:

            goto LABEL_65;
          }
          v36 = *((_DWORD *)v1 + 85);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v36;
          v33 = v32;
          v34 = "%{public}s [R%u] Delegating DNS service to eUUID";
          v35 = 18;
        }
        _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, v34, buf, v35);
        goto LABEL_64;
      }
      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v25 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
          goto LABEL_54;
        string_for_dns_service_error = nwlog_get_string_for_dns_service_error(Connection);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)v1 + 256;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = pid;
        *(_WORD *)&buf[28] = 2082;
        *(_QWORD *)&buf[30] = string_for_dns_service_error;
        *(_WORD *)&buf[38] = 1024;
        *(_DWORD *)&buf[40] = Connection;
        v27 = v25;
        v28 = "%{public}s [C%{public}s] Delegating DNS service to PID %d returned failure %{public}s(%d), falling back to eUUID";
        v29 = 44;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
        {
LABEL_54:

          goto LABEL_55;
        }
        v30 = *((_DWORD *)v1 + 85);
        v31 = nwlog_get_string_for_dns_service_error(Connection);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_resolver_instantiate_dns_connection_for_parameters";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v30;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = pid;
        *(_WORD *)&buf[24] = 2082;
        *(_QWORD *)&buf[26] = v31;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = Connection;
        v27 = v25;
        v28 = "%{public}s [R%u] Delegating DNS service to PID %d returned failure %{public}s(%d), falling back to eUUID";
        v29 = 40;
      }
      _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, v28, buf, v29);
      goto LABEL_54;
    }
LABEL_76:

    if (Connection == -65569)
      goto LABEL_15;
    if (Connection)
    {
      v5 = Connection;
      goto LABEL_278;
    }
LABEL_78:
    v42 = dispatch_group_create();
    v43 = (void *)*((_QWORD *)v1 + 5);
    *((_QWORD *)v1 + 5) = v42;

    dispatch_group_enter(*((dispatch_group_t *)v1 + 5));
    v44 = *((_QWORD *)v1 + 8);
    v45 = *((_QWORD *)v1 + 5);
    v46 = nw_context_copy_workloop(*((void **)v1 + 4));
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZL37nw_resolver_create_dns_service_lockedP22NWConcrete_nw_resolver_block_invoke;
    block[3] = &unk_1E14AA348;
    v230 = v44;
    v47 = v10;
    v229 = v47;
    dispatch_group_notify(v45, (dispatch_queue_t)v46, block);

    *v224 = (DNSServiceRef)*((_QWORD *)v1 + 8);
    scoped_interface_index = nw_resolver_get_scoped_interface_index(v47, &flags);
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) == nw_endpoint_type_host)
    {
      *((_QWORD *)v1 + 9) = *((_QWORD *)v1 + 8);
      v49 = flags;
      v50 = *((unsigned int *)v1 + 20);
      hostname = nw_endpoint_get_hostname(*((nw_endpoint_t *)v1 + 3));
      v52 = MEMORY[0x186DB2ED0](v224, v49, scoped_interface_index, v50, hostname, attr, nw_resolver_host_resolve_callback, v47, context);
      if (v52 != -65569)
      {
        v5 = v52;
        v219 = "host";
        v221 = "DNSServiceGetAddrInfo";
        goto LABEL_277;
      }
      nw_resolver_cancel_query_locked(v47, 0);
      v219 = "host";
      v7 = "DNSServiceGetAddrInfo";
      goto LABEL_14;
    }
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) == nw_endpoint_type_bonjour_service)
    {
      v53 = v47;
      if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) != nw_endpoint_type_bonjour_service
        || (nw_parameters_get_use_awdl(*((void **)v1 + 2)) & 1) == 0
        || (bonjour_service_domain = nw_endpoint_get_bonjour_service_domain(*((nw_endpoint_t *)v1 + 3)),
            (v55 = bonjour_service_domain) != 0)
        && strcasecmp(bonjour_service_domain, "local")
        && strcasecmp(v55, "local."))
      {

        goto LABEL_88;
      }
      v114 = *((id *)v1 + 2);
      v115 = v114;
      if (!v114 || (v116 = v114, v117 = (v116[12] & 0x10000000000) == 0, v116, v117))
      {

        goto LABEL_88;
      }
      v238 = 0;
      v239 = &v238;
      v241 = 1;
      v240 = 0x2020000000;
      v118 = nw_parameters_copy_preferred_interface_subtypes(*((void **)v1 + 2));
      v119 = v118;
      if (v118)
      {
        *(_QWORD *)applier = MEMORY[0x1E0C809B0];
        *(_QWORD *)&applier[8] = 3221225472;
        *(_QWORD *)&applier[16] = ___ZL38nw_resolver_get_awdl_trigger_heuristicP22NWConcrete_nw_resolver_block_invoke;
        *(_QWORD *)&applier[24] = &unk_1E14A0900;
        *(_QWORD *)&applier[32] = &v238;
        xpc_array_apply(v118, applier);
      }
      v120 = *((_DWORD *)v239 + 6);

      _Block_object_dispose(&v238, 8);
      if (!v120 || *((_QWORD *)v1 + 15) || (v121 = nw_interface_create_with_name("awdl0")) == 0)
      {
LABEL_88:

        goto LABEL_89;
      }
      v222 = v121;
      bonjour_service_type = nw_endpoint_get_bonjour_service_type(*((nw_endpoint_t *)v1 + 3));
      v123 = nw_endpoint_get_bonjour_service_domain(*((nw_endpoint_t *)v1 + 3));
      bonjour_service = nw_browse_descriptor_create_bonjour_service(bonjour_service_type, v123);
      v124 = nw_parameters_copy(*((nw_parameters_t *)v1 + 2));
      p_super = &v121->super;
      v126 = v124;
      v220 = v124;
      nw_parameters_require_interface(v124, p_super);
      v127 = nw_browser_create(bonjour_service, v126);
      v128 = (void *)*((_QWORD *)v1 + 15);
      *((_QWORD *)v1 + 15) = v127;

      if (*((_QWORD *)v1 + 15))
      {
        v238 = 0;
        v239 = &v238;
        v240 = 0x2020000000;
        LOBYTE(v241) = 0;
        v234 = 0;
        v235 = &v234;
        v236 = 0x2020000000;
        v237 = v120 == 2;
        objc_initWeak(&location, v53);
        v129 = *((_QWORD *)v1 + 15);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E149B060;
        *(_QWORD *)&buf[32] = &v238;
        objc_copyWeak((id *)&buf[48], &location);
        *(_QWORD *)&buf[40] = &v234;
        nw_browser_set_state_changed_handler(v129, buf);
        v130 = *((_QWORD *)v1 + 15);
        *(_QWORD *)handler = MEMORY[0x1E0C809B0];
        *(_QWORD *)&handler[8] = 3221225472;
        *(_QWORD *)&handler[16] = ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_245;
        v246 = &unk_1E149B088;
        v247 = &v238;
        objc_copyWeak(v249, &location);
        v248 = &v234;
        nw_browser_set_browse_results_changed_handler(v130, handler);
        if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
        {
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v131 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
            {
              v132 = *((_QWORD *)v1 + 15);
              v133 = "?";
              if (v120 == 1)
                v133 = "parallel";
              *(_DWORD *)applier = 136446978;
              if (v120 == 2)
                v133 = "blocking";
              *(_QWORD *)&applier[4] = "nw_resolver_should_wait_for_awdl_trigger";
              *(_WORD *)&applier[12] = 2082;
              *(_QWORD *)&applier[14] = (char *)v1 + 256;
              *(_WORD *)&applier[22] = 2082;
              *(_QWORD *)&applier[24] = v133;
              *(_WORD *)&applier[32] = 2112;
              *(_QWORD *)&applier[34] = v132;
              v134 = v131;
              v135 = "%{public}s [C%{public}s] Starting %{public}s AWDL trigger browser %@";
              v136 = 42;
              goto LABEL_182;
            }
          }
          else
          {
            __nwlog_obj();
            v131 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v131, OS_LOG_TYPE_INFO))
            {
              v141 = *((_DWORD *)v1 + 85);
              v142 = "?";
              if (v120 == 1)
                v142 = "parallel";
              v143 = *((_QWORD *)v1 + 15);
              if (v120 == 2)
                v142 = "blocking";
              *(_DWORD *)applier = 136446978;
              *(_QWORD *)&applier[4] = "nw_resolver_should_wait_for_awdl_trigger";
              *(_WORD *)&applier[12] = 1024;
              *(_DWORD *)&applier[14] = v141;
              *(_WORD *)&applier[18] = 2082;
              *(_QWORD *)&applier[20] = v142;
              *(_WORD *)&applier[28] = 2112;
              *(_QWORD *)&applier[30] = v143;
              v134 = v131;
              v135 = "%{public}s [R%u] Starting %{public}s AWDL trigger browser %@";
              v136 = 38;
LABEL_182:
              _os_log_impl(&dword_182FBE000, v134, OS_LOG_TYPE_INFO, v135, applier, v136);
            }
          }

        }
        v144 = *((_QWORD *)v1 + 15);
        v145 = nw_context_copy_workloop(*((void **)v1 + 4));
        nw_browser_set_queue(v144, (dispatch_queue_t)v145);

        nw_browser_start(*((nw_browser_t *)v1 + 15));
        LOBYTE(v144) = *((_BYTE *)v235 + 24) == 0;
        objc_destroyWeak(v249);
        objc_destroyWeak((id *)&buf[48]);
        objc_destroyWeak(&location);
        _Block_object_dispose(&v234, 8);
        _Block_object_dispose(&v238, 8);

        if ((v144 & 1) == 0)
        {
          if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
          {
            if (*v225)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v212 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v212, OS_LOG_TYPE_INFO))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = (char *)v1 + 256;
                v213 = "%{public}s [C%{public}s] Blocking resolve on AWDL trigger browser";
                v214 = v212;
                v215 = 22;
                goto LABEL_314;
              }
            }
            else
            {
              __nwlog_obj();
              v212 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v212, OS_LOG_TYPE_INFO))
              {
                v216 = *((_DWORD *)v1 + 85);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v216;
                v213 = "%{public}s [R%u] Blocking resolve on AWDL trigger browser";
                v214 = v212;
                v215 = 18;
LABEL_314:
                _os_log_impl(&dword_182FBE000, v214, OS_LOG_TYPE_INFO, v213, buf, v215);
              }
            }

          }
LABEL_233:
          v150 = 1;
          goto LABEL_208;
        }
LABEL_89:
        nw_endpoint_get_bonjour_service_name(*((nw_endpoint_t *)v1 + 3));
        nw_endpoint_get_bonjour_service_type(*((nw_endpoint_t *)v1 + 3));
        nw_endpoint_get_bonjour_service_domain(*((nw_endpoint_t *)v1 + 3));
        context = v53;
        v56 = DNSServiceResolveEx();
        if (v56 != -65569)
        {
          v5 = v56;
          v219 = "bonjour";
          v221 = "DNSServiceResolve";
          goto LABEL_277;
        }
        nw_resolver_cancel_query_locked(v53, 0);
        v219 = "bonjour";
        v7 = "DNSServiceResolve";
        goto LABEL_14;
      }
      if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
      {
        if (*v225)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v137 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_resolver_should_wait_for_awdl_trigger";
            *(_WORD *)&applier[12] = 2082;
            *(_QWORD *)&applier[14] = (char *)v1 + 256;
            v138 = v137;
            v139 = "%{public}s [C%{public}s] Failed to create AWDL trigger browser";
            v140 = 22;
            goto LABEL_188;
          }
        }
        else
        {
          __nwlog_obj();
          v137 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
          {
            v146 = *((_DWORD *)v1 + 85);
            *(_DWORD *)applier = 136446466;
            *(_QWORD *)&applier[4] = "nw_resolver_should_wait_for_awdl_trigger";
            *(_WORD *)&applier[12] = 1024;
            *(_DWORD *)&applier[14] = v146;
            v138 = v137;
            v139 = "%{public}s [R%u] Failed to create AWDL trigger browser";
            v140 = 18;
LABEL_188:
            _os_log_impl(&dword_182FBE000, v138, OS_LOG_TYPE_ERROR, v139, applier, v140);
          }
        }

      }
      goto LABEL_89;
    }
    if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) != nw_endpoint_type_address)
    {
      if (nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3)) != (nw_endpoint_type_url|nw_endpoint_type_address))
      {
        if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
        {
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v162 = (id)gconnectionLogObj;
            type = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = (char *)v1 + 256;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = type;
            v164 = (char *)_os_log_send_and_compose_impl();

            handler[0] = 16;
            applier[0] = 0;
            if (__nwlog_fault(v164, handler, applier))
            {
              if (handler[0] == 17)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v165 = (id)gconnectionLogObj;
                v166 = handler[0];
                if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
                {
                  v167 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v1 + 256;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v167;
                  _os_log_impl(&dword_182FBE000, v165, v166, "%{public}s [C%{public}s] unknown resolver mode of operation for type %d", buf, 0x1Cu);
                }
                goto LABEL_273;
              }
              if (applier[0])
              {
                backtrace_string = __nw_create_backtrace_string();
                if (backtrace_string)
                {
                  v176 = (char *)backtrace_string;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v177 = (id)gconnectionLogObj;
                  v178 = handler[0];
                  if (os_log_type_enabled(v177, (os_log_type_t)handler[0]))
                  {
                    v179 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                    *(_DWORD *)buf = 136446978;
                    *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = (char *)v1 + 256;
                    *(_WORD *)&buf[22] = 1024;
                    *(_DWORD *)&buf[24] = v179;
                    *(_WORD *)&buf[28] = 2082;
                    *(_QWORD *)&buf[30] = v176;
                    _os_log_impl(&dword_182FBE000, v177, v178, "%{public}s [C%{public}s] unknown resolver mode of operation for type %d, dumping backtrace:%{public}s", buf, 0x26u);
                  }

                  free(v176);
                  goto LABEL_274;
                }
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v165 = (id)gconnectionLogObj;
                v187 = handler[0];
                if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
                {
                  v188 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v1 + 256;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v188;
                  _os_log_impl(&dword_182FBE000, v165, v187, "%{public}s [C%{public}s] unknown resolver mode of operation for type %d, no backtrace", buf, 0x1Cu);
                }
              }
              else
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v165 = (id)gconnectionLogObj;
                v185 = handler[0];
                if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
                {
                  v186 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = (char *)v1 + 256;
                  *(_WORD *)&buf[22] = 1024;
                  *(_DWORD *)&buf[24] = v186;
                  _os_log_impl(&dword_182FBE000, v165, v185, "%{public}s [C%{public}s] unknown resolver mode of operation for type %d, backtrace limit exceeded", buf, 0x1Cu);
                }
              }
LABEL_273:

            }
          }
          else
          {
            __nwlog_obj();
            v169 = (void *)objc_claimAutoreleasedReturnValue();
            v170 = *((_DWORD *)v1 + 85);
            v171 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v170;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v171;
            v164 = (char *)_os_log_send_and_compose_impl();

            handler[0] = 16;
            applier[0] = 0;
            if (!__nwlog_fault(v164, handler, applier))
              goto LABEL_274;
            if (handler[0] == 17)
            {
              __nwlog_obj();
              v165 = objc_claimAutoreleasedReturnValue();
              v172 = handler[0];
              if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
              {
                v173 = *((_DWORD *)v1 + 85);
                v174 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v173;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v174;
                _os_log_impl(&dword_182FBE000, v165, v172, "%{public}s [R%u] unknown resolver mode of operation for type %d", buf, 0x18u);
              }
              goto LABEL_273;
            }
            if (!applier[0])
            {
              __nwlog_obj();
              v165 = objc_claimAutoreleasedReturnValue();
              v189 = handler[0];
              if (os_log_type_enabled(v165, (os_log_type_t)handler[0]))
              {
                v190 = *((_DWORD *)v1 + 85);
                v191 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v190;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v191;
                _os_log_impl(&dword_182FBE000, v165, v189, "%{public}s [R%u] unknown resolver mode of operation for type %d, backtrace limit exceeded", buf, 0x18u);
              }
              goto LABEL_273;
            }
            v180 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v165 = objc_claimAutoreleasedReturnValue();
            v181 = handler[0];
            v182 = os_log_type_enabled(v165, (os_log_type_t)handler[0]);
            if (!v180)
            {
              if (v182)
              {
                v194 = *((_DWORD *)v1 + 85);
                v195 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v194;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v195;
                _os_log_impl(&dword_182FBE000, v165, v181, "%{public}s [R%u] unknown resolver mode of operation for type %d, no backtrace", buf, 0x18u);
              }
              goto LABEL_273;
            }
            if (v182)
            {
              v183 = *((_DWORD *)v1 + 85);
              v184 = nw_endpoint_get_type(*((nw_endpoint_t *)v1 + 3));
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v183;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v184;
              *(_WORD *)&buf[24] = 2082;
              *(_QWORD *)&buf[26] = v180;
              _os_log_impl(&dword_182FBE000, v165, v181, "%{public}s [R%u] unknown resolver mode of operation for type %d, dumping backtrace:%{public}s", buf, 0x22u);
            }

            free(v180);
          }
LABEL_274:
          if (v164)
            free(v164);
        }
        v5 = 0;
        goto LABEL_277;
      }
      v109 = flags;
      srv_name = (const char *)nw_endpoint_get_srv_name(*((void **)v1 + 3));
      RecordWithAttribute = DNSServiceQueryRecordWithAttribute(v224, v109, scoped_interface_index, srv_name, 0x21u, 1u, attr, (DNSServiceQueryRecordReply)nw_resolver_srv_resolve_callback, v47);
      if (RecordWithAttribute != -65569)
      {
        v5 = RecordWithAttribute;
        v219 = "SRV";
        v221 = "DNSServiceQueryRecord";
        goto LABEL_277;
      }
      nw_resolver_cancel_query_locked(v47, 0);
      v112 = "SRV";
      goto LABEL_13;
    }
    if (!nw_parameters_get_resolve_ptr(*((void **)v1 + 2)))
      break;
    address = nw_endpoint_get_address(*((nw_endpoint_t *)v1 + 3));
    v58 = address;
    sa_family = address->sa_family;
    if (sa_family == 2)
    {
      if (snprintf(buf, 0x100uLL, "%u.%u.%u.%u.in-addr.arpa.", HIBYTE(*(_DWORD *)&address->sa_data[2]), BYTE2(*(_DWORD *)&address->sa_data[2]), BYTE1(*(_DWORD *)&address->sa_data[2]), *(_DWORD *)&address->sa_data[2]) >= 0x100)goto LABEL_195;
    }
    else
    {
      if (sa_family != 30)
        goto LABEL_195;
      v60 = snprintf(buf, 0x100uLL, "%x.%x.", address[1].sa_data[5] & 0xF, address[1].sa_data[5] >> 4);
      if (v60 >= 0x100)
        goto LABEL_195;
      v61 = v60;
      v62 = 256 - v60;
      v63 = snprintf(&buf[v60], v62, "%x.%x.", v58[1].sa_data[4] & 0xF, v58[1].sa_data[4] >> 4);
      if ((v63 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v62 > v63;
      v65 = v62 - v63;
      if (!v64)
        goto LABEL_195;
      v66 = v63 + v61;
      v67 = snprintf(&buf[v66], v65, "%x.%x.", v58[1].sa_data[3] & 0xF, v58[1].sa_data[3] >> 4);
      if ((v67 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v65 > v67;
      v68 = v65 - v67;
      if (!v64)
        goto LABEL_195;
      v69 = v67 + v66;
      v70 = snprintf(&buf[v69], v68, "%x.%x.", v58[1].sa_data[2] & 0xF, v58[1].sa_data[2] >> 4);
      if ((v70 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v68 > v70;
      v71 = v68 - v70;
      if (!v64)
        goto LABEL_195;
      v72 = v70 + v69;
      v73 = snprintf(&buf[v72], v71, "%x.%x.", v58[1].sa_data[1] & 0xF, v58[1].sa_data[1] >> 4);
      if ((v73 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v71 > v73;
      v74 = v71 - v73;
      if (!v64)
        goto LABEL_195;
      v75 = v73 + v72;
      v76 = snprintf(&buf[v75], v74, "%x.%x.", v58[1].sa_data[0] & 0xF, v58[1].sa_data[0] >> 4);
      if ((v76 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v74 > v76;
      v77 = v74 - v76;
      if (!v64)
        goto LABEL_195;
      v78 = v76 + v75;
      v79 = snprintf(&buf[v78], v77, "%x.%x.", v58[1].sa_family & 0xF, v58[1].sa_family >> 4);
      if ((v79 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v77 > v79;
      v80 = v77 - v79;
      if (!v64)
        goto LABEL_195;
      v81 = v79 + v78;
      v82 = snprintf(&buf[v81], v80, "%x.%x.", v58[1].sa_len & 0xF, v58[1].sa_len >> 4);
      if ((v82 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v80 > v82;
      v83 = v80 - v82;
      if (!v64)
        goto LABEL_195;
      v84 = v82 + v81;
      v85 = snprintf(&buf[v84], v83, "%x.%x.", v58->sa_data[13] & 0xF, v58->sa_data[13] >> 4);
      if ((v85 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v83 > v85;
      v86 = v83 - v85;
      if (!v64)
        goto LABEL_195;
      v87 = v85 + v84;
      v88 = snprintf(&buf[v87], v86, "%x.%x.", v58->sa_data[12] & 0xF, v58->sa_data[12] >> 4);
      if ((v88 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v86 > v88;
      v89 = v86 - v88;
      if (!v64)
        goto LABEL_195;
      v90 = v88 + v87;
      v91 = snprintf(&buf[v90], v89, "%x.%x.", v58->sa_data[11] & 0xF, v58->sa_data[11] >> 4);
      if ((v91 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v89 > v91;
      v92 = v89 - v91;
      if (!v64)
        goto LABEL_195;
      v93 = v91 + v90;
      v94 = snprintf(&buf[v93], v92, "%x.%x.", v58->sa_data[10] & 0xF, v58->sa_data[10] >> 4);
      if ((v94 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v92 > v94;
      v95 = v92 - v94;
      if (!v64)
        goto LABEL_195;
      v96 = v94 + v93;
      v97 = snprintf(&buf[v96], v95, "%x.%x.", v58->sa_data[9] & 0xF, v58->sa_data[9] >> 4);
      if ((v97 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v95 > v97;
      v98 = v95 - v97;
      if (!v64)
        goto LABEL_195;
      v99 = v97 + v96;
      v100 = snprintf(&buf[v99], v98, "%x.%x.", v58->sa_data[8] & 0xF, v58->sa_data[8] >> 4);
      if ((v100 & 0x80000000) != 0)
        goto LABEL_195;
      v64 = v98 > v100;
      v101 = v98 - v100;
      if (!v64)
        goto LABEL_195;
      v102 = v100 + v99;
      v103 = snprintf(&buf[v102], v101, "%x.%x.", v58->sa_data[7] & 0xF, v58->sa_data[7] >> 4);
      if ((v103 & 0x80000000) != 0
        || (v64 = v101 > v103, v104 = v101 - v103, !v64)
        || (v105 = v103 + v102,
            v106 = snprintf(&buf[v105], v104, "%x.%x.", v58->sa_data[6] & 0xF, v58->sa_data[6] >> 4),
            (v106 & 0x80000000) != 0)
        || (v64 = v104 > v106, v107 = v104 - v106, !v64)
        || (v108 = snprintf(&buf[v106 + v105], v107, "ip6.arpa."), (v108 & 0x80000000) != 0)
        || v107 <= v108)
      {
LABEL_195:
        if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
        {
          if (*v225)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v151 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)handler = 136446466;
              *(_QWORD *)&handler[4] = "nw_resolver_create_dns_service_locked";
              *(_WORD *)&handler[12] = 2082;
              *(_QWORD *)&handler[14] = (char *)v1 + 256;
              v152 = "%{public}s [C%{public}s] failed to create PTR name";
              v153 = v151;
              v154 = 22;
              goto LABEL_205;
            }
          }
          else
          {
            __nwlog_obj();
            v151 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v151, OS_LOG_TYPE_ERROR))
            {
              v155 = *((_DWORD *)v1 + 85);
              *(_DWORD *)handler = 136446466;
              *(_QWORD *)&handler[4] = "nw_resolver_create_dns_service_locked";
              *(_WORD *)&handler[12] = 1024;
              *(_DWORD *)&handler[14] = v155;
              v152 = "%{public}s [R%u] failed to create PTR name";
              v153 = v151;
              v154 = 18;
LABEL_205:
              _os_log_impl(&dword_182FBE000, v153, OS_LOG_TYPE_ERROR, v152, handler, v154);
            }
          }

        }
        v150 = 0;
LABEL_208:
        v156 = v229;
LABEL_209:

        goto LABEL_297;
      }
    }
    v113 = DNSServiceQueryRecordWithAttribute(v224, flags, scoped_interface_index, buf, 0xCu, 1u, attr, (DNSServiceQueryRecordReply)nw_resolver_ptr_resolve_callback, v47);
    if (v113 != -65569)
    {
      v221 = "DNSServiceQueryRecord";
      v5 = v113;
      v168 = "PTR";
      goto LABEL_235;
    }
    nw_resolver_cancel_query_locked(v47, 0);
    v112 = "PTR";
LABEL_13:
    v219 = v112;
    v7 = "DNSServiceQueryRecord";
LABEL_14:
    v221 = v7;

LABEL_15:
    v6 = 0;
    if ((v8 & 1) == 0)
      goto LABEL_278;
  }
  if ((*((_BYTE *)v1 + 346) & 0x10) != 0
    || nw_endpoint_get_address_family(*((void **)v1 + 3)) != 2
    || (v157 = nw_endpoint_get_address(*((nw_endpoint_t *)v1 + 3)),
        !nw_nat64_can_v4_address_be_synthesized((unsigned int *)&v157->sa_data[2])))
  {
    nw_array_append(*((_QWORD *)v47 + 18), *((void **)v1 + 3));
    *((_DWORD *)v47 + 21) = 0;
    nw_resolver_update_status_locked(v47, 0);
    goto LABEL_233;
  }
  *((_DWORD *)v1 + 20) = 2;
  if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
  {
    if (*v225)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v158 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)v1 + 256;
        v159 = "%{public}s [C%{public}s] Querying NAT64 prefixes";
        v160 = v158;
        v161 = 22;
        goto LABEL_268;
      }
    }
    else
    {
      __nwlog_obj();
      v158 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v158, OS_LOG_TYPE_DEBUG))
      {
        v192 = *((_DWORD *)v1 + 85);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v192;
        v159 = "%{public}s [R%u] Querying NAT64 prefixes";
        v160 = v158;
        v161 = 18;
LABEL_268:
        _os_log_impl(&dword_182FBE000, v160, OS_LOG_TYPE_DEBUG, v159, buf, v161);
      }
    }

  }
  *(_DWORD *)buf = scoped_interface_index;
  dispatch_group_enter(*((dispatch_group_t *)v1 + 5));
  v193 = nw_context_copy_workloop(*((void **)v1 + 4));
  v226[0] = MEMORY[0x1E0C809B0];
  v226[1] = 3221225472;
  v226[2] = ___ZL37nw_resolver_create_dns_service_lockedP22NWConcrete_nw_resolver_block_invoke_238;
  v226[3] = &unk_1E149B038;
  v227 = v47;
  nw_nat64_copy_prefixes_async_override_dns((unsigned int *)buf, (void *)v193, v224, &flags, v226);

  v5 = 0;
  v221 = "nw_nat64_copy_prefixes_async_override_dns";
  v168 = "NAT64";
LABEL_235:
  v219 = v168;
LABEL_277:

LABEL_278:
  if (attr)
    DNSServiceAttributeDeallocate(attr);
  if (!v5)
  {
    v201 = (_DNSServiceRef_t *)*((_QWORD *)v1 + 8);
    v202 = nw_context_copy_workloop(*((void **)v1 + 4));
    v5 = DNSServiceSetDispatchQueue(v201, (dispatch_queue_t)v202);

    if (v5)
    {
      v221 = "DNSServiceSetDispatchQueue";
      goto LABEL_286;
    }
    if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
    {
      if (*v225)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v156 = (id)gconnectionLogObj;
        v150 = 1;
        if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
        {
          v207 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          v208 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = (char *)v1 + 256;
          *(_WORD *)&buf[22] = 2082;
          *(_QWORD *)&buf[24] = v219;
          *(_WORD *)&buf[32] = 2082;
          *(_QWORD *)&buf[34] = v207;
          *(_WORD *)&buf[42] = 1024;
          *(_DWORD *)&buf[44] = flags;
          *(_WORD *)&buf[48] = 1024;
          v243 = v208;
          _os_log_impl(&dword_182FBE000, v156, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Starting %{public}s resolution %{public}s, flags %#x proto %u", buf, 0x36u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v156 = (id)gLogObj;
        v150 = 1;
        if (os_log_type_enabled(v156, OS_LOG_TYPE_INFO))
        {
          v209 = *((_DWORD *)v1 + 85);
          v210 = nw_endpoint_get_logging_description(*((void **)v1 + 3));
          v211 = *((_DWORD *)v1 + 20);
          *(_DWORD *)buf = 136447490;
          *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v209;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v219;
          *(_WORD *)&buf[28] = 2082;
          *(_QWORD *)&buf[30] = v210;
          *(_WORD *)&buf[38] = 1024;
          *(_DWORD *)&buf[40] = flags;
          *(_WORD *)&buf[44] = 1024;
          *(_DWORD *)&buf[46] = v211;
          v150 = 1;
          _os_log_impl(&dword_182FBE000, v156, OS_LOG_TYPE_INFO, "%{public}s [R%u] Starting %{public}s resolution %{public}s, flags %#x proto %u", buf, 0x32u);
        }
      }
      goto LABEL_209;
    }
    goto LABEL_194;
  }
  if (!v10)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v196 = (id)gLogObj;
    if (os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
    {
      v197 = nwlog_get_string_for_dns_service_error(v5);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v221;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v197;
      *(_WORD *)&buf[32] = 1024;
      *(_DWORD *)&buf[34] = v5;
      v198 = "%{public}s %{public}s failed: %{public}s(%d)";
      v199 = v196;
      v200 = 38;
      goto LABEL_294;
    }
LABEL_295:

    goto LABEL_296;
  }
LABEL_286:
  if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
  {
    if (*v225)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v196 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
        goto LABEL_295;
      v203 = nwlog_get_string_for_dns_service_error(v5);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = (char *)v1 + 256;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v221;
      *(_WORD *)&buf[32] = 2082;
      *(_QWORD *)&buf[34] = v203;
      *(_WORD *)&buf[42] = 1024;
      *(_DWORD *)&buf[44] = v5;
      v198 = "%{public}s [C%{public}s] %{public}s failed: %{public}s(%d)";
      v199 = v196;
      v200 = 48;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v196 = (id)gLogObj;
      if (!os_log_type_enabled(v196, OS_LOG_TYPE_ERROR))
        goto LABEL_295;
      v204 = *((_DWORD *)v1 + 85);
      v205 = nwlog_get_string_for_dns_service_error(v5);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v204;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v221;
      *(_WORD *)&buf[28] = 2082;
      *(_QWORD *)&buf[30] = v205;
      *(_WORD *)&buf[38] = 1024;
      *(_DWORD *)&buf[40] = v5;
      v198 = "%{public}s [R%u] %{public}s failed: %{public}s(%d)";
      v199 = v196;
      v200 = 44;
    }
LABEL_294:
    _os_log_impl(&dword_182FBE000, v199, OS_LOG_TYPE_ERROR, v198, buf, v200);
    goto LABEL_295;
  }
LABEL_296:
  *((_DWORD *)v10 + 21) = v5;
  nw_resolver_cancel_query_locked(v10, 0);
  v150 = 0;
LABEL_297:

  return v150;
}

void sub_1833ECBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, id *location, id *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  void *v49;
  void *v50;

  _Unwind_Resume(a1);
}

BOOL __nw_resolver_set_update_handler_block_invoke_79(uint64_t a1)
{
  return nw_resolver_cancel(*(void **)(a1 + 32));
}

void nw_resolver_cancel_delayed_reporting_timer(NWConcrete_nw_resolver *a1)
{
  uint64_t v1;
  NWConcrete_nw_resolver *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  int v9;
  const char *logging_description;
  int v11;
  const char *v12;
  __int16 v13;
  _BYTE v14[18];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3 = *((_QWORD *)v2 + 17);
  if (!v3)
    goto LABEL_13;
  if ((*((_BYTE *)v2 + 346) & 0x20) != 0)
  {
LABEL_12:
    nw_queue_cancel_source(v3, v1);
    *((_QWORD *)v2 + 17) = 0;
    goto LABEL_13;
  }
  if (!*((_BYTE *)v2 + 256))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      goto LABEL_11;
    v9 = *((_DWORD *)v2 + 85);
    logging_description = nw_endpoint_get_logging_description(*((void **)v2 + 3));
    v11 = 136446722;
    v12 = "nw_resolver_cancel_delayed_reporting_timer";
    v13 = 1024;
    *(_DWORD *)v14 = v9;
    *(_WORD *)&v14[4] = 2082;
    *(_QWORD *)&v14[6] = logging_description;
    v6 = "%{public}s [R%u] Cancelling delayed reporting timer for %{public}s";
    v7 = v4;
    v8 = 28;
    goto LABEL_10;
  }
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v4 = (id)gconnectionLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = nw_endpoint_get_logging_description(*((void **)v2 + 3));
    v11 = 136446722;
    v12 = "nw_resolver_cancel_delayed_reporting_timer";
    v13 = 2082;
    *(_QWORD *)v14 = (char *)v2 + 256;
    *(_WORD *)&v14[8] = 2082;
    *(_QWORD *)&v14[10] = v5;
    v6 = "%{public}s [C%{public}s] Cancelling delayed reporting timer for %{public}s";
    v7 = v4;
    v8 = 32;
LABEL_10:
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v11, v8);
  }
LABEL_11:

  v3 = *((_QWORD *)v2 + 17);
  if (v3)
    goto LABEL_12;
LABEL_13:

}

void sub_1833ECF20(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_resolver_cancel_query_locked(NWConcrete_nw_resolver *a1, char a2)
{
  NWConcrete_nw_resolver *v3;
  void *v4;
  NSObject *v5;
  NSObject *v6;
  const char *v7;
  NSObject *v8;
  uint32_t v9;
  int v10;
  void *v11;
  int v12;
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (*((_QWORD *)v3 + 6))
  {
    dnssd_getaddrinfo_invalidate();
    v4 = (void *)*((_QWORD *)v3 + 6);
    *((_QWORD *)v3 + 6) = 0;

  }
  nw_array_apply(*((unsigned __int8 **)v3 + 22), (uint64_t)&__block_literal_global_252);
  if (*((_QWORD *)v3 + 8))
  {
    *((_QWORD *)v3 + 8) = 0;
    *((_QWORD *)v3 + 9) = 0;
    dispatch_group_leave(*((dispatch_group_t *)v3 + 5));
  }
  if ((a2 & 1) == 0)
  {
    v5 = *((_QWORD *)v3 + 15);
    if (v5)
    {
      if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
      {
LABEL_17:
        nw_browser_cancel(v5);
        v11 = (void *)*((_QWORD *)v3 + 15);
        *((_QWORD *)v3 + 15) = 0;

        goto LABEL_18;
      }
      if (*((_BYTE *)v3 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v6 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
          goto LABEL_16;
        v12 = 136446466;
        v13 = "nw_resolver_cancel_query_locked";
        v14 = 2082;
        v15 = (char *)v3 + 256;
        v7 = "%{public}s [C%{public}s] Stopping AWDL trigger browser";
        v8 = v6;
        v9 = 22;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
LABEL_16:

          v5 = *((_QWORD *)v3 + 15);
          goto LABEL_17;
        }
        v10 = *((_DWORD *)v3 + 85);
        v12 = 136446466;
        v13 = "nw_resolver_cancel_query_locked";
        v14 = 1024;
        LODWORD(v15) = v10;
        v7 = "%{public}s [R%u] Stopping AWDL trigger browser";
        v8 = v6;
        v9 = 18;
      }
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v12, v9);
      goto LABEL_16;
    }
  }
LABEL_18:

}

void sub_1833ED128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL31nw_resolver_cancel_query_lockedP22NWConcrete_nw_resolverb_block_invoke(uint64_t a1, uint64_t a2, NWConcrete_nw_resolver_service *a3)
{
  nw_resolver_service_cancel_query(a3);
  return 1;
}

void nw_resolver_service_cancel_query(NWConcrete_nw_resolver_service *a1)
{
  NWConcrete_nw_resolver_service *v1;
  NWConcrete_nw_resolver_service *v2;
  OS_dnssd_getaddrinfo *gai;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (v1->gai)
    {
      dnssd_getaddrinfo_invalidate();
      gai = v2->gai;
      v2->gai = 0;

    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_resolver_service_cancel_query";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v5, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_resolver_service_cancel_query";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null service", buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_resolver_service_cancel_query";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_resolver_service_cancel_query";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_resolver_service_cancel_query";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v5)
    free(v5);
LABEL_4:

}

void sub_1833ED3F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL37nw_resolver_create_dns_service_lockedP22NWConcrete_nw_resolver_block_invoke(uint64_t a1)
{
  DNSServiceRefDeallocate(*(DNSServiceRef *)(a1 + 40));
}

void nw_resolver_host_resolve_callback(_DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, const sockaddr *a6, int a7, void *a8)
{
  void **v14;
  void **v15;
  int sa_family;
  const char *v17;
  const char *v18;
  NSObject *v19;
  const char *string_for_dns_service_error;
  int sa_len;
  int v22;
  const char *v23;
  int v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  int v28;
  int v29;
  NSObject *v30;
  void *v31;
  const char *v32;
  NSObject *v33;
  uint32_t v34;
  int v35;
  void *v36;
  NSObject *v37;
  const char *v38;
  NSObject *v39;
  uint32_t v40;
  size_t v41;
  int v42;
  size_t v43;
  int v44;
  nw_endpoint_t address;
  const void *ValidationData;
  const sockaddr *v47;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  char *backtrace_string;
  os_log_type_t v53;
  _BOOL4 v54;
  os_log_type_t v55;
  int v56;
  _QWORD v58[5];
  unsigned int v59;
  char v60;
  _QWORD v61[5];
  unsigned int v62;
  char v63;
  char v64;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  _BYTE v68[68];
  int v69;
  size_t v70;
  char v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v14 = a8;
  v15 = v14;
  if (v14)
  {
    if (nw_parameters_get_sensitive_redacted(v14[2]))
    {
      v71 = 0;
      v70 = 0;
      if (!a6)
        goto LABEL_16;
      sa_family = a6->sa_family;
      if (sa_family != 30)
      {
        if (sa_family == 2)
        {
          if (*(_DWORD *)&a6->sa_data[2])
          {
            v17 = (const char *)&v70;
            __nwlog_salted_hash(&a6->sa_data[2], 4, (char *)&v70);
            v18 = "IPv4#";
            if ((*((_BYTE *)v15 + 346) & 0x20) != 0)
              goto LABEL_43;
LABEL_27:
            if (*((_BYTE *)v15 + 256))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v19 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
                goto LABEL_42;
              *(_DWORD *)buf = 136448514;
              v66 = "nw_resolver_host_resolve_callback";
              v67 = 2082;
              *(_QWORD *)v68 = v15 + 32;
              *(_WORD *)&v68[8] = 1024;
              *(_DWORD *)&v68[10] = a2;
              *(_WORD *)&v68[14] = 1024;
              *(_DWORD *)&v68[16] = a3;
              *(_WORD *)&v68[20] = 2082;
              *(_QWORD *)&v68[22] = nwlog_get_string_for_dns_service_error(a4);
              *(_WORD *)&v68[30] = 1024;
              *(_DWORD *)&v68[32] = a4;
              *(_WORD *)&v68[36] = 2080;
              *(_QWORD *)&v68[38] = a5;
              *(_WORD *)&v68[46] = 2082;
              *(_QWORD *)&v68[48] = v18;
              *(_WORD *)&v68[56] = 2082;
              *(_QWORD *)&v68[58] = v17;
              *(_WORD *)&v68[66] = 1024;
              v69 = a7;
              v25 = "%{public}s [C%{public}s] flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%s addr=%{public}s%{public}s ttl=%d";
              v26 = v19;
              v27 = 86;
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v19 = (id)gLogObj;
              if (!os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
              {
LABEL_42:

                goto LABEL_43;
              }
              v56 = a7;
              v28 = a2;
              v29 = *((_DWORD *)v15 + 85);
              *(_DWORD *)buf = 136448514;
              v66 = "nw_resolver_host_resolve_callback";
              v67 = 1024;
              *(_DWORD *)v68 = v29;
              a2 = v28;
              *(_WORD *)&v68[4] = 1024;
              *(_DWORD *)&v68[6] = v28;
              *(_WORD *)&v68[10] = 1024;
              *(_DWORD *)&v68[12] = a3;
              *(_WORD *)&v68[16] = 2082;
              *(_QWORD *)&v68[18] = nwlog_get_string_for_dns_service_error(a4);
              *(_WORD *)&v68[26] = 1024;
              *(_DWORD *)&v68[28] = a4;
              *(_WORD *)&v68[32] = 2080;
              *(_QWORD *)&v68[34] = a5;
              *(_WORD *)&v68[42] = 2082;
              *(_QWORD *)&v68[44] = v18;
              *(_WORD *)&v68[52] = 2082;
              *(_QWORD *)&v68[54] = v17;
              *(_WORD *)&v68[62] = 1024;
              *(_DWORD *)&v68[64] = v56;
              v25 = "%{public}s [R%u] flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%s addr=%{public}s%{public}s ttl=%d";
              v26 = v19;
              v27 = 82;
            }
            _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_INFO, v25, buf, v27);
            goto LABEL_42;
          }
          v17 = "INADDR_ANY";
LABEL_17:
          v18 = "";
          if ((*((_BYTE *)v15 + 346) & 0x20) != 0)
            goto LABEL_43;
          goto LABEL_27;
        }
LABEL_16:
        v17 = "<NULL>";
        goto LABEL_17;
      }
      if (!*(_DWORD *)&a6->sa_data[6]
        && !*(_DWORD *)&a6->sa_data[10]
        && !*(_DWORD *)&a6[1].sa_len
        && !*(_DWORD *)&a6[1].sa_data[2])
      {
        v17 = "IN6ADDR_ANY";
        goto LABEL_17;
      }
      v17 = (const char *)&v70;
      __nwlog_salted_hash(&a6->sa_data[6], 16, (char *)&v70);
      v18 = "IPv6#";
      if ((*((_BYTE *)v15 + 346) & 0x20) == 0)
        goto LABEL_27;
    }
    else if ((*((_BYTE *)v15 + 346) & 0x20) == 0)
    {
      if (*((_BYTE *)v15 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v19 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          string_for_dns_service_error = nwlog_get_string_for_dns_service_error(a4);
          if (a6)
            sa_len = a6->sa_len;
          else
            sa_len = 0;
          *(_DWORD *)buf = 136448514;
          v66 = "nw_resolver_host_resolve_callback";
          v67 = 2082;
          *(_QWORD *)v68 = v15 + 32;
          *(_WORD *)&v68[8] = 1024;
          *(_DWORD *)&v68[10] = a2;
          *(_WORD *)&v68[14] = 1024;
          *(_DWORD *)&v68[16] = a3;
          *(_WORD *)&v68[20] = 2082;
          *(_QWORD *)&v68[22] = string_for_dns_service_error;
          *(_WORD *)&v68[30] = 1024;
          *(_DWORD *)&v68[32] = a4;
          *(_WORD *)&v68[36] = 2082;
          *(_QWORD *)&v68[38] = a5;
          *(_WORD *)&v68[46] = 1040;
          *(_DWORD *)&v68[48] = sa_len;
          *(_WORD *)&v68[52] = 2098;
          *(_QWORD *)&v68[54] = a6;
          *(_WORD *)&v68[62] = 1024;
          *(_DWORD *)&v68[64] = a7;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%{public}s addr=%{public,network:sockaddr}.*P ttl=%d", buf, 0x52u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
        {
          v22 = *((_DWORD *)v15 + 85);
          v23 = nwlog_get_string_for_dns_service_error(a4);
          if (a6)
            v24 = a6->sa_len;
          else
            v24 = 0;
          *(_DWORD *)buf = 136448514;
          v66 = "nw_resolver_host_resolve_callback";
          v67 = 1024;
          *(_DWORD *)v68 = v22;
          *(_WORD *)&v68[4] = 1024;
          *(_DWORD *)&v68[6] = a2;
          *(_WORD *)&v68[10] = 1024;
          *(_DWORD *)&v68[12] = a3;
          *(_WORD *)&v68[16] = 2082;
          *(_QWORD *)&v68[18] = v23;
          *(_WORD *)&v68[26] = 1024;
          *(_DWORD *)&v68[28] = a4;
          *(_WORD *)&v68[32] = 2082;
          *(_QWORD *)&v68[34] = a5;
          *(_WORD *)&v68[42] = 1040;
          *(_DWORD *)&v68[44] = v24;
          *(_WORD *)&v68[48] = 2098;
          *(_QWORD *)&v68[50] = a6;
          *(_WORD *)&v68[58] = 1024;
          *(_DWORD *)&v68[60] = a7;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s [R%u] flags=0x%x ifindex=%u error=%{public}s(%d) hostname=%{public}s addr=%{public,network:sockaddr}.*P ttl=%d", buf, 0x4Eu);
        }
      }
      goto LABEL_42;
    }
LABEL_43:
    os_unfair_lock_lock((os_unfair_lock_t)v15 + 3);
    if (!a1 || v15[9] != a1)
    {
      if ((*((_BYTE *)v15 + 346) & 0x20) != 0)
      {
LABEL_55:
        os_unfair_lock_unlock((os_unfair_lock_t)v15 + 3);
        goto LABEL_56;
      }
      if (*((_BYTE *)v15 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v30 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          goto LABEL_54;
        v31 = v15[9];
        *(_DWORD *)buf = 136447234;
        v66 = "nw_resolver_host_resolve_callback";
        v67 = 2082;
        *(_QWORD *)v68 = v15 + 32;
        *(_WORD *)&v68[8] = 2048;
        *(_QWORD *)&v68[10] = a1;
        *(_WORD *)&v68[18] = 2048;
        *(_QWORD *)&v68[20] = v15;
        *(_WORD *)&v68[28] = 2048;
        *(_QWORD *)&v68[30] = v31;
        v32 = "%{public}s [C%{public}s] skipped, service %p, resolver %p -> %p";
        v33 = v30;
        v34 = 52;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v30 = (id)gLogObj;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
LABEL_54:

          goto LABEL_55;
        }
        v35 = *((_DWORD *)v15 + 85);
        v36 = v15[9];
        *(_DWORD *)buf = 136447234;
        v66 = "nw_resolver_host_resolve_callback";
        v67 = 1024;
        *(_DWORD *)v68 = v35;
        *(_WORD *)&v68[4] = 2048;
        *(_QWORD *)&v68[6] = a1;
        *(_WORD *)&v68[14] = 2048;
        *(_QWORD *)&v68[16] = v15;
        *(_WORD *)&v68[24] = 2048;
        *(_QWORD *)&v68[26] = v36;
        v32 = "%{public}s [R%u] skipped, service %p, resolver %p -> %p";
        v33 = v30;
        v34 = 48;
      }
      _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_INFO, v32, buf, v34);
      goto LABEL_54;
    }
    nw_resolver_update_flags_locked((NWConcrete_nw_resolver *)v15, 0, a2, a4, a6, 0, 0);
    if (a4)
    {
      if (a4 == -65569 && *((_DWORD *)v15 + 2) != 2)
      {
        if ((*((_BYTE *)v15 + 346) & 0x20) != 0)
        {
LABEL_79:
          nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v15);
          goto LABEL_55;
        }
        if (*((_BYTE *)v15 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v37 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
            goto LABEL_78;
          *(_DWORD *)buf = 136446722;
          v66 = "nw_resolver_host_resolve_callback";
          v67 = 2082;
          *(_QWORD *)v68 = v15 + 32;
          *(_WORD *)&v68[8] = 2048;
          *(_QWORD *)&v68[10] = v15;
          v38 = "%{public}s [C%{public}s] restarting resolver %p, defunct connection";
          v39 = v37;
          v40 = 32;
        }
        else
        {
          __nwlog_obj();
          v37 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v37, OS_LOG_TYPE_INFO))
          {
LABEL_78:

            goto LABEL_79;
          }
          v44 = *((_DWORD *)v15 + 85);
          *(_DWORD *)buf = 136446722;
          v66 = "nw_resolver_host_resolve_callback";
          v67 = 1024;
          *(_DWORD *)v68 = v44;
          *(_WORD *)&v68[4] = 2048;
          *(_QWORD *)&v68[6] = v15;
          v38 = "%{public}s [R%u] restarting resolver %p, defunct connection";
          v39 = v37;
          v40 = 28;
        }
        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_INFO, v38, buf, v40);
        goto LABEL_78;
      }
    }
    else if (a6)
    {
      v41 = a6->sa_len;
      if (v41 <= 0x80)
      {
        v42 = a6->sa_family;
        if (v42 == 30 || v42 == 2)
        {
          if ((v41 & 0x80u) == 0)
            v43 = 128 - v41;
          else
            v43 = 0;
          bzero(&buf[v41], v43);
          memcpy(buf, a6, v41);
          *(_WORD *)&buf[2] = __rev16(nw_endpoint_get_port((nw_endpoint_t)v15[3]));
          if ((a2 & 2) != 0)
          {
            address = nw_endpoint_create_address((const sockaddr *)buf);
            nw_endpoint_set_parent_endpoint(address, v15[3], 0);
            v70 = 0;
            ValidationData = (const void *)DNSServiceGetValidationData();
            if (ValidationData && v70)
              nw_endpoint_set_signature(address, ValidationData, v70);
            if (!a3
              || (v47 = nw_endpoint_get_address(address), !nw_resolver_should_scope_address(v47))
              || nw_resolver_set_interface_on_endpoint(v15, a3, address))
            {
              v61[0] = MEMORY[0x1E0C809B0];
              v61[1] = 3221225472;
              v61[2] = ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke;
              v61[3] = &__block_descriptor_45_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
              v61[4] = buf;
              v62 = a3;
              v63 = (a2 & 2) >> 1;
              nw_resolver_insert_endpoint_locked(v15, address, v61);
            }

          }
          else
          {
            v58[0] = MEMORY[0x1E0C809B0];
            v58[1] = 3221225472;
            v58[2] = ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke_2;
            v58[3] = &__block_descriptor_45_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
            v58[4] = buf;
            v59 = a3;
            v60 = 0;
            nw_resolver_remove_endpoint_locked(v15, v58);
          }
        }
      }
    }
    if ((a2 & 1) == 0)
      nw_resolver_update_status_locked(v15, 0);
    goto LABEL_55;
  }
  __nwlog_obj();
  v48 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v66 = "nw_resolver_host_resolve_callback";
  v49 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v70) = 16;
  v64 = 0;
  if (__nwlog_fault(v49, &v70, &v64))
  {
    if (v70 == 17)
    {
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v51 = v70;
      if (os_log_type_enabled(v50, (os_log_type_t)v70))
      {
        *(_DWORD *)buf = 136446210;
        v66 = "nw_resolver_host_resolve_callback";
        _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v64)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v53 = v70;
      v54 = os_log_type_enabled(v50, (os_log_type_t)v70);
      if (backtrace_string)
      {
        if (v54)
        {
          *(_DWORD *)buf = 136446466;
          v66 = "nw_resolver_host_resolve_callback";
          v67 = 2082;
          *(_QWORD *)v68 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v50, v53, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_107;
      }
      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        v66 = "nw_resolver_host_resolve_callback";
        _os_log_impl(&dword_182FBE000, v50, v53, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v50 = objc_claimAutoreleasedReturnValue();
      v55 = v70;
      if (os_log_type_enabled(v50, (os_log_type_t)v70))
      {
        *(_DWORD *)buf = 136446210;
        v66 = "nw_resolver_host_resolve_callback";
        _os_log_impl(&dword_182FBE000, v50, v55, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_107:
  if (v49)
    free(v49);
LABEL_56:

}

void sub_1833EE008(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_resolver_get_awdl_trigger_heuristicP22NWConcrete_nw_resolver_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81398] && xpc_uint64_get_value(v4) == 1002)
  {
    v5 = 0;
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 2;
  }
  else
  {
    v5 = 1;
  }

  return v5;
}

void sub_1833EE0AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke(uint64_t a1, int a2, void *a3)
{
  id v5;
  os_unfair_lock_s *WeakRetained;
  os_unfair_lock_s *v7;
  NSObject *v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  uint32_t os_unfair_lock_opaque;
  uint64_t v13;
  void (**v14)(_QWORD);
  _QWORD aBlock[4];
  os_unfair_lock_s *v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  os_unfair_lock_s *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) || a2 != 4 && a2 != 2)
    goto LABEL_2;
  WeakRetained = (os_unfair_lock_s *)objc_loadWeakRetained((id *)(a1 + 48));
  if (!WeakRetained)
    goto LABEL_2;
  v7 = WeakRetained;
  if ((WeakRetained[86]._os_unfair_lock_opaque & 0x200000) == 0)
  {
    if (LOBYTE(WeakRetained[64]._os_unfair_lock_opaque))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
        goto LABEL_15;
      *(_DWORD *)buf = 136446466;
      v18 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      v19 = 2082;
      v20 = v7 + 64;
      v9 = "%{public}s [C%{public}s] AWDL trigger browse did not find service";
      v10 = v8;
      v11 = 22;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
      {
LABEL_15:

        goto LABEL_16;
      }
      os_unfair_lock_opaque = v7[85]._os_unfair_lock_opaque;
      *(_DWORD *)buf = 136446466;
      v18 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      v19 = 1024;
      LODWORD(v20) = os_unfair_lock_opaque;
      v9 = "%{public}s [R%u] AWDL trigger browse did not find service";
      v10 = v8;
      v11 = 18;
    }
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
    goto LABEL_15;
  }
LABEL_16:
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  if (*(_BYTE *)(v13 + 24))
  {
    *(_BYTE *)(v13 + 24) = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_243;
    aBlock[3] = &unk_1E14ACFD0;
    v16 = v7;
    v14 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v7 + 3);
    v14[2](v14);
    os_unfair_lock_unlock(v7 + 3);

  }
LABEL_2:

}

void sub_1833EE30C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_245(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id WeakRetained;
  id v6;
  id *v7;
  NSObject *v8;
  const char *bonjour_service_name;
  const char *v10;
  void (**v11)(_QWORD);
  _QWORD aBlock[4];
  id v13;

  v4 = a3;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
    v6 = WeakRetained;
    if (v4 && WeakRetained)
    {
      v7 = (id *)v4;
      v8 = v7[1];

      if (v8)
      {
        bonjour_service_name = nw_endpoint_get_bonjour_service_name(v8);
        v10 = nw_endpoint_get_bonjour_service_name(*((nw_endpoint_t *)v6 + 3));
        if (!strcasecmp(bonjour_service_name, v10))
        {
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_2;
          aBlock[3] = &unk_1E14ACFD0;
          v13 = v6;
          v11 = (void (**)(_QWORD))_Block_copy(aBlock);
          os_unfair_lock_lock((os_unfair_lock_t)v6 + 3);
          v11[2](v11);
          os_unfair_lock_unlock((os_unfair_lock_t)v6 + 3);

        }
      }

    }
  }

}

void sub_1833EE468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void nw_resolver_bonjour_resolve_callback(_DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, const char *a6, unsigned int a7, unsigned int a8, const unsigned __int8 *a9, void *a10)
{
  _BYTE *v18;
  _BYTE *v19;
  unsigned int v20;
  NSObject *v21;
  const char *v22;
  NSObject *v23;
  uint32_t v24;
  int v25;
  NSObject *v26;
  uint64_t v27;
  const char *v28;
  NSObject *v29;
  uint32_t v30;
  int v31;
  uint64_t v32;
  _BOOL8 host_with_numeric_port;
  void *v34;
  nw_txt_record_t v35;
  id *v36;
  NSObject *v37;
  NSObject *v38;
  const char *v39;
  NSObject *v40;
  uint32_t v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  uint32_t v45;
  int v46;
  id v47;
  void *v48;
  int subtype;
  size_t v50;
  size_t count;
  BOOL v52;
  int uint64;
  int v54;
  NSObject *v55;
  const char *v56;
  NSObject *v57;
  uint32_t v58;
  int v59;
  void *v60;
  _BOOL8 source;
  dispatch_time_t v62;
  uint64_t v63;
  NSObject *v64;
  const char *v65;
  NSObject *v66;
  uint32_t v67;
  int v68;
  uint64_t v69;
  _BOOL8 v70;
  void *v71;
  void *v72;
  char *v73;
  NSObject *v74;
  os_log_type_t v75;
  char *backtrace_string;
  os_log_type_t v77;
  _BOOL4 v78;
  os_log_type_t v79;
  NWConcrete_nw_interface *v80;
  _QWORD v81[4];
  _BYTE *v82;
  unsigned int v83;
  os_log_type_t type[8];
  uint8_t buf[4];
  const char *v86;
  __int16 v87;
  _BYTE v88[48];
  unsigned int v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v18 = a10;
  v19 = v18;
  if (v18)
  {
    v20 = __rev16(a7);
    if ((v18[346] & 0x20) != 0)
      goto LABEL_12;
    if (v18[256])
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v21 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        goto LABEL_11;
      *(_DWORD *)buf = 136448002;
      v86 = "nw_resolver_bonjour_resolve_callback";
      v87 = 2082;
      *(_QWORD *)v88 = v19 + 256;
      *(_WORD *)&v88[8] = 1024;
      *(_DWORD *)&v88[10] = a2;
      *(_WORD *)&v88[14] = 1024;
      *(_DWORD *)&v88[16] = a3;
      *(_WORD *)&v88[20] = 1024;
      *(_DWORD *)&v88[22] = a4;
      *(_WORD *)&v88[26] = 2082;
      *(_QWORD *)&v88[28] = a5;
      *(_WORD *)&v88[36] = 2082;
      *(_QWORD *)&v88[38] = a6;
      *(_WORD *)&v88[46] = 1024;
      v89 = v20;
      v22 = "%{public}s [C%{public}s] flags=0x%x ifindex=%u errorCode=%d name=%{public}s target=%{public}s port=%u";
      v23 = v21;
      v24 = 66;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v21 = (id)gLogObj;
      if (!os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:

LABEL_12:
        os_unfair_lock_lock((os_unfair_lock_t)v19 + 3);
        if (!a1 || *((_DNSServiceRef_t **)v19 + 9) != a1)
        {
          if ((v19[346] & 0x20) != 0)
          {
LABEL_24:
            os_unfair_lock_unlock((os_unfair_lock_t)v19 + 3);
            goto LABEL_25;
          }
          if (v19[256])
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v26 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
              goto LABEL_23;
            v27 = *((_QWORD *)v19 + 9);
            *(_DWORD *)buf = 136447234;
            v86 = "nw_resolver_bonjour_resolve_callback";
            v87 = 2082;
            *(_QWORD *)v88 = v19 + 256;
            *(_WORD *)&v88[8] = 2048;
            *(_QWORD *)&v88[10] = a1;
            *(_WORD *)&v88[18] = 2048;
            *(_QWORD *)&v88[20] = v19;
            *(_WORD *)&v88[28] = 2048;
            *(_QWORD *)&v88[30] = v27;
            v28 = "%{public}s [C%{public}s] Skipped, service %p, resolver %p -> %p";
            v29 = v26;
            v30 = 52;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v26 = (id)gLogObj;
            if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG))
            {
LABEL_23:

              goto LABEL_24;
            }
            v31 = *((_DWORD *)v19 + 85);
            v32 = *((_QWORD *)v19 + 9);
            *(_DWORD *)buf = 136447234;
            v86 = "nw_resolver_bonjour_resolve_callback";
            v87 = 1024;
            *(_DWORD *)v88 = v31;
            *(_WORD *)&v88[4] = 2048;
            *(_QWORD *)&v88[6] = a1;
            *(_WORD *)&v88[14] = 2048;
            *(_QWORD *)&v88[16] = v19;
            *(_WORD *)&v88[24] = 2048;
            *(_QWORD *)&v88[26] = v32;
            v28 = "%{public}s [R%u] Skipped, service %p, resolver %p -> %p";
            v29 = v26;
            v30 = 48;
          }
          _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, v28, buf, v30);
          goto LABEL_23;
        }
        if (a4)
        {
          if (a4 != -65569 || *((_DWORD *)v19 + 2) == 2)
          {
            *((_DWORD *)v19 + 21) = a4;
            goto LABEL_74;
          }
          if ((v19[346] & 0x20) != 0)
          {
LABEL_50:
            nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v19);
            goto LABEL_24;
          }
          if (v19[256])
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v42 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
              goto LABEL_49;
            *(_DWORD *)buf = 136446722;
            v86 = "nw_resolver_bonjour_resolve_callback";
            v87 = 2082;
            *(_QWORD *)v88 = v19 + 256;
            *(_WORD *)&v88[8] = 2048;
            *(_QWORD *)&v88[10] = v19;
            v43 = "%{public}s [C%{public}s] restarting resolver %p, defunct connection";
            v44 = v42;
            v45 = 32;
          }
          else
          {
            __nwlog_obj();
            v42 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
            {
LABEL_49:

              goto LABEL_50;
            }
            v46 = *((_DWORD *)v19 + 85);
            *(_DWORD *)buf = 136446722;
            v86 = "nw_resolver_bonjour_resolve_callback";
            v87 = 1024;
            *(_DWORD *)v88 = v46;
            *(_WORD *)&v88[4] = 2048;
            *(_QWORD *)&v88[6] = v19;
            v43 = "%{public}s [R%u] restarting resolver %p, defunct connection";
            v44 = v42;
            v45 = 28;
          }
          _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_INFO, v43, buf, v45);
          goto LABEL_49;
        }
        host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(a6, v20);
        v34 = (void *)host_with_numeric_port;
        if (!host_with_numeric_port)
        {
LABEL_73:

LABEL_74:
          if ((a2 & 1) == 0)
            nw_resolver_update_status_locked(v19, 0);
          goto LABEL_24;
        }
        nw_endpoint_set_parent_endpoint((void *)host_with_numeric_port, *((void **)v19 + 3), 0);
        v35 = nw_txt_record_create_with_bytes(a9, a8);
        v36 = v34;
        v37 = v35;
        objc_storeStrong(v36 + 23, v35);

        *(_QWORD *)type = 0;
        DNSServiceGetValidationData();
        if (!nw_resolver_set_interface_on_endpoint(v19, a3, v36))
        {
LABEL_72:

          goto LABEL_73;
        }
        if (!nw_parameters_has_preferred_interface_subtypes(*((void **)v19 + 2)))
          goto LABEL_61;
        v83 = 0;
        v83 = nw_resolver_derive_service_flags(v19, *((void **)v19 + 3), *((void **)v19 + 2));
        if (nw_resolver_get_scoped_interface_index((NWConcrete_nw_resolver *)v19, &v83))
        {
          if ((v19[346] & 0x20) != 0)
            goto LABEL_61;
          if (v19[256])
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v38 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
              goto LABEL_60;
            *(_DWORD *)buf = 136446466;
            v86 = "nw_resolver_bonjour_resolve_callback";
            v87 = 2082;
            *(_QWORD *)v88 = v19 + 256;
            v39 = "%{public}s [C%{public}s] Not preferring endpoints for scoped resolution";
            v40 = v38;
            v41 = 22;
          }
          else
          {
            __nwlog_obj();
            v38 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
            {
LABEL_60:

              goto LABEL_61;
            }
            v54 = *((_DWORD *)v19 + 85);
            *(_DWORD *)buf = 136446466;
            v86 = "nw_resolver_bonjour_resolve_callback";
            v87 = 1024;
            *(_DWORD *)v88 = v54;
            v39 = "%{public}s [R%u] Not preferring endpoints for scoped resolution";
            v40 = v38;
            v41 = 18;
          }
          _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, v39, buf, v41);
          goto LABEL_60;
        }
        v47 = nw_parameters_copy_preferred_interface_subtypes(*((void **)v19 + 2));
        v48 = v47;
        if (v47 && xpc_array_get_count(v47))
        {
          v80 = nw_interface_create_with_index(a3);
          subtype = nw_interface_get_subtype(v80);
          v50 = 0;
          do
          {
            count = xpc_array_get_count(v48);
            v52 = v50 < count;
            if (v50 >= count)
              break;
            uint64 = xpc_array_get_uint64(v48, v50++);
          }
          while (subtype != uint64);

        }
        else
        {

          v52 = 0;
        }
        if (v52 || (v19[348] & 1) != 0)
        {
LABEL_61:
          if ((v19[346] & 0x20) != 0)
          {
LABEL_71:
            nw_resolver_insert_endpoint_locked(v19, v36, &__block_literal_global_259);
            goto LABEL_72;
          }
          if (v19[256])
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v55 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
              goto LABEL_70;
            *(_DWORD *)buf = 136446722;
            v86 = "nw_resolver_bonjour_resolve_callback";
            v87 = 2082;
            *(_QWORD *)v88 = v19 + 256;
            *(_WORD *)&v88[8] = 2112;
            *(_QWORD *)&v88[10] = v36;
            v56 = "%{public}s [C%{public}s] Inserting host endpoint %@ directly";
            v57 = v55;
            v58 = 32;
          }
          else
          {
            __nwlog_obj();
            v55 = objc_claimAutoreleasedReturnValue();
            if (!os_log_type_enabled(v55, OS_LOG_TYPE_INFO))
            {
LABEL_70:

              goto LABEL_71;
            }
            v59 = *((_DWORD *)v19 + 85);
            *(_DWORD *)buf = 136446722;
            v86 = "nw_resolver_bonjour_resolve_callback";
            v87 = 1024;
            *(_DWORD *)v88 = v59;
            *(_WORD *)&v88[4] = 2112;
            *(_QWORD *)&v88[6] = v36;
            v56 = "%{public}s [R%u] Inserting host endpoint %@ directly";
            v57 = v55;
            v58 = 28;
          }
          _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_INFO, v56, buf, v58);
          goto LABEL_70;
        }
        if (!*((_QWORD *)v19 + 20))
        {
          v60 = (void *)*((_QWORD *)v19 + 4);
          v81[0] = MEMORY[0x1E0C809B0];
          v81[1] = 3221225472;
          v81[2] = ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke;
          v81[3] = &unk_1E14ACFD0;
          v82 = v19;
          source = nw_queue_context_create_source(v60, 2, 3, 0, v81, 0);
          *((_QWORD *)v19 + 20) = source;
          v62 = dispatch_time(0x8000000000000000, 1000000000);
          nw_queue_set_timer_values(source, v62, 0xFFFFFFFFFFFFFFFFLL, 0x2FAF080uLL);
          nw_queue_activate_source(*((_QWORD *)v19 + 20), v63);

        }
        if ((v19[346] & 0x20) != 0)
        {
LABEL_91:
          v69 = *((_QWORD *)v19 + 19);
          if (!v69)
          {
            v70 = nw_array_create();
            v71 = (void *)*((_QWORD *)v19 + 19);
            *((_QWORD *)v19 + 19) = v70;

            v69 = *((_QWORD *)v19 + 19);
          }
          nw_array_append(v69, v36);
          goto LABEL_72;
        }
        if (v19[256])
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v64 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
            goto LABEL_90;
          *(_DWORD *)buf = 136446722;
          v86 = "nw_resolver_bonjour_resolve_callback";
          v87 = 2082;
          *(_QWORD *)v88 = v19 + 256;
          *(_WORD *)&v88[8] = 2112;
          *(_QWORD *)&v88[10] = v36;
          v65 = "%{public}s [C%{public}s] Appending non-preferred host endpoint (%@) to array";
          v66 = v64;
          v67 = 32;
        }
        else
        {
          __nwlog_obj();
          v64 = objc_claimAutoreleasedReturnValue();
          if (!os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
          {
LABEL_90:

            goto LABEL_91;
          }
          v68 = *((_DWORD *)v19 + 85);
          *(_DWORD *)buf = 136446722;
          v86 = "nw_resolver_bonjour_resolve_callback";
          v87 = 1024;
          *(_DWORD *)v88 = v68;
          *(_WORD *)&v88[4] = 2112;
          *(_QWORD *)&v88[6] = v36;
          v65 = "%{public}s [R%u] Appending non-preferred host endpoint (%@) to array";
          v66 = v64;
          v67 = 28;
        }
        _os_log_impl(&dword_182FBE000, v66, OS_LOG_TYPE_DEBUG, v65, buf, v67);
        goto LABEL_90;
      }
      v25 = *((_DWORD *)v19 + 85);
      *(_DWORD *)buf = 136448002;
      v86 = "nw_resolver_bonjour_resolve_callback";
      v87 = 1024;
      *(_DWORD *)v88 = v25;
      *(_WORD *)&v88[4] = 1024;
      *(_DWORD *)&v88[6] = a2;
      *(_WORD *)&v88[10] = 1024;
      *(_DWORD *)&v88[12] = a3;
      *(_WORD *)&v88[16] = 1024;
      *(_DWORD *)&v88[18] = a4;
      *(_WORD *)&v88[22] = 2082;
      *(_QWORD *)&v88[24] = a5;
      *(_WORD *)&v88[32] = 2082;
      *(_QWORD *)&v88[34] = a6;
      *(_WORD *)&v88[42] = 1024;
      *(_DWORD *)&v88[44] = v20;
      v22 = "%{public}s [R%u] flags=0x%x ifindex=%u errorCode=%d name=%{public}s target=%{public}s port=%u";
      v23 = v21;
      v24 = 62;
    }
    _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, v22, buf, v24);
    goto LABEL_11;
  }
  __nwlog_obj();
  v72 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v86 = "nw_resolver_bonjour_resolve_callback";
  v73 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v83) = 0;
  if (__nwlog_fault(v73, type, &v83))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v75 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_resolver_bonjour_resolve_callback";
        _os_log_impl(&dword_182FBE000, v74, v75, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if ((_BYTE)v83)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v77 = type[0];
      v78 = os_log_type_enabled(v74, type[0]);
      if (backtrace_string)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446466;
          v86 = "nw_resolver_bonjour_resolve_callback";
          v87 = 2082;
          *(_QWORD *)v88 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_110;
      }
      if (v78)
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_resolver_bonjour_resolve_callback";
        _os_log_impl(&dword_182FBE000, v74, v77, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v74 = objc_claimAutoreleasedReturnValue();
      v79 = type[0];
      if (os_log_type_enabled(v74, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v86 = "nw_resolver_bonjour_resolve_callback";
        _os_log_impl(&dword_182FBE000, v74, v79, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_110:
  if (v73)
    free(v73);
LABEL_25:

}

void sub_1833EF134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void nw_resolver_ptr_resolve_callback(_DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, int a6, unsigned __int16 a7, unsigned __int16 a8, const char *a9, unsigned int a10, void *a11)
{
  char *v15;
  char *v16;
  const char *v17;
  char *v18;
  _DNSServiceRef_t *v19;
  int v20;
  int v21;
  unsigned int v22;
  int v23;
  char *v24;
  unsigned int v25;
  unsigned __int8 *v26;
  int v27;
  int v28;
  void *v29;
  NSObject *v30;
  os_log_type_t v31;
  NSObject *v32;
  void *v33;
  NSObject *v34;
  const char *v35;
  NSObject *v36;
  uint32_t v37;
  int v38;
  NSObject *v39;
  uint64_t v40;
  const char *v41;
  NSObject *v42;
  uint32_t v43;
  int v44;
  uint64_t v45;
  NSObject *v46;
  const char *v47;
  NSObject *v48;
  uint32_t v49;
  uint64_t v50;
  _BOOL4 v51;
  unsigned int port;
  _BOOL8 host_with_numeric_port;
  const void *ValidationData;
  BOOL inserted;
  int v56;
  char *backtrace_string;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  char *v62;
  _QWORD v63[4];
  char *v64;
  char *v65;
  unsigned int v66;
  char v67;
  _QWORD v68[4];
  char *v69;
  char *v70;
  unsigned int v71;
  char v72;
  char v73;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v76;
  _BYTE v77[38];
  unsigned int v78;
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v15 = a11;
  if (!v15)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v73 = 0;
    if (__nwlog_fault(v16, &type, &v73))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null resolver", buf, 0xCu);
        }
      }
      else if (v73)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v58 = type;
        v59 = os_log_type_enabled(v30, type);
        if (backtrace_string)
        {
          if (v59)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
            v76 = 2082;
            *(_QWORD *)v77 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v30, v58, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v16)
            goto LABEL_76;
          goto LABEL_75;
        }
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
          _os_log_impl(&dword_182FBE000, v30, v58, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v60 = type;
        if (os_log_type_enabled(v30, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
          _os_log_impl(&dword_182FBE000, v30, v60, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v16)
      goto LABEL_76;
    goto LABEL_75;
  }
  v16 = (char *)malloc_type_calloc(1uLL, 0x100uLL, 0xEAFB8F1AuLL);
  if (v16)
  {
    v17 = a9;
    if (a9)
      goto LABEL_4;
    goto LABEL_20;
  }
  __nwlog_obj();
  v32 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v32, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "strict_calloc";
  v76 = 2048;
  *(_QWORD *)v77 = 1;
  *(_WORD *)&v77[8] = 2048;
  *(_QWORD *)&v77[10] = 256;
  v33 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v33))
  {
    free(v33);
    v17 = a9;
    if (a9)
    {
LABEL_4:
      v62 = v15;
      LODWORD(v18) = (_DWORD)v16;
      v19 = a1;
      v20 = a4;
      v21 = a2;
      v22 = a3;
      v23 = *(unsigned __int8 *)v17;
      if (*v17)
      {
        v18 = v16;
        v24 = v16 + 256;
        while (1)
        {
          v25 = snprintf(v18, v24 - v18, "%.*s.", v23, v17 + 1);
          if ((v25 & 0x80000000) != 0 || v24 - v18 <= v25)
            break;
          v18 += v25;
          v26 = (unsigned __int8 *)&v17[*(unsigned __int8 *)v17];
          v27 = v26[1];
          v17 = (const char *)(v26 + 1);
          v23 = v27;
          if (!v27)
            goto LABEL_9;
        }
        v28 = -1;
      }
      else
      {
LABEL_9:
        v28 = (_DWORD)v18 - (_DWORD)v16;
      }
      a3 = v22;
      a2 = v21;
      a4 = v20;
      a1 = v19;
      v15 = v62;
      if ((v62[346] & 0x20) != 0)
      {
LABEL_30:
        os_unfair_lock_lock((os_unfair_lock_t)v15 + 3);
        if (!a1 || !v16 || v28 < 0 || *((_DNSServiceRef_t **)v15 + 9) != a1)
        {
          if ((v15[346] & 0x20) != 0)
            goto LABEL_44;
          if (v15[256])
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v39 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
              goto LABEL_43;
            v40 = *((_QWORD *)v15 + 9);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
            v76 = 2082;
            *(_QWORD *)v77 = v15 + 256;
            *(_WORD *)&v77[8] = 2048;
            *(_QWORD *)&v77[10] = a1;
            *(_WORD *)&v77[18] = 2048;
            *(_QWORD *)&v77[20] = v15;
            *(_WORD *)&v77[28] = 2048;
            *(_QWORD *)&v77[30] = v40;
            v41 = "%{public}s [C%{public}s] Skipped, service %p, resolver %p -> %p";
            v42 = v39;
            v43 = 52;
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v39 = (id)gLogObj;
            if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
            {
LABEL_43:

LABEL_44:
              os_unfair_lock_unlock((os_unfair_lock_t)v15 + 3);
              if (!v16)
                goto LABEL_76;
              goto LABEL_75;
            }
            v44 = *((_DWORD *)v15 + 85);
            v45 = *((_QWORD *)v15 + 9);
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
            v76 = 1024;
            *(_DWORD *)v77 = v44;
            *(_WORD *)&v77[4] = 2048;
            *(_QWORD *)&v77[6] = a1;
            *(_WORD *)&v77[14] = 2048;
            *(_QWORD *)&v77[16] = v15;
            *(_WORD *)&v77[24] = 2048;
            *(_QWORD *)&v77[26] = v45;
            v41 = "%{public}s [R%u] Skipped, service %p, resolver %p -> %p";
            v42 = v39;
            v43 = 48;
          }
          _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, v41, buf, v43);
          goto LABEL_43;
        }
        if (a4)
        {
          if (a4 != -65554)
          {
            if (a4 != -65569 || *((_DWORD *)v15 + 2) == 2)
              goto LABEL_74;
            if ((v15[346] & 0x20) != 0)
              goto LABEL_73;
            if (v15[256])
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v46 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
                goto LABEL_72;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
              v76 = 2082;
              *(_QWORD *)v77 = v15 + 256;
              *(_WORD *)&v77[8] = 2048;
              *(_QWORD *)&v77[10] = v15;
              v47 = "%{public}s [C%{public}s] restarting resolver %p, defunct connection";
              v48 = v46;
              v49 = 32;
            }
            else
            {
              __nwlog_obj();
              v46 = objc_claimAutoreleasedReturnValue();
              if (!os_log_type_enabled(v46, OS_LOG_TYPE_INFO))
              {
LABEL_72:

LABEL_73:
                nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v15);
                goto LABEL_74;
              }
              v56 = *((_DWORD *)v15 + 85);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
              v76 = 1024;
              *(_DWORD *)v77 = v56;
              *(_WORD *)&v77[4] = 2048;
              *(_QWORD *)&v77[6] = v15;
              v47 = "%{public}s [R%u] restarting resolver %p, defunct connection";
              v48 = v46;
              v49 = 28;
            }
            _os_log_impl(&dword_182FBE000, v48, OS_LOG_TYPE_INFO, v47, buf, v49);
            goto LABEL_72;
          }
          if ((*((_WORD *)v15 + 44) & 1) == 0)
          {
            *((_WORD *)v15 + 44) = 1;
LABEL_62:
            nw_resolver_update_status_locked(v15, 0);
          }
        }
        else if (a6 == 12)
        {
          if ((a2 & 2) != 0)
          {
            *((_WORD *)v15 + 44) = 4;
            port = nw_endpoint_get_port(*((nw_endpoint_t *)v15 + 3));
            host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v16, port);
            nw_endpoint_set_parent_endpoint((void *)host_with_numeric_port, *((void **)v15 + 3), 0);
            *(_QWORD *)buf = 0;
            ValidationData = (const void *)DNSServiceGetValidationData();
            if (ValidationData && *(_QWORD *)buf)
              nw_endpoint_set_signature((void *)host_with_numeric_port, ValidationData, *(size_t *)buf);
            if (!nw_resolver_set_interface_on_endpoint(v15, a3, (void *)host_with_numeric_port))
            {

              goto LABEL_74;
            }
            v68[0] = MEMORY[0x1E0C809B0];
            v68[1] = 3221225472;
            v68[2] = ___ZL32nw_resolver_ptr_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke;
            v68[3] = &unk_1E149B130;
            v70 = v16;
            v69 = v15;
            v71 = a3;
            v72 = (a2 & 2) >> 1;
            inserted = nw_resolver_insert_endpoint_locked(v69, (void *)host_with_numeric_port, v68);

            if (!inserted)
              goto LABEL_74;
          }
          else
          {
            v50 = MEMORY[0x1E0C809B0];
            *((_WORD *)v15 + 44) = 0;
            v63[0] = v50;
            v63[1] = 3221225472;
            v63[2] = ___ZL32nw_resolver_ptr_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke_2;
            v63[3] = &unk_1E149B130;
            v65 = v16;
            v64 = v15;
            v66 = a3;
            v67 = 0;
            v51 = nw_resolver_remove_endpoint_locked(v64, v63);

            if (!v51)
              goto LABEL_74;
          }
          goto LABEL_62;
        }
LABEL_74:
        os_unfair_lock_unlock((os_unfair_lock_t)v15 + 3);
LABEL_75:
        free(v16);
LABEL_76:

        return;
      }
LABEL_21:
      if (v15[256])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v34 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
          goto LABEL_29;
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
        v76 = 2082;
        *(_QWORD *)v77 = v15 + 256;
        *(_WORD *)&v77[8] = 1024;
        *(_DWORD *)&v77[10] = a2;
        *(_WORD *)&v77[14] = 1024;
        *(_DWORD *)&v77[16] = a3;
        *(_WORD *)&v77[20] = 1024;
        *(_DWORD *)&v77[22] = a4;
        *(_WORD *)&v77[26] = 2082;
        *(_QWORD *)&v77[28] = v16;
        *(_WORD *)&v77[36] = 1024;
        v78 = a10;
        v35 = "%{public}s [C%{public}s] flags=0x%x ifindex=%u errorCode=%d hostname=%{public}s ttl=%d";
        v36 = v34;
        v37 = 56;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v34 = (id)gLogObj;
        if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
        {
LABEL_29:

          goto LABEL_30;
        }
        v38 = *((_DWORD *)v15 + 85);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_resolver_ptr_resolve_callback";
        v76 = 1024;
        *(_DWORD *)v77 = v38;
        *(_WORD *)&v77[4] = 1024;
        *(_DWORD *)&v77[6] = a2;
        *(_WORD *)&v77[10] = 1024;
        *(_DWORD *)&v77[12] = a3;
        *(_WORD *)&v77[16] = 1024;
        *(_DWORD *)&v77[18] = a4;
        *(_WORD *)&v77[22] = 2082;
        *(_QWORD *)&v77[24] = v16;
        *(_WORD *)&v77[32] = 1024;
        *(_DWORD *)&v77[34] = a10;
        v35 = "%{public}s [R%u] flags=0x%x ifindex=%u errorCode=%d hostname=%{public}s ttl=%d";
        v36 = v34;
        v37 = 52;
      }
      _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, v35, buf, v37);
      goto LABEL_29;
    }
LABEL_20:
    v28 = -1;
    if ((v15[346] & 0x20) != 0)
      goto LABEL_30;
    goto LABEL_21;
  }
  __break(1u);
}

void sub_1833EFBD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL37nw_resolver_create_dns_service_lockedP22NWConcrete_nw_resolver_block_invoke_238(uint64_t a1, int a2, unsigned int *a3)
{
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  int v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  uint32_t v16;
  nw_endpoint_t v17;
  nw_endpoint_t v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  const char *logging_description;
  id v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  const char *v27;
  uint64_t v28;
  int v29;
  const char *v30;
  char *backtrace_string;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  void **v36;
  uint64_t v37;
  char v38;
  int v39;
  _BYTE address[28];
  uint8_t v41[4];
  const char *v42;
  __int16 v43;
  _BYTE v44[28];
  uint8_t buf[48];
  __int16 v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = a2;
      *(_WORD *)&buf[18] = 2048;
      *(_QWORD *)&buf[20] = a3;
      v9 = "%{public}s Received %d NAT64 prefixes [%p]";
      v10 = v7;
      v11 = 28;
LABEL_12:
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, v9, buf, v11);
    }
LABEL_13:

    v6 = *(_QWORD *)(a1 + 32);
    goto LABEL_14;
  }
  if ((*(_BYTE *)(v6 + 346) & 0x20) == 0)
  {
    if (*(_BYTE *)(v6 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v7 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
        goto LABEL_13;
      v8 = *(_QWORD *)(a1 + 32) + 256;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v8;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = a2;
      *(_WORD *)&buf[28] = 2048;
      *(_QWORD *)&buf[30] = a3;
      v9 = "%{public}s [C%{public}s] Received %d NAT64 prefixes [%p]";
      v10 = v7;
      v11 = 38;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = a2;
      *(_WORD *)&buf[24] = 2048;
      *(_QWORD *)&buf[26] = a3;
      v9 = "%{public}s [R%u] Received %d NAT64 prefixes [%p]";
      v10 = v7;
      v11 = 34;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_14:
  if (a2 >= 1 && a3)
  {
    memset(&address[4], 0, 24);
    *(_WORD *)address = 7708;
    *(_WORD *)&address[2] = __rev16(nw_endpoint_get_port(*(nw_endpoint_t *)(v6 + 24)));
    v39 = *(_DWORD *)&nw_endpoint_get_address(*(nw_endpoint_t *)(*(_QWORD *)(a1 + 32) + 24))->sa_data[2];
    v13 = a2;
    while (1)
    {
      if (nw_nat64_synthesize_v6(a3, (__int16 *)&v39, &address[8]))
      {
        v17 = nw_endpoint_create_address((const sockaddr *)address);
        v18 = v17;
        if (v17)
        {
          nw_endpoint_set_parent_endpoint(v17, *(void **)(*(_QWORD *)(a1 + 32) + 24), 0);
          nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 144), v18);
LABEL_37:

          goto LABEL_19;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
        v24 = (char *)_os_log_send_and_compose_impl();

        v41[0] = 16;
        v38 = 0;
        if (__nwlog_fault(v24, v41, &v38))
        {
          if (v41[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v25 = (id)gLogObj;
            v26 = v41[0];
            if (os_log_type_enabled(v25, (os_log_type_t)v41[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
              _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s nw_endpoint_create_address failed", buf, 0xCu);
            }
            goto LABEL_34;
          }
          if (v38)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v32 = (id)gLogObj;
            v33 = v41[0];
            v34 = os_log_type_enabled(v32, (os_log_type_t)v41[0]);
            if (backtrace_string)
            {
              if (v34)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = backtrace_string;
                _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s nw_endpoint_create_address failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              if (!v24)
                goto LABEL_37;
              goto LABEL_36;
            }
            if (v34)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
              _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s nw_endpoint_create_address failed, no backtrace", buf, 0xCu);
            }

          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v25 = (id)gLogObj;
            v35 = v41[0];
            if (os_log_type_enabled(v25, (os_log_type_t)v41[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_resolver_create_dns_service_locked_block_invoke";
              _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s nw_endpoint_create_address failed, backtrace limit exceeded", buf, 0xCu);
            }
LABEL_34:

          }
        }
        if (!v24)
          goto LABEL_37;
LABEL_36:
        free(v24);
        goto LABEL_37;
      }
      v46 = 0;
      memset(buf, 0, sizeof(buf));
      nw_nat64_write_prefix_to_string(a3, (char *)buf, 0x32u);
      v19 = *(_QWORD *)(a1 + 32);
      if (v19)
      {
        if ((*(_BYTE *)(v19 + 346) & 0x20) != 0)
          goto LABEL_19;
        if (*(_BYTE *)(v19 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v20 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            goto LABEL_18;
          v21 = *(_QWORD *)(a1 + 32);
          logging_description = nw_endpoint_get_logging_description(*(void **)(v21 + 24));
          *(_DWORD *)v41 = 136446978;
          v42 = "nw_resolver_create_dns_service_locked_block_invoke";
          v43 = 2082;
          *(_QWORD *)v44 = v21 + 256;
          *(_WORD *)&v44[8] = 2082;
          *(_QWORD *)&v44[10] = logging_description;
          *(_WORD *)&v44[18] = 2082;
          *(_QWORD *)&v44[20] = buf;
          v14 = v20;
          v15 = "%{public}s [C%{public}s] failed to synthesize IPv4 address %{public}s with prefix %{public}s";
          v16 = 42;
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v20 = (id)gLogObj;
          if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            goto LABEL_18;
          v28 = *(_QWORD *)(a1 + 32);
          v29 = *(_DWORD *)(v28 + 340);
          v30 = nw_endpoint_get_logging_description(*(void **)(v28 + 24));
          *(_DWORD *)v41 = 136446978;
          v42 = "nw_resolver_create_dns_service_locked_block_invoke";
          v43 = 1024;
          *(_DWORD *)v44 = v29;
          *(_WORD *)&v44[4] = 2082;
          *(_QWORD *)&v44[6] = v30;
          *(_WORD *)&v44[14] = 2082;
          *(_QWORD *)&v44[16] = buf;
          v14 = v20;
          v15 = "%{public}s [R%u] failed to synthesize IPv4 address %{public}s with prefix %{public}s";
          v16 = 38;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
          goto LABEL_18;
        v27 = nw_endpoint_get_logging_description(*(void **)(*(_QWORD *)(a1 + 32) + 24));
        *(_DWORD *)v41 = 136446722;
        v42 = "nw_resolver_create_dns_service_locked_block_invoke";
        v43 = 2082;
        *(_QWORD *)v44 = v27;
        *(_WORD *)&v44[8] = 2082;
        *(_QWORD *)&v44[10] = buf;
        v14 = v20;
        v15 = "%{public}s failed to synthesize IPv4 address %{public}s with prefix %{public}s";
        v16 = 32;
      }
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, v15, v41, v16);
LABEL_18:

LABEL_19:
      a3 += 4;
      if (!--v13)
      {
        v6 = *(_QWORD *)(a1 + 32);
        break;
      }
    }
  }
  nw_array_append(*(_QWORD *)(v6 + 144), *(void **)(v6 + 24));
  v37 = *(_QWORD *)(a1 + 32);
  v36 = (void **)(a1 + 32);
  *(_DWORD *)(v37 + 84) = 0;
  nw_resolver_update_status_locked(*v36, 0);
  dispatch_group_leave(*((dispatch_group_t *)*v36 + 5));
  os_unfair_lock_unlock((os_unfair_lock_t)*v36 + 3);
}

void sub_1833F0438(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_srv_resolve_callback(_DNSServiceRef_t *a1, int a2, unsigned int a3, int a4, const char *a5, int a6, int a7, unsigned int a8, unsigned __int16 *a9, unsigned int a10, void *a11)
{
  _BYTE *v17;
  _BYTE *v18;
  NSObject *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  int v23;
  NSObject *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  NSObject *v28;
  const char *v29;
  NSObject *v30;
  uint32_t v31;
  NSObject *v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  NSObject *v36;
  unsigned int v37;
  unsigned __int16 v38;
  uint64_t v39;
  char *v40;
  char *v41;
  int v42;
  int v43;
  NSObject *v44;
  const char *v45;
  NSObject *v46;
  uint32_t v47;
  int v48;
  _BOOL8 host_with_numeric_port;
  void *v50;
  const void *ValidationData;
  int v52;
  void *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  char *backtrace_string;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  NSObject *v61;
  void *v62;
  NSObject *v63;
  void *v64;
  unsigned int v65;
  unsigned int v66;
  _QWORD v69[5];
  unsigned int v70;
  __int16 v71;
  __int16 v72;
  __int16 v73;
  _QWORD v74[5];
  unsigned int v75;
  __int16 v76;
  __int16 v77;
  __int16 v78;
  os_log_type_t type[8];
  char v80;
  _BYTE buf[12];
  __int16 v82;
  _BYTE v83[38];
  _BYTE v84[6];
  _BYTE v85[6];
  _BYTE v86[6];
  unsigned int v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v17 = a11;
  v18 = v17;
  if (!v17)
  {
    __nwlog_obj();
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
    v54 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v80 = 0;
    if (__nwlog_fault(v54, type, &v80))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v56 = type[0];
        if (os_log_type_enabled(v55, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
          _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s called with null resolver", buf, 0xCu);
        }
      }
      else if (v80)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v58 = type[0];
        v59 = os_log_type_enabled(v55, type[0]);
        if (backtrace_string)
        {
          if (v59)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
            v82 = 2082;
            *(_QWORD *)v83 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v55, v58, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_110;
        }
        if (v59)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
          _os_log_impl(&dword_182FBE000, v55, v58, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v55 = objc_claimAutoreleasedReturnValue();
        v60 = type[0];
        if (os_log_type_enabled(v55, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
          _os_log_impl(&dword_182FBE000, v55, v60, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_110:
    if (v54)
      free(v54);
    goto LABEL_25;
  }
  if ((v17[346] & 0x20) == 0)
  {
    if (v17[256])
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v19 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        goto LABEL_11;
      *(_DWORD *)buf = 136448514;
      *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
      v82 = 2082;
      *(_QWORD *)v83 = v18 + 256;
      *(_WORD *)&v83[8] = 1024;
      *(_DWORD *)&v83[10] = a2;
      *(_WORD *)&v83[14] = 1024;
      *(_DWORD *)&v83[16] = a3;
      *(_WORD *)&v83[20] = 1024;
      *(_DWORD *)&v83[22] = a4;
      *(_WORD *)&v83[26] = 2082;
      *(_QWORD *)&v83[28] = a5;
      *(_WORD *)&v83[36] = 1024;
      *(_DWORD *)v84 = a6;
      *(_WORD *)&v84[4] = 1024;
      *(_DWORD *)v85 = a7;
      *(_WORD *)&v85[4] = 1024;
      *(_DWORD *)v86 = a8;
      *(_WORD *)&v86[4] = 1024;
      v87 = a10;
      v20 = "%{public}s [C%{public}s] flags=0x%x ifindex=%u errorCode=%d name=%{public}s rrtype=%u rrclass=%u rdlen=%u, ttl=%u";
      v21 = v19;
      v22 = 74;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v19 = (id)gLogObj;
      if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
      {
LABEL_11:

        goto LABEL_12;
      }
      v23 = *((_DWORD *)v18 + 85);
      *(_DWORD *)buf = 136448514;
      *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
      v82 = 1024;
      *(_DWORD *)v83 = v23;
      *(_WORD *)&v83[4] = 1024;
      *(_DWORD *)&v83[6] = a2;
      *(_WORD *)&v83[10] = 1024;
      *(_DWORD *)&v83[12] = a3;
      *(_WORD *)&v83[16] = 1024;
      *(_DWORD *)&v83[18] = a4;
      *(_WORD *)&v83[22] = 2082;
      *(_QWORD *)&v83[24] = a5;
      *(_WORD *)&v83[32] = 1024;
      *(_DWORD *)&v83[34] = a6;
      *(_WORD *)v84 = 1024;
      *(_DWORD *)&v84[2] = a7;
      *(_WORD *)v85 = 1024;
      *(_DWORD *)&v85[2] = a8;
      *(_WORD *)v86 = 1024;
      *(_DWORD *)&v86[2] = a10;
      v20 = "%{public}s [R%u] flags=0x%x ifindex=%u errorCode=%d name=%{public}s rrtype=%u rrclass=%u rdlen=%u, ttl=%u";
      v21 = v19;
      v22 = 70;
    }
    _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, v20, buf, v22);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_lock((os_unfair_lock_t)v18 + 3);
  if (!a1 || *((_DNSServiceRef_t **)v18 + 9) != a1)
  {
    if ((v18[346] & 0x20) == 0)
    {
      if (v18[256])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v24 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v25 = *((_QWORD *)v18 + 9);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
          v82 = 2082;
          *(_QWORD *)v83 = v18 + 256;
          *(_WORD *)&v83[8] = 2048;
          *(_QWORD *)&v83[10] = a1;
          *(_WORD *)&v83[18] = 2048;
          *(_QWORD *)&v83[20] = v18;
          *(_WORD *)&v83[28] = 2048;
          *(_QWORD *)&v83[30] = v25;
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s] Skipped, service %p, resolver %p -> %p", buf, 0x34u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEBUG))
        {
          v26 = *((_DWORD *)v18 + 85);
          v27 = *((_QWORD *)v18 + 9);
          *(_DWORD *)buf = 136447234;
          *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
          v82 = 1024;
          *(_DWORD *)v83 = v26;
          *(_WORD *)&v83[4] = 2048;
          *(_QWORD *)&v83[6] = a1;
          *(_WORD *)&v83[14] = 2048;
          *(_QWORD *)&v83[16] = v18;
          *(_WORD *)&v83[24] = 2048;
          *(_QWORD *)&v83[26] = v27;
          _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_DEBUG, "%{public}s [R%u] Skipped, service %p, resolver %p -> %p", buf, 0x30u);
        }
      }

    }
    goto LABEL_24;
  }
  *((_WORD *)v18 + 44) = *((_WORD *)v18 + 44) & 0xFFEF | (16 * (a2 & 1));
  if (a4)
  {
    if (a4 != -65569 || *((_DWORD *)v18 + 2) == 2)
    {
      *((_DWORD *)v18 + 21) = a4;
      if ((a2 & 1) != 0)
      {
LABEL_24:
        os_unfair_lock_unlock((os_unfair_lock_t)v18 + 3);
LABEL_25:

        return;
      }
LABEL_30:
      nw_resolver_update_status_locked(v18, 0);
      goto LABEL_24;
    }
    if ((v18[346] & 0x20) != 0)
    {
LABEL_62:
      nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v18);
      goto LABEL_24;
    }
    if (v18[256])
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v32 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        goto LABEL_61;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
      v82 = 2082;
      *(_QWORD *)v83 = v18 + 256;
      *(_WORD *)&v83[8] = 2048;
      *(_QWORD *)&v83[10] = v18;
      v33 = "%{public}s [C%{public}s] restarting resolver %p, defunct connection";
      v34 = v32;
      v35 = 32;
    }
    else
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
      {
LABEL_61:

        goto LABEL_62;
      }
      v42 = *((_DWORD *)v18 + 85);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
      v82 = 1024;
      *(_DWORD *)v83 = v42;
      *(_WORD *)&v83[4] = 2048;
      *(_QWORD *)&v83[6] = v18;
      v33 = "%{public}s [R%u] restarting resolver %p, defunct connection";
      v34 = v32;
      v35 = 28;
    }
    _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_INFO, v33, buf, v35);
    goto LABEL_61;
  }
  if (a6 != 33)
  {
    if ((v18[346] & 0x20) == 0)
    {
      if (v18[256])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v36 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
          v82 = 2082;
          *(_QWORD *)v83 = v18 + 256;
          *(_WORD *)&v83[8] = 1024;
          *(_DWORD *)&v83[10] = a6;
          _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s] Ignore record of type: %u", buf, 0x1Cu);
        }
      }
      else
      {
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
        {
          v43 = *((_DWORD *)v18 + 85);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
          v82 = 1024;
          *(_DWORD *)v83 = v43;
          *(_WORD *)&v83[4] = 1024;
          *(_DWORD *)&v83[6] = a6;
          _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s [R%u] Ignore record of type: %u", buf, 0x18u);
        }
      }

    }
    goto LABEL_24;
  }
  if (a8 <= 5)
  {
    if ((v18[346] & 0x20) != 0)
    {
LABEL_76:
      *((_DWORD *)v18 + 21) = -65549;
      goto LABEL_24;
    }
    if (v18[256])
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v28 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
        goto LABEL_75;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
      v82 = 2082;
      *(_QWORD *)v83 = v18 + 256;
      *(_WORD *)&v83[8] = 1024;
      *(_DWORD *)&v83[10] = a8;
      v29 = "%{public}s [C%{public}s] Invalid SRV length: %u";
      v30 = v28;
      v31 = 28;
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
      {
LABEL_75:

        goto LABEL_76;
      }
      v48 = *((_DWORD *)v18 + 85);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
      v82 = 1024;
      *(_DWORD *)v83 = v48;
      *(_WORD *)&v83[4] = 1024;
      *(_DWORD *)&v83[6] = a8;
      v29 = "%{public}s [R%u] Invalid SRV length: %u";
      v30 = v28;
      v31 = 24;
    }
    _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, v29, buf, v31);
    goto LABEL_75;
  }
  v65 = *a9;
  v66 = a9[1];
  v37 = a9[2];
  v38 = a8 - 6;
  if ((_WORD)a8 == 6)
  {
    __nwlog_obj();
    v61 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v61, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "strict_calloc";
    v62 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v62))
      goto LABEL_116;
    free(v62);
  }
  v39 = v38;
  v40 = (char *)malloc_type_calloc(1uLL, v38, 0xEAFB8F1AuLL);
  v41 = v40;
  if (v40)
  {
    *(_QWORD *)type = a9 + 3;
    goto LABEL_55;
  }
  __nwlog_obj();
  v63 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v63, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "strict_calloc";
  v82 = 2048;
  *(_QWORD *)v83 = 1;
  *(_WORD *)&v83[8] = 2048;
  *(_QWORD *)&v83[10] = v39;
  v64 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v64))
  {
    free(v64);
    *(_QWORD *)type = a9 + 3;
    v40 = 0;
LABEL_55:
    if ((nw_resolver_parse_rdata(v40, v39, (const unsigned __int8 **)type) & 0x80000000) == 0)
    {
      if ((a2 & 2) != 0)
      {
        host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v41, __rev16(v37));
        v50 = (void *)host_with_numeric_port;
        if (host_with_numeric_port)
        {
          nw_endpoint_set_parent_endpoint((void *)host_with_numeric_port, *((void **)v18 + 3), 0);
          nw_endpoint_set_weight(v50, __rev16(v66));
          nw_endpoint_set_priority(v50, __rev16(v65));
          *(_QWORD *)buf = 0;
          ValidationData = (const void *)DNSServiceGetValidationData();
          if (ValidationData && *(_QWORD *)buf)
            nw_endpoint_set_signature(v50, ValidationData, *(size_t *)buf);
          if (nw_resolver_set_interface_on_endpoint(v18, a3, v50))
          {
            v74[0] = MEMORY[0x1E0C809B0];
            v74[1] = 3221225472;
            v74[2] = ___ZL32nw_resolver_srv_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke;
            v74[3] = &__block_descriptor_50_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
            v74[4] = v41;
            v76 = v65;
            v77 = v66;
            v78 = v37;
            v75 = a3;
            nw_resolver_insert_endpoint_locked(v18, v50, v74);
          }
        }

      }
      else
      {
        v69[0] = MEMORY[0x1E0C809B0];
        v69[1] = 3221225472;
        v69[2] = ___ZL32nw_resolver_srv_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke_2;
        v69[3] = &__block_descriptor_50_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
        v69[4] = v41;
        v71 = v65;
        v72 = v66;
        v73 = v37;
        v70 = a3;
        nw_resolver_remove_endpoint_locked(v18, v69);
      }
      if (v41)
        free(v41);
      if ((a2 & 1) != 0)
        goto LABEL_24;
      goto LABEL_30;
    }
    if ((v18[346] & 0x20) != 0)
    {
LABEL_92:
      *((_DWORD *)v18 + 21) = -65549;
      if (v41)
        free(v41);
      goto LABEL_24;
    }
    if (v18[256])
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v44 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        goto LABEL_91;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
      v82 = 2082;
      *(_QWORD *)v83 = v18 + 256;
      v45 = "%{public}s [C%{public}s] Invalid SRV host";
      v46 = v44;
      v47 = 22;
    }
    else
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
      {
LABEL_91:

        goto LABEL_92;
      }
      v52 = *((_DWORD *)v18 + 85);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_resolver_srv_resolve_callback";
      v82 = 1024;
      *(_DWORD *)v83 = v52;
      v45 = "%{public}s [R%u] Invalid SRV host";
      v46 = v44;
      v47 = 18;
    }
    _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_ERROR, v45, buf, v47);
    goto LABEL_91;
  }
LABEL_116:
  __break(1u);
}

void sub_1833F1298(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_resolver_restart_dns_service_locked(NWConcrete_nw_resolver *a1)
{
  _BOOL8 v1;
  void *v2;
  NWConcrete_nw_resolver *v3;

  v3 = a1;
  nw_resolver_cancel_query_locked(v3, 1);
  nw_resolver_cancel_delayed_reporting_timer(v3);
  nw_resolver_cancel_query_timer(v3);
  v1 = nw_array_create();
  v2 = (void *)*((_QWORD *)v3 + 18);
  *((_QWORD *)v3 + 18) = v1;

  *((_DWORD *)v3 + 62) = 0;
  nw_resolver_create_dns_service_locked(v3);

}

void sub_1833F1330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t nw_resolver_parse_rdata(char *__str, uint64_t a2, const unsigned __int8 **a3)
{
  const unsigned __int8 *v4;
  int v5;
  int v6;
  char *v7;
  char *v8;
  unsigned int v9;

  if (!a3)
    return 0xFFFFFFFFLL;
  v4 = *a3;
  if (!*a3)
    return 0xFFFFFFFFLL;
  v5 = (int)__str;
  v6 = *v4;
  if (*v4)
  {
    v7 = &__str[a2];
    v8 = __str;
    while (1)
    {
      v9 = snprintf(v8, v7 - v8, "%.*s.", v6, (const char *)v4 + 1);
      if ((v9 & 0x80000000) != 0 || v7 - v8 <= v9)
        return 0xFFFFFFFFLL;
      v8 += v9;
      v4 = &(*a3)[**a3 + 1];
      *a3 = v4;
      v6 = *v4;
      if (!*v4)
        goto LABEL_12;
    }
  }
  LODWORD(v8) = (_DWORD)__str;
LABEL_12:
  *a3 = v4 + 1;
  return ((_DWORD)v8 - v5);
}

BOOL nw_resolver_set_interface_on_endpoint(void *a1, unsigned int a2, void *a3)
{
  _BYTE *v5;
  id v6;
  id v7;
  NWConcrete_nw_interface *v8;
  _BOOL8 v9;
  NSObject *v10;
  const char *v11;
  NSObject *v12;
  uint32_t v13;
  int v14;
  int v16;
  const char *v17;
  __int16 v18;
  _BYTE v19[20];
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (a2 - 1 <= 0xFFFFFFFD)
  {
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    v7 = (id)nw_context_copy_implicit_context::implicit_context;
    v8 = nw_path_copy_interface_with_generation(v7, a2, 0);

    v9 = v8 != 0;
    if (v8)
    {
      nw_endpoint_set_interface(v6, v8);
LABEL_20:

      goto LABEL_21;
    }
    if (v5)
    {
      if ((v5[346] & 0x20) != 0)
        goto LABEL_20;
      if (v5[256])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v10 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
          goto LABEL_19;
        v16 = 136446978;
        v17 = "nw_resolver_set_interface_on_endpoint";
        v18 = 2082;
        *(_QWORD *)v19 = v5 + 256;
        *(_WORD *)&v19[8] = 2082;
        *(_QWORD *)&v19[10] = nw_endpoint_get_logging_description(v6);
        *(_WORD *)&v19[18] = 1024;
        v20 = a2;
        v11 = "%{public}s [C%{public}s] Not adding the endpoint %{public}s on interface %u to array due to invalid interface";
        v12 = v10;
        v13 = 38;
        goto LABEL_18;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v14 = *((_DWORD *)v5 + 85);
        v16 = 136446978;
        v17 = "nw_resolver_set_interface_on_endpoint";
        v18 = 1024;
        *(_DWORD *)v19 = v14;
        *(_WORD *)&v19[4] = 2082;
        *(_QWORD *)&v19[6] = nw_endpoint_get_logging_description(v6);
        *(_WORD *)&v19[14] = 1024;
        *(_DWORD *)&v19[16] = a2;
        v11 = "%{public}s [R%u] Not adding the endpoint %{public}s on interface %u to array due to invalid interface";
        v12 = v10;
        v13 = 34;
        goto LABEL_18;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v16 = 136446722;
        v17 = "nw_resolver_set_interface_on_endpoint";
        v18 = 2082;
        *(_QWORD *)v19 = nw_endpoint_get_logging_description(v6);
        *(_WORD *)&v19[8] = 1024;
        *(_DWORD *)&v19[10] = a2;
        v11 = "%{public}s Not adding the endpoint %{public}s on interface %u to array due to invalid interface";
        v12 = v10;
        v13 = 28;
LABEL_18:
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, v11, (uint8_t *)&v16, v13);
      }
    }
LABEL_19:

    goto LABEL_20;
  }
  v9 = 1;
LABEL_21:

  return v9;
}

void sub_1833F1708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_resolver_srv_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke(uint64_t a1, void *a2)
{
  return nw_endpoint_host_endpoint_matches_hostname(a2, *(const char **)(a1 + 32), bswap32(*(unsigned __int16 *)(a1 + 48)) >> 16, *(_DWORD *)(a1 + 40), 1);
}

BOOL nw_resolver_insert_endpoint_locked(void *a1, void *a2, void *a3)
{
  id *v5;
  id v6;
  id v7;
  _BOOL8 v8;
  id *v9;
  unsigned __int8 *v10;
  id v11;
  id v12;
  id *v13;
  id v14;
  int v15;
  _QWORD v17[4];
  id v18;
  id *v19;
  id v20;
  id v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  char v31;

  v5 = a1;
  v6 = a2;
  v7 = a3;
  v28 = 0;
  v29 = &v28;
  v30 = 0x2020000000;
  v31 = 1;
  v24 = 0;
  v25 = &v24;
  v26 = 0x2020000000;
  v27 = 0;
  v8 = nw_array_create();
  v9 = v5 + 18;
  v10 = (unsigned __int8 *)v5[18];
  v17[0] = MEMORY[0x1E0C809B0];
  v17[1] = 3221225472;
  v17[2] = ___ZL34nw_resolver_insert_endpoint_lockedP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectU13block_pointerFbS3_S3_E_block_invoke;
  v17[3] = &unk_1E149AD78;
  v11 = v7;
  v21 = v11;
  v12 = v6;
  v18 = v12;
  v22 = &v24;
  v23 = &v28;
  v13 = v5;
  v19 = v13;
  v14 = (id)v8;
  v20 = v14;
  nw_array_apply(v10, (uint64_t)v17);
  v15 = *((unsigned __int8 *)v29 + 24);
  if (*((_BYTE *)v29 + 24))
  {
    if (!*((_BYTE *)v25 + 24))
      nw_array_append((uint64_t)v14, v12);
    objc_storeStrong(v9, (id)v8);
  }

  _Block_object_dispose(&v24, 8);
  _Block_object_dispose(&v28, 8);

  return v15 != 0;
}

uint64_t ___ZL32nw_resolver_srv_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke_2(uint64_t a1, void *a2)
{
  return nw_endpoint_host_endpoint_matches_hostname(a2, *(const char **)(a1 + 32), bswap32(*(unsigned __int16 *)(a1 + 48)) >> 16, *(_DWORD *)(a1 + 40), 1);
}

BOOL nw_resolver_remove_endpoint_locked(void *a1, void *a2)
{
  id *v3;
  id v4;
  _BOOL8 v5;
  unsigned __int8 *v6;
  id v7;
  id v8;
  int v9;
  _QWORD v11[4];
  id v12;
  id v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char v19;

  v3 = a1;
  v4 = a2;
  v16 = 0;
  v17 = &v16;
  v18 = 0x2020000000;
  v19 = 0;
  v5 = nw_array_create();
  v6 = (unsigned __int8 *)v3[18];
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = ___ZL34nw_resolver_remove_endpoint_lockedP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectU13block_pointerFbS3_S3_E_block_invoke;
  v11[3] = &unk_1E149B010;
  v7 = v4;
  v14 = v7;
  v15 = &v16;
  v12 = 0;
  v8 = (id)v5;
  v13 = v8;
  nw_array_apply(v6, (uint64_t)v11);
  v9 = *((unsigned __int8 *)v17 + 24);
  if (*((_BYTE *)v17 + 24))
    objc_storeStrong(v3 + 18, (id)v5);

  _Block_object_dispose(&v16, 8);
  return v9 != 0;
}

uint64_t ___ZL34nw_resolver_remove_endpoint_lockedP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectU13block_pointerFbS3_S3_E_block_invoke(uint64_t *a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if ((*(unsigned int (**)(void))(a1[6] + 16))())
    *(_BYTE *)(*(_QWORD *)(a1[7] + 8) + 24) = 1;
  else
    nw_array_append(a1[5], v4);

  return 1;
}

void sub_1833F1A8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_resolver_insert_endpoint_lockedP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectU13block_pointerFbS3_S3_E_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  NSObject *v9;
  nw_endpoint_type_t type;
  nw_endpoint_type_t v11;
  unsigned int priority;
  unsigned int v13;
  NSObject *v14;
  const char *v15;
  NSObject *v16;
  uint32_t v17;
  unsigned int weight;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  int required_interface_index;
  int v23;
  int v24;
  sockaddr *address;
  sockaddr *v26;
  int ignore_resolver_stats;
  void *v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  _BYTE v33[10];
  _BYTE v34[6];
  nw_endpoint_type_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!(*(unsigned int (**)(void))(*(_QWORD *)(a1 + 56) + 16))())
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
    {
LABEL_45:
      nw_array_append(*(_QWORD *)(a1 + 48), v4);
      goto LABEL_46;
    }
    v6 = *(void **)(a1 + 32);
    v7 = (char *)*(id *)(a1 + 40);
    v8 = v6;
    v9 = v4;
    type = nw_endpoint_get_type(v8);
    v11 = nw_endpoint_get_type(v9);
    if (type == v11)
    {
      priority = nw_endpoint_get_priority(v8);
      v13 = nw_endpoint_get_priority(v9);
      if (nw_endpoint_get_type(*((nw_endpoint_t *)v7 + 3)) == (nw_endpoint_type_url|nw_endpoint_type_address))
      {
        if (priority && v13 && priority != v13)
        {
LABEL_22:

          if (priority >= v13)
            goto LABEL_45;
          goto LABEL_44;
        }
      }
      else if (priority != v13)
      {
        if (priority)
        {

          if (priority > (unsigned __int16)(v13 - 1))
            goto LABEL_45;
          goto LABEL_44;
        }
        goto LABEL_36;
      }
      priority = nw_endpoint_get_weight(v8);
      weight = nw_endpoint_get_weight(v9);
      if (priority)
      {
        v13 = weight;
        if (weight)
        {
          if (priority != weight)
            goto LABEL_22;
        }
      }
      if (type == nw_endpoint_type_address)
      {
        v19 = nw_endpoint_copy_interface(v8);
        v20 = nw_endpoint_copy_interface(v9);
        v21 = *((_QWORD *)v7 + 26);
        if (v21)
          required_interface_index = *(_DWORD *)(v21 + 8);
        else
          required_interface_index = nw_parameters_get_required_interface_index(*((void **)v7 + 2));
        v24 = required_interface_index;
        if (v19)
          v24 = v19[2];
        v29 = v19;
        if (v20)
          required_interface_index = v20[2];
        address = (sockaddr *)nw_endpoint_get_address(v8);
        v26 = (sockaddr *)nw_endpoint_get_address(v9);
        ignore_resolver_stats = nw_parameters_get_ignore_resolver_stats(*((void **)v7 + 2));
        LODWORD(v26) = sa_dst_compare_internal(&address->sa_len, v24, &v26->sa_len, required_interface_index, ignore_resolver_stats ^ 1u);

        if ((int)v26 >= 1)
        {

LABEL_44:
          nw_array_append(*(_QWORD *)(a1 + 48), *(void **)(a1 + 32));
          *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 1;
          goto LABEL_45;
        }
      }
LABEL_36:

      goto LABEL_45;
    }
    if (v7)
    {
      if ((v7[346] & 0x20) != 0)
        goto LABEL_36;
      if (v7[256])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v14 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          goto LABEL_35;
        *(_DWORD *)buf = 136446978;
        v31 = "nw_resolver_endpoint_should_be_before";
        v32 = 2082;
        *(_QWORD *)v33 = v7 + 256;
        *(_WORD *)&v33[8] = 1024;
        *(_DWORD *)v34 = type;
        *(_WORD *)&v34[4] = 1024;
        v35 = v11;
        v15 = "%{public}s [C%{public}s] Endpoint types do not match (%u != %u)";
        v16 = v14;
        v17 = 34;
        goto LABEL_34;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v23 = *((_DWORD *)v7 + 85);
        *(_DWORD *)buf = 136446978;
        v31 = "nw_resolver_endpoint_should_be_before";
        v32 = 1024;
        *(_DWORD *)v33 = v23;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = type;
        *(_WORD *)v34 = 1024;
        *(_DWORD *)&v34[2] = v11;
        v15 = "%{public}s [R%u] Endpoint types do not match (%u != %u)";
        v16 = v14;
        v17 = 30;
        goto LABEL_34;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446722;
        v31 = "nw_resolver_endpoint_should_be_before";
        v32 = 1024;
        *(_DWORD *)v33 = type;
        *(_WORD *)&v33[4] = 1024;
        *(_DWORD *)&v33[6] = v11;
        v15 = "%{public}s Endpoint types do not match (%u != %u)";
        v16 = v14;
        v17 = 24;
LABEL_34:
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, v15, buf, v17);
      }
    }
LABEL_35:

    goto LABEL_36;
  }
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24))
  {
LABEL_46:
    v5 = 1;
    goto LABEL_47;
  }
  v5 = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 0;
LABEL_47:

  return v5;
}

void sub_1833F1EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void nw_resolver_cancel_query_timer(NWConcrete_nw_resolver *a1)
{
  uint64_t v1;
  NWConcrete_nw_resolver *v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  int v9;
  const char *logging_description;
  int v11;
  const char *v12;
  __int16 v13;
  _BYTE v14[18];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3 = *((_QWORD *)v2 + 16);
  if (!v3)
    goto LABEL_13;
  if ((*((_BYTE *)v2 + 346) & 0x20) != 0)
  {
LABEL_12:
    nw_queue_cancel_source(v3, v1);
    *((_QWORD *)v2 + 16) = 0;
    goto LABEL_13;
  }
  if (!*((_BYTE *)v2 + 256))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      goto LABEL_11;
    v9 = *((_DWORD *)v2 + 85);
    logging_description = nw_endpoint_get_logging_description(*((void **)v2 + 3));
    v11 = 136446722;
    v12 = "nw_resolver_cancel_query_timer";
    v13 = 1024;
    *(_DWORD *)v14 = v9;
    *(_WORD *)&v14[4] = 2082;
    *(_QWORD *)&v14[6] = logging_description;
    v6 = "%{public}s [R%u] Cancelling query timer for %{public}s";
    v7 = v4;
    v8 = 28;
    goto LABEL_10;
  }
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v4 = (id)gconnectionLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v5 = nw_endpoint_get_logging_description(*((void **)v2 + 3));
    v11 = 136446722;
    v12 = "nw_resolver_cancel_query_timer";
    v13 = 2082;
    *(_QWORD *)v14 = (char *)v2 + 256;
    *(_WORD *)&v14[8] = 2082;
    *(_QWORD *)&v14[10] = v5;
    v6 = "%{public}s [C%{public}s] Cancelling query timer for %{public}s";
    v7 = v4;
    v8 = 32;
LABEL_10:
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v11, v8);
  }
LABEL_11:

  v3 = *((_QWORD *)v2 + 16);
  if (v3)
    goto LABEL_12;
LABEL_13:

}

void sub_1833F2108(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_resolver_ptr_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  unsigned int port;
  uint64_t v6;

  v3 = a2;
  v4 = *(const char **)(a1 + 40);
  port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(_QWORD *)(a1 + 32) + 24));
  v6 = nw_endpoint_host_endpoint_matches_hostname(v3, v4, __rev16(port), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));

  return v6;
}

void sub_1833F218C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL32nw_resolver_ptr_resolve_callbackP16_DNSServiceRef_tjjiPKctttPKvjPv_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  unsigned int port;
  uint64_t v6;

  v3 = a2;
  v4 = *(const char **)(a1 + 40);
  port = nw_endpoint_get_port(*(nw_endpoint_t *)(*(_QWORD *)(a1 + 32) + 24));
  v6 = nw_endpoint_host_endpoint_matches_hostname(v3, v4, __rev16(port), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 52));

  return v6;
}

void sub_1833F21F8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  int v21;
  _QWORD v22[4];
  _QWORD *v23;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 346) & 0x20) != 0)
      goto LABEL_14;
    if (*(_BYTE *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
        goto LABEL_13;
      v4 = *(_QWORD *)(a1 + 32) + 256;
      *(_DWORD *)buf = 136446466;
      v25 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      v26 = 2082;
      v27 = v4;
      v5 = "%{public}s [C%{public}s] Weighting timer timed out";
      v6 = v3;
      v7 = 22;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
      *(_DWORD *)buf = 136446466;
      v25 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      v26 = 1024;
      LODWORD(v27) = v8;
      v5 = "%{public}s [R%u] Weighting timer timed out";
      v6 = v3;
      v7 = 18;
      goto LABEL_12;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      v5 = "%{public}s Weighting timer timed out";
      v6 = v3;
      v7 = 12;
LABEL_12:
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, v5, buf, v7);
    }
  }
LABEL_13:

  v2 = *(_QWORD *)(a1 + 32);
LABEL_14:
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 12));
  v10 = a1 + 32;
  v9 = *(_QWORD **)(a1 + 32);
  v11 = (unsigned __int8 *)v9[19];
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 3221225472;
  v22[2] = ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke_254;
  v22[3] = &unk_1E14AC200;
  v23 = v9;
  nw_array_apply(v11, (uint64_t)v22);
  v12 = *(void **)(*(_QWORD *)(a1 + 32) + 152);
  *(_QWORD *)(*(_QWORD *)v10 + 152) = 0;

  *(_BYTE *)(*(_QWORD *)v10 + 348) |= 1u;
  v14 = *(_QWORD **)(a1 + 32);
  if (v14[20])
  {
    nw_queue_cancel_source(*(_QWORD *)(*(_QWORD *)v10 + 160), v13);
    *(_QWORD *)(*(_QWORD *)(a1 + 32) + 160) = 0;
    v14 = *(_QWORD **)(a1 + 32);
  }
  nw_resolver_update_status_locked(v14, 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v15 = *(_QWORD *)(a1 + 32);
  if (!v15)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v25 = "nw_resolver_bonjour_resolve_callback_block_invoke_2";
      v18 = "%{public}s Marking preferred weighting as completed";
      v19 = v16;
      v20 = 12;
LABEL_27:
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, v18, buf, v20);
    }
LABEL_28:

    goto LABEL_29;
  }
  if ((*(_BYTE *)(v15 + 346) & 0x20) == 0)
  {
    if (*(_BYTE *)(v15 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v16 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        goto LABEL_28;
      v17 = *(_QWORD *)(a1 + 32) + 256;
      *(_DWORD *)buf = 136446466;
      v25 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      v26 = 2082;
      v27 = v17;
      v18 = "%{public}s [C%{public}s] Marking preferred weighting as completed";
      v19 = v16;
      v20 = 22;
      goto LABEL_27;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v21 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
      *(_DWORD *)buf = 136446466;
      v25 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      v26 = 1024;
      LODWORD(v27) = v21;
      v18 = "%{public}s [R%u] Marking preferred weighting as completed";
      v19 = v16;
      v20 = 18;
      goto LABEL_27;
    }
    goto LABEL_28;
  }
LABEL_29:

}

void sub_1833F265C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke_258(uint64_t a1, void *a2, void *a3)
{
  return nw_endpoint_is_equal(a2, a3, 1);
}

uint64_t ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke_254(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  _BYTE *v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  int v11;
  int v13;
  const char *v14;
  __int16 v15;
  _BYTE v16[18];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = *(_BYTE **)(a1 + 32);
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v13 = 136446466;
      v14 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      v15 = 2112;
      *(_QWORD *)v16 = v4;
      v8 = "%{public}s Inserting non-preferred host endpoint %@";
      v9 = v6;
      v10 = 22;
LABEL_12:
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, v8, (uint8_t *)&v13, v10);
    }
LABEL_13:

    v5 = *(_BYTE **)(a1 + 32);
    goto LABEL_14;
  }
  if ((v5[346] & 0x20) == 0)
  {
    if (v5[256])
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v6 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v7 = *(_QWORD *)(a1 + 32) + 256;
      v13 = 136446722;
      v14 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      v15 = 2082;
      *(_QWORD *)v16 = v7;
      *(_WORD *)&v16[8] = 2112;
      *(_QWORD *)&v16[10] = v4;
      v8 = "%{public}s [C%{public}s] Inserting non-preferred host endpoint %@";
      v9 = v6;
      v10 = 32;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v11 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
      v13 = 136446722;
      v14 = "nw_resolver_bonjour_resolve_callback_block_invoke";
      v15 = 1024;
      *(_DWORD *)v16 = v11;
      *(_WORD *)&v16[4] = 2112;
      *(_QWORD *)&v16[6] = v4;
      v8 = "%{public}s [R%u] Inserting non-preferred host endpoint %@";
      v9 = v6;
      v10 = 28;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_14:
  nw_resolver_insert_endpoint_locked(v5, v4, &__block_literal_global_256);

  return 1;
}

uint64_t ___ZL36nw_resolver_bonjour_resolve_callbackP16_DNSServiceRef_tjjiPKcS2_ttPKhPv_block_invoke_255(uint64_t a1, void *a2, void *a3)
{
  return nw_endpoint_is_equal(a2, a3, 1);
}

void ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_2(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  _BYTE v13[18];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) != 2)
  {
    if ((*(_BYTE *)(v2 + 346) & 0x20) != 0)
    {
LABEL_12:
      nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v2);
      return;
    }
    if (*(_BYTE *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        goto LABEL_11;
      v4 = *(_QWORD *)(a1 + 32);
      v10 = 136446722;
      v11 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      v12 = 2082;
      *(_QWORD *)v13 = v4 + 256;
      *(_WORD *)&v13[8] = 2048;
      *(_QWORD *)&v13[10] = v4;
      v5 = "%{public}s [C%{public}s] restarting resolver %p, AWDL trigger browse found endpoint";
      v6 = v3;
      v7 = 32;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = (id)gLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
LABEL_11:

        v2 = *(_QWORD *)(a1 + 32);
        goto LABEL_12;
      }
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_DWORD *)(v8 + 340);
      v10 = 136446722;
      v11 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      v12 = 1024;
      *(_DWORD *)v13 = v9;
      *(_WORD *)&v13[4] = 2048;
      *(_QWORD *)&v13[6] = v8;
      v5 = "%{public}s [R%u] restarting resolver %p, AWDL trigger browse found endpoint";
      v6 = v3;
      v7 = 28;
    }
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v10, v7);
    goto LABEL_11;
  }
}

void ___ZL40nw_resolver_should_wait_for_awdl_triggerP22NWConcrete_nw_resolver_block_invoke_243(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  uint64_t v8;
  int v9;
  int v10;
  const char *v11;
  __int16 v12;
  _BYTE v13[18];
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 8) != 2)
  {
    if ((*(_BYTE *)(v2 + 346) & 0x20) != 0)
    {
LABEL_12:
      nw_resolver_restart_dns_service_locked((NWConcrete_nw_resolver *)v2);
      return;
    }
    if (*(_BYTE *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        goto LABEL_11;
      v4 = *(_QWORD *)(a1 + 32);
      v10 = 136446722;
      v11 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      v12 = 2082;
      *(_QWORD *)v13 = v4 + 256;
      *(_WORD *)&v13[8] = 2048;
      *(_QWORD *)&v13[10] = v4;
      v5 = "%{public}s [C%{public}s] restarting resolver %p, AWDL trigger browse failed";
      v6 = v3;
      v7 = 32;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = (id)gLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
LABEL_11:

        v2 = *(_QWORD *)(a1 + 32);
        goto LABEL_12;
      }
      v8 = *(_QWORD *)(a1 + 32);
      v9 = *(_DWORD *)(v8 + 340);
      v10 = 136446722;
      v11 = "nw_resolver_should_wait_for_awdl_trigger_block_invoke";
      v12 = 1024;
      *(_DWORD *)v13 = v9;
      *(_WORD *)&v13[4] = 2048;
      *(_QWORD *)&v13[6] = v8;
      v5 = "%{public}s [R%u] restarting resolver %p, AWDL trigger browse failed";
      v6 = v3;
      v7 = 28;
    }
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, v5, (uint8_t *)&v10, v7);
    goto LABEL_11;
  }
}

void nw_resolver_update_flags_locked(NWConcrete_nw_resolver *a1, NWConcrete_nw_resolver_service *a2, int a3, int a4, const sockaddr *a5, int a6, int a7)
{
  NWConcrete_nw_resolver_service *v13;
  NWConcrete_nw_resolver *v14;
  __int16 v15;
  int sa_family;
  char v17;
  char v18;
  __int16 v19;
  id *v20;
  _BOOL8 v21;
  unsigned __int8 *v22;
  id v23;
  __int16 v24;
  int v25;
  __int16 v26;
  int v27;
  unsigned __int16 v28;
  __int16 v29;
  int v30;
  unsigned __int16 flags;
  __int16 v32;
  __int16 v33;
  __int16 v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  NWConcrete_nw_resolver *v38;
  __int16 v39;
  __int16 v40;
  __int16 v41;
  int v42;
  int v43;
  NWConcrete_nw_resolver *v44;
  _QWORD v45[4];
  id v46;
  uint64_t *v47;
  char v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  char v52;

  v44 = a1;
  v13 = a2;
  v14 = v44;
  v15 = *((_WORD *)v44 + 44) & 0xFFEF | (16 * (a3 & 1));
  *((_WORD *)v44 + 44) = v15;
  if ((*((_BYTE *)v44 + 347) & 2) == 0)
  {
    v15 |= 0x80u;
    *((_WORD *)v44 + 44) = v15;
  }
  if (!a5)
    goto LABEL_32;
  sa_family = a5->sa_family;
  if ((a3 & 0x40000000) != 0 && sa_family == 2)
  {
    v17 = 4;
LABEL_10:
    *((_BYTE *)v44 + 346) |= v17;
    sa_family = a5->sa_family;
    goto LABEL_11;
  }
  if ((a3 & 0x40000000) != 0 && sa_family == 30)
  {
    v17 = 8;
    goto LABEL_10;
  }
LABEL_11:
  if (a3 < 0)
  {
    if (sa_family == 30)
    {
      if (v13)
      {
        v13->flags |= 0x40u;
        goto LABEL_32;
      }
      v24 = v15 | 0x40;
    }
    else
    {
      if (sa_family != 2)
        goto LABEL_32;
      if (v13)
      {
        v13->flags |= 0x20u;
        goto LABEL_32;
      }
      v24 = v15 | 0x20;
    }
    *((_WORD *)v44 + 44) = v24;
  }
  else
  {
    if (sa_family == 2)
    {
      if (v13 || (v15 & 0x20) == 0)
        goto LABEL_32;
      v42 = a6;
      v43 = a7;
      v18 = 2;
      v19 = -38;
    }
    else
    {
      if (v13 || sa_family != 30 || (v15 & 0x40) == 0)
        goto LABEL_32;
      v42 = a6;
      v43 = a7;
      v18 = 30;
      v19 = -75;
    }
    *((_WORD *)v44 + 44) = v15 & v19;
    v20 = v44;
    v49 = 0;
    v50 = &v49;
    v51 = 0x2020000000;
    v52 = 0;
    v21 = nw_array_create();
    v22 = (unsigned __int8 *)v20[18];
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 3221225472;
    v45[2] = ___ZL35nw_resolver_remove_sa_family_lockedP22NWConcrete_nw_resolverh_block_invoke;
    v45[3] = &unk_1E149AF28;
    v48 = v18;
    v47 = &v49;
    v23 = (id)v21;
    v46 = v23;
    nw_array_apply(v22, (uint64_t)v45);
    if (*((_BYTE *)v50 + 24))
      objc_storeStrong(v20 + 18, (id)v21);

    _Block_object_dispose(&v49, 8);
    v14 = v44;
    a6 = v42;
    a7 = v43;
  }
LABEL_32:
  v25 = *((_DWORD *)v14 + 20);
  if (v25 == 1)
  {
    v26 = 2056;
  }
  else
  {
    if (v25 != 2)
      goto LABEL_37;
    v26 = 1028;
  }
  *((_WORD *)v14 + 44) |= v26;
LABEL_37:
  if (!a4)
  {
    if (!a5)
      goto LABEL_85;
    if (a5->sa_len > 0x80u)
      goto LABEL_85;
    v30 = a5->sa_family;
    if (v30 != 30 && v30 != 2)
      goto LABEL_85;
    if ((a3 & 2) != 0)
    {
      if (v30 == 30)
      {
        if (a6)
          v39 = 512;
        else
          v39 = 8;
        *((_WORD *)v44 + 44) |= v39;
        if (v13)
          v13->flags |= 8u;
      }
      else
      {
        if (a6)
          v36 = 256;
        else
          v36 = 4;
        *((_WORD *)v44 + 44) |= v36;
        if (v13)
          v13->flags |= 4u;
      }
      goto LABEL_85;
    }
    if (v30 == 30)
    {
      if (v13)
      {
        flags = v13->flags;
        v32 = -11;
        goto LABEL_75;
      }
      v38 = v44;
      v40 = *((_WORD *)v44 + 44);
      v41 = -11;
    }
    else
    {
      if (v13)
      {
        flags = v13->flags;
        v32 = -6;
LABEL_75:
        v13->flags = flags & v32;
        goto LABEL_85;
      }
      v38 = v44;
      v40 = *((_WORD *)v44 + 44);
      v41 = -6;
    }
    v37 = v40 & v41;
    goto LABEL_84;
  }
  if (a4 != -65554 || !a5)
  {
    if (v13)
    {
      v13->flags |= 3u;
      if ((*((_WORD *)v14 + 44) & 0xC) != 0)
        goto LABEL_85;
    }
    else
    {
      v33 = *((_WORD *)v14 + 44) | 3;
      *((_WORD *)v14 + 44) = v33;
      if ((v33 & 0xC) != 0)
        goto LABEL_85;
    }
    *((_DWORD *)v44 + 21) = a4;
    goto LABEL_85;
  }
  v27 = a5->sa_family;
  if (v27 != 30)
  {
    if (v27 != 2)
      goto LABEL_85;
    if (v13)
    {
      v28 = v13->flags;
      v13->flags = v28 | 1;
      if (a7)
      {
        v29 = 1025;
LABEL_61:
        v13->flags = v28 | v29;
        goto LABEL_85;
      }
      goto LABEL_85;
    }
    v34 = *((_WORD *)v44 + 44);
    *((_WORD *)v44 + 44) = v34 | 1;
    if (!a7)
      goto LABEL_85;
    v35 = 1025;
    goto LABEL_72;
  }
  if (!v13)
  {
    v34 = *((_WORD *)v14 + 44);
    *((_WORD *)v14 + 44) = v34 | 2;
    if (!a7)
      goto LABEL_85;
    v35 = 2050;
LABEL_72:
    v37 = v34 | v35;
    v38 = v44;
LABEL_84:
    *((_WORD *)v38 + 44) = v37;
    goto LABEL_85;
  }
  v28 = v13->flags;
  v13->flags = v28 | 2;
  if (a7)
  {
    v29 = 2050;
    goto LABEL_61;
  }
LABEL_85:

}

BOOL nw_resolver_should_scope_address(const sockaddr *a1)
{
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v2 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v12 = "nw_resolver_should_scope_address";
    v3 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v9 = 0;
    if (!__nwlog_fault(v3, &type, &v9))
      goto LABEL_23;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_resolver_should_scope_address";
        v6 = "%{public}s called with null addr";
LABEL_21:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
    else
    {
      if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v4 = objc_claimAutoreleasedReturnValue();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "nw_resolver_should_scope_address";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null addr, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (!v8)
          goto LABEL_22;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_resolver_should_scope_address";
        v6 = "%{public}s called with null addr, no backtrace";
        goto LABEL_21;
      }
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v12 = "nw_resolver_should_scope_address";
        v6 = "%{public}s called with null addr, backtrace limit exceeded";
        goto LABEL_21;
      }
    }
LABEL_22:

LABEL_23:
    if (v3)
      free(v3);
    return 0;
  }
  return a1->sa_family != 30 || a1->sa_len < 0x18u || (a1->sa_data[6] & 0xFE) != 0xFC;
}

uint64_t ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke(uint64_t a1, void *a2)
{
  return nw_endpoint_address_endpoint_matches_address(a2, *(unsigned __int8 **)(a1 + 32), *(_DWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
}

uint64_t ___ZL33nw_resolver_host_resolve_callbackP16_DNSServiceRef_tjjiPKcPK8sockaddrjPv_block_invoke_2(uint64_t a1, void *a2)
{
  return nw_endpoint_address_endpoint_matches_address(a2, *(unsigned __int8 **)(a1 + 32), *(_DWORD *)(a1 + 40), *(unsigned __int8 *)(a1 + 44));
}

uint64_t ___ZL35nw_resolver_remove_sa_family_lockedP22NWConcrete_nw_resolverh_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;

  v4 = a3;
  if (nw_endpoint_get_type(v4) == nw_endpoint_type_address
    && nw_endpoint_get_address_family(v4) == *(unsigned __int8 *)(a1 + 48))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    nw_array_append(*(_QWORD *)(a1 + 32), v4);
  }

  return 1;
}

void sub_1833F3374(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  _BOOL8 v8;
  _QWORD v10[4];
  NSObject *v11;
  uint64_t v12;

  v4 = a3;
  if (nw_endpoint_get_type(v4) == nw_endpoint_type_address && nw_endpoint_get_address_family(v4) == 2)
  {
    v5 = *(void **)(*(_QWORD *)(a1 + 32) + 200);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 3221225472;
    v10[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2;
    v10[3] = &unk_1E149AE40;
    v6 = v4;
    v7 = *(_QWORD *)(a1 + 40);
    v11 = v6;
    v12 = v7;
    nw_path_enumerate_resolver_configs(v5, v10);

  }
  v8 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 0;

  return v8;
}

void sub_1833F344C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

void ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_189(_QWORD *a1, int a2, int a3)
{
  _DWORD *dns_error;
  void *v7;
  uint64_t v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  const char *v18;
  NSObject *v19;
  uint32_t v20;
  uint64_t v21;
  NWConcrete_nw_resolver_service *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  NSObject *v27;
  uint32_t v28;
  uint64_t v29;
  NSObject *v30;
  uint64_t v31;
  const char *v32;
  NSObject *v33;
  uint32_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  int v41;
  _BOOL8 v42;
  uint64_t v43;
  void *v44;
  int v45;
  _WORD *v46;
  __int16 v47;
  int v48;
  __int16 v49;
  __int16 v50;
  int v51;
  int v52;
  const char *v53;
  __int16 v54;
  _BYTE v55[28];
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(a1[4] + 12));
  switch(a2)
  {
    case 3:
      v21 = a1[4];
      v22 = (NWConcrete_nw_resolver_service *)a1[5];
      if (v22)
      {
        if (v21)
        {
          if ((*(_BYTE *)(v21 + 346) & 0x20) != 0)
          {
LABEL_53:
            nw_resolver_service_cancel_query(v22);
            break;
          }
          if (*(_BYTE *)(v21 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v23 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
              goto LABEL_52;
            v24 = a1[5];
            v25 = a1[4] + 256;
            v52 = 136446722;
            v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            v54 = 2082;
            *(_QWORD *)v55 = v25;
            *(_WORD *)&v55[8] = 2114;
            *(_QWORD *)&v55[10] = v24;
            v26 = "%{public}s [C%{public}s] Invalidating getaddrinfo DNS object for %{public}@";
            v27 = v23;
            v28 = 32;
            goto LABEL_51;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v23 = (id)gLogObj;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            v39 = a1[5];
            v40 = *(_DWORD *)(a1[4] + 340);
            v52 = 136446722;
            v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            v54 = 1024;
            *(_DWORD *)v55 = v40;
            *(_WORD *)&v55[4] = 2114;
            *(_QWORD *)&v55[6] = v39;
            v26 = "%{public}s [R%u] Invalidating getaddrinfo DNS object for %{public}@";
            v27 = v23;
            v28 = 28;
            goto LABEL_51;
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v23 = (id)gLogObj;
          if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
          {
            v36 = a1[5];
            v52 = 136446466;
            v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            v54 = 2114;
            *(_QWORD *)v55 = v36;
            v26 = "%{public}s Invalidating getaddrinfo DNS object for %{public}@";
            v27 = v23;
            v28 = 22;
LABEL_51:
            _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_INFO, v26, (uint8_t *)&v52, v28);
          }
        }
LABEL_52:

        v22 = (NWConcrete_nw_resolver_service *)a1[5];
        goto LABEL_53;
      }
      if (v21)
      {
        if ((*(_BYTE *)(v21 + 346) & 0x20) != 0)
          goto LABEL_88;
        if (*(_BYTE *)(v21 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v30 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
            goto LABEL_87;
          v31 = a1[4] + 256;
          v52 = 136446466;
          v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          v54 = 2082;
          *(_QWORD *)v55 = v31;
          v32 = "%{public}s [C%{public}s] Invalidating getaddrinfo DNS object";
          v33 = v30;
          v34 = 22;
          goto LABEL_86;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v30 = (id)gLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          v51 = *(_DWORD *)(a1[4] + 340);
          v52 = 136446466;
          v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          v54 = 1024;
          *(_DWORD *)v55 = v51;
          v32 = "%{public}s [R%u] Invalidating getaddrinfo DNS object";
          v33 = v30;
          v34 = 18;
          goto LABEL_86;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v30 = (id)gLogObj;
        if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
        {
          v52 = 136446210;
          v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          v32 = "%{public}s Invalidating getaddrinfo DNS object";
          v33 = v30;
          v34 = 12;
LABEL_86:
          _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_INFO, v32, (uint8_t *)&v52, v34);
        }
      }
LABEL_87:

      v21 = a1[4];
LABEL_88:
      if (*(_QWORD *)(v21 + 48) == a1[6])
        nw_resolver_cancel_query_locked((NWConcrete_nw_resolver *)v21, 0);
      break;
    case 2:
      if (a1[5])
        break;
      v15 = a1[4];
      if (v15)
      {
        if ((*(_BYTE *)(v15 + 346) & 0x20) != 0)
        {
LABEL_64:
          v42 = nw_array_create();
          v43 = a1[4];
          v44 = *(void **)(v43 + 144);
          *(_QWORD *)(v43 + 144) = v42;

          nw_resolver_update_status_locked(a1[4], 0);
          break;
        }
        if (*(_BYTE *)(v15 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v16 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            goto LABEL_63;
          v17 = a1[4] + 256;
          v52 = 136446466;
          v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          v54 = 2082;
          *(_QWORD *)v55 = v17;
          v18 = "%{public}s [C%{public}s] Removing all results for DNS";
          v19 = v16;
          v20 = 22;
          goto LABEL_62;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          v41 = *(_DWORD *)(a1[4] + 340);
          v52 = 136446466;
          v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          v54 = 1024;
          *(_DWORD *)v55 = v41;
          v18 = "%{public}s [R%u] Removing all results for DNS";
          v19 = v16;
          v20 = 18;
          goto LABEL_62;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          v52 = 136446210;
          v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          v18 = "%{public}s Removing all results for DNS";
          v19 = v16;
          v20 = 12;
LABEL_62:
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, v18, (uint8_t *)&v52, v20);
        }
      }
LABEL_63:

      goto LABEL_64;
    case 1:
      dns_error = nw_error_create_dns_error(a3);
      v8 = a1[4];
      v7 = (void *)a1[5];
      if (v7)
      {
        if (v8)
        {
          if ((*(_BYTE *)(v8 + 346) & 0x20) != 0)
            goto LABEL_69;
          if (*(_BYTE *)(v8 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v9 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
              goto LABEL_68;
            v10 = a1[5];
            v11 = a1[4] + 256;
            v52 = 136446978;
            v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            v54 = 2082;
            *(_QWORD *)v55 = v11;
            *(_WORD *)&v55[8] = 2112;
            *(_QWORD *)&v55[10] = dns_error;
            *(_WORD *)&v55[18] = 2114;
            *(_QWORD *)&v55[20] = v10;
            v12 = "%{public}s [C%{public}s] Got DNS error %@ for %{public}@";
            v13 = v9;
            v14 = 42;
            goto LABEL_67;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = (id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            v37 = a1[5];
            v38 = *(_DWORD *)(a1[4] + 340);
            v52 = 136446978;
            v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            v54 = 1024;
            *(_DWORD *)v55 = v38;
            *(_WORD *)&v55[4] = 2112;
            *(_QWORD *)&v55[6] = dns_error;
            *(_WORD *)&v55[14] = 2114;
            *(_QWORD *)&v55[16] = v37;
            v12 = "%{public}s [R%u] Got DNS error %@ for %{public}@";
            v13 = v9;
            v14 = 38;
            goto LABEL_67;
          }
LABEL_68:

          v8 = a1[4];
          v7 = (void *)a1[5];
          goto LABEL_69;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          goto LABEL_68;
        v35 = a1[5];
        v52 = 136446722;
        v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        v54 = 2112;
        *(_QWORD *)v55 = dns_error;
        *(_WORD *)&v55[8] = 2114;
        *(_QWORD *)&v55[10] = v35;
        v12 = "%{public}s Got DNS error %@ for %{public}@";
      }
      else
      {
        if (!v8)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = (id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            v52 = 136446466;
            v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            v54 = 2112;
            *(_QWORD *)v55 = dns_error;
            v12 = "%{public}s Got DNS error %@";
            v13 = v9;
            v14 = 22;
            goto LABEL_67;
          }
          goto LABEL_68;
        }
        if ((*(_BYTE *)(v8 + 346) & 0x20) != 0)
        {
          v7 = 0;
LABEL_69:
          v46 = v7;
          v47 = *(_WORD *)(v8 + 88) & 0xFFEF;
          *(_WORD *)(v8 + 88) = v47;
          if ((*(_BYTE *)(v8 + 347) & 2) == 0)
          {
            v47 |= 0x80u;
            *(_WORD *)(v8 + 88) = v47;
          }
          v48 = *(_DWORD *)(v8 + 80);
          if (v48 == 1)
          {
            v49 = 2056;
          }
          else
          {
            if (v48 != 2)
              goto LABEL_76;
            v49 = 1028;
          }
          v47 |= v49;
          *(_WORD *)(v8 + 88) = v47;
LABEL_76:
          if (a3)
          {
            if (!v46)
            {
              v50 = v47 | 3;
              *(_WORD *)(v8 + 88) = v50;
              if ((v50 & 0xC) != 0)
                goto LABEL_80;
              goto LABEL_79;
            }
            v46[18] |= 3u;
            if ((*(_WORD *)(v8 + 88) & 0xC) == 0)
LABEL_79:
              *(_DWORD *)(v8 + 84) = a3;
          }
LABEL_80:

          nw_resolver_update_status_locked(a1[4], 0);
          break;
        }
        if (!*(_BYTE *)(v8 + 256))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = (id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            v45 = *(_DWORD *)(a1[4] + 340);
            v52 = 136446722;
            v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            v54 = 1024;
            *(_DWORD *)v55 = v45;
            *(_WORD *)&v55[4] = 2112;
            *(_QWORD *)&v55[6] = dns_error;
            v12 = "%{public}s [R%u] Got DNS error %@";
            v13 = v9;
            v14 = 28;
            goto LABEL_67;
          }
          goto LABEL_68;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v9 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          goto LABEL_68;
        v29 = a1[4] + 256;
        v52 = 136446722;
        v53 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        v54 = 2082;
        *(_QWORD *)v55 = v29;
        *(_WORD *)&v55[8] = 2112;
        *(_QWORD *)&v55[10] = dns_error;
        v12 = "%{public}s [C%{public}s] Got DNS error %@";
      }
      v13 = v9;
      v14 = 32;
LABEL_67:
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, v12, (uint8_t *)&v52, v14);
      goto LABEL_68;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1[4] + 12));
}

void sub_1833F3EC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_191(id *a1, void *a2)
{
  _QWORD *v3;
  id WeakRetained;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  NSObject *v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  uint32_t v14;
  int v15;
  uint64_t v16;
  id v17;
  unsigned __int8 *v18;
  _QWORD v19[4];
  id v20;
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char v25;
  _BYTE buf[32];
  uint64_t *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  WeakRetained = objc_loadWeakRetained(a1 + 6);
  if (WeakRetained && v3 && v3[3] - v3[2] == 8)
  {
    nw_array_get_object_at_index((uint64_t)v3, 0);
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = (void *)v5;
    if (!v5 || (v7 = *(_QWORD *)(v5 + 24) - *(_QWORD *)(v5 + 16)) == 0)
    {
LABEL_22:

      goto LABEL_23;
    }
    v8 = v7 >> 3;
    v9 = (os_unfair_lock_s *)a1[4];
    if (v9)
    {
      if ((v9[86]._os_unfair_lock_opaque & 0x200000) != 0)
      {
LABEL_19:
        os_unfair_lock_lock(v9 + 3);
        v16 = MEMORY[0x1E0C809B0];
        v19[0] = MEMORY[0x1E0C809B0];
        v19[1] = 3221225472;
        v19[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_192;
        v19[3] = &unk_1E14A8D20;
        v20 = a1[4];
        v21 = a1[5];
        nw_array_apply((unsigned __int8 *)v6, (uint64_t)v19);
        v17 = a1[4];
        v22 = 0;
        v23 = &v22;
        v24 = 0x2020000000;
        v25 = 0;
        v18 = (unsigned __int8 *)*((_QWORD *)v17 + 22);
        *(_QWORD *)buf = v16;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL31nw_resolver_check_svcb_completeP22NWConcrete_nw_resolver_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14A8DC0;
        v27 = &v22;
        nw_array_apply(v18, (uint64_t)buf);
        if (!*((_BYTE *)v23 + 24))
          *((_WORD *)v17 + 44) |= 0x80u;
        _Block_object_dispose(&v22, 8);

        nw_resolver_update_status_locked(a1[4], 0);
        os_unfair_lock_unlock((os_unfair_lock_t)a1[4] + 3);

        goto LABEL_22;
      }
      if (LOBYTE(v9[64]._os_unfair_lock_opaque))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v10 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
          goto LABEL_18;
        v11 = (uint64_t)a1[4] + 256;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v11;
        *(_WORD *)&buf[22] = 2048;
        *(_QWORD *)&buf[24] = v8;
        v12 = "%{public}s [C%{public}s] Got %zu expired DNS results from storage cache";
        v13 = v10;
        v14 = 32;
        goto LABEL_17;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        v15 = *((_DWORD *)a1[4] + 85);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v15;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v8;
        v12 = "%{public}s [R%u] Got %zu expired DNS results from storage cache";
        v13 = v10;
        v14 = 28;
        goto LABEL_17;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v8;
        v12 = "%{public}s Got %zu expired DNS results from storage cache";
        v13 = v10;
        v14 = 22;
LABEL_17:
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, v12, buf, v14);
      }
    }
LABEL_18:

    v9 = (os_unfair_lock_s *)a1[4];
    goto LABEL_19;
  }
LABEL_23:

}

void sub_1833F4268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2_194(uint64_t a1, id *a2, uint64_t a3)
{
  id WeakRetained;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  int v11;
  uint64_t v12;
  id *v13;
  id v14;
  unsigned __int8 *address;
  uint64_t tracker_hostname;
  int v17;
  const void *v18;
  int v19;
  const char *v20;
  const char *v21;
  uint64_t v22;
  NSObject *v23;
  uint64_t v24;
  unsigned int v25;
  const char *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned int v31;
  const char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  const char *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  unsigned int v47;
  const char *v48;
  int interface_index;
  uint64_t hostname;
  uint64_t actual_hostname;
  const char *v52;
  NSObject *v53;
  const char *v54;
  uint32_t v55;
  unsigned int v56;
  const char *v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  const char *v61;
  int v62;
  unsigned int v63;
  const char *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  const char *v72;
  const char *v73;
  const char *v74;
  id *v75;
  id v76;
  int protocol;
  int v78;
  const char *provider_name;
  uint64_t v80;
  void *v81;
  int v82;
  void *v83;
  const char *service_name;
  const void *ech_config;
  void *v86;
  unsigned __int16 service_priority;
  unsigned int service_port;
  size_t v89;
  BOOL sensitive_redacted;
  id v91;
  NWConcrete_nw_resolver_service *v92;
  id v93;
  id v94;
  int v95;
  id v96;
  const char *v97;
  char v98;
  char v99;
  id v100;
  unsigned int v101;
  void **v102;
  const sockaddr *v103;
  int v104;
  int v105;
  int sa_family;
  int extended_dns_error_code;
  const char *extended_dns_error_text;
  uint64_t v109;
  NSObject *v110;
  uint64_t v111;
  NSObject *v112;
  const char *v113;
  uint32_t v114;
  NSObject *v115;
  id v116;
  unsigned int v117;
  void **v118;
  _BOOL8 host_with_numeric_port;
  void *v120;
  void *v121;
  unsigned __int16 *v122;
  _BOOL8 v123;
  void *v124;
  dispatch_data_t v125;
  void *v126;
  char *v127;
  NWConcrete_nw_resolver_service *v128;
  NSObject *v129;
  uint64_t v130;
  _BOOL8 v131;
  void *v132;
  NSObject *v133;
  NSObject *v134;
  const char *v135;
  uint32_t v136;
  uint64_t v137;
  _BOOL8 v138;
  uint64_t *v139;
  void *v140;
  NSObject *v141;
  NSObject *v142;
  const char *v143;
  uint32_t v144;
  int v145;
  int v146;
  unsigned int v147;
  int port;
  id *v149;
  int v150;
  _BOOL8 v151;
  unsigned __int8 *v152;
  _QWORD *v153;
  unsigned __int8 *v154;
  OS_nw_endpoint *v155;
  char *v156;
  id *v157;
  NWConcrete_nw_resolver_service *v158;
  NWConcrete_nw_resolver *v159;
  uint64_t doh_uri;
  NSObject *v161;
  NSObject *v162;
  const char *v163;
  uint32_t v164;
  int v165;
  int v166;
  NSObject *v167;
  NSObject *v168;
  const char *v169;
  uint32_t v170;
  int v171;
  uint64_t v172;
  void *v173;
  char *v174;
  uint64_t v175;
  NSObject *v176;
  uint64_t v177;
  NSObject *v178;
  const char *v179;
  uint32_t v180;
  unsigned int negative_reason;
  uint64_t v182;
  NSObject *v183;
  const char *v184;
  uint64_t v185;
  NSObject *v186;
  const char *v187;
  uint32_t v188;
  int v189;
  int v190;
  _BOOL4 v191;
  const char *v192;
  const char *v193;
  int v194;
  int v195;
  void *v196;
  _WORD *v197;
  __int16 v198;
  OS_dispatch_data *v199;
  void *v200;
  void *v201;
  _QWORD *v202;
  unsigned __int8 *v203;
  int v204;
  int v205;
  int v206;
  id v207;
  unsigned __int8 *v208;
  uint64_t v209;
  NSObject *v210;
  uint64_t v211;
  int v212;
  int v213;
  int v214;
  void *v215;
  char *v216;
  NSObject *v217;
  os_log_type_t v218;
  void *v219;
  char *v220;
  NSObject *v221;
  os_log_type_t v222;
  void *v223;
  char *v224;
  NSObject *v225;
  os_log_type_t v226;
  void *v227;
  char *v228;
  NSObject *v229;
  os_log_type_t v230;
  char *v231;
  os_log_type_t v232;
  _BOOL4 v233;
  char *v234;
  os_log_type_t v235;
  _BOOL4 v236;
  char *v237;
  os_log_type_t v238;
  _BOOL4 v239;
  char *v240;
  os_log_type_t v241;
  _BOOL4 v242;
  void *v243;
  char *v244;
  NSObject *v245;
  os_log_type_t v246;
  os_log_type_t v247;
  os_log_type_t v248;
  os_log_type_t v249;
  os_log_type_t v250;
  void *v251;
  void *v252;
  char *v253;
  NSObject *v254;
  os_log_type_t v255;
  char *backtrace_string;
  os_log_type_t v257;
  _BOOL4 v258;
  os_log_type_t v259;
  char *v260;
  os_log_type_t v261;
  _BOOL4 v262;
  NSObject *v263;
  void *v264;
  os_log_type_t v265;
  uint64_t v266;
  id v267;
  char v268;
  unsigned __int16 *object;
  _WORD *v270;
  id v271;
  const char *v272;
  const char *v273;
  char *v274;
  id *v276;
  uint64_t v278;
  _QWORD v279[5];
  int v280;
  _QWORD v281[4];
  _QWORD *v282;
  id v283;
  os_log_type_t *v284;
  _BYTE *v285;
  sockaddr *v286;
  _QWORD v287[4];
  id v288;
  const char *v289;
  size_t v290;
  os_log_type_t type[8];
  os_log_type_t *v292;
  uint64_t v293;
  uint64_t (*v294)(uint64_t, uint64_t);
  void (*v295)(uint64_t);
  _BOOL8 v296;
  sockaddr buf[8];
  _BYTE v298[32];
  _BYTE v299[40];
  id *v300;
  __int16 v301;
  __int16 v302;
  BOOL v303;
  uint64_t v304;

  v304 = *MEMORY[0x1E0C80C00];
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  if (!WeakRetained)
    goto LABEL_457;
  v267 = WeakRetained;
  v278 = a1;
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)&buf[0].sa_len = 136446466;
      *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke_2";
      *(_WORD *)&buf[0].sa_data[10] = 2048;
      *(_QWORD *)&buf[0].sa_data[12] = a3;
      v8 = "%{public}s Got %zu DNS results";
      v9 = v6;
      v10 = 22;
LABEL_13:
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_INFO, v8, &buf[0].sa_len, v10);
    }
LABEL_14:

    goto LABEL_15;
  }
  if ((*(_BYTE *)(v5 + 346) & 0x20) == 0)
  {
    if (*(_BYTE *)(v5 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v6 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        goto LABEL_14;
      v7 = *(_QWORD *)(v278 + 32) + 256;
      *(_DWORD *)&buf[0].sa_len = 136446722;
      *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
      *(_WORD *)&buf[0].sa_data[10] = 2082;
      *(_QWORD *)&buf[0].sa_data[12] = v7;
      *(_WORD *)&buf[1].sa_data[4] = 2048;
      *(_QWORD *)&buf[1].sa_data[6] = a3;
      v8 = "%{public}s [C%{public}s] Got %zu DNS results";
      v9 = v6;
      v10 = 32;
      goto LABEL_13;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      v11 = *(_DWORD *)(*(_QWORD *)(v278 + 32) + 340);
      *(_DWORD *)&buf[0].sa_len = 136446722;
      *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
      *(_WORD *)&buf[0].sa_data[10] = 1024;
      *(_DWORD *)&buf[0].sa_data[12] = v11;
      *(_WORD *)buf[1].sa_data = 2048;
      *(_QWORD *)&buf[1].sa_data[2] = a3;
      v8 = "%{public}s [R%u] Got %zu DNS results";
      v9 = v6;
      v10 = 28;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
LABEL_15:
  v12 = a3;
  if (!a3)
  {
    v266 = v278;
    os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v278 + 32) + 12));
    goto LABEL_456;
  }
  v13 = a2;
  do
  {
    v14 = *v13;
    address = (unsigned __int8 *)dnssd_getaddrinfo_result_get_address();
    tracker_hostname = dnssd_getaddrinfo_result_get_tracker_hostname();
    if (nw_parameters_get_sensitive_redacted(*(void **)(*(_QWORD *)(v278 + 32) + 16)))
    {
      v299[8] = 0;
      *(_QWORD *)v299 = 0;
      if (address)
      {
        v17 = address[1];
        if (v17 == 30)
        {
          if (*((_DWORD *)address + 2)
            || *((_DWORD *)address + 3)
            || *((_DWORD *)address + 4)
            || *((_DWORD *)address + 5))
          {
            v20 = v299;
            __nwlog_salted_hash(address + 8, 16, v299);
            v21 = "IPv6#";
          }
          else
          {
            v21 = "";
            v20 = "IN6ADDR_ANY";
          }
LABEL_50:
          v44 = *(_QWORD *)(v278 + 32);
          if (v44)
          {
            if ((*(_BYTE *)(v44 + 346) & 0x20) != 0)
              goto LABEL_95;
            if (*(_BYTE *)(v44 + 256))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v45 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
                goto LABEL_74;
              v272 = v20;
              v46 = *(_QWORD *)(v278 + 32);
              v47 = dnssd_getaddrinfo_result_get_type() - 1;
              v48 = "?";
              if (v47 <= 4)
                v48 = off_1E149B170[v47];
              interface_index = dnssd_getaddrinfo_result_get_interface_index();
              hostname = dnssd_getaddrinfo_result_get_hostname();
              actual_hostname = dnssd_getaddrinfo_result_get_actual_hostname();
              *(_DWORD *)&buf[0].sa_len = 136448259;
              v52 = "";
              if (tracker_hostname)
                v52 = " tracker";
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(_QWORD *)&buf[0].sa_data[12] = v46 + 256;
              *(_WORD *)&buf[1].sa_data[4] = 2080;
              *(_QWORD *)&buf[1].sa_data[6] = v48;
              *(_WORD *)&buf[2].sa_len = 1024;
              *(_DWORD *)buf[2].sa_data = interface_index;
              *(_WORD *)&buf[2].sa_data[4] = 2085;
              *(_QWORD *)&buf[2].sa_data[6] = hostname;
              *(_WORD *)&buf[3].sa_len = 2085;
              *(_QWORD *)buf[3].sa_data = actual_hostname;
              *(_WORD *)&buf[3].sa_data[8] = 2082;
              *(_QWORD *)&buf[3].sa_data[10] = v21;
              *(_WORD *)&buf[4].sa_data[2] = 2082;
              *(_QWORD *)&buf[4].sa_data[4] = v272;
              *(_WORD *)&buf[4].sa_data[12] = 2082;
              *(_QWORD *)&buf[5].sa_len = v52;
              v53 = v45;
              v54 = "%{public}s [C%{public}s] Got DNS result type %s ifindex=%u %{sensitive}s %{sensitive}s %{public}s%{p"
                    "ublic}s%{public}s";
              v55 = 88;
              goto LABEL_73;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v45 = (id)gLogObj;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
            {
              v273 = v20;
              v62 = *(_DWORD *)(*(_QWORD *)(v278 + 32) + 340);
              v63 = dnssd_getaddrinfo_result_get_type() - 1;
              v64 = "?";
              if (v63 <= 4)
                v64 = off_1E149B170[v63];
              v65 = dnssd_getaddrinfo_result_get_interface_index();
              v66 = dnssd_getaddrinfo_result_get_hostname();
              v67 = dnssd_getaddrinfo_result_get_actual_hostname();
              *(_DWORD *)&buf[0].sa_len = 136448259;
              v68 = "";
              if (tracker_hostname)
                v68 = " tracker";
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 1024;
              *(_DWORD *)&buf[0].sa_data[12] = v62;
              *(_WORD *)buf[1].sa_data = 2080;
              *(_QWORD *)&buf[1].sa_data[2] = v64;
              *(_WORD *)&buf[1].sa_data[10] = 1024;
              *(_DWORD *)&buf[1].sa_data[12] = v65;
              *(_WORD *)buf[2].sa_data = 2085;
              *(_QWORD *)&buf[2].sa_data[2] = v66;
              *(_WORD *)&buf[2].sa_data[10] = 2085;
              *(_QWORD *)&buf[2].sa_data[12] = v67;
              *(_WORD *)&buf[3].sa_data[4] = 2082;
              *(_QWORD *)&buf[3].sa_data[6] = v21;
              *(_WORD *)&buf[4].sa_len = 2082;
              *(_QWORD *)buf[4].sa_data = v273;
              *(_WORD *)&buf[4].sa_data[8] = 2082;
              *(_QWORD *)&buf[4].sa_data[10] = v68;
              v53 = v45;
              v54 = "%{public}s [R%u] Got DNS result type %s ifindex=%u %{sensitive}s %{sensitive}s %{public}s%{public}s%{public}s";
              v55 = 84;
LABEL_73:
              _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_INFO, v54, &buf[0].sa_len, v55);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v45 = (id)gLogObj;
            if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
            {
              v56 = dnssd_getaddrinfo_result_get_type() - 1;
              v57 = "?";
              if (v56 <= 4)
                v57 = off_1E149B170[v56];
              v58 = dnssd_getaddrinfo_result_get_interface_index();
              v59 = dnssd_getaddrinfo_result_get_hostname();
              v60 = dnssd_getaddrinfo_result_get_actual_hostname();
              *(_DWORD *)&buf[0].sa_len = 136448003;
              v61 = "";
              if (tracker_hostname)
                v61 = " tracker";
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 2080;
              *(_QWORD *)&buf[0].sa_data[12] = v57;
              *(_WORD *)&buf[1].sa_data[4] = 1024;
              *(_DWORD *)&buf[1].sa_data[6] = v58;
              *(_WORD *)&buf[1].sa_data[10] = 2085;
              *(_QWORD *)&buf[1].sa_data[12] = v59;
              *(_WORD *)&buf[2].sa_data[4] = 2085;
              *(_QWORD *)&buf[2].sa_data[6] = v60;
              *(_WORD *)&buf[3].sa_len = 2082;
              *(_QWORD *)buf[3].sa_data = v21;
              *(_WORD *)&buf[3].sa_data[8] = 2082;
              *(_QWORD *)&buf[3].sa_data[10] = v20;
              *(_WORD *)&buf[4].sa_data[2] = 2082;
              *(_QWORD *)&buf[4].sa_data[4] = v61;
              v53 = v45;
              v54 = "%{public}s Got DNS result type %s ifindex=%u %{sensitive}s %{sensitive}s %{public}s%{public}s%{public}s";
              v55 = 78;
              goto LABEL_73;
            }
          }
LABEL_74:

          goto LABEL_95;
        }
        if (v17 == 2)
        {
          v19 = *((_DWORD *)address + 1);
          v18 = address + 4;
          if (v19)
          {
            v20 = v299;
            __nwlog_salted_hash(v18, 4, v299);
            v21 = "IPv4#";
          }
          else
          {
            v21 = "";
            v20 = "INADDR_ANY";
          }
          goto LABEL_50;
        }
      }
      v21 = "";
      v20 = "<NULL>";
      goto LABEL_50;
    }
    v22 = *(_QWORD *)(v278 + 32);
    if (v22)
    {
      if ((*(_BYTE *)(v22 + 346) & 0x20) != 0)
        goto LABEL_95;
      if (*(_BYTE *)(v22 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v23 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          v24 = *(_QWORD *)(v278 + 32);
          v25 = dnssd_getaddrinfo_result_get_type() - 1;
          v26 = "?";
          if (v25 <= 4)
            v26 = off_1E149B170[v25];
          v27 = dnssd_getaddrinfo_result_get_interface_index();
          v28 = dnssd_getaddrinfo_result_get_hostname();
          v29 = dnssd_getaddrinfo_result_get_actual_hostname();
          if (address)
            v30 = *address;
          else
            v30 = 0;
          *(_DWORD *)&buf[0].sa_len = 136448514;
          v69 = " tracker=";
          if (!tracker_hostname)
            v69 = "";
          *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          if (tracker_hostname)
            v70 = (const char *)tracker_hostname;
          else
            v70 = "";
          *(_WORD *)&buf[0].sa_data[10] = 2082;
          *(_QWORD *)&buf[0].sa_data[12] = v24 + 256;
          *(_WORD *)&buf[1].sa_data[4] = 2080;
          *(_QWORD *)&buf[1].sa_data[6] = v26;
          *(_WORD *)&buf[2].sa_len = 1024;
          *(_DWORD *)buf[2].sa_data = v27;
          *(_WORD *)&buf[2].sa_data[4] = 2082;
          *(_QWORD *)&buf[2].sa_data[6] = v28;
          *(_WORD *)&buf[3].sa_len = 2082;
          *(_QWORD *)buf[3].sa_data = v29;
          *(_WORD *)&buf[3].sa_data[8] = 1040;
          *(_DWORD *)&buf[3].sa_data[10] = v30;
          *(_WORD *)&buf[4].sa_len = 2098;
          *(_QWORD *)buf[4].sa_data = address;
          *(_WORD *)&buf[4].sa_data[8] = 2082;
          *(_QWORD *)&buf[4].sa_data[10] = v69;
          *(_WORD *)&buf[5].sa_data[2] = 2082;
          *(_QWORD *)&buf[5].sa_data[4] = v70;
          _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Got DNS result type %s ifindex=%u %{public}s %{public}s %{public,network:sockaddr}.*P%{public}s%{public}s", &buf[0].sa_len, 0x5Eu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v23 = (id)gLogObj;
        if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
        {
          v37 = *(_DWORD *)(*(_QWORD *)(v278 + 32) + 340);
          v38 = dnssd_getaddrinfo_result_get_type() - 1;
          v39 = "?";
          if (v38 <= 4)
            v39 = off_1E149B170[v38];
          v40 = dnssd_getaddrinfo_result_get_interface_index();
          v41 = dnssd_getaddrinfo_result_get_hostname();
          v42 = dnssd_getaddrinfo_result_get_actual_hostname();
          if (address)
            v43 = *address;
          else
            v43 = 0;
          *(_DWORD *)&buf[0].sa_len = 136448514;
          v73 = "";
          v74 = " tracker=";
          if (tracker_hostname)
            v73 = (const char *)tracker_hostname;
          else
            v74 = "";
          *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
          *(_WORD *)&buf[0].sa_data[10] = 1024;
          *(_DWORD *)&buf[0].sa_data[12] = v37;
          *(_WORD *)buf[1].sa_data = 2080;
          *(_QWORD *)&buf[1].sa_data[2] = v39;
          *(_WORD *)&buf[1].sa_data[10] = 1024;
          *(_DWORD *)&buf[1].sa_data[12] = v40;
          *(_WORD *)buf[2].sa_data = 2082;
          *(_QWORD *)&buf[2].sa_data[2] = v41;
          *(_WORD *)&buf[2].sa_data[10] = 2082;
          *(_QWORD *)&buf[2].sa_data[12] = v42;
          *(_WORD *)&buf[3].sa_data[4] = 1040;
          *(_DWORD *)&buf[3].sa_data[6] = v43;
          *(_WORD *)&buf[3].sa_data[10] = 2098;
          *(_QWORD *)&buf[3].sa_data[12] = address;
          *(_WORD *)&buf[4].sa_data[4] = 2082;
          *(_QWORD *)&buf[4].sa_data[6] = v74;
          *(_WORD *)&buf[5].sa_len = 2082;
          *(_QWORD *)buf[5].sa_data = v73;
          _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, "%{public}s [R%u] Got DNS result type %s ifindex=%u %{public}s %{public}s %{public,network:sockaddr}.*P%{public}s%{public}s", &buf[0].sa_len, 0x5Au);
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
      {
        v31 = dnssd_getaddrinfo_result_get_type() - 1;
        v32 = "?";
        if (v31 <= 4)
          v32 = off_1E149B170[v31];
        v33 = dnssd_getaddrinfo_result_get_interface_index();
        v34 = dnssd_getaddrinfo_result_get_hostname();
        v35 = dnssd_getaddrinfo_result_get_actual_hostname();
        if (address)
          v36 = *address;
        else
          v36 = 0;
        *(_DWORD *)&buf[0].sa_len = 136448258;
        v71 = "";
        v72 = " tracker=";
        if (tracker_hostname)
          v71 = (const char *)tracker_hostname;
        else
          v72 = "";
        *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&buf[0].sa_data[10] = 2080;
        *(_QWORD *)&buf[0].sa_data[12] = v32;
        *(_WORD *)&buf[1].sa_data[4] = 1024;
        *(_DWORD *)&buf[1].sa_data[6] = v33;
        *(_WORD *)&buf[1].sa_data[10] = 2082;
        *(_QWORD *)&buf[1].sa_data[12] = v34;
        *(_WORD *)&buf[2].sa_data[4] = 2082;
        *(_QWORD *)&buf[2].sa_data[6] = v35;
        *(_WORD *)&buf[3].sa_len = 1040;
        *(_DWORD *)buf[3].sa_data = v36;
        *(_WORD *)&buf[3].sa_data[4] = 2098;
        *(_QWORD *)&buf[3].sa_data[6] = address;
        *(_WORD *)&buf[4].sa_len = 2082;
        *(_QWORD *)buf[4].sa_data = v72;
        *(_WORD *)&buf[4].sa_data[8] = 2082;
        *(_QWORD *)&buf[4].sa_data[10] = v71;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, "%{public}s Got DNS result type %s ifindex=%u %{public}s %{public}s %{public,network:sockaddr}.*P%{public}s%{public}s", &buf[0].sa_len, 0x54u);
      }
    }

LABEL_95:
    ++v13;
    --v12;
  }
  while (v12);
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(v278 + 32) + 12));
  v268 = 0;
  v75 = a2;
  do
  {
    v276 = v75;
    v76 = *v75;
    protocol = dnssd_getaddrinfo_result_get_protocol();
    v78 = protocol;
    if ((protocol - 1) < 4)
      *(_DWORD *)(*(_QWORD *)(v278 + 32) + 248) = protocol;
    provider_name = (const char *)dnssd_getaddrinfo_result_get_provider_name();
    v80 = *(_QWORD *)(v278 + 32);
    if ((*(_BYTE *)(v80 + 347) & 0x40) != 0)
    {
      v81 = *(void **)(v80 + 200);
      v287[0] = MEMORY[0x1E0C809B0];
      v287[1] = 3221225472;
      v287[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_201;
      v287[3] = &unk_1E149ACE8;
      v288 = (id)v80;
      v289 = provider_name;
      nw_path_enumerate_resolver_configs(v81, v287);

    }
    if (provider_name)
    {
      if (!strcmp(provider_name, "dns.google"))
        *(_DWORD *)(*(_QWORD *)(v278 + 32) + 252) = 2;
      if (!strcmp(provider_name, "cloudflare-dns.com"))
        *(_DWORD *)(*(_QWORD *)(v278 + 32) + 252) = 1;
      if (!strcmp(provider_name, "dns.quad9.net"))
        *(_DWORD *)(*(_QWORD *)(v278 + 32) + 252) = 3;
    }
    v82 = dnssd_getaddrinfo_result_get_type();
    if (v82 == 5)
    {
      v83 = *(void **)(v278 + 40);
      v274 = (char *)*(id *)(v278 + 32);
      v270 = v83;
      v271 = v76;
      if ((dnssd_getaddrinfo_result_service_is_valid() & 1) == 0)
        goto LABEL_309;
      service_name = (const char *)dnssd_getaddrinfo_result_get_service_name();
      if (!service_name)
      {
        if (v274)
        {
          if ((v274[346] & 0x20) != 0)
            goto LABEL_309;
          if (v274[256])
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v115 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)&buf[0].sa_len = 136446466;
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(_QWORD *)&buf[0].sa_data[12] = v274 + 256;
              _os_log_impl(&dword_182FBE000, v115, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s] Service result did not contain name, ignoring", &buf[0].sa_len, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v115 = (id)gLogObj;
            if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
            {
              v165 = *((_DWORD *)v274 + 85);
              *(_DWORD *)&buf[0].sa_len = 136446466;
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              *(_WORD *)&buf[0].sa_data[10] = 1024;
              *(_DWORD *)&buf[0].sa_data[12] = v165;
              _os_log_impl(&dword_182FBE000, v115, OS_LOG_TYPE_ERROR, "%{public}s [R%u] Service result did not contain name, ignoring", &buf[0].sa_len, 0x12u);
            }
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v115 = (id)gLogObj;
          if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
            _os_log_impl(&dword_182FBE000, v115, OS_LOG_TYPE_ERROR, "%{public}s Service result did not contain name, ignoring", &buf[0].sa_len, 0xCu);
          }
        }

LABEL_309:
        v207 = *(id *)(v278 + 32);
        *(_QWORD *)v299 = 0;
        *(_QWORD *)&v299[8] = v299;
        *(_QWORD *)&v299[16] = 0x2020000000;
        v299[24] = 0;
        v208 = (unsigned __int8 *)*((_QWORD *)v207 + 22);
        *(_QWORD *)&buf[0].sa_len = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[0].sa_data[6] = 3221225472;
        *(_QWORD *)&buf[1].sa_len = ___ZL31nw_resolver_check_svcb_completeP22NWConcrete_nw_resolver_block_invoke;
        *(_QWORD *)&buf[1].sa_data[6] = &unk_1E14A8DC0;
        *(_QWORD *)&buf[2].sa_len = v299;
        nw_array_apply(v208, (uint64_t)buf);
        if (*(_BYTE *)(*(_QWORD *)&v299[8] + 24))
        {
          _Block_object_dispose(v299, 8);

          goto LABEL_326;
        }
        *((_WORD *)v207 + 44) |= 0x80u;
        _Block_object_dispose(v299, 8);

        v209 = *(_QWORD *)(v278 + 32);
        if (v209)
        {
          if ((*(_BYTE *)(v209 + 346) & 0x20) != 0)
          {
LABEL_325:
            v268 = 1;
            goto LABEL_326;
          }
          if (*(_BYTE *)(v209 + 256))
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v210 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v210, OS_LOG_TYPE_INFO))
            {
              v211 = *(_QWORD *)(v278 + 32) + 256;
              *(_DWORD *)&buf[0].sa_len = 136446466;
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(_QWORD *)&buf[0].sa_data[12] = v211;
              _os_log_impl(&dword_182FBE000, v210, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] SVCB queries are complete", &buf[0].sa_len, 0x16u);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v210 = (id)gLogObj;
            if (os_log_type_enabled(v210, OS_LOG_TYPE_INFO))
            {
              v212 = *(_DWORD *)(*(_QWORD *)(v278 + 32) + 340);
              *(_DWORD *)&buf[0].sa_len = 136446466;
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&buf[0].sa_data[10] = 1024;
              *(_DWORD *)&buf[0].sa_data[12] = v212;
              _os_log_impl(&dword_182FBE000, v210, OS_LOG_TYPE_INFO, "%{public}s [R%u] SVCB queries are complete", &buf[0].sa_len, 0x12u);
            }
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v210 = (id)gLogObj;
          if (os_log_type_enabled(v210, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            _os_log_impl(&dword_182FBE000, v210, OS_LOG_TYPE_INFO, "%{public}s SVCB queries are complete", &buf[0].sa_len, 0xCu);
          }
        }

        goto LABEL_325;
      }
      v274[347] |= 4u;
      v290 = 0;
      ech_config = (const void *)dnssd_getaddrinfo_result_get_ech_config();
      v86 = (void *)*((_QWORD *)v274 + 3);
      service_priority = dnssd_getaddrinfo_result_get_service_priority();
      service_port = dnssd_getaddrinfo_result_get_service_port();
      v89 = v290;
      sensitive_redacted = nw_parameters_get_sensitive_redacted(*((void **)v274 + 2));
      v91 = v86;
      v92 = [NWConcrete_nw_resolver_service alloc];
      v93 = v91;
      if (!v92)
      {
LABEL_419:

        __nwlog_obj();
        v252 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)&buf[0].sa_len = 136446210;
        *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
        v253 = (char *)_os_log_send_and_compose_impl();

        v299[0] = 16;
        type[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v253, v299, type))
        {
          if (v299[0] == 17)
          {
            __nwlog_obj();
            v254 = objc_claimAutoreleasedReturnValue();
            v255 = v299[0];
            if (os_log_type_enabled(v254, (os_log_type_t)v299[0]))
            {
              *(_DWORD *)&buf[0].sa_len = 136446210;
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              _os_log_impl(&dword_182FBE000, v254, v255, "%{public}s called with null service", &buf[0].sa_len, 0xCu);
            }
          }
          else if (type[0])
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v254 = objc_claimAutoreleasedReturnValue();
            v257 = v299[0];
            v258 = os_log_type_enabled(v254, (os_log_type_t)v299[0]);
            if (backtrace_string)
            {
              if (v258)
              {
                *(_DWORD *)&buf[0].sa_len = 136446466;
                *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                *(_WORD *)&buf[0].sa_data[10] = 2082;
                *(_QWORD *)&buf[0].sa_data[12] = backtrace_string;
                _os_log_impl(&dword_182FBE000, v254, v257, "%{public}s called with null service, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_435;
            }
            if (v258)
            {
              *(_DWORD *)&buf[0].sa_len = 136446210;
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              _os_log_impl(&dword_182FBE000, v254, v257, "%{public}s called with null service, no backtrace", &buf[0].sa_len, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v254 = objc_claimAutoreleasedReturnValue();
            v259 = v299[0];
            if (os_log_type_enabled(v254, (os_log_type_t)v299[0]))
            {
              *(_DWORD *)&buf[0].sa_len = 136446210;
              *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
              _os_log_impl(&dword_182FBE000, v254, v259, "%{public}s called with null service, backtrace limit exceeded", &buf[0].sa_len, 0xCu);
            }
          }

        }
LABEL_435:
        if (v253)
          free(v253);
        v128 = 0;
        goto LABEL_308;
      }
      *(_QWORD *)v299 = v92;
      *(_QWORD *)&v299[8] = NWConcrete_nw_resolver_service;
      object = (unsigned __int16 *)objc_msgSendSuper2((objc_super *)v299, sel_init);
      if (object)
      {
        if (v93)
        {
          v94 = v93;
          v95 = objc_msgSend(v94, "type");

          if (v95 == 2)
          {
            v96 = v94;
            v97 = (const char *)objc_msgSend(v96, "hostname");

            if (v97)
            {
              object[16] = service_priority;
              v98 = object[24] & 0xFE | sensitive_redacted;
              *((_BYTE *)object + 48) = v98;
              v99 = v98 & 0xFD | (2 * (strcmp(v97, service_name) == 0));
              *((_BYTE *)object + 48) = v99;
              if (service_port)
              {
                v100 = v96;
                v101 = objc_msgSend(v100, "port");

                v102 = (void **)object;
                *((_BYTE *)object + 48) = object[24] & 0xFB | (4 * (__rev16(v101) == service_port));
              }
              else
              {
                *((_BYTE *)object + 48) = v99 | 4;
                v116 = v96;
                v117 = objc_msgSend(v116, "port");

                service_port = __rev16(v117);
                v102 = (void **)object;
              }
              *((_WORD *)v102 + 17) = service_port;
              v118 = v102;
              host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(service_name, service_port);
              v120 = v118[1];
              *++v118 = (void *)host_with_numeric_port;

              v121 = *v118;
              v122 = object;
              nw_endpoint_set_priority(v121, object[16]);
              if (!sensitive_redacted)
                nw_endpoint_set_do_not_redact(*((void **)object + 1));
              if ((object[24] & 4) == 0)
              {
                if (object[16])
                {
                  v123 = nw_endpoint_create_host_with_numeric_port(v97, object[17]);
                  v124 = (void *)*((_QWORD *)object + 2);
                  *((_QWORD *)object + 2) = v123;

                  v122 = object;
                  nw_endpoint_set_priority(*((void **)object + 2), object[16]);
                  if (!sensitive_redacted)
                    nw_endpoint_set_do_not_redact(*((void **)object + 2));
                }
              }
              if (v89 && ech_config && v122[16])
              {
                v125 = dispatch_data_create(ech_config, v89, 0, 0);
                v126 = (void *)*((_QWORD *)v122 + 5);
                *((_QWORD *)v122 + 5) = v125;

              }
              if (v270)
              {
                v127 = v274;
                v128 = (NWConcrete_nw_resolver_service *)object;
                if (v270[16])
                {
                  if ((v274[346] & 0x20) == 0)
                  {
                    if (v274[256])
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v129 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)&buf[0].sa_len = 136446978;
                        *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                        *(_WORD *)&buf[0].sa_data[10] = 2082;
                        *(_QWORD *)&buf[0].sa_data[12] = v274 + 256;
                        *(_WORD *)&buf[1].sa_data[4] = 2114;
                        *(_QWORD *)&buf[1].sa_data[6] = object;
                        *(_WORD *)&buf[2].sa_len = 2114;
                        *(_QWORD *)buf[2].sa_data = v270;
                        _os_log_impl(&dword_182FBE000, v129, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s] Ignoring service %{public}@ with parent %{public}@, should not receive nested services for non-alias services", &buf[0].sa_len, 0x2Au);
                      }
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v129 = (id)gLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        v145 = *((_DWORD *)v274 + 85);
                        *(_DWORD *)&buf[0].sa_len = 136446978;
                        *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                        *(_WORD *)&buf[0].sa_data[10] = 1024;
                        *(_DWORD *)&buf[0].sa_data[12] = v145;
                        *(_WORD *)buf[1].sa_data = 2114;
                        *(_QWORD *)&buf[1].sa_data[2] = object;
                        *(_WORD *)&buf[1].sa_data[10] = 2114;
                        *(_QWORD *)&buf[1].sa_data[12] = v270;
                        _os_log_impl(&dword_182FBE000, v129, OS_LOG_TYPE_ERROR, "%{public}s [R%u] Ignoring service %{public}@ with parent %{public}@, should not receive nested services for non-alias services", &buf[0].sa_len, 0x26u);
                      }
                    }
LABEL_307:

                    v128 = (NWConcrete_nw_resolver_service *)object;
                    goto LABEL_308;
                  }
                  goto LABEL_308;
                }
                if (!object[16])
                {
                  if ((v274[346] & 0x20) == 0)
                  {
                    if (v274[256])
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v129 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)&buf[0].sa_len = 136446978;
                        *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                        *(_WORD *)&buf[0].sa_data[10] = 2082;
                        *(_QWORD *)&buf[0].sa_data[12] = v274 + 256;
                        *(_WORD *)&buf[1].sa_data[4] = 2114;
                        *(_QWORD *)&buf[1].sa_data[6] = object;
                        *(_WORD *)&buf[2].sa_len = 2114;
                        *(_QWORD *)buf[2].sa_data = v270;
                        _os_log_impl(&dword_182FBE000, v129, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s] Ignoring service %{public}@ with parent %{public}@, only one alias will be followed", &buf[0].sa_len, 0x2Au);
                      }
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v129 = (id)gLogObj;
                      if (os_log_type_enabled(v129, OS_LOG_TYPE_ERROR))
                      {
                        v204 = *((_DWORD *)v274 + 85);
                        *(_DWORD *)&buf[0].sa_len = 136446978;
                        *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                        *(_WORD *)&buf[0].sa_data[10] = 1024;
                        *(_DWORD *)&buf[0].sa_data[12] = v204;
                        *(_WORD *)buf[1].sa_data = 2114;
                        *(_QWORD *)&buf[1].sa_data[2] = object;
                        *(_WORD *)&buf[1].sa_data[10] = 2114;
                        *(_QWORD *)&buf[1].sa_data[12] = v270;
                        _os_log_impl(&dword_182FBE000, v129, OS_LOG_TYPE_ERROR, "%{public}s [R%u] Ignoring service %{public}@ with parent %{public}@, only one alias will be followed", &buf[0].sa_len, 0x26u);
                      }
                    }
                    goto LABEL_307;
                  }
LABEL_308:

                  goto LABEL_309;
                }
LABEL_170:
                v137 = *((_QWORD *)v127 + 22);
                if (!v137)
                {
                  v138 = nw_array_create();
                  v140 = (void *)*((_QWORD *)v127 + 22);
                  v139 = (uint64_t *)(v127 + 176);
                  *v139 = v138;

                  v137 = *v139;
                  v127 = v274;
                  v128 = (NWConcrete_nw_resolver_service *)object;
                }
                nw_array_append(v137, v128);
                if ((v127[346] & 0x20) != 0)
                {
LABEL_188:
                  v147 = *((unsigned __int8 *)v128 + 48);
                  if ((v147 & 2) == 0)
                    goto LABEL_195;
                  port = v128->port;
                  v149 = v274;
                  if (port)
                  {
                    v150 = (v147 >> 2) & 1;
                    v151 = nw_array_create();
                    v152 = (unsigned __int8 *)v149[18];
                    *(_QWORD *)v299 = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&v299[8] = 3221225472;
                    *(_QWORD *)&v299[16] = ___ZL25nw_resolver_apply_serviceP22NWConcrete_nw_resolvertbt_block_invoke;
                    *(_QWORD *)&v299[24] = &unk_1E149AFC0;
                    v303 = (v147 & 4) != 0;
                    v301 = port;
                    v153 = (id)v151;
                    *(_QWORD *)&v299[32] = v153;
                    v302 = port;
                    v300 = v149;
                    nw_array_apply(v152, (uint64_t)v299);
                    if (v153 && v153[3] != v153[2])
                    {
                      *(_QWORD *)v298 = 0;
                      *(_QWORD *)&v298[8] = v298;
                      *(_QWORD *)&v298[16] = 0x2020000000;
                      v298[24] = 0;
                      *(_QWORD *)type = 0;
                      v292 = type;
                      v293 = 0x3032000000;
                      v294 = __Block_byref_object_copy__5622;
                      v295 = __Block_byref_object_dispose__5623;
                      v296 = nw_array_create();
                      v154 = (unsigned __int8 *)v149[18];
                      *(_QWORD *)&buf[0].sa_len = MEMORY[0x1E0C809B0];
                      *(_QWORD *)&buf[0].sa_data[6] = 3221225472;
                      *(_QWORD *)&buf[1].sa_len = ___ZL25nw_resolver_apply_serviceP22NWConcrete_nw_resolvertbt_block_invoke_2;
                      *(_QWORD *)&buf[1].sa_data[6] = &unk_1E149AFE8;
                      *(_WORD *)&buf[3].sa_data[6] = port;
                      *(_QWORD *)&buf[2].sa_data[6] = v298;
                      *(_QWORD *)&buf[3].sa_len = type;
                      *(_QWORD *)&buf[2].sa_len = v153;
                      buf[3].sa_data[8] = v150;
                      nw_array_apply(v154, (uint64_t)buf);
                      objc_storeStrong(v149 + 18, *((id *)v292 + 5));

                      _Block_object_dispose(type, 8);
                      _Block_object_dispose(v298, 8);
                    }

LABEL_194:
                    v128 = (NWConcrete_nw_resolver_service *)object;
LABEL_195:
                    v155 = v128->alternative_origin;
                    *(_QWORD *)v299 = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&v299[8] = 3221225472;
                    *(_QWORD *)&v299[16] = ___ZL34nw_resolver_process_service_resultP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_servicePU38objcproto27OS_dnssd_getaddrinfo_result8NSObject_block_invoke;
                    *(_QWORD *)&v299[24] = &unk_1E149AF70;
                    v156 = v274;
                    *(_QWORD *)&v299[32] = v156;
                    v157 = v155;
                    v300 = v157;
                    dnssd_getaddrinfo_result_enumerate_alpn_values();
                    if (v157)
                      nw_resolver_update_client_alternative(v156, v157, 0);
                    *(_QWORD *)type = 0;
                    v292 = type;
                    v293 = 0x2020000000;
                    LOBYTE(v294) = 0;
                    *(_QWORD *)&buf[0].sa_len = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&buf[0].sa_data[6] = 3221225472;
                    *(_QWORD *)&buf[1].sa_len = ___ZL34nw_resolver_process_service_resultP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_servicePU38objcproto27OS_dnssd_getaddrinfo_result8NSObject_block_invoke_216;
                    *(_QWORD *)&buf[1].sa_data[6] = &unk_1E149AF98;
                    v158 = v128;
                    *(_QWORD *)&buf[2].sa_len = v158;
                    v159 = v156;
                    *(_QWORD *)&buf[2].sa_data[6] = v159;
                    *(_QWORD *)&buf[3].sa_len = v271;
                    *(_QWORD *)&buf[3].sa_data[6] = type;
                    dnssd_getaddrinfo_result_enumerate_service_address_hints();
                    doh_uri = dnssd_getaddrinfo_result_get_doh_uri();
                    if (!doh_uri)
                    {
LABEL_214:
                      if (*((_BYTE *)v292 + 24) || (*((_BYTE *)v128 + 48) & 2) != 0)
                        goto LABEL_304;
                      if ((v274[346] & 0x20) != 0)
                      {
LABEL_303:
                        nw_resolver_create_dns_getaddrinfo_locked(v159, v158);
LABEL_304:

                        _Block_object_dispose(type, 8);
                        v128 = v158;
                        goto LABEL_308;
                      }
                      if (*((_BYTE *)v159 + 256))
                      {
                        if (__nwlog_connection_log::onceToken != -1)
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                        v167 = (id)gconnectionLogObj;
                        if (!os_log_type_enabled(v167, OS_LOG_TYPE_INFO))
                          goto LABEL_302;
                        *(_DWORD *)v298 = 136446722;
                        *(_QWORD *)&v298[4] = "nw_resolver_process_service_result";
                        *(_WORD *)&v298[12] = 2082;
                        *(_QWORD *)&v298[14] = (char *)v159 + 256;
                        *(_WORD *)&v298[22] = 2114;
                        *(_QWORD *)&v298[24] = v158;
                        v168 = v167;
                        v169 = "%{public}s [C%{public}s] Starting new gai query for %{public}@";
                        v170 = 32;
                      }
                      else
                      {
                        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                        networkd_settings_init();
                        v167 = (id)gLogObj;
                        if (!os_log_type_enabled(v167, OS_LOG_TYPE_INFO))
                        {
LABEL_302:

                          goto LABEL_303;
                        }
                        v205 = *((_DWORD *)v159 + 85);
                        *(_DWORD *)v298 = 136446722;
                        *(_QWORD *)&v298[4] = "nw_resolver_process_service_result";
                        *(_WORD *)&v298[12] = 1024;
                        *(_DWORD *)&v298[14] = v205;
                        *(_WORD *)&v298[18] = 2114;
                        *(_QWORD *)&v298[20] = v158;
                        v168 = v167;
                        v169 = "%{public}s [R%u] Starting new gai query for %{public}@";
                        v170 = 28;
                      }
                      _os_log_impl(&dword_182FBE000, v168, OS_LOG_TYPE_INFO, v169, v298, v170);
                      goto LABEL_302;
                    }
                    if ((v274[346] & 0x20) != 0)
                    {
LABEL_213:
                      v274[347] |= 8u;
                      goto LABEL_214;
                    }
                    if (*((_BYTE *)v159 + 256))
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v161 = (id)gconnectionLogObj;
                      if (!os_log_type_enabled(v161, OS_LOG_TYPE_INFO))
                        goto LABEL_212;
                      *(_DWORD *)v298 = 136446723;
                      *(_QWORD *)&v298[4] = "nw_resolver_process_service_result";
                      *(_WORD *)&v298[12] = 2082;
                      *(_QWORD *)&v298[14] = (char *)v159 + 256;
                      *(_WORD *)&v298[22] = 2085;
                      *(_QWORD *)&v298[24] = doh_uri;
                      v162 = v161;
                      v163 = "%{public}s [C%{public}s] DoH URI: %{sensitive}s";
                      v164 = 32;
                    }
                    else
                    {
                      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                      networkd_settings_init();
                      v161 = (id)gLogObj;
                      if (!os_log_type_enabled(v161, OS_LOG_TYPE_INFO))
                      {
LABEL_212:

                        v128 = (NWConcrete_nw_resolver_service *)object;
                        goto LABEL_213;
                      }
                      v166 = *((_DWORD *)v159 + 85);
                      *(_DWORD *)v298 = 136446723;
                      *(_QWORD *)&v298[4] = "nw_resolver_process_service_result";
                      *(_WORD *)&v298[12] = 1024;
                      *(_DWORD *)&v298[14] = v166;
                      *(_WORD *)&v298[18] = 2085;
                      *(_QWORD *)&v298[20] = doh_uri;
                      v162 = v161;
                      v163 = "%{public}s [R%u] DoH URI: %{sensitive}s";
                      v164 = 28;
                    }
                    _os_log_impl(&dword_182FBE000, v162, OS_LOG_TYPE_INFO, v163, v298, v164);
                    goto LABEL_212;
                  }
                  __nwlog_obj();
                  v243 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)&buf[0].sa_len = 136446210;
                  *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_apply_service";
                  v244 = (char *)_os_log_send_and_compose_impl();

                  v299[0] = 16;
                  type[0] = OS_LOG_TYPE_DEFAULT;
                  if (__nwlog_fault(v244, v299, type))
                  {
                    if (v299[0] == 17)
                    {
                      __nwlog_obj();
                      v245 = objc_claimAutoreleasedReturnValue();
                      v246 = v299[0];
                      if (os_log_type_enabled(v245, (os_log_type_t)v299[0]))
                      {
                        *(_DWORD *)&buf[0].sa_len = 136446210;
                        *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_apply_service";
                        _os_log_impl(&dword_182FBE000, v245, v246, "%{public}s called with null (priority != 0)", &buf[0].sa_len, 0xCu);
                      }
                    }
                    else if (type[0])
                    {
                      v260 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v245 = objc_claimAutoreleasedReturnValue();
                      v261 = v299[0];
                      v262 = os_log_type_enabled(v245, (os_log_type_t)v299[0]);
                      if (v260)
                      {
                        if (v262)
                        {
                          *(_DWORD *)&buf[0].sa_len = 136446466;
                          *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_apply_service";
                          *(_WORD *)&buf[0].sa_data[10] = 2082;
                          *(_QWORD *)&buf[0].sa_data[12] = v260;
                          _os_log_impl(&dword_182FBE000, v245, v261, "%{public}s called with null (priority != 0), dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
                        }

                        free(v260);
                        goto LABEL_451;
                      }
                      if (v262)
                      {
                        *(_DWORD *)&buf[0].sa_len = 136446210;
                        *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_apply_service";
                        _os_log_impl(&dword_182FBE000, v245, v261, "%{public}s called with null (priority != 0), no backtrace", &buf[0].sa_len, 0xCu);
                      }
                    }
                    else
                    {
                      __nwlog_obj();
                      v245 = objc_claimAutoreleasedReturnValue();
                      v265 = v299[0];
                      if (os_log_type_enabled(v245, (os_log_type_t)v299[0]))
                      {
                        *(_DWORD *)&buf[0].sa_len = 136446210;
                        *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_apply_service";
                        _os_log_impl(&dword_182FBE000, v245, v265, "%{public}s called with null (priority != 0), backtrace limit exceeded", &buf[0].sa_len, 0xCu);
                      }
                    }

                  }
LABEL_451:
                  if (v244)
                    free(v244);
                  goto LABEL_194;
                }
                if (v274[256])
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v141 = (id)gconnectionLogObj;
                  if (!os_log_type_enabled(v141, OS_LOG_TYPE_INFO))
                    goto LABEL_187;
                  *(_DWORD *)&buf[0].sa_len = 136446722;
                  *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                  *(_WORD *)&buf[0].sa_data[10] = 2082;
                  *(_QWORD *)&buf[0].sa_data[12] = v274 + 256;
                  *(_WORD *)&buf[1].sa_data[4] = 2114;
                  *(_QWORD *)&buf[1].sa_data[6] = v128;
                  v142 = v141;
                  v143 = "%{public}s [C%{public}s] Received %{public}@";
                  v144 = 32;
                }
                else
                {
                  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                  networkd_settings_init();
                  v141 = (id)gLogObj;
                  if (!os_log_type_enabled(v141, OS_LOG_TYPE_INFO))
                  {
LABEL_187:

                    v128 = (NWConcrete_nw_resolver_service *)object;
                    goto LABEL_188;
                  }
                  v146 = *((_DWORD *)v274 + 85);
                  *(_DWORD *)&buf[0].sa_len = 136446722;
                  *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                  *(_WORD *)&buf[0].sa_data[10] = 1024;
                  *(_DWORD *)&buf[0].sa_data[12] = v146;
                  *(_WORD *)buf[1].sa_data = 2114;
                  *(_QWORD *)&buf[1].sa_data[2] = v128;
                  v142 = v141;
                  v143 = "%{public}s [R%u] Received %{public}@";
                  v144 = 28;
                }
                _os_log_impl(&dword_182FBE000, v142, OS_LOG_TYPE_INFO, v143, &buf[0].sa_len, v144);
                goto LABEL_187;
              }
              v128 = (NWConcrete_nw_resolver_service *)object;
              v127 = v274;
              if (object[16])
                goto LABEL_170;
              if ((object[24] & 2) != 0)
              {
                if ((v274[346] & 0x20) == 0)
                {
                  if (v274[256])
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v129 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v129, OS_LOG_TYPE_INFO))
                    {
                      *(_DWORD *)&buf[0].sa_len = 136446722;
                      *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                      *(_WORD *)&buf[0].sa_data[10] = 2082;
                      *(_QWORD *)&buf[0].sa_data[12] = v274 + 256;
                      *(_WORD *)&buf[1].sa_data[4] = 2114;
                      *(_QWORD *)&buf[1].sa_data[6] = object;
                      _os_log_impl(&dword_182FBE000, v129, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Ignoring service %{public}@, alias must not match origin", &buf[0].sa_len, 0x20u);
                    }
                  }
                  else
                  {
                    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                    networkd_settings_init();
                    v129 = (id)gLogObj;
                    if (os_log_type_enabled(v129, OS_LOG_TYPE_INFO))
                    {
                      v206 = *((_DWORD *)v274 + 85);
                      *(_DWORD *)&buf[0].sa_len = 136446722;
                      *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                      *(_WORD *)&buf[0].sa_data[10] = 1024;
                      *(_DWORD *)&buf[0].sa_data[12] = v206;
                      *(_WORD *)buf[1].sa_data = 2114;
                      *(_QWORD *)&buf[1].sa_data[2] = object;
                      _os_log_impl(&dword_182FBE000, v129, OS_LOG_TYPE_INFO, "%{public}s [R%u] Ignoring service %{public}@, alias must not match origin", &buf[0].sa_len, 0x1Cu);
                    }
                  }
                  goto LABEL_307;
                }
                goto LABEL_308;
              }
              v130 = *((_QWORD *)v274 + 22);
              if (!v130)
              {
                v131 = nw_array_create();
                v132 = (void *)*((_QWORD *)v274 + 22);
                *((_QWORD *)v274 + 22) = v131;

                v130 = *((_QWORD *)v274 + 22);
                v127 = v274;
                v128 = (NWConcrete_nw_resolver_service *)object;
              }
              nw_array_append(v130, v128);
              if ((v127[346] & 0x20) != 0)
              {
LABEL_332:
                nw_resolver_create_dns_getaddrinfo_locked((NWConcrete_nw_resolver *)v127, v128);
                goto LABEL_308;
              }
              if (v127[256])
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v133 = (id)gconnectionLogObj;
                if (!os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
                  goto LABEL_331;
                *(_DWORD *)&buf[0].sa_len = 136446722;
                *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                *(_WORD *)&buf[0].sa_data[10] = 2082;
                *(_QWORD *)&buf[0].sa_data[12] = v274 + 256;
                *(_WORD *)&buf[1].sa_data[4] = 2114;
                *(_QWORD *)&buf[1].sa_data[6] = v128;
                v134 = v133;
                v135 = "%{public}s [C%{public}s] Starting new gai query for %{public}@";
                v136 = 32;
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v133 = (id)gLogObj;
                if (!os_log_type_enabled(v133, OS_LOG_TYPE_INFO))
                {
LABEL_331:

                  v127 = v274;
                  v128 = (NWConcrete_nw_resolver_service *)object;
                  goto LABEL_332;
                }
                v213 = *((_DWORD *)v274 + 85);
                *(_DWORD *)&buf[0].sa_len = 136446722;
                *(_QWORD *)&buf[0].sa_data[2] = "nw_resolver_process_service_result";
                *(_WORD *)&buf[0].sa_data[10] = 1024;
                *(_DWORD *)&buf[0].sa_data[12] = v213;
                *(_WORD *)buf[1].sa_data = 2114;
                *(_QWORD *)&buf[1].sa_data[2] = v128;
                v134 = v133;
                v135 = "%{public}s [R%u] Starting new gai query for %{public}@";
                v136 = 28;
              }
              _os_log_impl(&dword_182FBE000, v134, OS_LOG_TYPE_INFO, v135, &buf[0].sa_len, v136);
              goto LABEL_331;
            }
            __nwlog_obj();
            v227 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:ec"
                                            "hConfig:echConfigLength:sensitiveRedacted:]";
            v228 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            v298[0] = 0;
            if ((__nwlog_fault(v228, type, v298) & 1) == 0)
              goto LABEL_416;
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v229 = objc_claimAutoreleasedReturnValue();
              v230 = type[0];
              if (os_log_type_enabled(v229, type[0]))
              {
                *(_DWORD *)&buf[0].sa_len = 136446210;
                *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:por"
                                                "t:echConfig:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_182FBE000, v229, v230, "%{public}s called with null origin_name", &buf[0].sa_len, 0xCu);
              }
            }
            else if (v298[0])
            {
              v240 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v229 = objc_claimAutoreleasedReturnValue();
              v241 = type[0];
              v242 = os_log_type_enabled(v229, type[0]);
              if (v240)
              {
                if (v242)
                {
                  *(_DWORD *)&buf[0].sa_len = 136446466;
                  *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:p"
                                                  "ort:echConfig:echConfigLength:sensitiveRedacted:]";
                  *(_WORD *)&buf[0].sa_data[10] = 2082;
                  *(_QWORD *)&buf[0].sa_data[12] = v240;
                  _os_log_impl(&dword_182FBE000, v229, v241, "%{public}s called with null origin_name, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
                }

                free(v240);
                goto LABEL_416;
              }
              if (v242)
              {
                *(_DWORD *)&buf[0].sa_len = 136446210;
                *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:por"
                                                "t:echConfig:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_182FBE000, v229, v241, "%{public}s called with null origin_name, no backtrace", &buf[0].sa_len, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v229 = objc_claimAutoreleasedReturnValue();
              v250 = type[0];
              if (os_log_type_enabled(v229, type[0]))
              {
                *(_DWORD *)&buf[0].sa_len = 136446210;
                *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:por"
                                                "t:echConfig:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_182FBE000, v229, v250, "%{public}s called with null origin_name, backtrace limit exceeded", &buf[0].sa_len, 0xCu);
              }
            }

LABEL_416:
            v251 = object;
            if (v228)
              free(v228);
LABEL_418:

            goto LABEL_419;
          }
          __nwlog_obj();
          v223 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)&buf[0].sa_len = 136446210;
          *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echC"
                                          "onfig:echConfigLength:sensitiveRedacted:]";
          v224 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v298[0] = 0;
          if (__nwlog_fault(v224, type, v298))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v225 = objc_claimAutoreleasedReturnValue();
              v226 = type[0];
              if (os_log_type_enabled(v225, type[0]))
              {
                *(_DWORD *)&buf[0].sa_len = 136446210;
                *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:por"
                                                "t:echConfig:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_182FBE000, v225, v226, "%{public}s called with null (nw_endpoint_get_type(_origin) == nw_endpoint_type_host)", &buf[0].sa_len, 0xCu);
              }
            }
            else if (v298[0])
            {
              v237 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v225 = objc_claimAutoreleasedReturnValue();
              v238 = type[0];
              v239 = os_log_type_enabled(v225, type[0]);
              if (v237)
              {
                if (v239)
                {
                  *(_DWORD *)&buf[0].sa_len = 136446466;
                  *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:p"
                                                  "ort:echConfig:echConfigLength:sensitiveRedacted:]";
                  *(_WORD *)&buf[0].sa_data[10] = 2082;
                  *(_QWORD *)&buf[0].sa_data[12] = v237;
                  _os_log_impl(&dword_182FBE000, v225, v238, "%{public}s called with null (nw_endpoint_get_type(_origin) == nw_endpoint_type_host), dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
                }

                free(v237);
                goto LABEL_410;
              }
              if (v239)
              {
                *(_DWORD *)&buf[0].sa_len = 136446210;
                *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:por"
                                                "t:echConfig:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_182FBE000, v225, v238, "%{public}s called with null (nw_endpoint_get_type(_origin) == nw_endpoint_type_host), no backtrace", &buf[0].sa_len, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v225 = objc_claimAutoreleasedReturnValue();
              v249 = type[0];
              if (os_log_type_enabled(v225, type[0]))
              {
                *(_DWORD *)&buf[0].sa_len = 136446210;
                *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:por"
                                                "t:echConfig:echConfigLength:sensitiveRedacted:]";
                _os_log_impl(&dword_182FBE000, v225, v249, "%{public}s called with null (nw_endpoint_get_type(_origin) == nw_endpoint_type_host), backtrace limit exceeded", &buf[0].sa_len, 0xCu);
              }
            }

          }
LABEL_410:
          v251 = object;
          if (v224)
            free(v224);
          goto LABEL_418;
        }
        __nwlog_obj();
        v219 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)&buf[0].sa_len = 136446210;
        *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echCon"
                                        "fig:echConfigLength:sensitiveRedacted:]";
        v220 = (char *)_os_log_send_and_compose_impl();

        type[0] = OS_LOG_TYPE_ERROR;
        v298[0] = 0;
        if (__nwlog_fault(v220, type, v298))
        {
          if (type[0] == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v221 = objc_claimAutoreleasedReturnValue();
            v222 = type[0];
            if (os_log_type_enabled(v221, type[0]))
            {
              *(_DWORD *)&buf[0].sa_len = 136446210;
              *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:"
                                              "echConfig:echConfigLength:sensitiveRedacted:]";
              _os_log_impl(&dword_182FBE000, v221, v222, "%{public}s called with null _origin", &buf[0].sa_len, 0xCu);
            }
          }
          else if (v298[0])
          {
            v234 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v221 = objc_claimAutoreleasedReturnValue();
            v235 = type[0];
            v236 = os_log_type_enabled(v221, type[0]);
            if (v234)
            {
              if (v236)
              {
                *(_DWORD *)&buf[0].sa_len = 136446466;
                *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:por"
                                                "t:echConfig:echConfigLength:sensitiveRedacted:]";
                *(_WORD *)&buf[0].sa_data[10] = 2082;
                *(_QWORD *)&buf[0].sa_data[12] = v234;
                _os_log_impl(&dword_182FBE000, v221, v235, "%{public}s called with null _origin, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
              }

              free(v234);
              goto LABEL_404;
            }
            if (v236)
            {
              *(_DWORD *)&buf[0].sa_len = 136446210;
              *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:"
                                              "echConfig:echConfigLength:sensitiveRedacted:]";
              _os_log_impl(&dword_182FBE000, v221, v235, "%{public}s called with null _origin, no backtrace", &buf[0].sa_len, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v221 = objc_claimAutoreleasedReturnValue();
            v248 = type[0];
            if (os_log_type_enabled(v221, type[0]))
            {
              *(_DWORD *)&buf[0].sa_len = 136446210;
              *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:"
                                              "echConfig:echConfigLength:sensitiveRedacted:]";
              _os_log_impl(&dword_182FBE000, v221, v248, "%{public}s called with null _origin, backtrace limit exceeded", &buf[0].sa_len, 0xCu);
            }
          }

        }
LABEL_404:
        v251 = object;
        if (v220)
          free(v220);
        goto LABEL_418;
      }
      __nwlog_obj();
      v215 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)&buf[0].sa_len = 136446210;
      *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:echConfi"
                                      "g:echConfigLength:sensitiveRedacted:]";
      v216 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v298[0] = 0;
      if ((__nwlog_fault(v216, type, v298) & 1) != 0)
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v217 = objc_claimAutoreleasedReturnValue();
          v218 = type[0];
          if (os_log_type_enabled(v217, type[0]))
          {
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:ec"
                                            "hConfig:echConfigLength:sensitiveRedacted:]";
            _os_log_impl(&dword_182FBE000, v217, v218, "%{public}s [super init] failed", &buf[0].sa_len, 0xCu);
          }
        }
        else if (v298[0])
        {
          v231 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v217 = objc_claimAutoreleasedReturnValue();
          v232 = type[0];
          v233 = os_log_type_enabled(v217, type[0]);
          if (v231)
          {
            if (v233)
            {
              *(_DWORD *)&buf[0].sa_len = 136446466;
              *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:"
                                              "echConfig:echConfigLength:sensitiveRedacted:]";
              *(_WORD *)&buf[0].sa_data[10] = 2082;
              *(_QWORD *)&buf[0].sa_data[12] = v231;
              _os_log_impl(&dword_182FBE000, v217, v232, "%{public}s [super init] failed, dumping backtrace:%{public}s", &buf[0].sa_len, 0x16u);
            }

            free(v231);
            goto LABEL_399;
          }
          if (v233)
          {
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:ec"
                                            "hConfig:echConfigLength:sensitiveRedacted:]";
            _os_log_impl(&dword_182FBE000, v217, v232, "%{public}s [super init] failed, no backtrace", &buf[0].sa_len, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v217 = objc_claimAutoreleasedReturnValue();
          v247 = type[0];
          if (os_log_type_enabled(v217, type[0]))
          {
            *(_DWORD *)&buf[0].sa_len = 136446210;
            *(_QWORD *)&buf[0].sa_data[2] = "-[NWConcrete_nw_resolver_service initWithOrigin:priority:serviceName:port:ec"
                                            "hConfig:echConfigLength:sensitiveRedacted:]";
            _os_log_impl(&dword_182FBE000, v217, v247, "%{public}s [super init] failed, backtrace limit exceeded", &buf[0].sa_len, 0xCu);
          }
        }

      }
LABEL_399:
      if (v216)
        free(v216);
      goto LABEL_419;
    }
    v103 = (const sockaddr *)dnssd_getaddrinfo_result_get_address();
    v104 = dnssd_getaddrinfo_result_get_interface_index();
    if (!v103)
      goto LABEL_325;
    if (v103->sa_len > 0x80u)
      goto LABEL_325;
    v105 = v104;
    sa_family = v103->sa_family;
    if (sa_family != 30 && sa_family != 2)
      goto LABEL_325;
    memset(buf, 0, sizeof(buf));
    memcpy(buf, v103, v103->sa_len);
    if (!dnssd_getaddrinfo_result_has_extended_dns_error())
      goto LABEL_253;
    extended_dns_error_code = dnssd_getaddrinfo_result_get_extended_dns_error_code();
    extended_dns_error_text = (const char *)dnssd_getaddrinfo_result_get_extended_dns_error_text();
    v109 = *(_QWORD *)(v278 + 32);
    if (!v109)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v110 = (id)gLogObj;
      if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v299 = 136446722;
        *(_QWORD *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v299[12] = 1024;
        *(_DWORD *)&v299[14] = extended_dns_error_code;
        *(_WORD *)&v299[18] = 2082;
        *(_QWORD *)&v299[20] = extended_dns_error_text;
        v112 = v110;
        v113 = "%{public}s Got Extended DNS Error: %u %{public}s";
        v114 = 28;
LABEL_231:
        _os_log_impl(&dword_182FBE000, v112, OS_LOG_TYPE_INFO, v113, v299, v114);
      }
LABEL_232:

      goto LABEL_233;
    }
    if ((*(_BYTE *)(v109 + 346) & 0x20) == 0)
    {
      if (*(_BYTE *)(v109 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v110 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
          goto LABEL_232;
        v111 = *(_QWORD *)(v278 + 32) + 256;
        *(_DWORD *)v299 = 136446978;
        *(_QWORD *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v299[12] = 2082;
        *(_QWORD *)&v299[14] = v111;
        *(_WORD *)&v299[22] = 1024;
        *(_DWORD *)&v299[24] = extended_dns_error_code;
        *(_WORD *)&v299[28] = 2082;
        *(_QWORD *)&v299[30] = extended_dns_error_text;
        v112 = v110;
        v113 = "%{public}s [C%{public}s] Got Extended DNS Error: %u %{public}s";
        v114 = 38;
        goto LABEL_231;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v110 = (id)gLogObj;
      if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
      {
        v171 = *(_DWORD *)(*(_QWORD *)(v278 + 32) + 340);
        *(_DWORD *)v299 = 136446978;
        *(_QWORD *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v299[12] = 1024;
        *(_DWORD *)&v299[14] = v171;
        *(_WORD *)&v299[18] = 1024;
        *(_DWORD *)&v299[20] = extended_dns_error_code;
        *(_WORD *)&v299[24] = 2082;
        *(_QWORD *)&v299[26] = extended_dns_error_text;
        v112 = v110;
        v113 = "%{public}s [R%u] Got Extended DNS Error: %u %{public}s";
        v114 = 34;
        goto LABEL_231;
      }
      goto LABEL_232;
    }
LABEL_233:
    if (!extended_dns_error_code)
      goto LABEL_253;
    v172 = *(_QWORD *)(v278 + 32);
    if (!*(_WORD *)(v172 + 344) || v82 == 1)
    {
      *(_WORD *)(v172 + 344) = extended_dns_error_code;
      v173 = *(void **)(*(_QWORD *)(v278 + 32) + 224);
      if (v173)
      {
        free(v173);
        *(_QWORD *)(*(_QWORD *)(v278 + 32) + 224) = 0;
      }
      if (extended_dns_error_text && (v78 - 3) <= 1)
      {
        v174 = strdup(extended_dns_error_text);
        if (!v174)
        {
          __nwlog_obj();
          v263 = objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v263, OS_LOG_TYPE_ERROR);
          *(_DWORD *)v299 = 136446210;
          *(_QWORD *)&v299[4] = "strict_strdup";
          v264 = (void *)_os_log_send_and_compose_impl();

          if (__nwlog_abort((uint64_t)v264))
          {
            __break(1u);
            return;
          }
          free(v264);
        }
        *(_QWORD *)(*(_QWORD *)(v278 + 32) + 224) = v174;
      }
    }
    if (extended_dns_error_code != 4)
    {
LABEL_253:
      switch(v82)
      {
        case 1:
          v190 = 0;
          v191 = 0;
          v189 = 2;
          break;
        case 4:
          v190 = 0;
          v191 = 0;
          v189 = -2147483646;
          break;
        case 3:
LABEL_256:
          negative_reason = dnssd_getaddrinfo_result_get_negative_reason();
          v182 = *(_QWORD *)(v278 + 32);
          if (v182)
          {
            if ((*(_BYTE *)(v182 + 346) & 0x20) != 0)
            {
LABEL_285:
              v189 = 0;
              v191 = negative_reason - 3 < 2;
              v190 = -65554;
              v82 = 3;
              break;
            }
            if (*(_BYTE *)(v182 + 256))
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v183 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
                goto LABEL_284;
              v184 = "<unknown reason>";
              if (negative_reason <= 5)
                v184 = off_1E149B198[negative_reason];
              v185 = *(_QWORD *)(v278 + 32) + 256;
              *(_DWORD *)v299 = 136446722;
              *(_QWORD *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&v299[12] = 2082;
              *(_QWORD *)&v299[14] = v185;
              *(_WORD *)&v299[22] = 2082;
              *(_QWORD *)&v299[24] = v184;
              v186 = v183;
              v187 = "%{public}s [C%{public}s] Got DNS negative reason: %{public}s";
              v188 = 32;
              goto LABEL_283;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v183 = (id)gLogObj;
            if (os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
            {
              v193 = "<unknown reason>";
              if (negative_reason <= 5)
                v193 = off_1E149B198[negative_reason];
              v194 = *(_DWORD *)(*(_QWORD *)(v278 + 32) + 340);
              *(_DWORD *)v299 = 136446722;
              *(_QWORD *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&v299[12] = 1024;
              *(_DWORD *)&v299[14] = v194;
              *(_WORD *)&v299[18] = 2082;
              *(_QWORD *)&v299[20] = v193;
              v186 = v183;
              v187 = "%{public}s [R%u] Got DNS negative reason: %{public}s";
              v188 = 28;
LABEL_283:
              _os_log_impl(&dword_182FBE000, v186, OS_LOG_TYPE_INFO, v187, v299, v188);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v183 = (id)gLogObj;
            if (os_log_type_enabled(v183, OS_LOG_TYPE_INFO))
            {
              v192 = "<unknown reason>";
              if (negative_reason <= 5)
                v192 = off_1E149B198[negative_reason];
              *(_DWORD *)v299 = 136446466;
              *(_QWORD *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
              *(_WORD *)&v299[12] = 2082;
              *(_QWORD *)&v299[14] = v192;
              v186 = v183;
              v187 = "%{public}s Got DNS negative reason: %{public}s";
              v188 = 22;
              goto LABEL_283;
            }
          }
LABEL_284:

          goto LABEL_285;
        default:
LABEL_265:
          v189 = 0;
          v190 = 0;
          v191 = 0;
          break;
      }
      if (dnssd_getaddrinfo_result_is_from_cache())
        v195 = v189 | 0x40000000;
      else
        v195 = v189;
      nw_resolver_update_flags_locked(*(NWConcrete_nw_resolver **)(v278 + 32), *(NWConcrete_nw_resolver_service **)(v278 + 40), v195, v190, v103, 0, v191);
      if (v82 == 1 || v82 == 4)
      {
        *(_QWORD *)type = 0;
        v292 = type;
        v293 = 0x2020000000;
        LOWORD(v294) = 0;
        *(_QWORD *)v299 = 0;
        *(_QWORD *)&v299[8] = v299;
        *(_QWORD *)&v299[16] = 0x3032000000;
        *(_QWORD *)&v299[24] = __Block_byref_object_copy__5622;
        *(_QWORD *)&v299[32] = __Block_byref_object_dispose__5623;
        v300 = 0;
        v196 = *(void **)(v278 + 40);
        if (v196)
        {
          v197 = v196;
          v198 = v197[17];

          *((_WORD *)v292 + 12) = v198;
          v199 = nw_resolver_service_copy_ech_config(*(NWConcrete_nw_resolver_service **)(v278 + 40));
          v200 = *(void **)(*(_QWORD *)&v299[8] + 40);
          *(_QWORD *)(*(_QWORD *)&v299[8] + 40) = v199;
        }
        else
        {
          v202 = *(_QWORD **)(v278 + 32);
          v203 = (unsigned __int8 *)v202[22];
          v281[0] = MEMORY[0x1E0C809B0];
          v281[1] = 3221225472;
          v281[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_205;
          v281[3] = &unk_1E149AEB8;
          v284 = type;
          v285 = v299;
          v286 = buf;
          v282 = v202;
          v283 = v76;
          nw_array_apply(v203, (uint64_t)v281);

          v200 = v282;
        }

        *(_WORD *)buf[0].sa_data = __rev16(nw_endpoint_get_port(*(nw_endpoint_t *)(v278 + 48)));
        nw_resolver_insert_address(*(void **)(v278 + 32), v76, buf, *((unsigned __int16 *)v292 + 12), *(void **)(*(_QWORD *)&v299[8] + 40));
        _Block_object_dispose(v299, 8);

        _Block_object_dispose(type, 8);
      }
      else
      {
        v201 = *(void **)(v278 + 32);
        v279[0] = MEMORY[0x1E0C809B0];
        v279[1] = 3221225472;
        v279[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2_206;
        v279[3] = &__block_descriptor_44_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
        v279[4] = buf;
        v280 = v105;
        nw_resolver_remove_endpoint_locked(v201, v279);
      }
      goto LABEL_325;
    }
    if (v82 == 1 || v82 == 3)
      goto LABEL_256;
    if (v82 != 4)
      goto LABEL_265;
    v175 = *(_QWORD *)(v278 + 32);
    if (v175)
    {
      if ((*(_BYTE *)(v175 + 346) & 0x20) != 0)
        goto LABEL_326;
      if (*(_BYTE *)(v175 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v176 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
          goto LABEL_338;
        v177 = *(_QWORD *)(v278 + 32) + 256;
        *(_DWORD *)v299 = 136446466;
        *(_QWORD *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v299[12] = 2082;
        *(_QWORD *)&v299[14] = v177;
        v178 = v176;
        v179 = "%{public}s [C%{public}s] Received expired forged answer, ignoring";
        v180 = 22;
        goto LABEL_337;
      }
      __nwlog_obj();
      v176 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
      {
        v214 = *(_DWORD *)(*(_QWORD *)(v278 + 32) + 340);
        *(_DWORD *)v299 = 136446466;
        *(_QWORD *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        *(_WORD *)&v299[12] = 1024;
        *(_DWORD *)&v299[14] = v214;
        v178 = v176;
        v179 = "%{public}s [R%u] Received expired forged answer, ignoring";
        v180 = 18;
        goto LABEL_337;
      }
    }
    else
    {
      __nwlog_obj();
      v176 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v176, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)v299 = 136446210;
        *(_QWORD *)&v299[4] = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
        v178 = v176;
        v179 = "%{public}s Received expired forged answer, ignoring";
        v180 = 12;
LABEL_337:
        _os_log_impl(&dword_182FBE000, v178, OS_LOG_TYPE_INFO, v179, v299, v180);
      }
    }
LABEL_338:

LABEL_326:
    v75 = v276 + 1;
    --a3;
  }
  while (a3);
  v266 = v278;
  if ((v268 & 1) != 0)
    nw_resolver_update_status_locked(*(_QWORD *)(v278 + 32), 0);
LABEL_456:
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(v266 + 32) + 12));
  WeakRetained = v267;
LABEL_457:

}

void sub_1833F79CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33)
{

  _Unwind_Resume(a1);
}

BOOL ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_201(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  const char *provider_name;
  const char *v7;
  const char *v8;
  NSObject *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  __int16 v13;
  const char *v14;
  __int16 v15;
  uint64_t v16;
  __int128 uu1;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  uu1 = 0uLL;
  nw_resolver_config_get_identifier(v3, &uu1);
  v4 = uuid_compare((const unsigned __int8 *)&uu1, (const unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 232));
  if (!v4)
  {
    provider_name = (const char *)nw_resolver_config_get_provider_name(v3);
    v7 = provider_name;
    if (provider_name)
    {
      v8 = *(const char **)(a1 + 40);
      if (v8)
      {
        if (strcmp(provider_name, v8))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v9 = (id)gLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            v10 = *(_QWORD *)(a1 + 40);
            v11 = 136446722;
            v12 = "nw_resolver_create_dns_getaddrinfo_locked_block_invoke";
            v13 = 2080;
            v14 = v7;
            v15 = 2080;
            v16 = v10;
            _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Provider changed from %s to %s, disabling failover", (uint8_t *)&v11, 0x20u);
          }

          *(_BYTE *)(*(_QWORD *)(a1 + 32) + 347) &= ~0x40u;
        }
      }
    }
  }

  return v4 != 0;
}

void sub_1833F7D00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25nw_resolver_apply_serviceP22NWConcrete_nw_resolvertbt_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  const sockaddr *address;
  nw_endpoint_t v6;
  id v7;
  sockaddr v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!nw_endpoint_get_priority(v4) && nw_endpoint_get_type(v4) == nw_endpoint_type_address)
  {
    if (*(_BYTE *)(a1 + 52))
    {
      nw_endpoint_set_priority(v4, *(unsigned __int16 *)(a1 + 48));
      nw_array_append(*(_QWORD *)(a1 + 32), v4);
    }
    else
    {
      memset(&v9, 0, 128);
      address = nw_endpoint_get_address(v4);
      memcpy(&v9, address, address->sa_len);
      *(_WORD *)v9.sa_data = bswap32(*(unsigned __int16 *)(a1 + 50)) >> 16;
      v6 = nw_endpoint_create_address(&v9);
      nw_endpoint_set_priority(v6, *(unsigned __int16 *)(a1 + 48));
      nw_endpoint_set_parent_endpoint(v6, *(void **)(*(_QWORD *)(a1 + 40) + 24), 0);
      v7 = nw_endpoint_copy_cname_array(v4);
      if (v7)
        nw_endpoint_set_cname_array(v6, v7);
      nw_array_append(*(_QWORD *)(a1 + 32), v6);

    }
  }

  return 1;
}

void sub_1833F7E5C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t ___ZL25nw_resolver_apply_serviceP22NWConcrete_nw_resolvertbt_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  unsigned int priority;
  void *combined_array;
  uint64_t v7;
  void *v8;

  v4 = a3;
  priority = nw_endpoint_get_priority(v4);
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24)
    && (!priority || *(unsigned __int16 *)(a1 + 56) < priority))
  {
    combined_array = nw_array_create_combined_array(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(void **)(a1 + 32));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = combined_array;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }
  if (nw_endpoint_get_priority(v4)
    || nw_endpoint_get_type(v4) != nw_endpoint_type_address
    || !*(_BYTE *)(a1 + 58))
  {
    nw_array_append(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), v4);
  }

  return 1;
}

void sub_1833F7F54(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_resolver_process_service_resultP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_servicePU38objcproto27OS_dnssd_getaddrinfo_result8NSObject_block_invoke(uint64_t a1, uint64_t a2)
{
  id v4;
  void *v5;
  void *v6;
  void *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  int v23;
  _QWORD *v24;
  void *v25;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  os_log_type_t v39;
  os_log_type_t v40;
  _QWORD v41[6];
  _QWORD applier[6];
  _BYTE buf[48];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = *(id *)(a1 + 32);
  v5 = v4;
  if (!v4)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
    v28 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(applier[0]) = 16;
    LOBYTE(v41[0]) = 0;
    if (!__nwlog_fault(v28, applier, v41))
      goto LABEL_68;
    if (LOBYTE(applier[0]) == 17)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = applier[0];
      if (os_log_type_enabled(v29, applier[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (LOBYTE(v41[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v34 = applier[0];
      v35 = os_log_type_enabled(v29, applier[0]);
      if (backtrace_string)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v28)
          goto LABEL_70;
        goto LABEL_69;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v39 = applier[0];
      if (os_log_type_enabled(v29, applier[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_67;
  }
  if (a2)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__5622;
    *(_QWORD *)&buf[32] = __Block_byref_object_dispose__5623;
    *(_QWORD *)&buf[40] = 0;
    v6 = (void *)*((_QWORD *)v4 + 2);
    v7 = (void *)nw_protocol_boringssl_copy_definition();
    v8 = nw_parameters_copy_protocol_options_for_definition(v6, v7);

    if (v8)
    {
      v9 = v8;
      v10 = (void *)sec_protocol_options_copy_transport_specific_application_protocol();
      v11 = v10;
      if (v10 && object_getClass(v10) == (Class)MEMORY[0x1E0C812C8])
      {
        applier[0] = MEMORY[0x1E0C809B0];
        applier[1] = 3221225472;
        applier[2] = ___ZL34nw_resolver_copy_protocol_for_alpnP22NWConcrete_nw_resolverPKc_block_invoke;
        applier[3] = &unk_1E14A91F0;
        applier[4] = buf;
        applier[5] = a2;
        xpc_array_apply(v11, applier);
      }
      v12 = *(void **)(*(_QWORD *)&buf[8] + 40);
      if (v12)
      {
        v13 = v12;

LABEL_16:
        _Block_object_dispose(buf, 8);

        goto LABEL_17;
      }
      v14 = (void *)sec_protocol_options_copy_transport_specific_application_protocol();
      v15 = v14;
      if (v14 && object_getClass(v14) == (Class)MEMORY[0x1E0C812C8])
      {
        v41[0] = MEMORY[0x1E0C809B0];
        v41[1] = 3221225472;
        v41[2] = ___ZL34nw_resolver_copy_protocol_for_alpnP22NWConcrete_nw_resolverPKc_block_invoke_2;
        v41[3] = &unk_1E14A91F0;
        v41[4] = buf;
        v41[5] = a2;
        xpc_array_apply(v15, v41);
      }
      v16 = *(void **)(*(_QWORD *)&buf[8] + 40);
      if (v16)
      {
        v13 = v16;

        goto LABEL_16;
      }

    }
    v13 = *(id *)(*(_QWORD *)&buf[8] + 40);
    goto LABEL_16;
  }
  __nwlog_obj();
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
  v28 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(applier[0]) = 16;
  LOBYTE(v41[0]) = 0;
  if (__nwlog_fault(v28, applier, v41))
  {
    if (LOBYTE(applier[0]) == 17)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v32 = applier[0];
      if (os_log_type_enabled(v29, applier[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null alpn", buf, 0xCu);
      }
LABEL_67:

      goto LABEL_68;
    }
    if (!LOBYTE(v41[0]))
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v40 = applier[0];
      if (os_log_type_enabled(v29, applier[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_182FBE000, v29, v40, "%{public}s called with null alpn, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_67;
    }
    v36 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v37 = applier[0];
    v38 = os_log_type_enabled(v29, applier[0]);
    if (!v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
        _os_log_impl(&dword_182FBE000, v29, v37, "%{public}s called with null alpn, no backtrace", buf, 0xCu);
      }
      goto LABEL_67;
    }
    if (v38)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_resolver_copy_protocol_for_alpn";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v36;
      _os_log_impl(&dword_182FBE000, v29, v37, "%{public}s called with null alpn, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v36);
  }
LABEL_68:
  if (v28)
LABEL_69:
    free(v28);
LABEL_70:
  v13 = 0;
LABEL_17:

  v17 = *(_QWORD *)(a1 + 32);
  if (v17)
  {
    if ((*(_BYTE *)(v17 + 346) & 0x20) != 0)
      goto LABEL_30;
    if (*(_BYTE *)(v17 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v18 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
        goto LABEL_29;
      v19 = *(_QWORD *)(a1 + 32) + 256;
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_resolver_process_service_result_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v19;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = a2;
      *(_WORD *)&buf[32] = 2114;
      *(_QWORD *)&buf[34] = v13;
      v20 = "%{public}s [C%{public}s] ALPN: %{public}s maps to %{public}@";
      v21 = v18;
      v22 = 42;
      goto LABEL_28;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      v23 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_resolver_process_service_result_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v23;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = a2;
      *(_WORD *)&buf[28] = 2114;
      *(_QWORD *)&buf[30] = v13;
      v20 = "%{public}s [R%u] ALPN: %{public}s maps to %{public}@";
      v21 = v18;
      v22 = 38;
      goto LABEL_28;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_resolver_process_service_result_block_invoke";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = a2;
      *(_WORD *)&buf[22] = 2114;
      *(_QWORD *)&buf[24] = v13;
      v20 = "%{public}s ALPN: %{public}s maps to %{public}@";
      v21 = v18;
      v22 = 32;
LABEL_28:
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, v20, buf, v22);
    }
  }
LABEL_29:

LABEL_30:
  if (v13)
  {
    v24 = *(_QWORD **)(a1 + 32);
    v25 = *(void **)(a1 + 40);
    if (!v25)
      v25 = (void *)v24[3];
    nw_resolver_update_client_alternative(v24, v25, v13);
  }

  return 1;
}

void sub_1833F87B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,id a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Block_object_dispose(&a25, 8);
  _Unwind_Resume(a1);
}

void nw_resolver_update_client_alternative(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  void *v9;
  id v10;
  void *v11;
  NSObject *v12;
  _BOOL8 v13;
  void *v14;
  _BOOL8 v15;
  void *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD aBlock[4];
  id v32;
  id v33;
  id v34;
  id v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (!v5)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_resolver_update_client_alternative";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v18, &type, &v36))
      goto LABEL_50;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_resolver_update_client_alternative";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_resolver_update_client_alternative";
          v40 = 2082;
          v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_50:
        if (!v18)
          goto LABEL_16;
LABEL_51:
        free(v18);
        goto LABEL_16;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_resolver_update_client_alternative";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_resolver_update_client_alternative";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_49:

    goto LABEL_50;
  }
  if (v6)
  {
    v8 = _Block_copy(*((const void **)v5 + 21));
    if (*((_QWORD *)v5 + 23))
    {
      if (*((_QWORD *)v5 + 24))
      {
LABEL_5:
        nw_array_append(*((_QWORD *)v5 + 23), v6);
        if (v7)
          v9 = v7;
        else
          v9 = (void *)MEMORY[0x1E0C80D00];
        nw_array_append(*((_QWORD *)v5 + 24), v9);
        if (v8)
        {
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = ___ZL37nw_resolver_update_client_alternativeP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectPU36objcproto25OS_nw_protocol_definitionS1__block_invoke;
          aBlock[3] = &unk_1E14AAE78;
          v10 = v5;
          v32 = v10;
          v35 = v8;
          v33 = v6;
          v34 = v7;
          v11 = _Block_copy(aBlock);
          v12 = *((_QWORD *)v10 + 14);
          if (v12)
            dispatch_async(v12, v11);
          else
            nw_queue_context_async(*((void **)v10 + 4), v11);

        }
        goto LABEL_16;
      }
    }
    else
    {
      v13 = nw_array_create();
      v14 = (void *)*((_QWORD *)v5 + 23);
      *((_QWORD *)v5 + 23) = v13;

      if (*((_QWORD *)v5 + 24))
        goto LABEL_5;
    }
    v15 = nw_array_create();
    v16 = (void *)*((_QWORD *)v5 + 24);
    *((_QWORD *)v5 + 24) = v15;

    goto LABEL_5;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_resolver_update_client_alternative";
  v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (!__nwlog_fault(v18, &type, &v36))
    goto LABEL_50;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_resolver_update_client_alternative";
      _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null endpoint", buf, 0xCu);
    }
    goto LABEL_49;
  }
  if (!v36)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v30 = type;
    if (os_log_type_enabled(v19, type))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_resolver_update_client_alternative";
      _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_49;
  }
  v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v19 = objc_claimAutoreleasedReturnValue();
  v27 = type;
  v28 = os_log_type_enabled(v19, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_resolver_update_client_alternative";
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_49;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v39 = "nw_resolver_update_client_alternative";
    v40 = 2082;
    v41 = v26;
    _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v18)
    goto LABEL_51;
LABEL_16:

}

void sub_1833F8DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;

  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_resolver_process_service_resultP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_servicePU38objcproto27OS_dnssd_getaddrinfo_result8NSObject_block_invoke_216(uint64_t a1, const sockaddr *a2)
{
  size_t sa_len;
  size_t v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  const char *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  int v23;
  const char *v24;
  int v25;
  const char *v26;
  const char *v27;
  void *v28;
  void *v29;
  uint64_t priority;
  OS_dispatch_data *v31;
  int v33;
  const char *v34;
  __int16 v35;
  _BYTE v36[38];
  uint64_t v37;
  char v38;
  unsigned __int8 __dst;
  unsigned __int8 v40;
  __int16 v41;
  int v42;
  int32x4_t v43[7];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  sa_len = a2->sa_len;
  if ((sa_len & 0x80u) == 0)
    v5 = 128 - sa_len;
  else
    v5 = 0;
  bzero(&__dst + sa_len, v5);
  memcpy(&__dst, a2, sa_len);
  v41 = __rev16(nw_resolver_service_get_port(*(NWConcrete_nw_resolver_service **)(a1 + 32)));
  v6 = v40;
  if (v40 != 2)
  {
    if (v40 != 30)
    {
      v9 = 0;
      v7 = *(_QWORD *)(a1 + 40);
      goto LABEL_15;
    }
    v7 = *(_QWORD *)(a1 + 40);
    if (*(char *)(v7 + 346) < 0)
    {
      v8 = *(_DWORD *)(v7 + 80) == 1;
      goto LABEL_12;
    }
LABEL_9:
    v9 = 1;
    goto LABEL_15;
  }
  v7 = *(_QWORD *)(a1 + 40);
  if ((*(_BYTE *)(v7 + 346) & 0x40) == 0)
    goto LABEL_9;
  v8 = *(_DWORD *)(v7 + 80) == 2;
LABEL_12:
  v9 = v8;
LABEL_15:
  if (!nw_parameters_get_sensitive_redacted(*(void **)(v7 + 16)))
  {
    v13 = *(_QWORD *)(a1 + 40);
    if (v13)
    {
      if ((*(_BYTE *)(v13 + 346) & 0x20) != 0)
        goto LABEL_66;
      if (*(_BYTE *)(v13 + 256))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v14 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v15 = *(_QWORD *)(a1 + 40) + 256;
          v16 = "";
          v34 = "nw_resolver_process_service_result_block_invoke";
          v33 = 136447234;
          if (v9)
            v16 = " (ignoring)";
          v35 = 2082;
          *(_QWORD *)v36 = v15;
          *(_WORD *)&v36[8] = 1040;
          *(_DWORD *)&v36[10] = __dst;
          *(_WORD *)&v36[14] = 2098;
          *(_QWORD *)&v36[16] = &__dst;
          *(_WORD *)&v36[24] = 2082;
          *(_QWORD *)&v36[26] = v16;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s] Address hint: %{public,network:sockaddr}.*P%{public}s", (uint8_t *)&v33, 0x30u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v23 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 340);
          v24 = "";
          if (v9)
            v24 = " (ignoring)";
          v33 = 136447234;
          v34 = "nw_resolver_process_service_result_block_invoke";
          v35 = 1024;
          *(_DWORD *)v36 = v23;
          *(_WORD *)&v36[4] = 1040;
          *(_DWORD *)&v36[6] = __dst;
          *(_WORD *)&v36[10] = 2098;
          *(_QWORD *)&v36[12] = &__dst;
          *(_WORD *)&v36[20] = 2082;
          *(_QWORD *)&v36[22] = v24;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s [R%u] Address hint: %{public,network:sockaddr}.*P%{public}s", (uint8_t *)&v33, 0x2Cu);
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v14 = (id)gLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v17 = "";
        v34 = "nw_resolver_process_service_result_block_invoke";
        v35 = 1040;
        v33 = 136446978;
        if (v9)
          v17 = " (ignoring)";
        *(_DWORD *)v36 = __dst;
        *(_WORD *)&v36[4] = 2098;
        *(_QWORD *)&v36[6] = &__dst;
        *(_WORD *)&v36[14] = 2082;
        *(_QWORD *)&v36[16] = v17;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s Address hint: %{public,network:sockaddr}.*P%{public}s", (uint8_t *)&v33, 0x26u);
      }
    }
    goto LABEL_65;
  }
  v38 = 0;
  v37 = 0;
  if (v6 != 30)
  {
    if (v6 != 2)
    {
      v10 = "<NULL>";
      v11 = "";
      v12 = *(_QWORD *)(a1 + 40);
      if (!v12)
        goto LABEL_60;
      goto LABEL_40;
    }
    if (v42)
    {
      v10 = (const char *)&v37;
      __nwlog_salted_hash(&v42, 4, (char *)&v37);
      v11 = "IPv4#";
      v12 = *(_QWORD *)(a1 + 40);
      if (!v12)
        goto LABEL_60;
      goto LABEL_40;
    }
    v10 = "INADDR_ANY";
LABEL_59:
    v11 = "";
    v12 = *(_QWORD *)(a1 + 40);
    if (!v12)
      goto LABEL_60;
    goto LABEL_40;
  }
  if ((vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(v43[0], v43[0]))) & 1) == 0)
  {
    v10 = "IN6ADDR_ANY";
    goto LABEL_59;
  }
  v10 = (const char *)&v37;
  __nwlog_salted_hash(v43, 16, (char *)&v37);
  v11 = "IPv6#";
  v12 = *(_QWORD *)(a1 + 40);
  if (!v12)
  {
LABEL_60:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
    {
      v27 = " (ignoring)";
      v34 = "nw_resolver_process_service_result_block_invoke";
      v33 = 136446978;
      if (!v9)
        v27 = "";
      v35 = 2080;
      *(_QWORD *)v36 = v11;
      *(_WORD *)&v36[8] = 2080;
      *(_QWORD *)&v36[10] = v10;
      *(_WORD *)&v36[18] = 2082;
      *(_QWORD *)&v36[20] = v27;
      v20 = "%{public}s Address hint: %s%s%{public}s";
      v21 = v14;
      v22 = 42;
LABEL_64:
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, v20, (uint8_t *)&v33, v22);
      goto LABEL_65;
    }
    goto LABEL_65;
  }
LABEL_40:
  if ((*(_BYTE *)(v12 + 346) & 0x20) != 0)
    goto LABEL_66;
  if (*(_BYTE *)(v12 + 256))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = (id)gconnectionLogObj;
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      goto LABEL_65;
    v18 = *(_QWORD *)(a1 + 40) + 256;
    v34 = "nw_resolver_process_service_result_block_invoke";
    v19 = " (ignoring)";
    v33 = 136447234;
    if (!v9)
      v19 = "";
    v35 = 2082;
    *(_QWORD *)v36 = v18;
    *(_WORD *)&v36[8] = 2080;
    *(_QWORD *)&v36[10] = v11;
    *(_WORD *)&v36[18] = 2080;
    *(_QWORD *)&v36[20] = v10;
    *(_WORD *)&v36[28] = 2082;
    *(_QWORD *)&v36[30] = v19;
    v20 = "%{public}s [C%{public}s] Address hint: %s%s%{public}s";
    v21 = v14;
    v22 = 52;
    goto LABEL_64;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    v25 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 340);
    v26 = " (ignoring)";
    if (!v9)
      v26 = "";
    v33 = 136447234;
    v34 = "nw_resolver_process_service_result_block_invoke";
    v35 = 1024;
    *(_DWORD *)v36 = v25;
    *(_WORD *)&v36[4] = 2080;
    *(_QWORD *)&v36[6] = v11;
    *(_WORD *)&v36[14] = 2080;
    *(_QWORD *)&v36[16] = v10;
    *(_WORD *)&v36[24] = 2082;
    *(_QWORD *)&v36[26] = v26;
    v20 = "%{public}s [R%u] Address hint: %s%s%{public}s";
    v21 = v14;
    v22 = 48;
    goto LABEL_64;
  }
LABEL_65:

LABEL_66:
  if ((v9 & 1) == 0)
  {
    nw_resolver_update_flags_locked(*(NWConcrete_nw_resolver **)(a1 + 40), *(NWConcrete_nw_resolver_service **)(a1 + 32), 2, 0, a2, 1, 0);
    v29 = *(void **)(a1 + 40);
    v28 = *(void **)(a1 + 48);
    priority = nw_resolver_service_get_priority(*(NWConcrete_nw_resolver_service **)(a1 + 32));
    v31 = nw_resolver_service_copy_ech_config(*(NWConcrete_nw_resolver_service **)(a1 + 32));
    nw_resolver_insert_address(v29, v28, (const sockaddr *)&__dst, priority, v31);

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  return 1;
}

void sub_1833F9528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

OS_dispatch_data *nw_resolver_service_copy_ech_config(NWConcrete_nw_resolver_service *a1)
{
  NWConcrete_nw_resolver_service *v1;
  NWConcrete_nw_resolver_service *v2;
  OS_dispatch_data *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1->ech_config;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_service_copy_ech_config";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_service_copy_ech_config";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null service", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_service_copy_ech_config";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_service_copy_ech_config";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_service_copy_ech_config";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_205(_QWORD *a1, uint64_t a2, void *a3)
{
  unsigned __int16 *v4;
  unsigned __int16 *v5;
  int v6;
  unsigned __int16 *v7;
  char v8;
  NWConcrete_nw_resolver_service *v9;
  char v10;
  unsigned int port;
  uint64_t v12;
  void *v13;
  void *v14;
  uint64_t priority;
  OS_dispatch_data *v16;
  unsigned int v17;
  uint64_t v18;
  OS_dispatch_data *v19;
  uint64_t v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  char *v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v5 = v4;
  if (!v4)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v41 = "nw_resolver_service_is_alias";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v38 = 0;
    if (!__nwlog_fault(v23, &type, &v38))
      goto LABEL_26;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_resolver_service_is_alias";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null service", buf, 0xCu);
      }
    }
    else if (v38)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v41 = "nw_resolver_service_is_alias";
          v42 = 2082;
          v43 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_26:
        if (v23)
          free(v23);
        __nwlog_obj();
        v30 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v41 = "nw_resolver_service_host_matches_origin";
        v31 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v38 = 0;
        if (!__nwlog_fault(v31, &type, &v38))
          goto LABEL_44;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v32 = objc_claimAutoreleasedReturnValue();
          v33 = type;
          if (os_log_type_enabled(v32, type))
          {
            *(_DWORD *)buf = 136446210;
            v41 = "nw_resolver_service_host_matches_origin";
            _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null service", buf, 0xCu);
          }
        }
        else if (v38)
        {
          v34 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v32 = objc_claimAutoreleasedReturnValue();
          v35 = type;
          v36 = os_log_type_enabled(v32, type);
          if (v34)
          {
            if (v36)
            {
              *(_DWORD *)buf = 136446466;
              v41 = "nw_resolver_service_host_matches_origin";
              v42 = 2082;
              v43 = v34;
              _os_log_impl(&dword_182FBE000, v32, v35, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v34);
            goto LABEL_44;
          }
          if (v36)
          {
            *(_DWORD *)buf = 136446210;
            v41 = "nw_resolver_service_host_matches_origin";
            _os_log_impl(&dword_182FBE000, v32, v35, "%{public}s called with null service, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v32 = objc_claimAutoreleasedReturnValue();
          v37 = type;
          if (os_log_type_enabled(v32, type))
          {
            *(_DWORD *)buf = 136446210;
            v41 = "nw_resolver_service_host_matches_origin";
            _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
          }
        }

LABEL_44:
        if (v31)
          free(v31);
        goto LABEL_9;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_resolver_service_is_alias";
        _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_resolver_service_is_alias";
        _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_26;
  }
  v6 = v4[16];

  if (v6)
  {
    v7 = v5;
    v8 = *((_BYTE *)v7 + 48);

    if ((v8 & 2) != 0)
    {
      v9 = v7;
      v10 = *((_BYTE *)v7 + 48);

      if ((v10 & 4) == 0)
      {
        port = nw_resolver_service_get_port(v9);
        v12 = a1[8];
        *(_WORD *)(v12 + 2) = __rev16(port);
        v13 = (void *)a1[4];
        v14 = (void *)a1[5];
        priority = nw_resolver_service_get_priority(v9);
        v16 = nw_resolver_service_copy_ech_config(v9);
        nw_resolver_insert_address(v13, v14, (const sockaddr *)v12, priority, v16);
LABEL_8:

        goto LABEL_9;
      }
      v17 = nw_resolver_service_get_priority(v9);
      v18 = *(_QWORD *)(a1[6] + 8);
      if (v17 <= (unsigned __int16)(*(_WORD *)(v18 + 24) - 1))
      {
        *(_WORD *)(v18 + 24) = v17;
        v19 = nw_resolver_service_copy_ech_config(v9);
        v20 = *(_QWORD *)(a1[7] + 8);
        v16 = *(OS_dispatch_data **)(v20 + 40);
        *(_QWORD *)(v20 + 40) = v19;
        goto LABEL_8;
      }
    }
  }
LABEL_9:

  return 1;
}

void sub_1833F9D28(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_resolver_insert_address(void *a1, void *a2, const sockaddr *a3, uint64_t a4, void *a5)
{
  void **v9;
  id v10;
  id v11;
  nw_endpoint_t address;
  void *v13;
  uint64_t *v14;
  id v15;
  void *v16;
  uint64_t count;
  _BOOL8 v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t i;
  const char *cname;
  _BOOL8 host_with_numeric_port;
  const char *v25;
  void *v26;
  void *v27;
  unsigned int interface_index;
  const sockaddr *v29;
  BOOL v30;
  void *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  char *backtrace_string;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  void *v39;
  const sockaddr *v40;
  _QWORD v41[5];
  os_log_type_t type[8];
  uint64_t v43;
  unsigned __int8 v44;
  _BYTE buf[12];
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a5;
  address = nw_endpoint_create_address(a3);
  v40 = a3;
  nw_endpoint_set_parent_endpoint(address, v9[3], 0);
  nw_endpoint_set_priority(address, a4);
  if (v11)
    nw_endpoint_set_ech_config(address, v11);
  if (!v10)
    goto LABEL_29;
  v43 = 0;
  dnssd_getaddrinfo_result_get_validation_data();
  dnssd_getaddrinfo_result_get_cnames();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  if (v13)
  {
    v14 = address;
    v39 = v13;
    v15 = v13;
    if (v14)
    {
      v16 = (void *)v14[15];
      v14[15] = 0;

      count = dnssd_cname_array_get_count();
      if (count)
      {
        v18 = nw_array_create();
        v19 = (void *)v14[15];
        v14[15] = v18;

        v20 = objc_msgSend(v14, "type");
        v21 = 0;
        if (v20 <= 4 && ((1 << v20) & 0x16) != 0)
          v21 = __rev16(objc_msgSend(v14, "port"));
        for (i = 0; i != count; ++i)
        {
          cname = (const char *)dnssd_cname_array_get_cname();
          host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(cname, v21);
          if (host_with_numeric_port)
            nw_array_append(v14[15], (void *)host_with_numeric_port);

        }
      }
LABEL_14:

      v13 = v39;
      goto LABEL_15;
    }
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
    v32 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v44 = 0;
    if (__nwlog_fault(v32, type, &v44))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v44)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v38 = type[0];
        v36 = os_log_type_enabled(v33, type[0]);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
            v46 = 2082;
            v47 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v33, v38, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
          _os_log_impl(&dword_182FBE000, v33, v38, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v37 = type[0];
        if (os_log_type_enabled(v33, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_dnssd_cname_array";
          _os_log_impl(&dword_182FBE000, v33, v37, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_47:
    if (v32)
      free(v32);
    goto LABEL_14;
  }
LABEL_15:
  *(_QWORD *)buf = 0;
  *(_QWORD *)buf = dnssd_getaddrinfo_result_get_tracker_hostname();
  *(_QWORD *)type = 0;
  *(_QWORD *)type = dnssd_getaddrinfo_result_get_tracker_owner();
  v25 = *(const char **)buf;
  if (*(_QWORD *)buf)
    goto LABEL_19;
  v26 = nw_context_copy_tracker_lookup_callback(v9[4]);
  v27 = v26;
  if (v26)
  {
    v44 = 0;
    (*((void (**)(void *, nw_endpoint_t, _BYTE *, os_log_type_t *, unsigned __int8 *))v26 + 2))(v26, address, buf, type, &v44);
    nw_endpoint_set_can_block_request(address, v44);
    nw_endpoint_set_can_block_request(v9[3], v44);
  }

  v25 = *(const char **)buf;
  if (*(_QWORD *)buf | *(_QWORD *)type)
  {
LABEL_19:
    nw_endpoint_set_known_tracker_name(address, v25);
    nw_endpoint_set_known_tracker_name(v9[3], *(const char **)buf);
    nw_endpoint_set_tracker_owner(address, *(const char **)type);
    nw_endpoint_set_tracker_owner(v9[3], *(const char **)type);
  }
  if (dnssd_getaddrinfo_result_get_tracker_is_approved())
    nw_endpoint_set_is_approved_app_domain(address, 1);
  if (dnssd_getaddrinfo_result_get_tracker_can_block_request())
    nw_endpoint_set_can_block_request(address, 1);
  interface_index = dnssd_getaddrinfo_result_get_interface_index();
  if (interface_index && (v29 = nw_endpoint_get_address(address), nw_resolver_should_scope_address(v29)))
  {
    v30 = nw_resolver_set_interface_on_endpoint(v9, interface_index, address);

    if (!v30)
      goto LABEL_30;
  }
  else
  {

  }
LABEL_29:
  v41[0] = MEMORY[0x1E0C809B0];
  v41[1] = 3221225472;
  v41[2] = ___ZL26nw_resolver_insert_addressP22NWConcrete_nw_resolverPU38objcproto27OS_dnssd_getaddrinfo_result8NSObjectPK8sockaddrtPU27objcproto16OS_dispatch_dataS1__block_invoke;
  v41[3] = &__block_descriptor_40_e63_B24__0__NSObject_OS_nw_endpoint__8__NSObject_OS_nw_endpoint__16l;
  v41[4] = v40;
  nw_resolver_insert_endpoint_locked(v9, address, v41);
LABEL_30:

}

void sub_1833FA290(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2_206(uint64_t a1, void *a2)
{
  return nw_endpoint_address_endpoint_matches_address(a2, *(unsigned __int8 **)(a1 + 32), *(_DWORD *)(a1 + 40), 0);
}

BOOL ___ZL26nw_resolver_insert_addressP22NWConcrete_nw_resolverPU38objcproto27OS_dnssd_getaddrinfo_result8NSObjectPK8sockaddrtPU27objcproto16OS_dispatch_dataS1__block_invoke(uint64_t a1, void *a2)
{
  NSObject *v3;
  _BOOL8 v4;

  v3 = a2;
  if (nw_endpoint_address_endpoint_matches_address(v3, *(unsigned __int8 **)(a1 + 32), 0, 1))
    v4 = nw_endpoint_get_port(v3) == bswap32(*(unsigned __int16 *)(*(_QWORD *)(a1 + 32) + 2)) >> 16;
  else
    v4 = 0;

  return v4;
}

void sub_1833FA38C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_resolver_service_get_priority(NWConcrete_nw_resolver_service *a1)
{
  NWConcrete_nw_resolver_service *v1;
  NWConcrete_nw_resolver_service *v2;
  uint64_t port;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    port = v1->port;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_service_get_priority";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_service_get_priority";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null service", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_service_get_priority";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_service_get_priority";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_service_get_priority";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  port = 0;
LABEL_3:

  return port;
}

uint64_t nw_resolver_service_get_port(NWConcrete_nw_resolver_service *a1)
{
  NWConcrete_nw_resolver_service *v1;
  NWConcrete_nw_resolver_service *v2;
  uint64_t port;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    port = v1->port;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_service_get_port";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_service_get_port";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null service", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_service_get_port";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null service, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_service_get_port";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null service, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_service_get_port";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null service, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  port = 0;
LABEL_3:

  return port;
}

uint64_t ___ZL31nw_resolver_check_svcb_completeP22NWConcrete_nw_resolver_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int16 v3;
  int v4;
  int v5;
  uint64_t v6;
  BOOL v7;

  if (!*(_QWORD *)(a3 + 24))
    return 1;
  v3 = *(_WORD *)(a3 + 36);
  v4 = v3 & 5;
  v5 = v3 & 0xA;
  v6 = 1;
  if (v4)
    v7 = v5 == 0;
  else
    v7 = 1;
  if (v7)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
    return 0;
  }
  return v6;
}

void ___ZL37nw_resolver_update_client_alternativeP22NWConcrete_nw_resolverPU25objcproto14OS_nw_endpoint8NSObjectPU36objcproto25OS_nw_protocol_definitionS1__block_invoke(uint64_t a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;

  v2 = *(os_unfair_lock_s **)(a1 + 32);
  v3 = v2 + 3;
  v4 = v2;
  os_unfair_lock_lock(v3);
  v5 = *(_QWORD *)&v4[24]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v3);

  if (v5)
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t ___ZL34nw_resolver_copy_protocol_for_alpnP22NWConcrete_nw_resolverPKc_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;
  uint64_t v6;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81390]
    && (string_ptr = xpc_string_get_string_ptr(v4), !strcmp(string_ptr, *(const char **)(a1 + 40))))
  {
    if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (id)nw_protocol_copy_quic_stream_definition::quic_definition);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

void sub_1833FAA1C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL34nw_resolver_copy_protocol_for_alpnP22NWConcrete_nw_resolverPKc_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string_ptr;
  uint64_t v6;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C81390]
    && (string_ptr = xpc_string_get_string_ptr(v4), !strcmp(string_ptr, *(const char **)(a1 + 40))))
  {
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), (id)g_tcp_definition);
    v6 = 0;
  }
  else
  {
    v6 = 1;
  }

  return v6;
}

void sub_1833FAAD0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_192(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  const sockaddr *address;
  void *v6;
  uint64_t priority;

  v4 = a3;
  address = nw_endpoint_get_address(v4);
  if (address)
  {
    nw_resolver_update_flags_locked(*(NWConcrete_nw_resolver **)(a1 + 32), *(NWConcrete_nw_resolver_service **)(a1 + 40), -2147483646, 0, address, 0, 0);
    v6 = *(void **)(a1 + 32);
    priority = nw_endpoint_get_priority(v4);
    nw_resolver_insert_address(v6, 0, address, priority, 0);
  }

  return 1;
}

void sub_1833FAB70(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  id v5;
  uint64_t v6;
  _QWORD v7[4];
  id v8;
  uint64_t v9;

  v3 = a2;
  if (nw_resolver_config_get_protocol(v3) || nw_resolver_config_get_class(v3))
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
  }
  else
  {
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_3;
    v7[3] = &unk_1E149AE18;
    v5 = *(id *)(a1 + 32);
    v6 = *(_QWORD *)(a1 + 40);
    v8 = v5;
    v9 = v6;
    nw_resolver_config_enumerate_name_servers(v3, v7);

  }
  return 1;
}

void sub_1833FAC2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  _Unwind_Resume(a1);
}

BOOL ___ZL41nw_resolver_create_dns_getaddrinfo_lockedP22NWConcrete_nw_resolverP30NWConcrete_nw_resolver_service_block_invoke_3(uint64_t a1, char *hostname)
{
  nw_endpoint_t host;
  _BOOL8 v4;

  host = nw_endpoint_create_host(hostname, "0");
  if (nw_endpoint_is_equal(host, *(void **)(a1 + 32), 0))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v4 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) == 0;

  return v4;
}

void sub_1833FACBC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL36nw_protocol_copy_resolver_definitionv_block_invoke()
{
  NWConcrete_nw_protocol_definition *named;
  void *v1;

  named = nw_protocol_definition_create_named(1, 0);
  v1 = (void *)nw_protocol_copy_resolver_definition(void)::resolver_definition;
  nw_protocol_copy_resolver_definition(void)::resolver_definition = (uint64_t)named;

  nw_protocol_definition_set_cache_entry_deallocator((void *)nw_protocol_copy_resolver_definition(void)::resolver_definition, nw_resolver_deallocate_cache_entry);
  nw_protocol_definition_set_should_flush_cache_entry((void *)nw_protocol_copy_resolver_definition(void)::resolver_definition, nw_resolver_should_flush_cache_entry);
}

void nw_resolver_deallocate_cache_entry(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;
  void *v5;

  v3 = *a2;
  *a2 = 0;

  v4 = a2[1];
  a2[1] = 0;

  v5 = a2[2];
  a2[2] = 0;

  free(a2);
}

uint64_t nw_resolver_should_flush_cache_entry(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  xpc_object_t *v8;
  xpc_object_t *v9;
  xpc_object_t *v10;
  _BOOL4 v11;
  xpc_object_t v12;
  xpc_object_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  BOOL v19;
  void *v20;
  void *v21;
  void *v22;
  size_t length;
  char out[40];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v8 = a4;
  v9 = a5;
  v10 = v9;
  v11 = v8 == v9;
  if (v8 != v9 && v8 && v9)
  {
    v12 = v8[28];
    v13 = v9[28];
    if (v12 && v13)
    {
      if (*((_DWORD *)v8 + 87))
      {
        v14 = 0;
        while (!uuid_is_null((const unsigned __int8 *)v8[37] + 20 * v14 + 4))
        {
          memset(out, 0, 37);
          uuid_unparse((const unsigned __int8 *)v8[37] + 20 * v14 + 4, out);
          xpc_dictionary_get_value(v8[28], out);
          v15 = (void *)objc_claimAutoreleasedReturnValue();
          v16 = v15;
          if (v15)
          {
            length = 0;
            xpc_dictionary_get_data(v15, "data", &length);
            if (is_config_agent_type_dns())
            {
              if (*((_DWORD *)v10 + 87))
              {
                v17 = 0;
                v18 = 4;
                while (!uuid_is_null((const unsigned __int8 *)v10[37] + v18))
                {
                  if (!uuid_compare((const unsigned __int8 *)v8[37] + 20 * v14 + 4, (const unsigned __int8 *)v10[37] + v18))
                  {
                    v19 = *((_DWORD *)v8[37] + 5 * v14) == *((_DWORD *)v10[37] + 5 * v17);

                    if (v19)
                      goto LABEL_18;
                    goto LABEL_24;
                  }
                  ++v17;
                  v18 += 20;
                  if (v17 >= *((unsigned int *)v10 + 87))
                    break;
                }
              }

LABEL_24:
              return 1;
            }
          }

LABEL_18:
          ++v14;
          v11 = 1;
          if (v14 >= *((unsigned int *)v8 + 87))
            goto LABEL_26;
        }
      }
      v11 = 1;
    }
    else
    {
      v11 = v12 == v13;
    }
  }
LABEL_26:

  if ((v11 & a3) != 1)
    return !v11;
  if (!*(_BYTE *)(a2 + 24))
    return 1;
  v20 = *(void **)a2;
  *(_QWORD *)a2 = 0;

  v21 = *(void **)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;

  v22 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;

  return 0;
}

void sub_1833FAFC4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ___ZL32nw_resolver_update_status_lockedP22NWConcrete_nw_resolverU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  const char *v13;
  __int16 v14;
  _BYTE v15[18];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 346) & 0x20) != 0)
      return;
    if (*(_BYTE *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
        goto LABEL_13;
      v4 = *(_QWORD *)(a1 + 40);
      v5 = *(_QWORD *)(a1 + 32) + 256;
      v12 = 136446722;
      v13 = "nw_resolver_update_status_locked_block_invoke";
      v14 = 2082;
      *(_QWORD *)v15 = v5;
      *(_WORD *)&v15[8] = 2048;
      *(_QWORD *)&v15[10] = v4;
      v6 = "%{public}s [C%{public}s] Stored %zu DNS results to storage cache";
      v7 = v3;
      v8 = 32;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v10 = *(_QWORD *)(a1 + 40);
      v11 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
      v12 = 136446722;
      v13 = "nw_resolver_update_status_locked_block_invoke";
      v14 = 1024;
      *(_DWORD *)v15 = v11;
      *(_WORD *)&v15[4] = 2048;
      *(_QWORD *)&v15[6] = v10;
      v6 = "%{public}s [R%u] Stored %zu DNS results to storage cache";
      v7 = v3;
      v8 = 28;
      goto LABEL_12;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      v9 = *(_QWORD *)(a1 + 40);
      v12 = 136446466;
      v13 = "nw_resolver_update_status_locked_block_invoke";
      v14 = 2048;
      *(_QWORD *)v15 = v9;
      v6 = "%{public}s Stored %zu DNS results to storage cache";
      v7 = v3;
      v8 = 22;
LABEL_12:
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, v6, (uint8_t *)&v12, v8);
    }
  }
LABEL_13:

}

void nw_resolver_start_query_timer(NWConcrete_nw_resolver *a1)
{
  NWConcrete_nw_resolver *v1;
  NWConcrete_nw_resolver *v2;
  NSObject *v3;
  const char *v4;
  const char *v5;
  NSObject *v6;
  uint32_t v7;
  NSObject *v8;
  const char *logging_description;
  const char *v10;
  NSObject *v11;
  uint32_t v12;
  int v13;
  const char *v14;
  int v15;
  const char *v16;
  void *v17;
  uint64_t v18;
  uint64_t source;
  dispatch_time_t v20;
  id v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *backtrace_string;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  _QWORD v33[4];
  NSObject *v34;
  _QWORD v35[4];
  NSObject *v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _BYTE v40[24];
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!*((_QWORD *)v1 + 16))
  {
    if ((*((_BYTE *)v1 + 346) & 0x20) != 0)
      goto LABEL_21;
    if (*((_BYTE *)v1 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v8 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
        goto LABEL_20;
      logging_description = nw_endpoint_get_logging_description(*((void **)v2 + 3));
      *(_DWORD *)buf = 136446978;
      v38 = "nw_resolver_start_query_timer";
      v39 = 2082;
      *(_QWORD *)v40 = (char *)v2 + 256;
      *(_WORD *)&v40[8] = 1024;
      *(_DWORD *)&v40[10] = 2;
      *(_WORD *)&v40[14] = 2082;
      *(_QWORD *)&v40[16] = logging_description;
      v10 = "%{public}s [C%{public}s] Starting %us query timer to receive all answers for %{public}s";
      v11 = v8;
      v12 = 38;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
      {
LABEL_20:

LABEL_21:
        v17 = (void *)*((_QWORD *)v2 + 4);
        v18 = MEMORY[0x1E0C809B0];
        v35[0] = MEMORY[0x1E0C809B0];
        v35[1] = 3221225472;
        v35[2] = ___ZL29nw_resolver_start_query_timerP22NWConcrete_nw_resolver_block_invoke;
        v35[3] = &unk_1E14ACFD0;
        v36 = v2;
        v33[0] = v18;
        v33[1] = 3221225472;
        v33[2] = ___ZL29nw_resolver_start_query_timerP22NWConcrete_nw_resolver_block_invoke_172;
        v33[3] = &unk_1E14ACFD0;
        v34 = v36;
        source = nw_queue_context_create_source(v17, 2, 3, 0, v35, v33);
        *((_QWORD *)v2 + 16) = source;
        if (source)
        {
          v20 = dispatch_time(0x8000000000000000, 2000000000);
          if (*(_QWORD *)source)
          {
            dispatch_source_set_timer(*(dispatch_source_t *)source, v20, 0xFFFFFFFFFFFFFFFFLL, 0x989680uLL);
          }
          else
          {
            *(_QWORD *)(source + 32) = v20;
            *(_QWORD *)(source + 40) = -1;
            if (*(_BYTE *)(source + 48) && *(_BYTE *)(source + 49))
              nw_queue_source_run_timer(source, v20);
          }
          nw_queue_activate_source(*((_QWORD *)v2 + 16), v20);
          goto LABEL_32;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v38 = "nw_resolver_start_query_timer";
        v22 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v31 = 0;
        if (__nwlog_fault(v22, &type, &v31))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v23 = (id)gLogObj;
            v24 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              v38 = "nw_resolver_start_query_timer";
              _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s nw_queue_context_create_source failed", buf, 0xCu);
            }
          }
          else if (v31)
          {
            backtrace_string = __nw_create_backtrace_string();
            if (backtrace_string)
            {
              v26 = (char *)backtrace_string;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v27 = (id)gLogObj;
              v28 = type;
              if (os_log_type_enabled(v27, type))
              {
                *(_DWORD *)buf = 136446466;
                v38 = "nw_resolver_start_query_timer";
                v39 = 2082;
                *(_QWORD *)v40 = v26;
                _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s nw_queue_context_create_source failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v26);
              if (!v22)
                goto LABEL_32;
              goto LABEL_31;
            }
            __nwlog_obj();
            v23 = objc_claimAutoreleasedReturnValue();
            v30 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              v38 = "nw_resolver_start_query_timer";
              _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s nw_queue_context_create_source failed, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v23 = (id)gLogObj;
            v29 = type;
            if (os_log_type_enabled(v23, type))
            {
              *(_DWORD *)buf = 136446210;
              v38 = "nw_resolver_start_query_timer";
              _os_log_impl(&dword_182FBE000, v23, v29, "%{public}s nw_queue_context_create_source failed, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
        if (!v22)
        {
LABEL_32:

          v3 = v36;
          goto LABEL_33;
        }
LABEL_31:
        free(v22);
        goto LABEL_32;
      }
      v15 = *((_DWORD *)v2 + 85);
      v16 = nw_endpoint_get_logging_description(*((void **)v2 + 3));
      *(_DWORD *)buf = 136446978;
      v38 = "nw_resolver_start_query_timer";
      v39 = 1024;
      *(_DWORD *)v40 = v15;
      *(_WORD *)&v40[4] = 1024;
      *(_DWORD *)&v40[6] = 2;
      *(_WORD *)&v40[10] = 2082;
      *(_QWORD *)&v40[12] = v16;
      v10 = "%{public}s [R%u] Starting %us query timer to receive all answers for %{public}s";
      v11 = v8;
      v12 = 34;
    }
    _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, v10, buf, v12);
    goto LABEL_20;
  }
  if ((*((_BYTE *)v1 + 346) & 0x20) == 0)
  {
    if (*((_BYTE *)v1 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
        goto LABEL_33;
      v4 = nw_endpoint_get_logging_description(*((void **)v2 + 3));
      *(_DWORD *)buf = 136446722;
      v38 = "nw_resolver_start_query_timer";
      v39 = 2082;
      *(_QWORD *)v40 = (char *)v2 + 256;
      *(_WORD *)&v40[8] = 2082;
      *(_QWORD *)&v40[10] = v4;
      v5 = "%{public}s [C%{public}s] Query timer already running for %{public}s";
      v6 = v3;
      v7 = 32;
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v3 = (id)gLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
      {
LABEL_33:

        goto LABEL_34;
      }
      v13 = *((_DWORD *)v2 + 85);
      v14 = nw_endpoint_get_logging_description(*((void **)v2 + 3));
      *(_DWORD *)buf = 136446722;
      v38 = "nw_resolver_start_query_timer";
      v39 = 1024;
      *(_DWORD *)v40 = v13;
      *(_WORD *)&v40[4] = 2082;
      *(_QWORD *)&v40[6] = v14;
      v5 = "%{public}s [R%u] Query timer already running for %{public}s";
      v6 = v3;
      v7 = 28;
    }
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, v5, buf, v7);
    goto LABEL_33;
  }
LABEL_34:

}

void sub_1833FB8A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void ___ZL41nw_resolver_start_delayed_reporting_timerP22NWConcrete_nw_resolverbbb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *logging_description;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  const char *v9;
  uint64_t v10;
  int v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  __int16 v16;
  _BYTE v17[18];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if ((*(_BYTE *)(v2 + 346) & 0x20) != 0)
      goto LABEL_14;
    if (*(_BYTE *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
        goto LABEL_13;
      v4 = *(_QWORD *)(a1 + 32);
      logging_description = nw_endpoint_get_logging_description(*(void **)(v4 + 24));
      v14 = 136446722;
      v15 = "nw_resolver_start_delayed_reporting_timer_block_invoke";
      v16 = 2082;
      *(_QWORD *)v17 = v4 + 256;
      *(_WORD *)&v17[8] = 2082;
      *(_QWORD *)&v17[10] = logging_description;
      v6 = "%{public}s [C%{public}s] Delayed reporting timer fired: did not receive all results in time, reporting partia"
           "l results for %{public}s";
      v7 = v3;
      v8 = 32;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_DWORD *)(v10 + 340);
      v12 = nw_endpoint_get_logging_description(*(void **)(v10 + 24));
      v14 = 136446722;
      v15 = "nw_resolver_start_delayed_reporting_timer_block_invoke";
      v16 = 1024;
      *(_DWORD *)v17 = v11;
      *(_WORD *)&v17[4] = 2082;
      *(_QWORD *)&v17[6] = v12;
      v6 = "%{public}s [R%u] Delayed reporting timer fired: did not receive all results in time, reporting partial result"
           "s for %{public}s";
      v7 = v3;
      v8 = 28;
      goto LABEL_12;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v9 = nw_endpoint_get_logging_description(*(void **)(*(_QWORD *)(a1 + 32) + 24));
      v14 = 136446466;
      v15 = "nw_resolver_start_delayed_reporting_timer_block_invoke";
      v16 = 2082;
      *(_QWORD *)v17 = v9;
      v6 = "%{public}s Delayed reporting timer fired: did not receive all results in time, reporting partial results for %{public}s";
      v7 = v3;
      v8 = 22;
LABEL_12:
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v14, v8);
    }
  }
LABEL_13:

  v2 = *(_QWORD *)(a1 + 32);
LABEL_14:
  nw_resolver_cancel_delayed_reporting_timer((NWConcrete_nw_resolver *)v2);
  v13 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v13 + 96))
  {
    nw_resolver_update_client((void *)v13, 0);
    v13 = *(_QWORD *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v13 + 12));
}

void sub_1833FBB6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_update_client(void *a1, void *a2)
{
  id v3;
  id v4;
  int v5;
  void *v6;
  unsigned __int8 *v7;
  id *v8;
  int64_t int64_with_default;
  id v10;
  uint64_t cached_content_for_protocol;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  time_t v19;
  id v20;
  _DWORD *v21;
  unsigned __int8 *v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  NSObject *v26;
  char address_family;
  NSObject *v28;
  const char *logging_description;
  uint64_t v30;
  const char *v31;
  NSObject *v32;
  uint32_t v33;
  void *srv_weighted_variant;
  unsigned __int8 *v35;
  void *v36;
  char *v37;
  id v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  _DWORD *v41;
  void *v42;
  _BOOL8 v43;
  NSObject *v44;
  const char *v45;
  const char *v46;
  NSObject *v47;
  uint32_t v48;
  NSObject *v49;
  const char *v50;
  const char *v51;
  NSObject *v52;
  uint32_t v53;
  const char *v54;
  int v55;
  const char *v56;
  id v57;
  id v58;
  id v59;
  id v60;
  void *v61;
  NSObject *v62;
  const char *v63;
  uint64_t v64;
  unsigned __int8 *v65;
  unsigned __int8 *v66;
  NSObject *v67;
  void *v68;
  int v69;
  int v70;
  _BOOL8 v71;
  void *v72;
  _QWORD aBlock[4];
  id v74;
  id v75;
  id v76;
  id v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(uint64_t, uint64_t, void *);
  void *v82;
  _BYTE *v83;
  uint64_t *v84;
  uint64_t *v85;
  char v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t, uint64_t);
  void (*v99)(uint64_t);
  id v100;
  _BYTE v101[64];
  _BYTE buf[32];
  unsigned __int8 *v103;
  uint64_t *v104;
  uint64_t v105;

  v105 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = *((_DWORD *)v3 + 2);
  v6 = _Block_copy(*((const void **)v3 + 12));
  v7 = (unsigned __int8 *)*((id *)v3 + 18);
  if ((*((_BYTE *)v3 + 346) & 2) == 0
    && nw_endpoint_get_type(*((nw_endpoint_t *)v3 + 3)) == nw_endpoint_type_host
    && *((_DWORD *)v3 + 2) == 2
    && !*((_DWORD *)v3 + 21))
  {
    v8 = nw_endpoint_copy_association_with_evaluator(*((void **)v3 + 3), *((void **)v3 + 2), 0);
    if (v8)
    {
      if (!v7 || *((_QWORD *)v7 + 3) == *((_QWORD *)v7 + 2))
      {
        v20 = nw_protocol_copy_resolver_definition();
        nw_association_set_cached_content_for_protocol(v8, v20, 0, 0);

      }
      else
      {
        int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_hostname_cache_seconds, 10);
        v10 = nw_protocol_copy_resolver_definition();
        cached_content_for_protocol = nw_association_get_cached_content_for_protocol(v8, v10);

        if (!cached_content_for_protocol)
        {
          cached_content_for_protocol = (uint64_t)malloc_type_calloc(1uLL, 0x20uLL, 0xEAFB8F1AuLL);
          if (!cached_content_for_protocol)
          {
            __nwlog_obj();
            v67 = objc_claimAutoreleasedReturnValue();
            os_log_type_enabled(v67, OS_LOG_TYPE_ERROR);
            *(_DWORD *)v101 = 136446722;
            *(_QWORD *)&v101[4] = "strict_calloc";
            *(_WORD *)&v101[12] = 2048;
            *(_QWORD *)&v101[14] = 1;
            *(_WORD *)&v101[22] = 2048;
            *(_QWORD *)&v101[24] = 32;
            v68 = (void *)_os_log_send_and_compose_impl();

            if (__nwlog_abort((uint64_t)v68))
            {
              __break(1u);
              return;
            }
            free(v68);
            cached_content_for_protocol = 0;
          }
        }
        *(_BYTE *)(cached_content_for_protocol + 24) = *((_BYTE *)v3 + 347) >> 7;
        v12 = nw_array_copy((uint64_t)v7);
        v13 = *(void **)cached_content_for_protocol;
        *(_QWORD *)cached_content_for_protocol = v12;

        v14 = nw_array_copy(*((_QWORD *)v3 + 23));
        v15 = *(void **)(cached_content_for_protocol + 8);
        *(_QWORD *)(cached_content_for_protocol + 8) = v14;

        v16 = nw_array_copy(*((_QWORD *)v3 + 24));
        v17 = *(void **)(cached_content_for_protocol + 16);
        *(_QWORD *)(cached_content_for_protocol + 16) = v16;

        v18 = nw_protocol_copy_resolver_definition();
        v19 = time(0);
        nw_association_set_cached_content_for_protocol(v8, v18, cached_content_for_protocol, v19 + int64_with_default);

      }
    }

  }
  if (!v7 || *((_QWORD *)v7 + 3) == *((_QWORD *)v7 + 2))
  {
    srv_weighted_variant = 0;
    goto LABEL_70;
  }
  v21 = v3;
  v22 = v7;
  v23 = (uint64_t)(*((_QWORD *)v7 + 3) - *((_QWORD *)v7 + 2)) >> 3;
  v24 = networkd_settings_get_int64_with_default((const char *)nw_setting_tcpconn_first_address_family_count, 2);
  if (v24 <= 0)
    v25 = 2;
  else
    v25 = v24;
  if (v23 > v25 + 1)
  {
    nw_array_get_object_at_index((uint64_t)v22, 0);
    v26 = objc_claimAutoreleasedReturnValue();
    if (nw_endpoint_get_type(v26) != nw_endpoint_type_address)
    {
      v35 = v22;
LABEL_33:

      goto LABEL_34;
    }
    address_family = nw_endpoint_get_address_family(v26);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    buf[24] = 0;
    v91 = 0;
    v92 = &v91;
    v93 = 0x2020000000;
    v94 = 0;
    v95 = 0;
    v96 = &v95;
    v97 = 0x3032000000;
    v98 = __Block_byref_object_copy__5622;
    v99 = __Block_byref_object_dispose__5623;
    v100 = 0;
    v79 = MEMORY[0x1E0C809B0];
    v80 = 3221225472;
    v81 = ___ZL41nw_resolver_create_happy_eyeballs_variantP22NWConcrete_nw_resolverPU22objcproto11OS_nw_array8NSObject_block_invoke;
    v82 = &unk_1E149ADC8;
    v86 = address_family;
    v83 = buf;
    v84 = &v91;
    v85 = &v95;
    nw_array_apply(v22, (uint64_t)&v79);
    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24) || v92[3] <= v25)
    {
      v35 = v22;
LABEL_32:
      _Block_object_dispose(&v95, 8);

      _Block_object_dispose(&v91, 8);
      _Block_object_dispose(buf, 8);
      goto LABEL_33;
    }
    v71 = nw_array_create();
    if ((*((_BYTE *)v3 + 346) & 0x20) != 0)
    {
LABEL_80:
      *(_QWORD *)v101 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v101[8] = 3221225472;
      *(_QWORD *)&v101[16] = ___ZL41nw_resolver_create_happy_eyeballs_variantP22NWConcrete_nw_resolverPU22objcproto11OS_nw_array8NSObject_block_invoke_176;
      *(_QWORD *)&v101[24] = &unk_1E149ADF0;
      *(_QWORD *)&v101[40] = buf;
      *(_QWORD *)&v101[56] = v25;
      v65 = (unsigned __int8 *)(id)v71;
      *(_QWORD *)&v101[32] = v65;
      *(_QWORD *)&v101[48] = &v95;
      nw_array_apply(v22, (uint64_t)v101);
      if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
        v66 = v22;
      else
        v66 = v65;
      v35 = v66;

      goto LABEL_32;
    }
    if (*((_BYTE *)v21 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v28 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        goto LABEL_79;
      logging_description = nw_endpoint_get_logging_description((void *)v96[5]);
      v30 = v92[3];
      *(_DWORD *)v101 = 136447490;
      *(_QWORD *)&v101[4] = "nw_resolver_create_happy_eyeballs_variant";
      *(_WORD *)&v101[12] = 2082;
      *(_QWORD *)&v101[14] = v21 + 64;
      *(_WORD *)&v101[22] = 2082;
      *(_QWORD *)&v101[24] = logging_description;
      *(_WORD *)&v101[32] = 2048;
      *(_QWORD *)&v101[34] = v30;
      *(_WORD *)&v101[42] = 2048;
      *(_QWORD *)&v101[44] = v25;
      *(_WORD *)&v101[52] = 2048;
      *(_QWORD *)&v101[54] = v23;
      v31 = "%{public}s [C%{public}s] Happy Eyeballs: reordering %{public}s from position %llu to %llu of %llu";
      v32 = v28;
      v33 = 62;
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
      {
LABEL_79:

        goto LABEL_80;
      }
      v70 = v21[85];
      v63 = nw_endpoint_get_logging_description((void *)v96[5]);
      v64 = v92[3];
      *(_DWORD *)v101 = 136447490;
      *(_QWORD *)&v101[4] = "nw_resolver_create_happy_eyeballs_variant";
      *(_WORD *)&v101[12] = 1024;
      *(_DWORD *)&v101[14] = v70;
      *(_WORD *)&v101[18] = 2082;
      *(_QWORD *)&v101[20] = v63;
      *(_WORD *)&v101[28] = 2048;
      *(_QWORD *)&v101[30] = v64;
      *(_WORD *)&v101[38] = 2048;
      *(_QWORD *)&v101[40] = v25;
      *(_WORD *)&v101[48] = 2048;
      *(_QWORD *)&v101[50] = v23;
      v31 = "%{public}s [R%u] Happy Eyeballs: reordering %{public}s from position %llu to %llu of %llu";
      v32 = v28;
      v33 = 58;
    }
    _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, v31, v101, v33);
    goto LABEL_79;
  }
  v35 = v22;
LABEL_34:

  v36 = (void *)*((_QWORD *)v21 + 4);
  v37 = v21;
  v38 = v36;
  v39 = v35;
  v40 = v39;
  if (v39 && *((_QWORD *)v39 + 3) - *((_QWORD *)v39 + 2) > 0xFuLL)
  {
    nw_array_get_object_at_index((uint64_t)v39, 0);
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    v95 = 0;
    v96 = &v95;
    v97 = 0x3032000000;
    v98 = __Block_byref_object_copy__5622;
    v99 = __Block_byref_object_dispose__5623;
    v100 = 0;
    v91 = 0;
    v92 = &v91;
    LODWORD(v94) = 0;
    v93 = 0x2020000000;
    *(_QWORD *)v101 = MEMORY[0x1E0C809B0];
    *(_QWORD *)&v101[8] = 3221225472;
    *(_QWORD *)&v101[16] = ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke;
    *(_QWORD *)&v101[24] = &unk_1E149CF10;
    *(_QWORD *)&v101[40] = &v95;
    *(_QWORD *)&v101[48] = &v91;
    v41 = v38;
    *(_QWORD *)&v101[32] = v41;
    nw_array_apply(v40, (uint64_t)v101);
    v87 = 0;
    v88 = &v87;
    v89 = 0x2020000000;
    v90 = 0;
    if (!*((_DWORD *)v92 + 6))
    {
      v42 = (void *)v96[5];
      v96[5] = 0;

      v79 = MEMORY[0x1E0C809B0];
      v80 = 3221225472;
      v81 = ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke_2;
      v82 = &unk_1E149CF10;
      v84 = &v95;
      v85 = &v87;
      v83 = v41;
      nw_array_apply(v40, (uint64_t)&v79);

      if (!*((_DWORD *)v92 + 6) && !v88[3])
        goto LABEL_66;
    }
    if ((void *)v96[5] != v72)
    {
      v43 = nw_array_create();
      if (v41 && v41[31] == 4 || (*((_BYTE *)v3 + 346) & 0x20) != 0)
        goto LABEL_61;
      if (v37[256])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v44 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
          goto LABEL_60;
        v45 = nw_endpoint_get_logging_description((void *)v96[5]);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_resolver_create_prefer_connected_variant";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v37 + 256;
        *(_WORD *)&buf[22] = 2082;
        *(_QWORD *)&buf[24] = v45;
        v46 = "%{public}s [C%{public}s] Prefer Connected: reordering %{public}s to be the first endpoint";
        v47 = v44;
        v48 = 32;
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v44 = (id)gLogObj;
        if (!os_log_type_enabled(v44, OS_LOG_TYPE_INFO))
        {
LABEL_60:

LABEL_61:
          nw_array_append(v43, (void *)v96[5]);
          *(_QWORD *)buf = MEMORY[0x1E0C809B0];
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke_177;
          *(_QWORD *)&buf[24] = &unk_1E14AB5F0;
          v104 = &v95;
          v7 = (unsigned __int8 *)(id)v43;
          v103 = v7;
          nw_array_apply(v40, (uint64_t)buf);

LABEL_67:
          _Block_object_dispose(&v87, 8);

          _Block_object_dispose(&v91, 8);
          _Block_object_dispose(&v95, 8);

          goto LABEL_68;
        }
        v69 = *((_DWORD *)v37 + 85);
        v54 = nw_endpoint_get_logging_description((void *)v96[5]);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_resolver_create_prefer_connected_variant";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v69;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v54;
        v46 = "%{public}s [R%u] Prefer Connected: reordering %{public}s to be the first endpoint";
        v47 = v44;
        v48 = 28;
      }
      _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_INFO, v46, buf, v48);
      goto LABEL_60;
    }
    if (v41 && v41[31] == 4 || (*((_BYTE *)v3 + 346) & 0x20) != 0)
    {
LABEL_66:
      v7 = v40;
      goto LABEL_67;
    }
    if (v37[256])
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v49 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
        goto LABEL_65;
      v50 = nw_endpoint_get_logging_description((void *)v96[5]);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_resolver_create_prefer_connected_variant";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v37 + 256;
      *(_WORD *)&buf[22] = 2082;
      *(_QWORD *)&buf[24] = v50;
      v51 = "%{public}s [C%{public}s] Prefer Connected: %{public}s is already the first endpoint";
      v52 = v49;
      v53 = 32;
    }
    else
    {
      __nwlog_obj();
      v49 = objc_claimAutoreleasedReturnValue();
      if (!os_log_type_enabled(v49, OS_LOG_TYPE_INFO))
      {
LABEL_65:

        goto LABEL_66;
      }
      v55 = *((_DWORD *)v37 + 85);
      v56 = nw_endpoint_get_logging_description((void *)v96[5]);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_resolver_create_prefer_connected_variant";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v55;
      *(_WORD *)&buf[18] = 2082;
      *(_QWORD *)&buf[20] = v56;
      v51 = "%{public}s [R%u] Prefer Connected: %{public}s is already the first endpoint";
      v52 = v49;
      v53 = 28;
    }
    _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_INFO, v51, buf, v53);
    goto LABEL_65;
  }
  v7 = v39;
LABEL_68:

  if (nw_endpoint_get_type(*((nw_endpoint_t *)v37 + 3)) != (nw_endpoint_type_url|nw_endpoint_type_address))
  {
    srv_weighted_variant = v7;
    goto LABEL_71;
  }
  srv_weighted_variant = (void *)nw_resolver_create_srv_weighted_variant(v7);
LABEL_70:

LABEL_71:
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL25nw_resolver_update_clientP22NWConcrete_nw_resolverU13block_pointerFvvE_block_invoke;
  aBlock[3] = &unk_1E149ADA0;
  v57 = v3;
  v74 = v57;
  v58 = v6;
  v76 = v58;
  v78 = v5;
  v59 = srv_weighted_variant;
  v75 = v59;
  v60 = v4;
  v77 = v60;
  v61 = _Block_copy(aBlock);
  v62 = *((_QWORD *)v57 + 14);
  if (v62)
    dispatch_async(v62, v61);
  else
    nw_queue_context_async(*((void **)v57 + 4), v61);

}

void sub_1833FC79C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,id a42)
{
  void *v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a33, 8);
  _Block_object_dispose((const void *)(v49 - 176), 8);

  _Unwind_Resume(a1);
}

id nw_protocol_copy_resolver_definition(void)
{
  if (nw_protocol_copy_resolver_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_copy_resolver_definition(void)::onceToken, &__block_literal_global_178);
  return (id)nw_protocol_copy_resolver_definition(void)::resolver_definition;
}

uint64_t ___ZL41nw_resolver_create_happy_eyeballs_variantP22NWConcrete_nw_resolverPU22objcproto11OS_nw_array8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v6;
  uint64_t v7;

  v6 = a3;
  if (nw_endpoint_get_type(v6) == nw_endpoint_type_address)
  {
    if (nw_endpoint_get_address_family(v6) == *(unsigned __int8 *)(a1 + 56))
    {
      v7 = 1;
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2;
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), a3);
      v7 = 0;
    }
  }
  else
  {
    v7 = 0;
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  }

  return v7;
}

void sub_1833FC9D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL ___ZL41nw_resolver_create_happy_eyeballs_variantP22NWConcrete_nw_resolverPU22objcproto11OS_nw_array8NSObject_block_invoke_176(_QWORD *a1, unint64_t a2, void *a3)
{
  NSObject *v5;
  nw_endpoint_type_t type;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v5 = a3;
  type = nw_endpoint_get_type(v5);
  if (type == nw_endpoint_type_address)
  {
    v7 = a1[7];
    if (v7 > a2)
      goto LABEL_7;
    if (v7 == a2)
    {
      v9 = a1[4];
      v8 = a1 + 4;
      nw_array_append(v9, *(void **)(*(_QWORD *)(v8[2] + 8) + 40));
LABEL_8:
      nw_array_append(*v8, v5);
      goto LABEL_9;
    }
    if (*(NSObject **)(*(_QWORD *)(a1[6] + 8) + 40) != v5)
    {
LABEL_7:
      v8 = a1 + 4;
      goto LABEL_8;
    }
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
  }
LABEL_9:

  return type == nw_endpoint_type_address;
}

void sub_1833FCA98(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  unsigned int connected_flow_count;
  uint64_t v10;

  v5 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(_QWORD *)(v6 + 40);
  v7 = (id *)(v6 + 40);
  if (!v8)
  {
    objc_storeStrong(v7, a3);
    connected_flow_count = nw_context_endpoint_get_connected_flow_count(*(void **)(a1 + 32), v5);
    v10 = a1 + 48;
    goto LABEL_5;
  }
  connected_flow_count = nw_context_endpoint_get_connected_flow_count(*(void **)(a1 + 32), v5);
  v10 = a1 + 48;
  if (connected_flow_count > *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
LABEL_5:
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) + 24) = connected_flow_count;
  }

  return 1;
}

void sub_1833FCB68(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  unint64_t active_instance_count;
  uint64_t v10;

  v5 = a3;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v8 = *(_QWORD *)(v6 + 40);
  v7 = (id *)(v6 + 40);
  if (!v8)
  {
    objc_storeStrong(v7, a3);
    active_instance_count = nw_context_endpoint_get_active_instance_count(*(void **)(a1 + 32), v5);
    v10 = a1 + 48;
    goto LABEL_5;
  }
  active_instance_count = nw_context_endpoint_get_active_instance_count(*(void **)(a1 + 32), v5);
  v10 = a1 + 48;
  if (active_instance_count > *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24))
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a3);
LABEL_5:
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v10 + 8) + 24) = active_instance_count;
  }

  return 1;
}

void sub_1833FCC40(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL43nw_resolver_create_prefer_connected_variantP22NWConcrete_nw_resolverPU24objcproto13OS_nw_context8NSObjectPU22objcproto11OS_nw_arrayS1__block_invoke_177(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  if (*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) != v4)
    nw_array_append(*(_QWORD *)(a1 + 32), v4);

  return 1;
}

uint64_t ___ZL25nw_resolver_update_clientP22NWConcrete_nw_resolverU13block_pointerFvvE_block_invoke(_QWORD *a1)
{
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t result;

  v2 = (os_unfair_lock_s *)a1[4];
  v3 = v2 + 3;
  v4 = v2;
  os_unfair_lock_lock(v3);
  v5 = *(_QWORD *)&v4[24]._os_unfair_lock_opaque;
  os_unfair_lock_unlock(v3);

  if (v5)
    (*(void (**)(void))(a1[6] + 16))();
  result = a1[7];
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void ___ZL29nw_resolver_start_query_timerP22NWConcrete_nw_resolver_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  uint64_t v4;
  const char *v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  const char *logging_description;
  uint64_t v10;
  int v11;
  const char *v12;
  int v13;
  const char *v14;
  __int16 v15;
  _BYTE v16[18];
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      logging_description = nw_endpoint_get_logging_description(*(void **)(*(_QWORD *)(a1 + 32) + 24));
      v13 = 136446466;
      v14 = "nw_resolver_start_query_timer_block_invoke";
      v15 = 2082;
      *(_QWORD *)v16 = logging_description;
      v6 = "%{public}s Query fired: did not receive all answers in time for %{public}s";
      v7 = v3;
      v8 = 22;
LABEL_12:
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, v6, (uint8_t *)&v13, v8);
    }
LABEL_13:

    v2 = *(_QWORD *)(a1 + 32);
    goto LABEL_14;
  }
  if ((*(_BYTE *)(v2 + 346) & 0x20) == 0)
  {
    if (*(_BYTE *)(v2 + 256))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v3 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
        goto LABEL_13;
      v4 = *(_QWORD *)(a1 + 32);
      v5 = nw_endpoint_get_logging_description(*(void **)(v4 + 24));
      v13 = 136446722;
      v14 = "nw_resolver_start_query_timer_block_invoke";
      v15 = 2082;
      *(_QWORD *)v16 = v4 + 256;
      *(_WORD *)&v16[8] = 2082;
      *(_QWORD *)&v16[10] = v5;
      v6 = "%{public}s [C%{public}s] Query fired: did not receive all answers in time for %{public}s";
      v7 = v3;
      v8 = 32;
      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v10 = *(_QWORD *)(a1 + 32);
      v11 = *(_DWORD *)(v10 + 340);
      v12 = nw_endpoint_get_logging_description(*(void **)(v10 + 24));
      v13 = 136446722;
      v14 = "nw_resolver_start_query_timer_block_invoke";
      v15 = 1024;
      *(_DWORD *)v16 = v11;
      *(_WORD *)&v16[4] = 2082;
      *(_QWORD *)&v16[6] = v12;
      v6 = "%{public}s [R%u] Query fired: did not receive all answers in time for %{public}s";
      v7 = v3;
      v8 = 28;
      goto LABEL_12;
    }
    goto LABEL_13;
  }
LABEL_14:
  *(_DWORD *)(v2 + 84) = -65568;
  nw_resolver_update_status_locked(*(_QWORD *)(a1 + 32), 0);
  os_unfair_lock_unlock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
}

void sub_1833FCF8C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL29nw_resolver_start_query_timerP22NWConcrete_nw_resolver_block_invoke_172(uint64_t a1)
{
  uint64_t v2;

  os_unfair_lock_lock((os_unfair_lock_t)(*(_QWORD *)(a1 + 32) + 12));
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v2 + 96))
  {
    nw_resolver_cancel_query_locked((NWConcrete_nw_resolver *)v2, 0);
    v2 = *(_QWORD *)(a1 + 32);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 12));
}

uint64_t ___ZL40nw_resolver_start_custom_resolver_lockedP22NWConcrete_nw_resolver_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;

  v4 = a3;
  nw_endpoint_set_parent_endpoint(v4, *(void **)(*(_QWORD *)(a1 + 32) + 24), 0);
  nw_resolver_insert_endpoint_locked(*(void **)(a1 + 32), v4, &__block_literal_global_165);

  return 1;
}

uint64_t ___ZL40nw_resolver_start_custom_resolver_lockedP22NWConcrete_nw_resolver_block_invoke_3(uint64_t a1, void *a2, void *a3)
{
  return nw_endpoint_is_equal(a2, a3, 0);
}

uint64_t nw_resolver_get_status(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t os_unfair_lock_opaque;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 3);
    os_unfair_lock_opaque = v2[2]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v2 + 3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolver_get_status";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_get_status";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolver_get_status";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_get_status";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolver_get_status";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  os_unfair_lock_opaque = 0;
LABEL_3:

  return os_unfair_lock_opaque;
}

BOOL __nw_resolver_get_resolution_provider_block_invoke(uint64_t a1, void *a2)
{
  id v3;
  int v4;
  const char *provider_description;
  char *v6;
  _BOOL8 result;
  NSObject *v8;
  void *v9;
  __int128 uu1;
  int v11;
  const char *v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  uu1 = 0uLL;
  nw_resolver_config_get_identifier(v3, &uu1);
  v4 = uuid_compare((const unsigned __int8 *)&uu1, (const unsigned __int8 *)(*(_QWORD *)(a1 + 32) + 232));
  if (v4)
    goto LABEL_6;
  provider_description = (const char *)nw_resolver_config_get_provider_description(v3);
  if (!provider_description)
  {
    provider_description = (const char *)nw_resolver_config_get_provider_name(v3);
    if (!provider_description)
      goto LABEL_6;
  }
  v6 = strdup(provider_description);
  if (v6)
  {
LABEL_5:
    **(_QWORD **)(a1 + 40) = v6;
LABEL_6:

    return v4 != 0;
  }
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v8, OS_LOG_TYPE_ERROR);
  v11 = 136446210;
  v12 = "strict_strdup";
  v9 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

void sub_1833FD458(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_inject_dns_service_error(void *a1, int a2)
{
  _QWORD *v3;
  void *v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  _QWORD *v15;
  int v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = (void *)v3[4];
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_inject_dns_service_error_block_invoke;
    v14[3] = &unk_1E14AB378;
    v15 = v3;
    v16 = a2;
    nw_queue_context_async_if_needed(v5, v14);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_resolver_inject_dns_service_error";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_inject_dns_service_error";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_resolver_inject_dns_service_error";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_inject_dns_service_error";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_inject_dns_service_error";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_1833FD750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void __nw_resolver_inject_dns_service_error_block_invoke(uint64_t a1)
{
  uint64_t v1;
  _DNSServiceRef_t *v3;
  nw_endpoint_type_t type;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  const char *string_for_dns_service_error;
  const char *v9;
  NSObject *v10;
  uint32_t v11;
  nw_endpoint_type_t v12;
  uint64_t v13;
  NSObject *v14;
  uint64_t v15;
  const char *v16;
  const char *v17;
  NSObject *v18;
  uint32_t v19;
  const char *v20;
  _BYTE *v21;
  NSObject *v22;
  uint64_t v23;
  const char *v24;
  const char *v25;
  NSObject *v26;
  uint32_t v27;
  const char *v28;
  _BYTE *v29;
  NSObject *v30;
  uint64_t v31;
  const char *v32;
  const char *v33;
  NSObject *v34;
  uint32_t v35;
  int v36;
  const char *v37;
  const char *v38;
  int v39;
  const char *v40;
  const char *v41;
  const char *v42;
  int v43;
  const char *v44;
  int v45;
  const char *v46;
  uint8_t buf[4];
  const char *v48;
  __int16 v49;
  _BYTE v50[18];
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(v1 + 64))
  {
    v3 = *(_DNSServiceRef_t **)(v1 + 72);
    type = nw_endpoint_get_type(*(nw_endpoint_t *)(v1 + 24));
    v5 = *(_QWORD *)(a1 + 32);
    if (type == nw_endpoint_type_host)
    {
      if (v5)
      {
        if ((*(_BYTE *)(v5 + 346) & 0x20) != 0)
        {
LABEL_41:
          nw_resolver_host_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), 0, 0, 0, (void *)v5);
          return;
        }
        if (*(_BYTE *)(v5 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v6 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
            goto LABEL_40;
          v7 = *(_QWORD *)(a1 + 32);
          string_for_dns_service_error = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          v49 = 2082;
          *(_QWORD *)v50 = v7 + 256;
          *(_WORD *)&v50[8] = 2082;
          *(_QWORD *)&v50[10] = string_for_dns_service_error;
          v9 = "%{public}s [C%{public}s] Injecting error %{public}s";
          v10 = v6;
          v11 = 32;
          goto LABEL_39;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v36 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
          v37 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          v49 = 1024;
          *(_DWORD *)v50 = v36;
          *(_WORD *)&v50[4] = 2082;
          *(_QWORD *)&v50[6] = v37;
          v9 = "%{public}s [R%u] Injecting error %{public}s";
          v10 = v6;
          v11 = 28;
          goto LABEL_39;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v28 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446466;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          v49 = 2082;
          *(_QWORD *)v50 = v28;
          v9 = "%{public}s Injecting error %{public}s";
          v10 = v6;
          v11 = 22;
LABEL_39:
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, v9, buf, v11);
        }
      }
LABEL_40:

      v5 = *(_QWORD *)(a1 + 32);
      goto LABEL_41;
    }
    v12 = nw_endpoint_get_type(*(nw_endpoint_t *)(v5 + 24));
    v13 = *(_QWORD *)(a1 + 32);
    if (v12 == nw_endpoint_type_bonjour_service)
    {
      if (v13)
      {
        if ((*(_BYTE *)(v13 + 346) & 0x20) != 0)
        {
LABEL_48:
          nw_resolver_bonjour_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), "", "", 0, 0, 0, (void *)v13);
          return;
        }
        if (*(_BYTE *)(v13 + 256))
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v14 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
            goto LABEL_47;
          v15 = *(_QWORD *)(a1 + 32);
          v16 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          v49 = 2082;
          *(_QWORD *)v50 = v15 + 256;
          *(_WORD *)&v50[8] = 2082;
          *(_QWORD *)&v50[10] = v16;
          v17 = "%{public}s [C%{public}s] Injecting error %{public}s";
          v18 = v14;
          v19 = 32;
          goto LABEL_46;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v39 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
          v40 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          v49 = 1024;
          *(_DWORD *)v50 = v39;
          *(_WORD *)&v50[4] = 2082;
          *(_QWORD *)&v50[6] = v40;
          v17 = "%{public}s [R%u] Injecting error %{public}s";
          v18 = v14;
          v19 = 28;
          goto LABEL_46;
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          v38 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446466;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          v49 = 2082;
          *(_QWORD *)v50 = v38;
          v17 = "%{public}s Injecting error %{public}s";
          v18 = v14;
          v19 = 22;
LABEL_46:
          _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_INFO, v17, buf, v19);
        }
      }
LABEL_47:

      v13 = *(_QWORD *)(a1 + 32);
      goto LABEL_48;
    }
    if (nw_endpoint_get_type(*(nw_endpoint_t *)(v13 + 24)) == nw_endpoint_type_address
      && nw_parameters_get_resolve_ptr(*(void **)(*(_QWORD *)(a1 + 32) + 16)))
    {
      v21 = *(_BYTE **)(a1 + 32);
      if (v21)
      {
        if ((v21[346] & 0x20) != 0)
        {
LABEL_62:
          nw_resolver_ptr_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), v20, 0, 0, 0, 0, 0, v21);
          return;
        }
        if (v21[256])
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v22 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
            goto LABEL_61;
          v23 = *(_QWORD *)(a1 + 32);
          v24 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          v49 = 2082;
          *(_QWORD *)v50 = v23 + 256;
          *(_WORD *)&v50[8] = 2082;
          *(_QWORD *)&v50[10] = v24;
          v25 = "%{public}s [C%{public}s] Injecting error %{public}s";
          v26 = v22;
          v27 = 32;
          goto LABEL_60;
        }
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          v45 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
          v46 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446722;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          v49 = 1024;
          *(_DWORD *)v50 = v45;
          *(_WORD *)&v50[4] = 2082;
          *(_QWORD *)&v50[6] = v46;
          v25 = "%{public}s [R%u] Injecting error %{public}s";
          v26 = v22;
          v27 = 28;
          goto LABEL_60;
        }
      }
      else
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v22, OS_LOG_TYPE_INFO))
        {
          v42 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
          *(_DWORD *)buf = 136446466;
          v48 = "nw_resolver_inject_dns_service_error_block_invoke";
          v49 = 2082;
          *(_QWORD *)v50 = v42;
          v25 = "%{public}s Injecting error %{public}s";
          v26 = v22;
          v27 = 22;
LABEL_60:
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_INFO, v25, buf, v27);
        }
      }
LABEL_61:

      v21 = *(_BYTE **)(a1 + 32);
      goto LABEL_62;
    }
    if (nw_endpoint_get_type(*(nw_endpoint_t *)(*(_QWORD *)(a1 + 32) + 24)) != (nw_endpoint_type_url|nw_endpoint_type_address))
      return;
    v29 = *(_BYTE **)(a1 + 32);
    if (v29)
    {
      if ((v29[346] & 0x20) != 0)
      {
LABEL_57:
        nw_resolver_srv_resolve_callback(v3, 0, 0, *(_DWORD *)(a1 + 40), 0, 0, 0, 0, 0, 0, v29);
        return;
      }
      if (v29[256])
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v30 = (id)gconnectionLogObj;
        if (!os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
          goto LABEL_56;
        v31 = *(_QWORD *)(a1 + 32);
        v32 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
        *(_DWORD *)buf = 136446722;
        v48 = "nw_resolver_inject_dns_service_error_block_invoke";
        v49 = 2082;
        *(_QWORD *)v50 = v31 + 256;
        *(_WORD *)&v50[8] = 2082;
        *(_QWORD *)&v50[10] = v32;
        v33 = "%{public}s [C%{public}s] Injecting error %{public}s";
        v34 = v30;
        v35 = 32;
        goto LABEL_55;
      }
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        v43 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 340);
        v44 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
        *(_DWORD *)buf = 136446722;
        v48 = "nw_resolver_inject_dns_service_error_block_invoke";
        v49 = 1024;
        *(_DWORD *)v50 = v43;
        *(_WORD *)&v50[4] = 2082;
        *(_QWORD *)&v50[6] = v44;
        v33 = "%{public}s [R%u] Injecting error %{public}s";
        v34 = v30;
        v35 = 28;
        goto LABEL_55;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        v41 = nwlog_get_string_for_dns_service_error(*(_DWORD *)(a1 + 40));
        *(_DWORD *)buf = 136446466;
        v48 = "nw_resolver_inject_dns_service_error_block_invoke";
        v49 = 2082;
        *(_QWORD *)v50 = v41;
        v33 = "%{public}s Injecting error %{public}s";
        v34 = v30;
        v35 = 22;
LABEL_55:
        _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_INFO, v33, buf, v35);
      }
    }
LABEL_56:

    v29 = *(_BYTE **)(a1 + 32);
    goto LABEL_57;
  }
}

char *netcore_stats_tcp_report_copy_description(uint64_t a1)
{
  char *v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  int v7;
  const char *v8;
  unsigned int v9;
  const char *v10;
  const char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  const netcore_stats_tcp_statistics_report *v16;
  char *v17;
  char *v18;
  const char *v19;
  unsigned int v20;
  const char *v21;
  char *v23;
  char *v24;
  char *v25;

  v23 = 0;
  if (a1)
  {
    v2 = netcore_stats_tcp_statistics_report_copy_description((const netcore_stats_tcp_statistics_report *)a1);
    v25 = 0;
    LODWORD(v3) = *(_DWORD *)(a1 + 1660);
    if ((_DWORD)v3)
    {
      v4 = 0;
      v5 = 0;
      v6 = 0;
      do
      {
        v24 = 0;
        v7 = *(_DWORD *)(a1 + v4 + 220);
        if (v7)
        {
          if (v6)
            v8 = v6;
          else
            v8 = "";
          v9 = *(_DWORD *)(a1 + v4 + 216) - 1;
          v10 = "Unknown";
          if (v9 <= 9)
            v10 = off_1E149B1C8[v9];
          asprintf(&v24, "%s\n\t--- Event '%s' at %u ms since start -- bytes in/out: %llu/%llu", v8, v10, v7, *(_QWORD *)(a1 + 8 * v4 + 376), *(_QWORD *)(a1 + 8 * v4 + 384));
        }
        if (v6)
          free(v6);
        v6 = v24;
        ++v5;
        v3 = *(unsigned int *)(a1 + 1660);
        v4 += 8;
      }
      while (v5 < v3);
    }
    else
    {
      v6 = 0;
    }
    v11 = "<NULL>";
    if (v6)
      v11 = v6;
    asprintf(&v25, "\n\tFell back:                 %d\n\tPolicy deny reason:        %d\n\tFallback timer:            %u ms\n\tNetwork event count/max:   %u/%d\n\tNetwork events:            %s\n", *(unsigned __int8 *)(a1 + 1672), *(_DWORD *)(a1 + 1656), *(_DWORD *)(a1 + 1668), v3, 20, v11);
    if (v6)
      free(v6);
    v12 = v25;
    LODWORD(v13) = *(_DWORD *)(a1 + 3412);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = 0;
      v16 = (const netcore_stats_tcp_statistics_report *)(a1 + 1680);
      do
      {
        v17 = netcore_stats_tcp_statistics_report_copy_description(v16);
        v18 = v17;
        v25 = 0;
        if (v15)
          v19 = v15;
        else
          v19 = "";
        asprintf(&v25, "%s\n\t--- Connection attempt #%u ---\n%s", v19, v14, v17);
        if (v18)
          free(v18);
        if (v15)
          free(v15);
        v15 = v25;
        ++v14;
        v13 = *(unsigned int *)(a1 + 3412);
        ++v16;
      }
      while (v14 < v13);
    }
    else
    {
      v15 = 0;
    }
    v20 = *(_DWORD *)(a1 + 3408) - 1;
    if (v20 > 4)
      v21 = "Unknown";
    else
      v21 = off_1E149B218[v20];
    asprintf(&v23, "\n\tDelegated:                                  %d\n\tReport reason:                              %s\n\tTCP statistics report:                      %s\n\tTCP cellular fallback statistics report:    %s\n\tConnection attempt count:                   %u\n\tConnection attempts:                        %s\n", *(unsigned __int8 *)(a1 + 3416), v21, v2, v12, v13, v15);
    if (v2)
      free(v2);
    if (v12)
      free(v12);
    if (v15)
      free(v15);
  }
  else
  {
    asprintf(&v23, "<NULL>");
  }
  return v23;
}

char *netcore_stats_tcp_statistics_report_copy_description(const netcore_stats_tcp_statistics_report *a1)
{
  unsigned int v1;
  char *v3[2];

  v3[0] = 0;
  if (a1)
  {
    v1 = *((unsigned __int16 *)a1 + 104);
    asprintf(v3, "\n\tTime to DNS start:                       %u ms\n\tTime to DNS resolved:                    %u ms\n\tDNS resolved time:                       %u ms\n\tDNS answers cached:                      %d\n\tInterface type:                          %d\n\tTime to TCP start:                       %u ms\n\tTime to TCP establishment:               %u ms\n\tConnection establishment:                %u ms\n\tFlow duration:                           %u ms\n\tConnected interface type:                %d\n\tConnected:                               %d\n\tTraffic class:                           %u\n\tCellular fallback:                       %d\n\tCellular RRC connected:                  %d\n\tKernel reported stalls:                  %d\n\tKernel reported connection stalls:       %d\n\tKernel reported read stalls:             %d\n"
      "\tKernel reported write stalls:            %d\n"
      "\tBytes/Packets in:                        %llu bytes/%llu packets\n"
      "\tBytes/Packets out:                       %llu bytes/%llu packets\n"
      "\tBytes/Packets duplicate:                 %llu bytes/%llu packets\n"
      "\tBytes/Packets ooo:                       %llu bytes/%llu packets\n"
      "\tBytes/Packets retransmitted:             %llu bytes/%llu packets\n"
      "\tCurrent RTT:                             %u ms\n"
      "\tSmoothed RTT:                            %u ms\n"
      "\tBest RTT:                                %u ms\n"
      "\tVariance of RTT:                         %u\n"
      "\tTCP SYN retransmissions:                 %u\n"
      "\tTCP Fast Open:                           %d\n"
      "\tBetter route count:                      %u\n"
      "\tConnection reuse count:                  %u\n"
      "\tApp data stall count:                    %u\n"
      "\tApp data stall timer:                    %u ms\n",
      a1->time_to_dns_start_msecs,
      a1->time_to_dns_resolved_msecs,
      a1->dns_resolved_time_msecs,
      v1 & 1,
      a1->interface_type,
      a1->time_to_connection_start_msecs,
      a1->time_to_connection_establishment_msecs,
      a1->connection_establishment_time_msecs,
      a1->flow_duration_msecs,
      a1->connected_interface_type,
      (v1 >> 1) & 1,
      a1->traffic_class,
      (v1 >> 2) & 1,
      (v1 >> 3) & 1,
      (v1 >> 5) & 1,
      (v1 >> 6) & 1,
      (v1 >> 7) & 1,
      (v1 >> 8) & 1,
      a1->bytes_in,
      a1->packets_in,
      a1->bytes_out);
  }
  else
  {
    asprintf(v3, "<NULL>");
  }
  return v3[0];
}

uint64_t network_config_set_opportunistic_blocked(const char *a1, _BOOL4 a2, void *a3, void *a4)
{
  id v7;
  id v8;
  NSObject *v9;
  const char *v10;
  NSObject *v11;
  id v12;
  xpc_object_t v13;
  void *v14;
  xpc_object_t v15;
  id v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  uint64_t v25;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  void *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  char *backtrace_string;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  _BOOL4 v43;
  os_log_type_t v44;
  _BOOL4 v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  os_log_type_t v50;
  os_log_type_t v51;
  os_log_type_t v52;
  char v53;
  os_log_type_t type;
  _BYTE buf[24];
  const char *v56;
  id v57;
  id v58;
  BOOL v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  nw_allow_use_of_dispatch_internal();
  if (!a1)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v28, &type, &v53))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null ifname", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (!v53)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_182FBE000, v29, v49, "%{public}s called with null ifname, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_93;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v40 = type;
    v41 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_182FBE000, v29, v40, "%{public}s called with null ifname, no backtrace", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (v41)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v29, v40, "%{public}s called with null ifname, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_67:

    free(backtrace_string);
    goto LABEL_94;
  }
  if (!v7)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v28, &type, &v53))
      goto LABEL_94;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (!v53)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v50 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_182FBE000, v29, v50, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_93;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v42 = type;
    v43 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (v43)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (v43)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v29, v42, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_67;
  }
  if (v8)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v10 = "Unb";
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&buf[12] = 2082;
      if (a2)
        v10 = "B";
      *(_QWORD *)&buf[14] = v10;
      *(_WORD *)&buf[22] = 2082;
      v56 = a1;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}slocking opportunistic traffic on \"%{public}s\"", buf, 0x20u);
    }

    v11 = v7;
    v12 = v8;
    v13 = xpc_dictionary_create(0, 0, 0);
    v14 = v13;
    if (v13)
    {
      xpc_dictionary_set_uint64(v13, (const char *)networkd_privileged_key_type, 2uLL);
      xpc_dictionary_set_BOOL(v14, (const char *)networkd_privileged_key_opportunistic_disable, a2);
      v15 = xpc_string_create(a1);
      if (v15)
      {
        xpc_dictionary_set_value(v14, (const char *)networkd_privileged_key_opportunistic_ifname, v15);
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __networkd_privileged_set_opportunistic_async_block_invoke_41;
        v56 = (const char *)&unk_1E149A0A8;
        v58 = v12;
        v59 = a2;
        v16 = v15;
        v57 = v16;
        networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_set_opportunistic_async", v14, v11, buf);

LABEL_31:
        v25 = 1;
        goto LABEL_32;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
      v18 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if ((__nwlog_fault(v18, &type, &v53) & 1) != 0)
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v20 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s xpc_string_create failed", buf, 0xCu);
          }
        }
        else if (v53)
        {
          v21 = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v22 = type;
          v23 = os_log_type_enabled(v19, type);
          if (v21)
          {
            if (v23)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v21;
              _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s xpc_string_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v21);
            if (!v18)
              goto LABEL_30;
            goto LABEL_29;
          }
          if (v23)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
            _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s xpc_string_create failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v19 = (id)gLogObj;
          v24 = type;
          if (os_log_type_enabled(v19, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
            _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s xpc_string_create failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v18)
      {
LABEL_30:
        v16 = 0;
        goto LABEL_31;
      }
LABEL_29:
      free(v18);
      goto LABEL_30;
    }
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
    v36 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if ((__nwlog_fault(v36, &type, &v53) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
        }
      }
      else if (v53)
      {
        v46 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        v48 = os_log_type_enabled(v37, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v46;
            _os_log_impl(&dword_182FBE000, v37, v47, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v46);
          goto LABEL_100;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
          _os_log_impl(&dword_182FBE000, v37, v47, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v52 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "networkd_privileged_set_opportunistic_async";
          _os_log_impl(&dword_182FBE000, v37, v52, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_100:
    if (v36)
      free(v36);
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __networkd_privileged_set_opportunistic_async_block_invoke;
    v56 = (const char *)&unk_1E14AC390;
    v57 = v12;
    dispatch_async(v11, buf);
    v16 = v57;
    goto LABEL_31;
  }
  __nwlog_obj();
  v33 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
  v28 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v53 = 0;
  if (__nwlog_fault(v28, &type, &v53))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null completion", buf, 0xCu);
      }
LABEL_93:

      goto LABEL_94;
    }
    if (!v53)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_182FBE000, v29, v51, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_93;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    v44 = type;
    v45 = os_log_type_enabled(v29, type);
    if (!backtrace_string)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
        _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_93;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "network_config_set_opportunistic_blocked";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v29, v44, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_67;
  }
LABEL_94:
  if (v28)
    free(v28);
  v25 = 0;
LABEL_32:

  return v25;
}

void sub_1833FF0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void network_config_set_persistent_interface(const char *a1)
{
  NSObject *v2;
  const char *v3;
  const char *v4;
  unsigned __int8 v5;
  _QWORD v6[2];
  void (*v7)(uint64_t);
  void *v8;
  const char *v9;
  uint8_t buf[4];
  const char *v11;
  __int16 v12;
  const char *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v3 = "NULL";
    if (a1)
      v3 = a1;
    if ((const char *)kNetworkConfigPersistentInterfaceNoGuidance == a1)
      v4 = "NoGuidance";
    else
      v4 = v3;
    *(_DWORD *)buf = 136446466;
    v11 = "network_config_set_persistent_interface";
    v12 = 2082;
    v13 = v4;
    _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEFAULT, "%{public}s Setting persistent interface to \"%{public}s\"", buf, 0x16u);
  }

  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v7 = __network_config_set_persistent_interface_block_invoke;
  v8 = &__block_descriptor_40_e5_v8__0l;
  v9 = a1;
  if ((v5 & 1) == 0
  {
    nw_persistent_agent_synchronize(void({block_pointer})(void))::persistent_agent_lock = 0;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_persistent_agent_synchronize(void({block_pointer})(void))::persistent_agent_lock);
  v7((uint64_t)v6);
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_persistent_agent_synchronize(void({block_pointer})(void))::persistent_agent_lock);
}

void __network_config_set_persistent_interface_block_invoke(uint64_t a1)
{
  void *v2;
  char *v3;
  BOOL v4;
  NWConcrete_nw_interface *v5;
  id v6;
  _BOOL8 v7;
  NWConcrete_nw_agent *v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  void *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v2 = (void *)_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent;
  if (_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent)
  {
    _ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent = 0;

  }
  v3 = *(char **)(a1 + 32);
  if (v3)
    v4 = v3 == (char *)kNetworkConfigPersistentInterfaceNoGuidance;
  else
    v4 = 1;
  if (!v4 && *v3)
  {
    v5 = nw_interface_create_with_name(v3);
    if (v5)
    {
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v6 = (id)nw_context_copy_implicit_context::implicit_context;
      v7 = nw_context_copy_workloop(v6);
      v8 = nw_agent_create("Persistent", "Persistent", "Persistent interface guidance", (void *)v7);
      v9 = (void *)_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent;
      _ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent = (uint64_t)v8;

      nw_agent_change_state((void *)_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent, 1, 0, 0);
      LODWORD(v7) = nw_agent_add_to_interface((void *)_ZZZ39network_config_set_persistent_interfaceEUb_E16persistent_agent, v5);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v10 = (id)gLogObj;
      v11 = v10;
      if (v7)
      {
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446466;
          v23 = "network_config_set_persistent_interface_block_invoke";
          v24 = 2114;
          v25 = v5;
          _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEFAULT, "%{public}s Added persistent agent to interface %{public}@", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        v23 = "network_config_set_persistent_interface_block_invoke";
        v24 = 2114;
        v25 = v5;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s Failed to add persistent agent to %{public}@", buf, 0x16u);
      }

LABEL_18:
      return;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "network_config_set_persistent_interface_block_invoke";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v13, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "network_config_set_persistent_interface_block_invoke";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null interface", buf, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v23 = "network_config_set_persistent_interface_block_invoke";
            v24 = 2082;
            v25 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "network_config_set_persistent_interface_block_invoke";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "network_config_set_persistent_interface_block_invoke";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_36:
    if (v13)
      free(v13);
    goto LABEL_18;
  }
}

void sub_1833FF6FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL network_config_set_BOOL_setting(const char *a1, BOOL value)
{
  xpc_object_t v3;
  _BOOL8 v4;

  v3 = xpc_BOOL_create(value);
  v4 = networkd_privileged_set_settings(a1, v3, 0);

  return v4;
}

void sub_1833FF764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL network_config_set_int64_setting(const char *a1, int64_t value)
{
  xpc_object_t v3;
  _BOOL8 v4;

  v3 = xpc_int64_create(value);
  v4 = networkd_privileged_set_settings(a1, v3, 0);

  return v4;
}

void sub_1833FF7B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL network_config_set_int_sysctl_setting(const char *a1, int a2)
{
  xpc_object_t v3;
  _BOOL8 v4;

  v3 = xpc_int64_create(a2);
  v4 = networkd_privileged_set_settings(a1, v3, "sysctl");

  return v4;
}

void sub_1833FF810(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL network_config_set_BOOL_sysctl_setting(const char *a1, BOOL value)
{
  xpc_object_t v3;
  _BOOL8 v4;

  v3 = xpc_BOOL_create(value);
  v4 = networkd_privileged_set_settings(a1, v3, "sysctl");

  return v4;
}

void sub_1833FF868(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL network_config_get_BOOL_setting_with_default(const char *a1, _BOOL8 value)
{
  void *v3;
  void *v4;

  v3 = networkd_settings_copy_value_of_type(a1, 0);
  v4 = v3;
  if (v3 && object_getClass(v3) == (Class)MEMORY[0x1E0C812D0])
    value = xpc_BOOL_get_value(v4);

  return value;
}

void sub_1833FF8D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL network_config_get_BOOL_setting(const char *a1)
{
  void *v1;
  void *v2;
  _BOOL8 v3;

  v1 = networkd_settings_copy_value_of_type(a1, 0);
  v2 = v1;
  v3 = v1 && object_getClass(v1) == (Class)MEMORY[0x1E0C812D0] && xpc_BOOL_get_value(v2);

  return v3;
}

void sub_1833FF93C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

int64_t network_config_get_int64_setting_with_default(const char *a1, int64_t value)
{
  void *v3;
  void *v4;

  v3 = networkd_settings_copy_value_of_type(a1, 0);
  v4 = v3;
  if (v3 && object_getClass(v3) == (Class)MEMORY[0x1E0C81328])
    value = xpc_int64_get_value(v4);

  return value;
}

void sub_1833FF9A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void network_config_get_string_setting(const char *a1, _BYTE *a2, size_t a3)
{
  void *v5;
  const char *string_ptr;
  const char *v7;
  uint64_t v8;
  size_t v9;
  int v10;
  NSObject *v11;
  void *v12;
  NSObject *v13;
  void *v14;

  v5 = networkd_settings_copy_value_of_type(a1, 0);
  bzero(a2, a3);
  if (!v5 || object_getClass(v5) != (Class)MEMORY[0x1E0C81390])
  {
LABEL_3:

    return;
  }
  string_ptr = xpc_string_get_string_ptr(v5);
  v7 = string_ptr;
  if (a2)
  {
    if (string_ptr)
      goto LABEL_6;
  }
  else
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
    v12 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v12))
      goto LABEL_19;
    free(v12);
    if (v7)
    {
LABEL_6:
      if (a3 >= 2)
        goto LABEL_7;
      goto LABEL_15;
    }
  }
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
  v14 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v14))
  {
    free(v14);
    if (a3 >= 2)
    {
LABEL_7:
      v8 = 1;
      v9 = a3;
      while (1)
      {
        v10 = *(unsigned __int8 *)v7;
        *a2 = v10;
        if (!v10)
          goto LABEL_3;
        ++a2;
        ++v7;
        if (--v9 <= 1)
          goto LABEL_16;
      }
    }
LABEL_15:
    v8 = a3;
LABEL_16:
    if (a3)
    {
      if (v8)
        *a2 = 0;
    }
    goto LABEL_3;
  }
LABEL_19:
  __break(1u);
}

void sub_1833FFBD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

int64_t network_config_get_int64_setting(const char *a1)
{
  void *v1;
  void *v2;
  int64_t value;

  v1 = networkd_settings_copy_value_of_type(a1, 0);
  v2 = v1;
  if (v1 && object_getClass(v1) == (Class)MEMORY[0x1E0C81328])
    value = xpc_int64_get_value(v2);
  else
    value = 0;

  return value;
}

void sub_1833FFC48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t network_config_open_kernel_network_advisory_socket()
{
  NSObject *v0;
  uint64_t kernel_socket_internal;
  NSObject *v2;
  NSObject *v3;
  const char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint32_t v7;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136446210;
    v10 = "network_config_open_kernel_network_advisory_socket";
    _os_log_impl(&dword_182FBE000, v0, OS_LOG_TYPE_DEFAULT, "%{public}s Requesting kernel network advisory socket from helper", (uint8_t *)&v9, 0xCu);
  }

  kernel_socket_internal = networkd_privileged_get_kernel_socket_internal(0xDuLL);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  v3 = v2;
  if ((kernel_socket_internal & 0x80000000) != 0)
  {
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v9 = 136446210;
      v10 = "network_config_open_kernel_network_advisory_socket";
      v4 = "%{public}s Failed to open kernel network advisory socket";
      v5 = v3;
      v6 = OS_LOG_TYPE_ERROR;
      v7 = 12;
      goto LABEL_8;
    }
  }
  else if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v9 = 136446466;
    v10 = "network_config_open_kernel_network_advisory_socket";
    v11 = 1024;
    v12 = kernel_socket_internal;
    v4 = "%{public}s Received kernel network advisory socket fd=%d";
    v5 = v3;
    v6 = OS_LOG_TYPE_DEFAULT;
    v7 = 18;
LABEL_8:
    _os_log_impl(&dword_182FBE000, v5, v6, v4, (uint8_t *)&v9, v7);
  }

  return kernel_socket_internal;
}

void network_config_check_interface_settings()
{
  nw_allow_use_of_dispatch_internal();
  network_config_check_mobile_asset();
  network_config_run_probes();
}

void network_config_check_mobile_asset()
{
  NSObject *v0;
  xpc_object_t v1;
  void *v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "network_config_check_mobile_asset";
    _os_log_impl(&dword_182FBE000, v0, OS_LOG_TYPE_DEFAULT, "%{public}s Checking mobile asset", buf, 0xCu);
  }

  v1 = xpc_dictionary_create(0, 0, 0);
  v2 = v1;
  if (v1)
  {
    xpc_dictionary_set_uint64(v1, (const char *)networkd_privileged_key_type, 0xBuLL);
    if (networkd_privileged_copy_queue(void)::onceToken != -1)
      dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_54);
    networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_check_mobile_asset", v2, (void *)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue, &__block_literal_global_767);
    goto LABEL_7;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v14 = "networkd_privileged_check_mobile_asset";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "networkd_privileged_check_mobile_asset";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "networkd_privileged_check_mobile_asset";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "networkd_privileged_check_mobile_asset";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "networkd_privileged_check_mobile_asset";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v4)
    free(v4);
LABEL_7:

}

void sub_1834001C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void network_config_run_probes()
{
  NSObject *v0;
  xpc_object_t v1;
  void *v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  nw_allow_use_of_dispatch_internal();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v0 = (id)gLogObj;
  if (os_log_type_enabled(v0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136446210;
    v14 = "network_config_run_probes";
    _os_log_impl(&dword_182FBE000, v0, OS_LOG_TYPE_DEFAULT, "%{public}s Running network probes", buf, 0xCu);
  }

  v1 = xpc_dictionary_create(0, 0, 0);
  v2 = v1;
  if (v1)
  {
    xpc_dictionary_set_uint64(v1, (const char *)networkd_privileged_key_type, 0x15uLL);
    if (networkd_privileged_copy_queue(void)::onceToken != -1)
      dispatch_once(&networkd_privileged_copy_queue(void)::onceToken, &__block_literal_global_54);
    networkd_privileged_send_async_inner((uint64_t)"networkd_privileged_run_probes", v2, (void *)networkd_privileged_copy_queue(void)::networkdPrivilegedQueue, &__block_literal_global_39);
    goto LABEL_7;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v14 = "networkd_privileged_run_probes";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "networkd_privileged_run_probes";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s xpc_dictionary_create failed", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "networkd_privileged_run_probes";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s xpc_dictionary_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "networkd_privileged_run_probes";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s xpc_dictionary_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "networkd_privileged_run_probes";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s xpc_dictionary_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v4)
    free(v4);
LABEL_7:

}

void sub_183400590(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void network_config_set_default_multipath_service_type(int64_t value)
{
  int v1;
  NSObject *v2;
  const char *v3;
  id v4;
  uint8_t buf[4];
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v1 = value;
  v9 = *MEMORY[0x1E0C80C00];
  if (value < 4)
  {
    v3 = (const char *)nw_setting_multipath_service_type;
    v4 = xpc_int64_create(value);
    networkd_privileged_set_settings(v3, v4, 0);

  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v6 = "network_config_set_default_multipath_service_type";
      v7 = 1024;
      v8 = v1;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_ERROR, "%{public}s Invalid Multipath Service Type: %d", buf, 0x12u);
    }

  }
}

void sub_1834006D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

int64_t network_config_get_default_multipath_service_type()
{
  void *v0;
  void *v1;
  int64_t value;

  v0 = networkd_settings_copy_value_of_type((const char *)nw_setting_multipath_service_type, 0);
  v1 = v0;
  if (v0 && object_getClass(v0) == (Class)MEMORY[0x1E0C81328])
    value = xpc_int64_get_value(v1);
  else
    value = 0;

  return value;
}

void sub_183400750(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void network_config_set_multipath_allow_aggregation(BOOL a1)
{
  id v1;

  v1 = xpc_BOOL_create(a1);
  networkd_privileged_set_settings("net.inet.mptcp.allow_aggregate", v1, "sysctl");

}

void sub_1834007A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

BOOL network_config_get_multipath_allow_aggregation()
{
  BOOL v0;
  int v1;
  id v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  NSObject *v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  size_t v15;
  int v16;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v16 = 0;
  v15 = 4;
  if (sysctlbyname("net.inet.mptcp.allow_aggregate", &v16, &v15, 0, 0))
    v0 = 0;
  else
    v0 = v15 == 4;
  if (v0)
    return v16 != 0;
  v1 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v2 = (id)gLogObj;
  *(_DWORD *)buf = 136446722;
  v18 = "network_config_get_multipath_allow_aggregation";
  v19 = 2082;
  v20 = "net.inet.mptcp.allow_aggregate";
  v21 = 1024;
  v22 = v1;
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v3, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = (id)gLogObj;
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446722;
      v18 = "network_config_get_multipath_allow_aggregation";
      v19 = 2082;
      v20 = "net.inet.mptcp.allow_aggregate";
      v21 = 1024;
      v22 = v1;
      v6 = "%{public}s Error reading sysctl %{public}s %{darwin.errno}d";
LABEL_20:
      v11 = v4;
      v12 = v5;
      goto LABEL_21;
    }
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = (id)gLogObj;
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_22;
      *(_DWORD *)buf = 136446722;
      v18 = "network_config_get_multipath_allow_aggregation";
      v19 = 2082;
      v20 = "net.inet.mptcp.allow_aggregate";
      v21 = 1024;
      v22 = v1;
      v6 = "%{public}s Error reading sysctl %{public}s %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_20;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    v9 = type;
    v10 = os_log_type_enabled(v4, type);
    if (!backtrace_string)
    {
      if (!v10)
      {
LABEL_22:

        if (!v3)
          return 0;
        goto LABEL_16;
      }
      *(_DWORD *)buf = 136446722;
      v18 = "network_config_get_multipath_allow_aggregation";
      v19 = 2082;
      v20 = "net.inet.mptcp.allow_aggregate";
      v21 = 1024;
      v22 = v1;
      v6 = "%{public}s Error reading sysctl %{public}s %{darwin.errno}d, no backtrace";
      v11 = v4;
      v12 = v9;
LABEL_21:
      _os_log_impl(&dword_182FBE000, v11, v12, v6, buf, 0x1Cu);
      goto LABEL_22;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446978;
      v18 = "network_config_get_multipath_allow_aggregation";
      v19 = 2082;
      v20 = "net.inet.mptcp.allow_aggregate";
      v21 = 1024;
      v22 = v1;
      v23 = 2082;
      v24 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v4, v9, "%{public}s Error reading sysctl %{public}s %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x26u);
    }

    free(backtrace_string);
  }
  if (v3)
LABEL_16:
    free(v3);
  return 0;
}

BOOL network_config_register_quic_log_debug_updates(void *a1)
{
  id v1;
  _BOOL8 v2;

  v1 = a1;
  nw_allow_use_of_dispatch_internal();
  v2 = nw_settings_register_quic_log_debug_updates(v1);

  return v2;
}

void network_config_set_interface_constrained(const char *a1, BOOL a2)
{
  nw_allow_use_of_dispatch_internal();
  networkd_privileged_set_constrained(a1, a2);
}

void network_config_set_interface_ultra_constrained(const char *a1, BOOL a2)
{
  nw_allow_use_of_dispatch_internal();
  networkd_privileged_set_ultra_constrained(a1, a2);
}

void network_config_set_interface_expensive(const char *a1, BOOL a2)
{
  nw_allow_use_of_dispatch_internal();
  networkd_privileged_set_expensive(a1, a2);
}

void network_config_set_interface_estimated_throughput(const char *a1, unint64_t a2, unint64_t a3)
{
  char v6;
  char v7;
  unsigned __int8 v8;
  char v9;
  char v10;
  unsigned __int8 v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  void *v28;
  __int16 v29;
  unint64_t v30;
  __int16 v31;
  int v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  unint64_t v36;
  __int16 v37;
  int v38;
  __int16 v39;
  uint64_t v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    nw_allow_use_of_dispatch_internal();
    v6 = 49 - __clz(a2);
    if (a2 >= 0x10000)
      v7 = v6;
    else
      v7 = 1;
    if (a2)
      v8 = v7;
    else
      v8 = 0;
    v9 = 49 - __clz(a3);
    if (a3 >= 0x10000)
      v10 = v9;
    else
      v10 = 1;
    if (a3)
      v11 = v10;
    else
      v11 = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v13 = 0x8000 << v11;
      *(_DWORD *)buf = 136448002;
      v26 = "network_config_set_interface_estimated_throughput";
      v27 = 2082;
      if (v11 > 0x30u)
        v13 = -1;
      v28 = (void *)a1;
      v29 = 2048;
      v14 = 0x8000 << v8;
      if (!v11)
        v13 = 0;
      v30 = a2;
      v31 = 1024;
      if (v8 > 0x30u)
        v14 = -1;
      v32 = v8;
      if (!v8)
        v14 = 0;
      v33 = 2048;
      v34 = v14;
      v35 = 2048;
      v36 = a3;
      v37 = 1024;
      v38 = v11;
      v39 = 2048;
      v40 = v13;
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s up: %lluBps -> %u (%lluBps), down: %lluBps -> %u (%lluBps)", buf, 0x4Au);
    }

    networkd_privileged_set_throughput_estimates(a1, v8, v11);
    return;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "network_config_set_interface_estimated_throughput";
  v16 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v16, &type, &v23))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "network_config_set_interface_estimated_throughput";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null name", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v17, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "network_config_set_interface_estimated_throughput";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null name, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_42;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "network_config_set_interface_estimated_throughput";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null name, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "network_config_set_interface_estimated_throughput";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null name, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_42:
  if (v16)
    free(v16);
}

void network_config_set_interface_radio_type(const char *a1, unsigned __int8 a2, unsigned int a3)
{
  nw_allow_use_of_dispatch_internal();
  networkd_privileged_set_radio_type(a1, a2, a3);
}

void network_config_set_l4s_enabled(BOOL a1)
{
  const char *v2;
  const char *v3;
  const char *v4;
  id v5;
  id v6;
  id v7;

  v2 = (const char *)nw_setting_enable_l4s;
  v5 = xpc_BOOL_create(a1);
  networkd_privileged_set_settings(v2, v5, 0);

  v3 = (const char *)nw_setting_enable_accurate_ecn;
  v6 = xpc_BOOL_create(a1);
  networkd_privileged_set_settings(v3, v6, 0);

  v4 = (const char *)nw_setting_enable_tcp_l4s;
  v7 = xpc_BOOL_create(a1);
  networkd_privileged_set_settings(v4, v7, 0);

}

void sub_183401084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t network_config_get_l4s_enabled()
{
  uint64_t result;

  if (network_config_get_quic_l4s_enabled())
    return 1;
  result = network_config_get_tcp_accurate_ecn_enabled();
  if ((_DWORD)result)
    return network_config_get_tcp_l4s_enabled();
  return result;
}

BOOL network_config_get_tcp_l4s_enabled()
{
  void *v0;
  void *v1;
  BOOL value;

  v0 = networkd_settings_copy_value_of_type((const char *)nw_setting_enable_tcp_l4s, 0);
  v1 = v0;
  if (v0 && object_getClass(v0) == (Class)MEMORY[0x1E0C812D0])
  {
    value = xpc_BOOL_get_value(v1);

    if (value)
      return 1;
  }
  else
  {

  }
  if (nw_settings_get_l4s_enabled_internal::onceToken != -1)
    dispatch_once(&nw_settings_get_l4s_enabled_internal::onceToken, &__block_literal_global_63599);
  return nw_settings_get_l4s_enabled_internal::l4s_enabled != 0;
}

void sub_183401174(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18340150C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1834015FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183401948(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183401CAC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183402018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183402380(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183402428(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_accumulated_size(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t i;
  void *v7;
  uint64_t v8;
  BOOL v9;
  NSObject *v10;
  uint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  const char *v21;
  __int16 v22;
  uint64_t v23;
  __int16 v24;
  uint64_t v25;
  _BYTE v26[128];
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v14 = 0u;
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v1 = a1;
  v2 = 0;
  v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v14, v26, 16);
  if (v3)
  {
    v5 = *(_QWORD *)v15;
    *(_QWORD *)&v4 = 136446978;
    v13 = v4;
    do
    {
      for (i = 0; i != v3; ++i)
      {
        if (*(_QWORD *)v15 != v5)
          objc_enumerationMutation(v1);
        v7 = *(void **)(*((_QWORD *)&v14 + 1) + 8 * i);
        v8 = objc_msgSend(v7, "length", v13, (_QWORD)v14);
        v9 = __CFADD__(v2, v8);
        v2 += v8;
        if (v9)
        {
          if (gLogDatapath)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v10 = (id)gLogObj;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
            {
              v11 = objc_msgSend(v7, "length");
              *(_DWORD *)buf = v13;
              v19 = "nw_endpoint_get_accumulated_size";
              v20 = 2082;
              v21 = "sum";
              v22 = 2048;
              v23 = v11;
              v24 = 2048;
              v25 = v2;
              _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
            }

          }
          v2 = -1;
        }
      }
      v3 = objc_msgSend(v1, "countByEnumeratingWithState:objects:count:", &v14, v26, 16);
    }
    while (v3);
  }

  return v2;
}

void sub_183402628(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__6403(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__6404(uint64_t a1)
{

}

uint64_t nw_endpoint_is_registered(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[231] >> 2) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_is_registered";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_is_registered";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_is_registered";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_endpoint_create_from_dictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;
  void *v6;
  const void *bytes_ptr;
  NSObject *v8;
  int v10;
  const char *v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C812E8])
  {
    v6 = (void *)MEMORY[0x1E0C99D50];
    bytes_ptr = xpc_data_get_bytes_ptr(v4);
    objc_msgSend(v6, "dataWithBytes:length:", bytes_ptr, xpc_data_get_length(v4));
    v5 = objc_claimAutoreleasedReturnValue();
    if (v5)
    {
      nw_endpoint_append_public_key(*(void **)(a1 + 32), v5);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        v10 = 136446210;
        v11 = "nw_endpoint_create_from_dictionary_block_invoke";
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s failed to create NSData for public key", (uint8_t *)&v10, 0xCu);
      }

      v5 = 0;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      v10 = 136446210;
      v11 = "nw_endpoint_create_from_dictionary_block_invoke";
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s Invalid key type", (uint8_t *)&v10, 0xCu);
    }
  }

  return 1;
}

void sub_183402ABC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_endpoint_append_public_key(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void *v5;
  os_unfair_lock_s *v6;
  id v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[6];
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_endpoint_append_public_key";
    v9 = (char *)_os_log_send_and_compose_impl();

    v24 = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &v24, &v23))
      goto LABEL_38;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_append_public_key";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v24;
      v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_endpoint_append_public_key";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9)
          goto LABEL_4;
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_append_public_key";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_endpoint_append_public_key";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_endpoint_append_public_key_block_invoke;
    v22[3] = &unk_1E14ACE68;
    v6 = v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock(v3 + 44);
    __nw_endpoint_append_public_key_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock(v3 + 44);

    goto LABEL_4;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_endpoint_append_public_key";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &v24, &v23))
    goto LABEL_38;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_endpoint_append_public_key";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null publicKey", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_endpoint_append_public_key";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null publicKey, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_endpoint_append_public_key";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null publicKey, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_endpoint_append_public_key";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null publicKey, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_39;
LABEL_4:

}

void __nw_endpoint_append_public_key_block_invoke(uint64_t a1)
{
  void *v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t accumulated_size;
  uint64_t v11;
  unint64_t v12;
  NSObject *v13;
  id v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  os_log_type_t v26;
  os_log_type_t v27;
  NSObject *v28;
  uint64_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  __int16 v38;
  unint64_t v39;
  _QWORD v40[2];

  v40[1] = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(*(_QWORD *)(a1 + 32) + 48);
  if (!v2)
  {
    v40[0] = *(_QWORD *)(a1 + 40);
    objc_msgSend(MEMORY[0x1E0C99D20], "arrayWithObjects:count:", v40, 1);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 48);
    *(_QWORD *)(v8 + 48) = v7;

    return;
  }
  if ((unint64_t)objc_msgSend(v2, "count") < 0x10)
  {
    accumulated_size = nw_endpoint_get_accumulated_size(*(void **)(*(_QWORD *)(a1 + 32) + 48));
    v11 = objc_msgSend(*(id *)(a1 + 40), "length");
    v12 = accumulated_size + v11;
    if (__CFADD__(accumulated_size, v11))
    {
      if (gLogDatapath)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
        {
          v29 = objc_msgSend(*(id *)(a1 + 40), "length");
          *(_DWORD *)buf = 136446978;
          v33 = "nw_endpoint_append_public_key_block_invoke";
          v34 = 2082;
          v35 = "totalSize";
          v36 = 2048;
          v37 = v29;
          v38 = 2048;
          v39 = v12;
          _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }

      }
      v12 = -1;
    }
    else if (v12 < 0x1389)
    {
      v22 = *(_QWORD *)(a1 + 32);
      v21 = *(_QWORD *)(a1 + 40);
      v23 = a1 + 32;
      objc_msgSend(*(id *)(v22 + 48), "arrayByAddingObject:", v21);
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = *(void **)(*(_QWORD *)v23 + 48);
      *(_QWORD *)(*(_QWORD *)v23 + 48) = v24;

      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v13 = (id)gLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_endpoint_append_public_key_block_invoke";
      v34 = 2048;
      v35 = (const char *)v12;
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_INFO, "%{public}s Accumulated key-size %zu", buf, 0x16u);
    }

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v33 = "nw_endpoint_append_public_key_block_invoke";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v4, &type, &v30))
    {
LABEL_45:
      if (!v4)
        return;
      goto LABEL_46;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v15 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_182FBE000, v5, v15, "%{public}s Accumulated key-size too large", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (!v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v27 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_182FBE000, v5, v27, "%{public}s Accumulated key-size too large, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v19 = type;
    v20 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_182FBE000, v5, v19, "%{public}s Accumulated key-size too large, no backtrace", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_endpoint_append_public_key_block_invoke";
      v34 = 2082;
      v35 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v19, "%{public}s Accumulated key-size too large, dumping backtrace:%{public}s", buf, 0x16u);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v33 = "nw_endpoint_append_public_key_block_invoke";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v4, &type, &v30))
      goto LABEL_45;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s Adding key would exceed maximum count", buf, 0xCu);
      }
LABEL_44:

      goto LABEL_45;
    }
    if (!v30)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v26 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_182FBE000, v5, v26, "%{public}s Adding key would exceed maximum count, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_44;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v17 = type;
    v18 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_endpoint_append_public_key_block_invoke";
        _os_log_impl(&dword_182FBE000, v5, v17, "%{public}s Adding key would exceed maximum count, no backtrace", buf, 0xCu);
      }
      goto LABEL_44;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v33 = "nw_endpoint_append_public_key_block_invoke";
      v34 = 2082;
      v35 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v17, "%{public}s Adding key would exceed maximum count, dumping backtrace:%{public}s", buf, 0x16u);
    }
  }

  free(backtrace_string);
  if (!v4)
    return;
LABEL_46:
  free(v4);
}

void sub_1834036F0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_txt_record(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 23, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_set_txt_record";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_txt_record";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_set_txt_record";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_txt_record";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_txt_record";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

BOOL nw_endpoint_is_custom_type(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "type") > 0x3E7;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_is_custom_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_is_custom_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_is_custom_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_is_custom_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_is_custom_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183403C48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *__cdecl nw_endpoint_copy_port_string(nw_endpoint_t endpoint)
{
  NSObject *v1;
  NSObject *v2;
  char *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = endpoint;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    asprintf((char **)buf, "%d", __rev16(-[NSObject port](v1, "port")));
    v3 = *(char **)buf;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_copy_port_string";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_copy_port_string";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_copy_port_string";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_copy_port_string";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_copy_port_string";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183403F10(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_cname_array(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 15, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_set_cname_array";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_cname_array";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_set_cname_array";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_cname_array";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_cname_array";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

id nw_endpoint_copy_cname_array(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[15];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_copy_cname_array";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_cname_array";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_copy_cname_array";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_cname_array";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_cname_array";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_endpoint_clone_parent_endpoint_properties(void *a1, void *a2)
{
  id *v3;
  id *v4;
  id *v5;
  int v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_endpoint_clone_parent_endpoint_properties";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_clone_parent_endpoint_properties";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_endpoint_clone_parent_endpoint_properties";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_clone_parent_endpoint_properties";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_clone_parent_endpoint_properties";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    objc_storeStrong(v3 + 14, v4[14]);
    v6 = *((_BYTE *)v3 + 231) & 0xFD | (2 * ((*((unsigned __int8 *)v5 + 231) >> 1) & 1));
    *((_BYTE *)v3 + 231) = v6;
    *((_WORD *)v3 + 114) = *((_WORD *)v5 + 114);
    *((_BYTE *)v3 + 231) = *((_BYTE *)v5 + 231) & 0x20 | v6 & 0xDF;
    objc_storeStrong(v3 + 24, v5[24]);
    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_endpoint_clone_parent_endpoint_properties";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (!__nwlog_fault(v8, &type, &v21))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_endpoint_clone_parent_endpoint_properties";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null original_endpoint", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v21)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_endpoint_clone_parent_endpoint_properties";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null original_endpoint, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v24 = "nw_endpoint_clone_parent_endpoint_properties";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null original_endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v24 = "nw_endpoint_clone_parent_endpoint_properties";
    v25 = 2082;
    v26 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null original_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

void nw_endpoint_set_agent_identifier(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *(_OWORD *)(v3 + 28) = *a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_set_agent_identifier";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_agent_identifier";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_set_agent_identifier";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_agent_identifier";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_agent_identifier";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

id *nw_endpoint_copy_without_proxy_parent(void *a1)
{
  id v1;
  void *v2;
  id v3;
  _QWORD *v4;
  void *v5;
  id *v6;
  char *v7;
  _BYTE *v8;
  id *v9;
  id *v10;
  id *v11;
  uint64_t v12;
  id v13;
  _QWORD *v14;
  id *v15;
  id *v16;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_endpoint_copy_without_proxy_parent";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v19, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_endpoint_copy_without_proxy_parent";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v26)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        v24 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "nw_endpoint_copy_without_proxy_parent";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_endpoint_copy_without_proxy_parent";
          _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "nw_endpoint_copy_without_proxy_parent";
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_28:
    if (v19)
      free(v19);
    v16 = 0;
    goto LABEL_11;
  }
  v3 = v1;
  v4 = (_QWORD *)objc_msgSend(v3, "copyEndpoint");
  nw_endpoint_copy_properties(v3, v4);

  v5 = (void *)v4[14];
  v4[14] = 0;

  v6 = v4;
  v7 = (char *)v3;
  v8 = v7;
  v9 = (id *)(v7 + 112);
  if (*((_QWORD *)v7 + 14))
  {
    v10 = (id *)(v7 + 112);
    v11 = v6;
    while ((v8[231] & 2) == 0)
    {
      v12 = objc_msgSend(*v9, "copyEndpoint");
      v13 = v11[14];
      v11[14] = (id)v12;

      v14 = *v10;
      v15 = (id *)v11[14];

      v10 = (id *)(v14 + 14);
      v8 = v14;
      v11 = v15;
      if (!v14[14])
        goto LABEL_10;
    }
    v15 = v11;
  }
  else
  {
    v15 = v6;
  }
  v14 = v8;
LABEL_10:
  v16 = v6;

LABEL_11:
  return v16;
}

void sub_183404F48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_interface(void *a1, void *a2)
{
  id *v3;
  id v4;
  id *v5;
  os_unfair_lock_s *v6;
  char *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  void *v19;
  id *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 2, a2);
    v5 = v3;
    v6 = (os_unfair_lock_s *)v5 + 45;
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_endpoint_clear_description_block_invoke;
    v19 = &unk_1E14ACFD0;
    v20 = v5;
    v7 = v5;
    os_unfair_lock_lock(v6);
    __nw_endpoint_clear_description_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v6);

    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_set_interface";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_interface";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_set_interface";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_interface";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_set_interface";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
LABEL_3:

}

void nw_endpoint_clear_description(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  char *v3;
  _QWORD v4[5];

  v1 = a1;
  v2 = v1 + 45;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_endpoint_clear_description_block_invoke;
  v4[3] = &unk_1E14ACFD0;
  v4[4] = v1;
  v3 = v1;
  os_unfair_lock_lock(v2);
  __nw_endpoint_clear_description_block_invoke((uint64_t)v4);
  os_unfair_lock_unlock(v2);

}

void __nw_endpoint_clear_description_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 231) &= ~8u;
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 64);
  if (v3)
  {
    free(v3);
    *(_QWORD *)(v2 + 64) = 0;
  }
  v4 = *(void **)(v2 + 56);
  *(_QWORD *)(v2 + 56) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 231) &= ~0x10u;
  v5 = *(_QWORD *)(a1 + 32);
  v6 = *(void **)(v5 + 80);
  if (v6)
  {
    free(v6);
    *(_QWORD *)(v5 + 80) = 0;
  }
  v7 = *(void **)(v5 + 72);
  *(_QWORD *)(v5 + 72) = 0;

}

void nw_endpoint_set_remote_interface_type(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 6) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_set_remote_interface_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_remote_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_set_remote_interface_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_remote_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_remote_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_endpoint_get_remote_interface_type(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[6];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_get_remote_interface_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_remote_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_get_remote_interface_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_remote_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_remote_interface_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_endpoint_set_weight(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "setWeight:", a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_set_weight";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_weight";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_set_weight";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_weight";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_weight";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_183405B34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_custom_metadata_for_key(void *a1, const char *a2, const uint8_t *a3, size_t a4)
{
  id v7;
  _QWORD *v8;
  NSObject *v9;
  _BOOL8 dictionary_with_initial_length;
  void *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  void *v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_endpoint_set_custom_metadata_for_key";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_endpoint_set_custom_metadata_for_key";
          v35 = 2082;
          v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_60:
        if (!v13)
          goto LABEL_10;
LABEL_61:
        free(v13);
        goto LABEL_10;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_59:

    goto LABEL_60;
  }
  if (!a2)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_endpoint_set_custom_metadata_for_key";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_endpoint_set_custom_metadata_for_key";
      v35 = 2082;
      v36 = v23;
      _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_40;
  }
  if (a3 && !a4)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_endpoint_set_custom_metadata_for_key";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null metadata_len", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v14, v30, "%{public}s called with null metadata_len, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    v23 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v14, type);
    if (!v23)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_endpoint_set_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null metadata_len, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_endpoint_set_custom_metadata_for_key";
      v35 = 2082;
      v36 = v23;
      _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null metadata_len, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_40:

    free(v23);
    if (!v13)
      goto LABEL_10;
    goto LABEL_61;
  }
  v9 = *((_QWORD *)v7 + 23);
  if (!v9)
  {
    dictionary_with_initial_length = nw_txt_record_create_dictionary_with_initial_length(0x100uLL);
    v11 = (void *)v8[23];
    v8[23] = dictionary_with_initial_length;

    v9 = v8[23];
    if (a3)
      goto LABEL_7;
LABEL_9:
    nw_txt_record_remove_key(v9, a2);
    goto LABEL_10;
  }
  if (!a3)
    goto LABEL_9;
LABEL_7:
  nw_txt_record_set_key(v9, a2, a3, a4);
LABEL_10:

}

void sub_183406248(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_access_custom_metadata_for_key(void *a1, const char *a2, void *a3)
{
  _QWORD *v5;
  id v6;
  uint64_t (**v7)(_QWORD, _QWORD, _QWORD);
  NSObject *v8;
  uint64_t v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  NSObject *v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  _QWORD access_value[4];
  id v32;
  const char *v33;
  char v34;
  os_log_type_t v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))v6;
  if (!v5)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_endpoint_access_custom_metadata_for_key";
    v12 = (char *)_os_log_send_and_compose_impl();

    v35 = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v12, &v35, &v34))
      goto LABEL_61;
    if (v35 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v34)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v28 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v20 = v35;
    v21 = os_log_type_enabled(v13, v35);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "nw_endpoint_access_custom_metadata_for_key";
      v38 = 2082;
      v39 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_33;
  }
  if (!a2)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_endpoint_access_custom_metadata_for_key";
    v12 = (char *)_os_log_send_and_compose_impl();

    v35 = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v12, &v35, &v34))
      goto LABEL_61;
    if (v35 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null key", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (!v34)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v29 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v13, v29, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_60;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v22 = v35;
    v23 = os_log_type_enabled(v13, v35);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_60;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v37 = "nw_endpoint_access_custom_metadata_for_key";
      v38 = 2082;
      v39 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_33:

    free(backtrace_string);
    if (!v12)
      goto LABEL_63;
    goto LABEL_62;
  }
  if (!v6)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v37 = "nw_endpoint_access_custom_metadata_for_key";
    v12 = (char *)_os_log_send_and_compose_impl();

    v35 = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (!__nwlog_fault(v12, &v35, &v34))
      goto LABEL_61;
    if (v35 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null access_block", buf, 0xCu);
      }
    }
    else if (v34)
    {
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v25 = v35;
      v26 = os_log_type_enabled(v13, v35);
      if (v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_endpoint_access_custom_metadata_for_key";
          v38 = 2082;
          v39 = v24;
          _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
LABEL_61:
        if (!v12)
        {
LABEL_63:
          v9 = 0;
          goto LABEL_8;
        }
LABEL_62:
        free(v12);
        goto LABEL_63;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v30 = v35;
      if (os_log_type_enabled(v13, v35))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v13, v30, "%{public}s called with null access_block, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_60:

    goto LABEL_61;
  }
  v8 = v5[23];
  if (v8)
  {
    access_value[0] = MEMORY[0x1E0C809B0];
    access_value[1] = 3221225472;
    access_value[2] = __nw_endpoint_access_custom_metadata_for_key_block_invoke;
    access_value[3] = &unk_1E149B290;
    v33 = a2;
    v32 = v6;
    v9 = nw_txt_record_access_key(v8, a2, access_value);

  }
  else
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_endpoint_access_custom_metadata_for_key";
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s endpoint has no custom metadata, returning NULL", buf, 0xCu);
      }

    }
    v9 = v7[2](v7, 0, 0);
  }
LABEL_8:

  return v9;
}

void sub_1834069F4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t __nw_endpoint_access_custom_metadata_for_key_block_invoke(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  NSObject *v8;
  uint64_t v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint32_t v13;
  uint64_t v15;
  int v17;
  const char *v18;
  __int16 v19;
  uint64_t v20;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (a3 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      v15 = *(_QWORD *)(a1 + 40);
      v17 = 136446722;
      v18 = "nw_endpoint_access_custom_metadata_for_key_block_invoke";
      v19 = 2080;
      v20 = v15;
      v21 = 1024;
      LODWORD(v22) = a3;
      v10 = "%{public}s did not find %s in custom metadata: %u";
      v11 = v8;
      v12 = OS_LOG_TYPE_INFO;
      v13 = 28;
      goto LABEL_7;
    }
LABEL_8:

    return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a4, a5, a4);
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      v9 = *(_QWORD *)(a1 + 40);
      v17 = 136446722;
      v18 = "nw_endpoint_access_custom_metadata_for_key_block_invoke";
      v19 = 2048;
      v20 = a5;
      v21 = 2080;
      v22 = v9;
      v10 = "%{public}s found value of %zu bytes for key %s in custom metadata";
      v11 = v8;
      v12 = OS_LOG_TYPE_DEBUG;
      v13 = 32;
LABEL_7:
      _os_log_impl(&dword_182FBE000, v11, v12, v10, (uint8_t *)&v17, v13);
      goto LABEL_8;
    }
    goto LABEL_8;
  }
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a4, a5, a4);
}

void nw_endpoint_set_signature(void *a1, const void *a2, size_t a3)
{
  _QWORD *v5;
  xpc_object_t v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  if (!v5)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_endpoint_set_signature";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_endpoint_set_signature";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v9)
          goto LABEL_5;
LABEL_56:
        free(v9);
        goto LABEL_5;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_182FBE000, v10, v24, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!a2)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_endpoint_set_signature";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null signature", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_182FBE000, v10, v25, "%{public}s called with null signature, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null signature, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_endpoint_set_signature";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null signature, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a3)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_endpoint_set_signature";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v9, &type, &v27))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null signature_length", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v27)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_182FBE000, v10, v26, "%{public}s called with null signature_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v19 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v10, type);
    if (!v19)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_endpoint_set_signature";
        _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null signature_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_endpoint_set_signature";
      v31 = 2082;
      v32 = v19;
      _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null signature_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v19);
    if (!v9)
      goto LABEL_5;
    goto LABEL_56;
  }
  v6 = xpc_data_create(a2, a3);
  v7 = (void *)v5[24];
  v5[24] = v6;

LABEL_5:
}

void sub_183407274(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_ech_config(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_msgSend(v3, "setEchConfig:", v4);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_set_ech_config";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_ech_config";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_set_ech_config";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_ech_config";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_ech_config";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_183407528(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_copy_ech_config(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    objc_msgSend(v1, "echConfig");
    v3 = objc_claimAutoreleasedReturnValue();
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_copy_ech_config";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_ech_config";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_copy_ech_config";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_ech_config";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_ech_config";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_1834077DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_known_tracker_name(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 88);
  return result;
}

uint64_t nw_endpoint_get_tracker_owner(uint64_t result)
{
  if (result)
    return *(_QWORD *)(result + 96);
  return result;
}

BOOL nw_endpoint_hostname_matches_tracker(void *a1)
{
  _QWORD *v1;
  const char **v2;
  _QWORD *v3;
  id *v4;
  int v5;
  id *v6;
  const char *v7;
  size_t v8;
  size_t v9;
  size_t v10;
  BOOL v11;
  uint64_t v12;
  _BOOL8 v13;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (const char **)v1;
  if (!v1)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_endpoint_hostname_matches_tracker";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v16, &type, &v28))
      goto LABEL_51;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_50;
    }
    if (!v28)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_50;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_endpoint_hostname_matches_tracker";
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (!v1[11])
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_endpoint_hostname_matches_tracker";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v16, &type, &v28))
      goto LABEL_51;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null endpoint->known_tracker_name", buf, 0xCu);
      }
LABEL_50:

LABEL_51:
      if (v16)
        free(v16);
      goto LABEL_16;
    }
    if (!v28)
    {
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v17, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s called with null endpoint->known_tracker_name, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_50;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    v25 = os_log_type_enabled(v17, type);
    if (!backtrace_string)
    {
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_hostname_matches_tracker";
        _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null endpoint->known_tracker_name, no backtrace", buf, 0xCu);
      }
      goto LABEL_50;
    }
    if (v25)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_endpoint_hostname_matches_tracker";
      v32 = 2082;
      v33 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null endpoint->known_tracker_name, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(backtrace_string);
    goto LABEL_51;
  }
  v3 = v1;
  do
  {
    v4 = v3;
    v5 = objc_msgSend(v4, "type");

    if (v5 == 2)
    {
      v6 = v4;
      v7 = (const char *)objc_msgSend(v6, "hostname");

    }
    else
    {
      v7 = 0;
    }
    v3 = v4[14];

  }
  while (!v7 && v3);

  if (!v7)
    goto LABEL_16;
  v8 = strlen(v2[11]);
  v9 = strlen(v7);
  if (v9)
  {
    v10 = v9 - 1;
    if (v7[v9 - 1] != 46)
      v10 = v9;
    v11 = v10 >= v8;
    v12 = v10 - v8;
    if (!v11)
      goto LABEL_16;
LABEL_17:
    v13 = strncmp(&v7[v12], v2[11], v8) == 0;
    goto LABEL_18;
  }
  v12 = -(uint64_t)v8;
  if (!v8)
    goto LABEL_17;
LABEL_16:
  v13 = 0;
LABEL_18:

  return v13;
}

void sub_183407D68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_is_approved_app_domain(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 64;
    else
      v5 = 0;
    *((_BYTE *)v3 + 231) = *((_BYTE *)v3 + 231) & 0xBF | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_endpoint_set_is_approved_app_domain";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_set_is_approved_app_domain";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_endpoint_set_is_approved_app_domain";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_set_is_approved_app_domain";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_set_is_approved_app_domain";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

void nw_endpoint_set_can_block_request(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 0x80;
    else
      v5 = 0;
    *((_BYTE *)v3 + 231) = v5 & 0x80 | *((_BYTE *)v3 + 231) & 0x7F;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_endpoint_set_can_block_request";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_set_can_block_request";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_endpoint_set_can_block_request";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_set_can_block_request";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_set_can_block_request";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

BOOL nw_endpoint_get_can_block_request(void *a1)
{
  char *v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[231] < 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_get_can_block_request";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_can_block_request";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_get_can_block_request";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_can_block_request";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_can_block_request";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_endpoint_has_associations_block_invoke_34(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 231) & 8) != 0)
  {
    *(_BYTE *)(v2 + 231) &= ~8u;
  }
  else
  {
    v3 = *(void **)(v2 + 64);
    if (v3)
    {
      free(v3);
      *(_QWORD *)(v2 + 64) = 0;
    }
    v4 = *(void **)(v2 + 56);
    *(_QWORD *)(v2 + 56) = 0;

  }
  v5 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v5 + 231) & 0x10) != 0)
  {
    *(_BYTE *)(v5 + 231) &= ~0x10u;
  }
  else
  {
    v6 = *(void **)(v5 + 80);
    if (v6)
    {
      free(v6);
      *(_QWORD *)(v5 + 80) = 0;
    }
    v7 = *(void **)(v5 + 72);
    *(_QWORD *)(v5 + 72) = 0;

  }
}

void nw_endpoint_add_edge(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  void *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD v26[4];
  id v27;
  id v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_add_edge";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v8, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null endpoint", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (!v29)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_21;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_endpoint_add_edge";
        v33 = 2082;
        v34 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    goto LABEL_22;
  }
  if (!v4)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_add_edge";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v8, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null edge", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (!v29)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_182FBE000, v9, v25, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_21;
      }
      v11 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v9, type);
      if (!v11)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "nw_endpoint_add_edge";
          _os_log_impl(&dword_182FBE000, v9, v22, "%{public}s called with null edge, no backtrace", buf, 0xCu);
        }
        goto LABEL_21;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v32 = "nw_endpoint_add_edge";
        v33 = 2082;
        v34 = v11;
        _os_log_impl(&dword_182FBE000, v9, v22, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_14;
    }
LABEL_22:
    if (!v8)
      goto LABEL_24;
LABEL_23:
    free(v8);
    goto LABEL_24;
  }
  nw_endpoint_edge_get_endpoint(v4);
  v6 = (id)objc_claimAutoreleasedReturnValue();

  if (v6 == v3)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v32 = "nw_endpoint_add_edge";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v8, &type, &v29))
      goto LABEL_22;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_endpoint_add_edge";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s endpoints cannot add edges to themselves", buf, 0xCu);
      }
LABEL_21:

      goto LABEL_22;
    }
    if (!v29)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_endpoint_add_edge";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s endpoints cannot add edges to themselves, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_21;
    }
    v11 = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v12 = type;
    v13 = os_log_type_enabled(v9, type);
    if (!v11)
    {
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_endpoint_add_edge";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s endpoints cannot add edges to themselves, no backtrace", buf, 0xCu);
      }
      goto LABEL_21;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v32 = "nw_endpoint_add_edge";
      v33 = 2082;
      v34 = v11;
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s endpoints cannot add edges to themselves, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_14:

    free(v11);
    if (!v8)
      goto LABEL_24;
    goto LABEL_23;
  }
  v26[0] = MEMORY[0x1E0C809B0];
  v26[1] = 3221225472;
  v26[2] = __nw_endpoint_add_edge_block_invoke;
  v26[3] = &unk_1E14ACE68;
  v27 = v3;
  v28 = v5;
  nw_endpoint_locked(v27, v26);

LABEL_24:
}

void sub_183408D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_endpoint_add_edge_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  _BOOL8 v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;
  id v8;
  void *v9;
  unsigned __int8 *v10;
  _BOOL4 v11;
  NSObject *v12;
  const char *v13;
  uint64_t v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  NSObject *v27;
  const char *logging_description;
  uint64_t v29;
  const char *v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t type[8];
  uint64_t v36;
  uint64_t (*v37)(uint64_t, uint64_t, void *);
  void *v38;
  id v39;
  os_log_type_t *v40;
  os_log_type_t v41[8];
  os_log_type_t *v42;
  uint64_t v43;
  char v44;
  char v45;
  uint8_t buf[4];
  const char *v47;
  __int16 v48;
  void *v49;
  __int16 v50;
  uint64_t v51;
  __int16 v52;
  const char *v53;
  __int16 v54;
  void *v55;
  uint64_t v56;

  v56 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD **)(a1 + 32);
  if (v2[27]
    || (v3 = nw_array_create(),
        v4 = *(_QWORD *)(a1 + 32),
        v5 = *(void **)(v4 + 216),
        *(_QWORD *)(v4 + 216) = v3,
        v5,
        v2 = *(_QWORD **)(a1 + 32),
        v2[27]))
  {
    v6 = *(void **)(a1 + 40);
    v7 = v2;
    v8 = v6;
    if (v8)
    {
      v9 = v8;
      *(_QWORD *)v41 = 0;
      v42 = v41;
      v43 = 0x2020000000;
      v44 = 0;
      v10 = (unsigned __int8 *)v2[27];
      if (v10)
      {
        *(_QWORD *)type = MEMORY[0x1E0C809B0];
        v36 = 3221225472;
        v37 = ___ZL27nw_endpoint_has_edge_lockedP22NWConcrete_nw_endpointPU30objcproto19OS_nw_endpoint_edge8NSObject_block_invoke;
        v38 = &unk_1E14AB5F0;
        v39 = v8;
        v40 = v41;
        nw_array_apply(v10, (uint64_t)type);

      }
      if (gLogDatapath)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
        {
          logging_description = nw_endpoint_get_logging_description(v7);
          v29 = v2[27];
          if (*((_BYTE *)v42 + 24))
            v30 = "already has";
          else
            v30 = "does not already have";
          *(_DWORD *)buf = 136447234;
          v47 = "nw_endpoint_has_edge_locked";
          v48 = 2080;
          v49 = (void *)logging_description;
          v50 = 2112;
          v51 = v29;
          v52 = 2080;
          v53 = v30;
          v54 = 2112;
          v55 = v9;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s endpoint %s edges %@ %s edge %@", buf, 0x34u);
        }

      }
      v11 = *((_BYTE *)v42 + 24) == 0;
      _Block_object_dispose(v41, 8);

      if (!v11)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v13 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
          v14 = *(_QWORD *)(a1 + 40);
          *(_DWORD *)buf = 136446722;
          v47 = "nw_endpoint_add_edge_block_invoke";
          v48 = 2080;
          v49 = (void *)v13;
          v50 = 2112;
          v51 = v14;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s endpoint %s not adding already present edge %@", buf, 0x20u);
        }

        return;
      }
LABEL_55:
      nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 216), *(void **)(a1 + 40));
      return;
    }
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v47 = "nw_endpoint_has_edge_locked";
    v24 = (char *)_os_log_send_and_compose_impl();

    v41[0] = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (__nwlog_fault(v24, v41, &v45))
    {
      if (v41[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = v41[0];
        if (os_log_type_enabled(v25, v41[0]))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_endpoint_has_edge_locked";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null edge", buf, 0xCu);
        }
      }
      else if (v45)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v32 = v41[0];
        v33 = os_log_type_enabled(v25, v41[0]);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v47 = "nw_endpoint_has_edge_locked";
            v48 = 2082;
            v49 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_52;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_endpoint_has_edge_locked";
          _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null edge, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v34 = v41[0];
        if (os_log_type_enabled(v25, v41[0]))
        {
          *(_DWORD *)buf = 136446210;
          v47 = "nw_endpoint_has_edge_locked";
          _os_log_impl(&dword_182FBE000, v25, v34, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_52:
    if (v24)
      free(v24);

    goto LABEL_55;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v15 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v47 = "nw_endpoint_add_edge_block_invoke";
  v16 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v41[0] = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault(v16, type, v41))
    goto LABEL_16;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    v18 = type[0];
    if (os_log_type_enabled(v17, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "nw_endpoint_add_edge_block_invoke";
      _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s nw_array_create failed", buf, 0xCu);
    }
LABEL_15:

LABEL_16:
    if (!v16)
      return;
    goto LABEL_17;
  }
  if (v41[0] == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    v22 = type[0];
    if (os_log_type_enabled(v17, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      v47 = "nw_endpoint_add_edge_block_invoke";
      _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s nw_array_create failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_15;
  }
  v19 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v17 = (id)gLogObj;
  v20 = type[0];
  v21 = os_log_type_enabled(v17, type[0]);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446210;
      v47 = "nw_endpoint_add_edge_block_invoke";
      _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s nw_array_create failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_15;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446466;
    v47 = "nw_endpoint_add_edge_block_invoke";
    v48 = 2082;
    v49 = v19;
    _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s nw_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v19);
  if (v16)
LABEL_17:
    free(v16);
}

void sub_1834094A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a12);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL27nw_endpoint_has_edge_lockedP22NWConcrete_nw_endpointPU30objcproto19OS_nw_endpoint_edge8NSObject_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id *v5;
  _QWORD *v6;
  id *v7;
  BOOL v8;
  uint64_t result;
  BOOL v13;
  id WeakRetained;
  id v15;
  char v16;

  v5 = (id *)*(id *)(a1 + 32);
  v6 = a3;
  v7 = (id *)v6;
  if (v5)
    v8 = v6 == 0;
  else
    v8 = 1;
  if (v8)
  {

    if (v5 == v7)
      goto LABEL_25;
    return 1;
  }
  v13 = v5[1] == (id)v6[1] && v5[2] == (id)v6[2] && v5[3] == (id)v6[3] && v5[4] == (id)v6[4] && v5[5] == (id)v6[5];
  if (!v13
    || (WeakRetained = objc_loadWeakRetained(v5 + 6),
        v15 = objc_loadWeakRetained(v7 + 6),
        v15,
        WeakRetained,
        WeakRetained != v15))
  {

    return 1;
  }
  v16 = *((_BYTE *)v7 + 64) ^ *((_BYTE *)v5 + 64);

  if ((v16 & 1) != 0)
    return 1;
LABEL_25:
  result = 0;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return result;
}

uint64_t __nw_endpoint_enumerate_edges_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  _QWORD *v5;
  void *v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  BOOL v16;
  uint64_t v18;
  NSObject *v19;
  const char *v20;
  const char *v21;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  NSObject *v27;
  const char *logging_description;
  NSObject *v29;
  const char *v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  const char *v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  void *v41;
  __int16 v42;
  void *v43;
  __int16 v44;
  int v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = v5;
  if (v5)
  {
    v7 = v5 + 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v23 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_endpoint_edge_get_identifier";
  v24 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (__nwlog_fault(v24, &type, &v36))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_endpoint_edge_get_identifier";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null edge", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v25, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_endpoint_edge_get_identifier";
          v40 = 2082;
          v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null edge, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_53;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_endpoint_edge_get_identifier";
        _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null edge, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_endpoint_edge_get_identifier";
        _os_log_impl(&dword_182FBE000, v25, v34, "%{public}s called with null edge, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_53:
  if (v24)
    free(v24);
  v7 = 0;
LABEL_3:

  if (gLogDatapath)
  {
    __nwlog_obj();
    v27 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
    {
      logging_description = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446722;
      v39 = "nw_endpoint_enumerate_edges_block_invoke_2";
      v40 = 2080;
      v41 = (void *)logging_description;
      v42 = 2112;
      v43 = v6;
      _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s %s considering edge %@", buf, 0x20u);
    }

  }
  v8 = *(uint64_t **)(a1 + 48);
  if (!v8)
  {
    if (!gLogDatapath)
      goto LABEL_24;
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v20 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446722;
      v39 = "nw_endpoint_enumerate_edges_block_invoke";
      v40 = 2080;
      v41 = (void *)v20;
      v42 = 2112;
      v43 = v6;
      v21 = "%{public}s %s no identifier specified for edge %@, calling enumerator";
LABEL_48:
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, v21, buf, 0x20u);
    }
LABEL_49:

    goto LABEL_24;
  }
  if (!v7)
    goto LABEL_19;
  v9 = *v8;
  v10 = v8[1];
  v11 = v8[2];
  v12 = v8[3];
  v13 = v8[4];
  v14 = v9 == *v7 && v10 == v7[1];
  v15 = v14 && v11 == v7[2];
  v16 = v15 && v12 == v7[3];
  if (!v16 || v13 != v7[4])
  {
LABEL_19:
    v18 = 1;
    goto LABEL_25;
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      v35 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446722;
      v39 = "nw_endpoint_enumerate_edges_block_invoke";
      v40 = 2080;
      v41 = (void *)v35;
      v42 = 2112;
      v43 = v6;
      v21 = "%{public}s %s identifier matches for edge %@, calling enumerator";
      goto LABEL_48;
    }
    goto LABEL_49;
  }
LABEL_24:
  v18 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2);
LABEL_25:
  if (gLogDatapath)
  {
    __nwlog_obj();
    v29 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
    {
      v30 = nw_endpoint_get_logging_description(*(void **)(a1 + 32));
      *(_DWORD *)buf = 136446978;
      v39 = "nw_endpoint_enumerate_edges_block_invoke";
      v40 = 2080;
      v41 = (void *)v30;
      v42 = 2112;
      v43 = v6;
      v44 = 1024;
      v45 = v18;
      _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s %s continuing after edge %@: %u", buf, 0x26u);
    }

  }
  return v18;
}

void sub_183409AE4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_endpoint_add_edges_for_instance(void *a1, unsigned __int8 *a2, int a3)
{
  id v5;
  void *v6;
  __int128 *v7;
  id v8;
  id v9;
  uint64_t v10;
  void (*v11)(unsigned __int8 *);
  NSObject *v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(unsigned __int8 *);
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  NSObject *v20;
  NSObject *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(void);
  unsigned __int8 *v26;
  NSObject *v27;
  void *v28;
  id v29;
  NSObject *v30;
  unsigned int v31;
  id v32;
  __int16 v33;
  _BOOL8 v34;
  NSObject *v35;
  uint64_t v36;
  NSObject *v37;
  unsigned __int8 *v38;
  _BOOL8 v39;
  uint64_t v40;
  NSObject *v41;
  const char *logging_description;
  unsigned __int8 *v43;
  uint64_t v44;
  uint64_t v45;
  id *registered_endpoint;
  id v47;
  id *v48;
  NSObject *v49;
  void *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  void *v54;
  os_log_type_t v55;
  NSObject *v56;
  unsigned __int8 *v57;
  void *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  char *backtrace_string;
  os_log_type_t v63;
  _BOOL4 v64;
  char *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  char *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  os_log_type_t v71;
  os_log_type_t v72;
  os_log_type_t v73;
  NSObject *v74;
  void *v75;
  char *v76;
  NSObject *v77;
  os_log_type_t v78;
  NSObject *v79;
  uint64_t v80;
  void *v81;
  char *v82;
  NSObject *v83;
  os_log_type_t v84;
  char *v85;
  os_log_type_t v86;
  _BOOL4 v87;
  char *v88;
  os_log_type_t v89;
  _BOOL4 v90;
  os_log_type_t v91;
  os_log_type_t v92;
  uint64_t v93;
  void *v94;
  NSObject *v95;
  NSObject *object;
  id v97;
  id v98;
  os_log_type_t type[8];
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(uint64_t, uint64_t);
  void (*v103)(uint64_t);
  id v104;
  char v105;
  _BYTE buf[24];
  unsigned __int8 *v107;
  _BYTE v108[24];
  unsigned __int8 *v109;
  __int16 v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
    v51 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v105 = 0;
    if (!__nwlog_fault(v51, type, &v105))
      goto LABEL_100;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v52 = objc_claimAutoreleasedReturnValue();
      v53 = type[0];
      if (os_log_type_enabled(v52, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
        _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v105)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v52 = objc_claimAutoreleasedReturnValue();
      v63 = type[0];
      v64 = os_log_type_enabled(v52, type[0]);
      if (backtrace_string)
      {
        if (v64)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v52, v63, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_100:
        if (!v51)
          goto LABEL_51;
LABEL_101:
        free(v51);
        goto LABEL_51;
      }
      if (v64)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
        _os_log_impl(&dword_182FBE000, v52, v63, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v52 = objc_claimAutoreleasedReturnValue();
      v71 = type[0];
      if (os_log_type_enabled(v52, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
        _os_log_impl(&dword_182FBE000, v52, v71, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_99:

    goto LABEL_100;
  }
  v7 = (__int128 *)*((_QWORD *)a2 + 2);
  if (v7)
  {
    v8 = nw_endpoint_copy_registrar_for_identifier(v5, v7, 0);
    if (!v8)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v41 = (id)gLogObj;
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        logging_description = nw_endpoint_get_logging_description(v6);
        v43 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = logging_description;
        *(_WORD *)&buf[22] = 2080;
        v107 = v43;
        *(_WORD *)v108 = 2048;
        *(_QWORD *)&v108[2] = v43;
        _os_log_impl(&dword_182FBE000, v41, OS_LOG_TYPE_ERROR, "%{public}s %s failed to find registrar, cannot add edges for %s identifier %p", buf, 0x2Au);
      }

      goto LABEL_50;
    }
    if (gLogDatapath)
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        v57 = (unsigned __int8 *)*((_QWORD *)a2 + 2);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v8;
        *(_WORD *)&buf[22] = 2080;
        v107 = v57;
        *(_WORD *)v108 = 2048;
        *(_QWORD *)&v108[2] = v57;
        _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s got registrar %@, adding edges for %s identifier %p", buf, 0x2Au);
      }

    }
    v9 = v8;
    v98 = v6;
    if (*((_QWORD *)a2 + 2))
    {
      v10 = *((_QWORD *)a2 + 3);
      if (!v10)
        goto LABEL_31;
      v11 = *(void (**)(unsigned __int8 *))(v10 + 136);
      if (!v11)
        goto LABEL_31;
      v11(a2);
      v12 = objc_claimAutoreleasedReturnValue();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = *((_QWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2048;
        v107 = a2;
        *(_WORD *)v108 = 2080;
        *(_QWORD *)&v108[2] = v14;
        *(_WORD *)&v108[10] = 2112;
        *(_QWORD *)&v108[12] = v12;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s has endpoint %@, adding edges", buf, 0x34u);
      }

      if (!v12)
      {
LABEL_31:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          v44 = *((_QWORD *)a2 + 2);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          v107 = a2;
          *(_WORD *)v108 = 2080;
          *(_QWORD *)&v108[2] = v44;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s does not have endpoint, cannot add edges", buf, 0x2Au);
        }
        goto LABEL_48;
      }
      v15 = *((_QWORD *)a2 + 3);
      if (!v15)
        goto LABEL_33;
      v16 = *(void (**)(unsigned __int8 *))(v15 + 112);
      if (!v16)
        goto LABEL_33;
      v16(a2);
      v17 = objc_claimAutoreleasedReturnValue();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = (id)gLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v19 = *((_QWORD *)a2 + 2);
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
        *(_WORD *)&buf[12] = 2112;
        *(_QWORD *)&buf[14] = v9;
        *(_WORD *)&buf[22] = 2048;
        v107 = a2;
        *(_WORD *)v108 = 2080;
        *(_QWORD *)&v108[2] = v19;
        *(_WORD *)&v108[10] = 2112;
        *(_QWORD *)&v108[12] = v17;
        _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s has parameters %@, adding edges", buf, 0x34u);
      }

      if (!v17)
      {
LABEL_33:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
          v45 = *((_QWORD *)a2 + 2);
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          *(_WORD *)&buf[12] = 2112;
          *(_QWORD *)&buf[14] = v9;
          *(_WORD *)&buf[22] = 2048;
          v107 = a2;
          *(_WORD *)v108 = 2080;
          *(_QWORD *)&v108[2] = v45;
          _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p of %s does not have parameters, cannot add edges", buf, 0x2Au);
        }
        goto LABEL_47;
      }
      v97 = v9;
      v20 = v12;
      v21 = v20;
      if (a3)
      {
        if (a3 == 1)
        {
          v22 = v97;
          *(_QWORD *)type = 0;
          v100 = (uint64_t)type;
          v101 = 0x3032000000;
          v102 = __Block_byref_object_copy__3855;
          v103 = __Block_byref_object_dispose__3856;
          v104 = 0;
          v23 = *((_QWORD *)a2 + 4);
          v95 = v21;
          if (v23 && (v24 = *(_QWORD *)(v23 + 24)) != 0 && (v25 = *(uint64_t (**)(void))(v24 + 224)) != 0)
          {
            v26 = (unsigned __int8 *)v25();
            if (gLogDatapath)
            {
              __nwlog_obj();
              v74 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_copy_tls_metadata_for_protocol";
                *(_WORD *)&buf[12] = 2112;
                *(_QWORD *)&buf[14] = v22;
                *(_WORD *)&buf[22] = 2112;
                v107 = v26;
                *(_WORD *)v108 = 2048;
                *(_QWORD *)&v108[2] = a2;
                _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_DEBUG, "%{public}s %@ got back metadata array %@ for protocol %p", buf, 0x2Au);
              }

            }
            *(_QWORD *)buf = MEMORY[0x1E0C809B0];
            *(_QWORD *)&buf[8] = 3221225472;
            *(_QWORD *)&buf[16] = ___ZL61nw_protocol_instance_registrar_copy_tls_metadata_for_protocolP41NWConcrete_nw_protocol_instance_registrarP11nw_protocol_block_invoke;
            v107 = (unsigned __int8 *)&unk_1E14AAFC8;
            *(_QWORD *)v108 = v22;
            *(_QWORD *)&v108[8] = type;
            *(_QWORD *)&v108[16] = a2;
            nw_array_apply(v26, (uint64_t)buf);

            v27 = *(NSObject **)v108;
          }
          else
          {
            if (!gLogDatapath)
            {
              v28 = 0;
LABEL_24:
              v29 = v28;
              _Block_object_dispose(type, 8);

              if (!v29)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v49 = (id)gLogObj;
                if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_copy_adjacent_endpoints_for_instance";
                  *(_WORD *)&buf[12] = 2112;
                  *(_QWORD *)&buf[14] = v22;
                  _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s %@ there are no adjacent endpoints because TLS is not in the stack", buf, 0x16u);
                }

                object = 0;
                v40 = 0;
LABEL_41:

                if (v40 && *(_QWORD *)(v40 + 24) != *(_QWORD *)(v40 + 16))
                {
                  if (*((_QWORD *)a2 + 2))
                  {
                    if (gLogDatapath)
                    {
                      __nwlog_obj();
                      v79 = objc_claimAutoreleasedReturnValue();
                      if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
                      {
                        v80 = *((_QWORD *)a2 + 2);
                        *(_DWORD *)buf = 136447234;
                        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                        *(_WORD *)&buf[12] = 2112;
                        *(_QWORD *)&buf[14] = v97;
                        *(_WORD *)&buf[22] = 2048;
                        v107 = a2;
                        *(_WORD *)v108 = 2080;
                        *(_QWORD *)&v108[2] = v80;
                        *(_WORD *)&v108[10] = 2112;
                        *(_QWORD *)&v108[12] = v40;
                        _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_DEBUG, "%{public}s %@ instance %p (%s) has adjacent endpoints %@", buf, 0x34u);
                      }

                    }
                    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                    *(_QWORD *)&buf[8] = 3221225472;
                    *(_QWORD *)&buf[16] = __nw_protocol_instance_registrar_add_edges_for_instance_block_invoke;
                    v107 = (unsigned __int8 *)&unk_1E14A2BD0;
                    *(_QWORD *)v108 = v97;
                    v109 = a2;
                    *(_QWORD *)&v108[8] = v98;
                    *(_QWORD *)&v108[16] = v17;
                    nw_array_apply((unsigned __int8 *)v40, (uint64_t)buf);

                    goto LABEL_46;
                  }
                  __nwlog_obj();
                  v75 = (void *)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                  v76 = (char *)_os_log_send_and_compose_impl();

                  type[0] = OS_LOG_TYPE_ERROR;
                  v105 = 0;
                  if (__nwlog_fault(v76, type, &v105))
                  {
                    if (type[0] == OS_LOG_TYPE_FAULT)
                    {
                      __nwlog_obj();
                      v77 = objc_claimAutoreleasedReturnValue();
                      v78 = type[0];
                      if (os_log_type_enabled(v77, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                        _os_log_impl(&dword_182FBE000, v77, v78, "%{public}s called with null protocol->identifier", buf, 0xCu);
                      }
                    }
                    else if (v105)
                    {
                      v85 = (char *)__nw_create_backtrace_string();
                      __nwlog_obj();
                      v77 = objc_claimAutoreleasedReturnValue();
                      v86 = type[0];
                      v87 = os_log_type_enabled(v77, type[0]);
                      if (v85)
                      {
                        if (v87)
                        {
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v85;
                          _os_log_impl(&dword_182FBE000, v77, v86, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
                        }

                        free(v85);
                        goto LABEL_145;
                      }
                      if (v87)
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                        _os_log_impl(&dword_182FBE000, v77, v86, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
                      }
                    }
                    else
                    {
                      __nwlog_obj();
                      v77 = objc_claimAutoreleasedReturnValue();
                      v91 = type[0];
                      if (os_log_type_enabled(v77, type[0]))
                      {
                        *(_DWORD *)buf = 136446210;
                        *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
                        _os_log_impl(&dword_182FBE000, v77, v91, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
                      }
                    }

                  }
LABEL_145:
                  if (v76)
                    free(v76);
                }
LABEL_46:

LABEL_47:
LABEL_48:

LABEL_49:
LABEL_50:

                goto LABEL_51;
              }
              v30 = v95;
              v31 = -[NSObject port](v30, "port");

              v32 = v22;
              object = v29;
              v94 = v32;
              if (nw_protocol_metadata_is_tls(object))
              {
                v33 = __rev16(v31);
                v34 = nw_array_create();
                v35 = object;
                v36 = MEMORY[0x1E0C809B0];
                *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                *(_QWORD *)&buf[8] = 3221225472;
                *(_QWORD *)&buf[16] = ___ZL62nw_protocol_instance_registrar_copy_san_list_from_tls_metadataP41NWConcrete_nw_protocol_instance_registrarP11nw_protocolPU34objcproto23OS_nw_protocol_metadata8NSObjectt_block_invoke;
                v107 = (unsigned __int8 *)&unk_1E149AB38;
                *(_QWORD *)v108 = v94;
                v109 = a2;
                v37 = v35;
                *(_QWORD *)&v108[8] = v37;
                v110 = v33;
                v38 = (unsigned __int8 *)(id)v34;
                *(_QWORD *)&v108[16] = v38;
                sec_protocol_metadata_access_peer_certificate_chain(v37, buf);
                v39 = nw_array_create();
                *(_QWORD *)type = v36;
                v100 = 3221225472;
                v101 = (uint64_t)___ZL62nw_protocol_instance_registrar_copy_san_list_from_tls_metadataP41NWConcrete_nw_protocol_instance_registrarP11nw_protocolPU34objcproto23OS_nw_protocol_metadata8NSObjectt_block_invoke_70;
                v102 = (uint64_t (*)(uint64_t, uint64_t))&unk_1E14AC200;
                v40 = (uint64_t)(id)v39;
                v103 = (void (*)(uint64_t))v40;
                nw_array_apply(v38, (uint64_t)type);

LABEL_27:
                goto LABEL_41;
              }
              __nwlog_obj();
              v81 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
              v82 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              v105 = 0;
              if ((__nwlog_fault(v82, type, &v105) & 1) != 0)
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v83 = objc_claimAutoreleasedReturnValue();
                  v84 = type[0];
                  if (os_log_type_enabled(v83, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
                    _os_log_impl(&dword_182FBE000, v83, v84, "%{public}s provided metadata is not tls", buf, 0xCu);
                  }
                }
                else if (v105)
                {
                  v88 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v83 = objc_claimAutoreleasedReturnValue();
                  v89 = type[0];
                  v90 = os_log_type_enabled(v83, type[0]);
                  if (v88)
                  {
                    if (v90)
                    {
                      *(_DWORD *)buf = 136446466;
                      *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v88;
                      _os_log_impl(&dword_182FBE000, v83, v89, "%{public}s provided metadata is not tls, dumping backtrace:%{public}s", buf, 0x16u);
                    }

                    free(v88);
                    goto LABEL_150;
                  }
                  if (v90)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
                    _os_log_impl(&dword_182FBE000, v83, v89, "%{public}s provided metadata is not tls, no backtrace", buf, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v83 = objc_claimAutoreleasedReturnValue();
                  v92 = type[0];
                  if (os_log_type_enabled(v83, type[0]))
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_copy_san_list_from_tls_metadata";
                    _os_log_impl(&dword_182FBE000, v83, v92, "%{public}s provided metadata is not tls, backtrace limit exceeded", buf, 0xCu);
                  }
                }

              }
LABEL_150:
              if (v82)
                free(v82);
              v40 = 0;
              goto LABEL_27;
            }
            __nwlog_obj();
            v27 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v27, OS_LOG_TYPE_DEBUG))
            {
              v93 = *((_QWORD *)a2 + 4);
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_copy_tls_metadata_for_protocol";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = v93;
              _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEBUG, "%{public}s output handler %p does not have valid copy_info callback, cannot get TLS metadata", buf, 0x16u);
            }
          }

          v28 = *(void **)(v100 + 40);
          goto LABEL_24;
        }
      }
      else
      {
        registered_endpoint = (id *)nw_protocol_instance_registrar_copy_next_registered_endpoint(v20, 0);
        if (registered_endpoint)
        {
          v95 = v21;
          v40 = nw_array_create();
          v47 = registered_endpoint[1];
          v48 = nw_endpoint_copy_without_proxy_parent(registered_endpoint);

          object = nw_context_copy_registered_endpoint_internal(v47, v48, 0);
          nw_array_append(v40, object);

          goto LABEL_41;
        }
      }

      v40 = 0;
      goto LABEL_46;
    }
    __nwlog_obj();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
    v59 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v105 = 0;
    if (__nwlog_fault(v59, type, &v105))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v60 = objc_claimAutoreleasedReturnValue();
        v61 = type[0];
        if (os_log_type_enabled(v60, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s called with null protocol->identifier", buf, 0xCu);
        }
      }
      else if (v105)
      {
        v68 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v60 = objc_claimAutoreleasedReturnValue();
        v69 = type[0];
        v70 = os_log_type_enabled(v60, type[0]);
        if (v68)
        {
          if (v70)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v68;
            _os_log_impl(&dword_182FBE000, v60, v69, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v68);
          goto LABEL_111;
        }
        if (v70)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          _os_log_impl(&dword_182FBE000, v60, v69, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v60 = objc_claimAutoreleasedReturnValue();
        v73 = type[0];
        if (os_log_type_enabled(v60, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_protocol_instance_registrar_add_edges_for_instance";
          _os_log_impl(&dword_182FBE000, v60, v73, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_111:
    if (v59)
      free(v59);
    goto LABEL_49;
  }
  __nwlog_obj();
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
  v51 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v105 = 0;
  if (!__nwlog_fault(v51, type, &v105))
    goto LABEL_100;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v52 = objc_claimAutoreleasedReturnValue();
    v55 = type[0];
    if (os_log_type_enabled(v52, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
      _os_log_impl(&dword_182FBE000, v52, v55, "%{public}s called with null protocol->identifier", buf, 0xCu);
    }
    goto LABEL_99;
  }
  if (!v105)
  {
    __nwlog_obj();
    v52 = objc_claimAutoreleasedReturnValue();
    v72 = type[0];
    if (os_log_type_enabled(v52, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
      _os_log_impl(&dword_182FBE000, v52, v72, "%{public}s called with null protocol->identifier, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_99;
  }
  v65 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v52 = objc_claimAutoreleasedReturnValue();
  v66 = type[0];
  v67 = os_log_type_enabled(v52, type[0]);
  if (!v65)
  {
    if (v67)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
      _os_log_impl(&dword_182FBE000, v52, v66, "%{public}s called with null protocol->identifier, no backtrace", buf, 0xCu);
    }
    goto LABEL_99;
  }
  if (v67)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_endpoint_add_edges_for_instance";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v65;
    _os_log_impl(&dword_182FBE000, v52, v66, "%{public}s called with null protocol->identifier, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v65);
  if (v51)
    goto LABEL_101;
LABEL_51:

}

void sub_18340AFE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,void *a34,void *a35)
{
  void *v35;
  void *v36;
  void *v37;
  void *v38;
  void *v39;
  void *v40;
  void *v41;

  _Unwind_Resume(a1);
}

void sub_18340B3D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_ws_request_enumerate_subprotocols(nw_ws_request_t request, nw_ws_subprotocol_enumerator_t enumerator)
{
  nw_ws_request_t v3;
  nw_ws_subprotocol_enumerator_t v4;
  void *v5;
  Class isa;
  BOOL v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD applier[4];
  id v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = request;
  v4 = enumerator;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      isa = v3[1].isa;
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_ws_request_enumerate_subprotocols_block_invoke;
      applier[3] = &unk_1E14A4E60;
      v23 = v4;
      v7 = xpc_array_apply(isa, applier);

      goto LABEL_4;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_ws_request_enumerate_subprotocols";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v10, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null enumerator", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v24)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_ws_request_enumerate_subprotocols";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_ws_request_enumerate_subprotocols";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v10, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null request", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v24)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_ws_request_enumerate_subprotocols";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_ws_request_enumerate_subprotocols";
        v28 = 2082;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

void sub_18340B950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_ws_request_enumerate_subprotocols_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;

  v4 = a3;
  xpc_string_get_string_ptr(v4);
  v5 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  return v5;
}

void sub_18340B9B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_ws_request_enumerate_additional_headers(nw_ws_request_t request, nw_ws_additional_header_enumerator_t enumerator)
{
  nw_ws_request_t v3;
  nw_ws_additional_header_enumerator_t v4;
  uint64_t (**v5)(_QWORD, _QWORD, _QWORD);
  size_t v6;
  size_t count;
  BOOL v8;
  const char *string;
  const char *v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = request;
  v4 = enumerator;
  v5 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))v4;
  if (!v3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_ws_request_enumerate_additional_headers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null request", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_ws_request_enumerate_additional_headers";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_41:
        if (!v13)
        {
LABEL_6:
          v8 = 0;
          goto LABEL_7;
        }
LABEL_42:
        free(v13);
        goto LABEL_6;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null request, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  if (!v4)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_ws_request_enumerate_additional_headers";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null enumerator", buf, 0xCu);
      }
    }
    else if (v26)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v14, type);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_ws_request_enumerate_additional_headers";
          v30 = 2082;
          v31 = v21;
          _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null enumerator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        if (!v13)
          goto LABEL_6;
        goto LABEL_42;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null enumerator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_ws_request_enumerate_additional_headers";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null enumerator, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_40;
  }
  v6 = 0;
  while (1)
  {
    count = xpc_array_get_count(v3[2].isa);
    v8 = v6 >= count;
    if (v6 >= count)
      break;
    string = xpc_array_get_string(v3[2].isa, v6);
    v10 = xpc_array_get_string(v3[3].isa, v6++);
    if ((((uint64_t (**)(_QWORD, const char *, const char *))v5)[2](v5, string, v10) & 1) == 0)
      goto LABEL_6;
  }
LABEL_7:

  return v8;
}

void sub_18340BEC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18340C0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint32_t nw_establishment_report_get_previous_attempt_count(nw_establishment_report_t report)
{
  nw_establishment_report_t v1;
  nw_establishment_report_t v2;
  uint32_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = report;
  v2 = v1;
  if (v1)
  {
    isa = (uint32_t)v1[10].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_establishment_report_get_previous_attempt_count";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_previous_attempt_count";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_establishment_report_get_previous_attempt_count";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_previous_attempt_count";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_previous_attempt_count";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = 0;
LABEL_3:

  return isa;
}

BOOL nw_establishment_report_get_proxy_configured(nw_establishment_report_t report)
{
  nw_establishment_report_t v1;
  nw_establishment_report_t v2;
  BOOL v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = report;
  v2 = v1;
  if (v1)
  {
    v3 = BYTE4(v1[10].isa) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_establishment_report_get_proxy_configured";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_proxy_configured";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_establishment_report_get_proxy_configured";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_proxy_configured";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_proxy_configured";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_establishment_report_enumerate_proxy_endpoints(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_establishment_report_enumerate_proxy_endpoints";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_proxy_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_establishment_report_enumerate_proxy_endpoints";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_proxy_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_proxy_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v6 = (unsigned __int8 *)v3[5];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_proxy_endpoints_block_invoke;
    v21[3] = &unk_1E14AC278;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_proxy_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxy_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxy_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxy_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_proxy_endpoints";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

uint64_t __nw_establishment_report_enumerate_proxy_endpoints_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_18340CFDC(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_duration_milliseconds(nw_data_transfer_report_t report)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  NSObject *v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = report;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_data_transfer_report_get_duration_milliseconds";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_data_transfer_report_get_duration_milliseconds";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v12 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_data_transfer_report_get_duration_milliseconds";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v11, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_data_transfer_report_get_duration_milliseconds";
          _os_log_impl(&dword_182FBE000, v7, v11, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_data_transfer_report_get_duration_milliseconds";
          _os_log_impl(&dword_182FBE000, v7, v13, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_24:
    if (v6)
      free(v6);
    goto LABEL_26;
  }
  if (nw_data_transfer_report_get_state(v1) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_data_transfer_report_get_duration_milliseconds";
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

LABEL_26:
    isa = 0;
    goto LABEL_4;
  }
  isa = (uint64_t)v2[2].isa;
LABEL_4:

  return isa;
}

void sub_18340D348(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_sent_transport_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    isa = (uint64_t)v4[15].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((_QWORD *)v13 + 8);
        v11 += *((_QWORD *)v13 + 53);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 296);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    v6 = 0;
  }
  else if (path_index)
  {
    v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(_QWORD *)(v6 + 64);
LABEL_14:

  return isa;
}

void sub_18340D940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_sent_transport_retransmitted_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    isa = (uint64_t)v4[16].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((_QWORD *)v13 + 9);
        v11 += *((_QWORD *)v13 + 54);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 288);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_retransmitted_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    v6 = 0;
  }
  else if (path_index)
  {
    v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(_QWORD *)(v6 + 72);
LABEL_14:

  return isa;
}

void sub_18340DF38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_received_transport_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_transport_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_transport_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_received_transport_byte_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    isa = (uint64_t)v4[12].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((_QWORD *)v13 + 5);
        v11 += *((_QWORD *)v13 + 50);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 320);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_transport_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_transport_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    v6 = 0;
  }
  else if (path_index)
  {
    v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(_QWORD *)(v6 + 40);
LABEL_14:

  return isa;
}

void sub_18340E530(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_received_transport_duplicate_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    isa = (uint64_t)v4[13].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((_QWORD *)v13 + 6);
        v11 += *((_QWORD *)v13 + 51);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 312);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_transport_duplicate_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    v6 = 0;
  }
  else if (path_index)
  {
    v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(_QWORD *)(v6 + 48);
LABEL_14:

  return isa;
}

void sub_18340EB28(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_received_transport_out_of_order_byte_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    isa = (uint64_t)v4[14].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((_QWORD *)v13 + 7);
        v11 += *((_QWORD *)v13 + 52);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 304);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_transport_out_of_order_byte_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    v6 = 0;
  }
  else if (path_index)
  {
    v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(_QWORD *)(v6 + 56);
LABEL_14:

  return isa;
}

void sub_18340F120(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  uint32_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  void *v15;
  int isa_high;
  os_log_type_t v17;
  int v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  uint32_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  int v26;
  os_log_type_t v27;
  os_log_type_t v28;
  int v29;
  int v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  _BYTE v36[10];
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
          v35 = 2082;
          *(_QWORD *)v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (path_index == -1)
    v5 = 0;
  else
    v5 = path_index;
  if (v5 >= HIDWORD(v4[5].isa))
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
    v35 = 1024;
    *(_DWORD *)v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      v22 = v5;
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
          v35 = 1024;
          *(_DWORD *)v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          v37 = 2082;
          v38 = v23;
          _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        v35 = 1024;
        *(_DWORD *)v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_smoothed_rtt_milliseconds";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11)
      free(v11);
LABEL_51:
    v8 = 0;
    goto LABEL_13;
  }
  v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    v7 = 0;
  }
  else if (v5)
  {
    v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    v7 = (uint64_t)&v6[7];
  }

  v8 = *(_QWORD *)(v7 + 112);
LABEL_13:

  return v8;
}

void sub_18340F6FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_minimum_rtt_milliseconds(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  uint32_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  void *v15;
  int isa_high;
  os_log_type_t v17;
  int v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  uint32_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  int v26;
  os_log_type_t v27;
  os_log_type_t v28;
  int v29;
  int v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  _BYTE v36[10];
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
          v35 = 2082;
          *(_QWORD *)v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (path_index == -1)
    v5 = 0;
  else
    v5 = path_index;
  if (v5 >= HIDWORD(v4[5].isa))
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
    v35 = 1024;
    *(_DWORD *)v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      v22 = v5;
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
          v35 = 1024;
          *(_DWORD *)v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          v37 = 2082;
          v38 = v23;
          _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        v35 = 1024;
        *(_DWORD *)v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_minimum_rtt_milliseconds";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11)
      free(v11);
LABEL_51:
    v8 = 0;
    goto LABEL_13;
  }
  v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    v7 = 0;
  }
  else if (v5)
  {
    v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    v7 = (uint64_t)&v6[7];
  }

  v8 = *(_QWORD *)(v7 + 120);
LABEL_13:

  return v8;
}

void sub_18340FCD8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_rtt_variance(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  uint32_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  void *v15;
  int isa_high;
  os_log_type_t v17;
  int v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  uint32_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  int v26;
  os_log_type_t v27;
  os_log_type_t v28;
  int v29;
  int v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  _BYTE v36[10];
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_transport_rtt_variance";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_data_transfer_report_get_transport_rtt_variance";
          v35 = 2082;
          *(_QWORD *)v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_transport_rtt_variance";
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (path_index == -1)
    v5 = 0;
  else
    v5 = path_index;
  if (v5 >= HIDWORD(v4[5].isa))
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    v34 = "nw_data_transfer_report_get_transport_rtt_variance";
    v35 = 1024;
    *(_DWORD *)v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      v22 = v5;
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          v34 = "nw_data_transfer_report_get_transport_rtt_variance";
          v35 = 1024;
          *(_DWORD *)v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          v37 = 2082;
          v38 = v23;
          _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        v35 = 1024;
        *(_DWORD *)v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_rtt_variance";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11)
      free(v11);
LABEL_51:
    v8 = 0;
    goto LABEL_13;
  }
  v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    v7 = 0;
  }
  else if (v5)
  {
    v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    v7 = (uint64_t)&v6[7];
  }

  v8 = *(_QWORD *)(v7 + 136);
LABEL_13:

  return v8;
}

void sub_1834102B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_congestion_window(void *a1, unsigned int a2)
{
  NSObject *v3;
  NSObject *v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  void *v15;
  int isa_high;
  os_log_type_t v17;
  int v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  unsigned int v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  int v26;
  os_log_type_t v27;
  os_log_type_t v28;
  int v29;
  int v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  _BYTE v36[10];
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_transport_congestion_window";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_congestion_window";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_data_transfer_report_get_transport_congestion_window";
          v35 = 2082;
          *(_QWORD *)v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_congestion_window";
        _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_congestion_window";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_transport_congestion_window";
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (a2 == -1)
    v5 = 0;
  else
    v5 = a2;
  if (v5 >= HIDWORD(v4[5].isa))
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    v34 = "nw_data_transfer_report_get_transport_congestion_window";
    v35 = 1024;
    *(_DWORD *)v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_congestion_window";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      v22 = v5;
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          v34 = "nw_data_transfer_report_get_transport_congestion_window";
          v35 = 1024;
          *(_DWORD *)v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          v37 = 2082;
          v38 = v23;
          _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_congestion_window";
        v35 = 1024;
        *(_DWORD *)v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_congestion_window";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11)
      free(v11);
LABEL_51:
    v8 = 0;
    goto LABEL_13;
  }
  v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    v7 = 0;
  }
  else if (v5)
  {
    v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    v7 = (uint64_t)&v6[7];
  }

  v8 = *(_QWORD *)(v7 + 144);
LABEL_13:

  return v8;
}

void sub_183410890(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_transport_slow_start_threshold(void *a1, unsigned int a2)
{
  NSObject *v3;
  NSObject *v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  void *v15;
  int isa_high;
  os_log_type_t v17;
  int v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  unsigned int v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  int v26;
  os_log_type_t v27;
  os_log_type_t v28;
  int v29;
  int v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  _BYTE v36[10];
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
          v35 = 2082;
          *(_QWORD *)v36 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_49;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_48;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_51;
  }
  if (a2 == -1)
    v5 = 0;
  else
    v5 = a2;
  if (v5 >= HIDWORD(v4[5].isa))
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    isa_high = HIDWORD(v4[5].isa);
    *(_DWORD *)buf = 136446722;
    v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
    v35 = 1024;
    *(_DWORD *)v36 = v5;
    *(_WORD *)&v36[4] = 1024;
    *(_DWORD *)&v36[6] = isa_high;
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v11, &type, &v31))
      goto LABEL_49;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        v18 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v18;
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s path_index (%u) >= report->path_count (%u)", buf, 0x18u);
      }
    }
    else if (v31)
    {
      v22 = v5;
      v23 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v12, type);
      if (v23)
      {
        if (v25)
        {
          v26 = HIDWORD(v4[5].isa);
          *(_DWORD *)buf = 136446978;
          v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
          v35 = 1024;
          *(_DWORD *)v36 = v22;
          *(_WORD *)&v36[4] = 1024;
          *(_DWORD *)&v36[6] = v26;
          v37 = 2082;
          v38 = v23;
          _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), dumping backtrace:%{public}s", buf, 0x22u);
        }

        free(v23);
        goto LABEL_49;
      }
      if (v25)
      {
        v30 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        v35 = 1024;
        *(_DWORD *)v36 = v22;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v30;
        _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s path_index (%u) >= report->path_count (%u), no backtrace", buf, 0x18u);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v12, type))
      {
        v29 = HIDWORD(v4[5].isa);
        *(_DWORD *)buf = 136446722;
        v34 = "nw_data_transfer_report_get_transport_slow_start_threshold";
        v35 = 1024;
        *(_DWORD *)v36 = v5;
        *(_WORD *)&v36[4] = 1024;
        *(_DWORD *)&v36[6] = v29;
        _os_log_impl(&dword_182FBE000, v12, v28, "%{public}s path_index (%u) >= report->path_count (%u), backtrace limit exceeded", buf, 0x18u);
      }
    }
LABEL_48:

LABEL_49:
    if (v11)
      free(v11);
LABEL_51:
    v8 = 0;
    goto LABEL_13;
  }
  v6 = v4;
  if (HIDWORD(v4[5].isa) <= v5)
  {
    v7 = 0;
  }
  else if (v5)
  {
    v7 = (uint64_t)v6[52].isa + 360 * v5 - 360;
  }
  else
  {
    v7 = (uint64_t)&v6[7];
  }

  v8 = *(_QWORD *)(v7 + 152);
LABEL_13:

  return v8;
}

void sub_183410E6C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_sent_ip_packet_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    isa = (uint64_t)v4[11].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *((_QWORD *)v13 + 4);
        v11 += *((_QWORD *)v13 + 49);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 328);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_ip_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    v6 = 0;
  }
  else if (path_index)
  {
    v6 = (uint64_t)v5[52].isa + 360 * path_index - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(_QWORD *)(v6 + 32);
LABEL_14:

  return isa;
}

void sub_183411464(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_data_transfer_report_get_received_ip_packet_count(nw_data_transfer_report_t report, uint32_t path_index)
{
  NSObject *v3;
  NSObject *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_ip_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_ip_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_received_ip_packet_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (path_index == -1)
  {
    isa = (uint64_t)v4[7].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa += *v13;
        v11 += v13[45];
        v13 += 90;
        v14 -= 2;
      }
      while (v14);
      isa += v11;
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 360);
    do
    {
      isa += *v16;
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_received_ip_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_received_ip_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_received_ip_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= path_index)
  {
    v6 = 0;
  }
  else if (path_index)
  {
    v6 = (uint64_t *)(v5[52] + 360 * (path_index - 1));
  }
  else
  {
    v6 = v5 + 7;
  }

  isa = *v6;
LABEL_14:

  return isa;
}

void sub_183411A5C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_report_resolution_source_t nw_resolution_report_get_source(nw_resolution_report_t resolution_report)
{
  nw_resolution_report_t v1;
  nw_resolution_report_t v2;
  nw_report_resolution_source_t isa_high;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = resolution_report;
  v2 = v1;
  if (v1)
  {
    isa_high = HIDWORD(v1[7].isa);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_get_source";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_source";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_get_source";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_source";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_source";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa_high = nw_report_resolution_source_query;
LABEL_3:

  return isa_high;
}

uint32_t nw_resolution_report_get_endpoint_count(nw_resolution_report_t resolution_report)
{
  nw_resolution_report_t v1;
  nw_resolution_report_t v2;
  uint32_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = resolution_report;
  v2 = v1;
  if (v1)
  {
    isa = (uint32_t)v1[7].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_get_endpoint_count";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_endpoint_count";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_get_endpoint_count";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_endpoint_count";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_endpoint_count";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = 0;
LABEL_3:

  return isa;
}

nw_endpoint_t nw_resolution_report_copy_successful_endpoint(nw_resolution_report_t resolution_report)
{
  nw_resolution_report_t v1;
  nw_resolution_report_t v2;
  NSObject *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = resolution_report;
  v2 = v1;
  if (v1)
  {
    v3 = v1[4].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_copy_successful_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_copy_successful_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_copy_successful_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_copy_successful_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_copy_successful_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

nw_endpoint_t nw_resolution_report_copy_preferred_endpoint(nw_resolution_report_t resolution_report)
{
  nw_resolution_report_t v1;
  nw_resolution_report_t v2;
  NSObject *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = resolution_report;
  v2 = v1;
  if (v1)
  {
    v3 = v1[5].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_copy_preferred_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_copy_preferred_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_copy_preferred_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_copy_preferred_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_copy_preferred_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_resolution_report_enumerate_endpoints(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_resolution_report_enumerate_endpoints";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_resolution_report_enumerate_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_resolution_report_enumerate_endpoints";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_resolution_report_enumerate_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_resolution_report_enumerate_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v6 = (unsigned __int8 *)v3[6];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __nw_resolution_report_enumerate_endpoints_block_invoke;
    v21[3] = &unk_1E14AC278;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_resolution_report_enumerate_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_resolution_report_enumerate_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_resolution_report_enumerate_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_resolution_report_enumerate_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_resolution_report_enumerate_endpoints";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

uint64_t __nw_resolution_report_enumerate_endpoints_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

nw_report_resolution_protocol_t nw_resolution_report_get_protocol(nw_resolution_report_t resolution_report)
{
  nw_resolution_report_t v1;
  nw_resolution_report_t v2;
  nw_report_resolution_protocol_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = resolution_report;
  v2 = v1;
  if (v1)
  {
    isa = (nw_report_resolution_protocol_t)v1[8].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_get_protocol";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_protocol";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_get_protocol";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_protocol";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_protocol";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = nw_report_resolution_protocol_unknown;
LABEL_3:

  return isa;
}

uint64_t nw_resolution_report_received_svcb(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_BYTE *)v1 + 70) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_received_svcb";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_received_svcb";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_received_svcb";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_received_svcb";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_received_svcb";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_resolution_report_get_dns_failure_reason(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = 1;
    switch(*((_WORD *)v1 + 34))
    {
      case 4:
      case 0xF:
        goto LABEL_24;
      case 0x10:
        v3 = 2;
        break;
      case 0x11:
        v3 = 3;
        break;
      default:
        goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_get_dns_failure_reason";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_dns_failure_reason";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_get_dns_failure_reason";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_dns_failure_reason";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_dns_failure_reason";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v5)
    free(v5);
LABEL_23:
  v3 = 0;
LABEL_24:

  return v3;
}

uint64_t nw_resolution_report_get_extended_dns_error_code(void *a1)
{
  unsigned __int16 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[34];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_get_extended_dns_error_code";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_extended_dns_error_code";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_get_extended_dns_error_code";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_extended_dns_error_code";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_extended_dns_error_code";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_resolution_report_get_extended_dns_error_extra_text(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_extended_dns_error_extra_text";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_resolution_report_get_provider_name(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_get_provider_name";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_provider_name";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_get_provider_name";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_provider_name";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_provider_name";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

const char *nw_connection_get_privacy_stance_string(int a1)
{
  if ((a1 - 1) > 4)
    return "Unknown";
  else
    return off_1E149B4A0[a1 - 1];
}

uint64_t __Block_byref_object_copy__7754(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__7755(uint64_t a1)
{

}

void __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke(uint64_t a1, void *a2)
{
  nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), a2);
}

void __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_2(uint64_t a1, void *a2)
{
  id v3;
  nw_endpoint_t v4;
  nw_endpoint_t v5;
  id *v6;
  id v7;
  uint64_t v8;
  void *v9;
  NSObject *v10;
  uint64_t v11;
  int v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v4 = nw_endpoint_handler_copy_endpoint(v3);
  v5 = v4;
  if (v4)
  {
    v6 = v4;
    v7 = v6[15];

    v8 = *(_QWORD *)(a1 + 32);
    v9 = *(void **)(v8 + 48);
    *(_QWORD *)(v8 + 48) = v7;

    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v10 = (id)gLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48);
      v12 = 136446467;
      v13 = "nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_2";
      v14 = 2117;
      v15 = v11;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s Proxied next hops: %{sensitive}@\n", (uint8_t *)&v12, 0x16u);
    }

  }
}

void sub_183413B00(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_138(uint64_t a1)
{
  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 56) = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 504);
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 416), *(id *)(a1 + 32));
}

void nw_connection_access_establishment_report(nw_connection_t connection, dispatch_queue_t queue, nw_establishment_report_access_block_t access_block)
{
  NSObject *v5;
  NSObject *v6;
  nw_establishment_report_access_block_t v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[4];
  NSObject *v29;
  NSObject *v30;
  id v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = connection;
  v6 = queue;
  v7 = access_block;
  v8 = v7;
  if (!v5)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_access_establishment_report";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v10, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_connection_access_establishment_report";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_55:
        if (!v10)
          goto LABEL_5;
LABEL_56:
        free(v10);
        goto LABEL_5;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_54:

    goto LABEL_55;
  }
  if (!v6)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_access_establishment_report";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v10, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null queue", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_182FBE000, v11, v26, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_connection_access_establishment_report";
      v36 = 2082;
      v37 = v20;
      _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!v7)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_access_establishment_report";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v10, &type, &v32))
      goto LABEL_55;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null access_block", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (!v32)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s called with null access_block, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_54;
    }
    v20 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v11, type);
    if (!v20)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_access_establishment_report";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null access_block, no backtrace", buf, 0xCu);
      }
      goto LABEL_54;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_connection_access_establishment_report";
      v36 = 2082;
      v37 = v20;
      _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(v20);
    if (!v10)
      goto LABEL_5;
    goto LABEL_56;
  }
  v28[0] = MEMORY[0x1E0C809B0];
  v28[1] = 3221225472;
  v28[2] = __nw_connection_access_establishment_report_block_invoke;
  v28[3] = &unk_1E14A8D98;
  v29 = v5;
  v30 = v6;
  v31 = v8;
  nw_connection_async_if_needed(v29, v28);

LABEL_5:
}

void sub_183414268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void __nw_connection_access_establishment_report_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  void *v3;
  id v4;
  NSObject *v5;
  id v6;
  id v7;
  _QWORD v8[4];
  id v9;
  id v10;

  v2 = *(_QWORD **)(a1 + 32);
  v3 = (void *)v2[52];
  if (!v3)
  {
    nw_connection_fillout_establishment_report_on_nw_queue(v2, 0);
    v3 = *(void **)(*(_QWORD *)(a1 + 32) + 416);
  }
  v4 = v3;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = __nw_connection_access_establishment_report_block_invoke_2;
  v8[3] = &unk_1E14ACE18;
  v5 = *(NSObject **)(a1 + 40);
  v6 = *(id *)(a1 + 48);
  v9 = v4;
  v10 = v6;
  v7 = v4;
  dispatch_async(v5, v8);

}

uint64_t __nw_connection_access_establishment_report_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

nw_endpoint_t nw_establishment_report_copy_proxy_endpoint(nw_establishment_report_t report)
{
  nw_establishment_report_t v1;
  nw_establishment_report_t v2;
  uint64_t isa;
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = report;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_establishment_report_copy_proxy_endpoint";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v6, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_establishment_report_copy_proxy_endpoint";
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_establishment_report_copy_proxy_endpoint";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_establishment_report_copy_proxy_endpoint";
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v17 = "nw_establishment_report_copy_proxy_endpoint";
          _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v6)
      free(v6);
    goto LABEL_23;
  }
  isa = (uint64_t)v1[5].isa;
  if (!isa || *(_QWORD *)(isa + 24) == *(_QWORD *)(isa + 16))
  {
LABEL_23:
    v4 = 0;
    goto LABEL_24;
  }
  nw_array_get_object_at_index(isa, 0);
  v4 = objc_claimAutoreleasedReturnValue();
LABEL_24:

  return v4;
}

void nw_establishment_report_enumerate_resolutions(nw_establishment_report_t report, nw_report_resolution_enumerator_t enumerate_block)
{
  nw_establishment_report_t v3;
  nw_report_resolution_enumerator_t v4;
  void *v5;
  unsigned __int8 *isa;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = report;
  v4 = enumerate_block;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_establishment_report_enumerate_resolutions";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_resolutions";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_establishment_report_enumerate_resolutions";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_resolutions";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_resolutions";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    isa = (unsigned __int8 *)v3[9].isa;
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_resolutions_block_invoke;
    v21[3] = &unk_1E14AC278;
    v22 = v4;
    nw_array_apply(isa, (uint64_t)v21);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_resolutions";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_resolutions";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_resolutions";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_resolutions";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_resolutions";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

uint64_t __nw_establishment_report_enumerate_resolutions_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void nw_establishment_report_enumerate_protocol_l4s_state(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v6 = (unsigned __int8 *)v3[8];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_protocol_l4s_state_block_invoke;
    v21[3] = &unk_1E14AC278;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_protocol_l4s_state";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

void nw_establishment_report_enumerate_proxied_next_hop_endpoints(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v6 = (unsigned __int8 *)v3[6];
    v21[0] = MEMORY[0x1E0C809B0];
    v21[1] = 3221225472;
    v21[2] = __nw_establishment_report_enumerate_proxied_next_hop_endpoints_block_invoke;
    v21[3] = &unk_1E14AC278;
    v22 = v4;
    nw_array_apply(v6, (uint64_t)v21);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_establishment_report_enumerate_proxied_next_hop_endpoints";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

uint64_t __nw_establishment_report_enumerate_proxied_next_hop_endpoints_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void __nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke_166(uint64_t a1)
{
  _BOOL8 path_report_for_interface_locked;
  _BOOL8 v3;
  void *v4;
  _BOOL8 v5;
  nw_data_transfer_snapshot *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  void *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  path_report_for_interface_locked = nw_data_transfer_report_get_path_report_for_interface_locked(*(void **)(a1 + 32), *(void **)(*(_QWORD *)(a1 + 32) + 32), 0);
  if (!path_report_for_interface_locked)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v8, &type, &v17))
      goto LABEL_36;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
        v11 = "%{public}s called with null ending_path_report";
LABEL_34:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
LABEL_35:

      goto LABEL_36;
    }
    if (!v17)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
        v11 = "%{public}s called with null ending_path_report, backtrace limit exceeded";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    v14 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
        v11 = "%{public}s called with null ending_path_report, no backtrace";
        goto LABEL_34;
      }
      goto LABEL_35;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
      v21 = 2082;
      v22 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null ending_path_report, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
LABEL_36:
    if (!v8)
      return;
    goto LABEL_37;
  }
  v3 = path_report_for_interface_locked;
  nw_data_transfer_update_path_report_end((nw_data_transfer_path_report *)path_report_for_interface_locked, *(nw_data_transfer_snapshot **)(a1 + 48));
  v4 = *(void **)(a1 + 40);
  if (!v4)
  {
    v6 = *(nw_data_transfer_snapshot **)(a1 + 48);
    v5 = v3;
    goto LABEL_6;
  }
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), v4);
  v5 = nw_data_transfer_report_get_path_report_for_interface_locked(*(void **)(a1 + 32), *(void **)(a1 + 40), 1);
  if (v5)
  {
    v6 = *(nw_data_transfer_snapshot **)(a1 + 48);
LABEL_6:
    nw_data_transfer_update_path_report_begin((nw_data_transfer_path_report *)v5, v6);
    return;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (!__nwlog_fault(v8, &type, &v17))
    goto LABEL_36;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
      v11 = "%{public}s called with null beginning_path_report";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  if (!v17)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
      v11 = "%{public}s called with null beginning_path_report, backtrace limit exceeded";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v10 = type;
  v16 = os_log_type_enabled(v9, type);
  if (!v15)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
      v11 = "%{public}s called with null beginning_path_report, no backtrace";
      goto LABEL_34;
    }
    goto LABEL_35;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    v20 = "nw_data_transfer_report_add_snapshot_on_nw_queue_block_invoke";
    v21 = 2082;
    v22 = v15;
    _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null beginning_path_report, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v8)
LABEL_37:
    free(v8);
}

void nw_data_transfer_update_path_report_end(nw_data_transfer_path_report *a1, nw_data_transfer_snapshot *a2)
{
  unint64_t var1;
  unint64_t v5;
  unint64_t v6;
  unint64_t var2;
  unint64_t received_ip_ect1_packet_count;
  unint64_t v9;
  unint64_t var3;
  unint64_t received_ip_ect0_packet_count;
  unint64_t v12;
  unint64_t var4;
  unint64_t received_ip_ce_packet_count;
  unint64_t v15;
  unint64_t var5;
  unint64_t sent_ip_packet_count;
  unint64_t v18;
  unint64_t var6;
  unint64_t received_transport_byte_count;
  unint64_t v21;
  unint64_t var7;
  unint64_t received_transport_duplicate_byte_count;
  unint64_t v24;
  unint64_t var8;
  unint64_t received_transport_out_of_order_byte_count;
  unint64_t v27;
  unint64_t var9;
  unint64_t sent_transport_byte_count;
  unint64_t v30;
  unint64_t var10;
  unint64_t sent_transport_retransmitted_byte_count;
  unint64_t v33;
  unint64_t var11;
  unint64_t sent_transport_ecn_capable_packet_count;
  unint64_t v36;
  unint64_t var12;
  unint64_t sent_transport_ecn_capable_acked_packet_count;
  unint64_t v39;
  unint64_t var13;
  unint64_t sent_transport_ecn_capable_marked_packet_count;
  unint64_t v42;
  unint64_t var14;
  unint64_t sent_transport_ecn_capable_lost_packet_count;
  unint64_t v45;
  unint64_t var21;
  unint64_t received_application_byte_count;
  unint64_t v48;
  unint64_t var22;
  unint64_t sent_application_byte_count;
  void *v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  const char *v55;
  void *v56;
  NSObject *v57;
  char *backtrace_string;
  _BOOL4 v59;
  char *v60;
  _BOOL4 v61;
  char v62;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v65;
  __int16 v66;
  nw_data_transfer_path_report *v67;
  __int16 v68;
  nw_data_transfer_snapshot *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v51 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v65 = "nw_data_transfer_update_path_report_end";
    v52 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v62 = 0;
    if (!__nwlog_fault(v52, &type, &v62))
      goto LABEL_71;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_data_transfer_update_path_report_end";
        v55 = "%{public}s called with null path_report";
LABEL_69:
        _os_log_impl(&dword_182FBE000, v53, v54, v55, buf, 0xCu);
      }
    }
    else if (v62)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      v59 = os_log_type_enabled(v53, type);
      if (backtrace_string)
      {
        if (v59)
        {
          *(_DWORD *)buf = 136446466;
          v65 = "nw_data_transfer_update_path_report_end";
          v66 = 2082;
          v67 = (nw_data_transfer_path_report *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s called with null path_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_71:
        if (!v52)
          return;
LABEL_72:
        free(v52);
        return;
      }
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_data_transfer_update_path_report_end";
        v55 = "%{public}s called with null path_report, no backtrace";
        goto LABEL_69;
      }
    }
    else
    {
      __nwlog_obj();
      v53 = objc_claimAutoreleasedReturnValue();
      v54 = type;
      if (os_log_type_enabled(v53, type))
      {
        *(_DWORD *)buf = 136446210;
        v65 = "nw_data_transfer_update_path_report_end";
        v55 = "%{public}s called with null path_report, backtrace limit exceeded";
        goto LABEL_69;
      }
    }
LABEL_70:

    goto LABEL_71;
  }
  if (a2)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v57 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v65 = "nw_data_transfer_update_path_report_end";
        v66 = 2048;
        v67 = a1;
        v68 = 2048;
        v69 = a2;
        _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEBUG, "%{public}s updating path report %p with ending snapshot %p", buf, 0x20u);
      }

    }
    var1 = a2->var1;
    if (var1 >= a1->total.received_ip_packet_count)
      v5 = a1->total.received_ip_packet_count + var1 - a1->incremental.received_ip_packet_count;
    else
      v5 = 0;
    v6 = 0;
    a1->total.received_ip_packet_count = v5;
    a1->incremental.received_ip_packet_count = 0;
    var2 = a2->var2;
    received_ip_ect1_packet_count = a1->total.received_ip_ect1_packet_count;
    if (var2 >= received_ip_ect1_packet_count)
      v6 = received_ip_ect1_packet_count + var2 - a1->incremental.received_ip_ect1_packet_count;
    v9 = 0;
    a1->total.received_ip_ect1_packet_count = v6;
    a1->incremental.received_ip_ect1_packet_count = 0;
    var3 = a2->var3;
    received_ip_ect0_packet_count = a1->total.received_ip_ect0_packet_count;
    if (var3 >= received_ip_ect0_packet_count)
      v9 = received_ip_ect0_packet_count + var3 - a1->incremental.received_ip_ect0_packet_count;
    v12 = 0;
    a1->total.received_ip_ect0_packet_count = v9;
    a1->incremental.received_ip_ect0_packet_count = 0;
    var4 = a2->var4;
    received_ip_ce_packet_count = a1->total.received_ip_ce_packet_count;
    if (var4 >= received_ip_ce_packet_count)
      v12 = received_ip_ce_packet_count + var4 - a1->incremental.received_ip_ce_packet_count;
    v15 = 0;
    a1->total.received_ip_ce_packet_count = v12;
    a1->incremental.received_ip_ce_packet_count = 0;
    var5 = a2->var5;
    sent_ip_packet_count = a1->total.sent_ip_packet_count;
    if (var5 >= sent_ip_packet_count)
      v15 = sent_ip_packet_count + var5 - a1->incremental.sent_ip_packet_count;
    v18 = 0;
    a1->total.sent_ip_packet_count = v15;
    a1->incremental.sent_ip_packet_count = 0;
    var6 = a2->var6;
    received_transport_byte_count = a1->total.received_transport_byte_count;
    if (var6 >= received_transport_byte_count)
      v18 = received_transport_byte_count + var6 - a1->incremental.received_transport_byte_count;
    v21 = 0;
    a1->total.received_transport_byte_count = v18;
    a1->incremental.received_transport_byte_count = 0;
    var7 = a2->var7;
    received_transport_duplicate_byte_count = a1->total.received_transport_duplicate_byte_count;
    if (var7 >= received_transport_duplicate_byte_count)
      v21 = received_transport_duplicate_byte_count + var7 - a1->incremental.received_transport_duplicate_byte_count;
    v24 = 0;
    a1->total.received_transport_duplicate_byte_count = v21;
    a1->incremental.received_transport_duplicate_byte_count = 0;
    var8 = a2->var8;
    received_transport_out_of_order_byte_count = a1->total.received_transport_out_of_order_byte_count;
    if (var8 >= received_transport_out_of_order_byte_count)
      v24 = received_transport_out_of_order_byte_count
          + var8
          - a1->incremental.received_transport_out_of_order_byte_count;
    v27 = 0;
    a1->total.received_transport_out_of_order_byte_count = v24;
    a1->incremental.received_transport_out_of_order_byte_count = 0;
    var9 = a2->var9;
    sent_transport_byte_count = a1->total.sent_transport_byte_count;
    if (var9 >= sent_transport_byte_count)
      v27 = sent_transport_byte_count + var9 - a1->incremental.sent_transport_byte_count;
    v30 = 0;
    a1->total.sent_transport_byte_count = v27;
    a1->incremental.sent_transport_byte_count = 0;
    var10 = a2->var10;
    sent_transport_retransmitted_byte_count = a1->total.sent_transport_retransmitted_byte_count;
    if (var10 >= sent_transport_retransmitted_byte_count)
      v30 = sent_transport_retransmitted_byte_count + var10 - a1->incremental.sent_transport_retransmitted_byte_count;
    v33 = 0;
    a1->total.sent_transport_retransmitted_byte_count = v30;
    a1->incremental.sent_transport_retransmitted_byte_count = 0;
    var11 = a2->var11;
    sent_transport_ecn_capable_packet_count = a1->total.sent_transport_ecn_capable_packet_count;
    if (var11 >= sent_transport_ecn_capable_packet_count)
      v33 = sent_transport_ecn_capable_packet_count + var11 - a1->incremental.sent_transport_ecn_capable_packet_count;
    v36 = 0;
    a1->total.sent_transport_ecn_capable_packet_count = v33;
    a1->incremental.sent_transport_ecn_capable_packet_count = 0;
    var12 = a2->var12;
    sent_transport_ecn_capable_acked_packet_count = a1->total.sent_transport_ecn_capable_acked_packet_count;
    if (var12 >= sent_transport_ecn_capable_acked_packet_count)
      v36 = sent_transport_ecn_capable_acked_packet_count
          + var12
          - a1->incremental.sent_transport_ecn_capable_acked_packet_count;
    v39 = 0;
    a1->total.sent_transport_ecn_capable_acked_packet_count = v36;
    a1->incremental.sent_transport_ecn_capable_acked_packet_count = 0;
    var13 = a2->var13;
    sent_transport_ecn_capable_marked_packet_count = a1->total.sent_transport_ecn_capable_marked_packet_count;
    if (var13 >= sent_transport_ecn_capable_marked_packet_count)
      v39 = sent_transport_ecn_capable_marked_packet_count
          + var13
          - a1->incremental.sent_transport_ecn_capable_marked_packet_count;
    v42 = 0;
    a1->total.sent_transport_ecn_capable_marked_packet_count = v39;
    a1->incremental.sent_transport_ecn_capable_marked_packet_count = 0;
    var14 = a2->var14;
    sent_transport_ecn_capable_lost_packet_count = a1->total.sent_transport_ecn_capable_lost_packet_count;
    if (var14 >= sent_transport_ecn_capable_lost_packet_count)
      v42 = sent_transport_ecn_capable_lost_packet_count
          + var14
          - a1->incremental.sent_transport_ecn_capable_lost_packet_count;
    v45 = 0;
    a1->total.sent_transport_ecn_capable_lost_packet_count = v42;
    a1->incremental.sent_transport_ecn_capable_lost_packet_count = 0;
    var21 = a2->var21;
    received_application_byte_count = a1->total.received_application_byte_count;
    if (var21 >= received_application_byte_count)
      v45 = received_application_byte_count + var21 - a1->incremental.received_application_byte_count;
    v48 = 0;
    a1->total.received_application_byte_count = v45;
    a1->incremental.received_application_byte_count = 0;
    var22 = a2->var22;
    sent_application_byte_count = a1->total.sent_application_byte_count;
    if (var22 >= sent_application_byte_count)
      v48 = sent_application_byte_count + var22 - a1->incremental.sent_application_byte_count;
    a1->total.sent_application_byte_count = v48;
    a1->incremental.sent_application_byte_count = 0;
    *(_OWORD *)&a1->total.transport_smoothed_rtt_milliseconds = *(_OWORD *)&a2->var15;
    *(_OWORD *)&a1->total.transport_current_rtt_milliseconds = *(_OWORD *)&a2->var17;
    *(_OWORD *)&a1->total.transport_congestion_window = *(_OWORD *)&a2->var19;
    return;
  }
  __nwlog_obj();
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v65 = "nw_data_transfer_update_path_report_end";
  v52 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v62 = 0;
  if (!__nwlog_fault(v52, &type, &v62))
    goto LABEL_71;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v53 = objc_claimAutoreleasedReturnValue();
    v54 = type;
    if (os_log_type_enabled(v53, type))
    {
      *(_DWORD *)buf = 136446210;
      v65 = "nw_data_transfer_update_path_report_end";
      v55 = "%{public}s called with null snapshot";
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  if (!v62)
  {
    __nwlog_obj();
    v53 = objc_claimAutoreleasedReturnValue();
    v54 = type;
    if (os_log_type_enabled(v53, type))
    {
      *(_DWORD *)buf = 136446210;
      v65 = "nw_data_transfer_update_path_report_end";
      v55 = "%{public}s called with null snapshot, backtrace limit exceeded";
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  v60 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v53 = objc_claimAutoreleasedReturnValue();
  v54 = type;
  v61 = os_log_type_enabled(v53, type);
  if (!v60)
  {
    if (v61)
    {
      *(_DWORD *)buf = 136446210;
      v65 = "nw_data_transfer_update_path_report_end";
      v55 = "%{public}s called with null snapshot, no backtrace";
      goto LABEL_69;
    }
    goto LABEL_70;
  }
  if (v61)
  {
    *(_DWORD *)buf = 136446466;
    v65 = "nw_data_transfer_update_path_report_end";
    v66 = 2082;
    v67 = (nw_data_transfer_path_report *)v60;
    _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s called with null snapshot, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v60);
  if (v52)
    goto LABEL_72;
}

void nw_data_transfer_update_path_report_begin(nw_data_transfer_path_report *a1, nw_data_transfer_snapshot *a2)
{
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  void *v9;
  NSObject *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  nw_data_transfer_path_report *v20;
  __int16 v21;
  nw_data_transfer_snapshot *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_data_transfer_update_path_report_begin";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v5, &type, &v15))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_data_transfer_update_path_report_begin";
        v8 = "%{public}s called with null path_report";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      v12 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_data_transfer_update_path_report_begin";
          v19 = 2082;
          v20 = (nw_data_transfer_path_report *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null path_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v5)
          return;
LABEL_39:
        free(v5);
        return;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_data_transfer_update_path_report_begin";
        v8 = "%{public}s called with null path_report, no backtrace";
        goto LABEL_36;
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_data_transfer_update_path_report_begin";
        v8 = "%{public}s called with null path_report, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (a2)
  {
    if (gLogDatapath)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v18 = "nw_data_transfer_update_path_report_begin";
        v19 = 2048;
        v20 = a1;
        v21 = 2048;
        v22 = a2;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s updating path report %p with beginning snapshot %p", buf, 0x20u);
      }

    }
    *(_OWORD *)&a1->incremental.received_ip_packet_count = *(_OWORD *)&a2->var1;
    *(_OWORD *)&a1->incremental.received_ip_ect0_packet_count = *(_OWORD *)&a2->var3;
    *(_OWORD *)&a1->incremental.sent_ip_packet_count = *(_OWORD *)&a2->var5;
    *(_OWORD *)&a1->incremental.received_transport_duplicate_byte_count = *(_OWORD *)&a2->var7;
    *(_OWORD *)&a1->incremental.sent_transport_byte_count = *(_OWORD *)&a2->var9;
    *(_OWORD *)&a1->incremental.sent_transport_ecn_capable_packet_count = *(_OWORD *)&a2->var11;
    *(_OWORD *)&a1->incremental.sent_transport_ecn_capable_marked_packet_count = *(_OWORD *)&a2->var13;
    *(_OWORD *)&a1->incremental.received_application_byte_count = *(_OWORD *)&a2->var21;
    *(_OWORD *)&a1->total.transport_smoothed_rtt_milliseconds = *(_OWORD *)&a2->var15;
    *(_OWORD *)&a1->total.transport_current_rtt_milliseconds = *(_OWORD *)&a2->var17;
    *(_OWORD *)&a1->total.transport_congestion_window = *(_OWORD *)&a2->var19;
    return;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_data_transfer_update_path_report_begin";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v5, &type, &v15))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "nw_data_transfer_update_path_report_begin";
      v8 = "%{public}s called with null snapshot";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (!v15)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v18 = "nw_data_transfer_update_path_report_begin";
      v8 = "%{public}s called with null snapshot, backtrace limit exceeded";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  v13 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = type;
  v14 = os_log_type_enabled(v6, type);
  if (!v13)
  {
    if (v14)
    {
      *(_DWORD *)buf = 136446210;
      v18 = "nw_data_transfer_update_path_report_begin";
      v8 = "%{public}s called with null snapshot, no backtrace";
      goto LABEL_36;
    }
    goto LABEL_37;
  }
  if (v14)
  {
    *(_DWORD *)buf = 136446466;
    v18 = "nw_data_transfer_update_path_report_begin";
    v19 = 2082;
    v20 = (nw_data_transfer_path_report *)v13;
    _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null snapshot, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v13);
  if (v5)
    goto LABEL_39;
}

BOOL nw_data_transfer_report_get_path_report_for_interface_locked(void *a1, void *a2, int a3)
{
  void **v5;
  id v6;
  void *v7;
  void **v8;
  uint64_t v9;
  NSObject *v10;
  unsigned __int8 *v11;
  int v12;
  const char *v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;
  int radio_type;
  NSObject *v18;
  _BOOL4 v19;
  int v20;
  const char *v21;
  NSObject *v22;
  uint32_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  const char *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  const char *v36;
  os_log_type_t v37;
  const char *v38;
  os_log_type_t v39;
  const char *v40;
  char *v41;
  NSObject *v42;
  int v43;
  int v44;
  int v45;
  unsigned int v46;
  unsigned int v47;
  size_t v48;
  void *v49;
  size_t v50;
  char *v51;
  int v52;
  NSObject *v53;
  int v54;
  const char *v55;
  void *v56;
  NSObject *v57;
  int v58;
  int v59;
  void *v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  char *backtrace_string;
  os_log_type_t v65;
  _BOOL4 v66;
  void *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  os_log_type_t v71;
  char *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  _BOOL8 result;
  NSObject *v76;
  void *v77;
  NSObject *v78;
  void *v79;
  NSObject *v80;
  void *v81;
  NSObject *v82;
  void *v83;
  void *v84;
  os_log_type_t v85;
  os_log_type_t v86;
  char *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  os_log_type_t v90;
  char v91;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v94;
  __int16 v95;
  const char *v96;
  __int16 v97;
  _BYTE v98[10];
  const char *v99;
  __int16 v100;
  char *v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
    v61 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (__nwlog_fault(v61, &type, &v91))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v62 = objc_claimAutoreleasedReturnValue();
        v63 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v91)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v62 = objc_claimAutoreleasedReturnValue();
        v65 = type;
        v66 = os_log_type_enabled(v62, type);
        if (backtrace_string)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446466;
            v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
            v95 = 2082;
            v96 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v62, v65, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_100;
        }
        if (v66)
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          _os_log_impl(&dword_182FBE000, v62, v65, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v62 = objc_claimAutoreleasedReturnValue();
        v71 = type;
        if (os_log_type_enabled(v62, type))
        {
          *(_DWORD *)buf = 136446210;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          _os_log_impl(&dword_182FBE000, v62, v71, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_100:
    if (v61)
      free(v61);
    goto LABEL_102;
  }
  if (*((_DWORD *)v5 + 11))
  {
    v8 = v5 + 51;
    if (!v6)
      goto LABEL_6;
    if (!*v8)
    {
      v9 = (uint64_t)(v5 + 7);
      goto LABEL_9;
    }
    if (nw_interface_deep_compare(*v8, v6))
    {
LABEL_6:
      v9 = (uint64_t)(v5 + 7);
      if (v5[51])
      {
LABEL_10:
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          if (v7)
          {
            v11 = v7;
            v12 = v11[84];

            v13 = nw_interface_radio_type_to_string(v12);
          }
          else
          {
            v13 = "none";
          }
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          v95 = 2048;
          v96 = (const char *)v9;
          v97 = 2112;
          *(_QWORD *)v98 = v7;
          *(_WORD *)&v98[8] = 2080;
          v99 = v13;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s found path report %p for interface %@[%s]", buf, 0x2Au);
        }

        goto LABEL_103;
      }
LABEL_9:
      objc_storeStrong(v5 + 51, a2);
      goto LABEL_10;
    }
    if (*((_DWORD *)v5 + 11) >= 2u)
    {
      v14 = 1;
      v15 = 352;
      while (!nw_interface_deep_compare(*(void **)((char *)v5[52] + v15), v7))
      {
        ++v14;
        v15 += 360;
        if (v14 >= *((unsigned int *)v5 + 11))
          goto LABEL_23;
      }
      v16 = v5[52];
      if (v16)
      {
        v9 = (uint64_t)v16 + 360 * v14 - 360;
        goto LABEL_10;
      }
    }
  }
LABEL_23:
  if (!a3)
  {
LABEL_102:
    v9 = 0;
LABEL_103:

    return v9;
  }
  radio_type = nw_interface_get_radio_type(v7);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v18 = (id)gLogObj;
  v19 = os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG);
  if (radio_type)
  {
    if (v19)
    {
      v20 = nw_interface_get_radio_type(v7);
      *(_DWORD *)buf = 136446722;
      v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
      v95 = 2112;
      v96 = (const char *)v7;
      v97 = 2080;
      *(_QWORD *)v98 = nw_interface_radio_type_to_string(v20);
      v21 = "%{public}s did not find path report for interface %@[%s], creating";
      v22 = v18;
      v23 = 32;
LABEL_29:
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, v21, buf, v23);
    }
  }
  else if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
    v95 = 2112;
    v96 = (const char *)v7;
    v21 = "%{public}s did not find path report for interface %@, creating";
    v22 = v18;
    v23 = 22;
    goto LABEL_29;
  }

  v24 = *((unsigned int *)v5 + 11) + 1;
  v25 = v24 << 31 >> 31;
  *((_DWORD *)v5 + 11) = v24;
  if (v25 != v24 || v25 < 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    v27 = (const char *)*((unsigned int *)v5 + 11);
    *(_DWORD *)buf = 136446978;
    v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
    v95 = 2082;
    v96 = "report->path_count";
    v97 = 2048;
    *(_QWORD *)v98 = 1;
    *(_WORD *)&v98[8] = 2048;
    v99 = v27;
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (__nwlog_fault(v28, &type, &v91))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          v31 = (const char *)*((unsigned int *)v5 + 11);
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          v95 = 2082;
          v96 = "report->path_count";
          v97 = 2048;
          *(_QWORD *)v98 = 1;
          *(_WORD *)&v98[8] = 2048;
          v99 = v31;
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s Overflow: %{public}s, increment %llu, result %llu", buf, 0x2Au);
        }
      }
      else if (v91)
      {
        v32 = __nw_create_backtrace_string();
        if (v32)
        {
          v33 = (char *)v32;
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v34 = (id)gLogObj;
          v35 = type;
          if (os_log_type_enabled(v34, type))
          {
            v36 = (const char *)*((unsigned int *)v5 + 11);
            *(_DWORD *)buf = 136447234;
            v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
            v95 = 2082;
            v96 = "report->path_count";
            v97 = 2048;
            *(_QWORD *)v98 = 1;
            *(_WORD *)&v98[8] = 2048;
            v99 = v36;
            v100 = 2082;
            v101 = v33;
            _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s Overflow: %{public}s, increment %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
          }

          free(v33);
          if (!v28)
            goto LABEL_51;
          goto LABEL_50;
        }
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v39 = type;
        if (os_log_type_enabled(v29, type))
        {
          v40 = (const char *)*((unsigned int *)v5 + 11);
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          v95 = 2082;
          v96 = "report->path_count";
          v97 = 2048;
          *(_QWORD *)v98 = 1;
          *(_WORD *)&v98[8] = 2048;
          v99 = v40;
          _os_log_impl(&dword_182FBE000, v29, v39, "%{public}s Overflow: %{public}s, increment %llu, result %llu, no backtrace", buf, 0x2Au);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v29 = (id)gLogObj;
        v37 = type;
        if (os_log_type_enabled(v29, type))
        {
          v38 = (const char *)*((unsigned int *)v5 + 11);
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          v95 = 2082;
          v96 = "report->path_count";
          v97 = 2048;
          *(_QWORD *)v98 = 1;
          *(_WORD *)&v98[8] = 2048;
          v99 = v38;
          _os_log_impl(&dword_182FBE000, v29, v37, "%{public}s Overflow: %{public}s, increment %llu, result %llu, backtrace limit exceeded", buf, 0x2Au);
        }
      }

    }
    if (!v28)
    {
LABEL_51:
      *((_DWORD *)v5 + 11) = -1;
      goto LABEL_52;
    }
LABEL_50:
    free(v28);
    goto LABEL_51;
  }
LABEL_52:
  v41 = v5;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v42 = (id)gLogObj;
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEBUG))
  {
    v43 = *((_DWORD *)v5 + 11);
    v44 = *((_DWORD *)v41 + 12);
    *(_DWORD *)buf = 136446978;
    v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
    v95 = 2048;
    v96 = v41;
    v97 = 1024;
    *(_DWORD *)v98 = v43;
    *(_WORD *)&v98[4] = 1024;
    *(_DWORD *)&v98[6] = v44;
    _os_log_impl(&dword_182FBE000, v42, OS_LOG_TYPE_DEBUG, "%{public}s report %p path_count %u, allocated_path_count %u", buf, 0x22u);
  }

  v45 = *((_DWORD *)v5 + 11);
  if (!v45)
  {
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
    v68 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v68, &type, &v91))
      goto LABEL_134;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v70 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null report->path_count", buf, 0xCu);
      }
    }
    else if (v91)
    {
      v72 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v73 = type;
      v74 = os_log_type_enabled(v69, type);
      if (v72)
      {
        if (v74)
        {
          *(_DWORD *)buf = 136446466;
          v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
          v95 = 2082;
          v96 = v72;
          _os_log_impl(&dword_182FBE000, v69, v73, "%{public}s called with null report->path_count, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v72);
LABEL_134:
        if (!v68)
          goto LABEL_61;
        goto LABEL_135;
      }
      if (v74)
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_182FBE000, v69, v73, "%{public}s called with null report->path_count, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v86 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_182FBE000, v69, v86, "%{public}s called with null report->path_count, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_133:

    goto LABEL_134;
  }
  v46 = v45 - 1;
  v47 = *((_DWORD *)v41 + 12);
  if (v46 <= v47)
    goto LABEL_60;
  v48 = v47 + 4;
  *((_DWORD *)v41 + 12) = v48;
  v49 = (void *)*((_QWORD *)v41 + 52);
  if (!v49)
  {
    if (v47 == -4)
    {
      __nwlog_obj();
      v80 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v80, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v94 = "strict_calloc";
      v81 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v81);
      if (result)
        goto LABEL_136;
      free(v81);
    }
    v56 = malloc_type_calloc(v48, 0x168uLL, 0xEAFB8F1AuLL);
    if (v56)
    {
      *((_QWORD *)v41 + 52) = v56;
      if (gLogDatapath)
        goto LABEL_71;
LABEL_61:

      v52 = *((_DWORD *)v5 + 11);
      if (v52 == 1)
        v9 = (uint64_t)(v41 + 56);
      else
        v9 = *((_QWORD *)v41 + 52) + 360 * (v52 - 2);
      objc_storeStrong((id *)(v9 + 352), a2);
      if (gLogDatapath)
      {
        __nwlog_obj();
        v53 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEBUG))
        {
          v54 = nw_interface_get_radio_type(v7);
          v55 = nw_interface_radio_type_to_string(v54);
          *(_DWORD *)buf = 136446978;
          v94 = "nw_data_transfer_report_get_path_report_for_interface_locked";
          v95 = 2048;
          v96 = (const char *)v9;
          v97 = 2112;
          *(_QWORD *)v98 = v7;
          *(_WORD *)&v98[8] = 2080;
          v99 = v55;
          _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_DEBUG, "%{public}s created path report %p for interface %@[%s]", buf, 0x2Au);
        }

      }
      goto LABEL_103;
    }
    __nwlog_obj();
    v82 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v82, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v94 = "strict_calloc";
    v95 = 2048;
    v96 = (const char *)v48;
    v97 = 2048;
    *(_QWORD *)v98 = 360;
    v83 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v83);
    if (result)
      goto LABEL_136;
    free(v83);
    *((_QWORD *)v41 + 52) = 0;
    __nwlog_obj();
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
    v68 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v91 = 0;
    if (!__nwlog_fault(v68, &type, &v91))
      goto LABEL_134;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v85 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_182FBE000, v69, v85, "%{public}s called with null report->secondary_paths", buf, 0xCu);
      }
    }
    else if (v91)
    {
      v87 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v88 = type;
      v89 = os_log_type_enabled(v69, type);
      if (v87)
      {
        if (v89)
        {
          *(_DWORD *)buf = 136446466;
          v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
          v95 = 2082;
          v96 = v87;
          _os_log_impl(&dword_182FBE000, v69, v88, "%{public}s called with null report->secondary_paths, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v87);
        if (!v68)
          goto LABEL_61;
LABEL_135:
        free(v68);
        goto LABEL_61;
      }
      if (v89)
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_182FBE000, v69, v88, "%{public}s called with null report->secondary_paths, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v90 = type;
      if (os_log_type_enabled(v69, type))
      {
        *(_DWORD *)buf = 136446210;
        v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
        _os_log_impl(&dword_182FBE000, v69, v90, "%{public}s called with null report->secondary_paths, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_133;
  }
  if (v47 == -4)
  {
    __nwlog_obj();
    v76 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v94 = "_strict_reallocf";
    v77 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v77);
    if (result)
      goto LABEL_136;
    free(v77);
    v49 = (void *)*((_QWORD *)v41 + 52);
  }
  v50 = 360 * v48;
  v51 = (char *)reallocf(v49, v50);
  if (v51)
  {
LABEL_59:
    *((_QWORD *)v41 + 52) = v51;
    bzero(&v51[360 * (*((_DWORD *)v41 + 12) - 4)], 0x5A0uLL);
LABEL_60:
    if (!gLogDatapath)
      goto LABEL_61;
LABEL_71:
    __nwlog_obj();
    v57 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      v58 = *((_DWORD *)v5 + 11);
      v59 = *((_DWORD *)v41 + 12);
      *(_DWORD *)buf = 136446978;
      v94 = "nw_data_transfer_report_allocate_additional_path_reports_if_necessary_locked";
      v95 = 2048;
      v96 = v41;
      v97 = 1024;
      *(_DWORD *)v98 = v58;
      *(_WORD *)&v98[4] = 1024;
      *(_DWORD *)&v98[6] = v59;
      _os_log_impl(&dword_182FBE000, v57, OS_LOG_TYPE_DEBUG, "%{public}s report %p after adding path, path_count %u, allocated_path_count %u", buf, 0x22u);
    }

    goto LABEL_61;
  }
  __nwlog_obj();
  v78 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v94 = "_strict_reallocf";
  v95 = 2048;
  v96 = (const char *)v50;
  v79 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v79);
  if (!result)
  {
    free(v79);
    goto LABEL_59;
  }
LABEL_136:
  __break(1u);
  return result;
}

void sub_183417734(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_data_transfer_report_collect_inner(void *a1, void *a2, void *a3, int a4)
{
  os_unfair_lock_s *v7;
  NSObject *v8;
  id v9;
  void (**v10)(_QWORD, _QWORD);
  uint64_t v11;
  os_unfair_lock_s *v12;
  void (**v13)(_QWORD);
  uint64_t v14;
  void *v15;
  id *v16;
  id *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  NSObject *v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  _QWORD v27[4];
  os_unfair_lock_s *v28;
  NSObject *v29;
  _QWORD v30[2];
  char v31;
  _QWORD block[4];
  os_unfair_lock_s *v33;
  void (**v34)(_QWORD, _QWORD);
  _QWORD aBlock[4];
  os_unfair_lock_s *v36;
  uint64_t *v37;
  uint64_t *v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char v47;
  _BYTE buf[24];
  uint64_t (*v49)(uint64_t, uint64_t);
  void (*v50)(uint64_t);
  id v51;
  uint64_t v52;

  v52 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = (void (**)(_QWORD, _QWORD))v9;
  if (!v9 || v8 || (a4 & 1) != 0)
  {
    if (!v9 && gLogDatapath)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_data_transfer_report_collect_inner";
        _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_DEBUG, "%{public}s called without collect_block", buf, 0xCu);
      }

    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v49 = __Block_byref_object_copy__7754;
    v50 = __Block_byref_object_dispose__7755;
    v51 = 0;
    v44 = 0;
    v45 = &v44;
    v46 = 0x2020000000;
    v47 = 0;
    v40 = 0;
    v41 = &v40;
    v42 = 0x2020000000;
    v43 = 0;
    v11 = MEMORY[0x1E0C809B0];
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke;
    aBlock[3] = &unk_1E149DD80;
    v12 = v7;
    v36 = v12;
    v37 = &v40;
    v38 = &v44;
    v39 = buf;
    v13 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v7 + 10);
    v13[2](v13);
    os_unfair_lock_unlock(v7 + 10);

    if (*((_BYTE *)v41 + 24))
    {
      if (!v10)
      {
LABEL_16:

        _Block_object_dispose(&v40, 8);
        _Block_object_dispose(&v44, 8);
        _Block_object_dispose(buf, 8);

        goto LABEL_17;
      }
      if (a4)
      {
        ((void (**)(_QWORD, os_unfair_lock_s *))v10)[2](v10, v12);
        goto LABEL_16;
      }
      block[0] = v11;
      block[1] = 3221225472;
      block[2] = ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_209;
      block[3] = &unk_1E14ACE18;
      v16 = (id *)&v34;
      v34 = v10;
      v17 = (id *)&v33;
      v33 = v12;
      dispatch_async(v8, block);
    }
    else
    {
      if (!*((_BYTE *)v45 + 24))
        goto LABEL_16;
      v14 = *(_QWORD *)(*(_QWORD *)&buf[8] + 40);
      if (!v14)
        goto LABEL_16;
      v15 = *(void **)(v14 + 24);
      if (!v15)
        goto LABEL_16;
      v27[0] = v11;
      v27[1] = 3221225472;
      v27[2] = ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_2;
      v27[3] = &unk_1E149B398;
      v28 = v12;
      v30[1] = buf;
      v30[0] = v10;
      v31 = a4;
      v29 = v8;
      nw_queue_context_async_if_needed(v15, v27);

      v16 = (id *)&v28;
      v17 = (id *)v30;
    }

    goto LABEL_16;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_data_transfer_report_collect_inner";
  v19 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v44) = 16;
  LOBYTE(v40) = 0;
  if (__nwlog_fault(v19, &v44, &v40))
  {
    if (v44 == 17)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = v44;
      if (os_log_type_enabled(v20, (os_log_type_t)v44))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_data_transfer_report_collect_inner";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null queue", buf, 0xCu);
      }
    }
    else if ((_BYTE)v40)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v24 = v44;
      v25 = os_log_type_enabled(v20, (os_log_type_t)v44);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_data_transfer_report_collect_inner";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v24, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_37;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_data_transfer_report_collect_inner";
        _os_log_impl(&dword_182FBE000, v20, v24, "%{public}s called with null queue, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v26 = v44;
      if (os_log_type_enabled(v20, (os_log_type_t)v44))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_data_transfer_report_collect_inner";
        _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_37:
  if (v19)
    free(v19);
LABEL_17:

}

void sub_183417C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;

  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v40 - 192), 8);
  _Block_object_dispose((const void *)(v40 - 160), 8);

  _Unwind_Resume(a1);
}

void ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  NSObject *v5;
  NSObject *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  NSObject *v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  if (*(_DWORD *)(v2 + 52) == 2)
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    return;
  }
  *(_BYTE *)(v2 + 424) |= 1u;
  *(_BYTE *)(*(_QWORD *)(a1[6] + 8) + 24) = 1;
  v3 = a1[4];
  if (*(_QWORD *)(v3 + 24))
    goto LABEL_23;
  v4 = *(_BYTE *)(v3 + 424);
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  v6 = v5;
  if ((v4 & 1) == 0)
  {
    os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v19 = "nw_data_transfer_report_collect_inner_block_invoke";
    v7 = (void *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v7))
    {
LABEL_22:
      free(v7);
      goto LABEL_23;
    }
    __break(1u);
  }
  *(_DWORD *)buf = 136446210;
  v19 = "nw_data_transfer_report_collect_inner_block_invoke";
  v7 = (void *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault((const char *)v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v8 = (id)gLogObj;
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_data_transfer_report_collect_inner_block_invoke";
        v10 = "%{public}s Report's (not in progress) associated connection unexpectedly nil";
LABEL_18:
        v14 = v8;
        v15 = v9;
LABEL_19:
        _os_log_impl(&dword_182FBE000, v14, v15, v10, buf, 0xCu);
        goto LABEL_20;
      }
      goto LABEL_20;
    }
    if (!v16)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_data_transfer_report_collect_inner_block_invoke";
        v10 = "%{public}s Report's (not in progress) associated connection unexpectedly nil, backtrace limit exceeded";
        goto LABEL_18;
      }
LABEL_20:

      goto LABEL_21;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    v12 = type;
    v13 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_data_transfer_report_collect_inner_block_invoke";
      v10 = "%{public}s Report's (not in progress) associated connection unexpectedly nil, no backtrace";
      v14 = v8;
      v15 = v12;
      goto LABEL_19;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_data_transfer_report_collect_inner_block_invoke";
      v20 = 2082;
      v21 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s Report's (not in progress) associated connection unexpectedly nil, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
  }
LABEL_21:
  if (v7)
    goto LABEL_22;
LABEL_23:
  objc_storeStrong((id *)(*(_QWORD *)(a1[7] + 8) + 40), *(id *)(a1[4] + 24));
}

uint64_t ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_209(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_2(uint64_t a1)
{
  os_unfair_lock_s *v2;
  uint64_t v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  _QWORD *v12;
  void *v13;
  id v14;
  os_unfair_lock_s *v15;
  void (**v16)(_QWORD);
  NSObject *v17;
  void (**v18)(_QWORD, _QWORD);
  NSObject *v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  uint64_t v28;
  char *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  char *backtrace_string;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  os_log_type_t v36;
  _QWORD block[4];
  id v38;
  void (**v39)(_QWORD, _QWORD);
  _QWORD v40[4];
  os_unfair_lock_s *v41;
  _QWORD aBlock[4];
  os_unfair_lock_s *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  char v48;
  char v49;
  os_log_type_t v50;
  _BYTE buf[24];
  void *v52;
  id v53;
  id v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v45 = 0;
  v46 = &v45;
  v47 = 0x2020000000;
  v48 = 1;
  v2 = *(os_unfair_lock_s **)(a1 + 32);
  v3 = MEMORY[0x1E0C809B0];
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_3;
  aBlock[3] = &unk_1E14ACE40;
  v43 = v2;
  v44 = &v45;
  v4 = (void (**)(_QWORD))_Block_copy(aBlock);
  v2 += 10;
  os_unfair_lock_lock(v2);
  v4[2](v4);
  os_unfair_lock_unlock(v2);

  if (*((_BYTE *)v46 + 24))
  {
    v5 = mach_continuous_time();
    if (v5 <= 1)
      v6 = 1;
    else
      v6 = v5;
    if (gLogDatapath)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
      {
        v21 = *(_QWORD *)(a1 + 32);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_data_transfer_report_collect_inner_block_invoke_2";
        *(_WORD *)&buf[12] = 2048;
        *(_QWORD *)&buf[14] = v21;
        _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s report %p adding collecting snapshot", buf, 0x16u);
      }

    }
    nw_data_transfer_report_add_snapshot_on_nw_queue(*(void **)(a1 + 32));
    v7 = *(_QWORD **)(a1 + 32);
    v8 = v7[1];
    if (v8)
    {
      v9 = nw_delta_nanos(v8, v6);
      v10 = (v9 / 0xF4240);
      if (v9 > 0xF423FFFFFFFFFLL)
        v10 = 0xFFFFFFFFLL;
      *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16) = v10;
      v7 = *(_QWORD **)(a1 + 32);
    }
    v11 = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    v12 = v7;
    v13 = v12;
    if (v11)
    {
      if (v12)
      {
        *(_QWORD *)buf = v3;
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nw_connection_remove_data_transfer_report_block_invoke;
        v52 = &unk_1E14ACE68;
        v14 = v11;
        v53 = v14;
        v54 = v13;
        nw_connection_async_if_needed(v14, buf);

LABEL_13:
        v15 = *(os_unfair_lock_s **)(a1 + 32);
        v40[0] = v3;
        v40[1] = 3221225472;
        v40[2] = ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_210;
        v40[3] = &unk_1E14ACFD0;
        v41 = v15;
        v16 = (void (**)(_QWORD))_Block_copy(v40);
        v15 += 10;
        os_unfair_lock_lock(v15);
        v16[2](v16);
        os_unfair_lock_unlock(v15);

        v17 = v41;
LABEL_14:

        goto LABEL_16;
      }
      __nwlog_obj();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
      v23 = (char *)_os_log_send_and_compose_impl();

      v50 = OS_LOG_TYPE_ERROR;
      v49 = 0;
      if (!__nwlog_fault(v23, &v50, &v49))
        goto LABEL_59;
      if (v50 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = v50;
        if (os_log_type_enabled(v24, v50))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v49)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v33 = v50;
        v34 = os_log_type_enabled(v24, v50);
        if (backtrace_string)
        {
          if (v34)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v33, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v23)
            goto LABEL_13;
          goto LABEL_60;
        }
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
          _os_log_impl(&dword_182FBE000, v24, v33, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v36 = v50;
        if (os_log_type_enabled(v24, v50))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
          _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }
    else
    {
      __nwlog_obj();
      v22 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
      v23 = (char *)_os_log_send_and_compose_impl();

      v50 = OS_LOG_TYPE_ERROR;
      v49 = 0;
      if (!__nwlog_fault(v23, &v50, &v49))
        goto LABEL_59;
      if (v50 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = v50;
        if (os_log_type_enabled(v24, v50))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v49)
      {
        v29 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v30 = v50;
        v31 = os_log_type_enabled(v24, v50);
        if (v29)
        {
          if (v31)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v29;
            _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v29);
LABEL_59:
          if (!v23)
            goto LABEL_13;
LABEL_60:
          free(v23);
          goto LABEL_13;
        }
        if (v31)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
          _os_log_impl(&dword_182FBE000, v24, v30, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v35 = v50;
        if (os_log_type_enabled(v24, v50))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_remove_data_transfer_report";
          _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }
    }

    goto LABEL_59;
  }
  if (gLogDatapath)
  {
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v28 = *(_QWORD *)(a1 + 32);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_data_transfer_report_collect_inner_block_invoke_2";
      *(_WORD *)&buf[12] = 2048;
      *(_QWORD *)&buf[14] = v28;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s report %p already collected, delivering", buf, 0x16u);
    }
    goto LABEL_14;
  }
LABEL_16:
  v18 = *(void (***)(_QWORD, _QWORD))(a1 + 48);
  if (v18)
  {
    if (*(_BYTE *)(a1 + 64))
    {
      v18[2](v18, *(_QWORD *)(a1 + 32));
    }
    else
    {
      v19 = *(NSObject **)(a1 + 40);
      block[0] = v3;
      block[1] = 3221225472;
      block[2] = ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_211;
      block[3] = &unk_1E14ACE18;
      v39 = v18;
      v38 = *(id *)(a1 + 32);
      dispatch_async(v19, block);

    }
  }

  _Block_object_dispose(&v45, 8);
}

void sub_18341887C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,char a30)
{

  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_3(uint64_t result)
{
  uint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (*(_DWORD *)(v1 + 52) == 2 && (*(_BYTE *)(v1 + 424) & 1) == 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = 0;
  return result;
}

void ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_210(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 24);
  *(_QWORD *)(v2 + 24) = 0;

  *(_DWORD *)(*(_QWORD *)(a1 + 32) + 52) = 2;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 424) &= ~1u;
}

uint64_t ___ZL37nw_data_transfer_report_collect_innerP34NWConcrete_nw_data_transfer_reportPU28objcproto17OS_dispatch_queue8NSObjectU13block_pointerFvS0_Eb_block_invoke_211(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

Class nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count(void *a1, unsigned int a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  Class isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (a2 == -1)
  {
    isa = v4[17].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa = (Class)((char *)isa + *((_QWORD *)v13 + 10));
        v11 += *((_QWORD *)v13 + 55);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa = (Class)((char *)isa + v11);
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 280);
    do
    {
      isa = (Class)((char *)isa + *v16);
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= a2)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= a2)
  {
    v6 = 0;
  }
  else if (a2)
  {
    v6 = (uint64_t)v5[52].isa + 360 * a2 - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(Class *)(v6 + 80);
LABEL_14:

  return isa;
}

void sub_183418F48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

Class nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count(void *a1, unsigned int a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  Class isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (a2 == -1)
  {
    isa = v4[18].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa = (Class)((char *)isa + *((_QWORD *)v13 + 11));
        v11 += *((_QWORD *)v13 + 56);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa = (Class)((char *)isa + v11);
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 272);
    do
    {
      isa = (Class)((char *)isa + *v16);
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= a2)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_acked_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= a2)
  {
    v6 = 0;
  }
  else if (a2)
  {
    v6 = (uint64_t)v5[52].isa + 360 * a2 - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(Class *)(v6 + 88);
LABEL_14:

  return isa;
}

void sub_183419540(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

Class nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count(void *a1, unsigned int a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  Class isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (a2 == -1)
  {
    isa = v4[19].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa = (Class)((char *)isa + *((_QWORD *)v13 + 12));
        v11 += *((_QWORD *)v13 + 57);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa = (Class)((char *)isa + v11);
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 264);
    do
    {
      isa = (Class)((char *)isa + *v16);
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= a2)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_marked_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= a2)
  {
    v6 = 0;
  }
  else if (a2)
  {
    v6 = (uint64_t)v5[52].isa + 360 * a2 - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(Class *)(v6 + 96);
LABEL_14:

  return isa;
}

void sub_183419B38(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

Class nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count(void *a1, unsigned int a2)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  Class isa;
  uint64_t isa_high;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  Class v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null report", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v25, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_44;
  }
  if (nw_data_transfer_report_get_state(v3) != nw_data_transfer_report_state_collected)
  {
    __nwlog_obj();
    v21 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_ERROR, "%{public}s Cannot retrieve data report values until collected", buf, 0xCu);
    }

    goto LABEL_59;
  }
  if (a2 == -1)
  {
    isa = v4[20].isa;
    isa_high = HIDWORD(v4[5].isa);
    if (isa_high < 2)
      goto LABEL_14;
    if ((_DWORD)isa_high == 2)
    {
      v9 = 1;
    }
    else
    {
      v11 = 0;
      v12 = isa_high - 1;
      v13 = v4[52].isa;
      v14 = (isa_high - 1) & 0xFFFFFFFFFFFFFFFELL;
      do
      {
        isa = (Class)((char *)isa + *((_QWORD *)v13 + 13));
        v11 += *((_QWORD *)v13 + 58);
        v13 = (Class)((char *)v13 + 720);
        v14 -= 2;
      }
      while (v14);
      isa = (Class)((char *)isa + v11);
      if (v12 == ((isa_high - 1) & 0xFFFFFFFFFFFFFFFELL))
        goto LABEL_14;
      v9 = v12 | 1;
    }
    v15 = isa_high - v9;
    v16 = (_QWORD *)((char *)v4[52].isa + 360 * v9 - 256);
    do
    {
      isa = (Class)((char *)isa + *v16);
      v16 += 45;
      --v15;
    }
    while (v15);
    goto LABEL_14;
  }
  if (HIDWORD(v4[5].isa) <= a2)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v23, "%{public}s called with null (path_index < report->path_count)", buf, 0xCu);
      }
LABEL_56:

LABEL_57:
      if (v18)
        free(v18);
LABEL_59:
      isa = 0;
      goto LABEL_14;
    }
    if (!v31)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null (path_index < report->path_count), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v27 = type;
    v28 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v28)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_data_transfer_report_get_sent_transport_ecn_capable_lost_packet_count";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null (path_index < report->path_count), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_44:

    free(backtrace_string);
    goto LABEL_57;
  }
  v5 = v4;
  if (HIDWORD(v4[5].isa) <= a2)
  {
    v6 = 0;
  }
  else if (a2)
  {
    v6 = (uint64_t)v5[52].isa + 360 * a2 - 360;
  }
  else
  {
    v6 = (uint64_t)&v5[7];
  }

  isa = *(Class *)(v6 + 104);
LABEL_14:

  return isa;
}

void sub_18341A130(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_copy_dictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;

  v4 = (void *)objc_msgSend(a3, "copyDictionary");
  xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v4);

  return 1;
}

void sub_18341A180(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_copy_dictionary_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  void *v4;

  v4 = (void *)objc_msgSend(a3, "copyDictionary");
  xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v4);

  return 1;
}

void sub_18341A1CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_create_from_dictionary_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C812F8])
  {
    v5 = nw_endpoint_create_from_dictionary(v4);
    nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40), v5);

  }
  return 1;
}

void sub_18341A244(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t __nw_establishment_report_create_from_dictionary_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  NSObject *v5;

  v4 = a3;
  if (object_getClass(v4) == (Class)MEMORY[0x1E0C812F8])
  {
    v5 = nw_endpoint_create_from_dictionary(v4);
    nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48), v5);

  }
  return 1;
}

void sub_18341A2C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

xpc_object_t nw_data_transfer_report_copy_dictionary(void *a1)
{
  os_unfair_lock_s *v1;
  xpc_object_t v2;
  os_unfair_lock_s *v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  xpc_object_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  char *backtrace_string;
  os_log_type_t v59;
  _BOOL4 v60;
  os_log_type_t v61;
  _QWORD aBlock[4];
  os_unfair_lock_s *v63;
  _BYTE *v64;
  char v65;
  os_log_type_t type;
  _BYTE buf[24];
  int v68;
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = xpc_dictionary_create(0, 0, 0);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v68 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_data_transfer_report_copy_dictionary_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v64 = buf;
    v3 = v1;
    v63 = v3;
    v4 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v1 + 10);
    v4[2](v4);
    os_unfair_lock_unlock(v1 + 10);

    if (*(_DWORD *)(*(_QWORD *)&buf[8] + 24) == 2)
    {
      v5 = *(_QWORD *)&v3[4]._os_unfair_lock_opaque;
      if (v5)
        xpc_dictionary_set_uint64(v2, "duration_milliseconds", v5);
      if (v3[11]._os_unfair_lock_opaque)
      {
        v6 = xpc_dictionary_create(0, 0, 0);
        v7 = v6;
        v8 = *(_QWORD *)&v3[14]._os_unfair_lock_opaque;
        if (v8)
          xpc_dictionary_set_uint64(v6, "total_received_ip_packet_count", v8);
        v9 = *(_QWORD *)&v3[58]._os_unfair_lock_opaque;
        if (v9)
          xpc_dictionary_set_uint64(v7, "incremental_received_ip_packet_count", v9);
        v10 = *(_QWORD *)&v3[16]._os_unfair_lock_opaque;
        if (v10)
          xpc_dictionary_set_uint64(v7, "total_received_ip_ect1_packet_count", v10);
        v11 = *(_QWORD *)&v3[60]._os_unfair_lock_opaque;
        if (v11)
          xpc_dictionary_set_uint64(v7, "incremental_received_ip_ect1_packet_count", v11);
        v12 = *(_QWORD *)&v3[18]._os_unfair_lock_opaque;
        if (v12)
          xpc_dictionary_set_uint64(v7, "total_received_ip_ect0_packet_count", v12);
        v13 = *(_QWORD *)&v3[62]._os_unfair_lock_opaque;
        if (v13)
          xpc_dictionary_set_uint64(v7, "incremental_received_ip_ect0_packet_count", v13);
        v14 = *(_QWORD *)&v3[20]._os_unfair_lock_opaque;
        if (v14)
          xpc_dictionary_set_uint64(v7, "total_received_ip_ce_packet_count", v14);
        v15 = *(_QWORD *)&v3[64]._os_unfair_lock_opaque;
        if (v15)
          xpc_dictionary_set_uint64(v7, "incremental_received_ip_ce_packet_count", v15);
        v16 = *(_QWORD *)&v3[22]._os_unfair_lock_opaque;
        if (v16)
          xpc_dictionary_set_uint64(v7, "total_sent_ip_packet_count", v16);
        v17 = *(_QWORD *)&v3[66]._os_unfair_lock_opaque;
        if (v17)
          xpc_dictionary_set_uint64(v7, "incremental_sent_ip_packet_count", v17);
        v18 = *(_QWORD *)&v3[24]._os_unfair_lock_opaque;
        if (v18)
          xpc_dictionary_set_uint64(v7, "total_received_transport_byte_count", v18);
        v19 = *(_QWORD *)&v3[68]._os_unfair_lock_opaque;
        if (v19)
          xpc_dictionary_set_uint64(v7, "incremental_received_transport_byte_count", v19);
        v20 = *(_QWORD *)&v3[26]._os_unfair_lock_opaque;
        if (v20)
          xpc_dictionary_set_uint64(v7, "total_received_transport_duplicate_byte_count", v20);
        v21 = *(_QWORD *)&v3[70]._os_unfair_lock_opaque;
        if (v21)
          xpc_dictionary_set_uint64(v7, "incremental_received_transport_duplicate_byte_count", v21);
        v22 = *(_QWORD *)&v3[28]._os_unfair_lock_opaque;
        if (v22)
          xpc_dictionary_set_uint64(v7, "total_received_transport_out_of_order_byte_count", v22);
        v23 = *(_QWORD *)&v3[72]._os_unfair_lock_opaque;
        if (v23)
          xpc_dictionary_set_uint64(v7, "incremental_received_transport_out_of_order_byte_count", v23);
        v24 = *(_QWORD *)&v3[30]._os_unfair_lock_opaque;
        if (v24)
          xpc_dictionary_set_uint64(v7, "total_sent_transport_byte_count", v24);
        v25 = *(_QWORD *)&v3[74]._os_unfair_lock_opaque;
        if (v25)
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_byte_count", v25);
        v26 = *(_QWORD *)&v3[32]._os_unfair_lock_opaque;
        if (v26)
          xpc_dictionary_set_uint64(v7, "total_sent_transport_retransmitted_byte_count", v26);
        v27 = *(_QWORD *)&v3[76]._os_unfair_lock_opaque;
        if (v27)
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_retransmitted_byte_count", v27);
        v28 = *(_QWORD *)&v3[34]._os_unfair_lock_opaque;
        if (v28)
          xpc_dictionary_set_uint64(v7, "total_sent_transport_ecn_capable_packet_count", v28);
        v29 = *(_QWORD *)&v3[78]._os_unfair_lock_opaque;
        if (v29)
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_ecn_capable_packet_count", v29);
        v30 = *(_QWORD *)&v3[36]._os_unfair_lock_opaque;
        if (v30)
          xpc_dictionary_set_uint64(v7, "total_sent_transport_ecn_capable_acked_packet_count", v30);
        v31 = *(_QWORD *)&v3[80]._os_unfair_lock_opaque;
        if (v31)
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_ecn_capable_acked_packet_count", v31);
        v32 = *(_QWORD *)&v3[38]._os_unfair_lock_opaque;
        if (v32)
          xpc_dictionary_set_uint64(v7, "total_sent_transport_ecn_capable_marked_packet_count", v32);
        v33 = *(_QWORD *)&v3[82]._os_unfair_lock_opaque;
        if (v33)
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_ecn_capable_marked_packet_count", v33);
        v34 = *(_QWORD *)&v3[40]._os_unfair_lock_opaque;
        if (v34)
          xpc_dictionary_set_uint64(v7, "total_sent_transport_ecn_capable_lost_packet_count", v34);
        v35 = *(_QWORD *)&v3[84]._os_unfair_lock_opaque;
        if (v35)
          xpc_dictionary_set_uint64(v7, "incremental_sent_transport_ecn_capable_lost_packet_count", v35);
        v36 = *(_QWORD *)&v3[42]._os_unfair_lock_opaque;
        if (v36)
          xpc_dictionary_set_uint64(v7, "total_transport_smoothed_rtt_milliseconds", v36);
        v37 = *(_QWORD *)&v3[86]._os_unfair_lock_opaque;
        if (v37)
          xpc_dictionary_set_uint64(v7, "incremental_transport_smoothed_rtt_milliseconds", v37);
        v38 = *(_QWORD *)&v3[44]._os_unfair_lock_opaque;
        if (v38)
          xpc_dictionary_set_uint64(v7, "total_transport_minimum_rtt_milliseconds", v38);
        v39 = *(_QWORD *)&v3[88]._os_unfair_lock_opaque;
        if (v39)
          xpc_dictionary_set_uint64(v7, "incremental_transport_minimum_rtt_milliseconds", v39);
        v40 = *(_QWORD *)&v3[46]._os_unfair_lock_opaque;
        if (v40)
          xpc_dictionary_set_uint64(v7, "total_transport_current_rtt_milliseconds", v40);
        v41 = *(_QWORD *)&v3[90]._os_unfair_lock_opaque;
        if (v41)
          xpc_dictionary_set_uint64(v7, "incremental_transport_current_rtt_milliseconds", v41);
        v42 = *(_QWORD *)&v3[48]._os_unfair_lock_opaque;
        if (v42)
          xpc_dictionary_set_uint64(v7, "total_transport_rtt_variance", v42);
        v43 = *(_QWORD *)&v3[92]._os_unfair_lock_opaque;
        if (v43)
          xpc_dictionary_set_uint64(v7, "incremental_transport_rtt_variance", v43);
        v44 = *(_QWORD *)&v3[50]._os_unfair_lock_opaque;
        if (v44)
          xpc_dictionary_set_uint64(v7, "total_transport_congestion_window", v44);
        v45 = *(_QWORD *)&v3[94]._os_unfair_lock_opaque;
        if (v45)
          xpc_dictionary_set_uint64(v7, "incremental_transport_congestion_window", v45);
        v46 = *(_QWORD *)&v3[52]._os_unfair_lock_opaque;
        if (v46)
          xpc_dictionary_set_uint64(v7, "total_transport_slow_start_threshold", v46);
        v47 = *(_QWORD *)&v3[96]._os_unfair_lock_opaque;
        if (v47)
          xpc_dictionary_set_uint64(v7, "incremental_transport_slow_start_threshold", v47);
        v48 = *(_QWORD *)&v3[54]._os_unfair_lock_opaque;
        if (v48)
          xpc_dictionary_set_uint64(v7, "total_received_application_byte_count", v48);
        v49 = *(_QWORD *)&v3[98]._os_unfair_lock_opaque;
        if (v49)
          xpc_dictionary_set_uint64(v7, "incremental_received_application_byte_count", v49);
        v50 = *(_QWORD *)&v3[56]._os_unfair_lock_opaque;
        if (v50)
          xpc_dictionary_set_uint64(v7, "total_sent_application_byte_count", v50);
        v51 = *(_QWORD *)&v3[100]._os_unfair_lock_opaque;
        if (v51)
          xpc_dictionary_set_uint64(v7, "incremental_sent_application_byte_count", v51);
        v52 = nw_interface_copy_dictionary(*(void **)&v3[102]._os_unfair_lock_opaque);
        if (v52)
          xpc_dictionary_set_value(v7, "interface", v52);

        xpc_dictionary_set_value(v2, "primary_path", v7);
      }
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_98;
  }
  __nwlog_obj();
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_data_transfer_report_copy_dictionary";
  v55 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v65 = 0;
  if (__nwlog_fault(v55, &type, &v65))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v57 = type;
      if (os_log_type_enabled(v56, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_data_transfer_report_copy_dictionary";
        _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v65)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v59 = type;
      v60 = os_log_type_enabled(v56, type);
      if (backtrace_string)
      {
        if (v60)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_data_transfer_report_copy_dictionary";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v56, v59, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_115;
      }
      if (v60)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_data_transfer_report_copy_dictionary";
        _os_log_impl(&dword_182FBE000, v56, v59, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v61 = type;
      if (os_log_type_enabled(v56, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_data_transfer_report_copy_dictionary";
        _os_log_impl(&dword_182FBE000, v56, v61, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_115:
  if (v55)
    free(v55);
  v2 = 0;
LABEL_98:

  return v2;
}

void sub_18341AAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_data_transfer_report_copy_dictionary_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 52);
  return result;
}

NWConcrete_nw_data_transfer_report *nw_data_transfer_report_create_from_dictionary(void *a1)
{
  id v1;
  void *v2;
  Class Class;
  objc_class *v4;
  NWConcrete_nw_data_transfer_report *v5;
  NWConcrete_nw_data_transfer_report *v6;
  void *v7;
  NWConcrete_nw_data_transfer_report *v8;
  xpc_object_t value;
  xpc_object_t v11;
  id v12;
  xpc_object_t v13;
  void *v14;
  NWConcrete_nw_interface *v15;
  void *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  os_log_type_t v37;
  os_log_type_t v38;
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_data_transfer_report_create_from_dictionary";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v18, &type, &v39))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }
    else if (v39)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v29 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "nw_data_transfer_report_create_from_dictionary";
          v43 = 2082;
          v44 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v18)
          goto LABEL_66;
        goto LABEL_65;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v36 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_182FBE000, v19, v36, "%{public}s called with null dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_63;
  }
  Class = object_getClass(v1);
  v4 = (objc_class *)MEMORY[0x1E0C812F8];
  if (Class != (Class)MEMORY[0x1E0C812F8])
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_data_transfer_report_create_from_dictionary";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (!__nwlog_fault(v18, &type, &v39))
      goto LABEL_64;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary))", buf, 0xCu);
      }
    }
    else if (v39)
    {
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v19, type);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v42 = "nw_data_transfer_report_create_from_dictionary";
          v43 = 2082;
          v44 = v30;
          _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
LABEL_64:
        if (!v18)
        {
LABEL_66:
          v6 = 0;
          goto LABEL_8;
        }
LABEL_65:
        free(v18);
        goto LABEL_66;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v42 = "nw_data_transfer_report_create_from_dictionary";
        _os_log_impl(&dword_182FBE000, v19, v37, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_63:

    goto LABEL_64;
  }
  v5 = objc_alloc_init(NWConcrete_nw_data_transfer_report);
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "nw_data_transfer_report_create_from_dictionary";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v39 = 0;
    if (__nwlog_fault(v24, &type, &v39))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_data_transfer_report_create_from_dictionary";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v39)
      {
        v33 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v25, type);
        if (v33)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            v42 = "nw_data_transfer_report_create_from_dictionary";
            v43 = 2082;
            v44 = v33;
            _os_log_impl(&dword_182FBE000, v25, v34, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v33);
          goto LABEL_70;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_data_transfer_report_create_from_dictionary";
          _os_log_impl(&dword_182FBE000, v25, v34, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v25 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v42 = "nw_data_transfer_report_create_from_dictionary";
          _os_log_impl(&dword_182FBE000, v25, v38, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_70:
    if (v24)
      free(v24);
    goto LABEL_7;
  }
  *((_DWORD *)v5 + 13) = 2;
  *((_QWORD *)v5 + 2) = xpc_dictionary_get_uint64(v2, "duration_milliseconds");
  if (object_getClass(v2) == v4)
  {
    value = xpc_dictionary_get_value(v2, "primary_path");
    v7 = value;
    if (!value)
      goto LABEL_6;
    if (object_getClass(value) == v4)
    {
      v11 = xpc_retain(v7);
      v7 = v11;
      if (v11)
      {
        *((_DWORD *)v6 + 11) = 1;
        *((_QWORD *)v6 + 7) = xpc_dictionary_get_uint64(v11, "total_received_ip_packet_count");
        *((_QWORD *)v6 + 29) = xpc_dictionary_get_uint64(v7, "incremental_received_ip_packet_count");
        *((_QWORD *)v6 + 8) = xpc_dictionary_get_uint64(v7, "total_received_ip_ect1_packet_count");
        *((_QWORD *)v6 + 30) = xpc_dictionary_get_uint64(v7, "incremental_received_ip_ect1_packet_count");
        *((_QWORD *)v6 + 9) = xpc_dictionary_get_uint64(v7, "total_received_ip_ect0_packet_count");
        *((_QWORD *)v6 + 31) = xpc_dictionary_get_uint64(v7, "incremental_received_ip_ect0_packet_count");
        *((_QWORD *)v6 + 10) = xpc_dictionary_get_uint64(v7, "total_received_ip_ce_packet_count");
        *((_QWORD *)v6 + 32) = xpc_dictionary_get_uint64(v7, "incremental_received_ip_ce_packet_count");
        *((_QWORD *)v6 + 11) = xpc_dictionary_get_uint64(v7, "total_sent_ip_packet_count");
        *((_QWORD *)v6 + 33) = xpc_dictionary_get_uint64(v7, "incremental_sent_ip_packet_count");
        *((_QWORD *)v6 + 12) = xpc_dictionary_get_uint64(v7, "total_received_transport_byte_count");
        *((_QWORD *)v6 + 34) = xpc_dictionary_get_uint64(v7, "incremental_received_transport_byte_count");
        *((_QWORD *)v6 + 13) = xpc_dictionary_get_uint64(v7, "total_received_transport_duplicate_byte_count");
        *((_QWORD *)v6 + 35) = xpc_dictionary_get_uint64(v7, "incremental_received_transport_duplicate_byte_count");
        *((_QWORD *)v6 + 14) = xpc_dictionary_get_uint64(v7, "total_received_transport_out_of_order_byte_count");
        *((_QWORD *)v6 + 36) = xpc_dictionary_get_uint64(v7, "incremental_received_transport_out_of_order_byte_count");
        *((_QWORD *)v6 + 15) = xpc_dictionary_get_uint64(v7, "total_sent_transport_byte_count");
        *((_QWORD *)v6 + 37) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_byte_count");
        *((_QWORD *)v6 + 16) = xpc_dictionary_get_uint64(v7, "total_sent_transport_retransmitted_byte_count");
        *((_QWORD *)v6 + 38) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_retransmitted_byte_count");
        *((_QWORD *)v6 + 17) = xpc_dictionary_get_uint64(v7, "total_sent_transport_ecn_capable_packet_count");
        *((_QWORD *)v6 + 39) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_ecn_capable_packet_count");
        *((_QWORD *)v6 + 18) = xpc_dictionary_get_uint64(v7, "total_sent_transport_ecn_capable_acked_packet_count");
        *((_QWORD *)v6 + 40) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_ecn_capable_acked_packet_count");
        *((_QWORD *)v6 + 19) = xpc_dictionary_get_uint64(v7, "total_sent_transport_ecn_capable_marked_packet_count");
        *((_QWORD *)v6 + 41) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_ecn_capable_marked_packet_count");
        *((_QWORD *)v6 + 20) = xpc_dictionary_get_uint64(v7, "total_sent_transport_ecn_capable_lost_packet_count");
        *((_QWORD *)v6 + 42) = xpc_dictionary_get_uint64(v7, "incremental_sent_transport_ecn_capable_lost_packet_count");
        *((_QWORD *)v6 + 21) = xpc_dictionary_get_uint64(v7, "total_transport_smoothed_rtt_milliseconds");
        *((_QWORD *)v6 + 43) = xpc_dictionary_get_uint64(v7, "incremental_transport_smoothed_rtt_milliseconds");
        *((_QWORD *)v6 + 22) = xpc_dictionary_get_uint64(v7, "total_transport_minimum_rtt_milliseconds");
        *((_QWORD *)v6 + 44) = xpc_dictionary_get_uint64(v7, "incremental_transport_minimum_rtt_milliseconds");
        *((_QWORD *)v6 + 23) = xpc_dictionary_get_uint64(v7, "total_transport_current_rtt_milliseconds");
        *((_QWORD *)v6 + 45) = xpc_dictionary_get_uint64(v7, "incremental_transport_current_rtt_milliseconds");
        *((_QWORD *)v6 + 24) = xpc_dictionary_get_uint64(v7, "total_transport_rtt_variance");
        *((_QWORD *)v6 + 46) = xpc_dictionary_get_uint64(v7, "incremental_transport_rtt_variance");
        *((_QWORD *)v6 + 25) = xpc_dictionary_get_uint64(v7, "total_transport_congestion_window");
        *((_QWORD *)v6 + 47) = xpc_dictionary_get_uint64(v7, "incremental_transport_congestion_window");
        *((_QWORD *)v6 + 26) = xpc_dictionary_get_uint64(v7, "total_transport_slow_start_threshold");
        *((_QWORD *)v6 + 48) = xpc_dictionary_get_uint64(v7, "incremental_transport_slow_start_threshold");
        *((_QWORD *)v6 + 27) = xpc_dictionary_get_uint64(v7, "total_received_application_byte_count");
        *((_QWORD *)v6 + 49) = xpc_dictionary_get_uint64(v7, "incremental_received_application_byte_count");
        *((_QWORD *)v6 + 28) = xpc_dictionary_get_uint64(v7, "total_sent_application_byte_count");
        *((_QWORD *)v6 + 50) = xpc_dictionary_get_uint64(v7, "incremental_sent_application_byte_count");
        if (object_getClass(v7) == v4
          && (v13 = xpc_dictionary_get_value(v7, "interface")) != 0
          && (v14 = v13, object_getClass(v13) == v4))
        {
          v12 = v14;
          v15 = nw_interface_create_from_dictionary(v12);
          v16 = (void *)*((_QWORD *)v6 + 51);
          *((_QWORD *)v6 + 51) = v15;

        }
        else
        {
          v12 = 0;
        }

      }
      goto LABEL_6;
    }
  }
  v7 = 0;
LABEL_6:
  v8 = v6;

LABEL_7:
LABEL_8:

  return v6;
}

void sub_18341B62C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id nw_interface_use_observer_create(const char *a1, void *a2, void *a3)
{
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;
  NWConcrete_nw_interface_use_observer *v8;
  id v9;
  char *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  const char *v18;
  NSObject *v19;
  uint64_t v20;
  uint32_t v21;
  id v22;
  char *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  char *v27;
  int v28;
  unsigned __int16 v29;
  NSObject *v30;
  _DWORD *v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  char *v35;
  os_log_type_t v36;
  char *v37;
  char *v38;
  id result;
  void *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t receiver;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  void *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  NSObject *v56;
  void *v57;
  char *backtrace_string;
  os_log_type_t v59;
  _BOOL4 v60;
  char *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  char *v64;
  os_log_type_t v65;
  _BOOL4 v66;
  char *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  os_log_type_t v70;
  os_log_type_t v71;
  os_log_type_t v72;
  os_log_type_t v73;
  _QWORD block[4];
  _DWORD *v75;
  unsigned __int16 v76;
  _QWORD handler[4];
  id v78;
  char v79;
  os_log_type_t type;
  objc_super v81;
  uint8_t buf[4];
  const char *v83;
  __int16 v84;
  char *v85;
  __int16 v86;
  uint32_t v87;
  __int16 v88;
  char *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v5 = a2;
  v6 = a3;
  v7 = v6;
  if (!a1)
  {
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_interface_use_observer_create";
    v41 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v81.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v41, &v81, &type))
    {
      if (LOBYTE(v81.receiver) == 17)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        receiver = (os_log_type_t)v81.receiver;
        if (os_log_type_enabled(v42, (os_log_type_t)v81.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_182FBE000, v42, receiver, "%{public}s called with null notification_name", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v59 = (os_log_type_t)v81.receiver;
        v60 = os_log_type_enabled(v42, (os_log_type_t)v81.receiver);
        if (backtrace_string)
        {
          if (v60)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "nw_interface_use_observer_create";
            v84 = 2082;
            v85 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v42, v59, "%{public}s called with null notification_name, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_99;
        }
        if (v60)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_182FBE000, v42, v59, "%{public}s called with null notification_name, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v70 = (os_log_type_t)v81.receiver;
        if (os_log_type_enabled(v42, (os_log_type_t)v81.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_182FBE000, v42, v70, "%{public}s called with null notification_name, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_99:
    if (v41)
      free(v41);

    goto LABEL_113;
  }
  if (!v5)
  {
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_interface_use_observer_create";
    v45 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v81.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v45, &v81, &type))
    {
      if (LOBYTE(v81.receiver) == 17)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v47 = (os_log_type_t)v81.receiver;
        if (os_log_type_enabled(v46, (os_log_type_t)v81.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null queue", buf, 0xCu);
        }
      }
      else if (type)
      {
        v61 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v62 = (os_log_type_t)v81.receiver;
        v63 = os_log_type_enabled(v46, (os_log_type_t)v81.receiver);
        if (v61)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "nw_interface_use_observer_create";
            v84 = 2082;
            v85 = v61;
            _os_log_impl(&dword_182FBE000, v46, v62, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v61);
          goto LABEL_105;
        }
        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_182FBE000, v46, v62, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v71 = (os_log_type_t)v81.receiver;
        if (os_log_type_enabled(v46, (os_log_type_t)v81.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_182FBE000, v46, v71, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_105:
    if (v45)
      free(v45);
    v31 = 0;
    goto LABEL_41;
  }
  if (!v6)
  {
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "nw_interface_use_observer_create";
    v49 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v81.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v49, &v81, &type))
    {
      if (LOBYTE(v81.receiver) == 17)
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v51 = (os_log_type_t)v81.receiver;
        if (os_log_type_enabled(v50, (os_log_type_t)v81.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null block", buf, 0xCu);
        }
      }
      else if (type)
      {
        v64 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v65 = (os_log_type_t)v81.receiver;
        v66 = os_log_type_enabled(v50, (os_log_type_t)v81.receiver);
        if (v64)
        {
          if (v66)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "nw_interface_use_observer_create";
            v84 = 2082;
            v85 = v64;
            _os_log_impl(&dword_182FBE000, v50, v65, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v64);
          goto LABEL_111;
        }
        if (v66)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_182FBE000, v50, v65, "%{public}s called with null block, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v50 = objc_claimAutoreleasedReturnValue();
        v72 = (os_log_type_t)v81.receiver;
        if (os_log_type_enabled(v50, (os_log_type_t)v81.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "nw_interface_use_observer_create";
          _os_log_impl(&dword_182FBE000, v50, v72, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_111:
    if (v49)
      free(v49);
LABEL_113:
    v31 = 0;
    v7 = v5;
    goto LABEL_41;
  }
  v8 = [NWConcrete_nw_interface_use_observer alloc];
  if (!v8)
  {
LABEL_119:
    v9 = 0;
    goto LABEL_8;
  }
  v81.receiver = v8;
  v81.super_class = (Class)NWConcrete_nw_interface_use_observer;
  v9 = objc_msgSendSuper2(&v81, sel_init);
  if (!v9)
  {
    __nwlog_obj();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
    v53 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if ((__nwlog_fault(v53, &type, &v79) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v55 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
          _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v79)
      {
        v67 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v68 = type;
        v69 = os_log_type_enabled(v54, type);
        if (v67)
        {
          if (v69)
          {
            *(_DWORD *)buf = 136446466;
            v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
            v84 = 2082;
            v85 = v67;
            _os_log_impl(&dword_182FBE000, v54, v68, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v67);
          goto LABEL_117;
        }
        if (v69)
        {
          *(_DWORD *)buf = 136446210;
          v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
          _os_log_impl(&dword_182FBE000, v54, v68, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v73 = type;
        if (os_log_type_enabled(v54, type))
        {
          *(_DWORD *)buf = 136446210;
          v83 = "-[NWConcrete_nw_interface_use_observer initWithNotificationName:]";
          _os_log_impl(&dword_182FBE000, v54, v73, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_117:
    if (v53)
      free(v53);
    goto LABEL_119;
  }
  v10 = strdup(a1);
  if (v10)
  {
LABEL_7:
    *((_QWORD *)v9 + 1) = v10;
LABEL_8:
    v11 = (void *)*((_QWORD *)v9 + 2);
    if ((*((_BYTE *)v9 + 24) & 1) != 0 && v11)
    {
      *((_QWORD *)v9 + 2) = 0;

      v11 = (void *)*((_QWORD *)v9 + 2);
    }
    *((_QWORD *)v9 + 2) = 0;

    v12 = (void *)*((_QWORD *)v9 + 2);
    *((_QWORD *)v9 + 2) = v5;

    *((_BYTE *)v9 + 24) |= 1u;
    v13 = _Block_copy(v7);

    v14 = _Block_copy(v13);
    v15 = (void *)*((_QWORD *)v9 + 4);
    if ((*((_BYTE *)v9 + 40) & 1) != 0 && v15)
    {
      *((_QWORD *)v9 + 4) = 0;

      v15 = (void *)*((_QWORD *)v9 + 4);
    }
    *((_QWORD *)v9 + 4) = 0;

    v16 = _Block_copy(v14);
    v17 = (void *)*((_QWORD *)v9 + 4);
    *((_QWORD *)v9 + 4) = v16;

    *((_BYTE *)v9 + 40) |= 1u;
    LODWORD(v81.receiver) = -1;
    v18 = (const char *)*((_QWORD *)v9 + 1);
    v19 = *((id *)v9 + 2);
    v20 = MEMORY[0x1E0C809B0];
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 3221225472;
    handler[2] = __nw_interface_use_observer_create_block_invoke;
    handler[3] = &unk_1E149B4D0;
    v7 = v9;
    v78 = v7;
    v21 = notify_register_dispatch(v18, (int *)&v81, v19, handler);

    if (!v21)
    {
      v28 = (int)v81.receiver;
      if (LODWORD(v81.receiver) == -1)
      {
        v31 = 0;
      }
      else
      {
        v7[12] = v81.receiver;
        v29 = nw_interface_use_observer_get_in_use(v28);
        if (v29 >= 0x100u)
        {
          v30 = *((_QWORD *)v9 + 2);
          block[0] = v20;
          block[1] = 3221225472;
          block[2] = __nw_interface_use_observer_create_block_invoke_5;
          block[3] = &unk_1E149B4F8;
          v75 = v7;
          v76 = v29;
          dispatch_async(v30, block);

        }
        v31 = v7;
      }
      goto LABEL_40;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    v23 = (char *)*((_QWORD *)v9 + 1);
    *(_DWORD *)buf = 136446722;
    v83 = "nw_interface_use_observer_create";
    v84 = 2082;
    v85 = v23;
    v86 = 1024;
    v87 = v21;
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v79 = 0;
    if (__nwlog_fault(v24, &type, &v79))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          v27 = (char *)*((_QWORD *)v9 + 1);
          *(_DWORD *)buf = 136446722;
          v83 = "nw_interface_use_observer_create";
          v84 = 2082;
          v85 = v27;
          v86 = 1024;
          v87 = v21;
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed", buf, 0x1Cu);
        }
      }
      else if (v79)
      {
        v32 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v33 = type;
        v34 = os_log_type_enabled(v25, type);
        if (v32)
        {
          if (v34)
          {
            v35 = (char *)*((_QWORD *)v9 + 1);
            *(_DWORD *)buf = 136446978;
            v83 = "nw_interface_use_observer_create";
            v84 = 2082;
            v85 = v35;
            v86 = 1024;
            v87 = v21;
            v88 = 2082;
            v89 = v32;
            _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(v32);
          if (!v24)
            goto LABEL_39;
          goto LABEL_38;
        }
        if (v34)
        {
          v38 = (char *)*((_QWORD *)v9 + 1);
          *(_DWORD *)buf = 136446722;
          v83 = "nw_interface_use_observer_create";
          v84 = 2082;
          v85 = v38;
          v86 = 1024;
          v87 = v21;
          _os_log_impl(&dword_182FBE000, v25, v33, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v36 = type;
        if (os_log_type_enabled(v25, type))
        {
          v37 = (char *)*((_QWORD *)v9 + 1);
          *(_DWORD *)buf = 136446722;
          v83 = "nw_interface_use_observer_create";
          v84 = 2082;
          v85 = v37;
          v86 = 1024;
          v87 = v21;
          _os_log_impl(&dword_182FBE000, v25, v36, "%{public}s notify_register_dispatch(%{public}s) [status %u] failed, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
    if (!v24)
    {
LABEL_39:
      v31 = 0;
      LODWORD(v81.receiver) = -1;
LABEL_40:

LABEL_41:
      return v31;
    }
LABEL_38:
    free(v24);
    goto LABEL_39;
  }
  __nwlog_obj();
  v56 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v56, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v83 = "strict_strdup";
  v57 = (void *)_os_log_send_and_compose_impl();

  result = (id)__nwlog_abort((uint64_t)v57);
  if (!(_DWORD)result)
  {
    free(v57);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

void sub_18341C5F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;

  _Unwind_Resume(a1);
}

void __nw_interface_use_observer_create_block_invoke(uint64_t a1, int a2)
{
  _QWORD *v3;
  unsigned __int16 v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = *(id *)(a1 + 32);
  if (v3)
  {
    v4 = nw_interface_use_observer_get_in_use(a2);
    if (v4 >= 0x100u)
      (*(void (**)(_QWORD, BOOL))(v3[4] + 16))(v3[4], v4 != 0);
    goto LABEL_4;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_interface_use_observer_update";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_use_observer_update";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null observer", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_interface_use_observer_update";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null observer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_use_observer_update";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null observer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_use_observer_update";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null observer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_4:

}

void sub_18341C8FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_interface_use_observer_get_in_use(int a1)
{
  uint32_t state;
  uint32_t v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  _BOOL4 v8;
  int v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  NSObject *v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint64_t state64;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  uint32_t v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  state64 = 0;
  state = notify_get_state(a1, &state64);
  if (state)
  {
    v2 = state;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v3 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    v20 = "nw_interface_use_observer_get_in_use";
    v21 = 1024;
    v22 = v2;
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v4, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_20;
        *(_DWORD *)buf = 136446466;
        v20 = "nw_interface_use_observer_get_in_use";
        v21 = 1024;
        v22 = v2;
        v7 = "%{public}s notify_get_state [%u] failed";
LABEL_18:
        v14 = v5;
        v15 = v6;
        goto LABEL_19;
      }
      if (!v16)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v5 = (id)gLogObj;
        v6 = type;
        if (!os_log_type_enabled(v5, type))
          goto LABEL_20;
        *(_DWORD *)buf = 136446466;
        v20 = "nw_interface_use_observer_get_in_use";
        v21 = 1024;
        v22 = v2;
        v7 = "%{public}s notify_get_state [%u] failed, backtrace limit exceeded";
        goto LABEL_18;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      v11 = type;
      v12 = os_log_type_enabled(v5, type);
      if (!backtrace_string)
      {
        if (!v12)
        {
LABEL_20:

          if (!v4)
            goto LABEL_14;
          goto LABEL_13;
        }
        *(_DWORD *)buf = 136446466;
        v20 = "nw_interface_use_observer_get_in_use";
        v21 = 1024;
        v22 = v2;
        v7 = "%{public}s notify_get_state [%u] failed, no backtrace";
        v14 = v5;
        v15 = v11;
LABEL_19:
        _os_log_impl(&dword_182FBE000, v14, v15, v7, buf, 0x12u);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446722;
        v20 = "nw_interface_use_observer_get_in_use";
        v21 = 1024;
        v22 = v2;
        v23 = 2082;
        v24 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v5, v11, "%{public}s notify_get_state [%u] failed, dumping backtrace:%{public}s", buf, 0x1Cu);
      }

      free(backtrace_string);
    }
    if (!v4)
    {
LABEL_14:
      v8 = 0;
      v9 = 0;
      return v8 | (v9 << 8);
    }
LABEL_13:
    free(v4);
    goto LABEL_14;
  }
  v8 = state64 != 0;
  v9 = 1;
  return v8 | (v9 << 8);
}

uint64_t __nw_interface_use_observer_create_block_invoke_5(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 41))
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) + 16))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), *(unsigned __int8 *)(a1 + 40));
  std::__throw_bad_optional_access[abi:nn180100]();
  return std::__throw_bad_optional_access[abi:nn180100]();
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_optional_access was thrown in -fno-exceptions mode");
  return nw_interface_use_observer_cancel();
}

void nw_interface_use_observer_cancel(void *a1)
{
  _DWORD *v1;
  _DWORD *v2;
  int v3;
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[12];
    if (v3 == -1)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = (id)gLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_use_observer_cancel";
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s Notify token not valid, this observer may have been cancelled", buf, 0xCu);
      }

    }
    else
    {
      notify_cancel(v3);
      v2[12] = -1;
    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_interface_use_observer_cancel";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_use_observer_cancel";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null observer", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_interface_use_observer_cancel";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null observer, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_use_observer_cancel";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null observer, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_use_observer_cancel";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null observer, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v6)
    free(v6);
LABEL_7:

}

void sub_18341CF78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_interface_use_observer_post_notification(const char *a1, unsigned int a2)
{
  uint32_t v4;
  uint32_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint32_t v11;
  uint64_t v12;
  uint32_t v13;
  uint32_t v14;
  NSObject *v15;
  uint32_t v16;
  NSObject *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *backtrace_string;
  _BOOL4 v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  uint32_t v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_interface_use_observer_post_notification";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v19, &type, &v25))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_interface_use_observer_post_notification";
        v22 = "%{public}s called with null notification_name";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      }
    }
    else
    {
      if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        v24 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            v28 = "nw_interface_use_observer_post_notification";
            v29 = 2082;
            v30 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null notification_name, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (!v24)
          goto LABEL_37;
        *(_DWORD *)buf = 136446210;
        v28 = "nw_interface_use_observer_post_notification";
        v22 = "%{public}s called with null notification_name, no backtrace";
        goto LABEL_36;
      }
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_interface_use_observer_post_notification";
        v22 = "%{public}s called with null notification_name, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

LABEL_38:
    if (v19)
      free(v19);
    return;
  }
  v4 = notify_register_check(a1, &nw_interface_use_observer_post_notification::token);
  if (v4)
  {
    v5 = v4;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v28 = "nw_interface_use_observer_post_notification";
      v29 = 2082;
      v30 = (void *)a1;
      v31 = 1024;
      LODWORD(v32) = v5;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s notify_register_check(%{public}s) failed: %d", buf, 0x1Cu);
    }

    nw_interface_use_observer_post_notification::token = -1;
    goto LABEL_6;
  }
  if (nw_interface_use_observer_post_notification::token == -1)
  {
LABEL_6:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
LABEL_9:

      return;
    }
    *(_DWORD *)buf = 136446466;
    v28 = "nw_interface_use_observer_post_notification";
    v29 = 2082;
    v30 = (void *)a1;
    v8 = "%{public}s Nobody observing %{public}s";
    v9 = v7;
    v10 = OS_LOG_TYPE_DEBUG;
    v11 = 22;
LABEL_8:
    _os_log_impl(&dword_182FBE000, v9, v10, v8, buf, v11);
    goto LABEL_9;
  }
  v12 = a2;
  v13 = notify_set_state(nw_interface_use_observer_post_notification::token, a2);
  if (v13)
  {
    v14 = v13;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446978;
      v28 = "nw_interface_use_observer_post_notification";
      v29 = 2082;
      v30 = (void *)a1;
      v31 = 2048;
      v32 = v12;
      v33 = 1024;
      v34 = v14;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s notify_set_state for %{public}s %#llx failed: %d", buf, 0x26u);
    }

  }
  else
  {
    v16 = notify_post(a1);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    v7 = v17;
    if (!v16)
    {
      if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        goto LABEL_9;
      *(_DWORD *)buf = 136446722;
      v28 = "nw_interface_use_observer_post_notification";
      v29 = 2082;
      v30 = (void *)a1;
      v31 = 1024;
      LODWORD(v32) = a2;
      v8 = "%{public}s successfully posted notification %{public}s for interface in use: %{BOOL}d";
      v9 = v7;
      v10 = OS_LOG_TYPE_DEFAULT;
      v11 = 28;
      goto LABEL_8;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v28 = "nw_interface_use_observer_post_notification";
      v29 = 2082;
      v30 = (void *)a1;
      v31 = 1024;
      LODWORD(v32) = v16;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s notify_post for %{public}s failed: %d", buf, 0x1Cu);
    }

  }
  notify_cancel(nw_interface_use_observer_post_notification::token);
  nw_interface_use_observer_post_notification::token = -1;
}

uint64_t nw_connection_group_get_description(void *a1)
{
  id v1;
  os_unfair_lock_s *v2;
  os_unfair_lock_s *v3;
  void (**v4)(_QWORD);
  uint64_t v5;
  os_unfair_lock_s *v6;
  void (**v7)(_QWORD);
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  os_unfair_lock_s *v18;
  _QWORD aBlock[4];
  os_unfair_lock_s *v20;
  char v21;
  os_log_type_t v22;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (os_unfair_lock_s *)v1;
  if (v1)
  {
    if (nw_parameters_get_sensitive_redacted(*((void **)v1 + 7)))
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_connection_group_get_description_block_invoke;
      aBlock[3] = &unk_1E14ACFD0;
      v3 = v2;
      v20 = v3;
      v4 = (void (**)(_QWORD))_Block_copy(aBlock);
      os_unfair_lock_lock(v2 + 43);
      v4[2](v4);
      os_unfair_lock_unlock(v2 + 43);

      v5 = *(_QWORD *)&v3[38]._os_unfair_lock_opaque;
    }
    else
    {
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __nw_connection_group_get_description_block_invoke_2;
      v17[3] = &unk_1E14ACFD0;
      v6 = v2;
      v18 = v6;
      v7 = (void (**)(_QWORD))_Block_copy(v17);
      os_unfair_lock_lock(v2 + 43);
      v7[2](v7);
      os_unfair_lock_unlock(v2 + 43);

      v5 = *(_QWORD *)&v6[40]._os_unfair_lock_opaque;
    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_connection_group_get_description";
  v10 = (char *)_os_log_send_and_compose_impl();

  v22 = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v10, &v22, &v21))
  {
    if (v22 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_group_get_description";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = v22;
      v15 = os_log_type_enabled(v11, v22);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_connection_group_get_description";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_group_get_description";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = v22;
      if (os_log_type_enabled(v11, v22))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_connection_group_get_description";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v10)
    free(v10);
  v5 = 0;
LABEL_5:

  return v5;
}

void sub_18341E5A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void __nw_connection_group_get_description_block_invoke(uint64_t a1)
{
  uint64_t v1;
  char *v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v1 + 152))
  {
    v3 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)(v1 + 56), 0);
    asprintf((char **)(*(_QWORD *)(a1 + 32) + 152), "[G%u %s]", *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168), v3);
    if (v3)
      free(v3);
  }
}

void __nw_connection_group_get_description_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  char *v3;

  v1 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v1 + 160))
  {
    v3 = nw_parameters_copy_description_internal(*(NWConcrete_nw_parameters **)(v1 + 56), 0);
    asprintf((char **)(*(_QWORD *)(a1 + 32) + 160), "[G%u %s]", *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168), v3);
    if (v3)
      free(v3);
  }
}

const char *nw_connection_group_state_to_string(unsigned int a1)
{
  if (a1 > 4)
    return "<unknown>";
  else
    return off_1E149CE68[a1];
}

void sub_18342008C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

uint64_t nw_connection_group_get_next_log_id(void)
{
  unsigned int v0;
  uint64_t result;
  NSObject *v2;
  int v3;
  const char *v4;
  __int16 v5;
  int v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  do
  {
    v0 = __ldaxr((unsigned int *)&nw_connection_group_get_next_log_id(void)::s_last_top_level_id);
    result = v0 + 1;
  }
  while (__stlxr(result, (unsigned int *)&nw_connection_group_get_next_log_id(void)::s_last_top_level_id));
  if (v0 == -2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v2 = (id)gLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v3 = 136446466;
      v4 = "nw_connection_group_get_next_log_id";
      v5 = 1024;
      v6 = -1;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_ERROR, "%{public}s reached %u group logging ids, wrapping", (uint8_t *)&v3, 0x12u);
    }

    return nw_connection_group_get_next_log_id();
  }
  return result;
}

void sub_1834202AC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_group_add_connection_locked(NWConcrete_nw_connection_group *a1, NWConcrete_nw_connection *a2)
{
  NWConcrete_nw_connection_group *v3;
  NWConcrete_nw_connection *v4;
  NWConcrete_nw_connection *v5;
  NWConcrete_nw_connection_group *v6;
  id v7;
  _QWORD *v8;
  id v9;
  NSObject *v10;
  id v11;
  os_unfair_lock_s *v12;
  os_unfair_lock_s *v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  void *v33;
  os_log_type_t v34;
  NSObject *v35;
  int v36;
  NSObject *v37;
  uint64_t v38;
  int v39;
  char *backtrace_string;
  os_log_type_t v41;
  _BOOL4 v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  _BOOL4 v47;
  char *v48;
  os_log_type_t v49;
  _BOOL4 v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  char *v54;
  os_log_type_t v55;
  _BOOL4 v56;
  os_log_type_t v57;
  os_log_type_t v58;
  os_log_type_t v59;
  os_log_type_t v60;
  os_log_type_t v61;
  os_log_type_t v62;
  int v63;
  _QWORD handler[4];
  NWConcrete_nw_connection_group *v65;
  NSObject *v66;
  char v67;
  os_log_type_t type;
  _BYTE buf[32];
  char *v70;
  char *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v67 = 0;
    if (!__nwlog_fault(v18, &type, &v67))
      goto LABEL_117;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v67)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      v42 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v41, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_117:
        if (!v18)
          goto LABEL_131;
LABEL_118:
        free(v18);
        goto LABEL_131;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v41, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v57 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v57, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_116:

    goto LABEL_117;
  }
  if (!*((_QWORD *)v3 + 13))
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v67 = 0;
    if (!__nwlog_fault(v18, &type, &v67))
      goto LABEL_117;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null group->connections", buf, 0xCu);
      }
      goto LABEL_116;
    }
    if (!v67)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v58 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v58, "%{public}s called with null group->connections, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_116;
    }
    v43 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v44 = type;
    v45 = os_log_type_enabled(v19, type);
    if (!v43)
    {
      if (v45)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v44, "%{public}s called with null group->connections, no backtrace", buf, 0xCu);
      }
      goto LABEL_116;
    }
    if (v45)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v43;
      _os_log_impl(&dword_182FBE000, v19, v44, "%{public}s called with null group->connections, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_72;
  }
  if (!v4)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v67 = 0;
    if (!__nwlog_fault(v18, &type, &v67))
      goto LABEL_117;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null new_connection", buf, 0xCu);
      }
      goto LABEL_116;
    }
    if (!v67)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v59 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v59, "%{public}s called with null new_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_116;
    }
    v43 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v46 = type;
    v47 = os_log_type_enabled(v19, type);
    if (!v43)
    {
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v46, "%{public}s called with null new_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_116;
    }
    if (v47)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v43;
      _os_log_impl(&dword_182FBE000, v19, v46, "%{public}s called with null new_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_72:

    free(v43);
    if (!v18)
      goto LABEL_131;
    goto LABEL_118;
  }
  v6 = v3;
  v7 = *((id *)v6 + 7);
  if (v7)
  {
    v8 = v7;
    v9 = *(id *)(v8[13] + 136);

    if (!v9)
    {
      __nwlog_obj();
      v29 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
      v30 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v67 = 0;
      if (!__nwlog_fault(v30, &type, &v67))
        goto LABEL_138;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v67)
      {
        v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v52 = type;
        v53 = os_log_type_enabled(v31, type);
        if (v51)
        {
          if (v53)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v51;
            _os_log_impl(&dword_182FBE000, v31, v52, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v51);
          if (!v30)
            goto LABEL_140;
          goto LABEL_139;
        }
        if (v53)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_182FBE000, v31, v52, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v61 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_182FBE000, v31, v61, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_137;
    }
    v10 = nw_context_copy_workloop(v9);
    if (v10)
      goto LABEL_10;
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    v11 = (id)nw_context_copy_implicit_context::implicit_context;
    v10 = nw_context_copy_workloop(v11);

    if (v10)
    {
LABEL_10:

      if (v10)
      {
        nw_connection_group_prune_connections_locked(v6);
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v6 + 7)) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v35 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            v36 = *((_DWORD *)v6 + 42);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v36;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v5;
            _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Adding connection (%@) to group", buf, 0x1Cu);
          }

        }
        v12 = v5;
        v13 = v12 + 34;
        v14 = MEMORY[0x1E0C809B0];
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = __nw_connection_set_group_uuid_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E14AA348;
        v15 = v12;
        v70 = v15;
        v71 = (char *)v6 + 120;
        os_unfair_lock_lock(v13);
        __nw_connection_set_group_uuid_block_invoke((uint64_t)buf);
        os_unfair_lock_unlock(v13);

        nw_array_insert_object_at_index(*((_QWORD *)v3 + 13), v15, 0);
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v6 + 7)) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v37 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
          {
            v38 = *((_QWORD *)v3 + 13);
            if (v38)
              v38 = (uint64_t)(*(_QWORD *)(v38 + 24) - *(_QWORD *)(v38 + 16)) >> 3;
            v39 = *((_DWORD *)v6 + 42);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v39;
            *(_WORD *)&buf[18] = 2048;
            *(_QWORD *)&buf[20] = v38;
            _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] group has %zu connections", buf, 0x1Cu);
          }

        }
        handler[0] = v14;
        handler[1] = 3221225472;
        handler[2] = ___ZL41nw_connection_group_add_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
        handler[3] = &unk_1E14AD048;
        v65 = v6;
        v16 = v15;
        v66 = v16;
        nw_connection_set_state_changed_handler(v16, handler);
        nw_connection_set_queue(v16, v10);

LABEL_130:
        goto LABEL_131;
      }
      goto LABEL_125;
    }
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
    v30 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v67 = 0;
    if (__nwlog_fault(v30, &type, &v67))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null workloop", buf, 0xCu);
        }
LABEL_137:

        goto LABEL_138;
      }
      if (!v67)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v62 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_182FBE000, v31, v62, "%{public}s called with null workloop, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_137;
      }
      v54 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v55 = type;
      v56 = os_log_type_enabled(v31, type);
      if (!v54)
      {
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
          _os_log_impl(&dword_182FBE000, v31, v55, "%{public}s called with null workloop, no backtrace", buf, 0xCu);
        }
        goto LABEL_137;
      }
      if (v56)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v54;
        _os_log_impl(&dword_182FBE000, v31, v55, "%{public}s called with null workloop, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v54);
    }
LABEL_138:
    if (!v30)
    {
LABEL_140:
      v10 = 0;
      goto LABEL_10;
    }
LABEL_139:
    free(v30);
    goto LABEL_140;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
  v26 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v67 = 0;
  if (__nwlog_fault(v26, &type, &v67))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v67)
    {
      v48 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      v50 = os_log_type_enabled(v27, type);
      if (v48)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v48;
          _os_log_impl(&dword_182FBE000, v27, v49, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v48);
        goto LABEL_122;
      }
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_182FBE000, v27, v49, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v27 = objc_claimAutoreleasedReturnValue();
      v60 = type;
      if (os_log_type_enabled(v27, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_182FBE000, v27, v60, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_122:
  if (v26)
    free(v26);

LABEL_125:
  if (!nw_parameters_get_logging_disabled(*((_QWORD *)v6 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v10 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      v63 = *((_DWORD *)v6 + 42);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_add_connection_locked";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v63;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot copy workloop, cannot add connection", buf, 0x12u);
    }
    goto LABEL_130;
  }
LABEL_131:

}

void sub_183421330(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void nw_connection_group_prune_connections_locked(NWConcrete_nw_connection_group *a1)
{
  NWConcrete_nw_connection_group *v1;
  NWConcrete_nw_connection_group *v2;
  uint64_t v3;
  unint64_t v4;
  void *v5;
  NSObject *v6;
  int v7;
  NWConcrete_nw_connection_group *v8;
  NSObject *v9;
  NWConcrete_nw_connection_group *v10;
  id v11;
  void *v12;
  _QWORD *v13;
  id v14;
  _BOOL8 v15;
  id v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  const char *v22;
  char *v23;
  const char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  const char *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  NSObject *v34;
  _BOOL4 v35;
  char *v36;
  _BOOL4 v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  void *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  char *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  os_log_type_t v49;
  os_log_type_t v50;
  _QWORD handler[4];
  NWConcrete_nw_connection_group *v52;
  NSObject *v53;
  char v54;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v57;
  __int16 v58;
  _QWORD v59[4];

  *(_QWORD *)((char *)&v59[2] + 2) = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 13);
    if (v3)
      v4 = (uint64_t)(*(_QWORD *)(v3 + 24) - *(_QWORD *)(v3 + 16)) >> 3;
    else
      v4 = 0;
    if (v4 < *((unsigned int *)v1 + 45))
      goto LABEL_6;
    while (1)
    {
      v5 = nw_array_remove_object_at_index(*((_QWORD *)v2 + 13), (char *)--v4);
      if (!nw_parameters_get_logging_disabled(*((_QWORD *)v2 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v6 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v7 = *((_DWORD *)v2 + 42);
          *(_DWORD *)buf = 136446722;
          v57 = "nw_connection_group_prune_connections_locked";
          v58 = 1024;
          LODWORD(v59[0]) = v7;
          WORD2(v59[0]) = 2112;
          *(_QWORD *)((char *)v59 + 6) = v5;
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [G%u] pruning connection %@", buf, 0x1Cu);
        }

      }
      nw_connection_reset_client(v5);
      handler[0] = MEMORY[0x1E0C809B0];
      handler[1] = 3221225472;
      handler[2] = ___ZL44nw_connection_group_prune_connections_lockedP30NWConcrete_nw_connection_group_block_invoke;
      handler[3] = &unk_1E14AD048;
      v8 = v2;
      v52 = v8;
      v9 = v5;
      v53 = v9;
      nw_connection_set_state_changed_handler(v9, handler);
      v10 = v8;
      v11 = *((id *)v2 + 7);
      v12 = v11;
      if (!v11)
      {
        __nwlog_obj();
        v17 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v57 = "nw_connection_group_copy_workloop";
        v18 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v54 = 0;
        if (__nwlog_fault(v18, &type, &v54))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v19 = objc_claimAutoreleasedReturnValue();
            v20 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)buf = 136446210;
              v57 = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null parameters", buf, 0xCu);
            }
            goto LABEL_67;
          }
          if (v54)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v19 = objc_claimAutoreleasedReturnValue();
            v31 = type;
            v32 = os_log_type_enabled(v19, type);
            if (backtrace_string)
            {
              if (v32)
              {
                *(_DWORD *)buf = 136446466;
                v57 = "nw_connection_group_copy_workloop";
                v58 = 2082;
                v59[0] = backtrace_string;
                _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(backtrace_string);
              goto LABEL_68;
            }
            if (v32)
            {
              *(_DWORD *)buf = 136446210;
              v57 = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v19 = objc_claimAutoreleasedReturnValue();
            v38 = type;
            if (os_log_type_enabled(v19, type))
            {
              *(_DWORD *)buf = 136446210;
              v57 = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_182FBE000, v19, v38, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
            }
          }
LABEL_67:

        }
LABEL_68:
        if (v18)
          free(v18);
        v15 = 0;
        goto LABEL_20;
      }
      v13 = v11;
      v14 = *(id *)(v13[13] + 136);

      if (!v14)
        break;
      v15 = nw_context_copy_workloop(v14);
      if (v15)
        goto LABEL_19;
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      v16 = (id)nw_context_copy_implicit_context::implicit_context;
      v15 = nw_context_copy_workloop(v16);

      if (v15)
        goto LABEL_19;
      __nwlog_obj();
      v27 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v57 = "nw_connection_group_copy_workloop";
      v28 = (const char *)_os_log_send_and_compose_impl();

      v23 = (char *)v28;
      type = OS_LOG_TYPE_ERROR;
      v54 = 0;
      if (__nwlog_fault(v28, &type, &v54))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          v24 = v28;
          __nwlog_obj();
          v25 = objc_claimAutoreleasedReturnValue();
          v29 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            v57 = "nw_connection_group_copy_workloop";
            _os_log_impl(&dword_182FBE000, v25, v29, "%{public}s called with null workloop", buf, 0xCu);
          }
LABEL_61:

          v23 = (char *)v24;
          goto LABEL_62;
        }
        if (!v54)
        {
          v24 = v28;
          __nwlog_obj();
          v25 = objc_claimAutoreleasedReturnValue();
          v40 = type;
          if (os_log_type_enabled(v25, type))
          {
            *(_DWORD *)buf = 136446210;
            v57 = "nw_connection_group_copy_workloop";
            _os_log_impl(&dword_182FBE000, v25, v40, "%{public}s called with null workloop, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_61;
        }
        v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v50 = type;
        v37 = os_log_type_enabled(v34, type);
        if (!v36)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446210;
            v57 = "nw_connection_group_copy_workloop";
            _os_log_impl(&dword_182FBE000, v34, v50, "%{public}s called with null workloop, no backtrace", buf, 0xCu);
          }
LABEL_73:

          goto LABEL_62;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446466;
          v57 = "nw_connection_group_copy_workloop";
          v58 = 2082;
          v59[0] = v36;
          _os_log_impl(&dword_182FBE000, v34, v50, "%{public}s called with null workloop, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v36);
      }
LABEL_62:
      if (v23)
        goto LABEL_63;
LABEL_64:
      v15 = 0;
LABEL_19:

LABEL_20:
      nw_connection_set_queue(v9, (dispatch_queue_t)v15);
      nw_connection_start(v9);
      nw_connection_cancel(v9);

      if (v4 < *((unsigned int *)v2 + 45))
        goto LABEL_6;
    }
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v57 = "nw_connection_group_copy_workloop";
    v22 = (const char *)_os_log_send_and_compose_impl();

    v23 = (char *)v22;
    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (!__nwlog_fault(v22, &type, &v54))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v24 = v22;
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_61;
    }
    if (!v54)
    {
      v24 = v22;
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v25, type))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_connection_group_copy_workloop";
        _os_log_impl(&dword_182FBE000, v25, v39, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_61;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    v49 = type;
    v35 = os_log_type_enabled(v34, type);
    if (v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446466;
        v57 = "nw_connection_group_copy_workloop";
        v58 = 2082;
        v59[0] = v33;
        _os_log_impl(&dword_182FBE000, v34, v49, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v33);
      if (!v23)
        goto LABEL_64;
LABEL_63:
      free(v23);
      goto LABEL_64;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446210;
      v57 = "nw_connection_group_copy_workloop";
      _os_log_impl(&dword_182FBE000, v34, v49, "%{public}s called with null context, no backtrace", buf, 0xCu);
    }
    goto LABEL_73;
  }
  __nwlog_obj();
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v57 = "nw_connection_group_prune_connections_locked";
  v42 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v54 = 0;
  if (__nwlog_fault(v42, &type, &v54))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_connection_group_prune_connections_locked";
        _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v54)
    {
      v45 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      v47 = os_log_type_enabled(v43, type);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446466;
          v57 = "nw_connection_group_prune_connections_locked";
          v58 = 2082;
          v59[0] = v45;
          _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v45);
        goto LABEL_93;
      }
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_connection_group_prune_connections_locked";
        _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        v57 = "nw_connection_group_prune_connections_locked";
        _os_log_impl(&dword_182FBE000, v43, v48, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_93:
  if (v42)
    free(v42);
LABEL_6:

}

void sub_183421EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

void ___ZL41nw_connection_group_add_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  const char *v11;
  int v12;
  _DWORD *v13;
  NSObject *v14;
  void (**v15)(_QWORD);
  NSObject *v16;
  int v17;
  int v18;
  NSObject *v19;
  int v20;
  void *v21;
  _DWORD *v22;
  int v23;
  void *v24;
  _DWORD *v25;
  void (**v26)(_QWORD);
  NSObject *v27;
  int v28;
  _DWORD *v29;
  NSObject *v30;
  unsigned int v31;
  unsigned int v32;
  _DWORD *v33;
  NSObject *v34;
  NSObject *v35;
  int v36;
  void (**v37)(_QWORD);
  NSObject *v38;
  int v39;
  void *v40;
  _DWORD *v41;
  int v42;
  void *v43;
  NSObject *v44;
  int v45;
  _DWORD *v46;
  void *v47;
  id v48;
  int v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  int v53;
  NSObject *v54;
  int v55;
  const char *v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  int v60;
  os_log_type_t v61;
  int v62;
  void *v63;
  char *v64;
  NSObject *v65;
  os_log_type_t v66;
  void *v67;
  os_log_type_t v68;
  void *v69;
  os_log_type_t v70;
  os_log_type_t v71;
  int v72;
  char *backtrace_string;
  os_log_type_t v74;
  _BOOL4 v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  os_log_type_t v79;
  _BOOL4 v80;
  os_log_type_t v81;
  os_log_type_t v82;
  os_log_type_t v83;
  NSObject *v84;
  int v85;
  NSObject *v86;
  int v87;
  NSObject *v88;
  int v89;
  unsigned int v90;
  NSObject *v91;
  char v92;
  os_log_type_t type;
  void *v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t *v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  void *(*v106)(uint64_t, uint64_t);
  void (*v107)(uint64_t);
  id v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  void *(*v112)(uint64_t, uint64_t);
  void (*v113)(uint64_t);
  id v114;
  _QWORD aBlock[4];
  _DWORD *v116;
  NSObject *v117;
  void *v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  char v122;
  int v123;
  const char *v124;
  __int16 v125;
  int v126;
  __int16 v127;
  NSObject *v128;
  __int16 v129;
  char *v130;
  _BYTE v131[32];
  id v132;
  NSObject *v133;
  uint64_t *v134;
  _BYTE v135[40];
  NSObject *v136;
  uint64_t *v137;
  _BYTE buf[40];
  NSObject *v139;
  uint64_t *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = *(void **)(a1 + 40);
  v8 = v6;
  v9 = v7;
  v91 = v5;
  if (!v8)
  {
    __nwlog_obj();
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
    v64 = (char *)_os_log_send_and_compose_impl();

    v135[0] = 16;
    v131[0] = 0;
    if (!__nwlog_fault(v64, v135, v131))
      goto LABEL_170;
    if (v135[0] == 17)
    {
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v66 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_182FBE000, v65, v66, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v131[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v74 = v135[0];
      v75 = os_log_type_enabled(v65, (os_log_type_t)v135[0]);
      if (backtrace_string)
      {
        if (v75)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v65, v74, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_170:
        if (!v64)
          goto LABEL_21;
LABEL_171:
        free(v64);
        goto LABEL_21;
      }
      if (v75)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_182FBE000, v65, v74, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v81 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_182FBE000, v65, v81, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_169:

    goto LABEL_170;
  }
  if (!v9)
  {
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
    v64 = (char *)_os_log_send_and_compose_impl();

    v135[0] = 16;
    v131[0] = 0;
    if (!__nwlog_fault(v64, v135, v131))
      goto LABEL_170;
    if (v135[0] == 17)
    {
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v68 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_182FBE000, v65, v68, "%{public}s called with null connection", buf, 0xCu);
      }
      goto LABEL_169;
    }
    if (!v131[0])
    {
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v82 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_182FBE000, v65, v82, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_169;
    }
    v76 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v65 = objc_claimAutoreleasedReturnValue();
    v77 = v135[0];
    v78 = os_log_type_enabled(v65, (os_log_type_t)v135[0]);
    if (!v76)
    {
      if (v78)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_182FBE000, v65, v77, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_169;
    }
    if (v78)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v76;
      _os_log_impl(&dword_182FBE000, v65, v77, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_150;
  }
  if (!a2)
  {
    __nwlog_obj();
    v69 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
    v64 = (char *)_os_log_send_and_compose_impl();

    v135[0] = 16;
    v131[0] = 0;
    if (!__nwlog_fault(v64, v135, v131))
      goto LABEL_170;
    if (v135[0] == 17)
    {
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v70 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_182FBE000, v65, v70, "%{public}s called with null connection_state", buf, 0xCu);
      }
      goto LABEL_169;
    }
    if (!v131[0])
    {
      __nwlog_obj();
      v65 = objc_claimAutoreleasedReturnValue();
      v83 = v135[0];
      if (os_log_type_enabled(v65, (os_log_type_t)v135[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_182FBE000, v65, v83, "%{public}s called with null connection_state, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_169;
    }
    v76 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v65 = objc_claimAutoreleasedReturnValue();
    v79 = v135[0];
    v80 = os_log_type_enabled(v65, (os_log_type_t)v135[0]);
    if (!v76)
    {
      if (v80)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
        _os_log_impl(&dword_182FBE000, v65, v79, "%{public}s called with null connection_state, no backtrace", buf, 0xCu);
      }
      goto LABEL_169;
    }
    if (v80)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v76;
      _os_log_impl(&dword_182FBE000, v65, v79, "%{public}s called with null connection_state, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_150:

    free(v76);
    if (!v64)
      goto LABEL_21;
    goto LABEL_171;
  }
  if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v10 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      if (a2 > 5)
        v11 = "unknown";
      else
        v11 = off_1E149DE10[a2];
      v12 = *((_DWORD *)v8 + 42);
      *(_DWORD *)buf = 136447234;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_connection_state_changed";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v12;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v9;
      *(_WORD *)&buf[28] = 2080;
      *(_QWORD *)&buf[30] = v11;
      *(_WORD *)&buf[38] = 2112;
      v139 = v91;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection %@ entered state %s (error %@)", buf, 0x30u);
    }

  }
  v119 = 0;
  v120 = &v119;
  v121 = 0x2020000000;
  v122 = 0;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
  *(_QWORD *)&buf[24] = &unk_1E14A2D98;
  v13 = v8;
  *(_QWORD *)&buf[32] = v13;
  v14 = v9;
  v139 = v14;
  v140 = &v119;
  v15 = (void (**)(_QWORD))_Block_copy(buf);
  os_unfair_lock_lock((os_unfair_lock_t)v8 + 43);
  v15[2](v15);
  os_unfair_lock_unlock((os_unfair_lock_t)v8 + 43);

  if (*((_BYTE *)v120 + 24))
  {
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v16 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        v17 = v13[42];
        *(_DWORD *)v135 = 136446722;
        *(_QWORD *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
        *(_WORD *)&v135[12] = 1024;
        *(_DWORD *)&v135[14] = v17;
        *(_WORD *)&v135[18] = 2112;
        *(_QWORD *)&v135[20] = v14;
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s [G%u] connection %@ is no longer part of the group", v135, 0x1Cu);
      }
LABEL_19:

    }
    goto LABEL_20;
  }
  switch(a2)
  {
    case 1u:
      if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v16 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          v18 = v13[42];
          *(_DWORD *)v135 = 136446722;
          *(_QWORD *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v18;
          *(_WORD *)&v135[18] = 2112;
          *(_QWORD *)&v135[20] = v14;
          _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] connection %@ in waiting state", v135, 0x1Cu);
        }
        goto LABEL_19;
      }
      goto LABEL_20;
    case 2u:
      if ((int)v13[10] <= 2)
      {
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v38 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
          {
            v39 = v13[42];
            *(_DWORD *)v135 = 136446722;
            *(_QWORD *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
            *(_WORD *)&v135[12] = 1024;
            *(_DWORD *)&v135[14] = v39;
            *(_WORD *)&v135[18] = 2112;
            *(_QWORD *)&v135[20] = v14;
            _os_log_impl(&dword_182FBE000, v38, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection %@ in preparing state", v135, 0x1Cu);
          }

        }
        v40 = (void *)*((_QWORD *)v13 + 8);
        if (v40)
        {
          v41 = v40;
          v42 = v41[2];

          if (v42 == 2 && (*((_BYTE *)v13 + 190) & 4) != 0)
          {
            *(_QWORD *)v135 = MEMORY[0x1E0C809B0];
            *(_QWORD *)&v135[8] = 3221225472;
            *(_QWORD *)&v135[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_132;
            *(_QWORD *)&v135[24] = &unk_1E14ACE68;
            *(_QWORD *)&v135[32] = v13;
            v136 = v14;
            v43 = _Block_copy(v135);
            *(_QWORD *)v131 = v43;
            nw_synchronize<void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)v8 + 43, (uint64_t)v131);

          }
        }
      }
      goto LABEL_20;
    case 3u:
      if ((int)v13[10] > 2)
        goto LABEL_20;
      if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v19 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          v20 = v13[42];
          *(_DWORD *)v135 = 136446722;
          *(_QWORD *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v20;
          *(_WORD *)&v135[18] = 2112;
          *(_QWORD *)&v135[20] = v14;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection %@ in ready state", v135, 0x1Cu);
        }

      }
      v21 = (void *)*((_QWORD *)v13 + 8);
      if (v21)
      {
        v22 = v21;
        v23 = v22[2];

        if (v23 == 2)
        {
          aBlock[0] = MEMORY[0x1E0C809B0];
          aBlock[1] = 3221225472;
          aBlock[2] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_133;
          aBlock[3] = &unk_1E14ACE68;
          v116 = v13;
          v117 = v14;
          v24 = _Block_copy(aBlock);
          v118 = v24;
          nw_synchronize<void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)v8 + 43, (uint64_t)&v118);

        }
      }
      v108 = 0;
      v109 = 0;
      v110 = &v109;
      v111 = 0x3032000000;
      v112 = __Block_byref_object_copy__134;
      v113 = __Block_byref_object_dispose__135;
      v114 = 0;
      v103 = 0;
      v104 = &v103;
      v105 = 0x3032000000;
      v106 = __Block_byref_object_copy__134;
      v107 = __Block_byref_object_dispose__135;
      *(_QWORD *)v135 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v135[8] = 3221225472;
      *(_QWORD *)&v135[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_136;
      *(_QWORD *)&v135[24] = &unk_1E14A54F0;
      v136 = &v109;
      v25 = v13;
      *(_QWORD *)&v135[32] = v25;
      v137 = &v103;
      v26 = (void (**)(_QWORD))_Block_copy(v135);
      os_unfair_lock_lock((os_unfair_lock_t)v8 + 43);
      v26[2](v26);
      os_unfair_lock_unlock((os_unfair_lock_t)v8 + 43);

      if (!v110[5])
      {
        if (v104[5])
          goto LABEL_135;
        v99 = 0;
        v100 = &v99;
        v102 = 0;
        v101 = 0x2020000000;
        v95 = 0;
        v96 = &v95;
        v97 = 0x2020000000;
        v98 = 0;
        *(_QWORD *)v131 = MEMORY[0x1E0C809B0];
        *(_QWORD *)&v131[8] = 3221225472;
        *(_QWORD *)&v131[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_137;
        *(_QWORD *)&v131[24] = &unk_1E14A54F0;
        v133 = &v99;
        v46 = v25;
        v132 = v46;
        v134 = &v95;
        v47 = _Block_copy(v131);
        v94 = v47;
        nw_synchronize<void({block_pointer} {__strong})(void)>((os_unfair_lock_s *)v8 + 43, (uint64_t)&v94);

        if (!*((_BYTE *)v96 + 24) || (*((_DWORD *)v100 + 6) - 1) > 1)
        {
          if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
          {
            if (__nwlog_connection_group_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
            v54 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
              v55 = v46[42];
              v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              v125 = 1024;
              v126 = v55;
              v127 = 2112;
              v128 = v14;
              _os_log_impl(&dword_182FBE000, v54, OS_LOG_TYPE_INFO, "%{public}s [G%u] connection %@ ready, not reading because there is no receive handler", (uint8_t *)&v123, 0x1Cu);
            }

          }
          goto LABEL_134;
        }
        if (nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
        {
LABEL_134:

          _Block_object_dispose(&v95, 8);
          _Block_object_dispose(&v99, 8);
          goto LABEL_135;
        }
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v48 = (id)gconnection_groupLogObj;
        v49 = v46[42];
        v123 = 136446722;
        v124 = "nw_connection_group_handle_connection_state_changed";
        v125 = 1024;
        v126 = v49;
        v127 = 2112;
        v128 = v14;
        v50 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v92 = 0;
        if (__nwlog_fault(v50, &type, &v92))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_group_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
            v51 = (id)gconnection_groupLogObj;
            v52 = type;
            if (os_log_type_enabled(v51, type))
            {
              v53 = v46[42];
              v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              v125 = 1024;
              v126 = v53;
              v127 = 2112;
              v128 = v14;
              _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler", (uint8_t *)&v123, 0x1Cu);
            }
          }
          else if (v92)
          {
            v56 = __nw_create_backtrace_string();
            if (v56)
            {
              v57 = (char *)v56;
              if (__nwlog_connection_group_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
              v58 = (id)gconnection_groupLogObj;
              v59 = type;
              if (os_log_type_enabled(v58, type))
              {
                v60 = v46[42];
                v123 = 136446978;
                v124 = "nw_connection_group_handle_connection_state_changed";
                v125 = 1024;
                v126 = v60;
                v127 = 2112;
                v128 = v14;
                v129 = 2082;
                v130 = v57;
                _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler, dumping backtrace:%{public}s", (uint8_t *)&v123, 0x26u);
              }

              free(v57);
              goto LABEL_132;
            }
            if (__nwlog_connection_group_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
            v51 = (id)gconnection_groupLogObj;
            v71 = type;
            if (os_log_type_enabled(v51, type))
            {
              v72 = v46[42];
              v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              v125 = 1024;
              v126 = v72;
              v127 = 2112;
              v128 = v14;
              _os_log_impl(&dword_182FBE000, v51, v71, "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler, no backtrace", (uint8_t *)&v123, 0x1Cu);
            }
          }
          else
          {
            if (__nwlog_connection_group_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
            v51 = (id)gconnection_groupLogObj;
            v61 = type;
            if (os_log_type_enabled(v51, type))
            {
              v62 = v46[42];
              v123 = 136446722;
              v124 = "nw_connection_group_handle_connection_state_changed";
              v125 = 1024;
              v126 = v62;
              v127 = 2112;
              v128 = v14;
              _os_log_impl(&dword_182FBE000, v51, v61, "%{public}s [G%u] group started and connection %@ ready, not reading because there is no receive handler, backtrace limit exceeded", (uint8_t *)&v123, 0x1Cu);
            }
          }

        }
LABEL_132:
        if (v50)
          free(v50);
        goto LABEL_134;
      }
      if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v27 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v28 = v25[42];
          *(_DWORD *)v131 = 136446722;
          *(_QWORD *)&v131[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = v28;
          *(_WORD *)&v131[18] = 2112;
          *(_QWORD *)&v131[20] = v14;
          _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] connection %@ ready, reading", v131, 0x1Cu);
        }

      }
      v29 = v25;
      v30 = v14;
      if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v84 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
        {
          v85 = v29[42];
          *(_DWORD *)v131 = 136446722;
          *(_QWORD *)&v131[4] = "nw_connection_group_read_on_connection";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = v85;
          *(_WORD *)&v131[18] = 2112;
          *(_QWORD *)&v131[20] = v30;
          _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reading on connection %@", v131, 0x1Cu);
        }

      }
      v31 = v29[44];
      if (!v31)
      {
        v31 = 1;
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
        {
          if (gLogDatapath)
          {
            if (__nwlog_connection_group_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
            v88 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
            {
              v89 = v29[42];
              *(_DWORD *)v131 = 136446466;
              *(_QWORD *)&v131[4] = "nw_connection_group_read_on_connection";
              *(_WORD *)&v131[12] = 1024;
              *(_DWORD *)&v131[14] = v89;
              _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] overriding max size for reads to 1 since message size is 0", v131, 0x12u);
            }

            v31 = 1;
          }
        }
      }
      v32 = v29[44];
      if (v32 >= 0xFFFFFFFE)
        v32 = -2;
      v90 = v32;
      if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v86 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
        {
          v87 = v29[42];
          *(_DWORD *)v131 = 136446978;
          *(_QWORD *)&v131[4] = "nw_connection_group_read_on_connection";
          *(_WORD *)&v131[12] = 1024;
          *(_DWORD *)&v131[14] = v87;
          *(_WORD *)&v131[18] = 1024;
          *(_DWORD *)&v131[20] = v90;
          *(_WORD *)&v131[24] = 1024;
          *(_DWORD *)&v131[26] = v31;
          _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reading with min: %u, max: %u", v131, 0x1Eu);
        }

      }
      *(_QWORD *)v131 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v131[8] = 3221225472;
      *(_QWORD *)&v131[16] = ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
      *(_QWORD *)&v131[24] = &unk_1E14A9C10;
      v33 = v29;
      v132 = v33;
      v34 = v30;
      v133 = v34;
      nw_connection_receive_internal(v34, 0, v90, v31, v131);

LABEL_135:
      _Block_object_dispose(&v103, 8);

      _Block_object_dispose(&v109, 8);
LABEL_20:

      _Block_object_dispose(&v119, 8);
LABEL_21:

      return;
    case 4u:
      if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v44 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
        {
          v45 = v13[42];
          *(_DWORD *)v135 = 136446978;
          *(_QWORD *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v45;
          *(_WORD *)&v135[18] = 2112;
          *(_QWORD *)&v135[20] = v14;
          *(_WORD *)&v135[28] = 2112;
          *(_QWORD *)&v135[30] = v91;
          _os_log_impl(&dword_182FBE000, v44, OS_LOG_TYPE_ERROR, "%{public}s [G%u] connection %@ failed with error %@", v135, 0x26u);
        }

      }
      nw_connection_cancel(v14);
      goto LABEL_20;
    case 5u:
      if (!nw_parameters_get_logging_disabled(*((_QWORD *)v8 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v35 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
        {
          v36 = v13[42];
          *(_DWORD *)v135 = 136446722;
          *(_QWORD *)&v135[4] = "nw_connection_group_handle_connection_state_changed";
          *(_WORD *)&v135[12] = 1024;
          *(_DWORD *)&v135[14] = v36;
          *(_WORD *)&v135[18] = 2112;
          *(_QWORD *)&v135[20] = v14;
          _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Connection %@ cancelled", v135, 0x1Cu);
        }

      }
      *(_QWORD *)v135 = MEMORY[0x1E0C809B0];
      *(_QWORD *)&v135[8] = 3221225472;
      *(_QWORD *)&v135[16] = ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_138;
      *(_QWORD *)&v135[24] = &unk_1E14ACE68;
      *(_QWORD *)&v135[32] = v13;
      v136 = v14;
      v37 = (void (**)(_QWORD))_Block_copy(v135);
      os_unfair_lock_lock((os_unfair_lock_t)v8 + 43);
      v37[2](v37);
      os_unfair_lock_unlock((os_unfair_lock_t)v8 + 43);

      goto LABEL_20;
    default:
      goto LABEL_20;
  }
}

void sub_1834236D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  id *v47;

  _Block_object_dispose(&a16, 8);
  _Block_object_dispose(&a20, 8);

  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a30, 8);

  _Block_object_dispose(&a43, 8);
  _Unwind_Resume(a1);
}

void ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_132(uint64_t a1)
{
  nw_connection_group_create_listener_from_connection_locked(*(NWConcrete_nw_connection_group **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
}

void nw_synchronize<void({block_pointer} {__strong})(void)>(os_unfair_lock_s *a1, uint64_t a2)
{
  os_unfair_lock_lock(a1);
  (*(void (**)(void))(*(_QWORD *)a2 + 16))();
  os_unfair_lock_unlock(a1);
}

void ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_133(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 190) & 0x10) != 0)
  {
    if ((*(_BYTE *)(v2 + 190) & 0x40) == 0)
    {
      if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v3 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
          v5 = 136446466;
          v6 = "nw_connection_group_handle_connection_state_changed_block_invoke";
          v7 = 1024;
          v8 = v4;
          _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] listener ready and first connection ready", (uint8_t *)&v5, 0x12u);
        }

      }
      nw_connection_group_set_state_locked(*(void **)(a1 + 32), 2, 0);
    }
  }
  else
  {
    nw_connection_group_create_listener_from_connection_locked((NWConcrete_nw_connection_group *)v2, *(NWConcrete_nw_connection **)(a1 + 40));
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 190) |= 0x40u;
}

void *__Block_byref_object_copy__134(uint64_t a1, uint64_t a2)
{
  void *result;

  result = _Block_copy(*(const void **)(a2 + 40));
  *(_QWORD *)(a1 + 40) = result;
  return result;
}

void __Block_byref_object_dispose__135(uint64_t a1)
{

}

void ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_136(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v7;

  v2 = _Block_copy(*(const void **)(a1[4] + 136));
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = _Block_copy(*(const void **)(a1[4] + 144));
  v6 = *(_QWORD *)(a1[6] + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1, void *a2, void *a3, int a4, void *a5)
{
  NSObject *v9;
  nw_content_context_t v10;
  id v11;
  _DWORD *v12;
  int v13;
  _DWORD *v14;
  int v15;
  NSObject *v16;
  uint64_t v17;
  int v18;
  NSObject *v19;
  uint64_t v20;
  int v21;
  void *v22;
  id v23;
  NSObject *v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  int v29;
  NSObject *v30;
  uint64_t v31;
  int v32;
  void *v33;
  void *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  void *v38;
  os_log_type_t v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  char *v43;
  os_log_type_t v44;
  _BOOL4 v45;
  const char *v46;
  const char *v47;
  int v48;
  size_t size;
  uint64_t v50;
  char v51;
  BOOL logging_disabled;
  NSObject *v53;
  int v54;
  size_t v55;
  BOOL v58;
  char v59;
  os_unfair_lock_s *v60;
  void (**v61)(_QWORD);
  void *v62;
  nw_content_context_t v63;
  id v64;
  void *v65;
  _BOOL8 v66;
  Class isa;
  void *v68;
  dispatch_qos_class_t v69;
  id v70;
  NSObject *v71;
  dispatch_block_t v72;
  NSObject *v73;
  uint64_t v74;
  int v75;
  NSObject *v76;
  int v77;
  NSObject *v78;
  int v79;
  size_t v80;
  NSObject *v81;
  uint64_t v82;
  int v83;
  void *v84;
  NSObject *v85;
  NSObject *v86;
  int v87;
  NSObject *v88;
  int v89;
  NSObject *v90;
  int v91;
  NSObject *v92;
  int v93;
  const char *identifier;
  void *v95;
  void *v96;
  id v97;
  id v98;
  void *v99;
  unsigned int v100;
  unsigned int v101;
  NSObject *v102;
  uint64_t v103;
  int v104;
  void *v105;
  NSObject *v106;
  os_log_type_t v107;
  void *v108;
  os_log_type_t v109;
  os_log_type_t v110;
  os_log_type_t v111;
  void *v112;
  char *v113;
  NSObject *v114;
  os_log_type_t v115;
  void *v116;
  os_log_type_t v117;
  NSObject *v118;
  int v119;
  NSObject *v120;
  int v121;
  char *v122;
  _BOOL4 v123;
  _BOOL4 v124;
  void *v125;
  NSObject *v126;
  os_log_type_t v127;
  void *v128;
  os_log_type_t v129;
  char *v130;
  os_log_type_t v131;
  _BOOL4 v132;
  char *backtrace_string;
  os_log_type_t v134;
  _BOOL4 v135;
  NSObject *v136;
  int v137;
  os_log_type_t v138;
  os_log_type_t v139;
  char *v140;
  os_log_type_t v141;
  _BOOL4 v142;
  char *v143;
  os_log_type_t v144;
  _BOOL4 v145;
  os_log_type_t v146;
  os_log_type_t v147;
  os_log_type_t v148;
  os_log_type_t v149;
  os_log_type_t v150;
  os_log_type_t v151;
  void *v152;
  NSObject *data;
  _QWORD block[4];
  NSObject *v155;
  NSObject *v156;
  id v157;
  os_log_type_t *v158;
  char v159;
  _QWORD aBlock[4];
  os_unfair_lock_s *v161;
  os_log_type_t *v162;
  uint64_t *v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t (*v167)(uint64_t, uint64_t);
  void (*v168)(uint64_t);
  id v169;
  os_log_type_t type[8];
  os_log_type_t *v171;
  uint64_t v172;
  void *(*v173)(uint64_t, uint64_t);
  void (*v174)(uint64_t);
  id v175;
  char v176;
  os_log_type_t v177;
  _BYTE buf[40];
  id v179;
  __int16 v180;
  nw_content_context_t v181;
  __int16 v182;
  const char *v183;
  __int16 v184;
  const char *v185;
  __int16 v186;
  id v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  data = v9;
  if (nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) || !gLogDatapath)
  {
    if (v11)
      goto LABEL_4;
LABEL_67:
    if (v10)
    {
      v48 = 1;
      if (!v9)
        goto LABEL_81;
    }
    else
    {
      v10 = nw_content_context_create("connection_group incoming message");
      v48 = 1;
      if (!v9)
        goto LABEL_81;
    }
    if ((a4 & 1) != 0)
      goto LABEL_81;
    size = dispatch_data_get_size(v9);
    v50 = *(_QWORD *)(a1 + 32);
    if (size < *(unsigned int *)(v50 + 176))
      goto LABEL_81;
    v51 = *(_BYTE *)(v50 + 190);
    logging_disabled = nw_parameters_get_logging_disabled(*(_QWORD *)(v50 + 56));
    if ((v51 & 2) == 0)
    {
      if (!logging_disabled)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v53 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          v54 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
          v55 = dispatch_data_get_size(data);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v54;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v55;
          _os_log_impl(&dword_182FBE000, v53, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] oversized message is %zu bytes and not yet complete, delivering partial message", buf, 0x1Cu);
        }

      }
      v48 = 0;
LABEL_81:
      v58 = v10 == (nw_content_context_t)&__block_literal_global_3_41726
         || v10 == (nw_content_context_t)&__block_literal_global_41718
         || v10 == (nw_content_context_t)&__block_literal_global_4
         || v10 == (nw_content_context_t)&__block_literal_global_5_41741;
      v59 = v58;
      if (v58 && !nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v90 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v90, OS_LOG_TYPE_DEBUG))
        {
          v91 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v91;
          _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] context is static", buf, 0x12u);
        }

      }
      *(_QWORD *)type = 0;
      v171 = type;
      v172 = 0x3032000000;
      v173 = __Block_byref_object_copy__134;
      v174 = __Block_byref_object_dispose__135;
      v175 = 0;
      v164 = 0;
      v165 = &v164;
      v166 = 0x3032000000;
      v167 = __Block_byref_object_copy__8574;
      v168 = __Block_byref_object_dispose__8575;
      v169 = 0;
      v60 = *(os_unfair_lock_s **)(a1 + 32);
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_142;
      aBlock[3] = &unk_1E14A54F0;
      v162 = type;
      v161 = v60;
      v163 = &v164;
      v61 = (void (**)(_QWORD))_Block_copy(aBlock);
      os_unfair_lock_lock(v60 + 43);
      v61[2](v61);
      os_unfair_lock_unlock(v60 + 43);

      if (!*((_QWORD *)v171 + 5) || !v165[5])
      {
        if (nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
        {
          v48 = 0;
          if (v10)
            goto LABEL_108;
          goto LABEL_150;
        }
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v73 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
        {
          v74 = *(_QWORD *)(a1 + 40);
          v75 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v75;
          *(_WORD *)&buf[18] = 2112;
          *(_QWORD *)&buf[20] = v74;
          _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] no receive handler or client queue, stopping reads on connection %@", buf, 0x1Cu);
        }
        v48 = 0;
LABEL_107:

        if (v10)
        {
LABEL_108:
          v76 = v10;
          if (v10 == (nw_content_context_t)&__block_literal_global_41718
            || v10 == (nw_content_context_t)&__block_literal_global_5_41741)
          {

            goto LABEL_157;
          }
          v77 = 1;
          if (v10 != (nw_content_context_t)&__block_literal_global_3_41726
            && v10 != (nw_content_context_t)&__block_literal_global_4)
          {
            v77 = BYTE6(v76[14].isa) & 1;
          }

          if ((v77 & a4 & 1) == 0)
          {
LABEL_157:
            if (v48)
            {
              nw_connection_group_touch_connection(*(NWConcrete_nw_connection_group **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
              v96 = *(void **)(a1 + 40);
              v97 = *(id *)(a1 + 32);
              v98 = v96;
              v99 = v98;
              if (v97)
              {
                if (v98)
                {
                  if (!nw_parameters_get_logging_disabled(*((_QWORD *)v97 + 7)) && gLogDatapath)
                  {
                    if (__nwlog_connection_group_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
                    v118 = (id)gconnection_groupLogObj;
                    if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
                    {
                      v119 = *((_DWORD *)v97 + 42);
                      *(_DWORD *)buf = 136446722;
                      *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v119;
                      *(_WORD *)&buf[18] = 2112;
                      *(_QWORD *)&buf[20] = v99;
                      _os_log_impl(&dword_182FBE000, v118, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reading on connection %@", buf, 0x1Cu);
                    }

                  }
                  v100 = *((_DWORD *)v97 + 44);
                  if (!v100)
                  {
                    v100 = 1;
                    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v97 + 7)))
                    {
                      if (gLogDatapath)
                      {
                        if (__nwlog_connection_group_log::onceToken != -1)
                          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
                        v136 = (id)gconnection_groupLogObj;
                        if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
                        {
                          v137 = *((_DWORD *)v97 + 42);
                          *(_DWORD *)buf = 136446466;
                          *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                          *(_WORD *)&buf[12] = 1024;
                          *(_DWORD *)&buf[14] = v137;
                          _os_log_impl(&dword_182FBE000, v136, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] overriding max size for reads to 1 since message size is 0", buf, 0x12u);
                        }

                        v100 = 1;
                      }
                    }
                  }
                  if (*((_DWORD *)v97 + 44) >= 0xFFFFFFFE)
                    v101 = -2;
                  else
                    v101 = *((_DWORD *)v97 + 44);
                  if (!nw_parameters_get_logging_disabled(*((_QWORD *)v97 + 7)) && gLogDatapath)
                  {
                    if (__nwlog_connection_group_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
                    v120 = (id)gconnection_groupLogObj;
                    if (os_log_type_enabled(v120, OS_LOG_TYPE_DEBUG))
                    {
                      v121 = *((_DWORD *)v97 + 42);
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                      *(_WORD *)&buf[12] = 1024;
                      *(_DWORD *)&buf[14] = v121;
                      *(_WORD *)&buf[18] = 1024;
                      *(_DWORD *)&buf[20] = v101;
                      *(_WORD *)&buf[24] = 1024;
                      *(_DWORD *)&buf[26] = v100;
                      _os_log_impl(&dword_182FBE000, v120, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reading with min: %u, max: %u", buf, 0x1Eu);
                    }

                  }
                  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
                  *(_QWORD *)&buf[8] = 3221225472;
                  *(_QWORD *)&buf[16] = ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
                  *(_QWORD *)&buf[24] = &unk_1E14A9C10;
                  *(_QWORD *)&buf[32] = v97;
                  v179 = v99;
                  nw_connection_receive_internal(v179, 0, v101, v100, buf);

                  goto LABEL_171;
                }
                __nwlog_obj();
                v116 = (void *)objc_claimAutoreleasedReturnValue();
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                v113 = (char *)_os_log_send_and_compose_impl();

                v177 = OS_LOG_TYPE_ERROR;
                v176 = 0;
                if (__nwlog_fault(v113, &v177, &v176))
                {
                  if (v177 == OS_LOG_TYPE_FAULT)
                  {
                    __nwlog_obj();
                    v114 = objc_claimAutoreleasedReturnValue();
                    v117 = v177;
                    if (os_log_type_enabled(v114, v177))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                      _os_log_impl(&dword_182FBE000, v114, v117, "%{public}s called with null connection", buf, 0xCu);
                    }
                  }
                  else if (v176)
                  {
                    backtrace_string = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v114 = objc_claimAutoreleasedReturnValue();
                    v134 = v177;
                    v135 = os_log_type_enabled(v114, v177);
                    if (backtrace_string)
                    {
                      if (v135)
                      {
                        *(_DWORD *)buf = 136446466;
                        *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = backtrace_string;
                        _os_log_impl(&dword_182FBE000, v114, v134, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(backtrace_string);
                      if (!v113)
                        goto LABEL_171;
                      goto LABEL_299;
                    }
                    if (v135)
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                      _os_log_impl(&dword_182FBE000, v114, v134, "%{public}s called with null connection, no backtrace", buf, 0xCu);
                    }
                  }
                  else
                  {
                    __nwlog_obj();
                    v114 = objc_claimAutoreleasedReturnValue();
                    v147 = v177;
                    if (os_log_type_enabled(v114, v177))
                    {
                      *(_DWORD *)buf = 136446210;
                      *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                      _os_log_impl(&dword_182FBE000, v114, v147, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
                    }
                  }
                  goto LABEL_297;
                }
LABEL_298:
                if (!v113)
                {
LABEL_171:

LABEL_174:
                  _Block_object_dispose(&v164, 8);

                  _Block_object_dispose(type, 8);
                  goto LABEL_175;
                }
LABEL_299:
                free(v113);
                goto LABEL_171;
              }
              __nwlog_obj();
              v112 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
              v113 = (char *)_os_log_send_and_compose_impl();

              v177 = OS_LOG_TYPE_ERROR;
              v176 = 0;
              if (!__nwlog_fault(v113, &v177, &v176))
                goto LABEL_298;
              if (v177 == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v114 = objc_claimAutoreleasedReturnValue();
                v115 = v177;
                if (os_log_type_enabled(v114, v177))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                  _os_log_impl(&dword_182FBE000, v114, v115, "%{public}s called with null group", buf, 0xCu);
                }
              }
              else if (v176)
              {
                v130 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v114 = objc_claimAutoreleasedReturnValue();
                v131 = v177;
                v132 = os_log_type_enabled(v114, v177);
                if (v130)
                {
                  if (v132)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v130;
                    _os_log_impl(&dword_182FBE000, v114, v131, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v130);
                  goto LABEL_298;
                }
                if (v132)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                  _os_log_impl(&dword_182FBE000, v114, v131, "%{public}s called with null group, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v114 = objc_claimAutoreleasedReturnValue();
                v146 = v177;
                if (os_log_type_enabled(v114, v177))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection";
                  _os_log_impl(&dword_182FBE000, v114, v146, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
                }
              }
LABEL_297:

              goto LABEL_298;
            }
LABEL_172:
            if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
            {
              if (__nwlog_connection_group_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
              v102 = (id)gconnection_groupLogObj;
              if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
              {
                v103 = *(_QWORD *)(a1 + 40);
                v104 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v104;
                *(_WORD *)&buf[18] = 2112;
                *(_QWORD *)&buf[20] = v103;
                _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] stopping reads on %@", buf, 0x1Cu);
              }

            }
            goto LABEL_174;
          }
LABEL_151:
          if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
          {
            if (__nwlog_connection_group_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
            v92 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
            {
              v93 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
              identifier = nw_content_context_get_identifier(v10);
              v95 = *(void **)(a1 + 40);
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v93;
              *(_WORD *)&buf[18] = 2048;
              *(_QWORD *)&buf[20] = v10;
              *(_WORD *)&buf[28] = 2080;
              *(_QWORD *)&buf[30] = identifier;
              *(_WORD *)&buf[38] = 2112;
              v179 = v95;
              _os_log_impl(&dword_182FBE000, v92, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] final, complete content context (%p: %s), stopping reading on %@", buf, 0x30u);
            }

          }
          goto LABEL_172;
        }
LABEL_150:
        if (!a4)
          goto LABEL_157;
        goto LABEL_151;
      }
      v62 = *(void **)(a1 + 40);
      v63 = v10;
      v64 = v62;
      v65 = v64;
      if (v63)
      {
        if (v64)
        {
          if ((v59 & 1) == 0)
          {
            os_unfair_lock_lock((os_unfair_lock_t)&v63[14]);
            BYTE6(v63[14].isa) |= 0x10u;
            v66 = nw_array_create();
            isa = v63[13].isa;
            v63[13].isa = (Class)v66;

            nw_array_append((uint64_t)v63[13].isa, v65);
            os_unfair_lock_unlock((os_unfair_lock_t)&v63[14]);
          }
LABEL_100:

          v68 = (void *)v165[5];
          v69 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_2;
          block[3] = &unk_1E149B658;
          v155 = v63;
          v156 = data;
          v70 = *(id *)(a1 + 32);
          v159 = a4;
          v157 = v70;
          v158 = type;
          v71 = v68;
          v72 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v69, 0, block);
          dispatch_async(v71, v72);

          v73 = v155;
          goto LABEL_107;
        }
        __nwlog_obj();
        v108 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
        v152 = (void *)_os_log_send_and_compose_impl();

        v177 = OS_LOG_TYPE_ERROR;
        v176 = 0;
        if (!__nwlog_fault((const char *)v152, &v177, &v176))
        {
LABEL_290:
          if (v152)
            free(v152);
          goto LABEL_100;
        }
        if (v177 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v106 = objc_claimAutoreleasedReturnValue();
          v109 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_182FBE000, v106, v109, "%{public}s called with null connection", buf, 0xCu);
          }
LABEL_289:

          goto LABEL_290;
        }
        if (!v176)
        {
          __nwlog_obj();
          v106 = objc_claimAutoreleasedReturnValue();
          v139 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_182FBE000, v106, v139, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_289;
        }
        v122 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v106 = objc_claimAutoreleasedReturnValue();
        v151 = v177;
        v124 = os_log_type_enabled(v106, v177);
        if (!v122)
        {
          if (v124)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_182FBE000, v106, v151, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }
          goto LABEL_289;
        }
        if (v124)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v122;
          _os_log_impl(&dword_182FBE000, v106, v151, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v105 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
        v152 = (void *)_os_log_send_and_compose_impl();

        v177 = OS_LOG_TYPE_ERROR;
        v176 = 0;
        if (!__nwlog_fault((const char *)v152, &v177, &v176))
          goto LABEL_290;
        if (v177 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v106 = objc_claimAutoreleasedReturnValue();
          v107 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_182FBE000, v106, v107, "%{public}s called with null context", buf, 0xCu);
          }
          goto LABEL_289;
        }
        if (!v176)
        {
          __nwlog_obj();
          v106 = objc_claimAutoreleasedReturnValue();
          v138 = v177;
          if (os_log_type_enabled(v106, v177))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_182FBE000, v106, v138, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_289;
        }
        v122 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v106 = objc_claimAutoreleasedReturnValue();
        v150 = v177;
        v123 = os_log_type_enabled(v106, v177);
        if (!v122)
        {
          if (v123)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
            _os_log_impl(&dword_182FBE000, v106, v150, "%{public}s called with null context, no backtrace", buf, 0xCu);
          }
          goto LABEL_289;
        }
        if (v123)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_content_context_set_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v122;
          _os_log_impl(&dword_182FBE000, v106, v150, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }
      }

      free(v122);
      goto LABEL_290;
    }
    if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v78 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        v79 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        v80 = dispatch_data_get_size(data);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v79;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v80;
        _os_log_impl(&dword_182FBE000, v78, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] oversized message is %zu bytes and not yet complete, rejecting as error", buf, 0x1Cu);
      }

    }
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v81 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v81, OS_LOG_TYPE_INFO))
      {
        v82 = *(_QWORD *)(a1 + 40);
        v83 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v83;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v82;
        _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_INFO, "%{public}s [G%u] failing connection %@ due to oversized message", buf, 0x1Cu);
      }

    }
    v84 = *(void **)(a1 + 40);
    v23 = *(id *)(a1 + 32);
    v85 = v84;
    v25 = v85;
    if (v23)
    {
      if (v85)
      {
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v86 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v86, OS_LOG_TYPE_INFO))
          {
            v87 = *((_DWORD *)v23 + 42);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v87;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v25;
            _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling connection %@", buf, 0x1Cu);
          }

        }
        nw_connection_cancel(v25);
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v88 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v88, OS_LOG_TYPE_DEBUG))
          {
            v89 = *((_DWORD *)v23 + 42);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v89;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v25;
            _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] cancelled %@", buf, 0x1Cu);
          }

        }
        goto LABEL_32;
      }
      __nwlog_obj();
      v128 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
      v35 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v164) = 0;
      if (__nwlog_fault(v35, type, &v164))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v126 = objc_claimAutoreleasedReturnValue();
          v129 = type[0];
          if (os_log_type_enabled(v126, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_182FBE000, v126, v129, "%{public}s called with null connection", buf, 0xCu);
          }
        }
        else if ((_BYTE)v164)
        {
          v143 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v126 = objc_claimAutoreleasedReturnValue();
          v144 = type[0];
          v145 = os_log_type_enabled(v126, type[0]);
          if (v143)
          {
            if (v145)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v143;
              _os_log_impl(&dword_182FBE000, v126, v144, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v143);
            if (!v35)
              goto LABEL_32;
            goto LABEL_234;
          }
          if (v145)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_182FBE000, v126, v144, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v126 = objc_claimAutoreleasedReturnValue();
          v149 = type[0];
          if (os_log_type_enabled(v126, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_182FBE000, v126, v149, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_311;
      }
LABEL_312:
      if (!v35)
        goto LABEL_32;
      goto LABEL_234;
    }
    __nwlog_obj();
    v125 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
    v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v164) = 0;
    if (!__nwlog_fault(v35, type, &v164))
      goto LABEL_312;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v126 = objc_claimAutoreleasedReturnValue();
      v127 = type[0];
      if (os_log_type_enabled(v126, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_182FBE000, v126, v127, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if ((_BYTE)v164)
    {
      v140 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v126 = objc_claimAutoreleasedReturnValue();
      v141 = type[0];
      v142 = os_log_type_enabled(v126, type[0]);
      if (v140)
      {
        if (v142)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v140;
          _os_log_impl(&dword_182FBE000, v126, v141, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v140);
        goto LABEL_312;
      }
      if (v142)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_182FBE000, v126, v141, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v126 = objc_claimAutoreleasedReturnValue();
      v148 = type[0];
      if (os_log_type_enabled(v126, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_182FBE000, v126, v148, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_311:

    goto LABEL_312;
  }
  if (__nwlog_connection_group_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
  v30 = (id)gconnection_groupLogObj;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
  {
    v31 = *(_QWORD *)(a1 + 40);
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
    if (data)
      v33 = (void *)dispatch_data_get_size(data);
    else
      v33 = 0;
    if (v10)
      v46 = nw_content_context_get_identifier(v10);
    else
      v46 = "";
    *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
    *(_WORD *)&buf[12] = 1024;
    v47 = "not ";
    *(_DWORD *)buf = 136448258;
    if (a4)
      v47 = "";
    *(_DWORD *)&buf[14] = v32;
    *(_WORD *)&buf[18] = 2112;
    *(_QWORD *)&buf[20] = v31;
    *(_WORD *)&buf[28] = 2048;
    *(_QWORD *)&buf[30] = data;
    *(_WORD *)&buf[38] = 2048;
    v179 = v33;
    v180 = 2048;
    v181 = v10;
    v182 = 2080;
    v183 = v46;
    v184 = 2080;
    v185 = v47;
    v186 = 2112;
    v187 = v11;
    _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] connection %@ received message (data %p, length %zu bytes, context %p %s, %scomplete, error %@)", buf, 0x58u);
  }

  v9 = data;
  if (!v11)
    goto LABEL_67;
LABEL_4:
  v12 = v11;
  v13 = v12[2];

  if (v13 != 1 || (v14 = v12, v15 = v14[3], v14, v15 != 89))
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v19 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
      {
        v20 = *(_QWORD *)(a1 + 40);
        v21 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v21;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v20;
        *(_WORD *)&buf[28] = 2112;
        *(_QWORD *)&buf[30] = v12;
        _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s [G%u] encountered error on connection %@: %@", buf, 0x26u);
      }

    }
    v22 = *(void **)(a1 + 40);
    v23 = *(id *)(a1 + 32);
    v24 = v22;
    v25 = v24;
    if (v23)
    {
      if (v24)
      {
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v26 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
          {
            v27 = *((_DWORD *)v23 + 42);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v27;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v25;
            _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling connection %@", buf, 0x1Cu);
          }

        }
        nw_connection_cancel(v25);
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v23 + 7)))
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v28 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            v29 = *((_DWORD *)v23 + 42);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v29;
            *(_WORD *)&buf[18] = 2112;
            *(_QWORD *)&buf[20] = v25;
            _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] cancelled %@", buf, 0x1Cu);
          }

        }
        goto LABEL_32;
      }
      __nwlog_obj();
      v38 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
      v35 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      LOBYTE(v164) = 0;
      if (__nwlog_fault(v35, type, &v164))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v39 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_182FBE000, v36, v39, "%{public}s called with null connection", buf, 0xCu);
          }
        }
        else if ((_BYTE)v164)
        {
          v43 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v44 = type[0];
          v45 = os_log_type_enabled(v36, type[0]);
          if (v43)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v43;
              _os_log_impl(&dword_182FBE000, v36, v44, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v43);
            if (!v35)
              goto LABEL_32;
            goto LABEL_234;
          }
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_182FBE000, v36, v44, "%{public}s called with null connection, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v111 = type[0];
          if (os_log_type_enabled(v36, type[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
            _os_log_impl(&dword_182FBE000, v36, v111, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
          }
        }
        goto LABEL_232;
      }
LABEL_233:
      if (!v35)
      {
LABEL_32:

        goto LABEL_175;
      }
LABEL_234:
      free(v35);
      goto LABEL_32;
    }
    __nwlog_obj();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
    v35 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v164) = 0;
    if (!__nwlog_fault(v35, type, &v164))
      goto LABEL_233;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v37 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if ((_BYTE)v164)
    {
      v40 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v41 = type[0];
      v42 = os_log_type_enabled(v36, type[0]);
      if (v40)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v40;
          _os_log_impl(&dword_182FBE000, v36, v41, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v40);
        goto LABEL_233;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_182FBE000, v36, v41, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v36 = objc_claimAutoreleasedReturnValue();
      v110 = type[0];
      if (os_log_type_enabled(v36, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_and_remove_connection";
        _os_log_impl(&dword_182FBE000, v36, v110, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_232:

    goto LABEL_233;
  }
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v16 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      v17 = *(_QWORD *)(a1 + 40);
      v18 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_connection_group_read_on_connection_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v18;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v17;
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] reads cancelled for connection %@", buf, 0x1Cu);
    }

  }
LABEL_175:

}

void sub_183425D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void ___ZL51nw_connection_group_handle_connection_state_changedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection21nw_connection_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_138(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _DWORD *v9;
  _BOOL4 v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  NSObject *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  int v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  NSObject *v29;
  int v30;
  int v31;
  os_log_type_t v32;
  os_log_type_t v33;
  NSObject *v34;
  int v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  _BYTE v41[14];
  __int16 v42;
  uint64_t v43;
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_connection_group_remove_connection_locked";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (!__nwlog_fault(v12, &type, &v36))
      goto LABEL_70;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_connection_group_remove_connection_locked";
          v40 = 2082;
          *(_QWORD *)v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_70:
        if (!v12)
          goto LABEL_6;
LABEL_71:
        free(v12);
        goto LABEL_6;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_connection_group_remove_connection_locked";
        _os_log_impl(&dword_182FBE000, v13, v32, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_69:

    goto LABEL_70;
  }
  if (v4)
  {
    v6 = v3[13];
    if (v6)
    {
      nw_array_remove_object(v6, (uint64_t)v5);
      if (!nw_parameters_get_logging_disabled(v3[7]))
      {
        if (gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v21 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
          {
            v22 = *((_DWORD *)v3 + 42);
            *(_DWORD *)buf = 136446722;
            v39 = "nw_connection_group_remove_connection_locked";
            v40 = 1024;
            *(_DWORD *)v41 = v22;
            *(_WORD *)&v41[4] = 2112;
            *(_QWORD *)&v41[6] = v5;
            _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] removed connection %@", buf, 0x1Cu);
          }

        }
      }
    }
    goto LABEL_6;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v39 = "nw_connection_group_remove_connection_locked";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (!__nwlog_fault(v12, &type, &v36))
    goto LABEL_70;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_connection_group_remove_connection_locked";
      _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_69;
  }
  if (!v36)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v33 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_connection_group_remove_connection_locked";
      _os_log_impl(&dword_182FBE000, v13, v33, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_69;
  }
  v26 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v27 = type;
  v28 = os_log_type_enabled(v13, type);
  if (!v26)
  {
    if (v28)
    {
      *(_DWORD *)buf = 136446210;
      v39 = "nw_connection_group_remove_connection_locked";
      _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_69;
  }
  if (v28)
  {
    *(_DWORD *)buf = 136446466;
    v39 = "nw_connection_group_remove_connection_locked";
    v40 = 2082;
    *(_QWORD *)v41 = v26;
    _os_log_impl(&dword_182FBE000, v13, v27, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v26);
  if (v12)
    goto LABEL_71;
LABEL_6:

  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v17 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
    {
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(_QWORD *)(v18 + 104);
      if (v19)
        v20 = (uint64_t)(*(_QWORD *)(v19 + 24) - *(_QWORD *)(v19 + 16)) >> 3;
      else
        v20 = 0;
      v31 = *(_DWORD *)(v18 + 168);
      *(_DWORD *)buf = 136446978;
      v39 = "nw_connection_group_handle_connection_state_changed_block_invoke";
      v40 = 1024;
      *(_DWORD *)v41 = v31;
      *(_WORD *)&v41[4] = 2048;
      *(_QWORD *)&v41[6] = v20;
      v42 = 2112;
      v43 = v19;
      _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] now has %zu active connections: %@", buf, 0x26u);
    }

  }
  if (nw_array_is_empty(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104)))
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (*(char *)(v7 + 190) < 0)
    {
      if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v7 + 56)) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v29 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
        {
          v30 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
          *(_DWORD *)buf = 136446466;
          v39 = "nw_connection_group_handle_connection_state_changed_block_invoke";
          v40 = 1024;
          *(_DWORD *)v41 = v30;
          _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] now has no active connections, cancelling group", buf, 0x12u);
        }

      }
      nw_connection_group_final_cleanup_locked(*(NWConcrete_nw_connection_group **)(a1 + 32));
    }
    else
    {
      v8 = *(void **)(v7 + 64);
      if (v8)
      {
        v9 = v8;
        v10 = v9[2] == 2;

        if (v10)
        {
          if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
          {
            if (__nwlog_connection_group_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
            v34 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
            {
              v35 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
              *(_DWORD *)buf = 136446466;
              v39 = "nw_connection_group_handle_connection_state_changed_block_invoke";
              v40 = 1024;
              *(_DWORD *)v41 = v35;
              _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] now has no active connections, going into failed state", buf, 0x12u);
            }

          }
          nw_connection_group_set_state_locked(*(void **)(a1 + 32), 3, 0);
        }
      }
    }
  }
}

void nw_connection_group_final_cleanup_locked(NWConcrete_nw_connection_group *a1)
{
  NWConcrete_nw_connection_group *v1;
  NWConcrete_nw_connection_group *v2;
  NSObject *v3;
  int v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v1 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v3 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *((_DWORD *)v2 + 42);
        *(_DWORD *)buf = 136446466;
        v21 = "nw_connection_group_final_cleanup_locked";
        v22 = 1024;
        LODWORD(v23) = v4;
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s [G%u] final group cleanup", buf, 0x12u);
      }

    }
    nw_connection_group_set_state_locked(v2, 4, 0);
    v5 = (void *)*((_QWORD *)v2 + 4);
    *((_QWORD *)v2 + 4) = 0;

    v6 = (void *)*((_QWORD *)v2 + 17);
    *((_QWORD *)v2 + 17) = 0;

    v7 = (void *)*((_QWORD *)v2 + 18);
    *((_QWORD *)v2 + 18) = 0;

    v8 = (void *)*((_QWORD *)v2 + 1);
    *((_QWORD *)v2 + 1) = 0;

    v9 = (void *)*((_QWORD *)v2 + 3);
    *((_QWORD *)v2 + 3) = 0;

    goto LABEL_9;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_connection_group_final_cleanup_locked";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_group_final_cleanup_locked";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_connection_group_final_cleanup_locked";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_group_final_cleanup_locked";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_group_final_cleanup_locked";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v11)
    free(v11);
LABEL_9:

}

void sub_1834269D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_connection_group_set_state_locked(void *a1, signed int a2, void *a3)
{
  unsigned int *v5;
  char *v6;
  char *v7;
  unsigned int v8;
  NSObject *v9;
  unsigned int v10;
  uint64_t v11;
  const char *v12;
  NSObject *v13;
  unsigned int v14;
  signed int v15;
  BOOL logging_disabled;
  id v17;
  unsigned int v18;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  unsigned int v22;
  uint64_t v23;
  const char *v24;
  unsigned int v25;
  uint64_t v26;
  const char *v27;
  char *v28;
  char *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  unsigned int v33;
  uint64_t v34;
  const char *v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  unsigned int v40;
  uint64_t v41;
  const char *v42;
  char *v43;
  const void *v44;
  void *v45;
  void *v46;
  dispatch_qos_class_t v47;
  NSObject *v48;
  id v49;
  dispatch_block_t v50;
  unsigned int v51;
  char *v52;
  char *v53;
  char *v54;
  os_log_type_t v55;
  unsigned int v56;
  uint64_t v57;
  const char *v58;
  os_log_type_t v59;
  unsigned int v60;
  uint64_t v61;
  const char *v62;
  void *v63;
  os_log_type_t v64;
  char *backtrace_string;
  os_log_type_t v66;
  _BOOL4 v67;
  os_log_type_t v68;
  _QWORD block[4];
  unsigned int *v70;
  char *v71;
  id v72;
  signed int v73;
  char v74;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  _BYTE v79[14];
  __int16 v80;
  char *v81;
  __int16 v82;
  char *v83;
  __int16 v84;
  char *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v63 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v77 = "nw_connection_group_set_state_locked";
    v30 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (__nwlog_fault(v30, &type, &v74))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v64 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_connection_group_set_state_locked";
          _os_log_impl(&dword_182FBE000, v31, v64, "%{public}s called with null group", buf, 0xCu);
        }
LABEL_91:

        goto LABEL_92;
      }
      if (!v74)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v68 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_connection_group_set_state_locked";
          _os_log_impl(&dword_182FBE000, v31, v68, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_91;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v31 = objc_claimAutoreleasedReturnValue();
      v66 = type;
      v67 = os_log_type_enabled(v31, type);
      if (!backtrace_string)
      {
        if (v67)
        {
          *(_DWORD *)buf = 136446210;
          v77 = "nw_connection_group_set_state_locked";
          _os_log_impl(&dword_182FBE000, v31, v66, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
        goto LABEL_91;
      }
      if (v67)
      {
        *(_DWORD *)buf = 136446466;
        v77 = "nw_connection_group_set_state_locked";
        v78 = 2082;
        *(_QWORD *)v79 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v31, v66, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_92:
    if (!v30)
      goto LABEL_94;
    goto LABEL_93;
  }
  v8 = v5[10];
  if (v8 == a2 && *((char **)v5 + 6) == v6)
  {
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v5 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v9 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v25 = v5[42];
        v26 = v5[10];
        if (v26 > 4)
          v27 = "<unknown>";
        else
          v27 = off_1E149CE68[v26];
        v53 = (char *)*((_QWORD *)v5 + 6);
        v54 = off_1E149CE68[a2];
        *(_DWORD *)buf = 136447490;
        v77 = "nw_connection_group_set_state_locked";
        v78 = 1024;
        *(_DWORD *)v79 = v25;
        *(_WORD *)&v79[4] = 2082;
        *(_QWORD *)&v79[6] = v27;
        v80 = 2114;
        v81 = v53;
        v82 = 2082;
        v83 = v54;
        v84 = 2114;
        v85 = v7;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Ignoring state transition from (%{public}s, error: %{public}@) -> (%{public}s, error: %{public}@)", buf, 0x3Au);
      }
      goto LABEL_68;
    }
    goto LABEL_94;
  }
  if (v8 == 4)
  {
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v5 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v9 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v10 = v5[42];
        v11 = v5[10];
        if (v11 > 4)
          v12 = "<unknown>";
        else
          v12 = off_1E149CE68[v11];
        v28 = off_1E149CE68[a2];
        *(_DWORD *)buf = 136447234;
        v77 = "nw_connection_group_set_state_locked";
        v78 = 1024;
        *(_DWORD *)v79 = v10;
        *(_WORD *)&v79[4] = 2082;
        *(_QWORD *)&v79[6] = v12;
        v80 = 2082;
        v81 = v28;
        v82 = 2114;
        v83 = v7;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Ignoring state transition from %{public}s -> %{public}s (error %{public}@) while cancelled", buf, 0x30u);
      }
LABEL_68:

      goto LABEL_94;
    }
    goto LABEL_94;
  }
  if (v6 && !nw_parameters_get_logging_disabled(*((_QWORD *)v5 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v13 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v14 = v5[42];
      *(_DWORD *)buf = 136446722;
      v77 = "nw_connection_group_set_state_locked";
      v78 = 1024;
      *(_DWORD *)v79 = v14;
      *(_WORD *)&v79[4] = 2112;
      *(_QWORD *)&v79[6] = v7;
      _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] failed (error %@)", buf, 0x1Cu);
    }

  }
  v15 = v5[10];
  logging_disabled = nw_parameters_get_logging_disabled(*((_QWORD *)v5 + 7));
  if (v15 > a2)
  {
    if (logging_disabled)
      goto LABEL_94;
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v17 = (id)gconnection_groupLogObj;
    v18 = v5[42];
    v19 = v5[10];
    if (v19 > 4)
      v20 = "<unknown>";
    else
      v20 = off_1E149CE68[v19];
    v29 = off_1E149CE68[a2];
    *(_DWORD *)buf = 136447234;
    v77 = "nw_connection_group_set_state_locked";
    v78 = 1024;
    *(_DWORD *)v79 = v18;
    *(_WORD *)&v79[4] = 2082;
    *(_QWORD *)&v79[6] = v20;
    v80 = 2082;
    v81 = v29;
    v82 = 2114;
    v83 = v7;
    v30 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v74 = 0;
    if (!__nwlog_fault(v30, &type, &v74))
      goto LABEL_92;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v31 = (id)gconnection_groupLogObj;
      v32 = type;
      if (os_log_type_enabled(v31, type))
      {
        v33 = v5[42];
        v34 = v5[10];
        if (v34 > 4)
          v35 = "<unknown>";
        else
          v35 = off_1E149CE68[v34];
        *(_DWORD *)buf = 136447234;
        v77 = "nw_connection_group_set_state_locked";
        v78 = 1024;
        *(_DWORD *)v79 = v33;
        *(_WORD *)&v79[4] = 2082;
        *(_QWORD *)&v79[6] = v35;
        v80 = 2082;
        v81 = v29;
        v82 = 2114;
        v83 = v7;
        _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@)", buf, 0x30u);
      }
    }
    else if (v74)
    {
      v36 = __nw_create_backtrace_string();
      if (v36)
      {
        v37 = (char *)v36;
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v38 = (id)gconnection_groupLogObj;
        v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          v40 = v5[42];
          v41 = v5[10];
          if (v41 > 4)
            v42 = "<unknown>";
          else
            v42 = off_1E149CE68[v41];
          *(_DWORD *)buf = 136447490;
          v77 = "nw_connection_group_set_state_locked";
          v78 = 1024;
          *(_DWORD *)v79 = v40;
          *(_WORD *)&v79[4] = 2082;
          *(_QWORD *)&v79[6] = v42;
          v80 = 2082;
          v81 = v29;
          v82 = 2114;
          v83 = v7;
          v84 = 2082;
          v85 = v37;
          _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@), dumping backtrace:%{public}s", buf, 0x3Au);
        }

        free(v37);
        if (!v30)
          goto LABEL_94;
LABEL_93:
        free(v30);
        goto LABEL_94;
      }
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v31 = (id)gconnection_groupLogObj;
      v59 = type;
      if (os_log_type_enabled(v31, type))
      {
        v60 = v5[42];
        v61 = v5[10];
        if (v61 > 4)
          v62 = "<unknown>";
        else
          v62 = off_1E149CE68[v61];
        *(_DWORD *)buf = 136447234;
        v77 = "nw_connection_group_set_state_locked";
        v78 = 1024;
        *(_DWORD *)v79 = v60;
        *(_WORD *)&v79[4] = 2082;
        *(_QWORD *)&v79[6] = v62;
        v80 = 2082;
        v81 = v29;
        v82 = 2114;
        v83 = v7;
        _os_log_impl(&dword_182FBE000, v31, v59, "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@), no backtrace", buf, 0x30u);
      }
    }
    else
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v31 = (id)gconnection_groupLogObj;
      v55 = type;
      if (os_log_type_enabled(v31, type))
      {
        v56 = v5[42];
        v57 = v5[10];
        if (v57 > 4)
          v58 = "<unknown>";
        else
          v58 = off_1E149CE68[v57];
        *(_DWORD *)buf = 136447234;
        v77 = "nw_connection_group_set_state_locked";
        v78 = 1024;
        *(_DWORD *)v79 = v56;
        *(_WORD *)&v79[4] = 2082;
        *(_QWORD *)&v79[6] = v58;
        v80 = 2082;
        v81 = v29;
        v82 = 2114;
        v83 = v7;
        _os_log_impl(&dword_182FBE000, v31, v55, "%{public}s [G%u] invalid state transition %{public}s -> %{public}s (error %{public}@), backtrace limit exceeded", buf, 0x30u);
      }
    }
    goto LABEL_91;
  }
  if (!logging_disabled)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v21 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v22 = v5[42];
      v23 = v5[10];
      if (v23 > 4)
        v24 = "<unknown>";
      else
        v24 = off_1E149CE68[v23];
      v43 = off_1E149CE68[a2];
      *(_DWORD *)buf = 136447234;
      v77 = "nw_connection_group_set_state_locked";
      v78 = 1024;
      *(_DWORD *)v79 = v22;
      *(_WORD *)&v79[4] = 2082;
      *(_QWORD *)&v79[6] = v24;
      v80 = 2082;
      v81 = v43;
      v82 = 2114;
      v83 = v7;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] state changed: %{public}s -> %{public}s (error %{public}@)", buf, 0x30u);
    }

  }
  v5[10] = a2;
  objc_storeStrong((id *)v5 + 6, a3);
  v44 = (const void *)*((_QWORD *)v5 + 4);
  if (v44 && *((_QWORD *)v5 + 1))
  {
    v45 = _Block_copy(v44);
    v46 = (void *)*((_QWORD *)v5 + 1);
    v47 = v5[4];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZL36nw_connection_group_set_state_lockedP30NWConcrete_nw_connection_group27nw_connection_group_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    block[3] = &unk_1E14A5540;
    v70 = v5;
    v73 = a2;
    v71 = v7;
    v72 = v45;
    v48 = v46;
    v49 = v45;
    v50 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v47, 0, block);
    dispatch_async(v48, v50);

  }
  else if (!nw_parameters_get_logging_disabled(*((_QWORD *)v5 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v9 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v51 = v5[42];
      v52 = off_1E149CE68[a2];
      *(_DWORD *)buf = 136446978;
      v77 = "nw_connection_group_set_state_locked";
      v78 = 1024;
      *(_DWORD *)v79 = v51;
      *(_WORD *)&v79[4] = 2080;
      *(_QWORD *)&v79[6] = v52;
      v80 = 2112;
      v81 = v7;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] not delivering state %s, error %@ since no handler/queue is set", buf, 0x26u);
    }
    goto LABEL_68;
  }
LABEL_94:

}

uint64_t ___ZL36nw_connection_group_set_state_lockedP30NWConcrete_nw_connection_group27nw_connection_group_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke(uint64_t a1)
{
  NSObject *v3;
  int v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  const char *v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v3 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v5 = *(unsigned int *)(a1 + 56);
      if (v5 > 4)
        v6 = "<unknown>";
      else
        v6 = off_1E149CE68[v5];
      v7 = *(_QWORD *)(a1 + 40);
      v8 = 136446978;
      v9 = "nw_connection_group_set_state_locked_block_invoke";
      v10 = 1024;
      v11 = v4;
      v12 = 2080;
      v13 = v6;
      v14 = 2112;
      v15 = v7;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] delivering state %s, error %@", (uint8_t *)&v8, 0x26u);
    }

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

uint64_t __Block_byref_object_copy__8574(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__8575(uint64_t a1)
{

}

void ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_142(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1[4] + 136));
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), *(id *)(a1[4] + 8));
}

void ___ZL38nw_connection_group_read_on_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_2(uint64_t a1)
{
  void *v2;
  BOOL v5;
  uint64_t v6;
  NSObject *v7;
  int v8;
  NSObject *v9;
  const char *v10;
  int v11;
  const char *v12;
  NSObject *v13;
  int v14;
  NSObject *v15;
  const char *identifier;
  const char *v17;
  size_t size;
  int v19;
  const char *v20;
  int v21;
  const char *v22;
  __int16 v23;
  int v24;
  __int16 v25;
  NSObject *v26;
  __int16 v27;
  const char *v28;
  __int16 v29;
  const char *v30;
  __int16 v31;
  size_t v32;
  __int16 v33;
  const char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 32);
  v5 = v2 == &__block_literal_global_3_41726
    || v2 == &__block_literal_global_41718
    || v2 == &__block_literal_global_4
    || v2 == &__block_literal_global_5_41741;
  if (!v5 || *(_QWORD *)(a1 + 40))
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v13 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v14 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 168);
        v15 = *(NSObject **)(a1 + 32);
        identifier = nw_content_context_get_identifier(v15);
        v17 = *(const char **)(a1 + 40);
        if (v17)
          size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 40));
        else
          size = 0;
        v19 = *(unsigned __int8 *)(a1 + 64);
        v22 = "nw_connection_group_read_on_connection_block_invoke_2";
        v21 = 136447746;
        v23 = 1024;
        if (v19)
          v20 = "true";
        else
          v20 = "false";
        v24 = v14;
        v25 = 2048;
        v26 = v15;
        v27 = 2080;
        v28 = identifier;
        v29 = 2048;
        v30 = v17;
        v31 = 2048;
        v32 = size;
        v33 = 2080;
        v34 = v20;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] calling receive handler with context (%p: %s), content (%p: %zu bytes), complete %s", (uint8_t *)&v21, 0x44u);
      }

    }
    v6 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40);
    (*(void (**)(uint64_t, _QWORD))(v6 + 16))(v6, *(_QWORD *)(a1 + 40));
  }
  else if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v7 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      v8 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 168);
      v9 = *(NSObject **)(a1 + 32);
      v10 = nw_content_context_get_identifier(v9);
      v11 = *(unsigned __int8 *)(a1 + 64);
      v22 = "nw_connection_group_read_on_connection_block_invoke";
      v23 = 1024;
      v21 = 136447234;
      if (v11)
        v12 = "true";
      else
        v12 = "false";
      v24 = v8;
      v25 = 2048;
      v26 = v9;
      v27 = 2080;
      v28 = v10;
      v29 = 2080;
      v30 = v12;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s [G%u] not calling receive handler with context (%p: %s), complete %s", (uint8_t *)&v21, 0x30u);
    }

  }
}

void nw_connection_group_touch_connection(NWConcrete_nw_connection_group *a1, NWConcrete_nw_connection *a2)
{
  NWConcrete_nw_connection_group *v3;
  NWConcrete_nw_connection *v4;
  NWConcrete_nw_connection *v5;
  void (**v6)(_QWORD);
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD aBlock[4];
  NWConcrete_nw_connection_group *v22;
  NWConcrete_nw_connection *v23;
  char v24;
  os_log_type_t v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_connection_group_touch_connection";
    v8 = (char *)_os_log_send_and_compose_impl();

    v25 = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v8, &v25, &v24))
      goto LABEL_38;
    if (v25 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_connection_group_touch_connection";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v24)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v25;
      v15 = os_log_type_enabled(v9, v25);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_connection_group_touch_connection";
          v28 = 2082;
          v29 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          goto LABEL_4;
LABEL_39:
        free(v8);
        goto LABEL_4;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_connection_group_touch_connection";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = v25;
      if (os_log_type_enabled(v9, v25))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_connection_group_touch_connection";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL36nw_connection_group_touch_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
    aBlock[3] = &unk_1E14ACE68;
    v22 = v3;
    v23 = v5;
    v6 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
    v6[2](v6);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_connection_group_touch_connection";
  v8 = (char *)_os_log_send_and_compose_impl();

  v25 = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (!__nwlog_fault(v8, &v25, &v24))
    goto LABEL_38;
  if (v25 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_connection_group_touch_connection";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v24)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = v25;
    if (os_log_type_enabled(v9, v25))
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_connection_group_touch_connection";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = v25;
  v18 = os_log_type_enabled(v9, v25);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_connection_group_touch_connection";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v27 = "nw_connection_group_touch_connection";
    v28 = 2082;
    v29 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_39;
LABEL_4:

}

void sub_183427FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void ___ZL36nw_connection_group_touch_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (nw_array_remove_object(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104), *(_QWORD *)(a1 + 40)))
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v2 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
      {
        v3 = *(_QWORD *)(a1 + 40);
        v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        v5 = 136446722;
        v6 = "nw_connection_group_touch_connection_block_invoke";
        v7 = 1024;
        v8 = v4;
        v9 = 2112;
        v10 = v3;
        _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] touching connection %@", (uint8_t *)&v5, 0x1Cu);
      }

    }
    nw_array_insert_object_at_index(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 104), *(void **)(a1 + 40), 0);
  }
}

void nw_connection_group_create_listener_from_connection_locked(NWConcrete_nw_connection_group *a1, NWConcrete_nw_connection *a2)
{
  NWConcrete_nw_connection_group *v3;
  NWConcrete_nw_connection *v4;
  NWConcrete_nw_connection *v5;
  nw_listener_t v6;
  void *v7;
  NWConcrete_nw_connection_group *v8;
  NSObject *v9;
  id v10;
  void *v11;
  _QWORD *v12;
  id v13;
  _BOOL8 v14;
  id v15;
  NSObject *v16;
  uint64_t v17;
  void **v18;
  void *v19;
  _DWORD *v20;
  int v21;
  void *v22;
  nw_listener_t *v23;
  id v24;
  _QWORD *v25;
  id v26;
  _BOOL8 v27;
  id v28;
  NSObject *v29;
  nw_listener_t *v30;
  NSObject *v31;
  NSObject *v32;
  int v33;
  uint64_t v34;
  _DWORD *v35;
  void *v36;
  _DWORD *v37;
  int v38;
  void *v39;
  NSObject *v40;
  void *v41;
  unsigned int v42;
  const char *v43;
  id v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  os_log_type_t v52;
  os_log_type_t v53;
  os_log_type_t v54;
  unsigned int v55;
  const char *v56;
  char *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  unsigned int v60;
  const char *v61;
  os_log_type_t v62;
  unsigned int v63;
  const char *v64;
  unsigned int v65;
  const char *v66;
  void *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  void *v71;
  os_log_type_t v72;
  char *backtrace_string;
  os_log_type_t v74;
  _BOOL4 v75;
  char *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  void *v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  void *v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  void *v87;
  char *v88;
  NSObject *v89;
  os_log_type_t v90;
  void *v91;
  os_log_type_t v92;
  os_log_type_t v93;
  os_log_type_t v94;
  char *v95;
  os_log_type_t v96;
  _BOOL4 v97;
  char *v98;
  os_log_type_t v99;
  _BOOL4 v100;
  char *v101;
  os_log_type_t v102;
  _BOOL4 v103;
  char *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  void *v107;
  char *v108;
  NSObject *v109;
  os_log_type_t v110;
  void *v111;
  NSObject *v112;
  os_log_type_t v113;
  void *v114;
  os_log_type_t v115;
  os_log_type_t v116;
  os_log_type_t v117;
  os_log_type_t v118;
  os_log_type_t v119;
  char *v120;
  _BOOL4 v121;
  char *v122;
  _BOOL4 v123;
  _BOOL4 v124;
  os_log_type_t v125;
  os_log_type_t v126;
  os_log_type_t v127;
  os_log_type_t v128;
  os_log_type_t v129;
  os_log_type_t v130;
  char *v131;
  NSObject *listener;
  void *v133;
  nw_listener_t *v134;
  NWConcrete_nw_connection_group *v135;
  NWConcrete_nw_connection_group *v136;
  os_log_type_t v137[8];
  uint64_t v138;
  void (*v139)(uint64_t, int, void *);
  void *v140;
  nw_listener_t *v141;
  char v142;
  _BYTE type[24];
  void *v144;
  nw_listener_t *v145;
  _BYTE buf[24];
  char *v147;
  nw_listener_t *v148;
  _BYTE handler[32];
  void **v150;
  uint64_t v151;

  v151 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)handler = 136446210;
    *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
    v68 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type[0] = 0;
    if (!__nwlog_fault(v68, buf, type))
      goto LABEL_143;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v70 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null group", handler, 0xCu);
      }
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v74 = buf[0];
      v75 = os_log_type_enabled(v69, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v75)
        {
          *(_DWORD *)handler = 136446466;
          *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
          *(_WORD *)&handler[12] = 2082;
          *(_QWORD *)&handler[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v69, v74, "%{public}s called with null group, dumping backtrace:%{public}s", handler, 0x16u);
        }

        free(backtrace_string);
LABEL_143:
        if (!v68)
          goto LABEL_60;
        goto LABEL_144;
      }
      if (v75)
      {
        *(_DWORD *)handler = 136446210;
        *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_182FBE000, v69, v74, "%{public}s called with null group, no backtrace", handler, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v93 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_182FBE000, v69, v93, "%{public}s called with null group, backtrace limit exceeded", handler, 0xCu);
      }
    }
LABEL_142:

    goto LABEL_143;
  }
  if (!v4)
  {
    __nwlog_obj();
    v71 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)handler = 136446210;
    *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
    v68 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type[0] = 0;
    if (!__nwlog_fault(v68, buf, type))
      goto LABEL_143;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v72 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_182FBE000, v69, v72, "%{public}s called with null connection", handler, 0xCu);
      }
    }
    else if (type[0])
    {
      v76 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v77 = buf[0];
      v78 = os_log_type_enabled(v69, (os_log_type_t)buf[0]);
      if (v76)
      {
        if (v78)
        {
          *(_DWORD *)handler = 136446466;
          *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
          *(_WORD *)&handler[12] = 2082;
          *(_QWORD *)&handler[14] = v76;
          _os_log_impl(&dword_182FBE000, v69, v77, "%{public}s called with null connection, dumping backtrace:%{public}s", handler, 0x16u);
        }

        free(v76);
        if (!v68)
          goto LABEL_60;
LABEL_144:
        free(v68);
        goto LABEL_60;
      }
      if (v78)
      {
        *(_DWORD *)handler = 136446210;
        *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_182FBE000, v69, v77, "%{public}s called with null connection, no backtrace", handler, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      v94 = buf[0];
      if (os_log_type_enabled(v69, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)handler = 136446210;
        *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        _os_log_impl(&dword_182FBE000, v69, v94, "%{public}s called with null connection, backtrace limit exceeded", handler, 0xCu);
      }
    }
    goto LABEL_142;
  }
  if (*((int *)v3 + 10) <= 2 && !*((_QWORD *)v3 + 11))
  {
    v6 = nw_listener_create_with_connection(&v4->super, *((nw_parameters_t *)v3 + 7));
    v7 = (void *)*((_QWORD *)v3 + 11);
    *((_QWORD *)v3 + 11) = v6;

    if (*((_QWORD *)v3 + 11))
    {
      nw_connection_group_set_state_locked(v3, 1, 0);
      v8 = v3;
      v9 = *((_QWORD *)v3 + 11);
      v135 = v8;
      if (v9)
      {
        v136 = v8;
        v10 = *((id *)v3 + 7);
        v11 = v10;
        if (v10)
        {
          v12 = v10;
          v13 = *(id *)(v12[13] + 136);

          if (!v13)
          {
            __nwlog_obj();
            v87 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)handler = 136446210;
            *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
            v88 = (char *)_os_log_send_and_compose_impl();

            buf[0] = 16;
            type[0] = 0;
            if (!__nwlog_fault(v88, buf, type))
              goto LABEL_210;
            if (buf[0] == 17)
            {
              __nwlog_obj();
              v89 = objc_claimAutoreleasedReturnValue();
              v90 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v89, v90, "%{public}s called with null context", handler, 0xCu);
              }
            }
            else if (type[0])
            {
              v101 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v89 = objc_claimAutoreleasedReturnValue();
              v102 = buf[0];
              v103 = os_log_type_enabled(v89, (os_log_type_t)buf[0]);
              if (v101)
              {
                if (v103)
                {
                  *(_DWORD *)handler = 136446466;
                  *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&handler[12] = 2082;
                  *(_QWORD *)&handler[14] = v101;
                  _os_log_impl(&dword_182FBE000, v89, v102, "%{public}s called with null context, dumping backtrace:%{public}s", handler, 0x16u);
                }

                free(v101);
                if (!v88)
                  goto LABEL_212;
                goto LABEL_211;
              }
              if (v103)
              {
                *(_DWORD *)handler = 136446210;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v89, v102, "%{public}s called with null context, no backtrace", handler, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v89 = objc_claimAutoreleasedReturnValue();
              v118 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v89, v118, "%{public}s called with null context, backtrace limit exceeded", handler, 0xCu);
              }
            }
            goto LABEL_209;
          }
          v14 = nw_context_copy_workloop(v13);
          if (v14)
            goto LABEL_13;
          if (nw_context_copy_implicit_context::onceToken[0] != -1)
            dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
          v15 = (id)nw_context_copy_implicit_context::implicit_context;
          v14 = nw_context_copy_workloop(v15);

          if (v14)
            goto LABEL_13;
          __nwlog_obj();
          v91 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)handler = 136446210;
          *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
          v88 = (char *)_os_log_send_and_compose_impl();

          buf[0] = 16;
          type[0] = 0;
          if (__nwlog_fault(v88, buf, type))
          {
            if (buf[0] == 17)
            {
              __nwlog_obj();
              v89 = objc_claimAutoreleasedReturnValue();
              v92 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v89, v92, "%{public}s called with null workloop", handler, 0xCu);
              }
LABEL_209:

              goto LABEL_210;
            }
            if (!type[0])
            {
              __nwlog_obj();
              v89 = objc_claimAutoreleasedReturnValue();
              v119 = buf[0];
              if (os_log_type_enabled(v89, (os_log_type_t)buf[0]))
              {
                *(_DWORD *)handler = 136446210;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v89, v119, "%{public}s called with null workloop, backtrace limit exceeded", handler, 0xCu);
              }
              goto LABEL_209;
            }
            v104 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v89 = objc_claimAutoreleasedReturnValue();
            v105 = buf[0];
            v106 = os_log_type_enabled(v89, (os_log_type_t)buf[0]);
            if (!v104)
            {
              if (v106)
              {
                *(_DWORD *)handler = 136446210;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v89, v105, "%{public}s called with null workloop, no backtrace", handler, 0xCu);
              }
              goto LABEL_209;
            }
            if (v106)
            {
              *(_DWORD *)handler = 136446466;
              *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
              *(_WORD *)&handler[12] = 2082;
              *(_QWORD *)&handler[14] = v104;
              _os_log_impl(&dword_182FBE000, v89, v105, "%{public}s called with null workloop, dumping backtrace:%{public}s", handler, 0x16u);
            }

            free(v104);
          }
LABEL_210:
          if (!v88)
          {
LABEL_212:
            v14 = 0;
LABEL_13:

            goto LABEL_14;
          }
LABEL_211:
          free(v88);
          goto LABEL_212;
        }
        __nwlog_obj();
        v83 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)handler = 136446210;
        *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
        v84 = (char *)_os_log_send_and_compose_impl();

        buf[0] = 16;
        type[0] = 0;
        if (__nwlog_fault(v84, buf, type))
        {
          if (buf[0] == 17)
          {
            __nwlog_obj();
            v85 = objc_claimAutoreleasedReturnValue();
            v86 = buf[0];
            if (os_log_type_enabled(v85, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)handler = 136446210;
              *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null parameters", handler, 0xCu);
            }
          }
          else if (type[0])
          {
            v98 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v85 = objc_claimAutoreleasedReturnValue();
            v99 = buf[0];
            v100 = os_log_type_enabled(v85, (os_log_type_t)buf[0]);
            if (v98)
            {
              if (v100)
              {
                *(_DWORD *)handler = 136446466;
                *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
                *(_WORD *)&handler[12] = 2082;
                *(_QWORD *)&handler[14] = v98;
                _os_log_impl(&dword_182FBE000, v85, v99, "%{public}s called with null parameters, dumping backtrace:%{public}s", handler, 0x16u);
              }

              free(v98);
              goto LABEL_201;
            }
            if (v100)
            {
              *(_DWORD *)handler = 136446210;
              *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_182FBE000, v85, v99, "%{public}s called with null parameters, no backtrace", handler, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v85 = objc_claimAutoreleasedReturnValue();
            v117 = buf[0];
            if (os_log_type_enabled(v85, (os_log_type_t)buf[0]))
            {
              *(_DWORD *)handler = 136446210;
              *(_QWORD *)&handler[4] = "nw_connection_group_copy_workloop";
              _os_log_impl(&dword_182FBE000, v85, v117, "%{public}s called with null parameters, backtrace limit exceeded", handler, 0xCu);
            }
          }

        }
LABEL_201:
        if (v84)
          free(v84);
        v14 = 0;
LABEL_14:

        nw_listener_set_queue(v9, (dispatch_queue_t)v14);
        v16 = *((_QWORD *)v3 + 11);
        v17 = MEMORY[0x1E0C809B0];
        *(_QWORD *)handler = MEMORY[0x1E0C809B0];
        *(_QWORD *)&handler[8] = 3221225472;
        *(_QWORD *)&handler[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke;
        *(_QWORD *)&handler[24] = &unk_1E14ACF48;
        v18 = v136;
        v150 = v18;
        nw_listener_set_state_changed_handler(v16, handler);
        v19 = v18[8];
        if (!v19)
          goto LABEL_39;
        v20 = v19;
        v21 = v20[2];

        if (v21 == 1)
        {
          v22 = (void *)*((_QWORD *)v3 + 11);
          *(_QWORD *)buf = v17;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2;
          v147 = (char *)&unk_1E149B788;
          v23 = v18;
          v148 = v23;
          nw_listener_set_new_packet_handler(v22, buf);
          if (!v23[12])
          {
LABEL_23:

LABEL_58:
            *((_BYTE *)v18 + 190) |= 8u;
            nw_listener_start(*((nw_listener_t *)v3 + 11));

LABEL_59:
            goto LABEL_60;
          }
          listener = v23[12];
          v134 = v23;
          v24 = *((id *)v3 + 7);
          v133 = v24;
          if (v24)
          {
            v25 = v24;
            v26 = *(id *)(v25[13] + 136);

            if (v26)
            {
              v27 = nw_context_copy_workloop(v26);
              if (v27
                || (v28 = nw_context_copy_implicit_context(), v27 = nw_context_copy_workloop(v28),
                                                              v28,
                                                              v27))
              {
LABEL_21:

LABEL_22:
                nw_listener_set_queue(listener, (dispatch_queue_t)v27);

                v29 = v23[12];
                *(_QWORD *)type = v17;
                *(_QWORD *)&type[8] = 3221225472;
                *(_QWORD *)&type[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3;
                v144 = &unk_1E149B7B0;
                v30 = v134;
                v145 = v30;
                nw_listener_set_new_connection_handler(v29, type);
                v31 = v23[12];
                *(_QWORD *)v137 = v17;
                v138 = 3221225472;
                v139 = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_4;
                v140 = &unk_1E14ACF48;
                v141 = v30;
                nw_listener_set_state_changed_handler(v31, v137);
                nw_listener_start(v23[12]);

                goto LABEL_23;
              }
              __nwlog_obj();
              v114 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)type = 136446210;
              *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
              v131 = (char *)_os_log_send_and_compose_impl();

              v137[0] = OS_LOG_TYPE_ERROR;
              v142 = 0;
              if (__nwlog_fault(v131, v137, &v142))
              {
                if (v137[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v112 = objc_claimAutoreleasedReturnValue();
                  v115 = v137[0];
                  if (os_log_type_enabled(v112, v137[0]))
                  {
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v112, v115, "%{public}s called with null workloop", type, 0xCu);
                  }
LABEL_248:

                  goto LABEL_249;
                }
                if (!v142)
                {
                  __nwlog_obj();
                  v112 = objc_claimAutoreleasedReturnValue();
                  v127 = v137[0];
                  if (os_log_type_enabled(v112, v137[0]))
                  {
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v112, v127, "%{public}s called with null workloop, backtrace limit exceeded", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                v122 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v112 = objc_claimAutoreleasedReturnValue();
                v129 = v137[0];
                v124 = os_log_type_enabled(v112, v137[0]);
                if (!v122)
                {
                  if (v124)
                  {
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v112, v129, "%{public}s called with null workloop, no backtrace", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                if (v124)
                {
                  *(_DWORD *)type = 136446466;
                  *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&type[12] = 2082;
                  *(_QWORD *)&type[14] = v122;
                  _os_log_impl(&dword_182FBE000, v112, v129, "%{public}s called with null workloop, dumping backtrace:%{public}s", type, 0x16u);
                }
                goto LABEL_227;
              }
            }
            else
            {
              __nwlog_obj();
              v111 = (void *)objc_claimAutoreleasedReturnValue();
              *(_DWORD *)type = 136446210;
              *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
              v131 = (char *)_os_log_send_and_compose_impl();

              v137[0] = OS_LOG_TYPE_ERROR;
              v142 = 0;
              if (__nwlog_fault(v131, v137, &v142))
              {
                if (v137[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v112 = objc_claimAutoreleasedReturnValue();
                  v113 = v137[0];
                  if (os_log_type_enabled(v112, v137[0]))
                  {
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v112, v113, "%{public}s called with null context", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                if (!v142)
                {
                  __nwlog_obj();
                  v112 = objc_claimAutoreleasedReturnValue();
                  v126 = v137[0];
                  if (os_log_type_enabled(v112, v137[0]))
                  {
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v112, v126, "%{public}s called with null context, backtrace limit exceeded", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                v122 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v112 = objc_claimAutoreleasedReturnValue();
                v128 = v137[0];
                v123 = os_log_type_enabled(v112, v137[0]);
                if (!v122)
                {
                  if (v123)
                  {
                    *(_DWORD *)type = 136446210;
                    *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                    _os_log_impl(&dword_182FBE000, v112, v128, "%{public}s called with null context, no backtrace", type, 0xCu);
                  }
                  goto LABEL_248;
                }
                if (v123)
                {
                  *(_DWORD *)type = 136446466;
                  *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&type[12] = 2082;
                  *(_QWORD *)&type[14] = v122;
                  _os_log_impl(&dword_182FBE000, v112, v128, "%{public}s called with null context, dumping backtrace:%{public}s", type, 0x16u);
                }
LABEL_227:

                free(v122);
              }
            }
LABEL_249:
            if (v131)
              free(v131);
            v27 = 0;
            goto LABEL_21;
          }
          __nwlog_obj();
          v107 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)type = 136446210;
          *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
          v108 = (char *)_os_log_send_and_compose_impl();

          v137[0] = OS_LOG_TYPE_ERROR;
          v142 = 0;
          if (__nwlog_fault(v108, v137, &v142))
          {
            if (v137[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v109 = objc_claimAutoreleasedReturnValue();
              v110 = v137[0];
              if (os_log_type_enabled(v109, v137[0]))
              {
                *(_DWORD *)type = 136446210;
                *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v109, v110, "%{public}s called with null parameters", type, 0xCu);
              }
            }
            else if (v142)
            {
              v120 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v109 = objc_claimAutoreleasedReturnValue();
              v130 = v137[0];
              v121 = os_log_type_enabled(v109, v137[0]);
              if (v120)
              {
                if (v121)
                {
                  *(_DWORD *)type = 136446466;
                  *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                  *(_WORD *)&type[12] = 2082;
                  *(_QWORD *)&type[14] = v120;
                  _os_log_impl(&dword_182FBE000, v109, v130, "%{public}s called with null parameters, dumping backtrace:%{public}s", type, 0x16u);
                }

                free(v120);
                goto LABEL_240;
              }
              if (v121)
              {
                *(_DWORD *)type = 136446210;
                *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v109, v130, "%{public}s called with null parameters, no backtrace", type, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v109 = objc_claimAutoreleasedReturnValue();
              v125 = v137[0];
              if (os_log_type_enabled(v109, v137[0]))
              {
                *(_DWORD *)type = 136446210;
                *(_QWORD *)&type[4] = "nw_connection_group_copy_workloop";
                _os_log_impl(&dword_182FBE000, v109, v125, "%{public}s called with null parameters, backtrace limit exceeded", type, 0xCu);
              }
            }

          }
LABEL_240:
          if (v108)
            free(v108);
          v27 = 0;
          goto LABEL_22;
        }
        v36 = v18[8];
        if (!v36)
          goto LABEL_39;
        v37 = v36;
        v38 = v37[2];

        if (v38 == 2)
        {
LABEL_35:
          v40 = *((_QWORD *)v3 + 11);
          *(_QWORD *)buf = v17;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_168;
          v147 = (char *)&unk_1E149B7B0;
          v148 = v18;
          nw_listener_set_new_connection_handler(v40, buf);

          goto LABEL_58;
        }
        v39 = v18[8];
        if (!v39)
          goto LABEL_39;
        if (nw_group_descriptor_get_type(v39) == 4)
          goto LABEL_35;
        if (!v18[8])
        {
LABEL_39:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
          v45 = (char *)_os_log_send_and_compose_impl();

          type[0] = 16;
          v137[0] = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v45, type, v137))
            goto LABEL_56;
          if (type[0] == 17)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v46 = (id)gLogObj;
            v47 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s Group descriptor is not set", buf, 0xCu);
            }
          }
          else if (v137[0])
          {
            v48 = __nw_create_backtrace_string();
            if (v48)
            {
              v49 = (char *)v48;
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v50 = (id)gLogObj;
              v51 = type[0];
              if (os_log_type_enabled(v50, (os_log_type_t)type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v49;
                _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v49);
              if (!v45)
                goto LABEL_58;
              goto LABEL_57;
            }
            __nwlog_obj();
            v46 = objc_claimAutoreleasedReturnValue();
            v53 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_182FBE000, v46, v53, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v46 = (id)gLogObj;
            v52 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              _os_log_impl(&dword_182FBE000, v46, v52, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
            }
          }
          goto LABEL_55;
        }
        __nwlog_obj();
        v41 = (void *)objc_claimAutoreleasedReturnValue();
        v42 = nw_group_descriptor_get_type(v18[8]);
        if (v42 > 4)
          v43 = "unknown";
        else
          v43 = off_1E149B878[v42];
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
        *(_WORD *)&buf[12] = 2080;
        *(_QWORD *)&buf[14] = v43;
        v45 = (char *)_os_log_send_and_compose_impl();

        type[0] = 16;
        v137[0] = OS_LOG_TYPE_DEFAULT;
        if (__nwlog_fault(v45, type, v137))
        {
          if (type[0] == 17)
          {
            __nwlog_obj();
            v46 = objc_claimAutoreleasedReturnValue();
            v54 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              v55 = nw_group_descriptor_get_type(v18[8]);
              if (v55 > 4)
                v56 = "unknown";
              else
                v56 = off_1E149B878[v55];
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v56;
              _os_log_impl(&dword_182FBE000, v46, v54, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
            }
LABEL_55:

            goto LABEL_56;
          }
          if (v137[0] == OS_LOG_TYPE_DEFAULT)
          {
            __nwlog_obj();
            v46 = objc_claimAutoreleasedReturnValue();
            v62 = type[0];
            if (os_log_type_enabled(v46, (os_log_type_t)type[0]))
            {
              v63 = nw_group_descriptor_get_type(v18[8]);
              if (v63 > 4)
                v64 = "unknown";
              else
                v64 = off_1E149B878[v63];
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v64;
              _os_log_impl(&dword_182FBE000, v46, v62, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
            }
            goto LABEL_55;
          }
          v57 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          v58 = type[0];
          v59 = os_log_type_enabled(v46, (os_log_type_t)type[0]);
          if (!v57)
          {
            if (v59)
            {
              v65 = nw_group_descriptor_get_type(v18[8]);
              if (v65 > 4)
                v66 = "unknown";
              else
                v66 = off_1E149B878[v65];
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = v66;
              _os_log_impl(&dword_182FBE000, v46, v58, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
            }
            goto LABEL_55;
          }
          if (v59)
          {
            v60 = nw_group_descriptor_get_type(v18[8]);
            if (v60 > 4)
              v61 = "unknown";
            else
              v61 = off_1E149B878[v60];
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = v61;
            *(_WORD *)&buf[22] = 2082;
            v147 = v57;
            _os_log_impl(&dword_182FBE000, v46, v58, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v57);
        }
LABEL_56:
        if (!v45)
          goto LABEL_58;
LABEL_57:
        free(v45);
        goto LABEL_58;
      }
      __nwlog_obj();
      v79 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)handler = 136446210;
      *(_QWORD *)&handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
      v80 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      type[0] = 0;
      if (__nwlog_fault(v80, buf, type))
      {
        if (buf[0] == 17)
        {
          __nwlog_obj();
          v81 = objc_claimAutoreleasedReturnValue();
          v82 = buf[0];
          if (os_log_type_enabled(v81, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)handler = 136446210;
            *(_QWORD *)&handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
            _os_log_impl(&dword_182FBE000, v81, v82, "%{public}s called with null group->listener", handler, 0xCu);
          }
        }
        else if (type[0])
        {
          v95 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v81 = objc_claimAutoreleasedReturnValue();
          v96 = buf[0];
          v97 = os_log_type_enabled(v81, (os_log_type_t)buf[0]);
          if (v95)
          {
            if (v97)
            {
              *(_DWORD *)handler = 136446466;
              *(_QWORD *)&handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
              *(_WORD *)&handler[12] = 2082;
              *(_QWORD *)&handler[14] = v95;
              _os_log_impl(&dword_182FBE000, v81, v96, "%{public}s called with null group->listener, dumping backtrace:%{public}s", handler, 0x16u);
            }

            free(v95);
            goto LABEL_196;
          }
          if (v97)
          {
            *(_DWORD *)handler = 136446210;
            *(_QWORD *)&handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
            _os_log_impl(&dword_182FBE000, v81, v96, "%{public}s called with null group->listener, no backtrace", handler, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v81 = objc_claimAutoreleasedReturnValue();
          v116 = buf[0];
          if (os_log_type_enabled(v81, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)handler = 136446210;
            *(_QWORD *)&handler[4] = "nw_connection_group_set_up_and_start_listener_locked";
            _os_log_impl(&dword_182FBE000, v81, v116, "%{public}s called with null group->listener, backtrace limit exceeded", handler, 0xCu);
          }
        }

      }
LABEL_196:
      if (v80)
        free(v80);
      goto LABEL_59;
    }
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v32 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        v33 = *((_DWORD *)v3 + 42);
        v34 = *((_QWORD *)v3 + 7);
        *(_DWORD *)handler = 136446722;
        *(_QWORD *)&handler[4] = "nw_connection_group_create_listener_from_connection_locked";
        *(_WORD *)&handler[12] = 1024;
        *(_DWORD *)&handler[14] = v33;
        *(_WORD *)&handler[18] = 2112;
        *(_QWORD *)&handler[20] = v34;
        _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to create listener with parameters %@", handler, 0x1Cu);
      }

    }
    v35 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 22);
    nw_connection_group_set_state_locked(v3, 3, v35);

  }
LABEL_60:

}

void sub_183429E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke(uint64_t a1, unsigned int a2, void *a3)
{
  id v5;
  os_unfair_lock_s *v6;
  id v7;
  uint64_t v8;
  os_unfair_lock_s *v9;
  void (**v10)(_QWORD);
  int v11;
  void (**v12)(_QWORD);
  NSObject *v13;
  const char *v14;
  NSObject *v15;
  BOOL logging_disabled;
  NSObject *v17;
  const char *v18;
  NSObject *v19;
  const char *v20;
  uint32_t v21;
  const char *v22;
  uint32_t v23;
  const char *v24;
  NSObject *v25;
  uint32_t v26;
  uint32_t v27;
  uint32_t v28;
  void (**v29)(_QWORD);
  NSObject *v30;
  uint32_t v31;
  void (**v32)(_QWORD);
  NSObject *v33;
  uint32_t v34;
  void *v35;
  NSObject *v36;
  uint32_t v37;
  void (**v38)(_QWORD);
  _DWORD *posix_error;
  _DWORD *v40;
  void *v41;
  void *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  NSObject *v49;
  uint32_t os_unfair_lock_opaque;
  os_log_type_t v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  char *backtrace_string;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  os_log_type_t type[15];
  char v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  _BYTE buf[40];
  id v67;
  _BYTE aBlock[24];
  void *v69;
  os_unfair_lock_s *v70;
  uint64_t *v71;
  uint64_t v72;

  v72 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = (os_unfair_lock_s *)*(id *)(a1 + 32);
  v7 = v5;
  if (v6)
  {
    v62 = 0;
    v63 = &v62;
    v65 = 0;
    v8 = MEMORY[0x1E0C809B0];
    v64 = 0x2020000000;
    *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock[8] = 3221225472;
    *(_QWORD *)&aBlock[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke;
    v69 = &unk_1E14ACE40;
    v71 = &v62;
    v9 = v6;
    v70 = v9;
    v10 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v6 + 43);
    v10[2](v10);
    os_unfair_lock_unlock(v6 + 43);

    v11 = *((_DWORD *)v63 + 6);
    if (a2 == 4 && v11 == 4)
    {
      if (!nw_parameters_get_logging_disabled(*(_QWORD *)&v9[14]._os_unfair_lock_opaque) && gLogDatapath)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v49 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEBUG))
        {
          os_unfair_lock_opaque = v9[42]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = os_unfair_lock_opaque;
          _os_log_impl(&dword_182FBE000, v49, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] listener cancelled", buf, 0x12u);
        }

      }
      *(_QWORD *)buf = v8;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_169;
      *(_QWORD *)&buf[24] = &unk_1E14ACFD0;
      *(_QWORD *)&buf[32] = v9;
      v12 = (void (**)(_QWORD))_Block_copy(buf);
      os_unfair_lock_lock(v6 + 43);
      v12[2](v12);
      os_unfair_lock_unlock(v6 + 43);

      v13 = *(NSObject **)&buf[32];
      goto LABEL_7;
    }
    if (v11 == 4)
    {
      if (nw_parameters_get_logging_disabled(*(_QWORD *)&v9[14]._os_unfair_lock_opaque))
        goto LABEL_8;
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v13 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        if (a2 > 4)
          v14 = "<unknown>";
        else
          v14 = off_1E149CE68[a2];
        v21 = v9[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v21;
        *(_WORD *)&buf[18] = 2080;
        *(_QWORD *)&buf[20] = v14;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] already cancelled, ignoring listener state %s", buf, 0x1Cu);
      }
LABEL_7:

LABEL_8:
      _Block_object_dispose(&v62, 8);
      goto LABEL_9;
    }
    v15 = *(id *)&v9[22]._os_unfair_lock_opaque;
    if (!v15)
    {
      if (!nw_parameters_get_logging_disabled(*(_QWORD *)&v9[14]._os_unfair_lock_opaque))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v19 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
        {
          if (a2 > 4)
            v20 = "<unknown>";
          else
            v20 = off_1E149CE68[a2];
          v27 = v9[42]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          *(_WORD *)&buf[18] = 2080;
          *(_QWORD *)&buf[20] = v20;
          _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] no listener present, ignoring listener state %s", buf, 0x1Cu);
        }

      }
      v13 = 0;
      goto LABEL_7;
    }
    v13 = v15;
    if (a2)
    {
      logging_disabled = nw_parameters_get_logging_disabled(*(_QWORD *)&v9[14]._os_unfair_lock_opaque);
      if (v7)
      {
        if (logging_disabled)
          goto LABEL_50;
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v17 = (id)gconnection_groupLogObj;
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
          goto LABEL_49;
        if (a2 > 4)
          v18 = "<unknown>";
        else
          v18 = off_1E149CE68[a2];
        v23 = v9[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136447234;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v23;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v13;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v18;
        *(_WORD *)&buf[38] = 2112;
        v67 = v7;
        v24 = "%{public}s [G%u] listener %@ changed to state %s (error %@)";
        v25 = v17;
        v26 = 48;
      }
      else
      {
        if (logging_disabled)
          goto LABEL_50;
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v17 = (id)gconnection_groupLogObj;
        if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
        {
LABEL_49:

LABEL_50:
          switch(a2)
          {
            case 1u:
              *(_QWORD *)buf = v8;
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_170;
              *(_QWORD *)&buf[24] = &unk_1E14ACE68;
              *(_QWORD *)&buf[32] = v9;
              v67 = v7;
              v29 = (void (**)(_QWORD))_Block_copy(buf);
              os_unfair_lock_lock(v6 + 43);
              v29[2](v29);
              os_unfair_lock_unlock(v6 + 43);

              break;
            case 2u:
              if (!nw_parameters_get_logging_disabled(*(_QWORD *)&v9[14]._os_unfair_lock_opaque))
              {
                if (__nwlog_connection_group_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
                v30 = (id)gconnection_groupLogObj;
                if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
                {
                  v31 = v9[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v31;
                  _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] listener ready", buf, 0x12u);
                }

              }
              *(_QWORD *)buf = v8;
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_171;
              *(_QWORD *)&buf[24] = &unk_1E14ACE68;
              *(_QWORD *)&buf[32] = v9;
              v67 = v7;
              v32 = (void (**)(_QWORD))_Block_copy(buf);
              os_unfair_lock_lock(v6 + 43);
              v32[2](v32);
              os_unfair_lock_unlock(v6 + 43);

              break;
            case 3u:
              if (!nw_parameters_get_logging_disabled(*(_QWORD *)&v9[14]._os_unfair_lock_opaque))
              {
                if (__nwlog_connection_group_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
                v33 = (id)gconnection_groupLogObj;
                if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
                {
                  v34 = v9[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v34;
                  _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_ERROR, "%{public}s [G%u] listener failed with error ", buf, 0x12u);
                }

              }
              if (v7)
              {
                *(_QWORD *)buf = v8;
                *(_QWORD *)&buf[8] = 3221225472;
                *(_QWORD *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_172;
                *(_QWORD *)&buf[24] = &unk_1E14ACE68;
                *(_QWORD *)&buf[32] = v9;
                v67 = v7;
                v35 = _Block_copy(buf);
                *(_QWORD *)type = v35;
                nw_synchronize<void({block_pointer} {__strong})(void)>(v6 + 43, (uint64_t)type);

              }
              else
              {
                posix_error = nw_error_create_posix_error(50);
                *(_QWORD *)buf = v8;
                *(_QWORD *)&buf[8] = 3221225472;
                *(_QWORD *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2;
                *(_QWORD *)&buf[24] = &unk_1E14ACE68;
                *(_QWORD *)&buf[32] = v9;
                v67 = posix_error;
                v40 = posix_error;
                v41 = _Block_copy(buf);
                *(_QWORD *)type = v41;
                nw_synchronize<void({block_pointer} {__strong})(void)>(v6 + 43, (uint64_t)type);

              }
              break;
            case 4u:
              if (!nw_parameters_get_logging_disabled(*(_QWORD *)&v9[14]._os_unfair_lock_opaque))
              {
                if (__nwlog_connection_group_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
                v36 = (id)gconnection_groupLogObj;
                if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
                {
                  v37 = v9[42]._os_unfair_lock_opaque;
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v37;
                  _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Listener cancelled", buf, 0x12u);
                }

              }
              *(_QWORD *)buf = v8;
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_173;
              *(_QWORD *)&buf[24] = &unk_1E14ACFD0;
              *(_QWORD *)&buf[32] = v9;
              v38 = (void (**)(_QWORD))_Block_copy(buf);
              os_unfair_lock_lock(v6 + 43);
              v38[2](v38);
              os_unfair_lock_unlock(v6 + 43);

              break;
            default:
              goto LABEL_7;
          }
          goto LABEL_7;
        }
        if (a2 > 4)
          v22 = "<unknown>";
        else
          v22 = off_1E149CE68[a2];
        v28 = v9[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v28;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v13;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = v22;
        v24 = "%{public}s [G%u] listener %@ changed to state %s";
        v25 = v17;
        v26 = 38;
      }
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, v24, buf, v26);
      goto LABEL_49;
    }
    __nwlog_obj();
    v52 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
    v53 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v61 = 0;
    if (__nwlog_fault(v53, type, &v61))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v55 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
          _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null listener_state", buf, 0xCu);
        }
      }
      else if (v61)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v57 = type[0];
        v58 = os_log_type_enabled(v54, type[0]);
        if (backtrace_string)
        {
          if (v58)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v54, v57, "%{public}s called with null listener_state, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_114;
        }
        if (v58)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
          _os_log_impl(&dword_182FBE000, v54, v57, "%{public}s called with null listener_state, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v54 = objc_claimAutoreleasedReturnValue();
        v59 = type[0];
        if (os_log_type_enabled(v54, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_handle_listener_state_change";
          _os_log_impl(&dword_182FBE000, v54, v59, "%{public}s called with null listener_state, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_114:
    if (v53)
      free(v53);
    goto LABEL_7;
  }
  __nwlog_obj();
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)aBlock = 136446210;
  *(_QWORD *)&aBlock[4] = "nw_connection_group_handle_listener_state_change";
  v43 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  LOBYTE(v62) = 0;
  if (__nwlog_fault(v43, buf, &v62))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v45 = buf[0];
      if (os_log_type_enabled(v44, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_handle_listener_state_change";
        _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null group", aBlock, 0xCu);
      }
    }
    else if ((_BYTE)v62)
    {
      v46 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v47 = buf[0];
      v48 = os_log_type_enabled(v44, (os_log_type_t)buf[0]);
      if (v46)
      {
        if (v48)
        {
          *(_DWORD *)aBlock = 136446466;
          *(_QWORD *)&aBlock[4] = "nw_connection_group_handle_listener_state_change";
          *(_WORD *)&aBlock[12] = 2082;
          *(_QWORD *)&aBlock[14] = v46;
          _os_log_impl(&dword_182FBE000, v44, v47, "%{public}s called with null group, dumping backtrace:%{public}s", aBlock, 0x16u);
        }

        free(v46);
        goto LABEL_101;
      }
      if (v48)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_handle_listener_state_change";
        _os_log_impl(&dword_182FBE000, v44, v47, "%{public}s called with null group, no backtrace", aBlock, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v44 = objc_claimAutoreleasedReturnValue();
      v51 = buf[0];
      if (os_log_type_enabled(v44, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_handle_listener_state_change";
        _os_log_impl(&dword_182FBE000, v44, v51, "%{public}s called with null group, backtrace limit exceeded", aBlock, 0xCu);
      }
    }

  }
LABEL_101:
  if (v43)
    free(v43);
LABEL_9:

}

void sub_18342AD0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id a23,id a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id a29)
{
  void *v29;
  void *v30;
  void *v31;
  void *v32;
  void *v33;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2(uint64_t a1, void *a2, void *a3, void *a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  _DWORD *v21;
  void (**v22)(_QWORD);
  nw_content_context_t v23;
  id v24;
  id v25;
  NSObject *v26;
  id v27;
  _BOOL8 v28;
  Class isa;
  void *v30;
  dispatch_qos_class_t v31;
  NSObject *v32;
  NSObject *v33;
  dispatch_block_t v34;
  int v35;
  size_t size;
  void *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  void *v41;
  os_log_type_t v42;
  void *v43;
  os_log_type_t v44;
  void *v45;
  os_log_type_t v46;
  void *v47;
  os_log_type_t v48;
  void *v49;
  os_log_type_t v50;
  char *backtrace_string;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  char *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  _BOOL4 v61;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  _BOOL4 v65;
  void *v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  char *v70;
  _BOOL4 v71;
  os_log_type_t v72;
  os_log_type_t v73;
  os_log_type_t v74;
  os_log_type_t v75;
  os_log_type_t v76;
  os_log_type_t v77;
  os_log_type_t v78;
  os_log_type_t type;
  const char *v80;
  void *v81;
  id v82;
  NSObject *data;
  NSObject *v84;
  id v85;
  _QWORD aBlock[4];
  id v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t (*v93)(uint64_t, uint64_t);
  void (*v94)(uint64_t);
  id v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  void *(*v99)(uint64_t, uint64_t);
  void (*v100)(uint64_t);
  id v101;
  char v102;
  os_log_type_t v103;
  _BYTE buf[40];
  nw_content_context_t v105;
  _BYTE v106[20];
  uint64_t v107;

  v107 = *MEMORY[0x1E0C80C00];
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v15 = a6;
  v16 = *(id *)(a1 + 32);
  v17 = v11;
  v85 = v12;
  v84 = v13;
  v82 = v14;
  data = v15;
  v81 = v17;
  if (!v16)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
    v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v38, aBlock, &v96))
      goto LABEL_137;
    if (LOBYTE(aBlock[0]) == 17)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v40 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v72 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v72, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v52 = objc_claimAutoreleasedReturnValue();
    v53 = aBlock[0];
    v54 = os_log_type_enabled(v52, aBlock[0]);
    if (backtrace_string)
    {
      if (v54)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
LABEL_137:
      if (!v38)
        goto LABEL_29;
LABEL_138:
      free(v38);
      goto LABEL_29;
    }
    if (v54)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
      _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s called with null group, no backtrace", buf, 0xCu);
    }
    goto LABEL_136;
  }
  if (!v17)
  {
    __nwlog_obj();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
    v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v38, aBlock, &v96))
      goto LABEL_137;
    if (LOBYTE(aBlock[0]) == 17)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v42 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v42, "%{public}s called with null source", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v73 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v73, "%{public}s called with null source, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    v55 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v52 = objc_claimAutoreleasedReturnValue();
    v56 = aBlock[0];
    v57 = os_log_type_enabled(v52, aBlock[0]);
    if (!v55)
    {
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v52, v56, "%{public}s called with null source, no backtrace", buf, 0xCu);
      }
      goto LABEL_136;
    }
    if (v57)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v55;
      _os_log_impl(&dword_182FBE000, v52, v56, "%{public}s called with null source, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_89;
  }
  if (!v85)
  {
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
    v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v38, aBlock, &v96))
      goto LABEL_137;
    if (LOBYTE(aBlock[0]) == 17)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v44 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v44, "%{public}s called with null destination", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v74 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v74, "%{public}s called with null destination, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    v55 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v52 = objc_claimAutoreleasedReturnValue();
    v58 = aBlock[0];
    v59 = os_log_type_enabled(v52, aBlock[0]);
    if (!v55)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v52, v58, "%{public}s called with null destination, no backtrace", buf, 0xCu);
      }
      goto LABEL_136;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v55;
      _os_log_impl(&dword_182FBE000, v52, v58, "%{public}s called with null destination, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_89;
  }
  if (!v84)
  {
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
    v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v38, aBlock, &v96))
      goto LABEL_137;
    if (LOBYTE(aBlock[0]) == 17)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v46 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v46, "%{public}s called with null interface", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v75 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v75, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    v55 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v52 = objc_claimAutoreleasedReturnValue();
    v60 = aBlock[0];
    v61 = os_log_type_enabled(v52, aBlock[0]);
    if (!v55)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v52, v60, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
      goto LABEL_136;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v55;
      _os_log_impl(&dword_182FBE000, v52, v60, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_89:

    free(v55);
    if (!v38)
      goto LABEL_29;
    goto LABEL_138;
  }
  if (!v82)
  {
    __nwlog_obj();
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
    v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v38, aBlock, &v96))
      goto LABEL_137;
    if (LOBYTE(aBlock[0]) == 17)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v48 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v48, "%{public}s called with null socket", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!(_BYTE)v96)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v76 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v76, "%{public}s called with null socket, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    v55 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v52 = objc_claimAutoreleasedReturnValue();
    v62 = aBlock[0];
    v63 = os_log_type_enabled(v52, aBlock[0]);
    if (v55)
    {
      if (v63)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v55;
        _os_log_impl(&dword_182FBE000, v52, v62, "%{public}s called with null socket, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_89;
    }
    if (v63)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
      _os_log_impl(&dword_182FBE000, v52, v62, "%{public}s called with null socket, no backtrace", buf, 0xCu);
    }
LABEL_136:

    goto LABEL_137;
  }
  if (!data)
  {
    __nwlog_obj();
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
    v38 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(aBlock[0]) = 16;
    LOBYTE(v96) = 0;
    if (!__nwlog_fault(v38, aBlock, &v96))
      goto LABEL_137;
    if (LOBYTE(aBlock[0]) == 17)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v50 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v50, "%{public}s called with null packet", buf, 0xCu);
      }
LABEL_118:

      goto LABEL_137;
    }
    if (!(_BYTE)v96)
    {
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v77 = aBlock[0];
      if (os_log_type_enabled(v39, aBlock[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        _os_log_impl(&dword_182FBE000, v39, v77, "%{public}s called with null packet, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    v55 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v52 = objc_claimAutoreleasedReturnValue();
    v64 = aBlock[0];
    v65 = os_log_type_enabled(v52, aBlock[0]);
    if (v55)
    {
      if (v65)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v55;
        _os_log_impl(&dword_182FBE000, v52, v64, "%{public}s called with null packet, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_89;
    }
    if (v65)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
      _os_log_impl(&dword_182FBE000, v52, v64, "%{public}s called with null packet, no backtrace", buf, 0xCu);
    }
    goto LABEL_136;
  }
  if (!nw_parameters_get_logging_disabled(*((_QWORD *)v16 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v18 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v19 = *((_DWORD *)v16 + 42);
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v19;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 2112;
      *(_QWORD *)&buf[30] = v85;
      *(_WORD *)&buf[38] = 2112;
      v105 = v84;
      *(_WORD *)v106 = 2048;
      *(_QWORD *)&v106[2] = dispatch_data_get_size(data);
      *(_WORD *)&v106[10] = 2112;
      *(_QWORD *)&v106[12] = v82;
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] new incoming packet <%@->%@@%@, %zu bytes> on socket %@", buf, 0x44u);
    }

  }
  v96 = 0;
  v97 = &v96;
  v98 = 0x3032000000;
  v99 = __Block_byref_object_copy__134;
  v100 = __Block_byref_object_dispose__135;
  v101 = 0;
  v90 = 0;
  v91 = &v90;
  v92 = 0x3032000000;
  v93 = __Block_byref_object_copy__8574;
  v94 = __Block_byref_object_dispose__8575;
  v20 = MEMORY[0x1E0C809B0];
  v95 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL42nw_connection_group_handle_incoming_packetP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectS3_PU26objcproto15OS_nw_interfaceS1_PU27objcproto16OS_nw_fd_wrapperS1_PU27objcproto16OS_dispatch_dataS1__block_invoke;
  aBlock[3] = &unk_1E14A54F0;
  v88 = &v96;
  v21 = v16;
  v87 = v21;
  v89 = &v90;
  v22 = (void (**)(_QWORD))_Block_copy(aBlock);
  os_unfair_lock_lock((os_unfair_lock_t)v16 + 43);
  v22[2](v22);
  os_unfair_lock_unlock((os_unfair_lock_t)v16 + 43);

  if (v97[5] && v91[5])
  {
    v23 = nw_content_context_create("multicast packet");
    v24 = v85;
    v25 = v81;
    v26 = v84;
    v27 = v82;
    if (v23)
    {
      if (v23 != (nw_content_context_t)&__block_literal_global_5_41741
        && v23 != (nw_content_context_t)&__block_literal_global_4
        && v23 != (nw_content_context_t)&__block_literal_global_3_41726
        && v23 != (nw_content_context_t)&__block_literal_global_41718)
      {
        os_unfair_lock_lock((os_unfair_lock_t)&v23[14]);
        BYTE6(v23[14].isa) |= 0x20u;
        v28 = nw_array_create();
        isa = v23[13].isa;
        v23[13].isa = (Class)v28;

        nw_array_append((uint64_t)v23[13].isa, v24);
        nw_array_append((uint64_t)v23[13].isa, v25);
        nw_array_append((uint64_t)v23[13].isa, v26);
        nw_array_append((uint64_t)v23[13].isa, v27);
        os_unfair_lock_unlock((os_unfair_lock_t)&v23[14]);
      }
LABEL_21:

      v30 = (void *)v91[5];
      v31 = v21[4];
      *(_QWORD *)buf = v20;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL42nw_connection_group_handle_incoming_packetP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectS3_PU26objcproto15OS_nw_interfaceS1_PU27objcproto16OS_nw_fd_wrapperS1_PU27objcproto16OS_dispatch_dataS1__block_invoke_2;
      *(_QWORD *)&buf[24] = &unk_1E14A2198;
      *(_QWORD *)&buf[32] = v21;
      v105 = v23;
      *(_QWORD *)v106 = data;
      *(_QWORD *)&v106[8] = &v96;
      v32 = v23;
      v33 = v30;
      v34 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v31, 0, buf);
      dispatch_async(v33, v34);

LABEL_27:
      goto LABEL_28;
    }
    __nwlog_obj();
    v66 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_content_context_set_multicast_info";
    v80 = (const char *)_os_log_send_and_compose_impl();

    v103 = OS_LOG_TYPE_ERROR;
    v102 = 0;
    v67 = (char *)v80;
    if (!__nwlog_fault(v80, &v103, &v102))
    {
LABEL_146:
      if (v67)
        free(v67);
      goto LABEL_21;
    }
    if (v103 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v68 = objc_claimAutoreleasedReturnValue();
      v69 = v103;
      if (os_log_type_enabled(v68, v103))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_content_context_set_multicast_info";
        _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v102)
    {
      v70 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v68 = objc_claimAutoreleasedReturnValue();
      type = v103;
      v71 = os_log_type_enabled(v68, v103);
      if (v70)
      {
        if (v71)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_content_context_set_multicast_info";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v70;
          _os_log_impl(&dword_182FBE000, v68, type, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v70);
        goto LABEL_145;
      }
      if (v71)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_content_context_set_multicast_info";
        _os_log_impl(&dword_182FBE000, v68, type, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v68 = objc_claimAutoreleasedReturnValue();
      v78 = v103;
      if (os_log_type_enabled(v68, v103))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_content_context_set_multicast_info";
        _os_log_impl(&dword_182FBE000, v68, v78, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

LABEL_145:
    v67 = (char *)v80;
    goto LABEL_146;
  }
  if (!nw_parameters_get_logging_disabled(*((_QWORD *)v16 + 7)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v32 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      v35 = v21[42];
      size = dispatch_data_get_size(data);
      *(_DWORD *)buf = 136447490;
      *(_QWORD *)&buf[4] = "nw_connection_group_handle_incoming_packet";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v35;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v17;
      *(_WORD *)&buf[28] = 2112;
      *(_QWORD *)&buf[30] = v85;
      *(_WORD *)&buf[38] = 2112;
      v105 = v84;
      *(_WORD *)v106 = 2048;
      *(_QWORD *)&v106[2] = size;
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_ERROR, "%{public}s [G%u] no receive handler or client queue, ignoring incoming packet <%@->%@@%@, %zu bytes>", buf, 0x3Au);
    }
    goto LABEL_27;
  }
LABEL_28:

  _Block_object_dispose(&v90, 8);
  _Block_object_dispose(&v96, 8);

LABEL_29:
}

void sub_18342C250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,id a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39)
{
  void *v39;

  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a34, 8);

  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3(uint64_t a1, NWConcrete_nw_connection *a2)
{
  nw_connection_group_handle_incoming_connection(*(NWConcrete_nw_connection_group **)(a1 + 32), a2);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_4(uint64_t a1, int a2, void *a3)
{
  id v5;
  NSObject *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  void (**v12)(_QWORD);
  unsigned __int8 *v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  void (**v19)(_QWORD);
  _QWORD v20[4];
  os_unfair_lock_s *v21;
  id v22;
  _QWORD v23[4];
  id v24;
  _QWORD aBlock[4];
  os_unfair_lock_s *v26;
  _BYTE *v27;
  _BYTE buf[32];
  void (*v29)(uint64_t);
  id v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  if (a2 == 3)
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v14 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
      {
        v15 = *(_QWORD *)(a1 + 32);
        v16 = *(_DWORD *)(v15 + 168);
        v17 = *(_QWORD *)(v15 + 96);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v16;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v17;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_INFO, "%{public}s [G%u] unicast listener %@ failed", buf, 0x1Cu);
      }

    }
    v18 = *(os_unfair_lock_s **)(a1 + 32);
    v20[0] = MEMORY[0x1E0C809B0];
    v20[1] = 3221225472;
    v20[2] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_167;
    v20[3] = &unk_1E14ACE68;
    v21 = v18;
    v22 = v5;
    v19 = (void (**)(_QWORD))_Block_copy(v20);
    v18 += 43;
    os_unfair_lock_lock(v18);
    v19[2](v19);
    os_unfair_lock_unlock(v18);

  }
  else if (a2 == 2)
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v6 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v7 = *(_QWORD *)(a1 + 32);
        v8 = *(_DWORD *)(v7 + 168);
        v9 = *(_QWORD *)(v7 + 96);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_set_up_and_start_listener_locked_block_invoke_4";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v8;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v9;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [G%u] unicast listener %@ ready", buf, 0x1Cu);
      }

    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    *(_QWORD *)&buf[24] = __Block_byref_object_copy__8574;
    v29 = __Block_byref_object_dispose__8575;
    v30 = 0;
    v10 = MEMORY[0x1E0C809B0];
    v11 = *(os_unfair_lock_s **)(a1 + 32);
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_163;
    aBlock[3] = &unk_1E14ACE40;
    v27 = buf;
    v26 = v11;
    v12 = (void (**)(_QWORD))_Block_copy(aBlock);
    v11 += 43;
    os_unfair_lock_lock(v11);
    v12[2](v12);
    os_unfair_lock_unlock(v11);

    v13 = *(unsigned __int8 **)(*(_QWORD *)&buf[8] + 40);
    v23[0] = v10;
    v23[1] = 3221225472;
    v23[2] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_164;
    v23[3] = &unk_1E14AC200;
    v24 = *(id *)(a1 + 32);
    nw_array_apply(v13, (uint64_t)v23);

    _Block_object_dispose(buf, 8);
  }

}

void sub_18342C674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_168(uint64_t a1, NWConcrete_nw_connection *a2)
{
  nw_connection_group_handle_incoming_connection(*(NWConcrete_nw_connection_group **)(a1 + 32), a2);
}

void nw_connection_group_handle_incoming_connection(NWConcrete_nw_connection_group *a1, NWConcrete_nw_connection *a2)
{
  NWConcrete_nw_connection_group *v3;
  NWConcrete_nw_connection *v4;
  NWConcrete_nw_connection *v5;
  NSObject *v6;
  int v7;
  uint64_t v8;
  NWConcrete_nw_connection *v9;
  NWConcrete_nw_connection_group *v10;
  void (**v11)(_QWORD);
  void *v12;
  void *v13;
  dispatch_qos_class_t v14;
  NSObject *v15;
  id v16;
  dispatch_block_t v17;
  NSObject *v18;
  void (**v19)(_QWORD);
  id v20;
  int v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  int v25;
  NWConcrete_nw_connection *v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  os_log_type_t v32;
  int v33;
  os_log_type_t v34;
  int v35;
  void *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  void *v40;
  os_log_type_t v41;
  char *backtrace_string;
  os_log_type_t v43;
  _BOOL4 v44;
  os_log_type_t v45;
  _BOOL4 v46;
  os_log_type_t v47;
  os_log_type_t v48;
  NWConcrete_nw_connection *v49;
  _QWORD v50[4];
  NWConcrete_nw_connection_group *v51;
  NSObject *v52;
  _QWORD block[4];
  NWConcrete_nw_connection_group *v54;
  NWConcrete_nw_connection *v55;
  id v56;
  _QWORD aBlock[4];
  NWConcrete_nw_connection *v58;
  NWConcrete_nw_connection_group *v59;
  char v60;
  os_log_type_t v61;
  uint8_t buf[4];
  const char *v63;
  __int16 v64;
  _BYTE v65[14];
  __int16 v66;
  char *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v49 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v36 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v63 = "nw_connection_group_handle_incoming_connection";
    v37 = (char *)_os_log_send_and_compose_impl();

    v61 = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (!__nwlog_fault(v37, &v61, &v60))
      goto LABEL_78;
    if (v61 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = v61;
      if (os_log_type_enabled(v38, v61))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (!v60)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v47 = v61;
      if (os_log_type_enabled(v38, v61))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_182FBE000, v38, v47, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_77;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v38 = objc_claimAutoreleasedReturnValue();
    v43 = v61;
    v44 = os_log_type_enabled(v38, v61);
    if (!backtrace_string)
    {
      if (v44)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_182FBE000, v38, v43, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (v44)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_connection_group_handle_incoming_connection";
      v64 = 2082;
      *(_QWORD *)v65 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v38, v43, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_65;
  }
  v5 = v4;
  if (v4)
  {
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v6 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        v7 = *((_DWORD *)v3 + 42);
        *(_DWORD *)buf = 136446722;
        v63 = "nw_connection_group_handle_incoming_connection";
        v64 = 1024;
        *(_DWORD *)v65 = v7;
        *(_WORD *)&v65[4] = 2112;
        *(_QWORD *)&v65[6] = v5;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEFAULT, "%{public}s [G%u] new incoming connection %@", buf, 0x1Cu);
      }

      v5 = v49;
    }
    v8 = MEMORY[0x1E0C809B0];
    if (!*((_QWORD *)v3 + 18))
    {
      v50[0] = MEMORY[0x1E0C809B0];
      v50[1] = 3221225472;
      v50[2] = ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_175;
      v50[3] = &unk_1E14ACE68;
      v51 = v3;
      v18 = v5;
      v52 = v18;
      v19 = (void (**)(_QWORD))_Block_copy(v50);
      os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
      v19[2](v19);
      os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

      nw_connection_start(v18);
LABEL_26:
      v26 = v49;
      goto LABEL_27;
    }
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
    aBlock[3] = &unk_1E14ACE68;
    v9 = v5;
    v58 = v9;
    v10 = v3;
    v59 = v10;
    v11 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
    v11[2](v11);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

    if (*((_QWORD *)v10 + 1))
    {
      v12 = _Block_copy(*((const void **)v3 + 18));
      v13 = (void *)*((_QWORD *)v10 + 1);
      v14 = *((_DWORD *)v10 + 4);
      block[0] = v8;
      block[1] = 3221225472;
      block[2] = ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_2;
      block[3] = &unk_1E14A8D98;
      v54 = v10;
      v55 = v9;
      v56 = v12;
      v15 = v13;
      v16 = v12;
      v17 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v14, 0, block);
      dispatch_async(v15, v17);

LABEL_25:
      goto LABEL_26;
    }
    if (nw_parameters_get_logging_disabled(*((_QWORD *)v3 + 7)))
      goto LABEL_25;
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v20 = (id)gconnection_groupLogObj;
    v21 = *((_DWORD *)v10 + 42);
    *(_DWORD *)buf = 136446722;
    v63 = "nw_connection_group_handle_incoming_connection";
    v64 = 1024;
    *(_DWORD *)v65 = v21;
    *(_WORD *)&v65[4] = 2112;
    *(_QWORD *)&v65[6] = v9;
    v22 = (char *)_os_log_send_and_compose_impl();

    v61 = OS_LOG_TYPE_ERROR;
    v60 = 0;
    if (__nwlog_fault(v22, &v61, &v60))
    {
      if (v61 == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v23 = (id)gconnection_groupLogObj;
        v24 = v61;
        if (os_log_type_enabled(v23, v61))
        {
          v25 = *((_DWORD *)v10 + 42);
          *(_DWORD *)buf = 136446722;
          v63 = "nw_connection_group_handle_incoming_connection";
          v64 = 1024;
          *(_DWORD *)v65 = v25;
          *(_WORD *)&v65[4] = 2112;
          *(_QWORD *)&v65[6] = v9;
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s [G%u] not delivering connection %@ since no queue is set", buf, 0x1Cu);
        }
      }
      else if (v60)
      {
        v27 = __nw_create_backtrace_string();
        if (v27)
        {
          v28 = (char *)v27;
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v29 = (id)gconnection_groupLogObj;
          v30 = v61;
          if (os_log_type_enabled(v29, v61))
          {
            v31 = *((_DWORD *)v10 + 42);
            *(_DWORD *)buf = 136446978;
            v63 = "nw_connection_group_handle_incoming_connection";
            v64 = 1024;
            *(_DWORD *)v65 = v31;
            *(_WORD *)&v65[4] = 2112;
            *(_QWORD *)&v65[6] = v9;
            v66 = 2082;
            v67 = v28;
            _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s [G%u] not delivering connection %@ since no queue is set, dumping backtrace:%{public}s", buf, 0x26u);
          }

          free(v28);
          if (!v22)
            goto LABEL_25;
          goto LABEL_24;
        }
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v23 = (id)gconnection_groupLogObj;
        v34 = v61;
        if (os_log_type_enabled(v23, v61))
        {
          v35 = *((_DWORD *)v10 + 42);
          *(_DWORD *)buf = 136446722;
          v63 = "nw_connection_group_handle_incoming_connection";
          v64 = 1024;
          *(_DWORD *)v65 = v35;
          *(_WORD *)&v65[4] = 2112;
          *(_QWORD *)&v65[6] = v9;
          _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s [G%u] not delivering connection %@ since no queue is set, no backtrace", buf, 0x1Cu);
        }
      }
      else
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v23 = (id)gconnection_groupLogObj;
        v32 = v61;
        if (os_log_type_enabled(v23, v61))
        {
          v33 = *((_DWORD *)v10 + 42);
          *(_DWORD *)buf = 136446722;
          v63 = "nw_connection_group_handle_incoming_connection";
          v64 = 1024;
          *(_DWORD *)v65 = v33;
          *(_WORD *)&v65[4] = 2112;
          *(_QWORD *)&v65[6] = v9;
          _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s [G%u] not delivering connection %@ since no queue is set, backtrace limit exceeded", buf, 0x1Cu);
        }
      }

    }
    if (!v22)
      goto LABEL_25;
LABEL_24:
    free(v22);
    goto LABEL_25;
  }
  __nwlog_obj();
  v40 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v63 = "nw_connection_group_handle_incoming_connection";
  v37 = (char *)_os_log_send_and_compose_impl();

  v61 = OS_LOG_TYPE_ERROR;
  v60 = 0;
  if (__nwlog_fault(v37, &v61, &v60))
  {
    if (v61 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v41 = v61;
      if (os_log_type_enabled(v38, v61))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s called with null new_connection", buf, 0xCu);
      }
LABEL_77:

      goto LABEL_78;
    }
    if (!v60)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v48 = v61;
      if (os_log_type_enabled(v38, v61))
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_182FBE000, v38, v48, "%{public}s called with null new_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_77;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v38 = objc_claimAutoreleasedReturnValue();
    v45 = v61;
    v46 = os_log_type_enabled(v38, v61);
    if (!backtrace_string)
    {
      if (v46)
      {
        *(_DWORD *)buf = 136446210;
        v63 = "nw_connection_group_handle_incoming_connection";
        _os_log_impl(&dword_182FBE000, v38, v45, "%{public}s called with null new_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_77;
    }
    if (v46)
    {
      *(_DWORD *)buf = 136446466;
      v63 = "nw_connection_group_handle_incoming_connection";
      v64 = 2082;
      *(_QWORD *)v65 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v38, v45, "%{public}s called with null new_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_65:

    free(backtrace_string);
  }
LABEL_78:
  v26 = v49;
  if (v37)
    free(v37);
LABEL_27:

}

void sub_18342D178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  id *v15;
  id *v16;

  _Unwind_Resume(a1);
}

void ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1)
{
  nw_connection_set_group_uuid(*(void **)(a1 + 32), *(_QWORD *)(a1 + 40) + 120);
}

uint64_t ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_2(_QWORD *a1)
{
  NSObject *v3;
  uint64_t v4;
  int v5;
  int v6;
  const char *v7;
  __int16 v8;
  int v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(a1[4] + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v3 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = a1[5];
      v5 = *(_DWORD *)(a1[4] + 168);
      v6 = 136446722;
      v7 = "nw_connection_group_handle_incoming_connection_block_invoke_2";
      v8 = 1024;
      v9 = v5;
      v10 = 2112;
      v11 = v4;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] delivering connection %@", (uint8_t *)&v6, 0x1Cu);
    }

  }
  return (*(uint64_t (**)(void))(a1[6] + 16))();
}

uint64_t ___ZL46nw_connection_group_handle_incoming_connectionP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke_175(uint64_t a1)
{
  return nw_connection_group_add_connection_locked(*(NWConcrete_nw_connection_group **)(a1 + 32), *(NWConcrete_nw_connection **)(a1 + 40));
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_163(uint64_t a1)
{
  uint64_t v2;
  void *v3;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 112));
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 112);
  *(_QWORD *)(v2 + 112) = 0;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 190) |= 0x20u;
}

uint64_t ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_2_164(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  _QWORD v8[4];
  id v9;
  id v10;

  v4 = a3;
  v5 = nw_parameters_copy_context(*(void **)(*(_QWORD *)(a1 + 32) + 56));
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 3221225472;
  v8[2] = ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3_165;
  v8[3] = &unk_1E14ACE68;
  v9 = *(id *)(a1 + 32);
  v6 = v4;
  v10 = v6;
  nw_queue_context_async(v5, v8);

  return 1;
}

void sub_18342D404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_167(uint64_t a1)
{
  nw_connection_group_set_state_locked(*(void **)(a1 + 32), 3, *(void **)(a1 + 40));
}

void ___ZL52nw_connection_group_set_up_and_start_listener_lockedP30NWConcrete_nw_connection_group_block_invoke_3_165(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  int v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v2 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
    {
      v3 = *(_QWORD *)(a1 + 40);
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v5 = 136446722;
      v6 = "nw_connection_group_set_up_and_start_listener_locked_block_invoke_3";
      v7 = 1024;
      v8 = v4;
      v9 = 2112;
      v10 = v3;
      _os_log_impl(&dword_182FBE000, v2, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] sending queued request %@ ", (uint8_t *)&v5, 0x1Cu);
    }

  }
  nw_connection_group_send_message(*(nw_connection_group_t *)(*(_QWORD *)(a1 + 40) + 8), *(dispatch_data_t *)(*(_QWORD *)(a1 + 40) + 32), *(nw_endpoint_t *)(*(_QWORD *)(a1 + 40) + 24), *(nw_content_context_t *)(*(_QWORD *)(a1 + 40) + 40), *(nw_connection_group_send_completion_t *)(*(_QWORD *)(a1 + 40) + 16));
}

void ___ZL42nw_connection_group_handle_incoming_packetP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectS3_PU26objcproto15OS_nw_interfaceS1_PU27objcproto16OS_nw_fd_wrapperS1_PU27objcproto16OS_dispatch_dataS1__block_invoke(_QWORD *a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1[4] + 136));
  v3 = *(_QWORD *)(a1[5] + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  objc_storeStrong((id *)(*(_QWORD *)(a1[6] + 8) + 40), *(id *)(a1[4] + 8));
}

uint64_t ___ZL42nw_connection_group_handle_incoming_packetP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectS3_PU26objcproto15OS_nw_interfaceS1_PU27objcproto16OS_nw_fd_wrapperS1_PU27objcproto16OS_dispatch_dataS1__block_invoke_2(uint64_t a1)
{
  NSObject *v3;
  NSObject *v4;
  int v5;
  const char *identifier;
  uint64_t v7;
  size_t size;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  NSObject *v14;
  __int16 v15;
  const char *v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  size_t v20;
  __int16 v21;
  const char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v3 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(NSObject **)(a1 + 40);
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      identifier = nw_content_context_get_identifier(v4);
      v7 = *(_QWORD *)(a1 + 48);
      if (v7)
        size = dispatch_data_get_size(*(dispatch_data_t *)(a1 + 48));
      else
        size = 0;
      v9 = 136447746;
      v10 = "nw_connection_group_handle_incoming_packet_block_invoke_2";
      v11 = 1024;
      v12 = v5;
      v13 = 2048;
      v14 = v4;
      v15 = 2080;
      v16 = identifier;
      v17 = 2048;
      v18 = v7;
      v19 = 2048;
      v20 = size;
      v21 = 2080;
      v22 = "true";
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] calling receive handler with context (%p: %s), content (%p: %zu bytes), complete %s", (uint8_t *)&v9, 0x44u);
    }

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40) + 16))();
}

uint64_t ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 40);
  return result;
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_169(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 88);
  *(_QWORD *)(v1 + 88) = 0;

}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_170(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  int v4;
  int v5;
  const char *v6;
  __int16 v7;
  int v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(int *)(v2 + 40) <= 0)
  {
    nw_connection_group_set_state_locked((void *)v2, 1, *(void **)(a1 + 40));
  }
  else if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v3 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
    {
      v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v5 = 136446466;
      v6 = "nw_connection_group_handle_listener_state_change_block_invoke";
      v7 = 1024;
      v8 = v4;
      _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] listener going to waiting but group already past waiting", (uint8_t *)&v5, 0x12u);
    }

  }
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_171(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  _DWORD *v4;
  int v5;
  char v6;
  NSObject *v7;
  int v8;
  const char *v9;
  int v10;
  void *v11;
  void *v12;
  uint64_t *v13;
  int v14;
  const char *v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(void **)(v2 + 64);
  if (!v3 || (v4 = v3, v5 = v4[2], v4, v2 = *(_QWORD *)(a1 + 32), v5 != 2))
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v7 = (id)gconnection_groupLogObj;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        goto LABEL_15;
      v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v14 = 136446466;
      v15 = "nw_connection_group_handle_listener_state_change_block_invoke";
      v16 = 1024;
      v17 = v10;
      v9 = "%{public}s [G%u] group listener ready";
      goto LABEL_14;
    }
LABEL_16:
    v11 = *(void **)(a1 + 32);
    v12 = *(void **)(a1 + 40);
    v13 = (uint64_t *)(a1 + 32);
    nw_connection_group_set_state_locked(v11, 2, v12);
    v2 = *v13;
    v6 = *(_BYTE *)(*v13 + 190);
    goto LABEL_17;
  }
  v6 = *(_BYTE *)(v2 + 190);
  if ((v6 & 0x40) != 0)
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v7 = (id)gconnection_groupLogObj;
      if (!os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        goto LABEL_15;
      v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v14 = 136446466;
      v15 = "nw_connection_group_handle_listener_state_change_block_invoke";
      v16 = 1024;
      v17 = v8;
      v9 = "%{public}s [G%u] multiplex group listener ready and first connection ready";
LABEL_14:
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v14, 0x12u);
LABEL_15:

      goto LABEL_16;
    }
    goto LABEL_16;
  }
LABEL_17:
  *(_BYTE *)(v2 + 190) = v6 | 0x10;
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_172(uint64_t a1)
{
  nw_connection_group_set_state_locked(*(void **)(a1 + 32), 3, *(void **)(a1 + 40));
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_2(uint64_t a1)
{
  nw_connection_group_set_state_locked(*(void **)(a1 + 32), 3, *(void **)(a1 + 40));
}

void ___ZL48nw_connection_group_handle_listener_state_changeP30NWConcrete_nw_connection_group19nw_listener_state_tPU22objcproto11OS_nw_error8NSObject_block_invoke_173(uint64_t a1)
{
  nw_connection_group_cancel_connections_locked(*(NWConcrete_nw_connection_group **)(a1 + 32));
}

void nw_connection_group_cancel_connections_locked(NWConcrete_nw_connection_group *a1)
{
  NWConcrete_nw_connection_group *v1;
  NWConcrete_nw_connection_group *v2;
  NSObject *v3;
  int v4;
  unsigned __int8 *v5;
  NSObject *v6;
  int v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[4];
  NWConcrete_nw_connection_group *v17;
  _BYTE *v18;
  char v19;
  uint8_t v20[4];
  const char *v21;
  __int16 v22;
  int v23;
  _BYTE buf[24];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v1 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v3 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *((_DWORD *)v2 + 42);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_connections_locked";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v4;
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s [G%u] cancelling connections", buf, 0x12u);
      }

    }
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v25 = 0;
    v5 = (unsigned __int8 *)*((_QWORD *)v2 + 13);
    if (!v5)
      goto LABEL_10;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = ___ZL45nw_connection_group_cancel_connections_lockedP30NWConcrete_nw_connection_group_block_invoke;
    v16[3] = &unk_1E14AB5F0;
    v17 = v2;
    v18 = buf;
    nw_array_apply(v5, (uint64_t)v16);

    if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
LABEL_10:
      if (!nw_parameters_get_logging_disabled(*((_QWORD *)v2 + 7)))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v6 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
        {
          v7 = *((_DWORD *)v2 + 42);
          *(_DWORD *)v20 = 136446466;
          v21 = "nw_connection_group_cancel_connections_locked";
          v22 = 1024;
          v23 = v7;
          _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s [G%u] no connections, cancelling group", v20, 0x12u);
        }

      }
      nw_connection_group_final_cleanup_locked(v2);
    }
    _Block_object_dispose(buf, 8);
    goto LABEL_18;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_group_cancel_connections_locked";
  v9 = (char *)_os_log_send_and_compose_impl();

  v20[0] = 16;
  v19 = 0;
  if (__nwlog_fault(v9, v20, &v19))
  {
    if (v20[0] == 17)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v20[0];
      if (os_log_type_enabled(v10, (os_log_type_t)v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_connections_locked";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = v20[0];
      v14 = os_log_type_enabled(v10, (os_log_type_t)v20[0]);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_cancel_connections_locked";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_connections_locked";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v20[0];
      if (os_log_type_enabled(v10, (os_log_type_t)v20[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_cancel_connections_locked";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v9)
    free(v9);
LABEL_18:

}

void sub_18342DEF0(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 96), 8);

  _Unwind_Resume(a1);
}

uint64_t ___ZL45nw_connection_group_cancel_connections_lockedP30NWConcrete_nw_connection_group_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  NSObject *v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  NSObject *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  if (!nw_connection_is_cancelled(v4))
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v6 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        v8 = 136446722;
        v9 = "nw_connection_group_cancel_connections_locked_block_invoke";
        v10 = 1024;
        v11 = v7;
        v12 = 2112;
        v13 = v4;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] cancelling connection %@", (uint8_t *)&v8, 0x1Cu);
      }

    }
    nw_connection_cancel(v4);
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  }

  return 1;
}

void sub_18342E068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void ___ZL44nw_connection_group_prune_connections_lockedP30NWConcrete_nw_connection_group_block_invoke(uint64_t a1, unsigned int a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  int v7;
  int v8;
  const char *v9;
  __int16 v10;
  int v11;
  __int16 v12;
  uint64_t v13;
  __int16 v14;
  const char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v4 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if (a2 > 5)
        v5 = "unknown";
      else
        v5 = off_1E149DE10[a2];
      v6 = *(_QWORD *)(a1 + 40);
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v8 = 136446978;
      v9 = "nw_connection_group_prune_connections_locked_block_invoke";
      v10 = 1024;
      v11 = v7;
      v12 = 2112;
      v13 = v6;
      v14 = 2080;
      v15 = v5;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_INFO, "%{public}s [G%u] pruned connection %@ going into state %s", (uint8_t *)&v8, 0x26u);
    }

  }
}

nw_connection_group_t nw_connection_group_create(nw_group_descriptor_t group_descriptor, nw_parameters_t parameters)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = group_descriptor;
  v4 = parameters;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = -[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]((id *)[NWConcrete_nw_connection_group alloc], v3, 0, v4);
      goto LABEL_4;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_group_create";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_connection_group_create";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_group_create";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null group_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null group_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null group_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_connection_group_create";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null group_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_4:

  return v6;
}

void sub_18342E688(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id *nw_connection_group_create_with_parameters(void *a1)
{
  id v1;
  uint64_t *v2;
  id *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = -[NWConcrete_nw_group_descriptor initWithType:member:groupID:]((uint64_t *)[NWConcrete_nw_group_descriptor alloc], 4, 0, 0);
    v3 = -[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]((id *)[NWConcrete_nw_connection_group alloc], v2, 0, v1);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_group_create_with_parameters";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_create_with_parameters";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_group_create_with_parameters";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_create_with_parameters";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_create_with_parameters";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_18342E974(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id *nw_connection_group_create_with_connection(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = -[NWConcrete_nw_connection_group initWithDescriptor:connection:parameters:]((id *)[NWConcrete_nw_connection_group alloc], v3, v4, 0);
      goto LABEL_4;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_group_create_with_connection";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null connection", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_connection_group_create_with_connection";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_connection_group_create_with_connection";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v9, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null group_descriptor", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v21)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s called with null group_descriptor, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_connection_group_create_with_connection";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null group_descriptor, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446466;
        v24 = "nw_connection_group_create_with_connection";
        v25 = 2082;
        v26 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null group_descriptor, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_4:

  return v6;
}

void sub_18342EE54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_connection_group_set_queue(nw_connection_group_t group, dispatch_queue_t queue)
{
  nw_connection_group_t v3;
  NSObject *v4;
  NSObject *v5;
  nw_connection_group_t v6;
  void (**v7)(_QWORD);
  NSObject *v8;
  int isa;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD aBlock[4];
  nw_connection_group_t v25;
  NSObject *v26;
  _BYTE *v27;
  char v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  int v32;
  __int16 v33;
  const char *v34;
  _BYTE v35[24];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = group;
  v4 = queue;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v35 = 136446210;
    *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
    v11 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v28 = 0;
    if (!__nwlog_fault(v11, buf, &v28))
      goto LABEL_45;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null group", v35, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = buf[0];
      v18 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)v35 = 136446466;
          *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
          *(_WORD *)&v35[12] = 2082;
          *(_QWORD *)&v35[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null group, dumping backtrace:%{public}s", v35, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v11)
          goto LABEL_11;
LABEL_46:
        free(v11);
        goto LABEL_11;
      }
      if (v18)
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null group, no backtrace", v35, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null group, backtrace limit exceeded", v35, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (v4)
  {
    *(_QWORD *)v35 = 0;
    *(_QWORD *)&v35[8] = v35;
    *(_QWORD *)&v35[16] = 0x2020000000;
    v36 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_queue_block_invoke;
    aBlock[3] = &unk_1E14A2D98;
    v6 = v3;
    v25 = v6;
    v26 = v5;
    v27 = v35;
    v7 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v7[2](v7);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    if (*(_BYTE *)(*(_QWORD *)&v35[8] + 24) && !nw_parameters_get_logging_disabled((uint64_t)v6[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v8 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        isa = (int)v6[21].isa;
        *(_DWORD *)buf = 136446722;
        v30 = "nw_connection_group_set_queue";
        v31 = 1024;
        v32 = isa;
        v33 = 2080;
        v34 = "set queue";
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to %s because group has already been started", buf, 0x1Cu);
      }

    }
    _Block_object_dispose(v35, 8);
    goto LABEL_11;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v35 = 136446210;
  *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
  v11 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  v28 = 0;
  if (!__nwlog_fault(v11, buf, &v28))
    goto LABEL_45;
  if (buf[0] == 17)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)v35 = 136446210;
      *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null queue", v35, 0xCu);
    }
    goto LABEL_44;
  }
  if (!v28)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)v35 = 136446210;
      *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null queue, backtrace limit exceeded", v35, 0xCu);
    }
    goto LABEL_44;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = buf[0];
  v21 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)v35 = 136446210;
      *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null queue, no backtrace", v35, 0xCu);
    }
    goto LABEL_44;
  }
  if (v21)
  {
    *(_DWORD *)v35 = 136446466;
    *(_QWORD *)&v35[4] = "nw_connection_group_set_queue";
    *(_WORD *)&v35[12] = 2082;
    *(_QWORD *)&v35[14] = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null queue, dumping backtrace:%{public}s", v35, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_46;
LABEL_11:

}

void sub_18342F47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_queue_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v1 + 190) & 1) != 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  else
    objc_storeStrong((id *)(v1 + 8), *(id *)(a1 + 40));
}

void nw_connection_group_set_membership_changed_handler(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void *v5;
  os_unfair_lock_s *v6;
  void (**v7)(_QWORD);
  NSObject *v8;
  uint32_t os_unfair_lock_opaque;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  _QWORD aBlock[4];
  os_unfair_lock_s *v25;
  id v26;
  _BYTE *v27;
  char v28;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  uint32_t v32;
  __int16 v33;
  const char *v34;
  _BYTE v35[24];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v35 = 136446210;
    *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
    v11 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v28 = 0;
    if (!__nwlog_fault(v11, buf, &v28))
      goto LABEL_45;
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null group", v35, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = buf[0];
      v18 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)v35 = 136446466;
          *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
          *(_WORD *)&v35[12] = 2082;
          *(_QWORD *)&v35[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null group, dumping backtrace:%{public}s", v35, 0x16u);
        }

        free(backtrace_string);
LABEL_45:
        if (!v11)
          goto LABEL_11;
LABEL_46:
        free(v11);
        goto LABEL_11;
      }
      if (v18)
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null group, no backtrace", v35, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = buf[0];
      if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null group, backtrace limit exceeded", v35, 0xCu);
      }
    }
LABEL_44:

    goto LABEL_45;
  }
  if (v4)
  {
    *(_QWORD *)v35 = 0;
    *(_QWORD *)&v35[8] = v35;
    *(_QWORD *)&v35[16] = 0x2020000000;
    v36 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_membership_changed_handler_block_invoke;
    aBlock[3] = &unk_1E149B548;
    v6 = v3;
    v25 = v6;
    v26 = v5;
    v27 = v35;
    v7 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v3 + 43);
    v7[2](v7);
    os_unfair_lock_unlock(v3 + 43);

    if (*(_BYTE *)(*(_QWORD *)&v35[8] + 24)
      && !nw_parameters_get_logging_disabled(*(_QWORD *)&v6[14]._os_unfair_lock_opaque))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v8 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        os_unfair_lock_opaque = v6[42]._os_unfair_lock_opaque;
        *(_DWORD *)buf = 136446722;
        v30 = "nw_connection_group_set_membership_changed_handler";
        v31 = 1024;
        v32 = os_unfair_lock_opaque;
        v33 = 2080;
        v34 = "set membership changed handler";
        _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to %s because group has already been started", buf, 0x1Cu);
      }

    }
    _Block_object_dispose(v35, 8);
    goto LABEL_11;
  }
  __nwlog_obj();
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v35 = 136446210;
  *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
  v11 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  v28 = 0;
  if (!__nwlog_fault(v11, buf, &v28))
    goto LABEL_45;
  if (buf[0] == 17)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v15 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)v35 = 136446210;
      *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
      _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null membership_change_handler", v35, 0xCu);
    }
    goto LABEL_44;
  }
  if (!v28)
  {
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = buf[0];
    if (os_log_type_enabled(v12, (os_log_type_t)buf[0]))
    {
      *(_DWORD *)v35 = 136446210;
      *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s called with null membership_change_handler, backtrace limit exceeded", v35, 0xCu);
    }
    goto LABEL_44;
  }
  v19 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v12 = objc_claimAutoreleasedReturnValue();
  v20 = buf[0];
  v21 = os_log_type_enabled(v12, (os_log_type_t)buf[0]);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)v35 = 136446210;
      *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
      _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null membership_change_handler, no backtrace", v35, 0xCu);
    }
    goto LABEL_44;
  }
  if (v21)
  {
    *(_DWORD *)v35 = 136446466;
    *(_QWORD *)&v35[4] = "nw_connection_group_set_membership_changed_handler";
    *(_WORD *)&v35[12] = 2082;
    *(_QWORD *)&v35[14] = v19;
    _os_log_impl(&dword_182FBE000, v12, v20, "%{public}s called with null membership_change_handler, dumping backtrace:%{public}s", v35, 0x16u);
  }

  free(v19);
  if (v11)
    goto LABEL_46;
LABEL_11:

}

void sub_18342FAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_membership_changed_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 190) & 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    v2 = _Block_copy(*(const void **)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 80);
    *(_QWORD *)(v3 + 80) = v2;

  }
}

void nw_connection_group_set_state_changed_handler(nw_connection_group_t group, nw_connection_group_state_changed_handler_t state_changed_handler)
{
  nw_connection_group_t v3;
  nw_connection_group_state_changed_handler_t v4;
  nw_connection_group_t v5;
  void (**v6)(_QWORD);
  NSObject *v7;
  int isa;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD aBlock[4];
  nw_connection_group_t v18;
  id v19;
  _BYTE *v20;
  char v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  int v25;
  __int16 v26;
  const char *v27;
  _BYTE v28[24];
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = group;
  v4 = state_changed_handler;
  if (v3)
  {
    *(_QWORD *)v28 = 0;
    *(_QWORD *)&v28[8] = v28;
    *(_QWORD *)&v28[16] = 0x2020000000;
    v29 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_state_changed_handler_block_invoke;
    aBlock[3] = &unk_1E149B548;
    v5 = v3;
    v18 = v5;
    v19 = v4;
    v20 = v28;
    v6 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v6[2](v6);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    if (*(_BYTE *)(*(_QWORD *)&v28[8] + 24) && !nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v7 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        isa = (int)v5[21].isa;
        *(_DWORD *)buf = 136446722;
        v23 = "nw_connection_group_set_state_changed_handler";
        v24 = 1024;
        v25 = isa;
        v26 = 2080;
        v27 = "set state changed handler";
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to %s because group has already been started", buf, 0x1Cu);
      }

    }
    _Block_object_dispose(v28, 8);
    goto LABEL_10;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v28 = 136446210;
  *(_QWORD *)&v28[4] = "nw_connection_group_set_state_changed_handler";
  v10 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  v21 = 0;
  if (__nwlog_fault(v10, buf, &v21))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = buf[0];
      if (os_log_type_enabled(v11, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v28 = 136446210;
        *(_QWORD *)&v28[4] = "nw_connection_group_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null group", v28, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = buf[0];
      v15 = os_log_type_enabled(v11, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)v28 = 136446466;
          *(_QWORD *)&v28[4] = "nw_connection_group_set_state_changed_handler";
          *(_WORD *)&v28[12] = 2082;
          *(_QWORD *)&v28[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null group, dumping backtrace:%{public}s", v28, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)v28 = 136446210;
        *(_QWORD *)&v28[4] = "nw_connection_group_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null group, no backtrace", v28, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = buf[0];
      if (os_log_type_enabled(v11, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v28 = 136446210;
        *(_QWORD *)&v28[4] = "nw_connection_group_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null group, backtrace limit exceeded", v28, 0xCu);
      }
    }

  }
LABEL_27:
  if (v10)
    free(v10);
LABEL_10:

}

void sub_18342FF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_state_changed_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 190) & 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    v2 = _Block_copy(*(const void **)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 32);
    *(_QWORD *)(v3 + 32) = v2;

  }
}

uint64_t nw_connection_group_get_connection_limit(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v20 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_get_connection_limit_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    v4 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_group_get_connection_limit";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_get_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_get_connection_limit";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_get_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_get_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_183430344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_group_get_connection_limit_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 180);
  return result;
}

void nw_connection_group_set_connection_limit(void *a1, int a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  void (**v5)(_QWORD);
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD aBlock[4];
  os_unfair_lock_s *v16;
  int v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
    {
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_connection_group_set_connection_limit_block_invoke;
      aBlock[3] = &unk_1E14AB378;
      v17 = a2;
      v16 = v3;
      v5 = (void (**)(_QWORD))_Block_copy(aBlock);
      os_unfair_lock_lock(v4 + 43);
      v5[2](v5);
      os_unfair_lock_unlock(v4 + 43);

    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = (id)gLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_group_set_connection_limit";
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s Cannot set connection limit lower than 1", buf, 0xCu);
      }

    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_connection_group_set_connection_limit";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v8, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_group_set_connection_limit";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_connection_group_set_connection_limit";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_group_set_connection_limit";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_group_set_connection_limit";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v8)
    free(v8);
LABEL_7:

}

void sub_183430700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_connection_group_set_connection_limit_block_invoke(uint64_t a1)
{
  uint64_t v1;
  NSObject *v3;
  int v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(a1 + 40) != *(_DWORD *)(v1 + 180))
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v1 + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v3 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
      {
        v4 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        v5 = *(_DWORD *)(a1 + 40);
        v9 = 136446722;
        v10 = "nw_connection_group_set_connection_limit_block_invoke";
        v11 = 1024;
        v12 = v4;
        v13 = 1024;
        v14 = v5;
        _os_log_impl(&dword_182FBE000, v3, OS_LOG_TYPE_INFO, "%{public}s [G%u] setting connection limit to %d", (uint8_t *)&v9, 0x18u);
      }

    }
    v6 = *(_DWORD *)(a1 + 40);
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(_DWORD *)(v7 + 180);
    *(_DWORD *)(v7 + 180) = v6;
    if (v6 < v8)
      nw_connection_group_prune_connections_locked(*(NWConcrete_nw_connection_group **)(a1 + 32));
  }
}

uint64_t nw_connection_group_get_new_connection_limit(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v20 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_get_new_connection_limit_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = v1;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    v4 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_group_get_new_connection_limit";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_get_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_get_new_connection_limit";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_get_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_get_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_183430B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t __nw_connection_group_get_new_connection_limit_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 184);
  return result;
}

void nw_connection_group_set_new_connection_limit(void *a1, int a2)
{
  os_unfair_lock_s *v3;
  os_unfair_lock_s *v4;
  void (**v5)(_QWORD);
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  os_unfair_lock_s *v15;
  int v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_new_connection_limit_block_invoke;
    aBlock[3] = &unk_1E14AB378;
    v16 = a2;
    v15 = v3;
    v5 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v4 + 43);
    v5[2](v5);
    os_unfair_lock_unlock(v4 + 43);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_connection_group_set_new_connection_limit";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_connection_group_set_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_connection_group_set_new_connection_limit";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_connection_group_set_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_connection_group_set_new_connection_limit";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_183430EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void __nw_connection_group_set_new_connection_limit_block_invoke(uint64_t a1)
{
  int v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  void *v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char *v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = *(_DWORD *)(a1 + 40);
  if (v1)
  {
    v2 = *(_QWORD *)(a1 + 32);
    if (v1 != *(_DWORD *)(v2 + 184))
    {
      *(_DWORD *)(v2 + 184) = v1;
      v3 = *(_QWORD *)(a1 + 32);
      if ((*(_BYTE *)(v3 + 190) & 1) != 0)
      {
        v4 = *(NSObject **)(v3 + 88);
        if (v4)
        {
          nw_listener_set_new_connection_limit(v4, *(_DWORD *)(a1 + 40));
          return;
        }
        __nwlog_obj();
        v5 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_group_set_new_connection_limit_block_invoke";
        v6 = (const char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v13 = 0;
        v12 = (char *)v6;
        if (!__nwlog_fault(v6, &type, &v13))
          goto LABEL_22;
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v7 = objc_claimAutoreleasedReturnValue();
          v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            v16 = "nw_connection_group_set_new_connection_limit_block_invoke";
            v9 = "%{public}s called with null group->listener";
LABEL_20:
            _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
          }
        }
        else if (v13)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v7 = objc_claimAutoreleasedReturnValue();
          v8 = type;
          v11 = os_log_type_enabled(v7, type);
          if (backtrace_string)
          {
            if (v11)
            {
              *(_DWORD *)buf = 136446466;
              v16 = "nw_connection_group_set_new_connection_limit_block_invoke";
              v17 = 2082;
              v18 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null group->listener, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_22;
          }
          if (v11)
          {
            *(_DWORD *)buf = 136446210;
            v16 = "nw_connection_group_set_new_connection_limit_block_invoke";
            v9 = "%{public}s called with null group->listener, no backtrace";
            goto LABEL_20;
          }
        }
        else
        {
          __nwlog_obj();
          v7 = objc_claimAutoreleasedReturnValue();
          v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            *(_DWORD *)buf = 136446210;
            v16 = "nw_connection_group_set_new_connection_limit_block_invoke";
            v9 = "%{public}s called with null group->listener, backtrace limit exceeded";
            goto LABEL_20;
          }
        }

LABEL_22:
        if (v12)
          free(v12);
      }
    }
  }
}

void nw_connection_group_set_new_connection_handler(nw_connection_group_t group, nw_connection_group_new_connection_handler_t new_connection_handler)
{
  nw_connection_group_t v3;
  nw_connection_group_new_connection_handler_t v4;
  nw_connection_group_t v5;
  id v6;
  void (**v7)(_QWORD);
  BOOL logging_disabled;
  NSObject *v9;
  int isa;
  int v11;
  void *v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _QWORD aBlock[4];
  nw_connection_group_t v22;
  id v23;
  _BYTE *v24;
  char v25;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  int v29;
  __int16 v30;
  void *v31;
  _BYTE v32[24];
  char v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = group;
  v4 = new_connection_handler;
  if (v3)
  {
    *(_QWORD *)v32 = 0;
    *(_QWORD *)&v32[8] = v32;
    *(_QWORD *)&v32[16] = 0x2020000000;
    v33 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_new_connection_handler_block_invoke;
    aBlock[3] = &unk_1E149B548;
    v5 = v3;
    v22 = v5;
    v6 = v4;
    v23 = v6;
    v24 = v32;
    v7 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v7[2](v7);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    LODWORD(v7) = *(unsigned __int8 *)(*(_QWORD *)&v32[8] + 24);
    logging_disabled = nw_parameters_get_logging_disabled((uint64_t)v5[7].isa);
    if ((_DWORD)v7)
    {
      if (!logging_disabled)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v9 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          isa = (int)v5[21].isa;
          *(_DWORD *)buf = 136446466;
          v27 = "nw_connection_group_set_new_connection_handler";
          v28 = 1024;
          v29 = isa;
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to set new connection handler because group has already been started", buf, 0x12u);
        }
LABEL_13:

      }
    }
    else if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v9 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        v11 = (int)v5[21].isa;
        v12 = _Block_copy(v6);
        *(_DWORD *)buf = 136446722;
        v27 = "nw_connection_group_set_new_connection_handler";
        v28 = 1024;
        v29 = v11;
        v30 = 2048;
        v31 = v12;
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] set new connection handler: %p", buf, 0x1Cu);

      }
      goto LABEL_13;
    }

    _Block_object_dispose(v32, 8);
    goto LABEL_15;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v32 = 136446210;
  *(_QWORD *)&v32[4] = "nw_connection_group_set_new_connection_handler";
  v14 = (char *)_os_log_send_and_compose_impl();

  buf[0] = 16;
  v25 = 0;
  if (__nwlog_fault(v14, buf, &v25))
  {
    if (buf[0] == 17)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = buf[0];
      if (os_log_type_enabled(v15, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v32 = 136446210;
        *(_QWORD *)&v32[4] = "nw_connection_group_set_new_connection_handler";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null group", v32, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = buf[0];
      v19 = os_log_type_enabled(v15, (os_log_type_t)buf[0]);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)v32 = 136446466;
          *(_QWORD *)&v32[4] = "nw_connection_group_set_new_connection_handler";
          *(_WORD *)&v32[12] = 2082;
          *(_QWORD *)&v32[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null group, dumping backtrace:%{public}s", v32, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v19)
      {
        *(_DWORD *)v32 = 136446210;
        *(_QWORD *)&v32[4] = "nw_connection_group_set_new_connection_handler";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null group, no backtrace", v32, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = buf[0];
      if (os_log_type_enabled(v15, (os_log_type_t)buf[0]))
      {
        *(_DWORD *)v32 = 136446210;
        *(_QWORD *)&v32[4] = "nw_connection_group_set_new_connection_handler";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null group, backtrace limit exceeded", v32, 0xCu);
      }
    }

  }
LABEL_32:
  if (v14)
    free(v14);
LABEL_15:

}

void sub_183431618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18)
{
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 96), 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_new_connection_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 190) & 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    v2 = _Block_copy(*(const void **)(a1 + 40));
    v3 = *(_QWORD *)(a1 + 32);
    v4 = *(void **)(v3 + 144);
    *(_QWORD *)(v3 + 144) = v2;

  }
}

void nw_connection_group_set_receive_handler(nw_connection_group_t group, uint32_t maximum_message_size, BOOL reject_oversized_messages, nw_connection_group_receive_handler_t receive_handler)
{
  _BOOL4 v5;
  nw_connection_group_t v7;
  nw_connection_group_receive_handler_t v8;
  nw_connection_group_t v9;
  id v10;
  void (**v11)(_QWORD);
  BOOL logging_disabled;
  NSObject *v13;
  int isa;
  int v15;
  const char *v16;
  void *v17;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _QWORD aBlock[4];
  nw_connection_group_t v27;
  id v28;
  os_log_type_t *v29;
  uint32_t v30;
  BOOL v31;
  os_log_type_t type[8];
  os_log_type_t *v33;
  uint64_t v34;
  char v35;
  char v36;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _BYTE v40[10];
  __int16 v41;
  const char *v42;
  __int16 v43;
  void *v44;
  uint64_t v45;

  v5 = reject_oversized_messages;
  v45 = *MEMORY[0x1E0C80C00];
  v7 = group;
  v8 = receive_handler;
  if (v7)
  {
    *(_QWORD *)type = 0;
    v33 = type;
    v34 = 0x2020000000;
    v35 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_set_receive_handler_block_invoke;
    aBlock[3] = &unk_1E149B570;
    v9 = v7;
    v27 = v9;
    v30 = maximum_message_size;
    v31 = v5;
    v10 = v8;
    v28 = v10;
    v29 = type;
    v11 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v7[21].isa + 1);
    v11[2](v11);
    os_unfair_lock_unlock((os_unfair_lock_t)&v7[21].isa + 1);

    LODWORD(v11) = *((unsigned __int8 *)v33 + 24);
    logging_disabled = nw_parameters_get_logging_disabled((uint64_t)v9[7].isa);
    if ((_DWORD)v11)
    {
      if (!logging_disabled)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v13 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          isa = (int)v9[21].isa;
          *(_DWORD *)buf = 136446466;
          v38 = "nw_connection_group_set_receive_handler";
          v39 = 1024;
          *(_DWORD *)v40 = isa;
          _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to set receive handler because group has already been started", buf, 0x12u);
        }
LABEL_16:

      }
    }
    else if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v13 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
      {
        v15 = (int)v9[21].isa;
        if (v5)
          v16 = "true";
        else
          v16 = "false";
        v17 = _Block_copy(v10);
        *(_DWORD *)buf = 136447234;
        v38 = "nw_connection_group_set_receive_handler";
        v39 = 1024;
        *(_DWORD *)v40 = v15;
        *(_WORD *)&v40[4] = 1024;
        *(_DWORD *)&v40[6] = maximum_message_size;
        v41 = 2080;
        v42 = v16;
        v43 = 2048;
        v44 = v17;
        _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] set maximum message size: %u, reject oversized messages: %s, handler: %p", buf, 0x2Cu);

      }
      goto LABEL_16;
    }

    _Block_object_dispose(type, 8);
    goto LABEL_18;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v38 = "nw_connection_group_set_receive_handler";
  v19 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v36 = 0;
  if (__nwlog_fault(v19, type, &v36))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v21 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_connection_group_set_receive_handler";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v23 = type[0];
      v24 = os_log_type_enabled(v20, type[0]);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_connection_group_set_receive_handler";
          v39 = 2082;
          *(_QWORD *)v40 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_connection_group_set_receive_handler";
        _os_log_impl(&dword_182FBE000, v20, v23, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v25 = type[0];
      if (os_log_type_enabled(v20, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_connection_group_set_receive_handler";
        _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v19)
    free(v19);
LABEL_18:

}

void sub_183431B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, ...)
{
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a14);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_set_receive_handler_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 190) & 1) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  }
  else
  {
    *(_DWORD *)(v2 + 176) = *(_DWORD *)(a1 + 56);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 190) = *(_BYTE *)(*(_QWORD *)(a1 + 32) + 190) & 0xFD | (2 * *(_BYTE *)(a1 + 60));
    v3 = _Block_copy(*(const void **)(a1 + 40));
    v4 = *(_QWORD *)(a1 + 32);
    v5 = *(void **)(v4 + 136);
    *(_QWORD *)(v4 + 136) = v3;

  }
}

void nw_connection_group_reply(nw_connection_group_t group, nw_content_context_t inbound_message, nw_content_context_t outbound_message, dispatch_data_t content)
{
  nw_connection_group_t v7;
  NSObject *v8;
  NSObject *v9;
  nw_connection_group_t v10;
  NSObject *v11;
  void *v12;
  os_unfair_lock_s *v13;
  os_unfair_lock_s *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NWConcrete_nw_connection_group *v18;
  NSObject *v19;
  void (**v20)(_QWORD);
  NWConcrete_nw_connection *v21;
  NSObject *v22;
  BOOL logging_disabled;
  char v24;
  NSObject *v25;
  NSObject *v26;
  int v27;
  NSObject *v28;
  const char *v29;
  id v30;
  NSObject *v31;
  uint64_t v32;
  size_t size;
  size_t v34;
  NSObject *v35;
  Class v36;
  id v37;
  NSObject *v38;
  NSObject *v39;
  int v40;
  const char *v41;
  int v42;
  int v43;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  void *v48;
  os_log_type_t v49;
  void *v50;
  os_log_type_t v51;
  NSObject *v52;
  int v53;
  char *backtrace_string;
  os_log_type_t v55;
  _BOOL4 v56;
  char *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  os_log_type_t v60;
  _BOOL4 v61;
  NSObject *v62;
  int isa;
  os_log_type_t v64;
  os_log_type_t v65;
  os_log_type_t v66;
  NSObject *v67;
  int v68;
  id v69;
  NSObject *v70;
  NSObject *v71;
  os_unfair_lock_s *v72;
  NSObject *v73;
  NSObject *v74;
  _QWORD completion[4];
  NWConcrete_nw_connection_group *v76;
  os_unfair_lock_s *v77;
  NSObject *v78;
  NSObject *v79;
  _QWORD aBlock[4];
  NWConcrete_nw_connection_group *v81;
  NSObject *v82;
  os_log_type_t *v83;
  os_log_type_t type[8];
  os_log_type_t *v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t, uint64_t);
  void (*v88)(uint64_t);
  id v89;
  _QWORD v90[5];
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  int v94;
  _BYTE buf[40];
  NSObject *v96;
  NSObject *v97;
  os_unfair_lock_s *v98;
  NSObject *v99;
  uint64_t *v100;
  size_t v101;
  uint64_t v102;

  v102 = *MEMORY[0x1E0C80C00];
  v7 = group;
  v8 = inbound_message;
  v9 = outbound_message;
  v73 = v9;
  v74 = content;
  if (!v7)
  {
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_reply";
    v45 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90[0]) = 0;
    if (!__nwlog_fault(v45, type, v90))
      goto LABEL_133;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v47 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (LOBYTE(v90[0]))
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v55 = type[0];
      v56 = os_log_type_enabled(v46, type[0]);
      if (backtrace_string)
      {
        if (v56)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_reply";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v46, v55, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_133:
        if (!v45)
          goto LABEL_67;
LABEL_134:
        free(v45);
        goto LABEL_67;
      }
      if (v56)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_182FBE000, v46, v55, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v64 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_182FBE000, v46, v64, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_132:

    goto LABEL_133;
  }
  if (!v8)
  {
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_reply";
    v45 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90[0]) = 0;
    if (!__nwlog_fault(v45, type, v90))
      goto LABEL_133;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v49 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null inbound_message", buf, 0xCu);
      }
      goto LABEL_132;
    }
    if (!LOBYTE(v90[0]))
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v65 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_182FBE000, v46, v65, "%{public}s called with null inbound_message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_132;
    }
    v57 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v58 = type[0];
    v59 = os_log_type_enabled(v46, type[0]);
    if (!v57)
    {
      if (v59)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_182FBE000, v46, v58, "%{public}s called with null inbound_message, no backtrace", buf, 0xCu);
      }
      goto LABEL_132;
    }
    if (v59)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_reply";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v57;
      _os_log_impl(&dword_182FBE000, v46, v58, "%{public}s called with null inbound_message, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_103;
  }
  if (!v9)
  {
    __nwlog_obj();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_reply";
    v45 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v90[0]) = 0;
    if (!__nwlog_fault(v45, type, v90))
      goto LABEL_133;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v51 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_182FBE000, v46, v51, "%{public}s called with null outbound_message", buf, 0xCu);
      }
      goto LABEL_132;
    }
    if (!LOBYTE(v90[0]))
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v66 = type[0];
      if (os_log_type_enabled(v46, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_182FBE000, v46, v66, "%{public}s called with null outbound_message, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_132;
    }
    v57 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v60 = type[0];
    v61 = os_log_type_enabled(v46, type[0]);
    if (!v57)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        _os_log_impl(&dword_182FBE000, v46, v60, "%{public}s called with null outbound_message, no backtrace", buf, 0xCu);
      }
      goto LABEL_132;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_reply";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v57;
      _os_log_impl(&dword_182FBE000, v46, v60, "%{public}s called with null outbound_message, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_103:

    free(v57);
    if (!v45)
      goto LABEL_67;
    goto LABEL_134;
  }
  if ((SBYTE6(v7[23].isa) & 0x80000000) == 0 && SLODWORD(v7[5].isa) < 3)
  {
    *(_QWORD *)type = 0;
    v85 = type;
    v86 = 0x3032000000;
    v87 = __Block_byref_object_copy__8574;
    v88 = __Block_byref_object_dispose__8575;
    v10 = v7;
    v11 = v8;
    v12 = (void *)nw_content_context_copy_connection(v11);
    if (!v12 && !nw_parameters_get_logging_disabled((uint64_t)v10[7].isa) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v62 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v62, OS_LOG_TYPE_DEBUG))
      {
        isa = (int)v10[21].isa;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_find_connection_for_message";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = isa;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v11;
        _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Did not find connection for message (%@), returning nil", buf, 0x1Cu);
      }

    }
    v89 = v12;
    v13 = v11;
    v14 = v13;
    v15 = 0;
    if (v13 != (os_unfair_lock_s *)&__block_literal_global_5_41741
      && v13 != (os_unfair_lock_s *)&__block_literal_global_4
      && v13 != (os_unfair_lock_s *)&__block_literal_global_3_41726
      && v13 != (os_unfair_lock_s *)&__block_literal_global_41718)
    {
      os_unfair_lock_lock(v13 + 28);
      if ((v14[29]._os_unfair_lock_opaque & 0x200000) != 0
        && (v16 = *(_QWORD *)&v14[26]._os_unfair_lock_opaque) != 0
        && *(_QWORD *)(v16 + 24) - *(_QWORD *)(v16 + 16) >= 0x19uLL)
      {
        nw_array_get_object_at_index(v16, 3uLL);
        v15 = (void *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        v15 = 0;
      }
      os_unfair_lock_unlock(v14 + 28);
    }

    if (*((_QWORD *)v85 + 5))
    {
      v17 = MEMORY[0x1E0C809B0];
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_connection_group_reply_block_invoke;
      aBlock[3] = &unk_1E14A2D98;
      v18 = v10;
      v81 = v18;
      v83 = type;
      v19 = v73;
      v82 = v19;
      v20 = (void (**)(_QWORD))_Block_copy(aBlock);
      os_unfair_lock_lock((os_unfair_lock_t)&v10[21].isa + 1);
      v20[2](v20);
      os_unfair_lock_unlock((os_unfair_lock_t)&v10[21].isa + 1);

      v21 = (NWConcrete_nw_connection *)*((_QWORD *)v85 + 5);
      if (v21)
      {
        nw_connection_group_touch_connection(v18, v21);
        v22 = *((_QWORD *)v85 + 5);
        completion[0] = v17;
        completion[1] = 3221225472;
        completion[2] = __nw_connection_group_reply_block_invoke_20;
        completion[3] = &unk_1E149B598;
        v76 = v18;
        v77 = v14;
        v78 = v19;
        v79 = v74;
        nw_connection_send(v22, v79, v78, 1, completion);

      }
      goto LABEL_66;
    }
    logging_disabled = nw_parameters_get_logging_disabled((uint64_t)v10[7].isa);
    if (!v74 || !v15)
    {
      if (!logging_disabled)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v26 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
        {
          v27 = (int)v10[21].isa;
          v28 = v9;
          if (v28 == &__block_literal_global_41718)
          {
            v29 = "Default Message";
          }
          else if (v28 == &__block_literal_global_3_41726)
          {
            v29 = "Final Message";
          }
          else if (v28 == &__block_literal_global_4)
          {
            v29 = "Default Stream";
          }
          else if (v28 == &__block_literal_global_5_41741)
          {
            v29 = "New Inbound Message";
          }
          else
          {
            v29 = (const char *)&v28[3];
          }

          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_connection_group_reply";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v27;
          *(_WORD *)&buf[18] = 2048;
          *(_QWORD *)&buf[20] = v14;
          *(_WORD *)&buf[28] = 2080;
          *(_QWORD *)&buf[30] = v29;
          _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "%{public}s [G%u] context %p does not have connection and is not multicast with content, dropping reply context %s", buf, 0x26u);
        }

      }
      goto LABEL_66;
    }
    if (gLogDatapath)
      v24 = logging_disabled;
    else
      v24 = 1;
    if ((v24 & 1) == 0)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v67 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
      {
        v68 = (int)v10[21].isa;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v68;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v14;
        _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Replying to multicast message (%@), sending direct response", buf, 0x1Cu);
      }

    }
    if (v10[12].isa)
    {
      v25 = nw_connection_group_copy_remote_endpoint_for_message(v10, (nw_content_context_t)v14);
      nw_connection_group_send_message(v10, v74, v25, v9, &__block_literal_global_8840);

LABEL_66:
      _Block_object_dispose(type, 8);

      goto LABEL_67;
    }
    v70 = v10;
    v30 = v15;
    v72 = v14;
    v71 = v9;
    v31 = v74;
    v91 = 0;
    v92 = &v91;
    v94 = -1;
    v32 = MEMORY[0x1E0C809B0];
    v93 = 0x2020000000;
    v90[0] = MEMORY[0x1E0C809B0];
    v90[1] = 3221225472;
    v90[2] = ___ZL42nw_connection_group_send_message_on_socketP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_S5_PU27objcproto16OS_dispatch_dataS1__block_invoke;
    v90[3] = &unk_1E14AB578;
    v90[4] = &v91;
    nw_fd_wrapper_get_fd(v30, v90);
    if ((v92[3] & 0x80000000) != 0)
    {
      v38 = v70;
      if (!nw_parameters_get_logging_disabled((uint64_t)v10[7].isa))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v35 = (id)gconnection_groupLogObj;
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          goto LABEL_64;
        v40 = (int)v70[21].isa;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message_on_socket";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v40;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v30;
        v41 = "%{public}s [G%u] Failed to get socket for %@";
LABEL_57:
        _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_ERROR, v41, buf, 0x1Cu);
        goto LABEL_64;
      }
    }
    else
    {
      v69 = v30;
      size = dispatch_data_get_size(v31);
      if (size)
      {
        v34 = size;
        v35 = nw_content_context_copy_remote_endpoint(v72);
        v36 = v10[7].isa;
        if (v35)
        {
          v37 = nw_parameters_copy_context(v36);
          *(_QWORD *)buf = v32;
          *(_QWORD *)&buf[8] = 3221225472;
          *(_QWORD *)&buf[16] = ___ZL42nw_connection_group_send_message_on_socketP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_S5_PU27objcproto16OS_dispatch_dataS1__block_invoke_145;
          *(_QWORD *)&buf[24] = &unk_1E149B680;
          v101 = v34;
          *(_QWORD *)&buf[32] = v31;
          v38 = v70;
          v96 = v70;
          v97 = v35;
          v100 = &v91;
          v98 = v72;
          v99 = v71;
          nw_queue_context_async(v37, buf);

          v30 = v69;
          v39 = *(NSObject **)&buf[32];
        }
        else
        {
          if (nw_parameters_get_logging_disabled((uint64_t)v36))
          {
            v35 = 0;
            v30 = v69;
            v38 = v70;
            goto LABEL_64;
          }
          v30 = v69;
          v38 = v70;
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v39 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
          {
            v43 = (int)v70[21].isa;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_group_send_message_on_socket";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v43;
            _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot send without remote endpoint", buf, 0x12u);
          }
        }

LABEL_64:
        goto LABEL_65;
      }
      v38 = v70;
      if (!nw_parameters_get_logging_disabled((uint64_t)v10[7].isa))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v35 = (id)gconnection_groupLogObj;
        if (!os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          goto LABEL_64;
        v42 = (int)v70[21].isa;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message_on_socket";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v42;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = 0;
        v41 = "%{public}s [G%u] Cannot send %zu-length data for multicast connection group";
        goto LABEL_57;
      }
    }
LABEL_65:
    _Block_object_dispose(&v91, 8);

    goto LABEL_66;
  }
  if (!nw_parameters_get_logging_disabled((uint64_t)v7[7].isa))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v52 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
    {
      v53 = (int)v7[21].isa;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_reply";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v53;
      _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot reply on a failed or cancelled group", buf, 0x12u);
    }

  }
LABEL_67:

}

void sub_183432C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,id a39)
{
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;

  _Block_object_dispose((const void *)(v44 - 240), 8);
  _Block_object_dispose(&a34, 8);

  _Unwind_Resume(a1);
}

void __nw_connection_group_reply_block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  id v7;
  BOOL v8;
  NSObject *v9;
  int v10;
  uint64_t id;
  NSObject *v12;
  int v13;
  uint64_t v14;
  const char *identifier;
  uint64_t v16;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char v31;
  os_log_type_t type;
  _BYTE buf[40];
  _BYTE *v34;
  _BYTE v35[24];
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v35 = 136446210;
    *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null group", v35, 0xCu);
      }
    }
    else if (v31)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)v35 = 136446466;
          *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
          *(_WORD *)&v35[12] = 2082;
          *(_QWORD *)&v35[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null group, dumping backtrace:%{public}s", v35, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v18)
        {
LABEL_55:

          goto LABEL_11;
        }
LABEL_54:
        free(v18);
        goto LABEL_55;
      }
      if (v25)
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null group, no backtrace", v35, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v29, "%{public}s called with null group, backtrace limit exceeded", v35, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (!v4)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v35 = 136446210;
    *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v18, &type, &v31))
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s called with null connection", v35, 0xCu);
      }
    }
    else if (v31)
    {
      v26 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v19, type);
      if (v26)
      {
        if (v28)
        {
          *(_DWORD *)v35 = 136446466;
          *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
          *(_WORD *)&v35[12] = 2082;
          *(_QWORD *)&v35[14] = v26;
          _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null connection, dumping backtrace:%{public}s", v35, 0x16u);
        }

        free(v26);
        if (!v18)
          goto LABEL_55;
        goto LABEL_54;
      }
      if (v28)
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v27, "%{public}s called with null connection, no backtrace", v35, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)v35 = 136446210;
        *(_QWORD *)&v35[4] = "nw_connection_group_has_connection_locked";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null connection, backtrace limit exceeded", v35, 0xCu);
      }
    }
    goto LABEL_52;
  }
  *(_QWORD *)v35 = 0;
  *(_QWORD *)&v35[8] = v35;
  *(_QWORD *)&v35[16] = 0x2020000000;
  v36 = 0;
  v6 = (unsigned __int8 *)v3[13];
  if (!v6)
  {
    _Block_object_dispose(v35, 8);

    goto LABEL_11;
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZL41nw_connection_group_has_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
  *(_QWORD *)&buf[24] = &unk_1E14AB5F0;
  v7 = v4;
  *(_QWORD *)&buf[32] = v7;
  v34 = v35;
  nw_array_apply(v6, (uint64_t)buf);

  v8 = *(_BYTE *)(*(_QWORD *)&v35[8] + 24) == 0;
  _Block_object_dispose(v35, 8);

  if (v8)
  {
LABEL_11:
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v12 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40);
        identifier = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 40));
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_connection_group_reply_block_invoke";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        *(_WORD *)&buf[18] = 2048;
        *(_QWORD *)&buf[20] = v14;
        *(_WORD *)&buf[28] = 2080;
        *(_QWORD *)&buf[30] = identifier;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s [G%u] did not find connection %p, dropping reply context %s", buf, 0x26u);
      }

    }
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v9 = *(NSObject **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = 0;
    goto LABEL_18;
  }
  if (nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    return;
  if (__nwlog_connection_group_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
  v9 = (id)gconnection_groupLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
    id = nw_connection_get_id(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40));
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_connection_group_reply_block_invoke";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    *(_WORD *)&buf[18] = 2048;
    *(_QWORD *)&buf[20] = id;
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] has connection [C%llu], sending reply", buf, 0x1Cu);
  }
LABEL_18:

}

void __nw_connection_group_reply_block_invoke_20(uint64_t a1, void *a2)
{
  NSObject *v3;
  BOOL logging_disabled;
  NSObject *v5;
  uint64_t v6;
  int v7;
  const char *identifier;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  int v13;
  const char *v14;
  NSObject *size;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  __int16 v20;
  uint64_t v21;
  __int16 v22;
  const char *v23;
  __int16 v24;
  NSObject *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  logging_disabled = nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56));
  if (v3)
  {
    if (!logging_disabled)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v5 = (id)gconnection_groupLogObj;
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
        goto LABEL_15;
      v6 = *(_QWORD *)(a1 + 40);
      v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      identifier = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 48));
      v16 = 136447234;
      v17 = "nw_connection_group_reply_block_invoke";
      v18 = 1024;
      v19 = v7;
      v20 = 2048;
      v21 = v6;
      v22 = 2080;
      v23 = identifier;
      v24 = 2112;
      v25 = v3;
      v9 = "%{public}s [G%u] context %p reply %s failed with error: %@";
      v10 = v5;
      v11 = OS_LOG_TYPE_ERROR;
LABEL_14:
      _os_log_impl(&dword_182FBE000, v10, v11, v9, (uint8_t *)&v16, 0x30u);
LABEL_15:

    }
  }
  else if (!logging_disabled)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v5 = (id)gconnection_groupLogObj;
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
      goto LABEL_15;
    v12 = *(_QWORD *)(a1 + 40);
    v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
    v14 = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 48));
    size = *(NSObject **)(a1 + 56);
    if (size)
      size = dispatch_data_get_size(size);
    v16 = 136447234;
    v17 = "nw_connection_group_reply_block_invoke";
    v18 = 1024;
    v19 = v13;
    v20 = 2048;
    v21 = v12;
    v22 = 2080;
    v23 = v14;
    v24 = 2048;
    v25 = size;
    v9 = "%{public}s [G%u] sent reply to context %p: (context: %s, content: %zu bytes)";
    v10 = v5;
    v11 = OS_LOG_TYPE_DEBUG;
    goto LABEL_14;
  }

}

nw_endpoint_t nw_connection_group_copy_remote_endpoint_for_message(nw_connection_group_t group, nw_content_context_t context)
{
  nw_connection_group_t v3;
  NSObject *v4;
  NSObject *v5;
  Class isa;
  objc_class *v7;
  int v8;
  NSObject *v9;
  id v10;
  Class v11;
  objc_class *v12;
  int v13;
  Class v14;
  objc_class *v15;
  int v16;
  id *v17;
  void *v18;
  unsigned int v19;
  const char *v20;
  id v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v30;
  unsigned int v31;
  const char *v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  unsigned int v36;
  const char *v37;
  os_log_type_t v38;
  unsigned int v39;
  const char *v40;
  unsigned int v41;
  const char *v42;
  void *v43;
  os_log_type_t v44;
  void *v45;
  os_log_type_t v46;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  os_log_type_t v52;
  char v53;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  void *v58;
  __int16 v59;
  char *v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v3 = group;
  v4 = context;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_connection_group_copy_remote_endpoint_for_message";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v44, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (!v53)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v51 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v51, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v47 = type;
    v48 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v48)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v47, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (v48)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_connection_group_copy_remote_endpoint_for_message";
      v57 = 2082;
      v58 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v47, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  if (!v4)
  {
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_connection_group_copy_remote_endpoint_for_message";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v46, "%{public}s called with null context", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (!v53)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v52 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v52, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v49 = type;
    v50 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v49, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (v50)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_connection_group_copy_remote_endpoint_for_message";
      v57 = 2082;
      v58 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v49, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_26:

    free(backtrace_string);
    if (!v22)
      goto LABEL_36;
    goto LABEL_35;
  }
  isa = v3[8].isa;
  if (!isa)
  {
LABEL_17:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v56 = "nw_connection_group_copy_remote_endpoint_for_message";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (!__nwlog_fault(v22, &type, &v53))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s Group descriptor is not set", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (!v53)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s Group descriptor is not set, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    v26 = type;
    v27 = os_log_type_enabled(v23, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v56 = "nw_connection_group_copy_remote_endpoint_for_message";
        _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s Group descriptor is not set, no backtrace", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v56 = "nw_connection_group_copy_remote_endpoint_for_message";
      v57 = 2082;
      v58 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s Group descriptor is not set, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_26;
  }
  v7 = isa;
  v8 = *((_DWORD *)v7 + 2);

  if (v8 != 1)
  {
    v11 = v3[8].isa;
    if (v11)
    {
      v12 = v11;
      v13 = *((_DWORD *)v12 + 2);

      if (v13 == 2)
        goto LABEL_12;
      v14 = v3[8].isa;
      if (v14)
      {
        v15 = v14;
        v16 = *((_DWORD *)v15 + 2);

        if (v16 == 4)
        {
LABEL_12:
          v10 = nw_connection_group_copy_connection_for_message(v3, v5);
          if (!v10)
            goto LABEL_7;
          goto LABEL_13;
        }
        if (v3[8].isa)
        {
          __nwlog_obj();
          v18 = (void *)objc_claimAutoreleasedReturnValue();
          v19 = nw_group_descriptor_get_type(v3[8].isa);
          if (v19 > 4)
            v20 = "unknown";
          else
            v20 = off_1E149B878[v19];
          *(_DWORD *)buf = 136446466;
          v56 = "nw_connection_group_copy_remote_endpoint_for_message";
          v57 = 2080;
          v58 = (void *)v20;
          v22 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v53 = 0;
          if (__nwlog_fault(v22, &type, &v53))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v23 = objc_claimAutoreleasedReturnValue();
              v30 = type;
              if (os_log_type_enabled(v23, type))
              {
                v31 = nw_group_descriptor_get_type(v3[8].isa);
                if (v31 > 4)
                  v32 = "unknown";
                else
                  v32 = off_1E149B878[v31];
                *(_DWORD *)buf = 136446466;
                v56 = "nw_connection_group_copy_remote_endpoint_for_message";
                v57 = 2080;
                v58 = (void *)v32;
                _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s Unsupported group descriptor type: %s", buf, 0x16u);
              }
LABEL_33:

              goto LABEL_34;
            }
            if (!v53)
            {
              __nwlog_obj();
              v23 = objc_claimAutoreleasedReturnValue();
              v38 = type;
              if (os_log_type_enabled(v23, type))
              {
                v39 = nw_group_descriptor_get_type(v3[8].isa);
                if (v39 > 4)
                  v40 = "unknown";
                else
                  v40 = off_1E149B878[v39];
                *(_DWORD *)buf = 136446466;
                v56 = "nw_connection_group_copy_remote_endpoint_for_message";
                v57 = 2080;
                v58 = (void *)v40;
                _os_log_impl(&dword_182FBE000, v23, v38, "%{public}s Unsupported group descriptor type: %s, backtrace limit exceeded", buf, 0x16u);
              }
              goto LABEL_33;
            }
            v33 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v23 = objc_claimAutoreleasedReturnValue();
            v34 = type;
            v35 = os_log_type_enabled(v23, type);
            if (!v33)
            {
              if (v35)
              {
                v41 = nw_group_descriptor_get_type(v3[8].isa);
                if (v41 > 4)
                  v42 = "unknown";
                else
                  v42 = off_1E149B878[v41];
                *(_DWORD *)buf = 136446466;
                v56 = "nw_connection_group_copy_remote_endpoint_for_message";
                v57 = 2080;
                v58 = (void *)v42;
                _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s Unsupported group descriptor type: %s, no backtrace", buf, 0x16u);
              }
              goto LABEL_33;
            }
            if (v35)
            {
              v36 = nw_group_descriptor_get_type(v3[8].isa);
              if (v36 > 4)
                v37 = "unknown";
              else
                v37 = off_1E149B878[v36];
              *(_DWORD *)buf = 136446722;
              v56 = "nw_connection_group_copy_remote_endpoint_for_message";
              v57 = 2080;
              v58 = (void *)v37;
              v59 = 2082;
              v60 = v33;
              _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s Unsupported group descriptor type: %s, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(v33);
          }
LABEL_34:
          if (!v22)
          {
LABEL_36:
            v9 = 0;
            goto LABEL_37;
          }
LABEL_35:
          free(v22);
          goto LABEL_36;
        }
      }
    }
    goto LABEL_17;
  }
  v9 = nw_content_context_copy_remote_endpoint(v5);
  if (!v9)
  {
    v10 = nw_connection_group_copy_connection_for_message(v3, v5);
    if (!v10)
    {
LABEL_7:
      v9 = 0;

      goto LABEL_37;
    }
LABEL_13:
    v17 = (id *)v10;
    v9 = v17[1];

  }
LABEL_37:

  return v9;
}

void sub_183434170(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_connection_group_send_message(nw_connection_group_t group, dispatch_data_t content, nw_endpoint_t endpoint, nw_content_context_t context, nw_connection_group_send_completion_t completion)
{
  nw_connection_group_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  nw_connection_group_send_completion_t v13;
  void *v14;
  NSObject *v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  id v19;
  void (**v20)(_QWORD);
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  NSObject *v36;
  NSObject *v37;
  _QWORD aBlock[4];
  NSObject *v39;
  NSObject *v40;
  NSObject *v41;
  NSObject *v42;
  id v43;
  _BYTE *v44;
  char v45;
  os_log_type_t v46;
  _BYTE buf[24];
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v9 = group;
  v10 = content;
  v11 = endpoint;
  v12 = context;
  v13 = completion;
  v14 = v13;
  v36 = v10;
  v37 = v11;
  if (!v9)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
    v22 = (char *)_os_log_send_and_compose_impl();

    v46 = OS_LOG_TYPE_ERROR;
    v45 = 0;
    if (!__nwlog_fault(v22, &v46, &v45))
      goto LABEL_40;
    if (v46 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = v46;
      if (os_log_type_enabled(v23, v46))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null group", buf, 0xCu);
      }
      goto LABEL_33;
    }
    if (!v45)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v34 = v46;
      if (os_log_type_enabled(v23, v46))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
        _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v28 = objc_claimAutoreleasedReturnValue();
    v29 = v46;
    v30 = os_log_type_enabled(v28, v46);
    if (backtrace_string)
    {
      if (v30)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
LABEL_40:
      if (!v22)
        goto LABEL_6;
LABEL_41:
      free(v22);
      goto LABEL_6;
    }
    if (v30)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
      _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null group, no backtrace", buf, 0xCu);
    }
LABEL_39:

    goto LABEL_40;
  }
  if (v13)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v48 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_send_message_block_invoke;
    aBlock[3] = &unk_1E14A21C0;
    v15 = v9;
    v39 = v15;
    v16 = v10;
    v40 = v16;
    v17 = v11;
    v41 = v17;
    v18 = v12;
    v42 = v18;
    v19 = v14;
    v43 = v19;
    v44 = buf;
    v20 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v9[21].isa + 1);
    v20[2](v20);
    os_unfair_lock_unlock((os_unfair_lock_t)&v9[21].isa + 1);

    if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
      nw_connection_group_send_message_internal(v15, v16, v17, v18, v19);

    _Block_object_dispose(buf, 8);
    goto LABEL_6;
  }
  __nwlog_obj();
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
  v22 = (char *)_os_log_send_and_compose_impl();

  v46 = OS_LOG_TYPE_ERROR;
  v45 = 0;
  if (!__nwlog_fault(v22, &v46, &v45))
    goto LABEL_40;
  if (v46 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v26 = v46;
    if (os_log_type_enabled(v23, v46))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
      _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null completion", buf, 0xCu);
    }
LABEL_33:

    goto LABEL_40;
  }
  if (!v45)
  {
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    v35 = v46;
    if (os_log_type_enabled(v23, v46))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
      _os_log_impl(&dword_182FBE000, v23, v35, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_33;
  }
  v31 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v28 = objc_claimAutoreleasedReturnValue();
  v32 = v46;
  v33 = os_log_type_enabled(v28, v46);
  if (!v31)
  {
    if (v33)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
      _os_log_impl(&dword_182FBE000, v28, v32, "%{public}s called with null completion, no backtrace", buf, 0xCu);
    }
    goto LABEL_39;
  }
  if (v33)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_connection_group_send_message";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v31;
    _os_log_impl(&dword_182FBE000, v28, v32, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v31);
  if (v22)
    goto LABEL_41;
LABEL_6:

}

void sub_183434768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23,void *a24)
{
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;

  _Block_object_dispose((const void *)(v29 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZL42nw_connection_group_send_message_on_socketP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_S5_PU27objcproto16OS_dispatch_dataS1__block_invoke(uint64_t a1, int a2)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = a2;
  return 1;
}

void ___ZL42nw_connection_group_send_message_on_socketP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_fd_wrapper8NSObjectPU32objcproto21OS_nw_content_contextS1_S5_PU27objcproto16OS_dispatch_dataS1__block_invoke_145(uint64_t a1)
{
  size_t v2;
  void *v3;
  NSObject *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  const sockaddr *address;
  BOOL logging_disabled;
  char v10;
  ssize_t v11;
  ssize_t v12;
  int v13;
  NSObject *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  id v21;
  uint64_t v22;
  void *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  BOOL v30;
  NSObject *v31;
  int v32;
  uint64_t v33;
  const char *identifier;
  NSObject *size;
  const char *v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  const char *v41;
  NSObject *v42;
  char *backtrace_string;
  os_log_type_t v44;
  _BOOL4 v45;
  uint64_t v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  void *v51;
  NSObject *v52;
  void *v53;
  NSObject *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  _QWORD v59[4];
  os_log_type_t type[8];
  os_log_type_t *v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE applier[56];
  uint64_t v65;

  v65 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
  {
    __nwlog_obj();
    v50 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v50, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446210;
    *(_QWORD *)&applier[4] = "strict_calloc";
    v51 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v51))
      goto LABEL_83;
    free(v51);
  }
  v3 = malloc_type_calloc(1uLL, v2, 0xEAFB8F1AuLL);
  if (!v3)
  {
    __nwlog_obj();
    v52 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v52, OS_LOG_TYPE_ERROR);
    *(_DWORD *)applier = 136446722;
    *(_QWORD *)&applier[4] = "strict_calloc";
    *(_WORD *)&applier[12] = 2048;
    *(_QWORD *)&applier[14] = 1;
    *(_WORD *)&applier[22] = 2048;
    *(_QWORD *)&applier[24] = v2;
    v53 = (void *)_os_log_send_and_compose_impl();

    if (!__nwlog_abort((uint64_t)v53))
    {
      free(v53);
      v5 = (uint64_t *)(a1 + 32);
      v7 = nw_dispatch_data_copyout(*(NSObject **)(a1 + 32), 0, *(_QWORD *)(a1 + 80));
      goto LABEL_7;
    }
LABEL_83:
    __break(1u);
    return;
  }
  v5 = (uint64_t *)(a1 + 32);
  v4 = *(NSObject **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)type = 0;
  v61 = type;
  v62 = 0x2000000000;
  v63 = 0;
  v59[0] = 0;
  v59[1] = v59;
  v59[2] = 0x2000000000;
  v59[3] = v3;
  if (v4)
  {
    *(_QWORD *)applier = MEMORY[0x1E0C809B0];
    *(_QWORD *)&applier[8] = 0x40000000;
    *(_QWORD *)&applier[16] = __nw_dispatch_data_copyout_block_invoke;
    *(_QWORD *)&applier[24] = &unk_1E14A3448;
    *(_QWORD *)&applier[40] = v59;
    *(_QWORD *)&applier[48] = v6;
    *(_QWORD *)&applier[32] = type;
    dispatch_data_apply(v4, applier);
    v7 = *((_QWORD *)v61 + 3);
  }
  else
  {
    v7 = 0;
  }
  _Block_object_dispose(v59, 8);
  _Block_object_dispose(type, 8);
LABEL_7:
  if (v7 != *(_QWORD *)(a1 + 80))
  {
    if (nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56)))
      goto LABEL_42;
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v14 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = *(_QWORD *)(a1 + 32);
      v16 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 168);
      v17 = *(_QWORD *)(a1 + 80);
      *(_DWORD *)applier = 136446978;
      *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v16;
      *(_WORD *)&applier[18] = 2048;
      *(_QWORD *)&applier[20] = v17;
      *(_WORD *)&applier[28] = 2112;
      *(_QWORD *)&applier[30] = v15;
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Failed to copy %zu bytes of content from %@", applier, 0x26u);
    }
    goto LABEL_22;
  }
  address = nw_endpoint_get_address(*(nw_endpoint_t *)(a1 + 48));
  logging_disabled = nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56));
  if (!address)
  {
    if (logging_disabled)
      goto LABEL_42;
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v14 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v18 = *(_QWORD *)(a1 + 48);
      v19 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 168);
      *(_DWORD *)applier = 136446722;
      *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v19;
      *(_WORD *)&applier[18] = 2112;
      *(_QWORD *)&applier[20] = v18;
      _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Failed to access address from %@", applier, 0x1Cu);
    }
LABEL_22:

    goto LABEL_42;
  }
  if (gLogDatapath)
    v10 = logging_disabled;
  else
    v10 = 1;
  if ((v10 & 1) == 0)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v54 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v54, OS_LOG_TYPE_DEBUG))
    {
      v55 = *(_QWORD *)(a1 + 48);
      v56 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 168);
      v57 = *(_QWORD *)(a1 + 80);
      v58 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
      *(_DWORD *)applier = 136447490;
      *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
      *(_WORD *)&applier[12] = 1024;
      *(_DWORD *)&applier[14] = v56;
      *(_WORD *)&applier[18] = 1024;
      *(_DWORD *)&applier[20] = v58;
      *(_WORD *)&applier[24] = 2048;
      *(_QWORD *)&applier[26] = v3;
      *(_WORD *)&applier[34] = 2048;
      *(_QWORD *)&applier[36] = v57;
      *(_WORD *)&applier[44] = 2112;
      *(_QWORD *)&applier[46] = v55;
      _os_log_impl(&dword_182FBE000, v54, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] calling sendto(%d, %p, %zu, 0, %@)", applier, 0x36u);
    }

  }
  v11 = sendto(*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24), v3, *(_QWORD *)(a1 + 80), 0, address, address->sa_len);
  v12 = v11;
  if (v11 < 0)
  {
    v20 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    v22 = *v5;
    *(_DWORD *)applier = 136446722;
    *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
    *(_WORD *)&applier[12] = 2112;
    *(_QWORD *)&applier[14] = v22;
    *(_WORD *)&applier[22] = 1024;
    *(_DWORD *)&applier[24] = v20;
    v23 = (void *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v59[0]) = 0;
    if (__nwlog_fault((const char *)v23, type, v59))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v25 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          v26 = *v5;
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
          *(_WORD *)&applier[12] = 2112;
          *(_QWORD *)&applier[14] = v26;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)&applier[24] = v20;
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s sendto failed for %@ %{darwin.errno}d", applier, 0x1Cu);
        }
      }
      else if (LOBYTE(v59[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v44 = type[0];
        v45 = os_log_type_enabled(v24, type[0]);
        if (backtrace_string)
        {
          if (v45)
          {
            v46 = *v5;
            *(_DWORD *)applier = 136446978;
            *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
            *(_WORD *)&applier[12] = 2112;
            *(_QWORD *)&applier[14] = v46;
            *(_WORD *)&applier[22] = 1024;
            *(_DWORD *)&applier[24] = v20;
            *(_WORD *)&applier[28] = 2082;
            *(_QWORD *)&applier[30] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v44, "%{public}s sendto failed for %@ %{darwin.errno}d, dumping backtrace:%{public}s", applier, 0x26u);
          }

          free(backtrace_string);
          if (!v23)
          {
LABEL_42:
            v13 = 0;
            if (!v3)
              goto LABEL_44;
            goto LABEL_43;
          }
LABEL_35:
          free(v23);
          goto LABEL_42;
        }
        if (v45)
        {
          v49 = *v5;
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
          *(_WORD *)&applier[12] = 2112;
          *(_QWORD *)&applier[14] = v49;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)&applier[24] = v20;
          _os_log_impl(&dword_182FBE000, v24, v44, "%{public}s sendto failed for %@ %{darwin.errno}d, no backtrace", applier, 0x1Cu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v47 = type[0];
        if (os_log_type_enabled(v24, type[0]))
        {
          v48 = *v5;
          *(_DWORD *)applier = 136446722;
          *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
          *(_WORD *)&applier[12] = 2112;
          *(_QWORD *)&applier[14] = v48;
          *(_WORD *)&applier[22] = 1024;
          *(_DWORD *)&applier[24] = v20;
          _os_log_impl(&dword_182FBE000, v24, v47, "%{public}s sendto failed for %@ %{darwin.errno}d, backtrace limit exceeded", applier, 0x1Cu);
        }
      }

    }
    if (!v23)
      goto LABEL_42;
    goto LABEL_35;
  }
  if (v11 != *(_QWORD *)(a1 + 80))
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v27 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        v28 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 168);
        v29 = *(_QWORD *)(a1 + 80);
        *(_DWORD *)applier = 136446978;
        *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
        *(_WORD *)&applier[12] = 1024;
        *(_DWORD *)&applier[14] = v28;
        *(_WORD *)&applier[18] = 2048;
        *(_QWORD *)&applier[20] = v12;
        *(_WORD *)&applier[28] = 2048;
        *(_QWORD *)&applier[30] = v29;
        _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Failed to send entire packet, sent %zu bytes of %zu", applier, 0x26u);
      }

    }
    goto LABEL_42;
  }
  v13 = 1;
  if (v3)
LABEL_43:
    free(v3);
LABEL_44:
  v30 = nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56));
  if (v13)
  {
    if (v30)
      return;
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v31 = (id)gconnection_groupLogObj;
    if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
      goto LABEL_60;
    v32 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 168);
    v33 = *(_QWORD *)(a1 + 56);
    identifier = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 64));
    size = *(NSObject **)(a1 + 32);
    if (size)
      size = dispatch_data_get_size(size);
    *(_DWORD *)applier = 136447234;
    *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
    *(_WORD *)&applier[12] = 1024;
    *(_DWORD *)&applier[14] = v32;
    *(_WORD *)&applier[18] = 2048;
    *(_QWORD *)&applier[20] = v33;
    *(_WORD *)&applier[28] = 2080;
    *(_QWORD *)&applier[30] = identifier;
    *(_WORD *)&applier[38] = 2048;
    *(_QWORD *)&applier[40] = size;
    v36 = "%{public}s [G%u] sent reply to context %p: (context: %s, content: %zu bytes)";
    v37 = v31;
    v38 = OS_LOG_TYPE_DEBUG;
    goto LABEL_59;
  }
  if (v30)
    return;
  if (__nwlog_connection_group_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
  v31 = (id)gconnection_groupLogObj;
  if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
  {
    v39 = *(_DWORD *)(*(_QWORD *)(a1 + 40) + 168);
    v40 = *(_QWORD *)(a1 + 56);
    v41 = nw_content_context_get_identifier(*(nw_content_context_t *)(a1 + 64));
    v42 = *(NSObject **)(a1 + 32);
    if (v42)
      v42 = dispatch_data_get_size(v42);
    *(_DWORD *)applier = 136447234;
    *(_QWORD *)&applier[4] = "nw_connection_group_send_message_on_socket_block_invoke";
    *(_WORD *)&applier[12] = 1024;
    *(_DWORD *)&applier[14] = v39;
    *(_WORD *)&applier[18] = 2048;
    *(_QWORD *)&applier[20] = v40;
    *(_WORD *)&applier[28] = 2080;
    *(_QWORD *)&applier[30] = v41;
    *(_WORD *)&applier[38] = 2048;
    *(_QWORD *)&applier[40] = v42;
    v36 = "%{public}s [G%u] context %p failed to send reply (context: %s, content: %zu bytes)";
    v37 = v31;
    v38 = OS_LOG_TYPE_ERROR;
LABEL_59:
    _os_log_impl(&dword_182FBE000, v37, v38, v36, applier, 0x30u);
  }
LABEL_60:

}

void __nw_connection_group_send_message_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  NWConcrete_nw_connection_group_send_request *v12;
  void *v13;
  id completion;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  void *v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  void *v23;
  os_log_type_t v24;
  NSObject *v25;
  int v26;
  char *backtrace_string;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  id v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  _WORD v41[17];

  *(_QWORD *)&v41[13] = *MEMORY[0x1E0C80C00];
  if (nw_connection_group_get_type(*(void **)(a1 + 32)) != 1)
    return;
  v2 = *(_QWORD *)(a1 + 32);
  if (!*(_QWORD *)(v2 + 96) || (*(_BYTE *)(v2 + 190) & 0x20) != 0)
    return;
  v4 = *(void **)(a1 + 40);
  v3 = *(void **)(a1 + 48);
  v6 = *(void **)(a1 + 56);
  v5 = *(void **)(a1 + 64);
  v35 = (id)v2;
  v7 = v4;
  v8 = v3;
  v9 = v6;
  v10 = v5;
  v11 = v10;
  if (!v9)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_connection_group_create_request";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v20, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_connection_group_create_request";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null context", buf, 0xCu);
        }
        goto LABEL_43;
      }
      if (!v36)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_connection_group_create_request";
          _os_log_impl(&dword_182FBE000, v21, v33, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_connection_group_create_request";
          v40 = 2082;
          *(_QWORD *)v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_37;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_connection_group_create_request";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
LABEL_49:

    }
LABEL_50:
    if (v20)
      free(v20);
    v12 = 0;
    goto LABEL_7;
  }
  if (!v10)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_connection_group_create_request";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v20, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_connection_group_create_request";
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null completion", buf, 0xCu);
        }
LABEL_43:

        goto LABEL_50;
      }
      if (!v36)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_connection_group_create_request";
          _os_log_impl(&dword_182FBE000, v21, v34, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_43;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v28, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_connection_group_create_request";
          v40 = 2082;
          *(_QWORD *)v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_37:

        free(backtrace_string);
        goto LABEL_50;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v39 = "nw_connection_group_create_request";
        _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_49;
    }
    goto LABEL_50;
  }
  v12 = objc_alloc_init(NWConcrete_nw_connection_group_send_request);
  objc_storeStrong((id *)&v12->group, (id)v2);
  objc_storeStrong((id *)&v12->data, v4);
  objc_storeStrong((id *)&v12->endpoint, v3);
  objc_storeStrong((id *)&v12->context, v6);
  v13 = _Block_copy(v11);
  completion = v12->completion;
  v12->completion = v13;

LABEL_7:
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v25 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEBUG))
    {
      v26 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      *(_DWORD *)buf = 136446722;
      v39 = "nw_connection_group_send_message_block_invoke";
      v40 = 1024;
      *(_DWORD *)v41 = v26;
      v41[2] = 2112;
      *(_QWORD *)&v41[3] = v12;
      _os_log_impl(&dword_182FBE000, v25, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] enqueuing send request %@", buf, 0x1Cu);
    }

  }
  v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
  if (!v15)
  {
    v16 = nw_array_create();
    v17 = *(_QWORD *)(a1 + 32);
    v18 = *(void **)(v17 + 112);
    *(_QWORD *)(v17 + 112) = v16;

    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 112);
  }
  nw_array_append(v15, v12);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;

}

void sub_1834358F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

void nw_connection_group_send_message_internal(void *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  char *v12;
  id v13;
  _BOOL8 v14;
  char *v15;
  void *v16;
  _BOOL8 host_with_numeric_port;
  _DWORD *v18;
  int v19;
  unsigned int port;
  os_unfair_lock_s *v21;
  id v22;
  id v23;
  void *v24;
  NWConcrete_nw_connection *v25;
  void (**v26)(_QWORD);
  NWConcrete_nw_connection *v27;
  id v28;
  uint64_t v29;
  void *v30;
  _DWORD *v31;
  int v32;
  void *v33;
  NWConcrete_nw_connection *v34;
  os_unfair_lock_s *v35;
  void *v36;
  void *v37;
  _DWORD *v38;
  int v39;
  nw_connection_t v40;
  id v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  char *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  void *v48;
  void (**v49)(_QWORD);
  NSObject *v50;
  uint32_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  os_unfair_lock_s *v55;
  void (**v56)(_QWORD);
  os_log_type_t v57;
  NSObject *v58;
  uint32_t v59;
  uint64_t v60;
  void *v61;
  id *v62;
  id *v63;
  void (**v64)(_QWORD);
  id v65;
  int v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  int v70;
  NSObject *v71;
  int v72;
  uint64_t v73;
  void *v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  void *v78;
  os_log_type_t v79;
  const char *backtrace_string;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  int v84;
  NSObject *v85;
  uint32_t os_unfair_lock_opaque;
  char *v87;
  os_log_type_t v88;
  _BOOL4 v89;
  os_log_type_t v90;
  _BOOL4 v91;
  os_log_type_t v92;
  int v93;
  NSObject *v94;
  uint32_t v95;
  NSObject *v96;
  uint32_t v97;
  void *v98;
  os_log_type_t v99;
  os_log_type_t v100;
  os_log_type_t v101;
  os_log_type_t v102;
  int v103;
  char *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  os_log_type_t v107;
  NWConcrete_nw_connection *v108;
  id v109;
  os_unfair_lock_s *v110;
  NSObject *v111;
  NSObject *parameters;
  id v113;
  os_unfair_lock_s *v114;
  void *v115;
  void (**v116)(void *, uint64_t);
  void *v117;
  NSObject *content;
  id v119;
  NSObject *context;
  _QWORD completion[4];
  os_unfair_lock_s *v122;
  NWConcrete_nw_connection *v123;
  void (**v124)(_QWORD);
  _QWORD v125[4];
  os_unfair_lock_s *v126;
  id v127;
  _QWORD aBlock[4];
  id v129;
  id v130;
  uint64_t v131;
  uint64_t *v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t (*v138)(uint64_t, uint64_t);
  void (*v139)(uint64_t);
  id v140;
  uint8_t v141[4];
  const char *v142;
  __int16 v143;
  uint32_t v144;
  __int16 v145;
  uint64_t v146;
  _BYTE buf[40];
  NWConcrete_nw_connection *v148;
  id v149;
  uint64_t *v150;
  uint64_t *v151;
  _BYTE v152[40];
  _BYTE *v153;
  _BYTE v154[40];
  _BYTE *v155;
  uint64_t v156;

  v156 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  content = a2;
  v10 = a3;
  context = a4;
  v11 = a5;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke;
  aBlock[3] = &unk_1E149B6A8;
  v12 = (char *)v9;
  v129 = v12;
  v119 = v11;
  v130 = v119;
  v116 = (void (**)(void *, uint64_t))_Block_copy(aBlock);
  if (!context)
  {
    if (nw_parameters_get_logging_disabled(*((_QWORD *)v12 + 7)))
    {
LABEL_158:
      v73 = 22;
LABEL_159:
      v116[2](v116, v73);
      goto LABEL_75;
    }
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v65 = (id)gconnection_groupLogObj;
    v66 = *((_DWORD *)v12 + 42);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v66;
    v67 = (char *)_os_log_send_and_compose_impl();

    v154[0] = 16;
    v152[0] = 0;
    if (__nwlog_fault(v67, v154, v152))
    {
      if (v154[0] == 17)
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v68 = (id)gconnection_groupLogObj;
        v69 = v154[0];
        if (os_log_type_enabled(v68, (os_log_type_t)v154[0]))
        {
          v70 = *((_DWORD *)v12 + 42);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v70;
          _os_log_impl(&dword_182FBE000, v68, v69, "%{public}s [G%u] context must not be NULL", buf, 0x12u);
        }
      }
      else if (v152[0])
      {
        backtrace_string = __nw_create_backtrace_string();
        if (backtrace_string)
        {
          v81 = (char *)backtrace_string;
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v82 = (id)gconnection_groupLogObj;
          v83 = v154[0];
          if (os_log_type_enabled(v82, (os_log_type_t)v154[0]))
          {
            v84 = *((_DWORD *)v12 + 42);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v84;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v81;
            _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s [G%u] context must not be NULL, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v81);
          goto LABEL_156;
        }
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v68 = (id)gconnection_groupLogObj;
        v102 = v154[0];
        if (os_log_type_enabled(v68, (os_log_type_t)v154[0]))
        {
          v103 = *((_DWORD *)v12 + 42);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v103;
          _os_log_impl(&dword_182FBE000, v68, v102, "%{public}s [G%u] context must not be NULL, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v68 = (id)gconnection_groupLogObj;
        v92 = v154[0];
        if (os_log_type_enabled(v68, (os_log_type_t)v154[0]))
        {
          v93 = *((_DWORD *)v12 + 42);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v93;
          _os_log_impl(&dword_182FBE000, v68, v92, "%{public}s [G%u] context must not be NULL, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
LABEL_156:
    if (v67)
      free(v67);
    goto LABEL_158;
  }
  if (v12[190] < 0 || *((int *)v12 + 10) >= 3)
  {
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v12 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v71 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
      {
        v72 = *((_DWORD *)v12 + 42);
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v72;
        _os_log_impl(&dword_182FBE000, v71, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot send a message on a failed or cancelled group", buf, 0x12u);
      }

    }
    v73 = 89;
    goto LABEL_159;
  }
  if (v10)
    goto LABEL_5;
  v28 = nw_group_descriptor_copy_members(*((void **)v12 + 8));
  v22 = v28;
  if (!v28 || *((_QWORD *)v28 + 3) == *((_QWORD *)v28 + 2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v41 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
    v42 = (char *)_os_log_send_and_compose_impl();

    v154[0] = 16;
    v152[0] = 0;
    if (!__nwlog_fault(v42, v154, v152))
      goto LABEL_71;
    if (v154[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v43 = (id)gLogObj;
      v44 = v154[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v154[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s Cannot find endpoints for sending", buf, 0xCu);
      }
    }
    else if (v152[0])
    {
      v45 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v43 = (id)gLogObj;
      v46 = v154[0];
      v47 = os_log_type_enabled(v43, (os_log_type_t)v154[0]);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v45;
          _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s Cannot find endpoints for sending, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v45);
        if (!v42)
          goto LABEL_73;
        goto LABEL_72;
      }
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s Cannot find endpoints for sending, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v43 = (id)gLogObj;
      v57 = v154[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v154[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_182FBE000, v43, v57, "%{public}s Cannot find endpoints for sending, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_70;
  }
  nw_array_get_object_at_index((uint64_t)v28, 0);
  v29 = objc_claimAutoreleasedReturnValue();
  if (v29)
  {
    v10 = (id)v29;

LABEL_5:
    v10 = v10;
    v115 = (void *)objc_msgSend(v10, "copyEndpoint");
    nw_endpoint_copy_properties(v10, v115);

    v13 = *((id *)v12 + 7);
    v14 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v13, 0, 0);

    v15 = v12;
    v16 = (void *)*((_QWORD *)v15 + 8);
    host_with_numeric_port = (_BOOL8)v15;
    if (v16)
    {
      v18 = v16;
      v19 = v18[2];

      if (v19 != 1)
        goto LABEL_9;
      port = nw_connection_group_get_port(v15);
      host_with_numeric_port = nw_endpoint_create_host_with_numeric_port("0.0.0.0", port);
      nw_parameters_set_reuse_local_address((nw_parameters_t)v14, 1);
      nw_parameters_set_local_endpoint((nw_parameters_t)v14, (nw_endpoint_t)host_with_numeric_port);
      nw_parameters_set_allow_socket_access((void *)v14, 1);
    }

LABEL_9:
    v21 = v15;
    v22 = v115;
    v23 = (id)v14;
    v117 = v23;
    if (v22)
    {
      v24 = v23;
      if (v23)
      {
        v135 = 0;
        v136 = &v135;
        v137 = 0x3032000000;
        v138 = __Block_byref_object_copy__8574;
        v139 = __Block_byref_object_dispose__8575;
        v140 = 0;
        v131 = 0;
        v132 = &v131;
        v133 = 0x2020000000;
        v134 = 0;
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke;
        *(_QWORD *)&buf[24] = &unk_1E149B6D0;
        v114 = v21;
        *(_QWORD *)&buf[32] = v114;
        v150 = &v131;
        v25 = v24;
        v148 = v25;
        v113 = v22;
        v149 = v113;
        v151 = &v135;
        v26 = (void (**)(_QWORD))_Block_copy(buf);
        os_unfair_lock_lock(v21 + 43);
        v26[2](v26);
        os_unfair_lock_unlock(v21 + 43);

        if (*((_BYTE *)v132 + 24))
        {
          v27 = 0;
LABEL_61:

          _Block_object_dispose(&v131, 8);
          _Block_object_dispose(&v135, 8);

          v61 = v117;
LABEL_62:

          if (v27)
          {
            if (!nw_parameters_get_logging_disabled(*((_QWORD *)v12 + 7)) && gLogDatapath)
            {
              if (__nwlog_connection_group_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
              v85 = (id)gconnection_groupLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
              {
                os_unfair_lock_opaque = v21[42]._os_unfair_lock_opaque;
                *(_DWORD *)buf = 136447234;
                *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = os_unfair_lock_opaque;
                *(_WORD *)&buf[18] = 2112;
                *(_QWORD *)&buf[20] = v22;
                *(_WORD *)&buf[28] = 2112;
                *(_QWORD *)&buf[30] = v117;
                *(_WORD *)&buf[38] = 2112;
                v148 = v27;
                _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Got connection for endpoint (%@) and parameters (%@): %@", buf, 0x30u);
              }

            }
            nw_connection_group_touch_connection((NWConcrete_nw_connection_group *)v21, v27);
            completion[0] = MEMORY[0x1E0C809B0];
            completion[1] = 3221225472;
            completion[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_150;
            completion[3] = &unk_1E149C638;
            v122 = v21;
            v123 = v27;
            v124 = (void (**)(_QWORD))v119;
            nw_connection_send(&v123->super, content, context, 1, completion);
            v62 = (id *)&v122;
            v63 = (id *)&v123;
            v64 = v124;
          }
          else
          {
            v125[0] = MEMORY[0x1E0C809B0];
            v125[1] = 3221225472;
            v125[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_148;
            v125[3] = &unk_1E14ACE18;
            v126 = v21;
            v127 = v119;
            v64 = (void (**)(_QWORD))_Block_copy(v125);
            os_unfair_lock_lock(v21 + 43);
            v64[2](v64);
            v62 = (id *)&v126;
            v63 = &v127;
            os_unfair_lock_unlock(v21 + 43);
          }

          goto LABEL_74;
        }
        if (v136[5])
        {
          v30 = (void *)*((_QWORD *)v15 + 8);
          if (!v30 || (v31 = v30, v32 = v31[2], v31, v32 != 2))
          {
LABEL_60:
            v27 = (NWConcrete_nw_connection *)(id)v136[5];
            goto LABEL_61;
          }
        }
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v12 + 7)) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v94 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v94, OS_LOG_TYPE_DEBUG))
          {
            v95 = v114[42]._os_unfair_lock_opaque;
            *(_DWORD *)v154 = 136446978;
            *(_QWORD *)&v154[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            *(_WORD *)&v154[12] = 1024;
            *(_DWORD *)&v154[14] = v95;
            *(_WORD *)&v154[18] = 2112;
            *(_QWORD *)&v154[20] = v113;
            *(_WORD *)&v154[28] = 2112;
            *(_QWORD *)&v154[30] = v25;
            _os_log_impl(&dword_182FBE000, v94, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Did not find connection for (remote: %@, parameters: %@), creating new connection", v154, 0x26u);
          }

        }
        v33 = (void *)v136[5];
        v110 = v114;
        v109 = v33;
        v111 = v113;
        v34 = v25;
        *(_QWORD *)v154 = 0;
        *(_QWORD *)&v154[8] = v154;
        *(_QWORD *)&v154[16] = 0x3032000000;
        *(_QWORD *)&v154[24] = __Block_byref_object_copy__8574;
        *(_QWORD *)&v154[32] = __Block_byref_object_dispose__8575;
        v155 = 0;
        v108 = v34;
        parameters = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v108, 0, 0);

        v36 = v109;
        v35 = v110;
        nw_parameters_set_reuse_local_address(parameters, 1);
        if (!nw_parameters_get_logging_disabled(*((_QWORD *)v12 + 7)) && gLogDatapath)
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v96 = (id)gconnection_groupLogObj;
          v35 = v110;
          if (os_log_type_enabled(v96, OS_LOG_TYPE_DEBUG))
          {
            v97 = v110[42]._os_unfair_lock_opaque;
            *(_DWORD *)v152 = 136446978;
            *(_QWORD *)&v152[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
            *(_WORD *)&v152[12] = 1024;
            *(_DWORD *)&v152[14] = v97;
            *(_WORD *)&v152[18] = 2112;
            *(_QWORD *)&v152[20] = v111;
            *(_WORD *)&v152[28] = 2112;
            *(_QWORD *)&v152[30] = parameters;
            _os_log_impl(&dword_182FBE000, v96, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Creating connection for endpoint (%@) and parameters (%@)", v152, 0x26u);
          }

          v36 = v109;
        }
        v37 = (void *)*((_QWORD *)v15 + 8);
        if (v37 && (v38 = v37, v39 = v38[2], v38, v39 == 2))
          v40 = (nw_connection_t)nw_connection_create_with_connection(v36, parameters);
        else
          v40 = nw_connection_create(v111, parameters);
        v48 = *(void **)(*(_QWORD *)&v154[8] + 40);
        *(_QWORD *)(*(_QWORD *)&v154[8] + 40) = v40;

        if (*(_QWORD *)(*(_QWORD *)&v154[8] + 40))
        {
          *(_QWORD *)v152 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v152[8] = 3221225472;
          *(_QWORD *)&v152[16] = ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke;
          *(_QWORD *)&v152[24] = &unk_1E14ACE40;
          *(_QWORD *)&v152[32] = v35;
          v153 = v154;
          v49 = (void (**)(_QWORD))_Block_copy(v152);
          os_unfair_lock_lock(v21 + 43);
          v49[2](v49);
          os_unfair_lock_unlock(v21 + 43);

          v50 = *(NSObject **)&v152[32];
        }
        else
        {
          if (nw_parameters_get_logging_disabled(*((_QWORD *)v12 + 7)))
            goto LABEL_47;
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v50 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            v51 = v35[42]._os_unfair_lock_opaque;
            v52 = *((_QWORD *)v12 + 7);
            *(_DWORD *)v152 = 136446722;
            *(_QWORD *)&v152[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
            *(_WORD *)&v152[12] = 1024;
            *(_DWORD *)&v152[14] = v51;
            *(_WORD *)&v152[18] = 2112;
            *(_QWORD *)&v152[20] = v52;
            _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to create connection with parameters %@", v152, 0x1Cu);
          }
        }

LABEL_47:
        v53 = *(id *)(*(_QWORD *)&v154[8] + 40);

        _Block_object_dispose(v154, 8);
        v54 = (void *)v136[5];
        v136[5] = (uint64_t)v53;

        if (v136[5])
        {
          *(_QWORD *)v152 = 0;
          *(_QWORD *)&v152[8] = v152;
          *(_QWORD *)&v152[16] = 0x2020000000;
          v152[24] = 0;
          *(_QWORD *)v154 = MEMORY[0x1E0C809B0];
          *(_QWORD *)&v154[8] = 3221225472;
          *(_QWORD *)&v154[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_154;
          *(_QWORD *)&v154[24] = &unk_1E14ACE40;
          v155 = v152;
          v55 = v35;
          *(_QWORD *)&v154[32] = v55;
          v56 = (void (**)(_QWORD))_Block_copy(v154);
          os_unfair_lock_lock(v21 + 43);
          v56[2](v56);
          os_unfair_lock_unlock(v21 + 43);

          if (*(_BYTE *)(*(_QWORD *)&v152[8] + 24))
          {
            nw_connection_start((nw_connection_t)v136[5]);
          }
          else if (!nw_parameters_get_logging_disabled(*((_QWORD *)v12 + 7)))
          {
            if (__nwlog_connection_group_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
            v58 = (id)gconnection_groupLogObj;
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEBUG))
            {
              v59 = v55[42]._os_unfair_lock_opaque;
              v60 = v136[5];
              *(_DWORD *)v141 = 136446722;
              v142 = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
              v143 = 1024;
              v144 = v59;
              v145 = 2112;
              v146 = v60;
              _os_log_impl(&dword_182FBE000, v58, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Deferring start of connection %@ until group start", v141, 0x1Cu);
            }

          }
          _Block_object_dispose(v152, 8);
        }
        goto LABEL_60;
      }
      __nwlog_obj();
      v78 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      v75 = (char *)_os_log_send_and_compose_impl();

      v154[0] = 16;
      v152[0] = 0;
      if (__nwlog_fault(v75, v154, v152))
      {
        if (v154[0] == 17)
        {
          __nwlog_obj();
          v76 = objc_claimAutoreleasedReturnValue();
          v79 = v154[0];
          if (os_log_type_enabled(v76, (os_log_type_t)v154[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            _os_log_impl(&dword_182FBE000, v76, v79, "%{public}s called with null parameters", buf, 0xCu);
          }
LABEL_165:

          goto LABEL_166;
        }
        if (!v152[0])
        {
          __nwlog_obj();
          v76 = objc_claimAutoreleasedReturnValue();
          v101 = v154[0];
          if (os_log_type_enabled(v76, (os_log_type_t)v154[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            _os_log_impl(&dword_182FBE000, v76, v101, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_165;
        }
        v87 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v76 = objc_claimAutoreleasedReturnValue();
        v90 = v154[0];
        v91 = os_log_type_enabled(v76, (os_log_type_t)v154[0]);
        if (!v87)
        {
          if (v91)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            _os_log_impl(&dword_182FBE000, v76, v90, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
          }
          goto LABEL_165;
        }
        if (v91)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v87;
          _os_log_impl(&dword_182FBE000, v76, v90, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_124;
      }
    }
    else
    {
      __nwlog_obj();
      v74 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      v75 = (char *)_os_log_send_and_compose_impl();

      v154[0] = 16;
      v152[0] = 0;
      if (__nwlog_fault(v75, v154, v152))
      {
        if (v154[0] == 17)
        {
          __nwlog_obj();
          v76 = objc_claimAutoreleasedReturnValue();
          v77 = v154[0];
          if (os_log_type_enabled(v76, (os_log_type_t)v154[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s called with null remote_endpoint", buf, 0xCu);
          }
          goto LABEL_165;
        }
        if (!v152[0])
        {
          __nwlog_obj();
          v76 = objc_claimAutoreleasedReturnValue();
          v100 = v154[0];
          if (os_log_type_enabled(v76, (os_log_type_t)v154[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            _os_log_impl(&dword_182FBE000, v76, v100, "%{public}s called with null remote_endpoint, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_165;
        }
        v87 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v76 = objc_claimAutoreleasedReturnValue();
        v88 = v154[0];
        v89 = os_log_type_enabled(v76, (os_log_type_t)v154[0]);
        if (!v87)
        {
          if (v89)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            _os_log_impl(&dword_182FBE000, v76, v88, "%{public}s called with null remote_endpoint, no backtrace", buf, 0xCu);
          }
          goto LABEL_165;
        }
        if (v89)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v87;
          _os_log_impl(&dword_182FBE000, v76, v88, "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_124:

        free(v87);
      }
    }
LABEL_166:
    v61 = v117;
    if (v75)
      free(v75);
    v27 = 0;
    goto LABEL_62;
  }
  __nwlog_obj();
  v98 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
  v42 = (char *)_os_log_send_and_compose_impl();

  v154[0] = 16;
  v152[0] = 0;
  if (__nwlog_fault(v42, v154, v152))
  {
    if (v154[0] == 17)
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v99 = v154[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v154[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_182FBE000, v43, v99, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_70:

      goto LABEL_71;
    }
    if (!v152[0])
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v107 = v154[0];
      if (os_log_type_enabled(v43, (os_log_type_t)v154[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_182FBE000, v43, v107, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_70;
    }
    v104 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v43 = objc_claimAutoreleasedReturnValue();
    v105 = v154[0];
    v106 = os_log_type_enabled(v43, (os_log_type_t)v154[0]);
    if (!v104)
    {
      if (v106)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
        _os_log_impl(&dword_182FBE000, v43, v105, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_70;
    }
    if (v106)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_group_send_message_internal";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v104;
      _os_log_impl(&dword_182FBE000, v43, v105, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v104);
  }
LABEL_71:
  if (v42)
LABEL_72:
    free(v42);
LABEL_73:
  v10 = 0;
LABEL_74:

LABEL_75:
}

void sub_1834370BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,void *a44)
{
  void *v44;
  void *v45;

  _Unwind_Resume(a1);
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke(uint64_t a1, int a2)
{
  os_unfair_lock_s *v4;
  os_unfair_lock_s *v5;
  void (**v6)(_QWORD);
  _QWORD aBlock[4];
  os_unfair_lock_s *v8;
  id v9;
  int v10;

  v4 = *(os_unfair_lock_s **)(a1 + 32);
  v5 = v4 + 43;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2;
  aBlock[3] = &unk_1E14ACFF8;
  v8 = v4;
  v9 = *(id *)(a1 + 40);
  v10 = a2;
  v6 = (void (**)(_QWORD))_Block_copy(aBlock);
  os_unfair_lock_lock(v5);
  v6[2](v6);
  os_unfair_lock_unlock(v5);

}

void sub_18343733C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;

  _Unwind_Resume(a1);
}

uint64_t nw_connection_group_get_port(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void (**v3)(_QWORD);
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD aBlock[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v20 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_get_port_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v15 = v1;
    v16 = buf;
    v3 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v2 + 43);
    v3[2](v3);
    os_unfair_lock_unlock(v2 + 43);

    v4 = *(unsigned __int16 *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_group_get_port";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_get_port";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_get_port";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_get_port";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_get_port";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_183437684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  int v7;
  _QWORD v8[4];
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(char *)(v2 + 190) < 0)
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(v2 + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v6 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446466;
        v14 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        v15 = 1024;
        v16 = v7;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] has cancelled", buf, 0x12u);
      }

    }
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  }
  else
  {
    v3 = *(unsigned __int8 **)(v2 + 104);
    if (v3)
    {
      v8[0] = MEMORY[0x1E0C809B0];
      v8[1] = 3221225472;
      v8[2] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_153;
      v8[3] = &unk_1E149E0D8;
      v9 = (id)v2;
      v10 = *(id *)(a1 + 40);
      v4 = *(id *)(a1 + 48);
      v5 = *(_QWORD *)(a1 + 64);
      v11 = v4;
      v12 = v5;
      nw_array_apply(v3, (uint64_t)v8);

    }
  }
}

uint64_t ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke(uint64_t a1)
{
  return nw_connection_group_add_connection_locked(*(NWConcrete_nw_connection_group **)(a1 + 32), *(NWConcrete_nw_connection **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40));
}

uint64_t ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_154(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 190) & 1;
  return result;
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_148(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  dispatch_qos_class_t v3;
  NSObject *v4;
  dispatch_block_t v5;
  _QWORD block[4];
  id v7;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 8);
  if (v2)
  {
    v3 = *(_DWORD *)(v1 + 16);
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2_149;
    block[3] = &unk_1E14AC390;
    v7 = *(id *)(a1 + 40);
    v4 = v2;
    v5 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v3, 0, block);
    dispatch_async(v4, v5);

  }
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_150(uint64_t a1, void *a2)
{
  id v3;
  uint64_t v4;
  os_unfair_lock_s *v5;
  void (**v6)(_QWORD);
  void *v7;
  dispatch_qos_class_t v8;
  NSObject *v9;
  dispatch_block_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  NSObject *v15;
  uint64_t v16;
  int v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _QWORD block[4];
  id v23;
  id v24;
  char v25;
  os_log_type_t type;
  _QWORD aBlock[4];
  os_unfair_lock_s *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  void (*v34)(uint64_t);
  id v35;
  uint8_t buf[4];
  const char *v37;
  __int16 v38;
  _BYTE v39[14];
  __int16 v40;
  id v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  v30 = 0;
  v31 = &v30;
  v32 = 0x3032000000;
  v33 = __Block_byref_object_copy__8574;
  v34 = __Block_byref_object_dispose__8575;
  v35 = 0;
  v4 = MEMORY[0x1E0C809B0];
  v5 = *(os_unfair_lock_s **)(a1 + 32);
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2_151;
  aBlock[3] = &unk_1E14ACE40;
  v29 = &v30;
  v28 = v5;
  v6 = (void (**)(_QWORD))_Block_copy(aBlock);
  v5 += 43;
  os_unfair_lock_lock(v5);
  v6[2](v6);
  os_unfair_lock_unlock(v5);

  if (v31[5])
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v15 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        v16 = *(_QWORD *)(a1 + 40);
        v17 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446978;
        v37 = "nw_connection_group_send_message_internal_block_invoke";
        v38 = 1024;
        *(_DWORD *)v39 = v17;
        *(_WORD *)&v39[4] = 2112;
        *(_QWORD *)&v39[6] = v16;
        v40 = 2112;
        v41 = v3;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Connection Group send to complete for connection (%@) with error: %@", buf, 0x26u);
      }

    }
    v7 = (void *)v31[5];
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 16);
    block[0] = v4;
    block[1] = 3221225472;
    block[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_152;
    block[3] = &unk_1E14ACE18;
    v24 = *(id *)(a1 + 48);
    v23 = v3;
    v9 = v7;
    v10 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v8, 0, block);
    dispatch_async(v9, v10);

    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v37 = "nw_connection_group_send_message_internal_block_invoke";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v12, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_connection_group_send_message_internal_block_invoke";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null client_queue", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v37 = "nw_connection_group_send_message_internal_block_invoke";
          v38 = 2082;
          *(_QWORD *)v39 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null client_queue, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_connection_group_send_message_internal_block_invoke";
        _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null client_queue, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v37 = "nw_connection_group_send_message_internal_block_invoke";
        _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null client_queue, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v12)
    free(v12);
LABEL_5:

  _Block_object_dispose(&v30, 8);
}

void sub_183437DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,id a32)
{
  void *v32;
  void *v33;

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2_151(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 8));
}

uint64_t ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_152(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2_149(uint64_t a1)
{
  uint64_t v1;
  _DWORD *v2;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_183437EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_153(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v5;
  nw_endpoint_t v6;
  nw_parameters_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  int is_equal;
  uint64_t v11;
  NSObject *v12;
  int v13;
  NSObject *v14;
  int v15;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  int v22;
  void *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  os_log_type_t v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  _BYTE v37[14];
  __int16 v38;
  _BOOL4 v39;
  __int16 v40;
  int v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = a3;
  v6 = nw_connection_copy_endpoint(v5);
  v7 = nw_connection_copy_parameters(v5);
  if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v21 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
    {
      v22 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      *(_DWORD *)buf = 136446722;
      v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
      v36 = 1024;
      *(_DWORD *)v37 = v22;
      *(_WORD *)&v37[4] = 2112;
      *(_QWORD *)&v37[6] = v5;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Inspecting connection %@", buf, 0x1Cu);
    }

  }
  if (!v7)
  {
    __nwlog_obj();
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v18, &type, &v32))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null connection_parameters", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (!v32)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_182FBE000, v19, v30, "%{public}s called with null connection_parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v26 = type;
    v27 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_182FBE000, v19, v26, "%{public}s called with null connection_parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v27)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
      v36 = 2082;
      *(_QWORD *)v37 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v26, "%{public}s called with null connection_parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_45;
  }
  v8 = nw_parameters_are_compatible(*(void **)(a1 + 40), -1, v7, 0, 0);
  if (!v6)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v32 = 0;
    if (!__nwlog_fault(v18, &type, &v32))
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s called with null connection_remote_endpoint", buf, 0xCu);
      }
LABEL_57:

LABEL_58:
      if (v18)
        free(v18);
      goto LABEL_60;
    }
    if (!v32)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_182FBE000, v19, v31, "%{public}s called with null connection_remote_endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_57;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    v28 = type;
    v29 = os_log_type_enabled(v19, type);
    if (!backtrace_string)
    {
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s called with null connection_remote_endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_57;
    }
    if (v29)
    {
      *(_DWORD *)buf = 136446466;
      v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
      v36 = 2082;
      *(_QWORD *)v37 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v19, v28, "%{public}s called with null connection_remote_endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_45:

    free(backtrace_string);
    goto LABEL_58;
  }
  v9 = v8;
  is_equal = nw_endpoint_is_equal(*(void **)(a1 + 48), v6, 31);
  if ((v9 & is_equal) == 1)
  {
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a3);
    v11 = 0;
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v12 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
      {
        v13 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136446722;
        v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        v36 = 1024;
        *(_DWORD *)v37 = v13;
        *(_WORD *)&v37[4] = 2112;
        *(_QWORD *)&v37[6] = v5;
        _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Connection %@ is compatible", buf, 0x1Cu);
      }

LABEL_60:
      v11 = 0;
    }
  }
  else
  {
    if (!nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v14 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
      {
        v15 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
        *(_DWORD *)buf = 136447234;
        v35 = "nw_connection_group_copy_connection_for_endpoint_and_parameters_block_invoke";
        v36 = 1024;
        *(_DWORD *)v37 = v15;
        *(_WORD *)&v37[4] = 2112;
        *(_QWORD *)&v37[6] = v5;
        v38 = 1024;
        v39 = v9;
        v40 = 1024;
        v41 = is_equal;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Connection %@ is not compatible (parameters: %u, remote_endpoints: %u)", buf, 0x28u);
      }

    }
    v11 = 1;
  }

  return v11;
}

void sub_183438600(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __nw_connection_group_get_port_block_invoke(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  NSObject *v4;
  int v5;
  int v6;
  const char *v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  const char *v13;
  __int16 v14;
  int v15;
  __int16 v16;
  int v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  v3 = *(NSObject **)(v2 + 96);
  if (v3)
  {
    if ((*(_BYTE *)(v2 + 190) & 0x20) != 0)
    {
      *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = nw_listener_get_port(v3);
      if (nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
        return;
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v4 = (id)gconnection_groupLogObj;
      if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
        goto LABEL_20;
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
      v6 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
      v12 = 136446722;
      v13 = "nw_connection_group_get_port_block_invoke";
      v14 = 1024;
      v15 = v5;
      v16 = 1024;
      v17 = v6;
      v7 = "%{public}s [G%u] using unicast_listener port=%d";
      goto LABEL_19;
    }
    goto LABEL_9;
  }
  if ((*(_BYTE *)(v2 + 190) & 0x10) == 0)
  {
LABEL_9:
    *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = *(_WORD *)(v2 + 188);
    if (nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
      return;
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v4 = (id)gconnection_groupLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      goto LABEL_20;
    v8 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
    v9 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v12 = 136446722;
    v13 = "nw_connection_group_get_port_block_invoke";
    v14 = 1024;
    v15 = v8;
    v16 = 1024;
    v17 = v9;
    v7 = "%{public}s [G%u] using initial port=%d";
    goto LABEL_19;
  }
  *(_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = nw_listener_get_port(*(nw_listener_t *)(v2 + 88));
  if (nw_parameters_get_logging_disabled(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 56)))
    return;
  if (__nwlog_connection_group_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
  v4 = (id)gconnection_groupLogObj;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    v10 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 168);
    v11 = *(unsigned __int16 *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24);
    v12 = 136446722;
    v13 = "nw_connection_group_get_port_block_invoke";
    v14 = 1024;
    v15 = v10;
    v16 = 1024;
    v17 = v11;
    v7 = "%{public}s [G%u] using listener port=%d";
LABEL_19:
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, v7, (uint8_t *)&v12, 0x18u);
  }
LABEL_20:

}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_2(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  dispatch_qos_class_t v4;
  NSObject *v5;
  dispatch_block_t v6;
  _QWORD v7[4];
  id v8;
  int v9;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(void **)(v1 + 8);
  if (v2)
  {
    v4 = *(_DWORD *)(v1 + 16);
    v7[0] = MEMORY[0x1E0C809B0];
    v7[1] = 3221225472;
    v7[2] = ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_3;
    v7[3] = &unk_1E14AC408;
    v8 = *(id *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 48);
    v5 = v2;
    v6 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, v4, 0, v7);
    dispatch_async(v5, v6);

  }
}

void ___ZL41nw_connection_group_send_message_internalP30NWConcrete_nw_connection_groupPU27objcproto16OS_dispatch_data8NSObjectPU25objcproto14OS_nw_endpointS1_PU32objcproto21OS_nw_content_contextS1_U13block_pointerFvPU22objcproto11OS_nw_errorS1_E_block_invoke_3(uint64_t a1)
{
  uint64_t v1;
  _DWORD *posix_error;

  v1 = *(_QWORD *)(a1 + 32);
  posix_error = nw_error_create_posix_error(*(_DWORD *)(a1 + 40));
  (*(void (**)(uint64_t))(v1 + 16))(v1);

}

void sub_1834389C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t nw_connection_group_get_type(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  unsigned int *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_connection_group_get_type";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_connection_group_get_type";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null group", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_connection_group_get_type";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_connection_group_get_type";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_connection_group_get_type";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v7)
      free(v7);
    goto LABEL_22;
  }
  v3 = (void *)*((_QWORD *)v1 + 8);
  if (!v3)
  {
LABEL_22:
    v5 = 0;
    goto LABEL_23;
  }
  v4 = v3;
  v5 = v4[2];

LABEL_23:
  return v5;
}

id nw_connection_group_copy_connection_for_message(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  uint64_t *v6;
  id v7;
  void (**v8)(_QWORD);
  id v9;
  NSObject *v10;
  int v11;
  NSObject *v12;
  int v13;
  _QWORD aBlock[4];
  uint64_t *v16;
  id v17;
  _BYTE *v18;
  uint8_t v19[4];
  const char *v20;
  __int16 v21;
  int v22;
  __int16 v23;
  id v24;
  _BYTE buf[28];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void *)nw_content_context_copy_connection(v4);
  if (v5)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    buf[24] = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = ___ZL47nw_connection_group_copy_connection_for_messageP30NWConcrete_nw_connection_groupPU32objcproto21OS_nw_content_context8NSObject_block_invoke;
    aBlock[3] = &unk_1E14A2D98;
    v18 = buf;
    v6 = (uint64_t *)v3;
    v16 = v6;
    v7 = v5;
    v17 = v7;
    v8 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 43);
    v8[2](v8);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 43);

    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      v9 = v7;
    }
    else
    {
      if (!nw_parameters_get_logging_disabled(v6[7]))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v12 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
        {
          v13 = *((_DWORD *)v6 + 42);
          *(_DWORD *)v19 = 136446722;
          v20 = "nw_connection_group_copy_connection_for_message";
          v21 = 1024;
          v22 = v13;
          v23 = 2112;
          v24 = v4;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Context %@ is not a valid inbound message received from this group", v19, 0x1Cu);
        }

      }
      v9 = 0;
    }

    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (!nw_parameters_get_logging_disabled(*((_QWORD *)v3 + 7)))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v10 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        v11 = *((_DWORD *)v3 + 42);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_connection_group_copy_connection_for_message";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v11;
        *(_WORD *)&buf[18] = 2112;
        *(_QWORD *)&buf[20] = v4;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Context %@ is not a valid inbound message", buf, 0x1Cu);
      }

    }
    v9 = 0;
  }

  return v9;
}

void sub_183438F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void ___ZL47nw_connection_group_copy_connection_for_messageP30NWConcrete_nw_connection_groupPU32objcproto21OS_nw_content_context8NSObject_block_invoke(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  os_log_type_t type[8];
  os_log_type_t *v21;
  uint64_t v22;
  char v23;
  char v24;
  _BYTE buf[24];
  void *v26;
  id v27;
  os_log_type_t *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v2 = *(void **)(a1 + 40);
  v3 = *(id *)(a1 + 32);
  v4 = v2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      *(_QWORD *)type = 0;
      v21 = type;
      v22 = 0x2020000000;
      v23 = 0;
      v6 = (unsigned __int8 *)v3[13];
      if (v6)
      {
        *(_QWORD *)buf = MEMORY[0x1E0C809B0];
        *(_QWORD *)&buf[8] = 3221225472;
        *(_QWORD *)&buf[16] = ___ZL41nw_connection_group_has_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke;
        v26 = &unk_1E14AB5F0;
        v27 = v4;
        v28 = type;
        nw_array_apply(v6, (uint64_t)buf);

        LOBYTE(v6) = *((_BYTE *)v21 + 24) != 0;
      }
      _Block_object_dispose(type, 8);
      goto LABEL_6;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v8, type, &v24))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v24)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v19 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type[0];
      v17 = os_log_type_enabled(v9, type[0]);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
    v8 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v8, type, &v24))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null group", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v24)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v18 = type[0];
        if (os_log_type_enabled(v9, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type[0];
      v15 = os_log_type_enabled(v9, type[0]);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_has_connection_locked";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v8)
    free(v8);
  LOBYTE(v6) = 0;
LABEL_6:

  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = (_BYTE)v6;
}

BOOL ___ZL41nw_connection_group_has_connection_lockedP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connection_block_invoke(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 32);
  if (v3 == a3)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  return v3 != a3;
}

nw_protocol_metadata_t nw_connection_group_copy_protocol_metadata(nw_connection_group_t group, nw_protocol_definition_t definition)
{
  nw_connection_group_t v3;
  NSObject *v4;
  NSObject *v5;
  void (**v6)(_QWORD);
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD aBlock[4];
  NSObject *v23;
  NSObject *v24;
  _BYTE *v25;
  char v26;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = group;
  v4 = definition;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v29 = __Block_byref_object_copy__8574;
      v30 = __Block_byref_object_dispose__8575;
      v31 = 0;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 3221225472;
      aBlock[2] = __nw_connection_group_copy_protocol_metadata_block_invoke;
      aBlock[3] = &unk_1E14A2D98;
      v23 = v3;
      v25 = buf;
      v24 = v5;
      v6 = (void (**)(_QWORD))_Block_copy(aBlock);
      os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
      v6[2](v6);
      os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

      v7 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

      goto LABEL_4;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null definition", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v26)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (__nwlog_fault(v10, &type, &v26))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null group", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v26)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null group, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_copy_protocol_metadata";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return (nw_protocol_metadata_t)v7;
}

void sub_183439A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Block_object_dispose(&a21, 8);
  _Unwind_Resume(a1);
}

void __nw_connection_group_copy_protocol_metadata_block_invoke(uint64_t a1)
{
  unsigned __int8 *v1;
  id v2;
  __int128 v3;
  _QWORD v4[4];
  id v5[2];

  v1 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 32) + 104);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_connection_group_copy_protocol_metadata_block_invoke_2;
  v4[3] = &unk_1E14AB5F0;
  v3 = *(_OWORD *)(a1 + 40);
  v2 = (id)v3;
  *(_OWORD *)v5 = v3;
  nw_array_apply(v1, (uint64_t)v4);

}

BOOL __nw_connection_group_copy_protocol_metadata_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _BOOL8 v8;

  v4 = a3;
  nw_connection_copy_protocol_metadata_internal(v4, *(void **)(a1 + 32), 1);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  v8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40) == 0;
  return v8;
}

void sub_183439B80(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_connection_t nw_connection_group_extract_connection(nw_connection_group_t group, nw_endpoint_t endpoint, nw_protocol_options_t protocol_options)
{
  nw_connection_group_t v5;
  NSObject *v6;
  NSObject *v7;
  NSObject *v8;
  NSObject *v9;
  void *v10;
  objc_class *v11;
  _BOOL8 v12;
  os_unfair_lock_s *v13;
  id v14;
  id v15;
  os_unfair_lock_s *v16;
  void (**v17)(_QWORD);
  _BYTE *v18;
  void *v19;
  _DWORD *v20;
  int v21;
  void *v22;
  _BYTE *v23;
  NSObject *v24;
  NSObject *v25;
  id *v26;
  id v27;
  id *v28;
  id v29;
  id v30;
  NSObject *v31;
  NSObject *v32;
  _BOOL4 v33;
  NSObject *v34;
  NSObject *v35;
  uint32_t v36;
  void *v37;
  _DWORD *v38;
  int v39;
  nw_connection_t v40;
  void *v41;
  void (**v42)(_QWORD);
  NSObject *v43;
  uint32_t v44;
  Class v45;
  id v46;
  void *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  NSObject *v51;
  int isa;
  void *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  void *v57;
  os_log_type_t v58;
  char *backtrace_string;
  os_log_type_t v60;
  _BOOL4 v61;
  char *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  char *v65;
  os_log_type_t v66;
  _BOOL4 v67;
  NSObject *v68;
  uint32_t os_unfair_lock_opaque;
  NSObject *v70;
  uint32_t v71;
  os_log_type_t v72;
  os_log_type_t v73;
  os_log_type_t v74;
  void *v75;
  NSObject *v76;
  os_log_type_t v77;
  NSObject *v78;
  char *v79;
  _BOOL4 v80;
  os_log_type_t v81;
  void *v82;
  os_unfair_lock_s *v83;
  void (**v84)(_QWORD);
  NSObject *v85;
  uint32_t v86;
  uint64_t v87;
  os_unfair_lock_s *v88;
  os_unfair_lock_s *v89;
  NSObject *v90;
  uint32_t v91;
  NSObject *v92;
  uint32_t v93;
  NSObject *v95;
  uint32_t v96;
  NSObject *type;
  os_log_type_t typea;
  nw_protocol_definition_t v99;
  id *v100;
  char *v101;
  os_unfair_lock_s *v102;
  _BYTE *v103;
  id v104;
  NSObject *endpointa;
  NSObject *v106;
  NSObject *parameters;
  os_unfair_lock_s *v108;
  _BYTE *v109;
  id v110;
  NSObject *v111;
  NSObject *v112;
  NSObject *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t (*v121)(uint64_t, uint64_t);
  void (*v122)(uint64_t);
  id v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t (*v127)(uint64_t, uint64_t);
  void (*v128)(uint64_t);
  id v129;
  char v130;
  _BYTE aBlock[40];
  _BYTE *v132;
  id v133;
  uint64_t *v134;
  uint64_t *v135;
  uint8_t buf[4];
  const char *v137;
  __int16 v138;
  uint32_t v139;
  _BYTE iterate_block[40];
  NSObject *v141;
  NSObject *v142;
  _BYTE *v143;
  _BYTE v144[28];
  uint64_t v145;

  v145 = *MEMORY[0x1E0C80C00];
  v5 = group;
  v6 = endpoint;
  v7 = protocol_options;
  v8 = v7;
  v112 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)aBlock = 136446210;
    *(_QWORD *)&aBlock[4] = "nw_connection_group_extract_connection";
    v48 = (char *)_os_log_send_and_compose_impl();

    iterate_block[0] = 16;
    LOBYTE(v124) = 0;
    if (__nwlog_fault(v48, iterate_block, &v124))
    {
      if (iterate_block[0] == 17)
      {
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v50 = iterate_block[0];
        if (os_log_type_enabled(v49, (os_log_type_t)iterate_block[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(_QWORD *)&aBlock[4] = "nw_connection_group_extract_connection";
          _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s called with null group", aBlock, 0xCu);
        }
      }
      else if ((_BYTE)v124)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v60 = iterate_block[0];
        v61 = os_log_type_enabled(v49, (os_log_type_t)iterate_block[0]);
        if (backtrace_string)
        {
          if (v61)
          {
            *(_DWORD *)aBlock = 136446466;
            *(_QWORD *)&aBlock[4] = "nw_connection_group_extract_connection";
            *(_WORD *)&aBlock[12] = 2082;
            *(_QWORD *)&aBlock[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v49, v60, "%{public}s called with null group, dumping backtrace:%{public}s", aBlock, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_110;
        }
        if (v61)
        {
          *(_DWORD *)aBlock = 136446210;
          *(_QWORD *)&aBlock[4] = "nw_connection_group_extract_connection";
          _os_log_impl(&dword_182FBE000, v49, v60, "%{public}s called with null group, no backtrace", aBlock, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v72 = iterate_block[0];
        if (os_log_type_enabled(v49, (os_log_type_t)iterate_block[0]))
        {
          *(_DWORD *)aBlock = 136446210;
          *(_QWORD *)&aBlock[4] = "nw_connection_group_extract_connection";
          _os_log_impl(&dword_182FBE000, v49, v72, "%{public}s called with null group, backtrace limit exceeded", aBlock, 0xCu);
        }
      }

    }
LABEL_110:
    if (v48)
      free(v48);
    goto LABEL_112;
  }
  if (SBYTE6(v5[23].isa) < 0 || SLODWORD(v5[5].isa) >= 3)
  {
    if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v51 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        isa = (int)v5[21].isa;
        *(_DWORD *)aBlock = 136446466;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_extract_connection";
        *(_WORD *)&aBlock[12] = 1024;
        *(_DWORD *)&aBlock[14] = isa;
        _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot extract a connection from a failed or cancelled group", aBlock, 0x12u);
      }

    }
LABEL_112:
    v78 = 0;
    goto LABEL_167;
  }
  v111 = v7;
  if (v6)
  {
    v9 = v6;
    v10 = (void *)-[NSObject copyEndpoint](v9, "copyEndpoint");
    nw_endpoint_copy_properties(v9, v10);

  }
  else
  {
    v10 = (void *)nw_group_descriptor_copy_member(v5[8].isa);
  }
  v11 = v5[7].isa;
  v12 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v11, 0, 0);

  v13 = v5;
  v14 = v10;
  v15 = (id)v12;
  v113 = v8;
  if (!v14)
  {
    __nwlog_obj();
    v53 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)aBlock = 136446210;
    *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
    v54 = (char *)_os_log_send_and_compose_impl();

    iterate_block[0] = 16;
    LOBYTE(v124) = 0;
    if (!__nwlog_fault(v54, iterate_block, &v124))
      goto LABEL_119;
    if (iterate_block[0] == 17)
    {
      __nwlog_obj();
      v55 = objc_claimAutoreleasedReturnValue();
      v56 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s called with null remote_endpoint", aBlock, 0xCu);
      }
    }
    else if ((_BYTE)v124)
    {
      v62 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v55 = objc_claimAutoreleasedReturnValue();
      v63 = iterate_block[0];
      v64 = os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]);
      if (v62)
      {
        if (v64)
        {
          *(_DWORD *)aBlock = 136446466;
          *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
          *(_WORD *)&aBlock[12] = 2082;
          *(_QWORD *)&aBlock[14] = v62;
          _os_log_impl(&dword_182FBE000, v55, v63, "%{public}s called with null remote_endpoint, dumping backtrace:%{public}s", aBlock, 0x16u);
        }

        free(v62);
        if (!v54)
          goto LABEL_121;
        goto LABEL_120;
      }
      if (v64)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v55, v63, "%{public}s called with null remote_endpoint, no backtrace", aBlock, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v55 = objc_claimAutoreleasedReturnValue();
      v73 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v55, v73, "%{public}s called with null remote_endpoint, backtrace limit exceeded", aBlock, 0xCu);
      }
    }
    goto LABEL_118;
  }
  if (v15)
  {
    v118 = 0;
    v119 = &v118;
    v120 = 0x3032000000;
    v121 = __Block_byref_object_copy__8574;
    v122 = __Block_byref_object_dispose__8575;
    v123 = 0;
    v114 = 0;
    v115 = &v114;
    v116 = 0x2020000000;
    v117 = 0;
    *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock[8] = 3221225472;
    *(_QWORD *)&aBlock[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke;
    *(_QWORD *)&aBlock[24] = &unk_1E149B6D0;
    v16 = v13;
    *(_QWORD *)&aBlock[32] = v16;
    v134 = &v114;
    v109 = v15;
    v132 = v109;
    v110 = v14;
    v133 = v110;
    v135 = &v118;
    v17 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock(v13 + 43);
    v17[2](v17);
    os_unfair_lock_unlock(v13 + 43);

    if (*((_BYTE *)v115 + 24))
    {
      v18 = 0;
LABEL_146:

      _Block_object_dispose(&v114, 8);
      _Block_object_dispose(&v118, 8);

      goto LABEL_147;
    }
    if (v119[5])
    {
      v19 = *(void **)&v16[16]._os_unfair_lock_opaque;
      if (!v19 || (v20 = v19, v21 = v20[2], v20, v21 != 2))
      {
LABEL_145:
        v18 = (id)v119[5];
        goto LABEL_146;
      }
    }
    if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v68 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
      {
        os_unfair_lock_opaque = v16[42]._os_unfair_lock_opaque;
        *(_DWORD *)iterate_block = 136446978;
        *(_QWORD *)&iterate_block[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        *(_WORD *)&iterate_block[12] = 1024;
        *(_DWORD *)&iterate_block[14] = os_unfair_lock_opaque;
        *(_WORD *)&iterate_block[18] = 2112;
        *(_QWORD *)&iterate_block[20] = v110;
        *(_WORD *)&iterate_block[28] = 2112;
        *(_QWORD *)&iterate_block[30] = v109;
        _os_log_impl(&dword_182FBE000, v68, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Did not find connection for (remote: %@, parameters: %@), creating new connection", iterate_block, 0x26u);
      }

    }
    v22 = (void *)v119[5];
    v108 = v16;
    v104 = v22;
    endpointa = v110;
    v23 = v109;
    v106 = v113;
    v124 = 0;
    v125 = &v124;
    v126 = 0x3032000000;
    v127 = __Block_byref_object_copy__8574;
    v128 = __Block_byref_object_dispose__8575;
    v129 = 0;
    v103 = v23;
    parameters = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v103, 0, 0);

    nw_parameters_set_reuse_local_address(parameters, 1);
    if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa) && gLogDatapath)
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v70 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
      {
        v71 = v108[42]._os_unfair_lock_opaque;
        *(_DWORD *)iterate_block = 136446978;
        *(_QWORD *)&iterate_block[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
        *(_WORD *)&iterate_block[12] = 1024;
        *(_DWORD *)&iterate_block[14] = v71;
        *(_WORD *)&iterate_block[18] = 2112;
        *(_QWORD *)&iterate_block[20] = endpointa;
        *(_WORD *)&iterate_block[28] = 2112;
        *(_QWORD *)&iterate_block[30] = parameters;
        _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Creating connection for endpoint (%@) and parameters (%@)", iterate_block, 0x26u);
      }

    }
    if (!v106)
    {
LABEL_33:
      v37 = *(void **)&v108[16]._os_unfair_lock_opaque;
      if (v37 && (v38 = v37, v39 = v38[2], v38, v39 == 2))
        v40 = (nw_connection_t)nw_connection_create_with_connection(v104, parameters);
      else
        v40 = nw_connection_create(endpointa, parameters);
      v41 = (void *)v125[5];
      v125[5] = (uint64_t)v40;

      if (v125[5])
      {
        *(_QWORD *)iterate_block = MEMORY[0x1E0C809B0];
        *(_QWORD *)&iterate_block[8] = 3221225472;
        *(_QWORD *)&iterate_block[16] = ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke_2;
        *(_QWORD *)&iterate_block[24] = &unk_1E14ACE40;
        v141 = &v124;
        *(_QWORD *)&iterate_block[32] = v108;
        v42 = (void (**)(_QWORD))_Block_copy(iterate_block);
        os_unfair_lock_lock(v13 + 43);
        v42[2](v42);
        os_unfair_lock_unlock(v13 + 43);

        v43 = *(NSObject **)&iterate_block[32];
      }
      else
      {
        if (nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
        {
LABEL_45:
          v46 = (id)v125[5];
          goto LABEL_137;
        }
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v43 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
        {
          v44 = v108[42]._os_unfair_lock_opaque;
          v45 = v5[7].isa;
          *(_DWORD *)iterate_block = 136446722;
          *(_QWORD *)&iterate_block[4] = "nw_connection_group_create_connection_for_endpoint_and_parameters";
          *(_WORD *)&iterate_block[12] = 1024;
          *(_DWORD *)&iterate_block[14] = v44;
          *(_WORD *)&iterate_block[18] = 2112;
          *(_QWORD *)&iterate_block[20] = v45;
          _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s [G%u] failed to create connection with parameters %@", iterate_block, 0x1Cu);
        }
      }

      goto LABEL_45;
    }
    v102 = v108;
    v24 = parameters;
    v25 = v106;
    if (v24)
    {
      v26 = v24;
      v27 = v26[19];
      v100 = v26;

      v28 = v25;
      v29 = v28[1];

      *(_QWORD *)v144 = 0;
      *(_QWORD *)&v144[8] = v144;
      *(_QWORD *)&v144[16] = 0x2020000000;
      v144[24] = 0;
      *(_QWORD *)iterate_block = MEMORY[0x1E0C809B0];
      *(_QWORD *)&iterate_block[8] = 3221225472;
      *(_QWORD *)&iterate_block[16] = ___ZL37nw_connection_group_modify_parametersP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_parameters8NSObjectPU33objcproto22OS_nw_protocol_optionsS1__block_invoke;
      *(_QWORD *)&iterate_block[24] = &unk_1E149B6F8;
      v143 = v144;
      v30 = v29;
      *(_QWORD *)&iterate_block[32] = v30;
      v31 = v27;
      v141 = v31;
      v32 = v28;
      v142 = v32;
      nw_protocol_stack_iterate_application_protocols(v31, iterate_block);
      if (*(_BYTE *)(*(_QWORD *)&v144[8] + 24))
      {
        v33 = 1;
      }
      else
      {
        v34 = nw_protocol_stack_copy_transport_protocol(v31);
        v99 = nw_protocol_options_copy_definition(v34);
        type = v34;
        if (nw_protocol_definition_is_equal_unsafe((uint64_t)v99, (uint64_t)v30))
        {
          nw_protocol_stack_set_transport_protocol(v31, v32);
          *(_BYTE *)(*(_QWORD *)&v144[8] + 24) = 1;
        }
        else if (!*(_BYTE *)(*(_QWORD *)&v144[8] + 24) && !nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v35 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v35, OS_LOG_TYPE_INFO))
          {
            v36 = v102[42]._os_unfair_lock_opaque;
            *(_DWORD *)buf = 136446466;
            v137 = "nw_connection_group_modify_parameters";
            v138 = 1024;
            v139 = v36;
            _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_INFO, "%{public}s [G%u] Failed to find matching protocol definition", buf, 0x12u);
          }

        }
        v33 = *(_BYTE *)(*(_QWORD *)&v144[8] + 24) != 0;

      }
      _Block_object_dispose(v144, 8);

      if (v33)
        goto LABEL_33;
LABEL_136:
      v46 = 0;
LABEL_137:

      _Block_object_dispose(&v124, 8);
      v82 = (void *)v119[5];
      v119[5] = (uint64_t)v46;

      if (v119[5])
      {
        v124 = 0;
        v125 = &v124;
        v126 = 0x2020000000;
        LOBYTE(v127) = 0;
        *(_QWORD *)iterate_block = MEMORY[0x1E0C809B0];
        *(_QWORD *)&iterate_block[8] = 3221225472;
        *(_QWORD *)&iterate_block[16] = ___ZL63nw_connection_group_copy_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS1_PU33objcproto22OS_nw_protocol_optionsS1_bb_block_invoke_154;
        *(_QWORD *)&iterate_block[24] = &unk_1E14ACE40;
        v141 = &v124;
        v83 = v108;
        *(_QWORD *)&iterate_block[32] = v83;
        v84 = (void (**)(_QWORD))_Block_copy(iterate_block);
        os_unfair_lock_lock(v13 + 43);
        v84[2](v84);
        os_unfair_lock_unlock(v13 + 43);

        if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
        {
          if (__nwlog_connection_group_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
          v85 = (id)gconnection_groupLogObj;
          if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
          {
            v86 = v83[42]._os_unfair_lock_opaque;
            v87 = v119[5];
            *(_DWORD *)v144 = 136446722;
            *(_QWORD *)&v144[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
            *(_WORD *)&v144[12] = 1024;
            *(_DWORD *)&v144[14] = v86;
            *(_WORD *)&v144[18] = 2112;
            *(_QWORD *)&v144[20] = v87;
            _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Deferring start of connection %@ until group start", v144, 0x1Cu);
          }

        }
        _Block_object_dispose(&v124, 8);
      }
      goto LABEL_145;
    }
    __nwlog_obj();
    v75 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v144 = 136446210;
    *(_QWORD *)&v144[4] = "nw_connection_group_modify_parameters";
    v101 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v130 = 0;
    if (__nwlog_fault(v101, buf, &v130))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v76 = objc_claimAutoreleasedReturnValue();
        v77 = buf[0];
        if (os_log_type_enabled(v76, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v144 = 136446210;
          *(_QWORD *)&v144[4] = "nw_connection_group_modify_parameters";
          _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s called with null parameters", v144, 0xCu);
        }
      }
      else if (v130)
      {
        v79 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v76 = objc_claimAutoreleasedReturnValue();
        typea = buf[0];
        v80 = os_log_type_enabled(v76, (os_log_type_t)buf[0]);
        if (v79)
        {
          if (v80)
          {
            *(_DWORD *)v144 = 136446466;
            *(_QWORD *)&v144[4] = "nw_connection_group_modify_parameters";
            *(_WORD *)&v144[12] = 2082;
            *(_QWORD *)&v144[14] = v79;
            _os_log_impl(&dword_182FBE000, v76, typea, "%{public}s called with null parameters, dumping backtrace:%{public}s", v144, 0x16u);
          }

          free(v79);
          goto LABEL_133;
        }
        if (v80)
        {
          *(_DWORD *)v144 = 136446210;
          *(_QWORD *)&v144[4] = "nw_connection_group_modify_parameters";
          _os_log_impl(&dword_182FBE000, v76, typea, "%{public}s called with null parameters, no backtrace", v144, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v76 = objc_claimAutoreleasedReturnValue();
        v81 = buf[0];
        if (os_log_type_enabled(v76, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v144 = 136446210;
          *(_QWORD *)&v144[4] = "nw_connection_group_modify_parameters";
          _os_log_impl(&dword_182FBE000, v76, v81, "%{public}s called with null parameters, backtrace limit exceeded", v144, 0xCu);
        }
      }

    }
LABEL_133:
    if (v101)
      free(v101);

    goto LABEL_136;
  }
  __nwlog_obj();
  v57 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)aBlock = 136446210;
  *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
  v54 = (char *)_os_log_send_and_compose_impl();

  iterate_block[0] = 16;
  LOBYTE(v124) = 0;
  if (__nwlog_fault(v54, iterate_block, &v124))
  {
    if (iterate_block[0] == 17)
    {
      __nwlog_obj();
      v55 = objc_claimAutoreleasedReturnValue();
      v58 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v55, v58, "%{public}s called with null parameters", aBlock, 0xCu);
      }
LABEL_118:

      goto LABEL_119;
    }
    if (!(_BYTE)v124)
    {
      __nwlog_obj();
      v55 = objc_claimAutoreleasedReturnValue();
      v74 = iterate_block[0];
      if (os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]))
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v55, v74, "%{public}s called with null parameters, backtrace limit exceeded", aBlock, 0xCu);
      }
      goto LABEL_118;
    }
    v65 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v55 = objc_claimAutoreleasedReturnValue();
    v66 = iterate_block[0];
    v67 = os_log_type_enabled(v55, (os_log_type_t)iterate_block[0]);
    if (!v65)
    {
      if (v67)
      {
        *(_DWORD *)aBlock = 136446210;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
        _os_log_impl(&dword_182FBE000, v55, v66, "%{public}s called with null parameters, no backtrace", aBlock, 0xCu);
      }
      goto LABEL_118;
    }
    if (v67)
    {
      *(_DWORD *)aBlock = 136446466;
      *(_QWORD *)&aBlock[4] = "nw_connection_group_copy_connection_for_endpoint_and_parameters";
      *(_WORD *)&aBlock[12] = 2082;
      *(_QWORD *)&aBlock[14] = v65;
      _os_log_impl(&dword_182FBE000, v55, v66, "%{public}s called with null parameters, dumping backtrace:%{public}s", aBlock, 0x16u);
    }

    free(v65);
  }
LABEL_119:
  if (v54)
LABEL_120:
    free(v54);
LABEL_121:
  v18 = 0;
LABEL_147:

  if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa) && gLogDatapath)
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v95 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEBUG))
    {
      v96 = v13[42]._os_unfair_lock_opaque;
      *(_DWORD *)aBlock = 136447234;
      *(_QWORD *)&aBlock[4] = "nw_connection_group_extract_connection";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = v96;
      *(_WORD *)&aBlock[18] = 2112;
      *(_QWORD *)&aBlock[20] = v14;
      *(_WORD *)&aBlock[28] = 2112;
      *(_QWORD *)&aBlock[30] = v15;
      *(_WORD *)&aBlock[38] = 2112;
      v132 = v18;
      _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] Got connection for endpoint (%@) and parameters (%@): %@", aBlock, 0x30u);
    }

  }
  if (v18)
  {
    v88 = v18;
    *(_QWORD *)iterate_block = 0;
    *(_QWORD *)&iterate_block[8] = iterate_block;
    *(_QWORD *)&iterate_block[16] = 0x2020000000;
    iterate_block[24] = 0;
    v89 = v88 + 34;
    *(_QWORD *)aBlock = MEMORY[0x1E0C809B0];
    *(_QWORD *)&aBlock[8] = 3221225472;
    *(_QWORD *)&aBlock[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
    *(_QWORD *)&aBlock[24] = &unk_1E14ACE40;
    v132 = iterate_block;
    v78 = v88;
    *(_QWORD *)&aBlock[32] = v78;
    os_unfair_lock_lock(v89);
    (*(void (**)(_BYTE *))&aBlock[16])(aBlock);
    os_unfair_lock_unlock(v89);
    LODWORD(v89) = *(unsigned __int8 *)(*(_QWORD *)&iterate_block[8] + 24);

    _Block_object_dispose(iterate_block, 8);
    if (!(_DWORD)v89)
    {
      nw_connection_reset_client(v78);
      goto LABEL_160;
    }
    if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v90 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v90, OS_LOG_TYPE_ERROR))
      {
        v91 = v13[42]._os_unfair_lock_opaque;
        *(_DWORD *)aBlock = 136446722;
        *(_QWORD *)&aBlock[4] = "nw_connection_group_extract_connection";
        *(_WORD *)&aBlock[12] = 1024;
        *(_DWORD *)&aBlock[14] = v91;
        *(_WORD *)&aBlock[18] = 2112;
        *(_QWORD *)&aBlock[20] = v78;
        _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Connection %@ already cancelled or failed", aBlock, 0x1Cu);
      }

    }
  }
  v78 = 0;
LABEL_160:
  if (!nw_parameters_get_logging_disabled((uint64_t)v5[7].isa))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v92 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v92, OS_LOG_TYPE_DEBUG))
    {
      v93 = v13[42]._os_unfair_lock_opaque;
      *(_DWORD *)aBlock = 136446722;
      *(_QWORD *)&aBlock[4] = "nw_connection_group_extract_connection";
      *(_WORD *)&aBlock[12] = 1024;
      *(_DWORD *)&aBlock[14] = v93;
      *(_WORD *)&aBlock[18] = 2112;
      *(_QWORD *)&aBlock[20] = v78;
      _os_log_impl(&dword_182FBE000, v92, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] returning connection %@", aBlock, 0x1Cu);
    }

  }
  v8 = v111;
LABEL_167:

  return v78;
}

void sub_18343B1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19, void *a20,void *a21,void *a22,void *a23,void *a24,void *a25,uint64_t a26,void *a27,void *a28,void *a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,id a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,id a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,id a53,id a54,id a55)
{
  void *v55;
  void *v56;
  void *v57;
  void *v58;
  void *v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;

  _Block_object_dispose((const void *)(v63 - 176), 8);
  _Block_object_dispose(&a42, 8);

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a36, 8);

  _Unwind_Resume(a1);
}

void ___ZL37nw_connection_group_modify_parametersP30NWConcrete_nw_connection_groupPU27objcproto16OS_nw_parameters8NSObjectPU33objcproto22OS_nw_protocol_optionsS1__block_invoke(uint64_t a1, nw_protocol_options_t options)
{
  nw_protocol_definition_t v3;
  nw_protocol_definition_t v4;
  _BOOL4 is_equal_unsafe;
  nw_protocol_definition_t v6;

  v3 = nw_protocol_options_copy_definition(options);
  v4 = v3;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24))
  {
    v6 = v3;
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v3, *(_QWORD *)(a1 + 32));
    v4 = v6;
    if (is_equal_unsafe)
    {
      nw_protocol_stack_replace_protocol(*(void **)(a1 + 40), v6, *(void **)(a1 + 48));
      *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
      v4 = v6;
    }
  }

}

void sub_18343B414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void ___ZL65nw_connection_group_create_connection_for_endpoint_and_parametersP30NWConcrete_nw_connection_groupP24NWConcrete_nw_connectionPU25objcproto14OS_nw_endpoint8NSObjectPU27objcproto16OS_nw_parametersS3_PU33objcproto22OS_nw_protocol_optionsS3_b_block_invoke_2(uint64_t a1)
{
  nw_connection_set_group_uuid(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(_QWORD *)(a1 + 32) + 120);
}

nw_connection_t nw_connection_group_extract_connection_for_message(nw_connection_group_t group, nw_content_context_t context)
{
  nw_connection_group_t v3;
  NSObject *v4;
  NSObject *v5;
  uint64_t v6;
  void (**v7)(_QWORD);
  NSObject *v8;
  int v9;
  void *v10;
  os_unfair_lock_s *v11;
  os_unfair_lock_s *v12;
  char *v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  NSObject *v21;
  void *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  void *v27;
  os_log_type_t v28;
  NSObject *v29;
  int isa;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  char *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_log_type_t v38;
  _QWORD aBlock[4];
  NSObject *v40;
  os_log_type_t *v41;
  os_log_type_t type[8];
  os_log_type_t *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t, uint64_t);
  void (*v46)(uint64_t);
  id v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  char v51;
  _BYTE buf[32];
  char *v53;
  uint64_t *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v3 = group;
  v4 = context;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
    v24 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v48) = 0;
    if (!__nwlog_fault(v24, type, &v48))
      goto LABEL_70;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v26 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s called with null group", buf, 0xCu);
      }
    }
    else if ((_BYTE)v48)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v32 = type[0];
      v33 = os_log_type_enabled(v25, type[0]);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null group, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_70:
        if (!v24)
        {
LABEL_72:
          v21 = 0;
          goto LABEL_30;
        }
LABEL_71:
        free(v24);
        goto LABEL_72;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_182FBE000, v25, v32, "%{public}s called with null group, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v37 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_182FBE000, v25, v37, "%{public}s called with null group, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_69:

    goto LABEL_70;
  }
  if (!v4)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
    v24 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v48) = 0;
    if (!__nwlog_fault(v24, type, &v48))
      goto LABEL_70;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v28 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_182FBE000, v25, v28, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if ((_BYTE)v48)
    {
      v34 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v35 = type[0];
      v36 = os_log_type_enabled(v25, type[0]);
      if (v34)
      {
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v34;
          _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v34);
        if (!v24)
          goto LABEL_72;
        goto LABEL_71;
      }
      if (v36)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_182FBE000, v25, v35, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v25 = objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      if (os_log_type_enabled(v25, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
        _os_log_impl(&dword_182FBE000, v25, v38, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_69;
  }
  if (SBYTE6(v3[23].isa) < 0 || SLODWORD(v3[5].isa) >= 3)
  {
    if (!nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
    {
      if (__nwlog_connection_group_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
      v29 = (id)gconnection_groupLogObj;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        isa = (int)v3[21].isa;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = isa;
        _os_log_impl(&dword_182FBE000, v29, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Cannot extract a connection from a failed or cancelled group", buf, 0x12u);
      }

    }
    goto LABEL_72;
  }
  *(_QWORD *)type = 0;
  v43 = type;
  v44 = 0x3032000000;
  v45 = __Block_byref_object_copy__8574;
  v46 = __Block_byref_object_dispose__8575;
  v47 = (id)nw_content_context_copy_connection(v4);
  v6 = MEMORY[0x1E0C809B0];
  if (*((_QWORD *)v43 + 5))
  {
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_connection_group_extract_connection_for_message_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v40 = v3;
    v41 = type;
    v7 = (void (**)(_QWORD))_Block_copy(aBlock);
    os_unfair_lock_lock((os_unfair_lock_t)&v3[21].isa + 1);
    v7[2](v7);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[21].isa + 1);

    v8 = v40;
LABEL_12:

    goto LABEL_13;
  }
  if (!nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v8 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      v9 = (int)v3[21].isa;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v5;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [G%u] context %@ does not have connection, returning nil", buf, 0x1Cu);
    }
    goto LABEL_12;
  }
LABEL_13:
  v10 = (void *)*((_QWORD *)v43 + 5);
  if (v10)
  {
    v11 = v10;
    v48 = 0;
    v49 = &v48;
    v50 = 0x2020000000;
    v51 = 0;
    v12 = v11 + 34;
    *(_QWORD *)buf = v6;
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = __nw_connection_is_cancelled_or_failed_block_invoke;
    *(_QWORD *)&buf[24] = &unk_1E14ACE40;
    v54 = &v48;
    v13 = v11;
    v53 = v13;
    os_unfair_lock_lock(v12);
    __nw_connection_is_cancelled_or_failed_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock(v12);
    LODWORD(v12) = *((unsigned __int8 *)v49 + 24);

    _Block_object_dispose(&v48, 8);
    if ((_DWORD)v12)
    {
      if (!nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
      {
        if (__nwlog_connection_group_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
        v14 = (id)gconnection_groupLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          v15 = (int)v3[21].isa;
          v16 = *((_QWORD *)v43 + 5);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          *(_WORD *)&buf[18] = 2112;
          *(_QWORD *)&buf[20] = v16;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s [G%u] Connection %@ already cancelled or failed", buf, 0x1Cu);
        }

      }
      v17 = (void *)*((_QWORD *)v43 + 5);
      *((_QWORD *)v43 + 5) = 0;

    }
    else
    {
      nw_connection_reset_client(*((void **)v43 + 5));
    }
  }
  if (!nw_parameters_get_logging_disabled((uint64_t)v3[7].isa))
  {
    if (__nwlog_connection_group_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_group_log::onceToken, &__block_literal_global_27_44189);
    v18 = (id)gconnection_groupLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v19 = (int)v3[21].isa;
      v20 = *((_QWORD *)v43 + 5);
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_connection_group_extract_connection_for_message";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v19;
      *(_WORD *)&buf[18] = 2112;
      *(_QWORD *)&buf[20] = v20;
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [G%u] returning connection %@", buf, 0x1Cu);
    }

  }
  v21 = *((id *)v43 + 5);
  _Block_object_dispose(type, 8);

LABEL_30:
  return v21;
}

