void sub_183046284(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_endpoint_t nw_endpoint_create_address(const sockaddr *address)
{
  char *v1;
  NSObject *v2;
  char *v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (address)
  {
    v1 = -[NWConcrete_nw_address_endpoint initWithAddress:overridePort:]([NWConcrete_nw_address_endpoint alloc], &address->sa_len, 0);
    v2 = v1;
    if (v1)
    {
      v3 = v1;
LABEL_11:

      return v2;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v24 = "nw_endpoint_create_address";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (__nwlog_fault(v5, &type, &v21))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_endpoint_create_address";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s NWOSAddressEndpoint alloc/init failed", buf, 0xCu);
        }
      }
      else if (v21)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v10 = type;
        v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_endpoint_create_address";
            v25 = 2082;
            v26 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s NWOSAddressEndpoint alloc/init failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v5)
            goto LABEL_11;
          goto LABEL_10;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_endpoint_create_address";
          _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s NWOSAddressEndpoint alloc/init failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v24 = "nw_endpoint_create_address";
          _os_log_impl(&dword_182FBE000, v6, v12, "%{public}s NWOSAddressEndpoint alloc/init failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v5)
      goto LABEL_11;
LABEL_10:
    free(v5);
    goto LABEL_11;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_endpoint_create_address";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_create_address";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null address", buf, 0xCu);
      }
    }
    else if (v21)
    {
      v17 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v15, type);
      if (v17)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_endpoint_create_address";
          v25 = 2082;
          v26 = v17;
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null address, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v17);
        goto LABEL_41;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_create_address";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null address, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_create_address";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null address, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_41:
  if (v14)
    free(v14);
  return 0;
}

void nw_synchronize(os_unfair_lock_s *a1, uint64_t a2)
{
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char *v10;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v15 = "nw_synchronize";
    v4 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v12 = 0;
    if (!__nwlog_fault(v4, &type, &v12))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_synchronize";
      v7 = "%{public}s called with null lock";
LABEL_31:
      _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      goto LABEL_32;
    }
    if (!v12)
    {
      v5 = __nwlog_obj();
      v6 = type;
      if (!os_log_type_enabled(v5, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_synchronize";
      v7 = "%{public}s called with null lock, backtrace limit exceeded";
      goto LABEL_31;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v5 = __nwlog_obj();
    v6 = type;
    v9 = os_log_type_enabled(v5, type);
    if (!backtrace_string)
    {
      if (!v9)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v15 = "nw_synchronize";
      v7 = "%{public}s called with null lock, no backtrace";
      goto LABEL_31;
    }
    if (v9)
    {
      *(_DWORD *)buf = 136446466;
      v15 = "nw_synchronize";
      v16 = 2082;
      v17 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null lock, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_32:
    if (!v4)
      return;
    goto LABEL_33;
  }
  if (a2)
  {
    os_unfair_lock_lock(a1);
    (*(void (**)(uint64_t))(a2 + 16))(a2);
    os_unfair_lock_unlock(a1);
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_synchronize";
  v4 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_32;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_synchronize";
    v7 = "%{public}s called with null block";
    goto LABEL_31;
  }
  if (!v12)
  {
    v5 = __nwlog_obj();
    v6 = type;
    if (!os_log_type_enabled(v5, type))
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_synchronize";
    v7 = "%{public}s called with null block, backtrace limit exceeded";
    goto LABEL_31;
  }
  v10 = (char *)__nw_create_backtrace_string();
  v5 = __nwlog_obj();
  v6 = type;
  v11 = os_log_type_enabled(v5, type);
  if (!v10)
  {
    if (!v11)
      goto LABEL_32;
    *(_DWORD *)buf = 136446210;
    v15 = "nw_synchronize";
    v7 = "%{public}s called with null block, no backtrace";
    goto LABEL_31;
  }
  if (v11)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nw_synchronize";
    v16 = 2082;
    v17 = v10;
    _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v10);
  if (v4)
LABEL_33:
    free(v4);
}

void nw_endpoint_set_priority(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    objc_msgSend(v3, "setPriority:", a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_set_priority";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_priority";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_set_priority";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_priority";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_set_priority";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_18304846C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_set_parent_endpoint(void *a1, void *a2, int a3)
{
  id *v5;
  id *v6;
  id *v7;
  char v8;
  char v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = v6;
  if (v5)
  {
    if (v6 != v5)
    {
      objc_storeStrong(v5 + 14, a2);
      if (a3)
        v8 = 2;
      else
        v8 = 0;
      v9 = *((_BYTE *)v5 + 231) & 0xFD | v8;
      *((_BYTE *)v5 + 231) = v9;
      if (v7)
      {
        *((_BYTE *)v5 + 231) = *((_BYTE *)v7 + 231) & 0x20 | v9 & 0xDF;
        *((_WORD *)v5 + 114) = *((_WORD *)v7 + 114);
      }
    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_endpoint_set_parent_endpoint";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_endpoint_set_parent_endpoint";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_endpoint_set_parent_endpoint";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_endpoint_set_parent_endpoint";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_endpoint_set_parent_endpoint";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v11)
    free(v11);
LABEL_8:

}

void *nw_context_copy_tracker_lookup_callback(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  const void *v3;
  uint64_t v4;
  void *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_context_copy_tracker_lookup_callback";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v8, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_context_copy_tracker_lookup_callback";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_context_copy_tracker_lookup_callback";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_context_copy_tracker_lookup_callback";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_context_copy_tracker_lookup_callback";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v8)
      free(v8);
    goto LABEL_25;
  }
  v3 = (const void *)v1[16];
  if (!v3)
  {
    v4 = v2[5];
    if (v4)
    {
      v3 = *(const void **)(v4 + 128);
      goto LABEL_5;
    }
LABEL_25:
    v5 = 0;
    goto LABEL_6;
  }
LABEL_5:
  v5 = _Block_copy(v3);
LABEL_6:

  return v5;
}

void nw_endpoint_set_tracker_owner(void *a1, const char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  void *v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_endpoint_set_tracker_owner";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_endpoint_set_tracker_owner";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_endpoint_set_tracker_owner";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_endpoint_set_tracker_owner";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_endpoint_set_tracker_owner";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_25:
    if (v7)
      free(v7);
    goto LABEL_6;
  }
  if (!a2 || v3[12])
    goto LABEL_6;
  v5 = strdup(a2);
  if (v5)
  {
LABEL_5:
    v4[12] = v5;
LABEL_6:

    return;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v19 = "strict_strdup";
  v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_5;
  }
  __break(1u);
}

void nw_endpoint_set_known_tracker_name(void *a1, const char *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  char *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  void *v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_endpoint_set_known_tracker_name";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_endpoint_set_known_tracker_name";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_endpoint_set_known_tracker_name";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_endpoint_set_known_tracker_name";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_endpoint_set_known_tracker_name";
          _os_log_impl(&dword_182FBE000, v8, v15, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_25:
    if (v7)
      free(v7);
    goto LABEL_6;
  }
  if (!a2 || v3[11])
    goto LABEL_6;
  v5 = strdup(a2);
  if (v5)
  {
LABEL_5:
    v4[11] = v5;
LABEL_6:

    return;
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v19 = "strict_strdup";
  v11 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v11))
  {
    free(v11);
    goto LABEL_5;
  }
  __break(1u);
}

void nw_connection_fillout_establishment_report_on_nw_queue(void *a1, int a2)
{
  void **v3;
  void **v4;
  NWConcrete_nw_endpoint_handler *v5;
  NWConcrete_nw_endpoint_handler *v6;
  NWConcrete_nw_establishment_report *v7;
  NWConcrete_nw_endpoint_handler *v8;
  unint64_t v9;
  int v10;
  unsigned int event_milliseconds;
  unsigned int v12;
  unsigned int v13;
  unint64_t v15;
  unsigned int v16;
  uint64_t v17;
  OS_nw_array *protocol_reports;
  id *v19;
  unsigned int v20;
  id *v21;
  int v22;
  id *v23;
  _BOOL8 v24;
  OS_nw_array *resolution_reports;
  id *v26;
  nw_endpoint_t v27;
  unsigned int v28;
  id *v29;
  id *v30;
  int v31;
  NWConcrete_nw_resolution_report *v32;
  nw_endpoint_t v33;
  nw_endpoint_t v34;
  NSObject *v35;
  int v36;
  int v37;
  int v38;
  unsigned int v39;
  nw_endpoint_t v40;
  OS_nw_endpoint *preferred_endpoint;
  OS_nw_array *v42;
  OS_nw_array *resolved_endpoints;
  nw_endpoint_t v44;
  id *v45;
  id *v46;
  void *v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  void *v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  os_log_type_t v63;
  os_log_type_t v64;
  int v65;
  uint64_t v66;
  id v67;
  void *v68;
  _DWORD *v69;
  int v70;
  _BOOL8 v71;
  OS_nw_array *proxy_endpoints;
  NWConcrete_nw_establishment_report *v73;
  NWConcrete_nw_establishment_report *v74;
  void **v75;
  void *v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  char *backtrace_string;
  os_log_type_t v81;
  _BOOL4 v82;
  void *v83;
  char *v84;
  NSObject *v85;
  os_log_type_t v86;
  os_log_type_t v87;
  char *v88;
  os_log_type_t v89;
  _BOOL4 v90;
  os_log_type_t v91;
  int v92;
  id v93;
  NWConcrete_nw_endpoint_handler *v94;
  id *v95;
  OS_nw_parameters *v96;
  unsigned int v97;
  _QWORD v98[4];
  NWConcrete_nw_establishment_report *v99;
  void **v100;
  _QWORD v101[4];
  NWConcrete_nw_establishment_report *v102;
  _QWORD v103[4];
  NWConcrete_nw_establishment_report *v104;
  unsigned __int16 v105;
  BOOL v106;
  __int16 v107;
  __int16 v108;
  __int16 v109;
  _BYTE buf[12];
  __int16 v111;
  char *v112;
  uint64_t v113;

  v113 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v76 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
    v77 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v109) = 16;
    LOBYTE(v108) = 0;
    if (__nwlog_fault(v77, &v109, &v108))
    {
      if (v109 == 17)
      {
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v79 = v109;
        if (os_log_type_enabled(v78, (os_log_type_t)v109))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v78, v79, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if ((_BYTE)v108)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v81 = v109;
        v82 = os_log_type_enabled(v78, (os_log_type_t)v109);
        if (backtrace_string)
        {
          if (v82)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
            v111 = 2082;
            v112 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v78, v81, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_116;
        }
        if (v82)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v78, v81, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v78 = objc_claimAutoreleasedReturnValue();
        v87 = v109;
        if (os_log_type_enabled(v78, (os_log_type_t)v109))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v78, v87, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_116:
    if (v77)
      free(v77);
    goto LABEL_89;
  }
  nw_context_assert_queue(v3[3]);
  if ((*((_BYTE *)v4 + 109) & 0x40) != 0)
  {
    v5 = nw_endpoint_handler_copy_connected_flow_handler(v4[18]);
    v6 = v5;
    if (!v5)
    {
LABEL_88:

      goto LABEL_89;
    }
    v94 = v5;
    v7 = objc_alloc_init(NWConcrete_nw_establishment_report);
    if (v7)
    {
      v92 = a2;
      v8 = v6;
      v96 = v8->parameters;

      v9 = v4[18];
      v10 = (v9 >> 16) ^ HIDWORD(v9) ^ HIWORD(v9) ^ v9;
      v93 = (id)v9;
      if (!v9)
        LOWORD(v10) = 0;
      v109 = v10;
      v108 = WORD2(v8) ^ WORD1(v8) ^ HIWORD(v8) ^ (unsigned __int16)v8;
      event_milliseconds = nw_connection_get_event_milliseconds(v4, 1, 1, &v109, 0xFFFFFFFFLL);
      v12 = nw_connection_get_event_milliseconds(v4, 3, 6, &v109, 0);
      v13 = nw_connection_get_event_milliseconds(v4, 1, 3, &v109, 0xFFFFFFFFLL);
      if (v13 >= v12 || v13 == -1)
        v15 = event_milliseconds;
      else
        v15 = v13;
      v7->attempt_started_after_milliseconds = v15;
      v7->duration_milliseconds = v12 - v15;
      v97 = v15;
      v16 = nw_connection_get_event_milliseconds(v4, 3, 3, &v108, 0);
      if (v16 != -1 && v16 > v97)
        v7->flow_started_after_milliseconds = v16 - v97;
      v17 = nw_endpoint_flow_copy_protocol_establishment_reports(v4[18]);
      protocol_reports = v7->protocol_reports;
      v7->protocol_reports = (OS_nw_array *)v17;

      v19 = v8;
      v20 = 0;
      v95 = v19;
      do
      {
        v21 = v19;
        v22 = *((_DWORD *)v21 + 29);

        v23 = v21;
        v19 = (id *)v23[9];

        if (v22 == 1)
          ++v20;

      }
      while (v19);
      if (v20)
      {
        v24 = nw_array_create();
        resolution_reports = v7->resolution_reports;
        v7->resolution_reports = (OS_nw_array *)v24;

        v26 = v95;
        v27 = nw_endpoint_handler_copy_endpoint(v26);
        v28 = 0;
        while (1)
        {
          v29 = v26;
          v30 = v29;
          if (!v29)
            break;
          v31 = *((_DWORD *)v29 + 29);

          if (v31 != 1)
            goto LABEL_33;
          v32 = objc_alloc_init(NWConcrete_nw_resolution_report);
          v107 = WORD2(v30) ^ WORD1(v30) ^ HIWORD(v30) ^ (unsigned __int16)v30;
          v33 = nw_endpoint_handler_copy_endpoint(v30);
          v34 = v33;
          if (v33 && (v35 = v33, v36 = -[NSObject type](v35, "type"), v35, v36 == 3))
          {
            v37 = 4;
            v38 = 3;
          }
          else
          {
            v37 = 2;
            v38 = 1;
          }
          v39 = nw_connection_get_event_milliseconds(v4, 2, v38, &v107, 0);
          v32->milliseconds = nw_connection_get_event_milliseconds(v4, 2, v37, &v107, 0) - v39;
          if (!v28 && v39 > v97)
            v7->resolution_started_after_milliseconds = v39 - v97;
          objc_storeStrong((id *)&v32->successful_endpoint, v27);
          v32->endpoint_count = nw_endpoint_handler_get_resolved_endpoint_count(v30);
          v32->source = nw_endpoint_handler_get_resolution_source(v30);
          v32->protocol = nw_endpoint_handler_get_resolution_protocol(v30);
          v40 = nw_endpoint_handler_copy_preferred_resolved_endpoint(v30);
          preferred_endpoint = v32->preferred_endpoint;
          v32->preferred_endpoint = (OS_nw_endpoint *)v40;

          v42 = (OS_nw_array *)nw_endpoint_handler_copy_resolved_endpoints(v30);
          resolved_endpoints = v32->resolved_endpoints;
          v32->resolved_endpoints = v42;

          v106 = 0;
          nw_endpoint_handler_get_svcb_report(v30, 0, &v106, 0);
          *((_BYTE *)v32 + 70) = *((_BYTE *)v32 + 70) & 0xFE | v106;
          v105 = 0;
          *(_QWORD *)buf = 0;
          nw_endpoint_handler_get_extended_dns_error(v30, &v105, (char **)buf);
          v32->extended_dns_error_code = v105;
          v32->extended_dns_error_extra_text = *(char **)buf;
          nw_array_prepend((uint64_t)v7->resolution_reports, v32);

          ++v28;
LABEL_32:

LABEL_33:
          v44 = nw_endpoint_handler_copy_endpoint(v30);

          v45 = v30;
          v46 = v45;
          if (!v30)
          {
            __nwlog_obj();
            v51 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_parent";
            v52 = (char *)_os_log_send_and_compose_impl();

            LOBYTE(v107) = 16;
            LOBYTE(v105) = 0;
            if (__nwlog_fault(v52, &v107, &v105))
            {
              if (v107 == 17)
              {
                __nwlog_obj();
                v53 = objc_claimAutoreleasedReturnValue();
                v54 = v107;
                if (os_log_type_enabled(v53, (os_log_type_t)v107))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_parent";
                  _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s called with null handler", buf, 0xCu);
                }
                goto LABEL_47;
              }
              if ((_BYTE)v105)
              {
                v59 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v60 = objc_claimAutoreleasedReturnValue();
                v61 = v107;
                v62 = os_log_type_enabled(v60, (os_log_type_t)v107);
                if (v59)
                {
                  if (v62)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_parent";
                    v111 = 2082;
                    v112 = v59;
                    _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(v59);
                }
                else
                {
                  if (v62)
                  {
                    *(_DWORD *)buf = 136446210;
                    *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_parent";
                    _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s called with null handler, no backtrace", buf, 0xCu);
                  }

                }
              }
              else
              {
                __nwlog_obj();
                v53 = objc_claimAutoreleasedReturnValue();
                v64 = v107;
                if (os_log_type_enabled(v53, (os_log_type_t)v107))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_parent";
                  _os_log_impl(&dword_182FBE000, v53, v64, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
                }
LABEL_47:

              }
            }
            if (v52)
              free(v52);
            v26 = 0;
            goto LABEL_35;
          }
          v26 = (id *)v45[9];
LABEL_35:

          if (v26)
          {
            v27 = v44;
            if (v28 < v20)
              continue;
          }

          goto LABEL_78;
        }
        __nwlog_obj();
        v47 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
        v48 = (char *)_os_log_send_and_compose_impl();

        LOBYTE(v107) = 16;
        LOBYTE(v105) = 0;
        if (__nwlog_fault(v48, &v107, &v105))
        {
          if (v107 == 17)
          {
            __nwlog_obj();
            v49 = objc_claimAutoreleasedReturnValue();
            v50 = v107;
            if (os_log_type_enabled(v49, (os_log_type_t)v107))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
              _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s called with null handler", buf, 0xCu);
            }
          }
          else
          {
            if ((_BYTE)v105)
            {
              v55 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v56 = objc_claimAutoreleasedReturnValue();
              v57 = v107;
              v58 = os_log_type_enabled(v56, (os_log_type_t)v107);
              if (v55)
              {
                if (v58)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
                  v111 = 2082;
                  v112 = v55;
                  _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v55);
              }
              else
              {
                if (v58)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
                  _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null handler, no backtrace", buf, 0xCu);
                }

              }
              goto LABEL_67;
            }
            __nwlog_obj();
            v49 = objc_claimAutoreleasedReturnValue();
            v63 = v107;
            if (os_log_type_enabled(v49, (os_log_type_t)v107))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
              _os_log_impl(&dword_182FBE000, v49, v63, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_67:
        if (v48)
          free(v48);
        v32 = 0;
        goto LABEL_32;
      }
      v26 = 0;
LABEL_78:
      *(_WORD *)buf = 0;
      v65 = nw_connection_get_event_milliseconds(v4, 4, 1, buf, 0);
      v66 = MEMORY[0x1E0C809B0];
      if (v65 != -1)
      {
        *((_BYTE *)v7 + 84) |= 1u;
        v67 = nw_parameters_copy_effective_proxy_config(v96);
        v68 = v67;
        if (v67)
        {
          v69 = v67;
          v70 = v69[38];

          if (v70 != 4)
          {
            *((_BYTE *)v7 + 84) |= 2u;
            v71 = nw_array_create();
            proxy_endpoints = v7->proxy_endpoints;
            v7->proxy_endpoints = (OS_nw_array *)v71;

            v103[0] = v66;
            v103[1] = 3221225472;
            v103[2] = __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke;
            v103[3] = &unk_1E149B370;
            v104 = v7;
            nw_proxy_config_enumerate_endpoints(v69, v103);

          }
        }
        v101[0] = v66;
        v101[1] = 3221225472;
        v101[2] = __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_2;
        v101[3] = &unk_1E149DC50;
        v102 = v7;
        nw_endpoint_handler_access_proxy_handler(v95, v101);

      }
      if (v92)
      {
        v7->privacy_stance = *((_DWORD *)v4 + 126);
        v73 = v7;
        v74 = (NWConcrete_nw_establishment_report *)v4[52];
        v4[52] = v73;
      }
      else
      {
        v98[0] = v66;
        v98[1] = 3221225472;
        v98[2] = __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_138;
        v98[3] = &unk_1E14ACE68;
        v99 = v7;
        v75 = v4;
        v100 = v75;
        os_unfair_lock_lock((os_unfair_lock_t)v4 + 34);
        __nw_connection_fillout_establishment_report_on_nw_queue_block_invoke_138((uint64_t)v98);
        os_unfair_lock_unlock((os_unfair_lock_t)v4 + 34);

        v74 = v99;
      }

      goto LABEL_87;
    }
    __nwlog_obj();
    v83 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
    v84 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v109) = 16;
    LOBYTE(v108) = 0;
    if (__nwlog_fault(v84, &v109, &v108))
    {
      if (v109 == 17)
      {
        __nwlog_obj();
        v85 = objc_claimAutoreleasedReturnValue();
        v86 = v109;
        if (os_log_type_enabled(v85, (os_log_type_t)v109))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v85, v86, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if ((_BYTE)v108)
      {
        v88 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v85 = objc_claimAutoreleasedReturnValue();
        v89 = v109;
        v90 = os_log_type_enabled(v85, (os_log_type_t)v109);
        if (v88)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
            v111 = 2082;
            v112 = v88;
            _os_log_impl(&dword_182FBE000, v85, v89, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v88);
          goto LABEL_124;
        }
        if (v90)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v85, v89, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v85 = objc_claimAutoreleasedReturnValue();
        v91 = v109;
        if (os_log_type_enabled(v85, (os_log_type_t)v109))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_connection_fillout_establishment_report_on_nw_queue";
          _os_log_impl(&dword_182FBE000, v85, v91, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_124:
    if (v84)
      free(v84);
LABEL_87:

    v6 = v94;
    goto LABEL_88;
  }
LABEL_89:

}

void sub_183049F38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20)
{
  void *v20;
  id *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

unint64_t nw_connection_get_event_milliseconds(void *a1, int a2, int a3, _WORD *a4, uint64_t a5)
{
  _WORD *v9;
  _QWORD *v10;
  unsigned int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = v9;
  if (!v9)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_connection_get_event_milliseconds";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v20, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_connection_get_event_milliseconds";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null connection", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v31 = "nw_connection_get_event_milliseconds";
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_38;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_connection_get_event_milliseconds";
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_connection_get_event_milliseconds";
          _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_38:
    if (v20)
      free(v20);
    goto LABEL_40;
  }
  v11 = (unsigned __int16)v9[161];
  if (v9[161])
  {
    v12 = 0;
    if (a4)
    {
      v13 = 0;
      v14 = 0xFFFFFFFFLL;
      while (1)
      {
        v16 = v10[39];
        if (*(unsigned __int16 *)(v16 + v12 + 10) == a3
          && *(unsigned __int16 *)(v16 + v12 + 8) == a2
          && (!*a4 || *(unsigned __int16 *)(v16 + v12 + 12) == (unsigned __int16)*a4))
        {
          v15 = (a5 - 1);
          if (v15 >= 0xFFFFFFFE)
          {
            *a4 = *(_WORD *)(v16 + v12 + 12);
            v14 = nw_delta_nanos(v10[9], *(_QWORD *)(v16 + v12)) / 0xF4240uLL;
            if ((_DWORD)a5 != -1)
              goto LABEL_41;
            v11 = *((unsigned __int16 *)v10 + 161);
            v15 = 0xFFFFFFFFLL;
          }
        }
        else
        {
          v15 = a5;
        }
        ++v13;
        v12 += 16;
        a5 = v15;
        if (v13 >= v11)
          goto LABEL_41;
      }
    }
    v14 = 0xFFFFFFFFLL;
    while (1)
    {
      v18 = v10[39];
      if (*(unsigned __int16 *)((char *)a4 + v18 + 10) == a3 && *(unsigned __int16 *)((char *)a4 + v18 + 8) == a2)
      {
        v17 = (a5 - 1);
        if (v17 >= 0xFFFFFFFE)
        {
          v14 = nw_delta_nanos(v10[9], *(_QWORD *)((char *)a4 + v18)) / 0xF4240uLL;
          if ((_DWORD)a5 != -1)
            goto LABEL_41;
          v11 = *((unsigned __int16 *)v10 + 161);
          v17 = 0xFFFFFFFFLL;
        }
      }
      else
      {
        v17 = a5;
      }
      ++v12;
      a4 += 8;
      a5 = v17;
      if (v12 >= v11)
        goto LABEL_41;
    }
  }
LABEL_40:
  v14 = 0xFFFFFFFFLL;
LABEL_41:

  return v14;
}

uint64_t nw_delta_nanos(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v4 = dword_1ECD84D64;
  if (dword_1ECD84D64)
    return (a2 - a1) * (unint64_t)time_base / v4;
  mach_timebase_info((mach_timebase_info_t)&time_base);
  v4 = dword_1ECD84D64;
  if (dword_1ECD84D64)
    return (a2 - a1) * (unint64_t)time_base / v4;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_delta_nanos";
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_delta_nanos";
        v9 = "%{public}s nw_init_timebase failed";
LABEL_18:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else if (v12)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      v11 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v15 = "nw_delta_nanos";
          v16 = 2082;
          v17 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s nw_init_timebase failed, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_19;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_delta_nanos";
        v9 = "%{public}s nw_init_timebase failed, no backtrace";
        goto LABEL_18;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_delta_nanos";
        v9 = "%{public}s nw_init_timebase failed, backtrace limit exceeded";
        goto LABEL_18;
      }
    }
  }
LABEL_19:
  if (v6)
    free(v6);
  return 1;
}

uint64_t nw_endpoint_flow_copy_protocol_establishment_reports(void *a1)
{
  id v1;
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  NWConcrete_nw_endpoint_handler *v5;
  OS_nw_parameters *v6;
  OS_nw_parameters *v7;
  id v8;
  dispatch_queue_t *v9;
  dispatch_queue_t *v10;
  NWConcrete_nw_endpoint_mode_handler *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  void *v15;
  char v16;
  NSObject *v17;
  const char *v18;
  NWConcrete_nw_endpoint_handler *v19;
  char v20;
  NSObject *v21;
  NWConcrete_nw_endpoint_handler *v22;
  NWConcrete_nw_endpoint_handler *v23;
  char v24;
  const char *v25;
  nw_endpoint_t v26;
  char *id_str;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void **v34;
  void **v35;
  const char *v36;
  void **v37;
  id v38;
  void *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  char *backtrace_string;
  os_log_type_t v49;
  _BOOL4 v50;
  void *v51;
  char *v52;
  NSObject *v53;
  os_log_type_t v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  os_log_type_t v63;
  os_log_type_t v64;
  os_log_type_t v65;
  const char *v66;
  const char *logging_description;
  const char *v68;
  NSObject *v69;
  OS_nw_parameters *v70;
  char v71;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v74;
  void *v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  const char *v83;
  __int16 v84;
  id v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
    v41 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v71 = 0;
    if (__nwlog_fault(v41, &type, &v71))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
          _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v71)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v49 = type;
        v50 = os_log_type_enabled(v42, type);
        if (backtrace_string)
        {
          if (v50)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
            v74 = 2082;
            v75 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v42, v49, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_84;
        }
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
          _os_log_impl(&dword_182FBE000, v42, v49, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v63 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
          _os_log_impl(&dword_182FBE000, v42, v63, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_84:
    if (v41)
      free(v41);
    goto LABEL_26;
  }
  v3 = (unsigned int *)v1;
  v4 = v3[29];

  if ((_DWORD)v4 == 2)
  {
    v5 = v3;
    v6 = v5->parameters;

    if (v6)
    {
      v7 = v6;
      v8 = *(id *)(*((_QWORD *)v7 + 13) + 136);

      if (v8)
      {
        v9 = (dispatch_queue_t *)v8;
        v10 = v9;
        if (((_BYTE)v9[17] & 8) == 0)
          dispatch_assert_queue_V2(v9[1]);

        v11 = nw_endpoint_handler_copy_flow(v5);
        v12 = (_QWORD *)*((_QWORD *)v11 + 51);
        if (v12)
        {
          v13 = v12[3];
          if (v13)
          {
            v14 = *(uint64_t (**)(void))(v13 + 224);
            if (v14)
            {
              v15 = (void *)v12[5];
              if (v15 == &nw_protocol_ref_counted_handle)
              {
                v33 = v12[11];
                if (v33)
                  v12[11] = v33 + 1;
                v16 = -1;
              }
              else
              {
                v16 = 0;
              }
              *(_QWORD *)buf = v12;
              buf[8] = v16;
              v32 = v14();
              if (v15 == &nw_protocol_ref_counted_handle)
                nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              goto LABEL_43;
            }
          }
        }
        else
        {
          v70 = v6;
          v19 = v5;
          v20 = *((_BYTE *)v19 + 268);

          if ((v20 & 0x20) != 0)
          {
            v32 = 0;
            v6 = v70;
            goto LABEL_43;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v21 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
          {
            v69 = v21;
            v22 = v19;

            v23 = v22;
            v24 = *((_BYTE *)v19 + 268);

            v25 = "dry-run ";
            if ((v24 & 1) == 0)
              v25 = "";
            v68 = v25;
            v26 = nw_endpoint_handler_copy_endpoint(v23);
            logging_description = nw_endpoint_get_logging_description(v26);
            id_str = v22->id_str;
            v28 = v23;
            v29 = v28;
            v30 = v28[30];
            if (v30 > 5)
              v31 = "unknown-state";
            else
              v31 = off_1E149FC48[v30];
            v66 = v31;

            v34 = v29;
            v35 = v34;
            v36 = "path";
            switch(v3[29])
            {
              case 0u:
                break;
              case 1u:
                v36 = "resolver";
                break;
              case 2u:
                v36 = nw_endpoint_flow_mode_string(v34[31]);
                break;
              case 3u:
                v36 = "proxy";
                break;
              case 4u:
                v36 = "fallback";
                break;
              case 5u:
                v36 = "transform";
                break;
              default:
                v36 = "unknown-mode";
                break;
            }

            v37 = v35;
            os_unfair_lock_lock((os_unfair_lock_t)v37 + 28);
            v38 = v37[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v37 + 28);

            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
            v74 = 2082;
            v75 = id_str;
            v76 = 2082;
            v21 = v69;
            v77 = v68;
            v78 = 2082;
            v79 = logging_description;
            v80 = 2082;
            v81 = v66;
            v82 = 2082;
            v83 = v36;
            v84 = 2114;
            v85 = v38;
            _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] could not find valid output protocol", buf, 0x48u);

          }
          v6 = v70;
        }
        v32 = 0;
LABEL_43:

LABEL_44:
LABEL_45:

        goto LABEL_46;
      }
      __nwlog_obj();
      v51 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
      v52 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v71 = 0;
      if (__nwlog_fault(v52, &type, &v71))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v53 = objc_claimAutoreleasedReturnValue();
          v54 = type;
          if (os_log_type_enabled(v53, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
            _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s called with null context", buf, 0xCu);
          }
        }
        else
        {
          if (v71)
          {
            v59 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v60 = objc_claimAutoreleasedReturnValue();
            v61 = type;
            v62 = os_log_type_enabled(v60, type);
            if (v59)
            {
              if (v62)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
                v74 = 2082;
                v75 = v59;
                _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v59);
            }
            else
            {
              if (v62)
              {
                *(_DWORD *)buf = 136446210;
                *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
                _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s called with null context, no backtrace", buf, 0xCu);
              }

            }
            goto LABEL_101;
          }
          __nwlog_obj();
          v53 = objc_claimAutoreleasedReturnValue();
          v65 = type;
          if (os_log_type_enabled(v53, type))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
            _os_log_impl(&dword_182FBE000, v53, v65, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_101:
      if (v52)
        free(v52);
      v32 = 0;
      goto LABEL_44;
    }
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v71 = 0;
    if (__nwlog_fault(v45, &type, &v71))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
          _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else
      {
        if (v71)
        {
          v55 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v56 = objc_claimAutoreleasedReturnValue();
          v57 = type;
          v58 = os_log_type_enabled(v56, type);
          if (v55)
          {
            if (v58)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
              v74 = 2082;
              v75 = v55;
              _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v55);
          }
          else
          {
            if (v58)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
              _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_95;
        }
        __nwlog_obj();
        v46 = objc_claimAutoreleasedReturnValue();
        v64 = type;
        if (os_log_type_enabled(v46, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
          _os_log_impl(&dword_182FBE000, v46, v64, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_95:
    if (v45)
      free(v45);
    v32 = 0;
    goto LABEL_45;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v17 = (id)gLogObj;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    if (v4 > 5)
      v18 = "unknown-mode";
    else
      v18 = off_1E149FC18[v4];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_establishment_reports";
    v74 = 2082;
    v75 = (void *)v18;
    v76 = 2082;
    v77 = "flow";
    _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_26:
  v32 = 0;
LABEL_46:

  return v32;
}

void sub_18304B390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void nw_array_prepend(uint64_t a1, void *a2)
{
  void *v3;
  void *v4;
  int v5;
  const char *v6;
  uint64_t v7;

  v7 = *MEMORY[0x1E0C80C00];
  v4 = a2;
  if (a1 && a2)
  {
    if (atomic_load((unsigned __int8 *)(a1 + 40)))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      v5 = 136446210;
      v6 = "nw_array_prepend";
      v3 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v3))
        __break(1u);
      else
        free(v3);
    }
    else
    {
      std::vector<nw_object_wrapper_t>::emplace<nw_object *&>((unint64_t *)(a1 + 16), *(_QWORD *)(a1 + 16), &v4);
    }
  }
}

void std::vector<nw_object_wrapper_t>::emplace<nw_object *&>(unint64_t *a1, uint64_t a2, void **a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  unint64_t v34;
  void **v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  void *v41;
  _QWORD *v42;
  _QWORD *v43;
  char *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  _OWORD *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v58;
  uint64_t v59;
  _OWORD *v60;
  uint64_t v61;
  __int128 v62;
  unint64_t v63;
  unint64_t v64;
  void *v65;
  void *v66;

  v6 = *a1;
  v5 = a1[1];
  v7 = a2 - *a1;
  v8 = v7 >> 3;
  v9 = *a1 + (v7 & 0xFFFFFFFFFFFFFFF8);
  v10 = a1[2];
  if (v5 < v10)
  {
    if (*a3)
      v11 = os_retain(*a3);
    else
      v11 = 0;
    v16 = v9 + 8;
    if (v9 == v5)
    {
      *(_QWORD *)v9 = v11;
      a1[1] = v16;
      return;
    }
    v17 = a1[1];
    v18 = v17 - v16;
    v19 = (_OWORD *)(v17 - 8);
    if (v17 - 8 >= v17)
    {
      v31 = (_QWORD *)a1[1];
    }
    else
    {
      v20 = (v7 & 0xFFFFFFFFFFFFFFF8) + v18;
      v21 = v20 + v6;
      v22 = v20 + v6 + 8;
      if (v17 > v22)
        v22 = a1[1];
      v23 = v22 + ~v6 - v20;
      if (v23 > 0xE7
        && (v17 < v21 + (v23 & 0xFFFFFFFFFFFFFFF8) + 8
          ? (v24 = (unint64_t)v19 >= (v23 & 0xFFFFFFFFFFFFFFF8) + v17 + 8)
          : (v24 = 1),
            v24))
      {
        v25 = (v23 >> 3) + 1;
        v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
        v27 = (_QWORD *)((char *)v19 + v26);
        v28 = (_OWORD *)(v17 + 16);
        v29 = v25 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v30 = v19[1];
          *(v28 - 1) = *v19;
          *v28 = v30;
          *v19 = 0uLL;
          v19[1] = 0uLL;
          v19 += 2;
          v28 += 2;
          v29 -= 4;
        }
        while (v29);
        v31 = (_QWORD *)(v17 + v26);
        if (v25 == (v25 & 0x3FFFFFFFFFFFFFFCLL))
          goto LABEL_38;
      }
      else
      {
        v27 = (_QWORD *)(v17 - 8);
        v31 = (_QWORD *)a1[1];
      }
      do
      {
        *v31++ = *v27;
        *v27++ = 0;
      }
      while ((unint64_t)v27 < v17);
    }
LABEL_38:
    a1[1] = (unint64_t)v31;
    if (v17 != v16)
    {
      v35 = (void **)(v17 - 8);
      v36 = 8 * (v18 >> 3);
      v37 = v6 + 8 * v8 - 8;
      do
      {
        if (*v35)
          os_release(*v35);
        *v35-- = *(void **)(v37 + v36);
        *(_QWORD *)(v37 + v36) = 0;
        v36 -= 8;
      }
      while (v36);
    }
    if (*(_QWORD *)v9)
      os_release(*(void **)v9);
    *(_QWORD *)v9 = v11;
    return;
  }
  v12 = ((uint64_t)(v5 - v6) >> 3) + 1;
  if (v12 >> 61)
    abort();
  v13 = v10 - v6;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      goto LABEL_85;
    v15 = (char *)operator new(8 * v14);
  }
  else
  {
    v15 = 0;
  }
  v32 = &v15[8 * v8];
  v33 = &v15[8 * v14];
  if (v8 != v14)
    goto LABEL_52;
  if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFF8) >= 1)
  {
    v34 = v8 + 2;
    if (v8 >= -1)
      v34 = v8 + 1;
    v32 -= 8 * (v34 >> 1);
    goto LABEL_52;
  }
  if ((unint64_t)v7 < 8)
    v38 = 1;
  else
    v38 = (v7 >> 2) & 0xFFFFFFFFFFFFFFFELL;
  if (v38 >> 61)
LABEL_85:
    std::__throw_bad_array_new_length[abi:nn180100]();
  v39 = 8 * v38;
  v40 = (char *)operator new(8 * v38);
  v32 = &v40[8 * (v38 >> 2)];
  v33 = &v40[v39];
  if (v15)
    operator delete(v15);
LABEL_52:
  v41 = *a3;
  if (*a3)
    v41 = os_retain(v41);
  *(_QWORD *)v32 = v41;
  v42 = v32 + 8;
  v43 = (_QWORD *)*a1;
  v44 = v32;
  if (*a1 != v9)
  {
    v45 = (v7 & 0xFFFFFFFFFFFFFFF8) + v6 - (_QWORD)v43 - 8;
    v46 = (_QWORD *)v9;
    v44 = v32;
    if (v45 < 0x88)
      goto LABEL_88;
    if ((unint64_t)&v32[-(v45 & 0xFFFFFFFFFFFFFFF8) - 8] < v9)
    {
      v46 = (_QWORD *)v9;
      v44 = v32;
      if ((v7 & 0xFFFFFFFFFFFFFFF8) - (v45 & 0xFFFFFFFFFFFFFFF8) + v6 - 8 < (unint64_t)v32)
        goto LABEL_88;
    }
    v47 = (v45 >> 3) + 1;
    v46 = (_QWORD *)(v9 - 8 * (v47 & 0x3FFFFFFFFFFFFFFCLL));
    v48 = v32 - 16;
    v49 = (_OWORD *)(v6 + 8 * v8 - 32);
    v50 = v47 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v51 = v49[1];
      *((_OWORD *)v48 - 1) = *v49;
      *(_OWORD *)v48 = v51;
      *v49 = 0uLL;
      v49[1] = 0uLL;
      v49 -= 2;
      v48 -= 32;
      v50 -= 4;
    }
    while (v50);
    v44 = &v32[-8 * (v47 & 0x3FFFFFFFFFFFFFFCLL)];
    if (v47 != (v47 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_88:
      do
      {
        v52 = *--v46;
        *((_QWORD *)v44 - 1) = v52;
        v44 -= 8;
        *v46 = 0;
      }
      while (v46 != v43);
    }
  }
  v53 = (_QWORD *)a1[1];
  if (v53 == (_QWORD *)v9)
    goto LABEL_75;
  v54 = (v7 & 0xFFFFFFFFFFFFFFF8) + v6;
  v55 = (unint64_t)v53 - v54 - 8;
  if (v55 >= 0x88)
  {
    if ((unint64_t)v42 >= v54 + (v55 & 0xFFFFFFFFFFFFFFF8) + 8
      || v9 >= (unint64_t)v42 + (v55 & 0xFFFFFFFFFFFFFFF8) + 8)
    {
      v58 = (v55 >> 3) + 1;
      v59 = 8 * (v58 & 0x3FFFFFFFFFFFFFFCLL);
      v56 = (_QWORD *)(v9 + v59);
      v60 = v32 + 24;
      v61 = v58 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v62 = *(_OWORD *)(v9 + 16);
        *(v60 - 1) = *(_OWORD *)v9;
        *v60 = v62;
        *(_OWORD *)v9 = 0uLL;
        *(_OWORD *)(v9 + 16) = 0uLL;
        v9 += 32;
        v60 += 2;
        v61 -= 4;
      }
      while (v61);
      v42 = (_QWORD *)((char *)v42 + v59);
      if (v58 == (v58 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_74;
    }
    else
    {
      v56 = (_QWORD *)v9;
    }
  }
  else
  {
    v56 = (_QWORD *)v9;
  }
  do
  {
    *v42++ = *v56;
    *v56++ = 0;
  }
  while (v56 != v53);
LABEL_74:
  v9 = a1[1];
LABEL_75:
  v63 = *a1;
  *a1 = (unint64_t)v44;
  a1[1] = (unint64_t)v42;
  a1[2] = (unint64_t)v33;
  if (v9 != v63)
  {
    v64 = v9;
    do
    {
      v66 = *(void **)(v64 - 8);
      v64 -= 8;
      v65 = v66;
      if (v66)
        os_release(v65);
      *(_QWORD *)(v9 - 8) = 0;
      v9 = v64;
    }
    while (v64 != v63);
    v9 = v63;
  }
  if (v9)
    operator delete((void *)v9);
}

void nw_endpoint_handler_get_svcb_report(void *a1, BOOL *a2, BOOL *a3, BOOL *a4)
{
  NWConcrete_nw_endpoint_handler *v7;
  NWConcrete_nw_endpoint_handler *v8;
  int mode;
  void **v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  id v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_endpoint_handler_get_mode";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v12, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_endpoint_handler_get_mode";
            v31 = 2082;
            v32 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v12)
      free(v12);
    goto LABEL_22;
  }
  mode = v7->mode;

  if (mode == 1)
  {
    v10 = (void **)nw_endpoint_handler_copy_resolver(v8);
    nw_resolver_get_svcb_report(v10[1], a2, a3, a4);

    goto LABEL_29;
  }
LABEL_22:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v19 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v30 = "nw_endpoint_handler_get_svcb_report";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (!__nwlog_fault(v20, &type, &v27))
    goto LABEL_27;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    v22 = type;
    if (os_log_type_enabled(v21, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_endpoint_handler_get_svcb_report";
      _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
    }
LABEL_26:

LABEL_27:
    if (!v20)
      goto LABEL_29;
LABEL_28:
    free(v20);
    goto LABEL_29;
  }
  if (!v27)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = (id)gLogObj;
    v26 = type;
    if (os_log_type_enabled(v21, type))
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_endpoint_handler_get_svcb_report";
      _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_26;
  }
  v23 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v21 = (id)gLogObj;
  v24 = type;
  v25 = os_log_type_enabled(v21, type);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      v30 = "nw_endpoint_handler_get_svcb_report";
      _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
    }
    goto LABEL_26;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    v30 = "nw_endpoint_handler_get_svcb_report";
    v31 = 2082;
    v32 = v23;
    _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v23);
  if (v20)
    goto LABEL_28;
LABEL_29:

}

void sub_18304C144(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_resolver_get_svcb_report(void *a1, BOOL *a2, BOOL *a3, BOOL *a4)
{
  id v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (v7)
  {
    if (a2)
      *a2 = (*((_BYTE *)v7 + 347) & 2) != 0;
    if (a3)
      *a3 = (*((_BYTE *)v7 + 347) & 4) != 0;
    if (a4)
      *a4 = (*((_BYTE *)v7 + 347) & 8) != 0;
    goto LABEL_8;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_resolver_get_svcb_report";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_get_svcb_report";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_resolver_get_svcb_report";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_get_svcb_report";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_resolver_get_svcb_report";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v10)
    free(v10);
LABEL_8:

}

uint64_t nw_endpoint_handler_get_resolved_endpoint_count(void *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  int mode;
  NWConcrete_nw_endpoint_mode_handler *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_endpoint_handler_get_mode";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v8, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_endpoint_handler_get_mode";
            v28 = 2082;
            v29 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v8)
      free(v8);
LABEL_25:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v16, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v24)
      {
        v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v21 = type;
        v22 = os_log_type_enabled(v17, type);
        if (v20)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
            v28 = 2082;
            v29 = v20;
            _os_log_impl(&dword_182FBE000, v17, v21, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v20);
          if (!v16)
            goto LABEL_32;
          goto LABEL_31;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
          _os_log_impl(&dword_182FBE000, v17, v21, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_endpoint_handler_get_resolved_endpoint_count";
          _os_log_impl(&dword_182FBE000, v17, v23, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v16)
    {
LABEL_32:
      v6 = 0;
      goto LABEL_33;
    }
LABEL_31:
    free(v16);
    goto LABEL_32;
  }
  mode = v1->mode;

  if (mode != 1)
    goto LABEL_25;
  v4 = nw_endpoint_handler_copy_resolver(v2);
  v5 = *((_QWORD *)v4 + 5);
  if (v5)
    v6 = (*(_QWORD *)(v5 + 24) - *(_QWORD *)(v5 + 16)) >> 3;
  else
    v6 = 0;

LABEL_33:
  return v6;
}

void sub_18304C940(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_resolution_source(void *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  int mode;
  id *v4;
  id v5;
  void *v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  id v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  os_log_type_t v32;
  char v33;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_endpoint_handler_get_mode";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v9, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v33)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        v18 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_endpoint_handler_get_mode";
            v37 = 2082;
            v38 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v10, v17, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v10, v22, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_36:
    if (v9)
      free(v9);
LABEL_38:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v36 = "nw_endpoint_handler_get_resolution_source";
    v24 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v24, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_endpoint_handler_get_resolution_source";
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v33)
      {
        v28 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v29 = type;
        v30 = os_log_type_enabled(v25, type);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_endpoint_handler_get_resolution_source";
            v37 = 2082;
            v38 = v28;
            _os_log_impl(&dword_182FBE000, v25, v29, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v28);
          if (!v24)
            goto LABEL_45;
          goto LABEL_44;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_endpoint_handler_get_resolution_source";
          _os_log_impl(&dword_182FBE000, v25, v29, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v31 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_endpoint_handler_get_resolution_source";
          _os_log_impl(&dword_182FBE000, v25, v31, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v24)
    {
LABEL_45:
      v7 = 1;
      goto LABEL_46;
    }
LABEL_44:
    free(v24);
    goto LABEL_45;
  }
  mode = v1->mode;

  if (mode != 1)
    goto LABEL_38;
  v4 = (id *)nw_endpoint_handler_copy_resolver(v2);
  v5 = v4[1];
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v36 = "nw_resolver_get_resolution_source";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v33 = 0;
    if (__nwlog_fault(v13, &type, &v33))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_resolver_get_resolution_source";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null resolver", buf, 0xCu);
        }
      }
      else if (v33)
      {
        v19 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        v21 = os_log_type_enabled(v14, type);
        if (v19)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            v36 = "nw_resolver_get_resolution_source";
            v37 = 2082;
            v38 = v19;
            _os_log_impl(&dword_182FBE000, v14, v20, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v19);
          goto LABEL_65;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_resolver_get_resolution_source";
          _os_log_impl(&dword_182FBE000, v14, v20, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v36 = "nw_resolver_get_resolution_source";
          _os_log_impl(&dword_182FBE000, v14, v32, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_65:
    if (v13)
      free(v13);
    v7 = 1;
    goto LABEL_9;
  }
  if ((*((_WORD *)v5 + 44) & 0x60) != 0)
  {
    v7 = 3;
  }
  else if ((*((_BYTE *)v5 + 346) & 0xE) != 0)
  {
    v7 = 2;
  }
  else
  {
    v7 = 1;
  }
LABEL_9:

LABEL_46:
  return v7;
}

void sub_18304D0C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_resolved_endpoints(void *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  int mode;
  NWConcrete_nw_endpoint_mode_handler *v4;
  uint64_t v5;
  _BOOL8 v6;
  unsigned __int8 *v7;
  id v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  id v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _QWORD v26[4];
  id v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_endpoint_handler_get_mode";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v10, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v31 = "nw_endpoint_handler_get_mode";
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_24;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_24:
    if (v10)
      free(v10);
LABEL_26:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v31 = "nw_endpoint_handler_copy_resolved_endpoints";
    v18 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v18, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_endpoint_handler_copy_resolved_endpoints";
          _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s Endpoint handler is not a resolver", buf, 0xCu);
        }
      }
      else if (v28)
      {
        v21 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v22 = type;
        v23 = os_log_type_enabled(v19, type);
        if (v21)
        {
          if (v23)
          {
            *(_DWORD *)buf = 136446466;
            v31 = "nw_endpoint_handler_copy_resolved_endpoints";
            v32 = 2082;
            v33 = v21;
            _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s Endpoint handler is not a resolver, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v21);
          if (!v18)
            goto LABEL_45;
          goto LABEL_44;
        }
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_endpoint_handler_copy_resolved_endpoints";
          _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s Endpoint handler is not a resolver, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v19 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_endpoint_handler_copy_resolved_endpoints";
          _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s Endpoint handler is not a resolver, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v18)
    {
LABEL_45:
      v8 = 0;
      goto LABEL_46;
    }
LABEL_44:
    free(v18);
    goto LABEL_45;
  }
  mode = v1->mode;

  if (mode != 1)
    goto LABEL_26;
  v4 = nw_endpoint_handler_copy_resolver(v2);
  v5 = *((_QWORD *)v4 + 5);
  if (!v5 || *(_QWORD *)(v5 + 24) == *(_QWORD *)(v5 + 16))
  {
    v8 = 0;
  }
  else
  {
    v6 = nw_array_create();
    v7 = (unsigned __int8 *)*((_QWORD *)v4 + 5);
    v26[0] = MEMORY[0x1E0C809B0];
    v26[1] = 3221225472;
    v26[2] = __nw_endpoint_handler_copy_resolved_endpoints_block_invoke;
    v26[3] = &unk_1E14AC200;
    v8 = (id)v6;
    v27 = v8;
    nw_array_apply(v7, (uint64_t)v26);

  }
LABEL_46:

  return v8;
}

void sub_18304D654(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_passthrough_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*notify)(void);
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  const char *v12;
  void *v13;
  char *backtrace_string;
  _BOOL4 v15;
  const char *v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
    {
      nw_protocol_set_input_handler((uint64_t)a1, (uint64_t)a2);
      if (!nw_protocols_are_equal(a2->identifier->name, &g_replay_protocol_identifier) && !a2->output_handler)
        nw_protocol_set_output_handler((uint64_t)a2, (uint64_t)a1);
      output_handler = a1->output_handler;
      if (output_handler)
      {
        callbacks = output_handler->callbacks;
        if (callbacks)
        {
          notify = (void (*)(void))callbacks->notify;
          if (notify)
            notify();
        }
      }
      return 1;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_flow_passthrough_add_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_flow_passthrough_add_input_handler";
          v12 = "%{public}s called with null input_protocol";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      if (!v18)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_flow_passthrough_add_input_handler";
          v12 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v17 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_flow_passthrough_add_input_handler";
          v12 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      if (!v17)
        goto LABEL_29;
      *(_DWORD *)buf = 136446466;
      v21 = "nw_flow_passthrough_add_input_handler";
      v22 = 2082;
      v23 = backtrace_string;
      v16 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
LABEL_28:
      _os_log_impl(&dword_182FBE000, v10, v11, v16, buf, 0x16u);
LABEL_29:

      free(backtrace_string);
    }
  }
  else
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_flow_passthrough_add_input_handler";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v9, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_flow_passthrough_add_input_handler";
          v12 = "%{public}s called with null protocol";
LABEL_38:
          _os_log_impl(&dword_182FBE000, v10, v11, v12, buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v18)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_flow_passthrough_add_input_handler";
          v12 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v15 = os_log_type_enabled(v10, type);
      if (!backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_flow_passthrough_add_input_handler";
          v12 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_38;
        }
        goto LABEL_39;
      }
      if (!v15)
        goto LABEL_29;
      *(_DWORD *)buf = 136446466;
      v21 = "nw_flow_passthrough_add_input_handler";
      v22 = 2082;
      v23 = backtrace_string;
      v16 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_28;
    }
  }
LABEL_40:
  if (v9)
    free(v9);
  return 0;
}

BOOL nw_parameters_has_protocol_in_stack(void *a1, _QWORD *a2)
{
  id v3;
  _BOOL8 v4;

  v3 = a1;
  v4 = nw_parameters_has_protocol_at_level(v3, 5, a2)
    || nw_parameters_has_protocol_at_level(v3, 4, a2)
    || nw_parameters_has_protocol_at_level(v3, 3, a2)
    || nw_parameters_has_protocol_at_level(v3, 2, a2);

  return v4;
}

BOOL nw_parameters_has_protocol_at_level(void *a1, int a2, _QWORD *a3)
{
  id *v5;
  id *v6;
  _QWORD *v7;
  void *v8;
  void *v9;
  NSObject *v10;
  _BOOL8 v11;
  id *v12;
  id v13;
  char *identifier;
  BOOL v15;
  unsigned __int8 *v16;
  BOOL (*v17)(uint64_t, int, nw_protocol_options_t);
  uint64_t *v18;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  void *v24;
  os_log_type_t v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  _BOOL4 v34;
  char *backtrace_string;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  int v47;
  _BYTE v48[24];
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    if (a3)
    {
      v7 = v5[19];
      v8 = v7;
      if (v7)
      {
        *(_QWORD *)v48 = 0;
        *(_QWORD *)&v48[8] = v48;
        *(_QWORD *)&v48[16] = 0x2020000000;
        v49 = 0;
        switch(a2)
        {
          case 2:
            v9 = (void *)v7[6];
            if (v9)
              goto LABEL_11;
            goto LABEL_15;
          case 3:
            v9 = (void *)v7[3];
            if (v9)
            {
LABEL_11:
              v12 = v9;
              v13 = v12[1];

              identifier = nw_protocol_definition_get_identifier(v13);
              v15 = nw_protocols_are_equal(a3, identifier);
              *(_BYTE *)(*(_QWORD *)&v48[8] + 24) = v15;

            }
            goto LABEL_15;
          case 4:
            v16 = (unsigned __int8 *)v7[2];
            v41 = MEMORY[0x1E0C809B0];
            v17 = __nw_parameters_has_protocol_at_level_block_invoke_2;
            v18 = &v41;
            goto LABEL_14;
          case 5:
            v16 = (unsigned __int8 *)v7[1];
            v42 = MEMORY[0x1E0C809B0];
            v17 = __nw_parameters_has_protocol_at_level_block_invoke;
            v18 = &v42;
LABEL_14:
            v18[1] = 3221225472;
            v18[2] = (uint64_t)v17;
            v18[3] = (uint64_t)&unk_1E14A8F50;
            v18[4] = (uint64_t)v48;
            v18[5] = (uint64_t)a3;
            nw_array_apply(v16, (uint64_t)v18);
LABEL_15:
            v11 = *(_BYTE *)(*(_QWORD *)&v48[8] + 24) != 0;
            break;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v10 = (id)gLogObj;
            if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v45 = "nw_parameters_has_protocol_at_level";
              v46 = 1024;
              v47 = a2;
              _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
            }

            v11 = 0;
            break;
        }
        _Block_object_dispose(v48, 8);
LABEL_17:

        goto LABEL_18;
      }
      __nwlog_obj();
      v26 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)v48 = 136446210;
      *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
      v27 = (char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      v43 = 0;
      if (__nwlog_fault(v27, buf, &v43))
      {
        if (buf[0] == 17)
        {
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v29 = buf[0];
          if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)v48 = 136446210;
            *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
            _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null stack", v48, 0xCu);
          }
        }
        else if (v43)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v36 = buf[0];
          v37 = os_log_type_enabled(v28, (os_log_type_t)buf[0]);
          if (backtrace_string)
          {
            if (v37)
            {
              *(_DWORD *)v48 = 136446466;
              *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
              *(_WORD *)&v48[12] = 2082;
              *(_QWORD *)&v48[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v28, v36, "%{public}s called with null stack, dumping backtrace:%{public}s", v48, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_70;
          }
          if (v37)
          {
            *(_DWORD *)v48 = 136446210;
            *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
            _os_log_impl(&dword_182FBE000, v28, v36, "%{public}s called with null stack, no backtrace", v48, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v28 = objc_claimAutoreleasedReturnValue();
          v40 = buf[0];
          if (os_log_type_enabled(v28, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)v48 = 136446210;
            *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
            _os_log_impl(&dword_182FBE000, v28, v40, "%{public}s called with null stack, backtrace limit exceeded", v48, 0xCu);
          }
        }

      }
LABEL_70:
      if (v27)
        free(v27);
      v11 = 0;
      goto LABEL_17;
    }
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v48 = 136446210;
    *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
    v21 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v43 = 0;
    if (__nwlog_fault(v21, buf, &v43))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v25 = buf[0];
        if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v48 = 136446210;
          *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
          _os_log_impl(&dword_182FBE000, v22, v25, "%{public}s called with null protocol_identifier", v48, 0xCu);
        }
LABEL_63:

        goto LABEL_64;
      }
      if (!v43)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v39 = buf[0];
        if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v48 = 136446210;
          *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
          _os_log_impl(&dword_182FBE000, v22, v39, "%{public}s called with null protocol_identifier, backtrace limit exceeded", v48, 0xCu);
        }
        goto LABEL_63;
      }
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v33 = buf[0];
      v34 = os_log_type_enabled(v22, (os_log_type_t)buf[0]);
      if (!v30)
      {
        if (v34)
        {
          *(_DWORD *)v48 = 136446210;
          *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
          _os_log_impl(&dword_182FBE000, v22, v33, "%{public}s called with null protocol_identifier, no backtrace", v48, 0xCu);
        }
        goto LABEL_63;
      }
      if (v34)
      {
        *(_DWORD *)v48 = 136446466;
        *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
        *(_WORD *)&v48[12] = 2082;
        *(_QWORD *)&v48[14] = v30;
        _os_log_impl(&dword_182FBE000, v22, v33, "%{public}s called with null protocol_identifier, dumping backtrace:%{public}s", v48, 0x16u);
      }
      goto LABEL_43;
    }
  }
  else
  {
    __nwlog_obj();
    v20 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v48 = 136446210;
    *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
    v21 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    v43 = 0;
    if (__nwlog_fault(v21, buf, &v43))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v23 = buf[0];
        if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v48 = 136446210;
          *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null parameters", v48, 0xCu);
        }
        goto LABEL_63;
      }
      if (!v43)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v38 = buf[0];
        if (os_log_type_enabled(v22, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v48 = 136446210;
          *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
          _os_log_impl(&dword_182FBE000, v22, v38, "%{public}s called with null parameters, backtrace limit exceeded", v48, 0xCu);
        }
        goto LABEL_63;
      }
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v31 = buf[0];
      v32 = os_log_type_enabled(v22, (os_log_type_t)buf[0]);
      if (!v30)
      {
        if (v32)
        {
          *(_DWORD *)v48 = 136446210;
          *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
          _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s called with null parameters, no backtrace", v48, 0xCu);
        }
        goto LABEL_63;
      }
      if (v32)
      {
        *(_DWORD *)v48 = 136446466;
        *(_QWORD *)&v48[4] = "nw_parameters_has_protocol_at_level";
        *(_WORD *)&v48[12] = 2082;
        *(_QWORD *)&v48[14] = v30;
        _os_log_impl(&dword_182FBE000, v22, v31, "%{public}s called with null parameters, dumping backtrace:%{public}s", v48, 0x16u);
      }
LABEL_43:

      free(v30);
    }
  }
LABEL_64:
  if (v21)
    free(v21);
  v11 = 0;
LABEL_18:

  return v11;
}

BOOL __nw_parameters_has_protocol_at_level_block_invoke_2(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4;
  char *identifier;
  _BOOL4 v6;
  _BOOL8 v7;

  v4 = nw_protocol_options_copy_definition(options);
  identifier = nw_protocol_definition_get_identifier(v4);
  v6 = nw_protocols_are_equal(*(_QWORD **)(a1 + 40), identifier);
  if (v6)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  v7 = !v6;

  return v7;
}

BOOL nw_protocols_are_equal(_QWORD *a1, _QWORD *a2)
{
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a2)
      return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3] && a1[4] == a2[4];
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocols_are_equal";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15))
      goto LABEL_46;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocols_are_equal";
        v10 = "%{public}s called with null identifier2";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (!v15)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocols_are_equal";
        v10 = "%{public}s called with null identifier2, backtrace limit exceeded";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocols_are_equal";
        v10 = "%{public}s called with null identifier2, no backtrace";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocols_are_equal";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null identifier2, dumping backtrace:%{public}s";
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocols_are_equal";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15))
    goto LABEL_46;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocols_are_equal";
        v10 = "%{public}s called with null identifier1, backtrace limit exceeded";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocols_are_equal";
        v10 = "%{public}s called with null identifier1, no backtrace";
        goto LABEL_45;
      }
      goto LABEL_46;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_protocols_are_equal";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null identifier1, dumping backtrace:%{public}s";
LABEL_35:
      _os_log_impl(&dword_182FBE000, v8, v9, v13, buf, 0x16u);
    }
LABEL_36:
    free(backtrace_string);
    goto LABEL_46;
  }
  v8 = __nwlog_obj();
  v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    v18 = "nw_protocols_are_equal";
    v10 = "%{public}s called with null identifier1";
LABEL_45:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
  }
LABEL_46:
  if (v7)
    free(v7);
  return 0;
}

char *nw_protocol_definition_get_identifier(void *a1)
{
  char *v1;
  char *v2;
  char *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1 + 8;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_definition_get_identifier";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_identifier";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_definition_get_identifier";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_identifier";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_get_identifier";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_stack_includes_protocol(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  _BOOL4 v8;
  unsigned __int8 *v9;
  _BOOL4 v10;
  void *v11;
  id *v12;
  id v13;
  void *v14;
  id *v15;
  id v16;
  void *v17;
  id *v18;
  id v19;
  uint64_t v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  void *v26;
  os_log_type_t v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  os_log_type_t v35;
  _QWORD v36[4];
  id v37;
  _BYTE *v38;
  _QWORD v39[4];
  id v40;
  _BYTE *v41;
  char v42;
  os_log_type_t v43;
  _BYTE buf[24];
  char v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
    v23 = (char *)_os_log_send_and_compose_impl();

    v43 = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v23, &v43, &v42))
      goto LABEL_48;
    if (v43 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = v43;
      if (os_log_type_enabled(v24, v43))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v29 = v43;
      v30 = os_log_type_enabled(v24, v43);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_48:
        if (!v23)
        {
LABEL_50:
          v20 = 0;
          goto LABEL_14;
        }
LABEL_49:
        free(v23);
        goto LABEL_50;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
        _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v34 = v43;
      if (os_log_type_enabled(v24, v43))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
        _os_log_impl(&dword_182FBE000, v24, v34, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (!v4)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
    v23 = (char *)_os_log_send_and_compose_impl();

    v43 = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v23, &v43, &v42))
      goto LABEL_48;
    if (v43 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v27 = v43;
      if (os_log_type_enabled(v24, v43))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
        _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v42)
    {
      v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v32 = v43;
      v33 = os_log_type_enabled(v24, v43);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v31;
          _os_log_impl(&dword_182FBE000, v24, v32, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        if (!v23)
          goto LABEL_50;
        goto LABEL_49;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
        _os_log_impl(&dword_182FBE000, v24, v32, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v35 = v43;
      if (os_log_type_enabled(v24, v43))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_stack_includes_protocol";
        _os_log_impl(&dword_182FBE000, v24, v35, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_47;
  }
  v6 = (unsigned __int8 *)v3[1];
  v7 = MEMORY[0x1E0C809B0];
  if (!v6)
    goto LABEL_53;
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v45 = 0;
  v39[0] = MEMORY[0x1E0C809B0];
  v39[1] = 3221225472;
  v39[2] = __nw_protocol_stack_includes_protocol_block_invoke;
  v39[3] = &unk_1E14AB5F0;
  v40 = v4;
  v41 = buf;
  nw_array_apply(v6, (uint64_t)v39);
  v8 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) == 0;

  _Block_object_dispose(buf, 8);
  if (v8)
  {
LABEL_53:
    v9 = (unsigned __int8 *)v3[2];
    if (!v9)
      goto LABEL_54;
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v45 = 0;
    v36[0] = v7;
    v36[1] = 3221225472;
    v36[2] = __nw_protocol_stack_includes_protocol_block_invoke_2;
    v36[3] = &unk_1E14AB5F0;
    v37 = v5;
    v38 = buf;
    nw_array_apply(v9, (uint64_t)v36);
    v10 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) == 0;

    _Block_object_dispose(buf, 8);
    if (v10)
    {
LABEL_54:
      v11 = (void *)v3[3];
      if (!v11
        || (v12 = v11,
            v13 = v12[1],
            v12,
            LOBYTE(v12) = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v13),
            v13,
            (v12 & 1) == 0))
      {
        v14 = (void *)v3[4];
        if (!v14
          || (v15 = v14,
              v16 = v15[1],
              v15,
              LOBYTE(v15) = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v16),
              v16,
              (v15 & 1) == 0))
        {
          v17 = (void *)v3[6];
          if (!v17)
            goto LABEL_50;
          v18 = v17;
          v19 = v18[1];

          LOBYTE(v18) = nw_protocol_definition_is_equal_unsafe((uint64_t)v5, (uint64_t)v19);
          if ((v18 & 1) == 0)
            goto LABEL_50;
        }
      }
    }
  }
  v20 = 1;
LABEL_14:

  return v20;
}

void sub_18304F0E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_context_get_private_redacted(void *a1)
{
  id v1;
  void *v2;
  int v3;
  int v4;
  _BOOL8 v5;

  v1 = a1;
  v2 = v1;
  if (!v1)
    goto LABEL_5;
  v3 = *((_DWORD *)v1 + 31);
  if (v3 != 1)
  {
    if (v3 == 3)
    {
      if (nwlog_get_sensitive_redacted::onceToken != -1)
        dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
      v4 = nwlog_get_sensitive_redacted::sensitiveRedacted;
      goto LABEL_12;
    }
    if (v3 != 2)
    {
      v5 = 1;
      goto LABEL_13;
    }
LABEL_5:
    if (nwlog_get_private_redacted::onceToken[0] != -1)
      dispatch_once(nwlog_get_private_redacted::onceToken, &__block_literal_global_57);
    v4 = nwlog_get_private_redacted::privateRedacted;
LABEL_12:
    v5 = v4 != 0;
    goto LABEL_13;
  }
  v5 = 0;
LABEL_13:

  return v5;
}

BOOL nw_parameters_get_prohibit_cellular(void *a1)
{
  id v1;
  void *v2;
  void **v3;
  void *v4;
  _BOOL8 v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD applier[5];
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_cellular";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v7, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_cellular";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_cellular";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_cellular";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_get_prohibit_cellular";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v7)
      free(v7);
    goto LABEL_23;
  }
  v3 = *(void ***)(*((_QWORD *)v1 + 13) + 176);
  if (!v3 || (v4 = *v3) == 0)
  {
LABEL_23:
    v5 = 0;
    goto LABEL_24;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v19 = 0;
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = __nw_parameters_get_prohibit_cellular_block_invoke;
  applier[3] = &unk_1E14A0900;
  applier[4] = buf;
  xpc_array_apply(v4, applier);
  v5 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
  _Block_object_dispose(buf, 8);
LABEL_24:

  return v5;
}

void sub_18304F4DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_prohibit_privacy_proxy(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  pid_t v4;
  uint64_t v5;
  int v6;
  uint64_t v8;
  int v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_parameters_get_prohibit_privacy_proxy";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_parameters_get_prohibit_privacy_proxy";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_parameters_get_prohibit_privacy_proxy";
            v23 = 2082;
            v24 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_parameters_get_prohibit_privacy_proxy";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_parameters_get_prohibit_privacy_proxy";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_30:
    if (v12)
      free(v12);
    goto LABEL_9;
  }
  v3 = v1;
  if (uuid_is_null((const unsigned __int8 *)(v3[13] + 24)))
  {

  }
  else
  {
    v9 = uuid_compare((const unsigned __int8 *)(v3[13] + 24), (const unsigned __int8 *)(v3[13] + 8));

    if (v9)
    {
      v5 = v3[13];
LABEL_12:
      v8 = (*(unsigned __int16 *)(v5 + 100) >> 7) & 1;
      goto LABEL_13;
    }
  }
  v4 = getpid();
  v5 = v3[13];
  v6 = *(_DWORD *)(v5 + 64);
  if (v6 >= 1 && v6 != v4)
    goto LABEL_12;
LABEL_9:
  v8 = 0;
LABEL_13:

  return v8;
}

void sub_18304F7EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

char *nw_endpoint_get_url_hash(void *a1)
{
  id v1;
  void *v2;
  id v3;
  int v4;
  char *v5;
  char *v6;
  os_unfair_lock_s *v7;
  id v8;
  id v9;
  int v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  id v14;
  int v15;
  char *v16;
  char *v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  id v21;
  int v22;
  os_log_type_t v23;
  id v24;
  int v25;
  id v27;
  int v28;
  void *v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  uint64_t v37;
  _QWORD v38[4];
  os_unfair_lock_s *v39;
  _BYTE *v40;
  char v41;
  os_log_type_t type;
  _BYTE buf[32];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
    v30 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v30, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v41)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v31, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_47;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
          _os_log_impl(&dword_182FBE000, v31, v34, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
          _os_log_impl(&dword_182FBE000, v31, v36, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_47:
    if (!v30)
      goto LABEL_14;
    v16 = (char *)v30;
    goto LABEL_13;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    v9 = v3;
    v10 = objc_msgSend(v9, "type");

    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v10;
    LODWORD(v37) = 18;
    v11 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v11, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          v14 = v9;
          v15 = objc_msgSend(v14, "type", buf, v37);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v41)
      {
        v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v19 = type;
        v20 = os_log_type_enabled(v12, type);
        if (v18)
        {
          if (v20)
          {
            v21 = v9;
            v22 = objc_msgSend(v21, "type", buf, v37);

            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v22;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v18;
            _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v18);
          if (!v11)
            goto LABEL_14;
LABEL_12:
          v16 = (char *)v11;
LABEL_13:
          free(v16);
          goto LABEL_14;
        }
        if (v20)
        {
          v27 = v9;
          v28 = objc_msgSend(v27, "type", buf, v37);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v28;
          _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v12, type))
        {
          v24 = v9;
          v25 = objc_msgSend(v24, "type", buf, v37);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_get_url_hash";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v25;
          _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v11)
    {
LABEL_14:
      v17 = 0;
      goto LABEL_27;
    }
    goto LABEL_12;
  }
  v5 = (char *)v3;
  v6 = v5;
  if (!v5[288])
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    *(_QWORD *)&buf[24] = 0;
    *(_QWORD *)&buf[24] = nw_endpoint_get_sanitized_url(v5);
    if (*(_QWORD *)(*(_QWORD *)&buf[8] + 24))
    {
      v38[0] = MEMORY[0x1E0C809B0];
      v38[1] = 3221225472;
      v38[2] = __nw_endpoint_get_url_hash_block_invoke;
      v38[3] = &unk_1E14ACE40;
      v39 = v6;
      v40 = buf;
      v7 = v39 + 75;
      os_unfair_lock_lock(v39 + 75);
      __nw_endpoint_get_url_hash_block_invoke((_BOOL8)v38);
      os_unfair_lock_unlock(v7);

    }
    else
    {
      strcpy(v6 + 288, "<null>");
    }
    _Block_object_dispose(buf, 8);
  }

  v17 = v6 + 288;
LABEL_27:

  return v17;
}

void sub_18304FEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_sanitized_url(void *a1)
{
  id v1;
  void *v2;
  id v3;
  int v4;
  _QWORD *v5;
  void *v6;
  uint64_t v7;
  os_unfair_lock_s *v8;
  NSObject *v9;
  uint64_t v10;
  id v11;
  id v12;
  int v13;
  const char *v14;
  NSObject *v15;
  os_log_type_t v16;
  id v17;
  int v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  id v22;
  int v23;
  os_log_type_t v24;
  id v25;
  int v26;
  id v27;
  int v28;
  char *v29;
  void *v31;
  const char *v32;
  NSObject *v33;
  os_log_type_t v34;
  char *backtrace_string;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  uint64_t v39;
  _QWORD v40[5];
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  _WORD v46[17];

  *(_QWORD *)&v46[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v31 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_endpoint_get_sanitized_url";
    v32 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v32, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_endpoint_get_sanitized_url";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v41)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        v37 = os_log_type_enabled(v33, type);
        if (backtrace_string)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            v44 = "nw_endpoint_get_sanitized_url";
            v45 = 2082;
            *(_QWORD *)v46 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v33, v36, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_endpoint_get_sanitized_url";
          _os_log_impl(&dword_182FBE000, v33, v36, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v33 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_endpoint_get_sanitized_url";
          _os_log_impl(&dword_182FBE000, v33, v38, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_50:
    if (!v32)
      goto LABEL_32;
    v29 = (char *)v32;
    goto LABEL_31;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v12 = v3;
    v13 = objc_msgSend(v12, "type");

    *(_DWORD *)buf = 136446466;
    v44 = "nw_endpoint_get_sanitized_url";
    v45 = 1024;
    *(_DWORD *)v46 = v13;
    LODWORD(v39) = 18;
    v14 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v14, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          v17 = v12;
          v18 = objc_msgSend(v17, "type", buf, v39);

          *(_DWORD *)buf = 136446466;
          v44 = "nw_endpoint_get_sanitized_url";
          v45 = 1024;
          *(_DWORD *)v46 = v18;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v41)
      {
        v19 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v20 = type;
        v21 = os_log_type_enabled(v15, type);
        if (v19)
        {
          if (v21)
          {
            v22 = v12;
            v23 = objc_msgSend(v22, "type", buf, v39);

            *(_DWORD *)buf = 136446722;
            v44 = "nw_endpoint_get_sanitized_url";
            v45 = 1024;
            *(_DWORD *)v46 = v23;
            v46[2] = 2082;
            *(_QWORD *)&v46[3] = v19;
            _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v19);
          if (!v14)
            goto LABEL_32;
LABEL_30:
          v29 = (char *)v14;
LABEL_31:
          free(v29);
          goto LABEL_32;
        }
        if (v21)
        {
          v27 = v12;
          v28 = objc_msgSend(v27, "type", buf, v39);

          *(_DWORD *)buf = 136446466;
          v44 = "nw_endpoint_get_sanitized_url";
          v45 = 1024;
          *(_DWORD *)v46 = v28;
          _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          v25 = v12;
          v26 = objc_msgSend(v25, "type", buf, v39);

          *(_DWORD *)buf = 136446466;
          v44 = "nw_endpoint_get_sanitized_url";
          v45 = 1024;
          *(_DWORD *)v46 = v26;
          _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v14)
    {
LABEL_32:
      v7 = 0;
      goto LABEL_33;
    }
    goto LABEL_30;
  }
  v5 = v3;
  v6 = v5;
  v7 = v5[35];
  if (!v7)
  {
    if (v5[29])
    {
      v40[0] = MEMORY[0x1E0C809B0];
      v40[1] = 3221225472;
      v40[2] = __nw_endpoint_get_sanitized_url_block_invoke;
      v40[3] = &unk_1E14ACFD0;
      v8 = v5;
      v40[4] = v8;
      os_unfair_lock_lock(v8 + 75);
      __nw_endpoint_get_sanitized_url_block_invoke((uint64_t)v40);
      os_unfair_lock_unlock(v8 + 75);
      if (!*(_QWORD *)&v8[70]._os_unfair_lock_opaque)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
        {
          v10 = *(_QWORD *)&v8[62]._os_unfair_lock_opaque;
          *(_DWORD *)buf = 136446467;
          v44 = "nw_endpoint_get_sanitized_url";
          v45 = 2085;
          *(_QWORD *)v46 = v10;
          _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s Failed to sanitize url: %{sensitive}s", buf, 0x16u);
        }

      }
      v7 = *(_QWORD *)&v8[70]._os_unfair_lock_opaque;
    }
    else
    {
      v7 = 0;
    }
  }

LABEL_33:
  return v7;
}

void sub_1830505FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void __nw_parameters_has_proxy_protocol_in_stack_block_invoke(uint64_t a1, nw_protocol_options_t options)
{
  nw_protocol_definition_t v3;

  v3 = nw_protocol_options_copy_definition(options);
  if (nw_protocol_definition_is_proxy(v3))
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;

}

BOOL nw_protocol_definition_is_proxy(void *a1)
{
  char *v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[184] < 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_definition_is_proxy";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_is_proxy";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_definition_is_proxy";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_is_proxy";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_definition_is_proxy";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_parameters_internal_iterate_protocol_stack_block_invoke_2(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  nw_protocol_definition_t v5;
  uint64_t v6;

  v4 = a3;
  v5 = nw_protocol_options_copy_definition(v4);
  v6 = (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

  return v6;
}

void sub_1830509AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL __nw_protocol_stack_includes_protocol_block_invoke_2(uint64_t a1, int a2, nw_protocol_options_t options)
{
  nw_protocol_definition_t v4;
  _BOOL4 is_equal_unsafe;
  _BOOL8 v6;

  v4 = nw_protocol_options_copy_definition(options);
  is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(*(_QWORD *)(a1 + 32), (uint64_t)v4);
  if (is_equal_unsafe)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 1;
  v6 = !is_equal_unsafe;

  return v6;
}

void sub_183050A14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_protocol_definition_t nw_protocol_options_copy_definition(nw_protocol_options_t options)
{
  nw_protocol_options_t v1;
  nw_protocol_options_t v2;
  NSObject *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = options;
  v2 = v1;
  if (v1)
  {
    v3 = v1[1].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_options_copy_definition";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_options_copy_definition";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_options_copy_definition";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL __nw_endpoint_get_url_hash_block_invoke(_BOOL8 result)
{
  char *v1;
  const char *v2;
  size_t v3;

  v1 = (char *)(*(_QWORD *)(result + 32) + 288);
  if (!*v1)
  {
    v2 = *(const char **)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24);
    v3 = strlen(v2);
    return __nwlog_salted_hash(v2, v3, v1);
  }
  return result;
}

BOOL ___ZL33nw_endpoint_flow_expected_to_joinP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flow_block_invoke(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  int v14;
  id v15;
  uint64_t v16;
  void *v17;
  char *identifier;
  int v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v33;
  id v34;
  void *v35;
  uint64_t registered_endpoint;
  id v37;
  const char *v38;
  NSObject *v39;
  const char *id_string;
  nw_endpoint_t v41;
  const char *logging_description;
  const char *v43;
  const char *v44;
  id v45;
  const char *v46;
  NSObject *v47;
  os_log_type_t v48;
  const char *v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  const char *v53;
  os_log_type_t v54;
  const char *v55;
  const char *v56;
  char *v57;
  _BOOL8 v58;
  void *v60;
  const char *v61;
  NSObject *v62;
  os_log_type_t v63;
  void *v64;
  os_log_type_t v65;
  char *backtrace_string;
  NSObject *v67;
  os_log_type_t v68;
  _BOOL4 v69;
  void *v70;
  os_log_type_t v71;
  void *v72;
  os_log_type_t v73;
  char *v74;
  os_log_type_t v75;
  _BOOL4 v76;
  os_log_type_t v77;
  _BOOL4 v78;
  os_log_type_t v79;
  _BOOL4 v80;
  os_log_type_t v81;
  os_log_type_t v82;
  os_log_type_t v83;
  os_log_type_t v84;
  NSObject *v85;
  const char *v86;
  const char *v87;
  nw_endpoint_t v88;
  const char *v89;
  id v90;
  void *v91;
  const char *v92;
  const char *v93;
  const char *v94;
  const char *v95;
  const char *v96;
  void *v97;
  void *v98;
  void *v99;
  void *v100;
  id v101;
  char v102;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v105;
  __int16 v106;
  void *v107;
  __int16 v108;
  const char *v109;
  __int16 v110;
  void *v111;
  __int16 v112;
  const char *v113;
  __int16 v114;
  const char *v115;
  __int16 v116;
  id v117;
  __int16 v118;
  void *v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122;

  v122 = *MEMORY[0x1E0C80C00];
  v7 = a3;
  v8 = a4;
  v98 = v7;
  v99 = v8;
  if (nw_protocol_definition_is_proxy(v7))
  {
    if (nw_protocol_options_proxy_endpoint_should_override_stack(v8))
      v9 = nw_protocol_options_copy_proxy_endpoint_for_stack(v8);
    else
      v9 = nw_endpoint_copy_without_proxy_parent(*(void **)(a1 + 32));
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v11 = *(void **)(v10 + 40);
    *(_QWORD *)(v10 + 40) = v9;

    v12 = nw_endpoint_handler_copy_context(*(void **)(a1 + 40));
    v13 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24))
      v14 = 1;
    else
      v14 = nw_parameters_get_use_enhanced_privacy_mode(*(void **)(a1 + 48)) ^ 1;
    v15 = nw_context_copy_registered_endpoint_internal(v12, v13, v14);
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8);
    v17 = *(void **)(v16 + 40);
    *(_QWORD *)(v16 + 40) = v15;

    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24) = 1;
    *(_BYTE *)(*(_QWORD *)(a1 + 56) + 35) |= 0x40u;

  }
  identifier = nw_protocol_definition_get_identifier(v7);
  v19 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 24);
  v20 = *(void **)(a1 + 32);
  v21 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
  v22 = *(void **)(a1 + 48);
  v23 = *(id *)(a1 + 40);
  v101 = v20;
  v24 = v21;
  v25 = v22;
  v100 = v24;
  v97 = v23;
  if (!v23)
  {
    __nwlog_obj();
    v60 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v105 = "nw_endpoint_flow_find_protocol_to_join";
    v61 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (!__nwlog_fault(v61, &type, &v102))
      goto LABEL_155;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v63 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_137;
    }
    if (!v102)
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v81 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v62, v81, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_137;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v67 = objc_claimAutoreleasedReturnValue();
    v68 = type;
    v69 = os_log_type_enabled(v67, type);
    if (backtrace_string)
    {
      if (v69)
      {
        *(_DWORD *)buf = 136446466;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        v106 = 2082;
        v107 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
LABEL_155:
      if (!v61)
        goto LABEL_80;
      goto LABEL_156;
    }
    if (v69)
    {
      *(_DWORD *)buf = 136446210;
      v105 = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_182FBE000, v67, v68, "%{public}s called with null handler, no backtrace", buf, 0xCu);
    }
    goto LABEL_154;
  }
  v26 = (unsigned int *)v23;
  v27 = v26[29];

  if ((_DWORD)v27 != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v37 = (id)gLogObj;
    if (v27 > 5)
      v38 = "unknown-mode";
    else
      v38 = off_1E149FC18[v27];
    *(_DWORD *)buf = 136446722;
    v105 = "nw_endpoint_flow_find_protocol_to_join";
    v106 = 2082;
    v107 = (void *)v38;
    v108 = 2082;
    v109 = "flow";
    v46 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (__nwlog_fault(v46, &type, &v102))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v47 = (id)gLogObj;
        v48 = type;
        if (os_log_type_enabled(v47, type))
        {
          if (v27 > 5)
            v49 = "unknown-mode";
          else
            v49 = off_1E149FC18[v27];
          *(_DWORD *)buf = 136446722;
          v105 = "nw_endpoint_flow_find_protocol_to_join";
          v106 = 2082;
          v107 = (void *)v49;
          v108 = 2082;
          v109 = "flow";
          _os_log_impl(&dword_182FBE000, v47, v48, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v102)
      {
        v50 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v47 = (id)gLogObj;
        v51 = type;
        v52 = os_log_type_enabled(v47, type);
        if (v50)
        {
          if (v52)
          {
            if (v27 > 5)
              v53 = "unknown-mode";
            else
              v53 = off_1E149FC18[v27];
            *(_DWORD *)buf = 136446978;
            v105 = "nw_endpoint_flow_find_protocol_to_join";
            v106 = 2082;
            v107 = (void *)v53;
            v108 = 2082;
            v109 = "flow";
            v110 = 2082;
            v111 = v50;
            _os_log_impl(&dword_182FBE000, v47, v51, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v50);
          if (!v46)
            goto LABEL_80;
LABEL_78:
          v57 = (char *)v46;
LABEL_79:
          free(v57);
          goto LABEL_80;
        }
        if (v52)
        {
          if (v27 > 5)
            v56 = "unknown-mode";
          else
            v56 = off_1E149FC18[v27];
          *(_DWORD *)buf = 136446722;
          v105 = "nw_endpoint_flow_find_protocol_to_join";
          v106 = 2082;
          v107 = (void *)v56;
          v108 = 2082;
          v109 = "flow";
          _os_log_impl(&dword_182FBE000, v47, v51, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v47 = (id)gLogObj;
        v54 = type;
        if (os_log_type_enabled(v47, type))
        {
          if (v27 > 5)
            v55 = "unknown-mode";
          else
            v55 = off_1E149FC18[v27];
          *(_DWORD *)buf = 136446722;
          v105 = "nw_endpoint_flow_find_protocol_to_join";
          v106 = 2082;
          v107 = (void *)v55;
          v108 = 2082;
          v109 = "flow";
          _os_log_impl(&dword_182FBE000, v47, v54, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v46)
    {
LABEL_80:
      registered_endpoint = 0;
      goto LABEL_81;
    }
    goto LABEL_78;
  }
  if (!identifier)
  {
    __nwlog_obj();
    v64 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v105 = "nw_endpoint_flow_find_protocol_to_join";
    v61 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (!__nwlog_fault(v61, &type, &v102))
      goto LABEL_155;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v65 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v62, v65, "%{public}s called with null identifier", buf, 0xCu);
      }
      goto LABEL_137;
    }
    if (!v102)
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v82 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v62, v82, "%{public}s called with null identifier, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_137;
    }
    v74 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v67 = objc_claimAutoreleasedReturnValue();
    v75 = type;
    v76 = os_log_type_enabled(v67, type);
    if (v74)
    {
      if (v76)
      {
        *(_DWORD *)buf = 136446466;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        v106 = 2082;
        v107 = v74;
        _os_log_impl(&dword_182FBE000, v67, v75, "%{public}s called with null identifier, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_121:

      free(v74);
      if (!v61)
        goto LABEL_80;
LABEL_156:
      v57 = (char *)v61;
      goto LABEL_79;
    }
    if (v76)
    {
      *(_DWORD *)buf = 136446210;
      v105 = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_182FBE000, v67, v75, "%{public}s called with null identifier, no backtrace", buf, 0xCu);
    }
LABEL_154:

    goto LABEL_155;
  }
  if (!v24)
  {
    __nwlog_obj();
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v105 = "nw_endpoint_flow_find_protocol_to_join";
    v61 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (!__nwlog_fault(v61, &type, &v102))
      goto LABEL_155;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v71 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v62, v71, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_137;
    }
    if (!v102)
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v83 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v62, v83, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_137;
    }
    v74 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v67 = objc_claimAutoreleasedReturnValue();
    v77 = type;
    v78 = os_log_type_enabled(v67, type);
    if (v74)
    {
      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        v106 = 2082;
        v107 = v74;
        _os_log_impl(&dword_182FBE000, v67, v77, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_121;
    }
    if (v78)
    {
      *(_DWORD *)buf = 136446210;
      v105 = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_182FBE000, v67, v77, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
    }
    goto LABEL_154;
  }
  if (!v25)
  {
    __nwlog_obj();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v105 = "nw_endpoint_flow_find_protocol_to_join";
    v61 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v102 = 0;
    if (!__nwlog_fault(v61, &type, &v102))
      goto LABEL_155;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v73 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v62, v73, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_137:

      goto LABEL_155;
    }
    if (!v102)
    {
      __nwlog_obj();
      v62 = objc_claimAutoreleasedReturnValue();
      v84 = type;
      if (os_log_type_enabled(v62, type))
      {
        *(_DWORD *)buf = 136446210;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        _os_log_impl(&dword_182FBE000, v62, v84, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_137;
    }
    v74 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v67 = objc_claimAutoreleasedReturnValue();
    v79 = type;
    v80 = os_log_type_enabled(v67, type);
    if (v74)
    {
      if (v80)
      {
        *(_DWORD *)buf = 136446466;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        v106 = 2082;
        v107 = v74;
        _os_log_impl(&dword_182FBE000, v67, v79, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_121;
    }
    if (v80)
    {
      *(_DWORD *)buf = 136446210;
      v105 = "nw_endpoint_flow_find_protocol_to_join";
      _os_log_impl(&dword_182FBE000, v67, v79, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
    }
    goto LABEL_154;
  }
  os_unfair_lock_lock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  v28 = &g_registration_list;
  do
  {
    v28 = (uint64_t *)*v28;
    if (!v28)
    {
      os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
      goto LABEL_38;
    }
  }
  while (*(_QWORD *)identifier != v28[4]
       || *((_QWORD *)identifier + 1) != v28[5]
       || *((_QWORD *)identifier + 2) != v28[6]
       || *((_QWORD *)identifier + 3) != v28[7]
       || *((_QWORD *)identifier + 4) != v28[8]);
  v33 = v28[13];
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_protocol_registrar_lock);
  if (!v33)
  {
LABEL_38:
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v26);
        v95 = nw_endpoint_handler_dry_run_string(v26);
        v41 = nw_endpoint_handler_copy_endpoint(v26);
        logging_description = nw_endpoint_get_logging_description(v41);
        v43 = nw_endpoint_handler_state_string(v26);
        v44 = nw_endpoint_handler_mode_string(v26);
        v45 = nw_endpoint_handler_copy_current_path(v26);
        *(_DWORD *)buf = 136448258;
        v105 = "nw_endpoint_flow_find_protocol_to_join";
        v106 = 2082;
        v107 = (void *)id_string;
        v108 = 2082;
        v109 = v95;
        v110 = 2082;
        v111 = (void *)logging_description;
        v112 = 2082;
        v113 = v43;
        v114 = 2082;
        v115 = v44;
        v116 = 2114;
        v117 = v45;
        v118 = 2080;
        v119 = identifier;
        v120 = 2048;
        v121 = (uint64_t)identifier;
        _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] protocol %s (%p) does not have accept function, cannot search for protocol to join", buf, 0x5Cu);

      }
    }
    goto LABEL_80;
  }
  v34 = v24;
  v35 = v34;
  while (1)
  {
    registered_endpoint = nw_protocol_instance_registrar_search_for_instance_to_join((uint64_t)identifier, a2, v101, v35, v34, v25, v19 != 0);
    if (registered_endpoint)
      break;
    registered_endpoint = (uint64_t)nw_protocol_instance_registrar_copy_next_registered_endpoint(v35, v19 != 0);

    v35 = (void *)registered_endpoint;
    if (!registered_endpoint)
      goto LABEL_60;
  }
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v26) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v85 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
    {
      v86 = nw_endpoint_handler_get_id_string(v26);
      v87 = nw_endpoint_handler_dry_run_string(v26);
      v88 = nw_endpoint_handler_copy_endpoint(v26);
      v96 = nw_endpoint_get_logging_description(v88);
      v94 = nw_endpoint_handler_state_string(v26);
      v89 = nw_endpoint_handler_mode_string(v26);
      v90 = nw_endpoint_handler_copy_current_path(v26);
      v91 = v90;
      v105 = "nw_endpoint_flow_find_protocol_to_join";
      v92 = "invalid";
      v93 = *(const char **)(registered_endpoint + 16);
      *(_DWORD *)buf = 136448258;
      if (v93)
        v92 = v93;
      v106 = 2082;
      v107 = (void *)v86;
      v108 = 2082;
      v109 = v87;
      v110 = 2082;
      v111 = (void *)v96;
      v112 = 2082;
      v113 = v94;
      v114 = 2082;
      v115 = v89;
      v116 = 2114;
      v117 = v90;
      v118 = 2080;
      v119 = (void *)v92;
      v120 = 2048;
      v121 = registered_endpoint;
      _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] returning protocol to join %s (%p)", buf, 0x5Cu);

    }
  }
LABEL_60:

LABEL_81:
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) = registered_endpoint;
  v58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) == 0;

  return v58;
}

void sub_183051E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void nw_protocol_socket_notify(uint64_t a1)
{
  char *v1;
  NSObject *v2;
  os_log_type_t v3;
  const char *v4;
  char *backtrace_string;
  _BOOL4 v6;
  char *v7;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v12 = "nw_protocol_socket_notify";
    v1 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v9 = 0;
    if (!__nwlog_fault(v1, &type, &v9))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v2 = __nwlog_obj();
      v3 = type;
      if (!os_log_type_enabled(v2, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v12 = "nw_protocol_socket_notify";
      v4 = "%{public}s called with null protocol";
    }
    else
    {
      if (!v9)
      {
        v2 = __nwlog_obj();
        v3 = type;
        if (!os_log_type_enabled(v2, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v12 = "nw_protocol_socket_notify";
        v4 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v2 = __nwlog_obj();
      v3 = type;
      v6 = os_log_type_enabled(v2, type);
      if (backtrace_string)
      {
        if (v6)
        {
          *(_DWORD *)buf = 136446466;
          v12 = "nw_protocol_socket_notify";
          v13 = 2082;
          v14 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v2, v3, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (v1)
          goto LABEL_33;
        return;
      }
      if (!v6)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v12 = "nw_protocol_socket_notify";
      v4 = "%{public}s called with null protocol, no backtrace";
    }
LABEL_31:
    _os_log_impl(&dword_182FBE000, v2, v3, v4, buf, 0xCu);
    goto LABEL_32;
  }
  if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    return;
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v12 = "nw_protocol_socket_notify";
  v1 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v9 = 0;
  if (__nwlog_fault(v1, &type, &v9))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v2 = __nwlog_obj();
      v3 = type;
      if (!os_log_type_enabled(v2, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v12 = "nw_protocol_socket_notify";
      v4 = "%{public}s called with null socket_handler";
      goto LABEL_31;
    }
    if (!v9)
    {
      v2 = __nwlog_obj();
      v3 = type;
      if (!os_log_type_enabled(v2, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v12 = "nw_protocol_socket_notify";
      v4 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_31;
    }
    v7 = (char *)__nw_create_backtrace_string();
    v2 = __nwlog_obj();
    v3 = type;
    v8 = os_log_type_enabled(v2, type);
    if (!v7)
    {
      if (!v8)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v12 = "nw_protocol_socket_notify";
      v4 = "%{public}s called with null socket_handler, no backtrace";
      goto LABEL_31;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v12 = "nw_protocol_socket_notify";
      v13 = 2082;
      v14 = v7;
      _os_log_impl(&dword_182FBE000, v2, v3, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v7);
  }
LABEL_32:
  if (v1)
LABEL_33:
    free(v1);
}

uint64_t nw_frame_check_validity(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v12 = "__nw_frame_check_validity";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v9 = 0;
    if (__nwlog_fault(v3, &type, &v9))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v12 = "__nw_frame_check_validity";
          v6 = "%{public}s called with null frame";
LABEL_18:
          _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
        }
      }
      else if (v9)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v4 = __nwlog_obj();
        v5 = type;
        v8 = os_log_type_enabled(v4, type);
        if (backtrace_string)
        {
          if (v8)
          {
            *(_DWORD *)buf = 136446466;
            v12 = "__nw_frame_check_validity";
            v13 = 2082;
            v14 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_19;
        }
        if (v8)
        {
          *(_DWORD *)buf = 136446210;
          v12 = "__nw_frame_check_validity";
          v6 = "%{public}s called with null frame, no backtrace";
          goto LABEL_18;
        }
      }
      else
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (os_log_type_enabled(v4, type))
        {
          *(_DWORD *)buf = 136446210;
          v12 = "__nw_frame_check_validity";
          v6 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_18;
        }
      }
    }
LABEL_19:
    if (v3)
      free(v3);
    return 0;
  }
  v1 = 1;
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0 && g_channel_check_validity)
    return g_channel_check_validity(a1, *(_QWORD *)(a1 + 88));
  return v1;
}

int64_t nw_settings_get_flow_report_denominator()
{
  int64_t v0;
  const char *v1;
  void *v2;
  Class Class;
  xpc_object_t value;
  void *v5;

  v0 = 500000;
  v1 = (const char *)nw_setting_flow_report_denominator;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    v2 = (void *)sCachedSettings;
    if (sCachedSettings)
    {
      Class = object_getClass((id)sCachedSettings);
      if (v1)
      {
        if (Class == (Class)MEMORY[0x1E0C812F8])
        {
          value = xpc_dictionary_get_value(v2, v1);
          if (value)
          {
            v5 = value;
            if (object_getClass(value) == (Class)MEMORY[0x1E0C81328])
              v0 = xpc_int64_get_value(v5);
          }
        }
      }
    }
    pthread_mutex_unlock(&sSettingsMutex);
  }
  return v0;
}

uint64_t NWConnection.ContentContext.__deallocating_deinit()
{
  NWConnection.ContentContext.deinit();
  return swift_deallocClassInstance();
}

uint64_t NWConnection.ContentContext.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  v1 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 56) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v2 = *(_QWORD *)(v1 + 56);
      swift_retain();
      swift_release();
      v1 = v2;
    }
    while (v2);
  }
  swift_release();
  return v0;
}

uint64_t nw_settings_get_flow_report_numerator()
{
  const char *v0;
  void *v1;
  Class Class;
  int64_t v3;
  xpc_object_t value;
  void *v5;

  v0 = (const char *)nw_setting_flow_report_numerator;
  networkd_settings_init();
  if (!sCachedSettings)
    return 1;
  pthread_mutex_lock(&sSettingsMutex);
  v1 = (void *)sCachedSettings;
  if (!sCachedSettings)
    goto LABEL_7;
  Class = object_getClass((id)sCachedSettings);
  v3 = 1;
  if (!v0 || Class != (Class)MEMORY[0x1E0C812F8])
    goto LABEL_8;
  value = xpc_dictionary_get_value(v1, v0);
  if (value && (v5 = value, object_getClass(value) == (Class)MEMORY[0x1E0C81328]))
    v3 = xpc_int64_get_value(v5);
  else
LABEL_7:
    v3 = 1;
LABEL_8:
  pthread_mutex_unlock(&sSettingsMutex);
  return v3;
}

BOOL nw_endpoint_resolver_create_child_parameters(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  id v2;
  id v3;
  _BOOL8 v4;
  _QWORD *v5;
  nw_endpoint_t v6;
  BOOL v7;
  _QWORD *v8;
  id v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  _BYTE buf[22];
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = nw_endpoint_handler_copy_current_path(v1);
  v3 = nw_endpoint_handler_copy_parameters(v1);
  v4 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v3, 0, 0);

  if (v4)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    if (nw_path_get_client_id(v2, buf))
      nw_parameters_set_parent_id_inner((NWConcrete_nw_parameters *)v4, buf, 0);
    v5 = (id)v4;
    *(_WORD *)(v5[13] + 108) |= 0x800u;

    v6 = nw_endpoint_handler_copy_endpoint(v1);
    if (v6)
    {
      v7 = v6[11].isa == 0;

      if (v7)
      {
LABEL_8:
        v8 = v5;
        goto LABEL_16;
      }
      v6 = v5;
      *(_WORD *)(v5[13] + 108) |= 0x4000u;
    }

    goto LABEL_8;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_resolver_create_child_parameters";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (!__nwlog_fault(v10, &type, &v18))
    goto LABEL_14;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v12 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_resolver_create_child_parameters";
      _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s nw_parameters_copy failed", buf, 0xCu);
    }
LABEL_13:

LABEL_14:
    if (!v10)
      goto LABEL_16;
LABEL_15:
    free(v10);
    goto LABEL_16;
  }
  if (!v18)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    v17 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_resolver_create_child_parameters";
      _os_log_impl(&dword_182FBE000, v11, v17, "%{public}s nw_parameters_copy failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_13;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  v15 = type;
  v16 = os_log_type_enabled(v11, type);
  if (!backtrace_string)
  {
    if (v16)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_endpoint_resolver_create_child_parameters";
      _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s nw_parameters_copy failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_13;
  }
  if (v16)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_endpoint_resolver_create_child_parameters";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s nw_parameters_copy failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v10)
    goto LABEL_15;
LABEL_16:

  return v4;
}

void sub_183052B10(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void nw_endpoint_handler_get_client_id(void *a1, unsigned __int8 *a2)
{
  void **v3;
  void **v4;
  void **v5;
  void **v6;
  void *v7;
  _QWORD *v8;
  uint64_t v9;
  void **v10;
  void **v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  nw_endpoint_t v17;
  const char *v18;
  _QWORD *v19;
  uint64_t v20;
  const char *v21;
  const char *v22;
  NSObject *v23;
  const char *v24;
  nw_endpoint_t v25;
  const char *v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  os_unfair_lock_s *v30;
  os_unfair_lock_s *v31;
  const char *v32;
  os_unfair_lock_s *v33;
  const char *v34;
  os_unfair_lock_s *v35;
  id *v36;
  id v37;
  os_unfair_lock_s *v38;
  id *v39;
  id v40;
  void *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  char *backtrace_string;
  os_log_type_t v46;
  _BOOL4 v47;
  const char *id_string;
  const char *v49;
  nw_endpoint_t v50;
  const char *logging_description;
  const char *v52;
  const char *v53;
  id v54;
  const char *v55;
  const char *v56;
  nw_endpoint_t v57;
  const char *v58;
  const char *v59;
  const char *v60;
  id v61;
  os_log_type_t v62;
  const char *v63;
  const char *v64;
  const char *v65;
  char v66;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v69;
  __int16 v70;
  void *v71;
  __int16 v72;
  const char *v73;
  __int16 v74;
  const char *v75;
  __int16 v76;
  const char *v77;
  __int16 v78;
  const char *v79;
  __int16 v80;
  id v81;
  __int16 v82;
  int v83;
  __int16 v84;
  unsigned __int8 *v85;
  uint64_t v86;

  v86 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v69 = "nw_endpoint_handler_get_client_id";
    v42 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v66 = 0;
    if (__nwlog_fault(v42, &type, &v66))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_endpoint_handler_get_client_id";
          _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v66)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v46 = type;
        v47 = os_log_type_enabled(v43, type);
        if (backtrace_string)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136446466;
            v69 = "nw_endpoint_handler_get_client_id";
            v70 = 2082;
            v71 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_81;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_endpoint_handler_get_client_id";
          _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v43 = objc_claimAutoreleasedReturnValue();
        v62 = type;
        if (os_log_type_enabled(v43, type))
        {
          *(_DWORD *)buf = 136446210;
          v69 = "nw_endpoint_handler_get_client_id";
          _os_log_impl(&dword_182FBE000, v43, v62, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_81:
    if (v42)
      free(v42);
    goto LABEL_52;
  }
  if (*((_DWORD *)v3 + 29) != 2 || !nw_endpoint_flow_should_not_use_path(v3[31]))
  {
    if (v4[7])
    {
      nw_path_get_client_id(v4[8], a2);
      goto LABEL_52;
    }
    v10 = v4;
    v11 = v10;
    v12 = v10[4];
    if (v12)
    {
      v13 = v12;
      v14 = v13[12];

      if ((v14 & 0x4000000000) != 0)
      {
        if ((nw_endpoint_handler_get_logging_disabled(v11) & 1) != 0)
          goto LABEL_52;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v15 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v11);
          v49 = nw_endpoint_handler_dry_run_string(v11);
          v50 = nw_endpoint_handler_copy_endpoint(v11);
          logging_description = nw_endpoint_get_logging_description(v50);
          v52 = nw_endpoint_handler_state_string(v11);
          v53 = nw_endpoint_handler_mode_string(v11);
          v54 = nw_endpoint_handler_copy_current_path(v11);
          *(_DWORD *)buf = 136447746;
          v69 = "nw_endpoint_handler_get_client_id";
          v70 = 2082;
          v71 = (void *)id_string;
          v72 = 2082;
          v73 = v49;
          v74 = 2082;
          v75 = logging_description;
          v76 = 2082;
          v77 = v52;
          v78 = 2082;
          v79 = v53;
          v80 = 2114;
          v81 = v54;
          _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to find association, no client ID", buf, 0x48u);

        }
        goto LABEL_44;
      }
      if ((*((_BYTE *)v11 + 268) & 0x20) != 0)
        goto LABEL_52;
    }
    else
    {

      if ((*((_BYTE *)v11 + 268) & 0x20) != 0)
        goto LABEL_52;
    }
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v15 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      if ((*((_BYTE *)v11 + 268) & 1) != 0)
        v16 = "dry-run ";
      else
        v16 = "";
      v17 = nw_endpoint_handler_copy_endpoint(v11);
      v18 = nw_endpoint_get_logging_description(v17);
      v19 = v11 + 21;
      v20 = *((unsigned int *)v11 + 30);
      v21 = v18;
      if (v20 > 5)
        v22 = "unknown-state";
      else
        v22 = off_1E149FC48[v20];
      v65 = v22;
      v30 = v11;
      v31 = v30;
      v32 = "path";
      switch(*((_DWORD *)v4 + 29))
      {
        case 0:
          break;
        case 1:
          v32 = "resolver";
          break;
        case 2:
          v32 = nw_endpoint_flow_mode_string(*(void **)&v30[62]._os_unfair_lock_opaque);
          break;
        case 3:
          v32 = "proxy";
          break;
        case 4:
          v32 = "fallback";
          break;
        case 5:
          v32 = "transform";
          break;
        default:
          v32 = "unknown-mode";
          break;
      }

      v35 = v31 + 28;
      v36 = v31;
      os_unfair_lock_lock(v31 + 28);
      v37 = v36[8];
      os_unfair_lock_unlock(v35);

      *(_DWORD *)buf = 136447746;
      v69 = "nw_endpoint_handler_get_client_id";
      v70 = 2082;
      v71 = v19;
      v72 = 2082;
      v73 = v16;
      v74 = 2082;
      v75 = v21;
      v76 = 2082;
      v77 = v65;
      v78 = 2082;
      v79 = v32;
      v80 = 2114;
      v81 = v37;
      _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to find association, no client ID", buf, 0x48u);

    }
LABEL_44:

    goto LABEL_52;
  }
  uuid_generate_random(a2);
  v5 = v4;
  v6 = v5;
  v7 = v5[4];
  if (v7)
  {
    v8 = v7;
    v9 = v8[12];

    if ((v9 & 0x4000000000) != 0)
    {
      if ((nw_endpoint_handler_get_logging_disabled(v6) & 1) != 0)
        goto LABEL_52;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v23 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
      {
        v55 = nw_endpoint_handler_get_id_string(v6);
        v56 = nw_endpoint_handler_dry_run_string(v6);
        v57 = nw_endpoint_handler_copy_endpoint(v6);
        v58 = nw_endpoint_get_logging_description(v57);
        v59 = nw_endpoint_handler_state_string(v6);
        v60 = nw_endpoint_handler_mode_string(v6);
        v61 = nw_endpoint_handler_copy_current_path(v6);
        *(_DWORD *)buf = 136448258;
        v69 = "nw_endpoint_handler_get_client_id";
        v70 = 2082;
        v71 = (void *)v55;
        v72 = 2082;
        v73 = v56;
        v74 = 2082;
        v75 = v58;
        v76 = 2082;
        v77 = v59;
        v78 = 2082;
        v79 = v60;
        v80 = 2114;
        v81 = v61;
        v82 = 1042;
        v83 = 16;
        v84 = 2098;
        v85 = a2;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Generated client ID %{public,uuid_t}.16P for non-path based handler", buf, 0x58u);

      }
      goto LABEL_51;
    }
    if ((*((_BYTE *)v6 + 268) & 0x20) != 0)
      goto LABEL_52;
LABEL_24:
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v23 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_INFO))
    {
      if ((*((_BYTE *)v6 + 268) & 1) != 0)
        v24 = "dry-run ";
      else
        v24 = "";
      v25 = nw_endpoint_handler_copy_endpoint(v6);
      v26 = nw_endpoint_get_logging_description(v25);
      v27 = v6 + 21;
      v28 = *((unsigned int *)v6 + 30);
      v64 = v26;
      if (v28 > 5)
        v29 = "unknown-state";
      else
        v29 = off_1E149FC48[v28];
      v63 = v29;
      v33 = v6;
      v34 = "path";
      switch(*((_DWORD *)v4 + 29))
      {
        case 0:
          break;
        case 1:
          v34 = "resolver";
          break;
        case 2:
          v34 = nw_endpoint_flow_mode_string(v4[31]);
          break;
        case 3:
          v34 = "proxy";
          break;
        case 4:
          v34 = "fallback";
          break;
        case 5:
          v34 = "transform";
          break;
        default:
          v34 = "unknown-mode";
          break;
      }

      v38 = v33 + 28;
      v39 = v33;
      os_unfair_lock_lock(v33 + 28);
      v40 = v39[8];
      os_unfair_lock_unlock(v38);

      *(_DWORD *)buf = 136448258;
      v69 = "nw_endpoint_handler_get_client_id";
      v70 = 2082;
      v71 = v27;
      v72 = 2082;
      v73 = v24;
      v74 = 2082;
      v75 = v64;
      v76 = 2082;
      v77 = v63;
      v78 = 2082;
      v79 = v34;
      v80 = 2114;
      v81 = v40;
      v82 = 1042;
      v83 = 16;
      v84 = 2098;
      v85 = a2;
      _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Generated client ID %{public,uuid_t}.16P for non-path based handler", buf, 0x58u);

    }
LABEL_51:

    goto LABEL_52;
  }

  if ((*((_BYTE *)v6 + 268) & 0x20) == 0)
    goto LABEL_24;
LABEL_52:

}

void sub_1830534A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_path_get_client_id(void *a1, _OWORD *a2)
{
  char *v3;
  void *v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(v3 + 120);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_path_get_client_id";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_get_client_id";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_path_get_client_id";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_get_client_id";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_get_client_id";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

  return v4 != 0;
}

BOOL nw_endpoint_proxy_handler_should_use_proxy(void *a1, void *a2, _BOOL8 a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  unsigned __int8 *v9;
  _BOOL8 v10;
  _QWORD *v11;
  __int16 v12;
  _QWORD *v13;
  __int16 v14;
  id v15;
  void *v16;
  _DWORD *v17;
  unsigned int v18;
  NSObject *v19;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  _QWORD v29[4];
  id v30;
  id v31;
  id v32;
  _BYTE *v33;
  char v34;
  os_log_type_t type;
  _BYTE buf[24];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = nw_endpoint_handler_copy_parameters(v5);
  if (v7)
  {
    v8 = nw_path_copy_endpoint(v6);
    if (nw_path_should_use_proxy(v6, a3))
    {
      v9 = (unsigned __int8 *)nw_parameters_copy_custom_proxy_configs(v7);
      if (!v9)
        v9 = (unsigned __int8 *)nw_path_copy_proxy_configs(v6);
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v37 = 0;
      v29[0] = MEMORY[0x1E0C809B0];
      v29[1] = 3221225472;
      v29[2] = __nw_endpoint_proxy_handler_should_use_proxy_block_invoke;
      v29[3] = &unk_1E149E0D8;
      v30 = v8;
      v31 = v7;
      v32 = v6;
      v33 = buf;
      nw_array_apply(v9, (uint64_t)v29);
      v10 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

      _Block_object_dispose(buf, 8);
      goto LABEL_17;
    }
    v11 = v7;
    v12 = *(_WORD *)(v11[13] + 108);

    if ((v12 & 0x1000) == 0)
    {
      v13 = v11;
      v14 = *(_WORD *)(v11[13] + 100);

      v10 = 0;
      if ((v14 & 0x40) == 0 || !v8)
        goto LABEL_17;
      if (nw_path_can_support_endpoint(v6, v8))
      {
        v15 = nw_path_copy_interface(v6);
        v16 = v15;
        if (v15)
        {
          v17 = v15;
          v18 = v17[24] & 0xFFFFFFFB;

          if (v18)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v19 = (id)gLogObj;
            if (os_log_type_enabled(v19, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_endpoint_proxy_handler_should_use_proxy";
              _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_INFO, "%{public}s Proxies not present, but required to fail closed", buf, 0xCu);
            }

            v10 = 1;
            goto LABEL_17;
          }
        }

      }
    }
    v10 = 0;
LABEL_17:

    goto LABEL_18;
  }
  __nwlog_obj();
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_proxy_handler_should_use_proxy";
  v22 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v34 = 0;
  if (__nwlog_fault(v22, &type, &v34))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_handler_should_use_proxy";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v34)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      v27 = os_log_type_enabled(v23, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_proxy_handler_should_use_proxy";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_handler_should_use_proxy";
        _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v23, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_proxy_handler_should_use_proxy";
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v22)
    free(v22);
  v10 = 0;
LABEL_18:

  return v10;
}

void sub_183053C34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_parameters(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[4];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_handler_copy_parameters";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_handler_copy_parameters";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_copy_parameters";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

id nw_path_copy_endpoint(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[3];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_copy_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_copy_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_should_use_proxy(void *a1, _BOOL8 a2)
{
  id v3;
  nw_endpoint_t *v4;
  nw_endpoint_type_t v6;
  const sockaddr *address;
  int sa_family;
  int v9;
  unsigned int v10;
  char v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (nw_endpoint_t *)v3;
  if (!v3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_path_should_use_proxy";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v13, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_path_should_use_proxy";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v20)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            v23 = "nw_path_should_use_proxy";
            v24 = 2082;
            v25 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_path_should_use_proxy";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v23 = "nw_path_should_use_proxy";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_50:
    if (v13)
      free(v13);
    goto LABEL_7;
  }
  if (!*((_QWORD *)v3 + 3))
    goto LABEL_7;
  if (*((_QWORD *)v3 + 30) || *((_QWORD *)v3 + 29) || a2)
  {
    if (!*((_QWORD *)v3 + 12)
      || (nw_parameters_get_proxy_applied(*((void **)v3 + 2)) & 1) != 0
      || nw_path_get_dns_service_id(v4, 0))
    {
      goto LABEL_7;
    }
    v6 = nw_endpoint_get_type(v4[3]);
    if (v6 - 2 < 2)
    {
LABEL_15:
      a2 = nw_interface_get_type(v4[12]) != nw_interface_type_loopback;
      goto LABEL_8;
    }
    if (v6 != nw_endpoint_type_address)
    {
      if (v6 == (nw_endpoint_type_url|nw_endpoint_type_host))
        goto LABEL_15;
      goto LABEL_7;
    }
    address = nw_endpoint_get_address(v4[3]);
    sa_family = address->sa_family;
    if (sa_family != 2)
    {
      if (sa_family == 30)
      {
        v9 = address->sa_data[6];
        if (v9 == 255)
        {
          v11 = address->sa_data[7];
          if ((v11 & 0xF0) != 0x30 && (v11 & 0xF) == 2)
            goto LABEL_7;
        }
        else if (v9 == 254 && (address->sa_data[7] & 0xC0) == 0x80)
        {
          goto LABEL_7;
        }
        if (*(_DWORD *)&address->sa_data[6]
          || *(_DWORD *)&address->sa_data[10]
          || *(_DWORD *)&address[1].sa_len
          || (*(_DWORD *)&address[1].sa_data[2] | 0x1000000) != 0x1000000)
        {
          goto LABEL_15;
        }
      }
LABEL_7:
      a2 = 0;
      goto LABEL_8;
    }
    v10 = bswap32(*(_DWORD *)&address->sa_data[2]);
    if (HIWORD(v10) == 43518)
      goto LABEL_7;
    a2 = 0;
    if (v10 >> 8 != 14680064
      && *(_DWORD *)&address->sa_data[2]
      && *(_DWORD *)&address->sa_data[2] != 127)
    {
      goto LABEL_15;
    }
  }
LABEL_8:

  return a2;
}

void sub_18305456C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_endpoint_flow_connected_path_change(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v4;
  NWConcrete_nw_endpoint_handler *v5;
  char v6;
  NSObject *v7;
  NWConcrete_nw_endpoint_handler *v8;
  NWConcrete_nw_endpoint_handler *v9;
  char v10;
  const char *v11;
  nw_endpoint_t v12;
  const char *logging_description;
  char *id_str;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  void **v19;
  void **v20;
  const char *v21;
  void **v22;
  id v23;
  NWConcrete_nw_endpoint_handler *v24;
  int state;
  _BYTE *v26;
  char v27;
  void *v28;
  int is_viable;
  int minimize_logging;
  char logging_disabled;
  NSObject *v32;
  const char *id_string;
  const char *v34;
  nw_endpoint_t v35;
  const char *v36;
  const char *v37;
  const char *v38;
  id v39;
  const char *v40;
  const char *v41;
  void *v42;
  int v43;
  char v44;
  NSObject *v45;
  const char *v46;
  const char *v47;
  const char *v48;
  const char *v49;
  const char *v50;
  id v51;
  const char *v52;
  _BOOL4 v53;
  void *v54;
  NWConcrete_nw_endpoint_handler *v55;
  _BOOL4 v56;
  char *v57;
  char *v58;
  _BOOL4 v59;
  const char *v60;
  nw_endpoint_t v61;
  const char *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  const char *v66;
  void **v67;
  void **v68;
  const char *v69;
  int v70;
  char v71;
  NSObject *v72;
  const char *v73;
  const char *v74;
  nw_endpoint_t v75;
  const char *v76;
  const char *v77;
  const char *v78;
  id v79;
  const char *v80;
  const char *v81;
  void **v82;
  id v83;
  char *v84;
  id v85;
  const char *v86;
  const char *v87;
  char v88;
  char v89;
  NWConcrete_nw_endpoint_handler *v90;
  OS_nw_association *v91;
  NWConcrete_nw_endpoint_handler *v92;
  void *v93;
  char *v94;
  NSObject *v95;
  os_log_type_t v96;
  char *backtrace_string;
  os_log_type_t v98;
  _BOOL4 v99;
  os_log_type_t v100;
  id v101;
  const char *v102;
  void *v103;
  NSObject *v104;
  os_log_type_t v105;
  const char *v106;
  char *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  const char *v110;
  os_log_type_t v111;
  const char *v112;
  const char *v113;
  const char *v114;
  nw_endpoint_t v115;
  const char *v116;
  const char *v117;
  const char *v118;
  id v119;
  const char *v120;
  const char *v121;
  const char *v122;
  nw_endpoint_t v123;
  const char *v124;
  const char *v125;
  const char *v126;
  id v127;
  const char *v128;
  const char *v129;
  nw_endpoint_t v130;
  const char *v131;
  const char *v132;
  const char *v133;
  id v134;
  const char *v135;
  NSObject *v136;
  nw_endpoint_t v137;
  const char *v138;
  const char *v139;
  const char *v140;
  id v141;
  const char *v142;
  const char *v143;
  const char *v144;
  const char *v145;
  const char *v146;
  NSObject *v147;
  const char *v148;
  NSObject *v149;
  os_log_t log;
  const char *loga;
  os_log_t logb;
  NSObject *logc;
  const char *logd;
  const char *loge;
  const char *logf;
  const char *logg;
  NWConcrete_nw_endpoint_mode_handler *v158;
  int v159;
  nw_endpoint_t v160;
  const char *v161;
  NWConcrete_nw_endpoint_handler *v162;
  char v163;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v166;
  __int16 v167;
  void *v168;
  __int16 v169;
  const char *v170;
  __int16 v171;
  void *v172;
  __int16 v173;
  void *v174;
  __int16 v175;
  const char *v176;
  __int16 v177;
  id v178;
  __int16 v179;
  const char *v180;
  __int16 v181;
  const char *v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v93 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v166 = "nw_endpoint_handler_get_mode";
    v94 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v163 = 0;
    if (__nwlog_fault(v94, &type, &v163))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v96 = type;
        if (os_log_type_enabled(v95, type))
        {
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v95, v96, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v163)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v98 = type;
        v99 = os_log_type_enabled(v95, type);
        if (backtrace_string)
        {
          if (v99)
          {
            *(_DWORD *)buf = 136446466;
            v166 = "nw_endpoint_handler_get_mode";
            v167 = 2082;
            v168 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v95, v98, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_119;
        }
        if (v99)
        {
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v95, v98, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v95 = objc_claimAutoreleasedReturnValue();
        v100 = type;
        if (os_log_type_enabled(v95, type))
        {
          *(_DWORD *)buf = 136446210;
          v166 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v95, v100, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_119:
    if (v94)
      free(v94);
    mode = 0;
    v2 = 0;
    goto LABEL_122;
  }
  mode = v1->mode;

  if (mode == 2)
  {
    v162 = v2;
    v4 = nw_endpoint_handler_copy_flow(v2);
    v5 = v2;
    v6 = *((_BYTE *)v5 + 268);

    if ((v6 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v7 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
      {
        v8 = v5;

        v9 = v8;
        v10 = *((_BYTE *)v5 + 268);

        if ((v10 & 1) != 0)
          v11 = "dry-run ";
        else
          v11 = "";
        v12 = nw_endpoint_handler_copy_endpoint(v9);
        logging_description = nw_endpoint_get_logging_description(v12);
        v158 = v4;
        id_str = v8->id_str;
        v15 = v9;
        v16 = v15;
        v17 = v15[30];
        if (v17 > 5)
          v18 = "unknown-state";
        else
          v18 = off_1E149FC48[v17];
        log = (os_log_t)v18;

        v19 = v16;
        v20 = v19;
        v21 = "path";
        switch(v162->mode)
        {
          case 0:
            break;
          case 1:
            v21 = "resolver";
            break;
          case 2:
            v21 = nw_endpoint_flow_mode_string(v19[31]);
            break;
          case 3:
            v21 = "proxy";
            break;
          case 4:
            v21 = "fallback";
            break;
          case 5:
            v21 = "transform";
            break;
          default:
            v21 = "unknown-mode";
            break;
        }

        v22 = v20;
        os_unfair_lock_lock((os_unfair_lock_t)v22 + 28);
        v23 = v22[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v22 + 28);

        *(_DWORD *)buf = 136447746;
        v166 = "nw_endpoint_flow_connected_path_change";
        v167 = 2082;
        v168 = id_str;
        v169 = 2082;
        v170 = v11;
        v171 = 2082;
        v172 = (void *)logging_description;
        v173 = 2082;
        v174 = log;
        v175 = 2082;
        v176 = v21;
        v177 = 2114;
        v178 = v23;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

        v4 = v158;
      }

    }
    v24 = v5;
    state = v24->state;

    if ((state & 0xFFFFFFFE) == 4)
      goto LABEL_102;
    if (nw_endpoint_flow_should_not_use_path(v4))
    {
      v26 = (char *)v4 + 33;
      v27 = *((_BYTE *)v4 + 33);
      if ((v27 & 2) != 0)
      {
LABEL_82:
        v88 = 1;
        if ((v27 & 4) != 0)
        {
LABEL_100:
          if ((v88 & 1) == 0)
          {
            v24->event = (nw_endpoint_handler_event_s)524291;
            nw_endpoint_handler_report(v24, 0, &v24->event.domain, 0);
          }
LABEL_102:

          v92 = v162;
          goto LABEL_156;
        }
LABEL_88:
        if (state == 3)
        {
          *v26 = v27 | 0xC;
          v90 = v24;
          v91 = v90->association;

          if (v91)
            nw_association_mark_flow_connected(v91, v90);
          v90->event = (nw_endpoint_handler_event_s)393219;
          nw_endpoint_handler_report(v90, 0, &v90->event.domain, 0);
          if (*((_QWORD *)v4 + 127))
            nw_endpoint_handler_register_adaptive_read_handler(v90);
          if (*((_QWORD *)v4 + 128))
            nw_endpoint_handler_register_adaptive_write_handler(v90);
          if (*((_QWORD *)v4 + 129))
            nw_endpoint_handler_register_keepalive_handler(v90);
          if (*((_QWORD *)v4 + 130))
            nw_endpoint_handler_register_metadata_changed_handler(v90);

        }
        goto LABEL_100;
      }
      goto LABEL_85;
    }
    if ((*((_BYTE *)v4 + 32) & 2) != 0)
      goto LABEL_47;
    if ((*((_BYTE *)v4 + 33) & 1) == 0)
    {
      v28 = (void *)*((_QWORD *)v4 + 117);
      if (v28)
      {
        is_viable = nw_endpoint_handler_is_viable(v28);
        minimize_logging = nw_endpoint_handler_get_minimize_logging(v24);
        logging_disabled = nw_endpoint_handler_get_logging_disabled(v24);
        v159 = is_viable;
        if (!minimize_logging)
        {
          if ((logging_disabled & 1) != 0)
            goto LABEL_81;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v32 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
          {
            id_string = nw_endpoint_handler_get_id_string(v24);
            loga = nw_endpoint_handler_dry_run_string(v24);
            v34 = id_string;
            v35 = nw_endpoint_handler_copy_endpoint(v24);
            v36 = nw_endpoint_get_logging_description(v35);
            v37 = nw_endpoint_handler_state_string(v24);
            v38 = nw_endpoint_handler_mode_string(v24);
            v39 = nw_endpoint_handler_copy_current_path(v24);
            v40 = nw_endpoint_handler_path_status_string(v24);
            *(_DWORD *)buf = 136448258;
            v166 = "nw_endpoint_flow_connected_path_change";
            v41 = "not ";
            v168 = (void *)v34;
            v167 = 2082;
            if (v159)
              v41 = "";
            v169 = 2082;
            v170 = loga;
            v171 = 2082;
            v172 = (void *)v36;
            v173 = 2082;
            v174 = (void *)v37;
            v175 = 2082;
            v176 = v38;
            v177 = 2114;
            v178 = v39;
            v179 = 2082;
            v180 = v40;
            v181 = 2082;
            v182 = v41;
            _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connected path is %{public}s, child is %{public}sviable", buf, 0x5Cu);

          }
          goto LABEL_80;
        }
        if ((logging_disabled & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v32 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            v122 = nw_endpoint_handler_get_id_string(v24);
            loge = nw_endpoint_handler_dry_run_string(v24);
            v123 = nw_endpoint_handler_copy_endpoint(v24);
            v124 = nw_endpoint_get_logging_description(v123);
            v125 = nw_endpoint_handler_state_string(v24);
            v126 = nw_endpoint_handler_mode_string(v24);
            v127 = nw_endpoint_handler_copy_current_path(v24);
            v128 = nw_endpoint_handler_path_status_string(v24);
            *(_DWORD *)buf = 136448258;
            v166 = "nw_endpoint_flow_connected_path_change";
            v129 = "not ";
            v168 = (void *)v122;
            v167 = 2082;
            if (v159)
              v129 = "";
            v169 = 2082;
            v170 = loge;
            v171 = 2082;
            v172 = (void *)v124;
            v173 = 2082;
            v174 = (void *)v125;
            v175 = 2082;
            v176 = v126;
            v177 = 2114;
            v178 = v127;
            v179 = 2082;
            v180 = v128;
            v181 = 2082;
            v182 = v129;
            _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connected path is %{public}s, child is %{public}sviable", buf, 0x5Cu);

          }
          goto LABEL_80;
        }
LABEL_81:
        v26 = (char *)v4 + 33;
        v27 = *((_BYTE *)v4 + 33);
        if (((v159 ^ ((v27 & 2) == 0)) & 1) != 0)
          goto LABEL_82;
        if (!v159)
        {
          v89 = 0;
LABEL_87:
          v88 = 0;
          v27 = v27 & 0xFD | v89;
          *v26 = v27;
          if ((v27 & 4) != 0)
            goto LABEL_100;
          goto LABEL_88;
        }
LABEL_85:
        v89 = 2;
        goto LABEL_87;
      }
LABEL_47:
      v54 = (void *)*((_QWORD *)v4 + 1);
      if (v54)
        LODWORD(v54) = nw_path_is_viable(v54);
      v159 = (int)v54;
      if (!nw_endpoint_handler_get_minimize_logging(v24))
      {
        v55 = v24;
        v56 = (*((_BYTE *)v5 + 268) & 0x20) == 0;

        if (!v56)
          goto LABEL_81;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v32 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_INFO))
        {
          v57 = v55;

          v58 = v57;
          v59 = (*((_BYTE *)v5 + 268) & 1) == 0;

          if (v59)
            v60 = "";
          else
            v60 = "dry-run ";
          v61 = nw_endpoint_handler_copy_endpoint(v58);
          v62 = nw_endpoint_get_logging_description(v61);
          v63 = v58;
          v64 = v63;
          v65 = v24->state;
          v148 = v62;
          logb = (os_log_t)v60;
          if (v65 > 5)
            v66 = "unknown-state";
          else
            v66 = off_1E149FC48[v65];
          v144 = v66;

          v67 = v64;
          v68 = v67;
          v69 = "path";
          switch(v162->mode)
          {
            case 0:
              break;
            case 1:
              v69 = "resolver";
              break;
            case 2:
              v69 = nw_endpoint_flow_mode_string(v67[31]);
              break;
            case 3:
              v69 = "proxy";
              break;
            case 4:
              v69 = "fallback";
              break;
            case 5:
              v69 = "transform";
              break;
            default:
              v69 = "unknown-mode";
              break;
          }

          v82 = v68;
          os_unfair_lock_lock((os_unfair_lock_t)v82 + 28);
          v83 = v82[8];
          os_unfair_lock_unlock((os_unfair_lock_t)v82 + 28);

          v84 = v57 + 168;
          v85 = v83;
          v86 = nw_endpoint_handler_path_status_string(v82);
          *(_DWORD *)buf = 136448258;
          v166 = "nw_endpoint_flow_connected_path_change";
          v87 = "not ";
          if (v159)
            v87 = "";
          v167 = 2082;
          v168 = v84;
          v169 = 2082;
          v170 = (const char *)logb;
          v171 = 2082;
          v172 = (void *)v148;
          v173 = 2082;
          v174 = (void *)v144;
          v175 = 2082;
          v176 = v69;
          v177 = 2114;
          v178 = v85;
          v179 = 2082;
          v180 = v86;
          v181 = 2082;
          v182 = v87;
          _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connected path is %{public}s, %{public}sviable", buf, 0x5Cu);

        }
        goto LABEL_80;
      }
      if ((nw_endpoint_handler_get_logging_disabled(v24) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v32 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
        {
          v114 = nw_endpoint_handler_get_id_string(v24);
          logd = nw_endpoint_handler_dry_run_string(v24);
          v115 = nw_endpoint_handler_copy_endpoint(v24);
          v116 = nw_endpoint_get_logging_description(v115);
          v117 = nw_endpoint_handler_state_string(v24);
          v118 = nw_endpoint_handler_mode_string(v24);
          v119 = nw_endpoint_handler_copy_current_path(v24);
          v120 = nw_endpoint_handler_path_status_string(v24);
          *(_DWORD *)buf = 136448258;
          v166 = "nw_endpoint_flow_connected_path_change";
          v121 = "not ";
          v168 = (void *)v114;
          v167 = 2082;
          if (v159)
            v121 = "";
          v169 = 2082;
          v170 = logd;
          v171 = 2082;
          v172 = (void *)v116;
          v173 = 2082;
          v174 = (void *)v117;
          v175 = 2082;
          v176 = v118;
          v177 = 2114;
          v178 = v119;
          v179 = 2082;
          v180 = v120;
          v181 = 2082;
          v182 = v121;
          _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connected path is %{public}s, %{public}sviable", buf, 0x5Cu);

        }
        goto LABEL_80;
      }
      goto LABEL_81;
    }
    v42 = (void *)*((_QWORD *)v4 + 104);
    if (!v42)
      goto LABEL_47;
    v32 = nw_path_flow_registration_force_update(v42);
    v43 = nw_endpoint_handler_get_minimize_logging(v24);
    v44 = nw_endpoint_handler_get_logging_disabled(v24);
    if (v43)
    {
      if ((v44 & 1) != 0)
      {
LABEL_45:
        if (v32)
          v53 = nw_path_is_viable(v32);
        else
          v53 = 0;
        v70 = nw_endpoint_handler_get_minimize_logging(v24);
        v71 = nw_endpoint_handler_get_logging_disabled(v24);
        v159 = v53;
        if (v70)
        {
          if ((v71 & 1) != 0)
            goto LABEL_80;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v136 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v136, OS_LOG_TYPE_DEBUG))
          {
            logg = nw_endpoint_handler_get_id_string(v24);
            v146 = nw_endpoint_handler_dry_run_string(v24);
            v137 = nw_endpoint_handler_copy_endpoint(v24);
            v138 = nw_endpoint_get_logging_description(v137);
            v139 = nw_endpoint_handler_state_string(v24);
            v140 = nw_endpoint_handler_mode_string(v24);
            v141 = nw_endpoint_handler_copy_current_path(v24);
            v142 = nw_endpoint_handler_path_status_string(v24);
            *(_DWORD *)buf = 136448258;
            v166 = "nw_endpoint_flow_connected_path_change";
            v143 = "not ";
            v168 = (void *)logg;
            v167 = 2082;
            if (v159)
              v143 = "";
            v169 = 2082;
            v170 = v146;
            v171 = 2082;
            v172 = (void *)v138;
            v173 = 2082;
            v174 = (void *)v139;
            v175 = 2082;
            v176 = v140;
            v177 = 2114;
            v178 = v141;
            v179 = 2082;
            v180 = v142;
            v181 = 2082;
            v182 = v143;
            _os_log_impl(&dword_182FBE000, v136, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connected path is %{public}s, join flow is %{public}sviable", buf, 0x5Cu);

            v72 = v136;
          }
          else
          {
            v72 = v136;
          }
        }
        else
        {
          if ((v71 & 1) != 0)
          {
LABEL_80:

            goto LABEL_81;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v72 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v72, OS_LOG_TYPE_INFO))
          {
            v73 = nw_endpoint_handler_get_id_string(v24);
            logc = v72;
            v145 = nw_endpoint_handler_dry_run_string(v24);
            v74 = v73;
            v75 = nw_endpoint_handler_copy_endpoint(v24);
            v76 = nw_endpoint_get_logging_description(v75);
            v77 = nw_endpoint_handler_state_string(v24);
            v78 = nw_endpoint_handler_mode_string(v24);
            v79 = nw_endpoint_handler_copy_current_path(v24);
            v80 = nw_endpoint_handler_path_status_string(v24);
            *(_DWORD *)buf = 136448258;
            v166 = "nw_endpoint_flow_connected_path_change";
            v81 = "not ";
            v168 = (void *)v74;
            v167 = 2082;
            if (v159)
              v81 = "";
            v169 = 2082;
            v170 = v145;
            v171 = 2082;
            v172 = (void *)v76;
            v173 = 2082;
            v174 = (void *)v77;
            v175 = 2082;
            v176 = v78;
            v177 = 2114;
            v178 = v79;
            v179 = 2082;
            v180 = v80;
            v181 = 2082;
            v182 = v81;
            _os_log_impl(&dword_182FBE000, logc, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Connected path is %{public}s, join flow is %{public}sviable", buf, 0x5Cu);

            v72 = logc;
          }
        }

        goto LABEL_80;
      }
      v149 = v32;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v45 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
      {
        v161 = nw_endpoint_handler_get_id_string(v24);
        logf = nw_endpoint_handler_dry_run_string(v24);
        v130 = nw_endpoint_handler_copy_endpoint(v24);
        v131 = nw_endpoint_get_logging_description(v130);
        v132 = nw_endpoint_handler_state_string(v24);
        v133 = nw_endpoint_handler_mode_string(v24);
        v134 = nw_endpoint_handler_copy_current_path(v24);
        v135 = (const char *)*((_QWORD *)v4 + 104);
        *(_DWORD *)buf = 136448258;
        v166 = "nw_endpoint_flow_connected_path_change";
        v167 = 2082;
        v168 = (void *)v161;
        v169 = 2082;
        v170 = logf;
        v171 = 2082;
        v172 = (void *)v131;
        v173 = 2082;
        v174 = (void *)v132;
        v175 = 2082;
        v176 = v133;
        v177 = 2114;
        v178 = v134;
        v179 = 2112;
        v180 = v135;
        v181 = 2112;
        v32 = v149;
        v182 = (const char *)v149;
        _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] registration %@ flow_path %@", buf, 0x5Cu);

      }
    }
    else
    {
      if ((v44 & 1) != 0)
        goto LABEL_45;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v45 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v45, OS_LOG_TYPE_INFO))
      {
        v46 = nw_endpoint_handler_get_id_string(v24);
        v47 = nw_endpoint_handler_dry_run_string(v24);
        v147 = v32;
        v160 = nw_endpoint_handler_copy_endpoint(v24);
        v48 = nw_endpoint_get_logging_description(v160);
        v49 = nw_endpoint_handler_state_string(v24);
        v50 = nw_endpoint_handler_mode_string(v24);
        v51 = nw_endpoint_handler_copy_current_path(v24);
        v52 = (const char *)*((_QWORD *)v4 + 104);
        *(_DWORD *)buf = 136448258;
        v166 = "nw_endpoint_flow_connected_path_change";
        v167 = 2082;
        v168 = (void *)v46;
        v169 = 2082;
        v170 = v47;
        v171 = 2082;
        v172 = (void *)v48;
        v173 = 2082;
        v174 = (void *)v49;
        v175 = 2082;
        v176 = v50;
        v177 = 2114;
        v178 = v51;
        v179 = 2112;
        v180 = v52;
        v181 = 2112;
        v32 = v147;
        v182 = (const char *)v147;
        _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] registration %@ flow_path %@", buf, 0x5Cu);

      }
    }

    goto LABEL_45;
  }
LABEL_122:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v101 = (id)gLogObj;
  v92 = v2;
  if (mode > 5)
    v102 = "unknown-mode";
  else
    v102 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v166 = "nw_endpoint_flow_connected_path_change";
  v167 = 2082;
  v168 = (void *)v102;
  v169 = 2082;
  v170 = "flow";
  v103 = (void *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v163 = 0;
  if (!__nwlog_fault((const char *)v103, &type, &v163))
  {
LABEL_154:
    if (!v103)
      goto LABEL_156;
LABEL_155:
    free(v103);
    goto LABEL_156;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v104 = (id)gLogObj;
    v105 = type;
    if (os_log_type_enabled(v104, type))
    {
      if (mode > 5)
        v106 = "unknown-mode";
      else
        v106 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v166 = "nw_endpoint_flow_connected_path_change";
      v167 = 2082;
      v168 = (void *)v106;
      v169 = 2082;
      v170 = "flow";
      _os_log_impl(&dword_182FBE000, v104, v105, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_153:

    goto LABEL_154;
  }
  if (!v163)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v104 = (id)gLogObj;
    v111 = type;
    if (os_log_type_enabled(v104, type))
    {
      if (mode > 5)
        v112 = "unknown-mode";
      else
        v112 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v166 = "nw_endpoint_flow_connected_path_change";
      v167 = 2082;
      v168 = (void *)v112;
      v169 = 2082;
      v170 = "flow";
      _os_log_impl(&dword_182FBE000, v104, v111, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_153;
  }
  v107 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v104 = (id)gLogObj;
  v108 = type;
  v109 = os_log_type_enabled(v104, type);
  if (!v107)
  {
    if (v109)
    {
      if (mode > 5)
        v113 = "unknown-mode";
      else
        v113 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v166 = "nw_endpoint_flow_connected_path_change";
      v167 = 2082;
      v168 = (void *)v113;
      v169 = 2082;
      v170 = "flow";
      _os_log_impl(&dword_182FBE000, v104, v108, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_153;
  }
  if (v109)
  {
    if (mode > 5)
      v110 = "unknown-mode";
    else
      v110 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    v166 = "nw_endpoint_flow_connected_path_change";
    v167 = 2082;
    v168 = (void *)v110;
    v169 = 2082;
    v170 = "flow";
    v171 = 2082;
    v172 = v107;
    _os_log_impl(&dword_182FBE000, v104, v108, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v107);
  if (v103)
    goto LABEL_155;
LABEL_156:

}

void sub_183055BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

BOOL nw_path_is_viable(void *a1)
{
  _BYTE *v1;
  void *v2;
  NWConcrete_nw_path *v3;
  uint64_t nexus_agent;
  unsigned int v5;
  _BOOL8 v6;
  unsigned __int8 *flows;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[5];
  char v18;
  os_log_type_t type;
  _BYTE buf[24];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((v1[474] & 8) == 0)
    {
      v3 = v1;
      if (nw_path_uses_nexus_internal(v3, 0)
        && (nexus_agent = nw_path_get_nexus_agent(v3, 0), *(_DWORD *)(nexus_agent + 212) > 0xCBu))
      {
        v5 = *(_DWORD *)(nexus_agent + 216);

        if (v5 <= 4 && (v5 & 0xFFFFFFFD) != 0)
          goto LABEL_7;
      }
      else
      {

      }
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x2020000000;
      v21 = 0;
      flows = (unsigned __int8 *)v3->flows;
      v17[0] = MEMORY[0x1E0C809B0];
      v17[1] = 3221225472;
      v17[2] = __nw_path_is_viable_block_invoke;
      v17[3] = &unk_1E14A8DC0;
      v17[4] = buf;
      nw_array_apply(flows, (uint64_t)v17);
      v6 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
      _Block_object_dispose(buf, 8);
      goto LABEL_10;
    }
LABEL_7:
    v6 = 1;
    goto LABEL_10;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_is_viable";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v10, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_is_viable";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_is_viable";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_is_viable";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_is_viable";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v10)
    free(v10);
  v6 = 0;
LABEL_10:

  return v6;
}

void sub_183056040(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_should_not_use_path(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[34] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_flow_should_not_use_path";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_flow_should_not_use_path";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_flow_should_not_use_path";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_flow_should_not_use_path";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_flow_should_not_use_path";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

const char *nw_endpoint_handler_path_status_string(void *a1)
{
  _QWORD *v1;
  void *v2;
  unsigned int *v3;
  uint64_t v4;
  const char *v5;

  v1 = a1;
  v2 = (void *)v1[8];
  if (v2)
  {
    v3 = v2;
    v4 = v3[94];

    if (v4 > 3)
      v5 = "unknown";
    else
      v5 = off_1E14A9340[v4];
  }
  else
  {
    v5 = "null";
  }

  return v5;
}

uint64_t NSURLSessionTask._nwActivity.setter(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  uint64_t v4;

  if (a1)
  {
    swift_getObjectType();
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(qword_1EDCDB9D0);
    if (swift_dynamicCast())
      v2 = v4;
    else
      v2 = 0;
  }
  else
  {
    v2 = 0;
  }
  objc_msgSend(v1, sel_set_nw_activity_, v2);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t sub_18305640C()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for NWEndpoint();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

void sub_183056490()
{
  unint64_t v0;

  sub_183056604(319, &qword_1ECD84158, type metadata accessor for NWPath, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_18305654C()
{
  unint64_t v0;

  sub_183056604(319, (unint64_t *)&qword_1ECD841F0, (uint64_t (*)(uint64_t))type metadata accessor for NWEndpoint, (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E0DEB940]);
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void sub_183056604(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    v7 = a3(255);
    v8 = a4(a1, v7);
    if (!v9)
      atomic_store(v8, a2);
  }
}

uint64_t sub_18305665C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

uint64_t sub_183056688()
{
  return sub_183056690();
}

uint64_t sub_183056690()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  os_unfair_lock_s *v3;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = *(_QWORD *)(result + 16);
    swift_retain();
    swift_release();
    v2 = v1 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v1 + 16);
    v3 = (os_unfair_lock_s *)(v1 + ((*(unsigned int *)(*(_QWORD *)v1 + 48) + 3) & 0x1FFFFFFFCLL));
    os_unfair_lock_lock(v3);
    sub_183056740(v2);
    os_unfair_lock_unlock(v3);
    return swift_release();
  }
  return result;
}

uint64_t sub_183056740(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int *locked;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  int64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int64_t v27;
  unint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  uint64_t v35;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84108);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v32 - v10;
  locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0);
  *(_BYTE *)(a1 + locked[10]) = 1;
  v13 = locked[11];
  swift_release();
  *(_QWORD *)(a1 + v13) = 0;
  if (nw_utilities_minos_atleast())
  {
    v14 = (uint64_t *)(a1 + locked[5]);
    sub_1830630AC(*v14);
    *v14 = 0;
    v14[1] = 0;
  }
  v15 = *(_QWORD *)(a1 + locked[8]);
  v16 = *(_QWORD *)(v15 + 64);
  v33 = v15 + 64;
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v34 = (unint64_t)(v17 + 63) >> 6;
  v35 = v15;
  v32 = v34 - 1;
  result = swift_bridgeObjectRetain();
  v21 = 0;
  if (!v19)
    goto LABEL_10;
LABEL_8:
  v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v23 = v22 | (v21 << 6);
  while (2)
  {
    v24 = *(_QWORD *)(v35 + 56);
    *(_QWORD *)v9 = *(_QWORD *)(*(_QWORD *)(v35 + 48) + 8 * v23);
    v25 = v24 + *(_QWORD *)(v3 + 72) * v23;
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84100);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(&v9[*(int *)(v26 + 48)], v25, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 0, 1, v26);
    while (1)
    {
      sub_1830630BC((uint64_t)v9, (uint64_t)v11, &qword_1ECD84108);
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84100);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 48))(v11, 1, v31) == 1)
        return swift_release();
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, &v11[*(int *)(v31 + 48)], v2);
      sub_183B91A70();
      result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if (v19)
        goto LABEL_8;
LABEL_10:
      v27 = v21 + 1;
      if (__OFADD__(v21, 1))
      {
        __break(1u);
        goto LABEL_31;
      }
      if (v27 < v34)
      {
        v28 = *(_QWORD *)(v33 + 8 * v27);
        if (v28)
          goto LABEL_13;
        v29 = v21 + 2;
        ++v21;
        if (v27 + 1 < v34)
        {
          v28 = *(_QWORD *)(v33 + 8 * v29);
          if (v28)
            goto LABEL_16;
          v21 = v27 + 1;
          if (v27 + 2 < v34)
          {
            v28 = *(_QWORD *)(v33 + 8 * (v27 + 2));
            if (v28)
            {
              v27 += 2;
              goto LABEL_13;
            }
            v29 = v27 + 3;
            v21 = v27 + 2;
            if (v27 + 3 < v34)
              break;
          }
        }
      }
LABEL_27:
      v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84100);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 1, 1, v30);
      v19 = 0;
    }
    v28 = *(_QWORD *)(v33 + 8 * v29);
    if (v28)
    {
LABEL_16:
      v27 = v29;
LABEL_13:
      v19 = (v28 - 1) & v28;
      v23 = __clz(__rbit64(v28)) + (v27 << 6);
      v21 = v27;
      continue;
    }
    break;
  }
  while (1)
  {
    v27 = v29 + 1;
    if (__OFADD__(v29, 1))
      break;
    if (v27 >= v34)
    {
      v21 = v32;
      goto LABEL_27;
    }
    v28 = *(_QWORD *)(v33 + 8 * v27);
    ++v29;
    if (v28)
      goto LABEL_13;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t sub_183056AB0(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_183056AF8(NSObject *a1)
{
  uint64_t v1;

  return sub_183056B04(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_183056B04(NSObject *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t result;

  swift_retain();
  swift_unknownObjectRetain();
  result = sub_183056B70(a2, a1);
  if (result)
  {
    a3();
    return swift_release();
  }
  return result;
}

uint64_t sub_183056B70(uint64_t a1, NSObject *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  NSObject *v14;
  uint64_t v15;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for NWEndpoint();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v17 - v12;
  v14 = nw_connection_copy_endpoint(a2);
  sub_183056F9C(v14, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    swift_release();
    swift_unknownObjectRelease();
    sub_1830620D4((uint64_t)v6, qword_1ECD84160);
    return 0;
  }
  else
  {
    sub_183058EC4((uint64_t)v6, (uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    sub_183058C44((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    type metadata accessor for NWConnection(0);
    swift_allocObject();
    v15 = sub_183058A08((uint64_t)v11, a1, (uint64_t)a2);
    swift_release();
    swift_unknownObjectRelease();
    sub_183058AE0((uint64_t)v13, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  }
  return v15;
}

nw_endpoint_t nw_connection_copy_endpoint(nw_connection_t connection)
{
  nw_connection_t v1;
  nw_connection_t v2;
  NSObject *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = connection;
  v2 = v1;
  if (v1)
  {
    v3 = v1[1].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_copy_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_copy_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t sub_183056F9C@<X0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  nw_txt_record_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint16_t port;
  uint16_t v18;
  const sockaddr *address;
  int sa_family;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;

  v4 = type metadata accessor for NWEndpoint();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78]();
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
  v8 = (void *)swift_unknownObjectRetain();
  v9 = nw_endpoint_copy_interface(v8);
  v10 = (uint64_t)v9;
  if (v9)
    v11 = (uint64_t)v9;
  else
    v11 = 1;
  v12 = nw_endpoint_copy_txt_record(a1);
  swift_unknownObjectRelease();
  if (v12 || nw_endpoint_has_signature(a1))
    goto LABEL_7;
  if (nw_endpoint_get_type(a1) == nw_endpoint_type_host)
  {
    nw_endpoint_get_hostname(a1);
    v14 = sub_183B91800();
    v16 = v15;
    swift_unknownObjectRetain();
    port = nw_endpoint_get_port(a1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    *(_QWORD *)v7 = v14;
    *((_QWORD *)v7 + 1) = v16;
    *((_QWORD *)v7 + 2) = v11;
    v7[24] = 0;
    *((_WORD *)v7 + 13) = port;
    goto LABEL_8;
  }
  if (nw_endpoint_get_type(a1) != nw_endpoint_type_address)
  {
    if (nw_endpoint_get_type(a1) == nw_endpoint_type_bonjour_service)
    {
      nw_endpoint_get_bonjour_service_name(a1);
      v23 = sub_183B91800();
      v38 = v24;
      v39 = v23;
      nw_endpoint_get_bonjour_service_type(a1);
      v25 = sub_183B91800();
      v27 = v26;
      nw_endpoint_get_bonjour_service_domain(a1);
      v28 = sub_183B91800();
      v30 = v29;
      swift_unknownObjectRelease_n();
      v31 = v38;
      *(_QWORD *)v7 = v39;
      *((_QWORD *)v7 + 1) = v31;
      *((_QWORD *)v7 + 2) = v25;
      *((_QWORD *)v7 + 3) = v27;
      *((_QWORD *)v7 + 4) = v28;
      *((_QWORD *)v7 + 5) = v30;
      *((_QWORD *)v7 + 6) = v11;
      goto LABEL_8;
    }
    if (nw_endpoint_get_type(a1) == nw_endpoint_type_url)
    {
      v32 = (void *)nw_endpoint_copy_cfurl(a1);
      sub_183B91374();

      swift_unknownObjectRelease();
      swift_unknownObjectRelease_n();
      goto LABEL_8;
    }
LABEL_7:
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    *(_QWORD *)v7 = a1;
LABEL_8:
    swift_storeEnumTagMultiPayload();
LABEL_9:
    sub_1830589B0((uint64_t)v7, a2);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
  }
  v18 = nw_endpoint_get_port(a1);
  address = nw_endpoint_get_address(a1);
  sa_family = address->sa_family;
  if (sa_family == 1)
  {
    v33 = nw_endpoint_copy_address_string(a1);
    *(_QWORD *)v7 = sub_183B91800();
    *((_QWORD *)v7 + 1) = v34;
    swift_storeEnumTagMultiPayload();
    MEMORY[0x186DB563C](v33, -1, -1);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease_n();
    goto LABEL_9;
  }
  if (sa_family != 30)
  {
    if (sa_family == 2 && address->sa_len == 16)
    {
      v21 = *(unsigned int *)&address->sa_data[2];
      swift_unknownObjectRelease_n();
      *(_QWORD *)v7 = v21;
      *((_QWORD *)v7 + 1) = v11;
      *((_QWORD *)v7 + 2) = 0;
      v22 = 1;
LABEL_35:
      v7[24] = v22;
      *((_WORD *)v7 + 13) = v18;
      goto LABEL_8;
    }
    goto LABEL_30;
  }
  if (address->sa_len == 28)
  {
    v36 = *(_QWORD *)&address->sa_data[6];
    v35 = *(_QWORD *)&address[1].sa_len;
    if (v11 == 1)
    {
      v37 = *(_DWORD *)&address[1].sa_data[6];
      if (v37)
      {
        v10 = (uint64_t)nw_interface_create_with_index(v37);
        swift_unknownObjectRelease_n();
        if (!v10)
          v10 = 1;
        goto LABEL_34;
      }
      v10 = 1;
    }
    swift_unknownObjectRelease_n();
LABEL_34:
    *(_QWORD *)v7 = v36;
    *((_QWORD *)v7 + 1) = v35;
    *((_QWORD *)v7 + 2) = v10;
    v22 = 2;
    goto LABEL_35;
  }
LABEL_30:
  swift_unknownObjectRelease();
  swift_unknownObjectRelease_n();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1, 1, v4);
}

id nw_endpoint_copy_interface(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[2];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_copy_interface";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_interface";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_copy_interface";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_interface";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_interface";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_endpoint_get_priority(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "priority");
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_get_priority";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_priority";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_get_priority";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_priority";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_priority";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183057870(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_weight(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = objc_msgSend(v1, "weight");
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_get_weight";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_weight";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_get_weight";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_weight";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_weight";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183057B2C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_address_endpoint_matches_address(void *a1, unsigned __int8 *a2, int a3, int a4)
{
  id v7;
  void *v8;
  id v9;
  int v10;
  char *v11;
  char *v12;
  id *v13;
  _DWORD *v14;
  int v15;
  id v16;
  id v17;
  int v18;
  const char *v19;
  NSObject *v20;
  os_log_type_t v21;
  id v22;
  int v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  id v27;
  int v28;
  unsigned int v29;
  _BYTE *v30;
  uint64_t v32;
  os_log_type_t v33;
  id v34;
  int v35;
  id v36;
  int v37;
  char *v38;
  void *v40;
  const char *v41;
  NSObject *v42;
  os_log_type_t v43;
  void *v44;
  os_log_type_t v45;
  char *backtrace_string;
  os_log_type_t v47;
  _BOOL4 v48;
  os_log_type_t v49;
  _BOOL4 v50;
  os_log_type_t v51;
  os_log_type_t v52;
  uint64_t v53;
  char v54;
  os_log_type_t type;
  _BYTE buf[28];
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (!v7)
  {
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
    v41 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v41, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s called with null endpoint", buf, 0xCu);
        }
        goto LABEL_85;
      }
      if (!v54)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v51 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_182FBE000, v42, v51, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_85;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      v48 = os_log_type_enabled(v42, type);
      if (!backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_182FBE000, v42, v47, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
        goto LABEL_85;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v42, v47, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_73:

      free(backtrace_string);
    }
LABEL_86:
    if (!v41)
      goto LABEL_52;
    v38 = (char *)v41;
    goto LABEL_51;
  }
  if (!a2)
  {
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
    v41 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v41, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_182FBE000, v42, v45, "%{public}s called with null addr", buf, 0xCu);
        }
LABEL_85:

        goto LABEL_86;
      }
      if (!v54)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v52 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_182FBE000, v42, v52, "%{public}s called with null addr, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_85;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      v50 = os_log_type_enabled(v42, type);
      if (!backtrace_string)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
          _os_log_impl(&dword_182FBE000, v42, v49, "%{public}s called with null addr, no backtrace", buf, 0xCu);
        }
        goto LABEL_85;
      }
      if (v50)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v42, v49, "%{public}s called with null addr, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_73;
    }
    goto LABEL_86;
  }
  v9 = v7;
  v10 = objc_msgSend(v9, "type");

  if (v10 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    v17 = v9;
    v18 = objc_msgSend(v17, "type");

    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v18;
    LODWORD(v53) = 18;
    v19 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v54 = 0;
    if (__nwlog_fault(v19, &type, &v54))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          v22 = v17;
          v23 = objc_msgSend(v22, "type", buf, v53);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v23;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v54)
      {
        v24 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v25 = type;
        v26 = os_log_type_enabled(v20, type);
        if (v24)
        {
          if (v26)
          {
            v27 = v17;
            v28 = objc_msgSend(v27, "type", buf, v53);

            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v28;
            *(_WORD *)&buf[18] = 2082;
            *(_QWORD *)&buf[20] = v24;
            _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v24);
          if (!v19)
            goto LABEL_52;
LABEL_50:
          v38 = (char *)v19;
LABEL_51:
          free(v38);
          goto LABEL_52;
        }
        if (v26)
        {
          v36 = v17;
          v37 = objc_msgSend(v36, "type", buf, v53);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v37;
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v33 = type;
        if (os_log_type_enabled(v20, type))
        {
          v34 = v17;
          v35 = objc_msgSend(v34, "type", buf, v53);

          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_address_endpoint_matches_address";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v35;
          _os_log_impl(&dword_182FBE000, v20, v33, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v19)
    {
LABEL_52:
      v32 = 0;
      goto LABEL_53;
    }
    goto LABEL_50;
  }
  v11 = (char *)v9;
  v12 = v11;
  if (a4)
  {
    v13 = v11;
    v14 = v13[2];

    if (v14)
      v15 = v14[2];
    else
      v15 = 0;

  }
  else
  {
    v15 = 0;
  }
  if (a2[1] == 30)
  {
    v29 = *a2;
    if (v29 == 28)
    {
      v30 = v12 + 232;
      if (v12[233] == 2 && !*((_DWORD *)a2 + 2) && !*((_DWORD *)a2 + 3) && *((_DWORD *)a2 + 4) == -65536)
      {
        *(_WORD *)buf = 528;
        *(_WORD *)&buf[2] = *((_WORD *)a2 + 1);
        *(_DWORD *)&buf[4] = *((_DWORD *)a2 + 5);
        *(_QWORD *)&buf[8] = 0;
        if (*v30 != 16)
          goto LABEL_38;
        if (*(_QWORD *)v30 != *(_QWORD *)buf || *((_QWORD *)v12 + 30) != *(_QWORD *)&buf[8])
          goto LABEL_38;
LABEL_40:
        if (v15 == a3)
          v32 = 1;
        else
          v32 = a4 ^ 1u;
        goto LABEL_39;
      }
      v29 = 28;
    }
  }
  else
  {
    v29 = *a2;
  }
  if (v12[232] == v29 && !memcmp(v12 + 232, a2, v29))
    goto LABEL_40;
LABEL_38:
  v32 = 0;
LABEL_39:

LABEL_53:
  return v32;
}

void sub_18305841C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_ignore_resolver_stats(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[96] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_ignore_resolver_stats";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_ignore_resolver_stats";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_ignore_resolver_stats";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_ignore_resolver_stats";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_ignore_resolver_stats";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_endpoint_has_signature(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 24) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_has_signature";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_has_signature";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_has_signature";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_has_signature";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_has_signature";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t sub_1830589B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NWEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for NWConnection(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1EDCDC1D0);
}

uint64_t sub_183058A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&qword_1EDCDB628);
  v7 = swift_allocObject();
  *(_DWORD *)(v7 + 96) = 0;
  *(_OWORD *)(v7 + 16) = 0u;
  *(_OWORD *)(v7 + 32) = 0u;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_QWORD *)(v7 + 80) = 0;
  *(_DWORD *)(v7 + 88) = 0;
  *(_WORD *)(v7 + 92) = 128;
  *(_QWORD *)(v3 + 24) = v7;
  sub_183058C44(a1, v3 + OBJC_IVAR____TtC7Network13_NWConnection_endpoint, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC7Network13_NWConnection_parameters) = a2;
  *(_QWORD *)(v3 + 16) = a3;
  swift_retain();
  swift_unknownObjectRetain();
  sub_183061488(0);
  NWConnection.stateUpdateHandler.setter(0, 0);
  sub_183058AE0(a1, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  return v3;
}

uint64_t sub_183058AE0(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_183058B1C(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRelease();
  return result;
}

uint64_t destroy for NWEndpoint(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      result = sub_183058BF0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      result = *(_QWORD *)(a1 + 48);
      if (result != 1)
        goto LABEL_7;
      break;
    case 2:
      result = swift_bridgeObjectRelease();
      break;
    case 3:
      v3 = sub_183B913A4();
      result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
      break;
    case 4:
LABEL_7:
      result = swift_unknownObjectRelease();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_183058BF0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 != 2)
  {
    if (a4 == 1)
    {
      a3 = a2;
    }
    else
    {
      if (a4)
        return result;
      swift_bridgeObjectRelease();
    }
  }
  return sub_183058B1C(a3);
}

uint64_t sub_183058C44(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for NWEndpoint()
{
  uint64_t result;

  result = qword_1ECD841F8;
  if (!qword_1ECD841F8)
    return swift_getSingletonMetadata();
  return result;
}

void initializeWithCopy for NWEndpoint()
{
  char *v0;

  v0 = (char *)sub_183058D10 + 4 * byte_183B9FDC1[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t sub_183058D10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *(_QWORD *)v1;
  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 24);
  sub_183058E2C(*(_QWORD *)v1, v3, v4, v5);
  *(_QWORD *)v0 = v2;
  *(_QWORD *)(v0 + 8) = v3;
  *(_QWORD *)(v0 + 16) = v4;
  *(_BYTE *)(v0 + 24) = v5;
  *(_WORD *)(v0 + 26) = *(_WORD *)(v1 + 26);
  swift_storeEnumTagMultiPayload();
  return v0;
}

uint64_t sub_183058E2C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;

  if (a4 != 2)
  {
    if (a4 == 1)
    {
      a3 = a2;
    }
    else
    {
      if (a4)
        return result;
      swift_bridgeObjectRetain();
    }
  }
  return sub_183058E80(a3);
}

uint64_t sub_183058E80(uint64_t result)
{
  if (result != 1)
    return swift_unknownObjectRetain();
  return result;
}

uint64_t sub_183058E90(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_183058EC4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for NWPath(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  unsigned int (*v10)(const void *, uint64_t, uint64_t);
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  char *v17;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = a3[11];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for NWEndpoint();
  v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (!v10(v8, 1, v9))
  {
    v12 = (char *)&loc_183058FE8 + 4 * byte_183BA1654[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v11 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  v13 = a3[12];
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  if (!v10((const void *)(a2 + v13), 1, v9))
  {
    v17 = (char *)&loc_18305914C + 4 * byte_183BA1659[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  v16 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  swift_unknownObjectRetain();
  return a1;
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x186DB5540]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

BOOL nw_connection_used_fallback(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v19 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_used_fallback_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v15 = buf;
    v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_used_fallback_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_used_fallback";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_used_fallback";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_used_fallback";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_used_fallback";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_used_fallback";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_connection_used_fallback_block_invoke(uint64_t a1)
{
  uint64_t result;

  result = nw_connection_used_fallback_locked(*(void **)(a1 + 32));
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result;
  return result;
}

uint64_t nw_connection_used_fallback_locked(void *a1)
{
  void **v1;
  void **v2;
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_handler *v4;
  id *v5;
  id v6;
  _QWORD *v7;
  uint64_t v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((*((_BYTE *)v1 + 109) & 0x40) != 0)
      v3 = nw_endpoint_handler_copy_connected_flow_handler(v1[18]);
    else
      v3 = v1[19];
    v4 = v3;
    if (v3)
    {
      v5 = v3;
      v6 = v5[4];

      if (v6)
      {
        v7 = v6;
        v8 = (v7[12] >> 16) & 1;

      }
      else
      {
        v8 = 0;
      }

    }
    else
    {
      v8 = 0;
    }

    goto LABEL_12;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_connection_used_fallback_locked";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_used_fallback_locked";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_connection_used_fallback_locked";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_used_fallback_locked";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_connection_used_fallback_locked";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_29:
  if (v11)
    free(v11);
  v8 = 0;
LABEL_12:

  return v8;
}

void sub_1830598F4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_alternate_path_state(void *a1, void *a2, void *a3, void *a4)
{
  id *v7;
  unsigned int *v8;
  unsigned int *v9;
  NSObject *v10;
  NSObject *v11;
  void *v12;
  id v13;
  int is_viable;
  NWConcrete_nw_endpoint_handler *v15;
  uint64_t v16;
  char *v17;
  _BOOL4 v18;
  id v19;
  char v20;
  id v21;
  const char *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  const char *v26;
  char *backtrace_string;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  const char *v31;
  os_log_type_t v32;
  const char *v33;
  const char *v34;
  NSObject *v35;
  int isa;
  NSObject *v37;
  NSObject *v38;
  int isa_high;
  NSObject *v40;
  int v41;
  char v42;
  uint64_t v43;
  unsigned int *v44;
  _QWORD *v45;
  void *v46;
  _QWORD *v47;
  BOOL v48;
  NSObject *v49;
  int v50;
  id *v51;
  id *v52;
  id v53;
  _QWORD *v54;
  BOOL v55;
  NSObject *v56;
  const char *v57;
  nw_endpoint_t v58;
  const char *v59;
  _QWORD *v60;
  uint64_t v61;
  const char *v62;
  const char *v63;
  os_unfair_lock_s *v64;
  os_unfair_lock_s *v65;
  const char *v66;
  NSObject *v67;
  const char *v68;
  nw_endpoint_t v69;
  const char *v70;
  _QWORD *v71;
  uint64_t v72;
  const char *v73;
  int minimize_logging;
  char logging_disabled;
  const char *v76;
  const char *v77;
  nw_endpoint_t v78;
  const char *v79;
  const char *v80;
  const char *v81;
  id v82;
  os_unfair_lock_s *v83;
  os_unfair_lock_s *v84;
  const char *v85;
  os_unfair_lock_s *v86;
  id *v87;
  id v88;
  NSObject *v89;
  NSObject *v90;
  NSObject *v91;
  os_unfair_lock_s *v92;
  id *v93;
  id v94;
  NSObject *v95;
  int v97;
  NSObject *v98;
  NSObject *v99;
  nw_endpoint_type_t v100;
  id *v101;
  NSObject *v102;
  const char *v103;
  const char *v104;
  nw_endpoint_t v105;
  const char *v106;
  const char *v107;
  const char *v108;
  id v109;
  int v110;
  char v111;
  NSObject *v112;
  const char *v113;
  const char *v114;
  nw_endpoint_t v115;
  const char *v116;
  const char *v117;
  const char *v118;
  id v119;
  const char *v120;
  const char *v121;
  nw_endpoint_t v122;
  const char *v123;
  const char *v124;
  const char *v125;
  id v126;
  void *v127;
  char *v128;
  NSObject *v129;
  os_log_type_t v130;
  char *v131;
  os_log_type_t v132;
  _BOOL4 v133;
  const char *v134;
  const char *v135;
  nw_endpoint_t v136;
  const char *v137;
  const char *v138;
  const char *v139;
  id v140;
  os_log_type_t v141;
  const char *id_string;
  const char *v143;
  nw_endpoint_t v144;
  const char *logging_description;
  const char *v146;
  const char *v147;
  id v148;
  const char *v149;
  const char *v150;
  nw_endpoint_t v151;
  const char *v152;
  const char *v153;
  const char *v154;
  id v155;
  const char *v156;
  nw_endpoint_t v157;
  const char *v158;
  const char *v159;
  const char *v160;
  id v161;
  NSObject *log;
  const char *loga;
  NSObject *v164;
  const char *v165;
  NSObject *v166;
  const char *v167;
  const char *v168;
  id v169;
  unsigned int *v170;
  unsigned int *v171;
  void *v172;
  NSObject *v173;
  id *v174;
  void *v175;
  char v176;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v179;
  __int16 v180;
  void *v181;
  __int16 v182;
  const char *v183;
  __int16 v184;
  void *v185;
  __int16 v186;
  const char *v187;
  __int16 v188;
  const char *v189;
  __int16 v190;
  id v191;
  __int16 v192;
  NSObject *v193;
  __int16 v194;
  NSObject *v195;
  uint64_t v196;

  v196 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = a3;
  v10 = a4;
  v11 = v10;
  v174 = v7;
  if (v7)
  {
    if (v8)
    {
      if (v9)
      {
LABEL_4:
        v170 = v8;
        v171 = v9;
        v173 = v11;
        if (*((_DWORD *)v7 + 29) != 2 || (v12 = (void *)nw_endpoint_handler_copy_connected_path(v7)) == 0)
        {
          v19 = v7[8];
          v172 = 0;
          v18 = 0;
          v20 = 1;
          is_viable = 1;
          v175 = v19;
          if (!v11)
            goto LABEL_53;
          goto LABEL_48;
        }
        v13 = v12;
        is_viable = nw_endpoint_handler_is_viable(v7);
        v15 = v7;
        v16 = *((unsigned int *)v7 + 29);

        if ((_DWORD)v16 == 2)
        {
          v17 = (char *)nw_endpoint_handler_copy_flow(v15);
          v18 = v17[34] < 0;

          goto LABEL_47;
        }
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v21 = (id)gLogObj;
        if (v16 > 5)
          v22 = "unknown-mode";
        else
          v22 = off_1E149FC18[v16];
        *(_DWORD *)buf = 136446722;
        v179 = "nw_endpoint_handler_reported_do_not_reuse";
        v180 = 2082;
        v181 = (void *)v22;
        v182 = 2082;
        v183 = "flow";
        v23 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v176 = 0;
        if (__nwlog_fault(v23, &type, &v176))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v24 = (id)gLogObj;
            v25 = type;
            if (os_log_type_enabled(v24, type))
            {
              if (v16 > 5)
                v26 = "unknown-mode";
              else
                v26 = off_1E149FC18[v16];
              *(_DWORD *)buf = 136446722;
              v179 = "nw_endpoint_handler_reported_do_not_reuse";
              v180 = 2082;
              v181 = (void *)v26;
              v182 = 2082;
              v183 = "flow";
              _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
            }
LABEL_30:

            goto LABEL_44;
          }
          if (!v176)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v24 = (id)gLogObj;
            v32 = type;
            if (os_log_type_enabled(v24, type))
            {
              if (v16 > 5)
                v33 = "unknown-mode";
              else
                v33 = off_1E149FC18[v16];
              *(_DWORD *)buf = 136446722;
              v179 = "nw_endpoint_handler_reported_do_not_reuse";
              v180 = 2082;
              v181 = (void *)v33;
              v182 = 2082;
              v183 = "flow";
              _os_log_impl(&dword_182FBE000, v24, v32, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
            }
            goto LABEL_30;
          }
          backtrace_string = (char *)__nw_create_backtrace_string();
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = (id)gLogObj;
          v29 = type;
          v30 = os_log_type_enabled(v28, type);
          if (backtrace_string)
          {
            if (v30)
            {
              if (v16 > 5)
                v31 = "unknown-mode";
              else
                v31 = off_1E149FC18[v16];
              *(_DWORD *)buf = 136446978;
              v179 = "nw_endpoint_handler_reported_do_not_reuse";
              v180 = 2082;
              v181 = (void *)v31;
              v182 = 2082;
              v183 = "flow";
              v184 = 2082;
              v185 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(backtrace_string);
            if (!v23)
              goto LABEL_46;
            goto LABEL_45;
          }
          if (v30)
          {
            if (v16 > 5)
              v34 = "unknown-mode";
            else
              v34 = off_1E149FC18[v16];
            *(_DWORD *)buf = 136446722;
            v179 = "nw_endpoint_handler_reported_do_not_reuse";
            v180 = 2082;
            v181 = (void *)v34;
            v182 = 2082;
            v183 = "flow";
            _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
          }

        }
LABEL_44:
        if (!v23)
        {
LABEL_46:
          v18 = 0;
LABEL_47:

          v20 = 0;
          v19 = v13;
          v172 = v13;
          v11 = v173;
          v175 = v13;
          if (!v173)
            goto LABEL_53;
LABEL_48:
          if (v19)
          {
            v35 = v11;
            isa = (int)v35[47].isa;

            if (isa == 1)
            {
              v37 = v175;
              v38 = v37;
              if (LODWORD(v37[33].isa) != 4)
              {

LABEL_64:
                if (!is_viable || (v49 = v38, v50 = (int)v49[47].isa, v49, v50 == 2))
                {
                  v51 = v174;
                  v52 = v51;
                  v53 = v51[4];
                  if (v53)
                  {
                    v54 = v53;
                    v55 = (v54[12] & 0x4000000000) == 0;

                    if (v55)
                    {
                      if ((*((_BYTE *)v52 + 268) & 0x20) != 0)
                        goto LABEL_191;
                      goto LABEL_83;
                    }
                    if ((nw_endpoint_handler_get_logging_disabled(v52) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v56 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
                      {
                        id_string = nw_endpoint_handler_get_id_string(v52);
                        v143 = nw_endpoint_handler_dry_run_string(v52);
                        v144 = nw_endpoint_handler_copy_endpoint(v52);
                        logging_description = nw_endpoint_get_logging_description(v144);
                        v146 = nw_endpoint_handler_state_string(v52);
                        v147 = nw_endpoint_handler_mode_string(v52);
                        v148 = nw_endpoint_handler_copy_current_path(v52);
                        *(_DWORD *)buf = 136448258;
                        v179 = "nw_endpoint_handler_get_alternate_path_state";
                        v180 = 2082;
                        v181 = (void *)id_string;
                        v182 = 2082;
                        v183 = v143;
                        v184 = 2082;
                        v185 = (void *)logging_description;
                        v186 = 2082;
                        v187 = v146;
                        v188 = 2082;
                        v189 = v147;
                        v190 = 2114;
                        v191 = v148;
                        v192 = 2114;
                        v193 = v35;
                        v194 = 2114;
                        v195 = v38;
                        _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path %{public}@ due to non-viable current path %{public}@", buf, 0x5Cu);

                      }
LABEL_107:
                      v43 = 1;
LABEL_122:

                      goto LABEL_123;
                    }
                  }
                  else
                  {

                    if ((*((_BYTE *)v52 + 268) & 0x20) == 0)
                    {
LABEL_83:
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v43 = 1;
                      v67 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v67, OS_LOG_TYPE_INFO))
                      {
                        if ((*((_BYTE *)v52 + 268) & 1) != 0)
                          v68 = "dry-run ";
                        else
                          v68 = "";
                        v69 = nw_endpoint_handler_copy_endpoint(v52);
                        v70 = nw_endpoint_get_logging_description(v69);
                        v71 = v52 + 21;
                        v72 = *((unsigned int *)v52 + 30);
                        v168 = v70;
                        if (v72 > 5)
                          v73 = "unknown-state";
                        else
                          v73 = off_1E149FC48[v72];
                        v165 = v73;
                        v83 = v52;
                        v84 = v83;
                        v85 = "path";
                        switch(*((_DWORD *)v174 + 29))
                        {
                          case 0:
                            break;
                          case 1:
                            v85 = "resolver";
                            break;
                          case 2:
                            v85 = nw_endpoint_flow_mode_string(*(void **)&v83[62]._os_unfair_lock_opaque);
                            break;
                          case 3:
                            v85 = "proxy";
                            break;
                          case 4:
                            v85 = "fallback";
                            break;
                          case 5:
                            v85 = "transform";
                            break;
                          default:
                            v85 = "unknown-mode";
                            break;
                        }

                        v92 = v84 + 28;
                        v93 = v84;
                        os_unfair_lock_lock(v84 + 28);
                        v94 = v93[8];
                        os_unfair_lock_unlock(v92);

                        *(_DWORD *)buf = 136448258;
                        v179 = "nw_endpoint_handler_get_alternate_path_state";
                        v180 = 2082;
                        v181 = v71;
                        v182 = 2082;
                        v183 = v68;
                        v184 = 2082;
                        v185 = (void *)v168;
                        v186 = 2082;
                        v187 = v165;
                        v188 = 2082;
                        v189 = v85;
                        v190 = 2114;
                        v191 = v94;
                        v192 = 2114;
                        v193 = v35;
                        v194 = 2114;
                        v195 = v38;
                        _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path %{public}@ due to non-viable current path %{public}@", buf, 0x5Cu);

                        v43 = 1;
                      }
                      v56 = v67;
                      goto LABEL_122;
                    }
                  }
                  goto LABEL_191;
                }
                if (v18)
                {
                  minimize_logging = nw_endpoint_handler_get_minimize_logging(v174);
                  logging_disabled = nw_endpoint_handler_get_logging_disabled(v174);
                  if (minimize_logging)
                  {
                    if ((logging_disabled & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v56 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
                      {
                        v149 = nw_endpoint_handler_get_id_string(v174);
                        v150 = nw_endpoint_handler_dry_run_string(v174);
                        v151 = nw_endpoint_handler_copy_endpoint(v174);
                        v152 = nw_endpoint_get_logging_description(v151);
                        v153 = nw_endpoint_handler_state_string(v174);
                        v154 = nw_endpoint_handler_mode_string(v174);
                        v155 = nw_endpoint_handler_copy_current_path(v174);
                        *(_DWORD *)buf = 136448002;
                        v179 = "nw_endpoint_handler_get_alternate_path_state";
                        v180 = 2082;
                        v181 = (void *)v149;
                        v182 = 2082;
                        v183 = v150;
                        v184 = 2082;
                        v185 = (void *)v152;
                        v186 = 2082;
                        v187 = v153;
                        v188 = 2082;
                        v189 = v154;
                        v190 = 2114;
                        v191 = v155;
                        v192 = 2114;
                        v193 = v35;
                        _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path %{public}@ due non-reusable flow", buf, 0x52u);

                      }
                      goto LABEL_107;
                    }
                  }
                  else if ((logging_disabled & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v43 = 1;
                    v56 = (id)gconnectionLogObj;
                    if (!os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                      goto LABEL_122;
                    v76 = nw_endpoint_handler_get_id_string(v174);
                    v77 = nw_endpoint_handler_dry_run_string(v174);
                    v78 = nw_endpoint_handler_copy_endpoint(v174);
                    v79 = nw_endpoint_get_logging_description(v78);
                    v80 = nw_endpoint_handler_state_string(v174);
                    v81 = nw_endpoint_handler_mode_string(v174);
                    v82 = nw_endpoint_handler_copy_current_path(v174);
                    *(_DWORD *)buf = 136448002;
                    v179 = "nw_endpoint_handler_get_alternate_path_state";
                    v180 = 2082;
                    v181 = (void *)v76;
                    v182 = 2082;
                    v183 = v77;
                    v184 = 2082;
                    v185 = (void *)v79;
                    v186 = 2082;
                    v187 = v80;
                    v188 = 2082;
                    v189 = v81;
                    v190 = 2114;
                    v191 = v82;
                    v192 = 2114;
                    v193 = v35;
                    _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path %{public}@ due non-reusable flow", buf, 0x52u);

                    goto LABEL_107;
                  }
LABEL_191:
                  v43 = 1;
                  goto LABEL_123;
                }
                if ((v20 & 1) != 0)
                  v89 = nw_path_copy_interface(v49);
                else
                  v89 = nw_path_copy_connected_interface(v172);
                v90 = v89;
                v91 = v49;
                v43 = 0;
                if (nw_path_is_tunnelled(v49))
                {
LABEL_156:
                  v56 = v90;
                  goto LABEL_122;
                }
                v56 = v90;
                if (!v90)
                  goto LABEL_122;
                if (nw_interface_get_type(v90) == nw_interface_type_loopback)
                {
                  v43 = 0;
                  goto LABEL_122;
                }
                v97 = (int)v90[1].isa;
                if (v97 == nw_path_get_interface_index(v35))
                {
                  v43 = 0;
                  v56 = v90;
                  goto LABEL_122;
                }
                v98 = nw_path_copy_endpoint(v91);
                v99 = nw_path_copy_endpoint(v35);
                v164 = v98;
                v166 = v99;
                if (v98)
                  v100 = nw_endpoint_get_type(v98);
                else
                  v100 = nw_endpoint_type_invalid;
                v101 = v174;
                if (v99)
                  LODWORD(v99) = nw_endpoint_get_type(v99);
                v169 = nw_endpoint_handler_copy_current_path(v170);
                if (v100 != (_DWORD)v99
                  || nw_path_may_span_multiple_interfaces(v169)
                  && nw_endpoint_handler_has_matching_handler(v170, v171))
                {
                  if ((nw_endpoint_handler_get_logging_disabled(v174) & 1) != 0)
                  {
                    v43 = 0;
                    goto LABEL_155;
                  }
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v102 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
                  {
                    v103 = nw_endpoint_handler_get_id_string(v174);
                    v104 = nw_endpoint_handler_dry_run_string(v174);
                    v105 = nw_endpoint_handler_copy_endpoint(v174);
                    v106 = nw_endpoint_get_logging_description(v105);
                    v107 = nw_endpoint_handler_state_string(v174);
                    v108 = nw_endpoint_handler_mode_string(v174);
                    v109 = nw_endpoint_handler_copy_current_path(v174);
                    *(_DWORD *)buf = 136448258;
                    v179 = "nw_endpoint_handler_get_alternate_path_state";
                    v180 = 2082;
                    v181 = (void *)v103;
                    v182 = 2082;
                    v183 = v104;
                    v184 = 2082;
                    v185 = (void *)v106;
                    v186 = 2082;
                    v187 = v107;
                    v188 = 2082;
                    v189 = v108;
                    v190 = 2114;
                    v191 = v109;
                    v192 = 2114;
                    v193 = v166;
                    v194 = 2114;
                    v195 = v164;
                    _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] suppressing better path notification (comparing %{public}@ to %{public}@)", buf, 0x5Cu);

                  }
                  v43 = 0;
LABEL_154:

LABEL_155:
                  goto LABEL_156;
                }
                v110 = nw_endpoint_handler_get_minimize_logging(v174);
                v111 = nw_endpoint_handler_get_logging_disabled(v174);
                if (v110)
                {
                  if ((v111 & 1) != 0)
                    goto LABEL_148;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v112 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v112, OS_LOG_TYPE_DEBUG))
                  {
                    loga = nw_endpoint_handler_get_id_string(v174);
                    v156 = nw_endpoint_handler_dry_run_string(v174);
                    v157 = nw_endpoint_handler_copy_endpoint(v174);
                    v158 = nw_endpoint_get_logging_description(v157);
                    v159 = nw_endpoint_handler_state_string(v174);
                    v160 = nw_endpoint_handler_mode_string(v174);
                    v161 = nw_endpoint_handler_copy_current_path(v174);
                    *(_DWORD *)buf = 136448258;
                    v179 = "nw_endpoint_handler_get_alternate_path_state";
                    v180 = 2082;
                    v181 = (void *)loga;
                    v182 = 2082;
                    v183 = v156;
                    v184 = 2082;
                    v185 = (void *)v158;
                    v186 = 2082;
                    v187 = v159;
                    v188 = 2082;
                    v189 = v160;
                    v190 = 2114;
                    v191 = v161;
                    v192 = 2114;
                    v193 = v35;
                    v194 = 2114;
                    v195 = v91;
                    _os_log_impl(&dword_182FBE000, v112, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path %{public}@ preferred to path %{public}@", buf, 0x5Cu);

                  }
                }
                else
                {
                  if ((v111 & 1) != 0)
                  {
LABEL_148:
                    if ((nw_endpoint_handler_get_logging_disabled(v101) & 1) != 0)
                    {
                      v43 = 1;
                      goto LABEL_155;
                    }
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v102 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v102, OS_LOG_TYPE_DEBUG))
                    {
                      v120 = nw_endpoint_handler_get_id_string(v101);
                      v121 = nw_endpoint_handler_dry_run_string(v101);
                      v122 = nw_endpoint_handler_copy_endpoint(v101);
                      v123 = nw_endpoint_get_logging_description(v122);
                      v124 = nw_endpoint_handler_state_string(v101);
                      v125 = nw_endpoint_handler_mode_string(v101);
                      v126 = nw_endpoint_handler_copy_current_path(v101);
                      *(_DWORD *)buf = 136448258;
                      v179 = "nw_endpoint_handler_get_alternate_path_state";
                      v180 = 2082;
                      v181 = (void *)v120;
                      v182 = 2082;
                      v183 = v121;
                      v184 = 2082;
                      v185 = (void *)v123;
                      v186 = 2082;
                      v187 = v124;
                      v188 = 2082;
                      v189 = v125;
                      v190 = 2114;
                      v191 = v126;
                      v192 = 2114;
                      v193 = v166;
                      v194 = 2114;
                      v195 = v164;
                      _os_log_impl(&dword_182FBE000, v102, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] comparing %{public}@ to %{public}@", buf, 0x5Cu);

                    }
                    v43 = 1;
                    goto LABEL_154;
                  }
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v112 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v112, OS_LOG_TYPE_INFO))
                  {
                    log = v112;
                    v113 = nw_endpoint_handler_get_id_string(v174);
                    v114 = nw_endpoint_handler_dry_run_string(v174);
                    v115 = nw_endpoint_handler_copy_endpoint(v174);
                    v116 = nw_endpoint_get_logging_description(v115);
                    v117 = nw_endpoint_handler_state_string(v174);
                    v118 = nw_endpoint_handler_mode_string(v174);
                    v119 = nw_endpoint_handler_copy_current_path(v174);
                    *(_DWORD *)buf = 136448258;
                    v179 = "nw_endpoint_handler_get_alternate_path_state";
                    v180 = 2082;
                    v181 = (void *)v113;
                    v182 = 2082;
                    v183 = v114;
                    v184 = 2082;
                    v185 = (void *)v116;
                    v186 = 2082;
                    v187 = v117;
                    v188 = 2082;
                    v189 = v118;
                    v190 = 2114;
                    v191 = v119;
                    v192 = 2114;
                    v193 = v35;
                    v194 = 2114;
                    v195 = v91;
                    _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] better path %{public}@ preferred to path %{public}@", buf, 0x5Cu);

                    v112 = log;
                  }
                }

                v101 = v174;
                goto LABEL_148;
              }
              isa_high = HIDWORD(v37[33].isa);

              if (!isa_high)
                goto LABEL_64;
            }
LABEL_54:
            v40 = v175;
            v41 = (int)v40[47].isa;

            if (v41 == 3)
              v42 = is_viable;
            else
              v42 = 1;
            if ((v42 & 1) == 0)
            {
              v44 = v7;
              v45 = v44;
              v46 = (void *)*((_QWORD *)v44 + 4);
              if (v46)
              {
                v47 = v46;
                v48 = (v47[12] & 0x4000000000) == 0;

                if (!v48)
                {
                  if ((nw_endpoint_handler_get_logging_disabled(v45) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v56 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
                    {
                      v134 = nw_endpoint_handler_get_id_string(v45);
                      v135 = nw_endpoint_handler_dry_run_string(v45);
                      v136 = nw_endpoint_handler_copy_endpoint(v45);
                      v137 = nw_endpoint_get_logging_description(v136);
                      v138 = nw_endpoint_handler_state_string(v45);
                      v139 = nw_endpoint_handler_mode_string(v45);
                      v140 = nw_endpoint_handler_copy_current_path(v45);
                      *(_DWORD *)buf = 136448258;
                      v179 = "nw_endpoint_handler_get_alternate_path_state";
                      v180 = 2082;
                      v181 = (void *)v134;
                      v182 = 2082;
                      v183 = v135;
                      v184 = 2082;
                      v185 = (void *)v137;
                      v186 = 2082;
                      v187 = v138;
                      v188 = 2082;
                      v189 = v139;
                      v190 = 2114;
                      v191 = v140;
                      v192 = 2114;
                      v193 = v173;
                      v194 = 2114;
                      v195 = v40;
                      _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] satisfiable path %{public}@ preferred to non-viable path %{public}@", buf, 0x5Cu);

                    }
                    goto LABEL_107;
                  }
                  goto LABEL_191;
                }
                if ((*((_BYTE *)v45 + 268) & 0x20) != 0)
                  goto LABEL_191;
              }
              else
              {

                if ((*((_BYTE *)v45 + 268) & 0x20) != 0)
                  goto LABEL_191;
              }
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v43 = 1;
              v56 = (id)gconnectionLogObj;
              if (!os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
                goto LABEL_122;
              if ((*((_BYTE *)v45 + 268) & 1) != 0)
                v57 = "dry-run ";
              else
                v57 = "";
              v58 = nw_endpoint_handler_copy_endpoint(v45);
              v59 = nw_endpoint_get_logging_description(v58);
              v60 = v45 + 21;
              v61 = *((unsigned int *)v45 + 30);
              v62 = v59;
              if (v61 > 5)
                v63 = "unknown-state";
              else
                v63 = off_1E149FC48[v61];
              v167 = v63;
              v64 = v45;
              v65 = v64;
              v66 = "path";
              switch(*((_DWORD *)v174 + 29))
              {
                case 0:
                  break;
                case 1:
                  v66 = "resolver";
                  break;
                case 2:
                  v66 = nw_endpoint_flow_mode_string(*(void **)&v64[62]._os_unfair_lock_opaque);
                  break;
                case 3:
                  v66 = "proxy";
                  break;
                case 4:
                  v66 = "fallback";
                  break;
                case 5:
                  v66 = "transform";
                  break;
                default:
                  v66 = "unknown-mode";
                  break;
              }

              v86 = v65 + 28;
              v87 = v65;
              os_unfair_lock_lock(v65 + 28);
              v88 = v87[8];
              os_unfair_lock_unlock(v86);

              *(_DWORD *)buf = 136448258;
              v179 = "nw_endpoint_handler_get_alternate_path_state";
              v180 = 2082;
              v181 = v60;
              v182 = 2082;
              v183 = v57;
              v184 = 2082;
              v185 = (void *)v62;
              v186 = 2082;
              v187 = v167;
              v188 = 2082;
              v189 = v66;
              v190 = 2114;
              v191 = v88;
              v192 = 2114;
              v193 = v173;
              v194 = 2114;
              v195 = v40;
              _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] satisfiable path %{public}@ preferred to non-viable path %{public}@", buf, 0x5Cu);

              goto LABEL_107;
            }
LABEL_58:
            v43 = 0;
LABEL_123:

            v95 = v173;
            goto LABEL_124;
          }
LABEL_53:
          if (!v19)
            goto LABEL_58;
          goto LABEL_54;
        }
LABEL_45:
        free(v23);
        goto LABEL_46;
      }
    }
    else
    {
      v8 = v7;
      if (v9)
        goto LABEL_4;
    }
    v9 = v7;
    goto LABEL_4;
  }
  v95 = v10;
  v170 = v8;
  v171 = v9;
  __nwlog_obj();
  v127 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v179 = "nw_endpoint_handler_get_alternate_path_state";
  v128 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v176 = 0;
  if (__nwlog_fault(v128, &type, &v176))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v129 = objc_claimAutoreleasedReturnValue();
      v130 = type;
      if (os_log_type_enabled(v129, type))
      {
        *(_DWORD *)buf = 136446210;
        v179 = "nw_endpoint_handler_get_alternate_path_state";
        _os_log_impl(&dword_182FBE000, v129, v130, "%{public}s called with null endpoint_handler", buf, 0xCu);
      }
    }
    else if (v176)
    {
      v131 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v129 = objc_claimAutoreleasedReturnValue();
      v132 = type;
      v133 = os_log_type_enabled(v129, type);
      if (v131)
      {
        if (v133)
        {
          *(_DWORD *)buf = 136446466;
          v179 = "nw_endpoint_handler_get_alternate_path_state";
          v180 = 2082;
          v181 = v131;
          _os_log_impl(&dword_182FBE000, v129, v132, "%{public}s called with null endpoint_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v131);
        goto LABEL_183;
      }
      if (v133)
      {
        *(_DWORD *)buf = 136446210;
        v179 = "nw_endpoint_handler_get_alternate_path_state";
        _os_log_impl(&dword_182FBE000, v129, v132, "%{public}s called with null endpoint_handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v129 = objc_claimAutoreleasedReturnValue();
      v141 = type;
      if (os_log_type_enabled(v129, type))
      {
        *(_DWORD *)buf = 136446210;
        v179 = "nw_endpoint_handler_get_alternate_path_state";
        _os_log_impl(&dword_182FBE000, v129, v141, "%{public}s called with null endpoint_handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_183:
  if (v128)
    free(v128);
  v43 = 0;
LABEL_124:

  return v43;
}

void sub_18305B03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, void *a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_is_viable(void *a1)
{
  id v1;
  void *v2;
  NWConcrete_nw_endpoint_handler *v3;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v5;
  unsigned int v6;
  uint64_t is_viable;
  id v8;
  const char *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  const char *v17;
  os_log_type_t v18;
  const char *v19;
  const char *v20;
  void *v22;
  os_log_type_t v23;
  char *backtrace_string;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  void *v33;
  __int16 v34;
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_endpoint_handler_is_viable";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v10, &type, &v28))
      goto LABEL_41;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_handler_is_viable";
        _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v28)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_endpoint_handler_is_viable";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_41;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_handler_is_viable";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_endpoint_handler_is_viable";
        _os_log_impl(&dword_182FBE000, v11, v27, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_40:

    goto LABEL_41;
  }
  v3 = (NWConcrete_nw_endpoint_handler *)v1;
  mode = v3->mode;

  if ((_DWORD)mode != 2)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v8 = (id)gLogObj;
    if (mode > 5)
      v9 = "unknown-mode";
    else
      v9 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v31 = "nw_endpoint_handler_is_viable";
    v32 = 2082;
    v33 = (void *)v9;
    v34 = 2082;
    v35 = "flow";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v10, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          if (mode > 5)
            v13 = "unknown-mode";
          else
            v13 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v31 = "nw_endpoint_handler_is_viable";
          v32 = 2082;
          v33 = (void *)v13;
          v34 = 2082;
          v35 = "flow";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v28)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v11, type);
        if (v14)
        {
          if (v16)
          {
            if (mode > 5)
              v17 = "unknown-mode";
            else
              v17 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            v31 = "nw_endpoint_handler_is_viable";
            v32 = 2082;
            v33 = (void *)v17;
            v34 = 2082;
            v35 = "flow";
            v36 = 2082;
            v37 = v14;
            _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v14);
          if (!v10)
            goto LABEL_43;
          goto LABEL_42;
        }
        if (v16)
        {
          if (mode > 5)
            v20 = "unknown-mode";
          else
            v20 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v31 = "nw_endpoint_handler_is_viable";
          v32 = 2082;
          v33 = (void *)v20;
          v34 = 2082;
          v35 = "flow";
          _os_log_impl(&dword_182FBE000, v11, v15, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v11, type))
        {
          if (mode > 5)
            v19 = "unknown-mode";
          else
            v19 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v31 = "nw_endpoint_handler_is_viable";
          v32 = 2082;
          v33 = (void *)v19;
          v34 = 2082;
          v35 = "flow";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
      goto LABEL_40;
    }
LABEL_41:
    if (!v10)
    {
LABEL_43:
      is_viable = 0;
      goto LABEL_44;
    }
LABEL_42:
    free(v10);
    goto LABEL_43;
  }
  v5 = nw_endpoint_handler_copy_flow(v3);
  os_unfair_lock_lock((os_unfair_lock_t)v5 + 220);
  v6 = *((unsigned __int8 *)v5 + 33);
  if (*((_BYTE *)v5 + 32) & 2 | v6 & 1)
  {
    is_viable = (v6 >> 1) & 1;
  }
  else if (*((_QWORD *)v5 + 117))
  {
    is_viable = nw_endpoint_handler_is_viable();
  }
  else
  {
    is_viable = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)v5 + 220);

LABEL_44:
  return is_viable;
}

void sub_18305B844(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_interface_index(void *a1)
{
  NWConcrete_nw_path *v1;
  unsigned int *v2;
  uint64_t v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (unsigned int *)v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_path_get_interface_index";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_get_interface_index";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_path_get_interface_index";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_get_interface_index";
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_get_interface_index";
          _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v5)
      free(v5);
    goto LABEL_22;
  }
  if (!nw_path_network_is_satisfied_update_reason(v1, 0))
  {
LABEL_22:
    v3 = 0;
    goto LABEL_23;
  }
  v3 = v2[80];
LABEL_23:

  return v3;
}

void sub_18305BB04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t *nw_frame_array_prepend(uint64_t *result, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v3 = result + 1;
  v4 = *result;
  if (a2)
  {
    *(_QWORD *)(a3 + 32) = v4;
    v5 = a3 + 32;
    v6 = (_QWORD *)(v4 + 40);
  }
  else
  {
    *(_QWORD *)(a3 + 16) = v4;
    v5 = a3 + 16;
    v6 = (_QWORD *)(v4 + 24);
  }
  if (v4)
    v3 = v6;
  *v3 = v5;
  *result = a3;
  *(_QWORD *)(v5 + 8) = result;
  return result;
}

id nw_connection_copy_connected_remote_endpoint(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v19 = __Block_byref_object_copy__24122;
    v20 = __Block_byref_object_dispose__24123;
    v21 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_copy_connected_remote_endpoint_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v14 = v1;
    v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_connected_remote_endpoint_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_connected_remote_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_connected_remote_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_remote_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_copy_connected_remote_endpoint_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  nw_endpoint_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v6 = nw_endpoint_handler_copy_connected_path(*(void **)(v2 + 144));
    v4 = v6;
    if (v6)
    {
      v7 = nw_path_copy_effective_remote_endpoint(v6);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
        goto LABEL_24;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (!v10 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v10 + 104)))
        goto LABEL_24;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v16 = 136446466;
      v17 = "nw_connection_copy_connected_remote_endpoint_block_invoke";
      v18 = 1024;
      v19 = v12;
      v13 = "%{public}s [C%u] Connection has no remote endpoint";
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (!v14 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)))
      {
        v4 = 0;
        goto LABEL_24;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
LABEL_23:

LABEL_24:
        return;
      }
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v16 = 136446466;
      v17 = "nw_connection_copy_connected_remote_endpoint_block_invoke";
      v18 = 1024;
      v19 = v15;
      v13 = "%{public}s [C%u] Connection has no connected path";
    }
    _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0x12u);
    goto LABEL_23;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v16 = 136446466;
      v17 = "nw_connection_copy_connected_remote_endpoint_block_invoke";
      v18 = 1024;
      v19 = v5;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_copy_connected_remote_endpoint on unconnected nw_connection", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_24;
  }
}

id nw_connection_copy_connected_local_endpoint(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v19 = __Block_byref_object_copy__24122;
    v20 = __Block_byref_object_dispose__24123;
    v21 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_copy_connected_local_endpoint_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v14 = v1;
    v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_connected_local_endpoint_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_connected_local_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_local_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_connected_local_endpoint";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_local_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_local_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_copy_connected_local_endpoint_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  NSObject *v6;
  nw_endpoint_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  const char *v13;
  uint64_t v14;
  int v15;
  int v16;
  const char *v17;
  __int16 v18;
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v6 = nw_endpoint_handler_copy_connected_path(*(void **)(v2 + 144));
    v4 = v6;
    if (v6)
    {
      v7 = nw_path_copy_effective_local_endpoint(v6);
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
      v9 = *(void **)(v8 + 40);
      *(_QWORD *)(v8 + 40) = v7;

      if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40))
        goto LABEL_24;
      v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (!v10 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v10 + 104)))
        goto LABEL_24;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
        goto LABEL_23;
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v16 = 136446466;
      v17 = "nw_connection_copy_connected_local_endpoint_block_invoke";
      v18 = 1024;
      v19 = v12;
      v13 = "%{public}s [C%u] Connection has no local endpoint";
    }
    else
    {
      v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
      if (!v14 || nw_path_parameters_get_logging_disabled(*(_QWORD *)(v14 + 104)))
      {
        v4 = 0;
        goto LABEL_24;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v11 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
LABEL_23:

LABEL_24:
        return;
      }
      v15 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v16 = 136446466;
      v17 = "nw_connection_copy_connected_local_endpoint_block_invoke";
      v18 = 1024;
      v19 = v15;
      v13 = "%{public}s [C%u] Connection has no connected path";
    }
    _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, v13, (uint8_t *)&v16, 0x12u);
    goto LABEL_23;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      v16 = 136446466;
      v17 = "nw_connection_copy_connected_local_endpoint_block_invoke";
      v18 = 1024;
      v19 = v5;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_copy_connected_local_endpoint on unconnected nw_connection", (uint8_t *)&v16, 0x12u);
    }
    goto LABEL_24;
  }
}

uint64_t ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_98(uint64_t a1, int a2, xpc_object_t value)
{
  xpc_array_append_value(*(xpc_object_t *)(*(_QWORD *)(a1 + 32) + 24), value);
  return 1;
}

uint64_t nw_endpoint_flow_attach_protocols(NWConcrete_nw_endpoint_handler *a1, nw_protocol *a2, nw_protocol *a3)
{
  NWConcrete_nw_endpoint_handler *v4;
  unsigned int mode;
  NWConcrete_nw_endpoint_handler *v6;
  NWConcrete_nw_endpoint_handler *v7;
  char v8;
  NSObject *v9;
  char *v10;
  char *v11;
  char v12;
  const char *v13;
  nw_endpoint_t v14;
  const char *logging_description;
  char *v16;
  unsigned int *v17;
  unsigned int *v18;
  uint64_t v19;
  const char *v20;
  void **v21;
  void **v22;
  const char *v23;
  void **v24;
  id v25;
  id *v26;
  id v27;
  id *v28;
  NWConcrete_nw_endpoint_handler *v29;
  uint64_t v30;
  NWConcrete_nw_endpoint_mode_handler *v31;
  id v32;
  const char *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  const char *v37;
  NWConcrete_nw_endpoint_handler *v38;
  OS_nw_path *v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  const char *v43;
  os_log_type_t v44;
  const char *v45;
  const char *v46;
  double v47;
  double Helper_x8__ne_filter_protocol_identifier;
  uint64_t v49;
  __int128 *inited;
  _BOOL4 v51;
  id *v52;
  id *v53;
  NSObject *v54;
  NSObject *v55;
  BOOL v56;
  _BOOL8 v57;
  nw_protocol *v58;
  NWConcrete_nw_endpoint_handler *v59;
  id *v60;
  id v61;
  NWConcrete_nw_endpoint_mode_handler *v62;
  void *v63;
  int v64;
  nw_protocol_identifier *identifier;
  const char *name;
  NSObject *v67;
  const char *id_string;
  const char *v69;
  const char *v70;
  const char *v71;
  id v72;
  NWConcrete_nw_endpoint_handler *v73;
  id v74;
  id *v75;
  NWConcrete_nw_endpoint_mode_handler *v76;
  NWConcrete_nw_endpoint_handler *v77;
  NWConcrete_nw_endpoint_mode_handler *v78;
  NSObject *v79;
  const char *v80;
  const char *v81;
  const char *v82;
  id v83;
  uint64_t v84;
  id *v85;
  NSObject *v86;
  const char *v87;
  nw_endpoint_t v88;
  id v89;
  void *v90;
  id v91;
  id *v92;
  NWConcrete_nw_path_flow_registration **v93;
  int v94;
  BOOL v95;
  void *v96;
  char *v97;
  NSObject *v98;
  os_log_type_t v99;
  char *backtrace_string;
  os_log_type_t v101;
  _BOOL4 v102;
  void *v103;
  char *v104;
  NSObject *v105;
  os_log_type_t v106;
  void *v107;
  char *v108;
  NSObject *v109;
  os_log_type_t v110;
  NSObject *v111;
  const char *v112;
  id v113;
  NWConcrete_nw_endpoint_handler *v114;
  id *v115;
  int v116;
  BOOL v117;
  char *v118;
  os_log_type_t v119;
  _BOOL4 v120;
  char *v121;
  os_log_type_t v122;
  _BOOL4 v123;
  os_log_type_t v124;
  id v125;
  const char *v126;
  char *v127;
  NSObject *v128;
  os_log_type_t v129;
  const char *v130;
  char *v131;
  os_log_type_t v132;
  _BOOL4 v133;
  const char *v134;
  os_log_type_t v135;
  const char *v136;
  const char *v137;
  NSObject *v139;
  nw_endpoint_t v140;
  const char *v141;
  const char *v142;
  const char *v143;
  id v144;
  os_log_type_t v145;
  os_log_type_t v146;
  int v147;
  NSObject *v148;
  const char *v149;
  nw_endpoint_t v150;
  id v151;
  void *v152;
  NWConcrete_nw_endpoint_handler *v153;
  int v154;
  BOOL v155;
  int v156;
  NSObject *v157;
  const char *v158;
  nw_endpoint_t v159;
  const char *v160;
  id v161;
  char v162;
  char logging_disabled;
  const char *v164;
  nw_endpoint_t v165;
  const char *v166;
  const char *v167;
  const char *v168;
  id v169;
  const char *v170;
  const char *v171;
  const char *v172;
  const char *v173;
  const char *v174;
  id v175;
  id *v176;
  NSObject *v177;
  NSObject *v178;
  nw_protocol_definition_t v179;
  __int128 *v180;
  NSObject *v181;
  uint64_t v182;
  NSObject *v183;
  nw_endpoint_t v184;
  const char *v185;
  id v186;
  BOOL v187;
  char v188;
  NSObject *v189;
  const char *v190;
  nw_endpoint_t v191;
  const char *v192;
  const char *v193;
  const char *v194;
  id v195;
  const char *v196;
  nw_endpoint_t v197;
  const char *v198;
  const char *v199;
  const char *v200;
  id v201;
  const char *v202;
  nw_endpoint_t v203;
  const char *v204;
  const char *v205;
  const char *v206;
  id v207;
  NSObject *v208;
  nw_endpoint_t v209;
  const char *v210;
  const char *v211;
  const char *v212;
  id v213;
  const char *v214;
  const char *v215;
  const char *v216;
  const char *v217;
  const char *v218;
  const char *v219;
  const char *v220;
  const char *v221;
  nw_endpoint_t v222;
  id *v223;
  const char *v224;
  NWConcrete_nw_path_flow_registration **v225;
  const char *v226;
  const char *v227;
  const char *v228;
  void *v229;
  NWConcrete_nw_path_flow_registration **v230;
  const char *v231;
  const char *v232;
  const char *v233;
  NWConcrete_nw_endpoint_handler *v234;
  id v235;
  const char *v236;
  const char *v237;
  void *v238;
  void *v239;
  void *v240;
  void *v241;
  void *v242;
  void *v243;
  int nexus_protocol_level;
  const char *v245;
  const char *v246;
  id v247;
  void *v248;
  id v249;
  id v250;
  NWConcrete_nw_path *v251;
  nw_protocol *v252;
  const char *v253;
  const char *v254;
  NWConcrete_nw_path_flow_registration **v255;
  const char *v256;
  const char *v257;
  const char *v258;
  const char *v259;
  const char *v260;
  NWConcrete_nw_endpoint_handler *v261;
  nw_endpoint_t v263;
  nw_endpoint_t v264;
  const char *v265;
  const char *v266;
  const char *v267;
  nw_endpoint_t v268;
  NSObject *v269;
  const char *v270;
  NWConcrete_nw_endpoint_mode_handler *v271;
  NWConcrete_nw_endpoint_handler *v272;
  _QWORD v273[4];
  NWConcrete_nw_endpoint_handler *v274;
  id v275;
  id *v276;
  NWConcrete_nw_path_flow_registration **v277;
  _QWORD *v278;
  os_log_type_t *v279;
  uint64_t *v280;
  uint64_t *v281;
  nw_protocol *v282;
  _QWORD v283[4];
  NWConcrete_nw_endpoint_handler *v284;
  id v285;
  id *v286;
  NWConcrete_nw_path_flow_registration **v287;
  _QWORD *v288;
  os_log_type_t *v289;
  uint64_t *v290;
  uint64_t *v291;
  nw_protocol *v292;
  _QWORD v293[4];
  NWConcrete_nw_endpoint_handler *v294;
  id v295;
  id *v296;
  NWConcrete_nw_path_flow_registration **v297;
  _QWORD *v298;
  os_log_type_t *v299;
  uint64_t *v300;
  uint64_t *v301;
  nw_protocol *v302;
  uint64_t v303;
  uint64_t *v304;
  uint64_t v305;
  char v306;
  _QWORD v307[4];
  NWConcrete_nw_endpoint_handler *v308;
  id v309;
  id *v310;
  NWConcrete_nw_endpoint_mode_handler *v311;
  _QWORD *v312;
  os_log_type_t *v313;
  uint64_t *v314;
  uint64_t *v315;
  nw_protocol *v316;
  uint64_t v317;
  uint64_t *v318;
  uint64_t v319;
  char v320;
  _QWORD v321[4];
  NWConcrete_nw_endpoint_handler *v322;
  id v323;
  id *v324;
  NWConcrete_nw_endpoint_mode_handler *v325;
  _QWORD *v326;
  os_log_type_t *v327;
  uint64_t *v328;
  os_log_type_t *v329;
  nw_protocol *v330;
  _QWORD aBlock[4];
  NWConcrete_nw_endpoint_handler *v332;
  id *v333;
  id v334;
  NWConcrete_nw_endpoint_mode_handler *v335;
  id v336;
  _BYTE *v337;
  uint64_t *v338;
  os_log_type_t *v339;
  uint64_t *v340;
  os_log_type_t *v341;
  _QWORD *v342;
  __int128 *v343;
  nw_protocol *v344;
  BOOL v345;
  _QWORD v346[3];
  char v347;
  os_log_type_t v348[8];
  os_log_type_t *v349;
  uint64_t v350;
  char v351;
  uint64_t v352;
  uint64_t *v353;
  uint64_t v354;
  char v355;
  uint64_t v356;
  uint64_t *v357;
  uint64_t v358;
  char *v359;
  os_log_type_t type[8];
  os_log_type_t *v361;
  uint64_t v362;
  uint64_t (*v363)(uint64_t, uint64_t);
  void (*v364)(uint64_t);
  id v365;
  _BYTE buf[24];
  const char *v367;
  _BYTE v368[10];
  __int16 v369;
  const char *v370;
  __int16 v371;
  const char *v372;
  __int16 v373;
  id v374;
  __int16 v375;
  __int128 *v376;
  _BYTE v377[24];
  nw_protocol *v378;
  uint64_t v379;

  v379 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v272 = v4;
  if (!v4)
  {
    __nwlog_obj();
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
    v97 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v377[0] = 0;
    if (__nwlog_fault(v97, type, v377))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v98 = objc_claimAutoreleasedReturnValue();
        v99 = type[0];
        if (os_log_type_enabled(v98, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v98, v99, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v377[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v98 = objc_claimAutoreleasedReturnValue();
        v101 = type[0];
        v102 = os_log_type_enabled(v98, type[0]);
        if (backtrace_string)
        {
          if (v102)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v98, v101, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_171;
        }
        if (v102)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v98, v101, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v98 = objc_claimAutoreleasedReturnValue();
        v124 = type[0];
        if (os_log_type_enabled(v98, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v98, v124, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_171:
    if (v97)
      free(v97);
    mode = 0;
LABEL_174:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v125 = (id)gLogObj;
    if (mode > 5)
      v126 = "unknown-mode";
    else
      v126 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v126;
    *(_WORD *)&buf[22] = 2082;
    v367 = "flow";
    v127 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v377[0] = 0;
    if (__nwlog_fault(v127, type, v377))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v128 = (id)gLogObj;
        v129 = type[0];
        if (os_log_type_enabled(v128, type[0]))
        {
          if (mode > 5)
            v130 = "unknown-mode";
          else
            v130 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v130;
          *(_WORD *)&buf[22] = 2082;
          v367 = "flow";
          _os_log_impl(&dword_182FBE000, v128, v129, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v377[0])
      {
        v131 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v128 = (id)gLogObj;
        v132 = type[0];
        v133 = os_log_type_enabled(v128, type[0]);
        if (v131)
        {
          if (v133)
          {
            if (mode > 5)
              v134 = "unknown-mode";
            else
              v134 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v134;
            *(_WORD *)&buf[22] = 2082;
            v367 = "flow";
            *(_WORD *)v368 = 2082;
            *(_QWORD *)&v368[2] = v131;
            _os_log_impl(&dword_182FBE000, v128, v132, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v131);
          if (!v127)
            goto LABEL_208;
          goto LABEL_207;
        }
        if (v133)
        {
          if (mode > 5)
            v137 = "unknown-mode";
          else
            v137 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v137;
          *(_WORD *)&buf[22] = 2082;
          v367 = "flow";
          _os_log_impl(&dword_182FBE000, v128, v132, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v128 = (id)gLogObj;
        v135 = type[0];
        if (os_log_type_enabled(v128, type[0]))
        {
          if (mode > 5)
            v136 = "unknown-mode";
          else
            v136 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v136;
          *(_WORD *)&buf[22] = 2082;
          v367 = "flow";
          _os_log_impl(&dword_182FBE000, v128, v135, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v127)
    {
LABEL_208:
      LOBYTE(v64) = 0;
      goto LABEL_209;
    }
LABEL_207:
    free(v127);
    goto LABEL_208;
  }
  mode = v4->mode;
  v6 = v4;

  if (mode != 2)
    goto LABEL_174;
  v252 = a2;
  v7 = v6;
  v8 = *((_BYTE *)v7 + 268);

  v261 = v7;
  if ((v8 & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v9 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      v10 = v7;

      v11 = v10;
      v12 = *((_BYTE *)v7 + 268);

      if ((v12 & 1) != 0)
        v13 = "dry-run ";
      else
        v13 = "";
      v14 = nw_endpoint_handler_copy_endpoint(v11);
      logging_description = nw_endpoint_get_logging_description(v14);
      v16 = v10 + 168;
      v17 = v11;
      v18 = v17;
      v19 = v17[30];
      if (v19 > 5)
        v20 = "unknown-state";
      else
        v20 = off_1E149FC48[v19];

      v21 = v18;
      v22 = v21;
      v23 = "path";
      switch(v272->mode)
      {
        case 0:
          break;
        case 1:
          v23 = "resolver";
          break;
        case 2:
          v23 = nw_endpoint_flow_mode_string(v21[31]);
          break;
        case 3:
          v23 = "proxy";
          break;
        case 4:
          v23 = "fallback";
          break;
        case 5:
          v23 = "transform";
          break;
        default:
          v23 = "unknown-mode";
          break;
      }

      v24 = v22;
      os_unfair_lock_lock((os_unfair_lock_t)v24 + 28);
      v25 = v24[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v24 + 28);

      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v16;
      *(_WORD *)&buf[22] = 2082;
      v367 = v13;
      *(_WORD *)v368 = 2082;
      *(_QWORD *)&v368[2] = logging_description;
      v369 = 2082;
      v370 = v20;
      v371 = 2082;
      v372 = v23;
      v373 = 2114;
      v374 = v25;
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

    }
    v7 = v261;
  }
  v271 = nw_endpoint_handler_copy_flow(v7);
  v26 = v7;
  v27 = v26[3];

  *(_QWORD *)type = 0;
  v361 = type;
  v362 = 0x3032000000;
  v363 = __Block_byref_object_copy__79983;
  v364 = __Block_byref_object_dispose__79984;
  v249 = v27;
  v365 = v249;
  v28 = v26;
  v250 = v28[4];

  v29 = v28;
  v30 = v272->mode;

  if ((_DWORD)v30 == 2)
  {
    v31 = nw_endpoint_handler_copy_flow(v29);
    if ((*((_BYTE *)v31 + 33) & 0x40) != 0)
    {
      v38 = v29;
      os_unfair_lock_lock(&v38->lock);
      v39 = v38->current_path;
      os_unfair_lock_unlock(&v38->lock);

      nexus_protocol_level = nw_path_get_nexus_protocol_level(v39);
    }
    else
    {
      nexus_protocol_level = 4;
    }

    goto LABEL_62;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v32 = (id)gLogObj;
  if (v30 > 5)
    v33 = "unknown-mode";
  else
    v33 = off_1E149FC18[v30];
  *(_DWORD *)buf = 136446722;
  *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_protocol_level";
  *(_WORD *)&buf[12] = 2082;
  *(_QWORD *)&buf[14] = v33;
  *(_WORD *)&buf[22] = 2082;
  v367 = "flow";
  v34 = (char *)_os_log_send_and_compose_impl();

  v377[0] = 16;
  LOBYTE(v356) = 0;
  if (__nwlog_fault(v34, v377, &v356))
  {
    if (v377[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v35 = (id)gLogObj;
      v36 = v377[0];
      if (os_log_type_enabled(v35, (os_log_type_t)v377[0]))
      {
        if (v30 > 5)
          v37 = "unknown-mode";
        else
          v37 = off_1E149FC18[v30];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_protocol_level";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v37;
        *(_WORD *)&buf[22] = 2082;
        v367 = "flow";
        _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    else if ((_BYTE)v356)
    {
      v40 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v35 = (id)gLogObj;
      v41 = v377[0];
      v42 = os_log_type_enabled(v35, (os_log_type_t)v377[0]);
      if (v40)
      {
        if (v42)
        {
          if (v30 > 5)
            v43 = "unknown-mode";
          else
            v43 = off_1E149FC18[v30];
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_protocol_level";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v43;
          *(_WORD *)&buf[22] = 2082;
          v367 = "flow";
          *(_WORD *)v368 = 2082;
          *(_QWORD *)&v368[2] = v40;
          _os_log_impl(&dword_182FBE000, v35, v41, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v40);
        if (!v34)
          goto LABEL_61;
        goto LABEL_60;
      }
      if (v42)
      {
        if (v30 > 5)
          v46 = "unknown-mode";
        else
          v46 = off_1E149FC18[v30];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_protocol_level";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v46;
        *(_WORD *)&buf[22] = 2082;
        v367 = "flow";
        _os_log_impl(&dword_182FBE000, v35, v41, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v35 = (id)gLogObj;
      v44 = v377[0];
      if (os_log_type_enabled(v35, (os_log_type_t)v377[0]))
      {
        if (v30 > 5)
          v45 = "unknown-mode";
        else
          v45 = off_1E149FC18[v30];
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_protocol_level";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v45;
        *(_WORD *)&buf[22] = 2082;
        v367 = "flow";
        _os_log_impl(&dword_182FBE000, v35, v44, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }

  }
  if (v34)
LABEL_60:
    free(v34);
LABEL_61:
  nexus_protocol_level = 0;
LABEL_62:

  v356 = 0;
  v357 = &v356;
  v358 = 0x2020000000;
  v359 = (char *)v271 + 376;
  nw_parameters_get_upper_transport_protocol_options(v250);
  v248 = (void *)objc_claimAutoreleasedReturnValue();
  v251 = (NWConcrete_nw_path *)nw_endpoint_flow_copy_path(v29);
  if (nw_endpoint_flow_should_add_filter(v250, v251))
  {
    Helper_x8__ne_filter_protocol_identifier = gotLoadHelper_x8__ne_filter_protocol_identifier(v47);
    if (*(_QWORD *)(v49 + 1960))
      inited = (__int128 *)ne_filter_protocol_identifier_delayInitStub(Helper_x8__ne_filter_protocol_identifier);
    else
      inited = 0;
    v51 = inited != 0;
  }
  else
  {
    v51 = 0;
    inited = 0;
  }
  v352 = 0;
  v353 = &v352;
  v354 = 0x2020000000;
  v355 = 0;
  v52 = (id *)v250;
  v53 = v52;
  if (v52)
  {
    v54 = v52[19];
    if (v54)
    {
      v55 = v54;
      *(_QWORD *)v377 = 0;
      *(_QWORD *)&v377[8] = v377;
      *(_QWORD *)&v377[16] = 0x2020000000;
      LOBYTE(v378) = 0;
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __nw_parameters_has_proxy_protocol_in_stack_block_invoke;
      v367 = (const char *)&unk_1E14A0FD8;
      *(_QWORD *)v368 = v377;
      nw_protocol_stack_iterate_application_protocols(v54, buf);
      v56 = *(_BYTE *)(*(_QWORD *)&v377[8] + 24) == 0;
      _Block_object_dispose(v377, 8);

      if (!v56)
      {
        v57 = nw_endpoint_copy_proxy_original_endpoint(*((void **)v361 + 5));
        if (v57)
        {
          objc_storeStrong((id *)v271 + 121, (id)v57);
          objc_storeStrong((id *)v361 + 5, (id)v57);
        }

      }
      goto LABEL_74;
    }
    __nwlog_obj();
    v107 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v377 = 136446210;
    *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
    v108 = (char *)_os_log_send_and_compose_impl();

    v348[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v346[0]) = 0;
    if (!__nwlog_fault(v108, v348, v346))
      goto LABEL_232;
    if (v348[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v109 = objc_claimAutoreleasedReturnValue();
      v110 = v348[0];
      if (os_log_type_enabled(v109, v348[0]))
      {
        *(_DWORD *)v377 = 136446210;
        *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v109, v110, "%{public}s called with null stack", v377, 0xCu);
      }
    }
    else if (LOBYTE(v346[0]))
    {
      v121 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v109 = objc_claimAutoreleasedReturnValue();
      v122 = v348[0];
      v123 = os_log_type_enabled(v109, v348[0]);
      if (v121)
      {
        if (v123)
        {
          *(_DWORD *)v377 = 136446466;
          *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
          *(_WORD *)&v377[12] = 2082;
          *(_QWORD *)&v377[14] = v121;
          _os_log_impl(&dword_182FBE000, v109, v122, "%{public}s called with null stack, dumping backtrace:%{public}s", v377, 0x16u);
        }

        free(v121);
        goto LABEL_232;
      }
      if (v123)
      {
        *(_DWORD *)v377 = 136446210;
        *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v109, v122, "%{public}s called with null stack, no backtrace", v377, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v109 = objc_claimAutoreleasedReturnValue();
      v146 = v348[0];
      if (os_log_type_enabled(v109, v348[0]))
      {
        *(_DWORD *)v377 = 136446210;
        *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v109, v146, "%{public}s called with null stack, backtrace limit exceeded", v377, 0xCu);
      }
    }

LABEL_232:
    if (v108)
      free(v108);

    goto LABEL_74;
  }
  __nwlog_obj();
  v103 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)v377 = 136446210;
  *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
  v104 = (char *)_os_log_send_and_compose_impl();

  v348[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v346[0]) = 0;
  if (__nwlog_fault(v104, v348, v346))
  {
    if (v348[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v106 = v348[0];
      if (os_log_type_enabled(v105, v348[0]))
      {
        *(_DWORD *)v377 = 136446210;
        *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s called with null parameters", v377, 0xCu);
      }
    }
    else if (LOBYTE(v346[0]))
    {
      v118 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v119 = v348[0];
      v120 = os_log_type_enabled(v105, v348[0]);
      if (v118)
      {
        if (v120)
        {
          *(_DWORD *)v377 = 136446466;
          *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
          *(_WORD *)&v377[12] = 2082;
          *(_QWORD *)&v377[14] = v118;
          _os_log_impl(&dword_182FBE000, v105, v119, "%{public}s called with null parameters, dumping backtrace:%{public}s", v377, 0x16u);
        }

        free(v118);
        goto LABEL_226;
      }
      if (v120)
      {
        *(_DWORD *)v377 = 136446210;
        *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v105, v119, "%{public}s called with null parameters, no backtrace", v377, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v105 = objc_claimAutoreleasedReturnValue();
      v145 = v348[0];
      if (os_log_type_enabled(v105, v348[0]))
      {
        *(_DWORD *)v377 = 136446210;
        *(_QWORD *)&v377[4] = "nw_parameters_has_proxy_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v105, v145, "%{public}s called with null parameters, backtrace limit exceeded", v377, 0xCu);
      }
    }

  }
LABEL_226:
  if (v104)
    free(v104);
LABEL_74:
  *((_BYTE *)v271 + 33) &= ~1u;
  *(_QWORD *)v377 = 0;
  *(_QWORD *)&v377[8] = v377;
  *(_QWORD *)&v377[16] = 0x2020000000;
  v378 = 0;
  if ((nw_protocol *)v357[3] == v252)
    v58 = 0;
  else
    v58 = v252;
  v378 = v58;
  *(_QWORD *)v348 = 0;
  v349 = v348;
  v350 = 0x2020000000;
  v351 = 0;
  v346[0] = 0;
  v346[1] = v346;
  v346[2] = 0x2020000000;
  v347 = 0;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 3221225472;
  aBlock[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke;
  aBlock[3] = &unk_1E14AB6B0;
  v59 = v29;
  v332 = v59;
  v337 = v377;
  v338 = &v356;
  v339 = type;
  v345 = v51;
  v340 = &v352;
  v343 = inited;
  v60 = v53;
  v333 = v60;
  v341 = v348;
  v61 = v249;
  v334 = v61;
  v342 = v346;
  v62 = v271;
  v335 = v62;
  v344 = a3;
  v247 = v248;
  v336 = v247;
  v63 = _Block_copy(aBlock);
  nw_parameters_internal_iterate_protocol_stack(v60, 5, 0, v63);
  if (*((_BYTE *)v349 + 24))
    goto LABEL_78;
  if ((*((_BYTE *)v271 + 33) & 1) != 0)
    goto LABEL_106;
  if ((*((_BYTE *)v62 + 32) & 2) == 0)
  {
    if (v252
      && (identifier = v252->identifier, identifier->level == 4)
      && (identifier ? (name = v252->identifier->name) : (name = "invalid"), strcmp(name, "endpoint_flow")))
    {
      if ((nw_endpoint_handler_get_logging_disabled(v59) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v67 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v59);
          v238 = v63;
          v253 = nw_endpoint_handler_dry_run_string(v59);
          v263 = nw_endpoint_handler_copy_endpoint(v59);
          v69 = nw_endpoint_get_logging_description(v263);
          v70 = nw_endpoint_handler_state_string(v59);
          v71 = nw_endpoint_handler_mode_string(v59);
          v72 = nw_endpoint_handler_copy_current_path(v59);
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = id_string;
          *(_WORD *)&buf[22] = 2082;
          v367 = v253;
          *(_WORD *)v368 = 2082;
          *(_QWORD *)&v368[2] = v69;
          v369 = 2082;
          v370 = v70;
          v371 = 2082;
          v372 = v71;
          v373 = 2114;
          v374 = v72;
          _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] attach protocol is at application level, skip joining the first non-persistent protocol", buf, 0x48u);

          v63 = v238;
        }

      }
    }
    else
    {
      v321[0] = MEMORY[0x1E0C809B0];
      v321[1] = 3221225472;
      v321[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_219;
      v321[3] = &unk_1E14AB6D8;
      v330 = a3;
      v77 = v59;
      v322 = v77;
      v326 = v346;
      v323 = v61;
      v327 = type;
      v324 = v60;
      v328 = &v356;
      v329 = v348;
      v78 = v62;
      v325 = v78;
      nw_parameters_internal_iterate_protocol_stack(v324, 4, 0, v321);
      if ((*((_BYTE *)v271 + 33) & 1) == 0)
      {
        if ((nw_endpoint_handler_get_logging_disabled(v77) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v79 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
          {
            v80 = nw_endpoint_handler_get_id_string(v77);
            v239 = v63;
            v254 = nw_endpoint_handler_dry_run_string(v77);
            v264 = nw_endpoint_handler_copy_endpoint(v77);
            v245 = nw_endpoint_get_logging_description(v264);
            v81 = nw_endpoint_handler_state_string(v77);
            v82 = nw_endpoint_handler_mode_string(v77);
            v83 = nw_endpoint_handler_copy_current_path(v77);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v80;
            *(_WORD *)&buf[22] = 2082;
            v367 = v254;
            *(_WORD *)v368 = 2082;
            *(_QWORD *)&v368[2] = v245;
            v369 = 2082;
            v370 = v81;
            v371 = 2082;
            v372 = v82;
            v373 = 2114;
            v374 = v83;
            _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] stopping after adding persistent application protocols", buf, 0x48u);

            v63 = v239;
          }

        }
        *((_QWORD *)v78 + 94) = v357[3];
      }

    }
    goto LABEL_106;
  }
  nw_parameters_internal_iterate_protocol_stack(v60, 4, 0, v63);
  if (!*((_BYTE *)v349 + 24))
  {
    if ((*((_BYTE *)v271 + 33) & 1) == 0)
    {
      v317 = 0;
      v318 = &v317;
      v319 = 0x2020000000;
      v320 = 0;
      v307[0] = MEMORY[0x1E0C809B0];
      v307[1] = 3221225472;
      v307[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_220;
      v307[3] = &unk_1E14AB6D8;
      v316 = a3;
      v73 = v59;
      v308 = v73;
      v312 = v346;
      v74 = v61;
      v309 = v74;
      v313 = type;
      v75 = v60;
      v310 = v75;
      v314 = &v356;
      v315 = &v317;
      v76 = v62;
      v311 = v76;
      nw_parameters_internal_iterate_protocol_stack(v75, 3, 1, v307);
      if (*((_BYTE *)v318 + 24))
      {
        LOBYTE(v64) = 0;
LABEL_271:

        _Block_object_dispose(&v317, 8);
        goto LABEL_107;
      }
      if ((*((_BYTE *)v271 + 33) & 1) == 0)
      {
        v255 = (NWConcrete_nw_path_flow_registration **)v76;
        if (v51 && !*((_BYTE *)v353 + 24) && !nw_parameters_has_proxy_protocol_in_effective_config(v75))
        {
          v240 = v63;
          v84 = nw_endpoint_flow_add_one_protocol(v73, inited, 0, 0, *((void **)v361 + 5), v75, v357[3]);
          if (!v84)
          {
            if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v139 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
              {
                v265 = nw_endpoint_handler_get_id_string(v73);
                v256 = nw_endpoint_handler_dry_run_string(v73);
                v140 = nw_endpoint_handler_copy_endpoint(v73);
                v141 = nw_endpoint_get_logging_description(v140);
                v142 = nw_endpoint_handler_state_string(v73);
                v143 = nw_endpoint_handler_mode_string(v73);
                v144 = nw_endpoint_handler_copy_current_path(v73);
                *(_DWORD *)buf = 136448002;
                *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v265;
                *(_WORD *)&buf[22] = 2082;
                v367 = v256;
                *(_WORD *)v368 = 2082;
                *(_QWORD *)&v368[2] = v141;
                v369 = 2082;
                v370 = v142;
                v371 = 2082;
                v372 = v143;
                v373 = 2114;
                v374 = v144;
                v375 = 2082;
                v376 = inited;
                _os_log_impl(&dword_182FBE000, v139, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach filter protocol %{public}s", buf, 0x52u);

                v63 = v240;
LABEL_293:
                LOBYTE(v64) = 0;
                goto LABEL_310;
              }
LABEL_294:
              LOBYTE(v64) = 0;
              v63 = v240;
              goto LABEL_310;
            }
LABEL_311:
            LOBYTE(v64) = 0;
            v63 = v240;
            goto LABEL_271;
          }
          v85 = v75;
          v357[3] = v84;
          if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v86 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
            {
              v87 = nw_endpoint_handler_get_id_string(v73);
              v233 = nw_endpoint_handler_dry_run_string(v73);
              v88 = nw_endpoint_handler_copy_endpoint(v73);
              v228 = nw_endpoint_get_logging_description(v88);
              v224 = nw_endpoint_handler_state_string(v73);
              v221 = nw_endpoint_handler_mode_string(v73);
              v89 = nw_endpoint_handler_copy_current_path(v73);
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v87;
              *(_WORD *)&buf[22] = 2082;
              v367 = v233;
              *(_WORD *)v368 = 2082;
              *(_QWORD *)&v368[2] = v228;
              v369 = 2082;
              v370 = v224;
              v371 = 2082;
              v372 = v221;
              v373 = 2114;
              v90 = v89;
              v374 = v89;
              v375 = 2082;
              v376 = inited;
              _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached filter protocol: %{public}s", buf, 0x52u);

              v63 = v240;
            }

          }
          *((_BYTE *)v353 + 24) = 1;
          v75 = v85;
        }
        if ((*((_BYTE *)v271 + 33) & 1) == 0)
        {
          if ((nexus_protocol_level - 1) <= 2)
          {
            v303 = 0;
            v304 = &v303;
            v305 = 0x2020000000;
            v306 = 0;
            v293[0] = MEMORY[0x1E0C809B0];
            v293[1] = 3221225472;
            v293[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_221;
            v293[3] = &unk_1E14AB6D8;
            v302 = a3;
            v234 = v73;
            v294 = v234;
            v298 = v346;
            v91 = v74;
            v295 = v91;
            v299 = type;
            v92 = v75;
            v296 = v92;
            v300 = &v356;
            v301 = &v303;
            v93 = v255;
            v297 = v93;
            v94 = nw_parameters_internal_iterate_protocol_stack(v92, 3, 0, v293);
            v225 = v93;
            v229 = v91;
            if (*((_BYTE *)v304 + 24))
            {
              v95 = 0;
              LOBYTE(v64) = 0;
            }
            else
            {
              v64 = *((unsigned __int8 *)v271 + 33);
              v95 = (v64 & 1) == 0;
              if (((v64 | v94) & 1) == 0)
              {
                v241 = v63;
                if ((nw_endpoint_handler_get_logging_disabled(v234) & 1) != 0)
                {
                  LOBYTE(v64) = 0;
                  v95 = 1;
                }
                else
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v111 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v111, OS_LOG_TYPE_ERROR))
                  {
                    v219 = nw_endpoint_handler_get_id_string(v234);
                    v217 = nw_endpoint_handler_dry_run_string(v234);
                    v222 = nw_endpoint_handler_copy_endpoint(v234);
                    v215 = nw_endpoint_get_logging_description(v222);
                    v214 = nw_endpoint_handler_state_string(v234);
                    v112 = nw_endpoint_handler_mode_string(v234);
                    v113 = nw_endpoint_handler_copy_current_path(v234);
                    *(_DWORD *)buf = 136447746;
                    *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v219;
                    *(_WORD *)&buf[22] = 2082;
                    v367 = v217;
                    *(_WORD *)v368 = 2082;
                    *(_QWORD *)&v368[2] = v215;
                    v369 = 2082;
                    v370 = v214;
                    v371 = 2082;
                    v372 = v112;
                    v373 = 2114;
                    v374 = v113;
                    _os_log_impl(&dword_182FBE000, v111, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No transport protocols in protocol stack", buf, 0x48u);

                  }
                  v63 = v241;
                  LOBYTE(v64) = 0;
                  v95 = 1;
                }
              }
            }

            _Block_object_dispose(&v303, 8);
            if (!v95)
              goto LABEL_271;
            if ((nexus_protocol_level - 1) <= 1)
            {
              v223 = v75;
              v242 = v63;
              v303 = 0;
              v304 = &v303;
              v305 = 0x2020000000;
              v306 = 0;
              v283[0] = MEMORY[0x1E0C809B0];
              v283[1] = 3221225472;
              v283[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_222;
              v283[3] = &unk_1E14AB6D8;
              v292 = a3;
              v114 = v234;
              v284 = v114;
              v288 = v346;
              v235 = v229;
              v285 = v235;
              v289 = type;
              v115 = v92;
              v286 = v115;
              v290 = &v356;
              v291 = &v303;
              v230 = v225;
              v287 = v230;
              v116 = nw_parameters_internal_iterate_protocol_stack(v115, 2, 0, v283);
              if (*((_BYTE *)v304 + 24))
              {
                v117 = 0;
                LOBYTE(v64) = 0;
              }
              else
              {
                v147 = *((unsigned __int8 *)v271 + 33);
                v117 = (v147 & 1) == 0;
                if (((v147 | v116) & 1) != 0)
                {
                  LOBYTE(v64) = v64 | v147;
                }
                else
                {
                  if ((nw_endpoint_handler_get_logging_disabled(v114) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v148 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v148, OS_LOG_TYPE_ERROR))
                    {
                      v149 = nw_endpoint_handler_get_id_string(v114);
                      v226 = nw_endpoint_handler_dry_run_string(v114);
                      v150 = nw_endpoint_handler_copy_endpoint(v114);
                      v220 = nw_endpoint_get_logging_description(v150);
                      v218 = nw_endpoint_handler_state_string(v114);
                      v216 = nw_endpoint_handler_mode_string(v114);
                      v151 = nw_endpoint_handler_copy_current_path(v114);
                      *(_DWORD *)buf = 136447746;
                      *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
                      *(_WORD *)&buf[12] = 2082;
                      *(_QWORD *)&buf[14] = v149;
                      *(_WORD *)&buf[22] = 2082;
                      v367 = v226;
                      *(_WORD *)v368 = 2082;
                      *(_QWORD *)&v368[2] = v220;
                      v369 = 2082;
                      v370 = v218;
                      v371 = 2082;
                      v372 = v216;
                      v373 = 2114;
                      v152 = v151;
                      v374 = v151;
                      _os_log_impl(&dword_182FBE000, v148, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No internet protocols in protocol stack", buf, 0x48u);

                    }
                  }
                  v117 = 1;
                }
              }

              v63 = v242;
              _Block_object_dispose(&v303, 8);
              if (!v117)
                goto LABEL_271;
              v75 = v223;
              if (nexus_protocol_level == 1)
              {
                v303 = 0;
                v304 = &v303;
                v305 = 0x2020000000;
                v306 = 0;
                v273[0] = MEMORY[0x1E0C809B0];
                v273[1] = 3221225472;
                v273[2] = ___ZL33nw_endpoint_flow_attach_protocolsP30NWConcrete_nw_endpoint_handlerP11nw_protocolS2__block_invoke_223;
                v273[3] = &unk_1E14AB6D8;
                v282 = a3;
                v153 = v114;
                v274 = v153;
                v278 = v346;
                v275 = v235;
                v279 = type;
                v276 = v115;
                v280 = &v356;
                v281 = &v303;
                v277 = v230;
                v154 = nw_parameters_internal_iterate_protocol_stack(v276, 1, 0, v273);
                if (*((_BYTE *)v304 + 24))
                {
                  v155 = 0;
                  LOBYTE(v64) = 0;
                }
                else
                {
                  v156 = *((unsigned __int8 *)v271 + 33);
                  v155 = (v156 & 1) == 0;
                  if (((v156 | v154) & 1) != 0)
                  {
                    LOBYTE(v64) = v64 | v156;
                  }
                  else
                  {
                    if ((nw_endpoint_handler_get_logging_disabled(v153) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v157 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v157, OS_LOG_TYPE_ERROR))
                      {
                        v158 = nw_endpoint_handler_get_id_string(v153);
                        v266 = nw_endpoint_handler_dry_run_string(v153);
                        v159 = nw_endpoint_handler_copy_endpoint(v153);
                        v236 = nw_endpoint_get_logging_description(v159);
                        v231 = nw_endpoint_handler_state_string(v153);
                        v160 = nw_endpoint_handler_mode_string(v153);
                        v161 = nw_endpoint_handler_copy_current_path(v153);
                        *(_DWORD *)buf = 136447746;
                        *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v158;
                        *(_WORD *)&buf[22] = 2082;
                        v367 = v266;
                        *(_WORD *)v368 = 2082;
                        *(_QWORD *)&v368[2] = v236;
                        v369 = 2082;
                        v370 = v231;
                        v371 = 2082;
                        v372 = v160;
                        v373 = 2114;
                        v374 = v161;
                        _os_log_impl(&dword_182FBE000, v157, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No link protocols in protocol stack", buf, 0x48u);

                      }
                    }
                    v155 = 1;
                  }
                }

                v63 = v242;
                _Block_object_dispose(&v303, 8);
                v75 = v223;
                if (!v155)
                  goto LABEL_271;
              }
            }
          }
          if ((*((_BYTE *)v255 + 34) & 2) == 0)
          {
            v240 = v63;
            if ((*((_BYTE *)v271 + 33) & 0x40) == 0)
            {
              v162 = nw_endpoint_flow_attach_socket_protocol(v73, (nw_protocol *)v357[3]);
              logging_disabled = nw_endpoint_handler_get_logging_disabled(v73);
              if ((v162 & 1) != 0)
              {
                if ((logging_disabled & 1) != 0)
                {
                  LOBYTE(v64) = 1;
                  goto LABEL_271;
                }
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v139 = (id)gconnectionLogObj;
                if (!os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
                {
                  LOBYTE(v64) = 1;
                  goto LABEL_310;
                }
                v267 = nw_endpoint_handler_get_id_string(v73);
                v164 = nw_endpoint_handler_dry_run_string(v73);
                v165 = nw_endpoint_handler_copy_endpoint(v73);
                v166 = nw_endpoint_get_logging_description(v165);
                v167 = nw_endpoint_handler_state_string(v73);
                v168 = nw_endpoint_handler_mode_string(v73);
                v169 = nw_endpoint_handler_copy_current_path(v73);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v267;
                *(_WORD *)&buf[22] = 2082;
                v367 = v164;
                *(_WORD *)v368 = 2082;
                *(_QWORD *)&v368[2] = v166;
                v369 = 2082;
                v370 = v167;
                v371 = 2082;
                v372 = v168;
                v373 = 2114;
                v374 = v169;
                _os_log_impl(&dword_182FBE000, v139, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached socket protocol", buf, 0x48u);

                v63 = v240;
                goto LABEL_269;
              }
              if ((logging_disabled & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v139 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
                {
                  v270 = nw_endpoint_handler_get_id_string(v73);
                  v196 = nw_endpoint_handler_dry_run_string(v73);
                  v197 = nw_endpoint_handler_copy_endpoint(v73);
                  v198 = nw_endpoint_get_logging_description(v197);
                  v199 = nw_endpoint_handler_state_string(v73);
                  v200 = nw_endpoint_handler_mode_string(v73);
                  v201 = nw_endpoint_handler_copy_current_path(v73);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v270;
                  *(_WORD *)&buf[22] = 2082;
                  v367 = v196;
                  *(_WORD *)v368 = 2082;
                  *(_QWORD *)&v368[2] = v198;
                  v369 = 2082;
                  v370 = v199;
                  v371 = 2082;
                  v372 = v200;
                  v373 = 2114;
                  v374 = v201;
                  _os_log_impl(&dword_182FBE000, v139, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach socket protocol", buf, 0x48u);

                  v63 = v240;
                  goto LABEL_293;
                }
                goto LABEL_294;
              }
              goto LABEL_311;
            }
            v176 = v75;
            v177 = nw_path_flow_registration_copy_assigned_protocol(v251, v255[104]);
            v269 = v177;
            if (v177)
            {
              v178 = v177;
              v179 = nw_protocol_options_copy_definition(v177);
              v180 = (__int128 *)nw_protocol_definition_get_identifier(v179);
              v181 = v179;
              v182 = nw_endpoint_flow_add_one_protocol(v73, v180, v178, v179, *((void **)v361 + 5), v176, v357[3]);
              if (!v182)
              {
                if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v208 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v208, OS_LOG_TYPE_ERROR))
                  {
                    v260 = nw_endpoint_handler_get_id_string(v73);
                    v246 = nw_endpoint_handler_dry_run_string(v73);
                    v209 = nw_endpoint_handler_copy_endpoint(v73);
                    v210 = nw_endpoint_get_logging_description(v209);
                    v211 = nw_endpoint_handler_state_string(v73);
                    v212 = nw_endpoint_handler_mode_string(v73);
                    v213 = nw_endpoint_handler_copy_current_path(v73);
                    *(_DWORD *)buf = 136447746;
                    *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = v260;
                    *(_WORD *)&buf[22] = 2082;
                    v367 = v246;
                    *(_WORD *)v368 = 2082;
                    *(_QWORD *)&v368[2] = v210;
                    v369 = 2082;
                    v370 = v211;
                    v371 = 2082;
                    v372 = v212;
                    v373 = 2114;
                    v374 = v213;
                    _os_log_impl(&dword_182FBE000, v208, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach flow-assigned protocol", buf, 0x48u);

                  }
                  v63 = v240;
                  goto LABEL_308;
                }
                goto LABEL_307;
              }
              v357[3] = v182;
              if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v183 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v183, OS_LOG_TYPE_DEBUG))
                {
                  v257 = nw_endpoint_handler_get_id_string(v73);
                  v237 = nw_endpoint_handler_dry_run_string(v73);
                  v184 = nw_endpoint_handler_copy_endpoint(v73);
                  v232 = nw_endpoint_get_logging_description(v184);
                  v227 = nw_endpoint_handler_state_string(v73);
                  v185 = nw_endpoint_handler_mode_string(v73);
                  v186 = nw_endpoint_handler_copy_current_path(v73);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v257;
                  *(_WORD *)&buf[22] = 2082;
                  v367 = v237;
                  *(_WORD *)v368 = 2082;
                  *(_QWORD *)&v368[2] = v232;
                  v369 = 2082;
                  v370 = v227;
                  v371 = 2082;
                  v372 = v185;
                  v373 = 2114;
                  v374 = v186;
                  v375 = 2082;
                  v376 = v180;
                  _os_log_impl(&dword_182FBE000, v183, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached flow-assigned protocol: %{public}s", buf, 0x52u);

                }
              }

            }
            v187 = nw_endpoint_flow_attach_channel_protocol(v73, v357[3], nexus_protocol_level);
            v188 = nw_endpoint_handler_get_logging_disabled(v73);
            if (v187)
            {
              if ((v188 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v189 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG))
                {
                  v190 = nw_endpoint_handler_get_id_string(v73);
                  v258 = nw_endpoint_handler_dry_run_string(v73);
                  v191 = nw_endpoint_handler_copy_endpoint(v73);
                  v192 = nw_endpoint_get_logging_description(v191);
                  v193 = nw_endpoint_handler_state_string(v73);
                  v194 = nw_endpoint_handler_mode_string(v73);
                  v195 = nw_endpoint_handler_copy_current_path(v73);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v190;
                  *(_WORD *)&buf[22] = 2082;
                  v367 = v258;
                  *(_WORD *)v368 = 2082;
                  *(_QWORD *)&v368[2] = v192;
                  v369 = 2082;
                  v370 = v193;
                  v371 = 2082;
                  v372 = v194;
                  v373 = 2114;
                  v374 = v195;
                  _os_log_impl(&dword_182FBE000, v189, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Attached channel protocol", buf, 0x48u);

                }
                v63 = v240;
                LOBYTE(v64) = 1;
                goto LABEL_309;
              }
              LOBYTE(v64) = 1;
              goto LABEL_316;
            }
            if ((v188 & 1) != 0)
            {
              LOBYTE(v64) = 0;
LABEL_316:
              v63 = v240;
              goto LABEL_309;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v181 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v181, OS_LOG_TYPE_ERROR))
            {
              v259 = nw_endpoint_handler_get_id_string(v73);
              v202 = nw_endpoint_handler_dry_run_string(v73);
              v203 = nw_endpoint_handler_copy_endpoint(v73);
              v204 = nw_endpoint_get_logging_description(v203);
              v205 = nw_endpoint_handler_state_string(v73);
              v206 = nw_endpoint_handler_mode_string(v73);
              v207 = nw_endpoint_handler_copy_current_path(v73);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v259;
              *(_WORD *)&buf[22] = 2082;
              v367 = v202;
              *(_WORD *)v368 = 2082;
              *(_QWORD *)&v368[2] = v204;
              v369 = 2082;
              v370 = v205;
              v371 = 2082;
              v372 = v206;
              v373 = 2114;
              v374 = v207;
              _os_log_impl(&dword_182FBE000, v181, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to attach channel protocol", buf, 0x48u);

              v63 = v240;
LABEL_308:

              LOBYTE(v64) = 0;
LABEL_309:
              v139 = v269;
              goto LABEL_310;
            }
LABEL_307:
            v63 = v240;
            goto LABEL_308;
          }
          if ((nw_endpoint_handler_get_logging_disabled(v73) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v139 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v139, OS_LOG_TYPE_DEBUG))
            {
              v170 = nw_endpoint_handler_get_id_string(v73);
              v171 = nw_endpoint_handler_dry_run_string(v73);
              v243 = v63;
              v268 = nw_endpoint_handler_copy_endpoint(v73);
              v172 = nw_endpoint_get_logging_description(v268);
              v173 = nw_endpoint_handler_state_string(v73);
              v174 = nw_endpoint_handler_mode_string(v73);
              v175 = nw_endpoint_handler_copy_current_path(v73);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_endpoint_flow_attach_protocols";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v170;
              *(_WORD *)&buf[22] = 2082;
              v367 = v171;
              *(_WORD *)v368 = 2082;
              *(_QWORD *)&v368[2] = v172;
              v369 = 2082;
              v370 = v173;
              v371 = 2082;
              v372 = v174;
              v373 = 2114;
              v374 = v175;
              _os_log_impl(&dword_182FBE000, v139, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Custom protocols only is set, do not add a bottom level protocol", buf, 0x48u);

              v63 = v243;
            }
LABEL_269:
            LOBYTE(v64) = 1;
LABEL_310:

            goto LABEL_271;
          }
        }
      }
      LOBYTE(v64) = 1;
      goto LABEL_271;
    }
LABEL_106:
    LOBYTE(v64) = 1;
    goto LABEL_107;
  }
LABEL_78:
  LOBYTE(v64) = 0;
LABEL_107:

  _Block_object_dispose(v346, 8);
  _Block_object_dispose(v348, 8);
  _Block_object_dispose(v377, 8);
  _Block_object_dispose(&v352, 8);

  _Block_object_dispose(&v356, 8);
  _Block_object_dispose(type, 8);

LABEL_209:
  return v64 & 1;
}

void sub_18305F434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,void *a41,void *a42,void *a43)
{
  void *v43;
  void *v44;
  uint64_t v45;

  _Block_object_dispose(&STACK[0x210], 8);
  _Block_object_dispose(&STACK[0x298], 8);

  _Block_object_dispose(&STACK[0x3B0], 8);
  _Block_object_dispose(&STACK[0x3D0], 8);
  _Block_object_dispose((const void *)(v45 - 160), 8);
  _Block_object_dispose(&STACK[0x3F0], 8);

  _Block_object_dispose(&STACK[0x410], 8);
  _Block_object_dispose(&STACK[0x430], 8);

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_get_logging_disabled(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[268] >> 5) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_handler_get_logging_disabled";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_get_logging_disabled";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_handler_get_logging_disabled";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_get_logging_disabled";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_handler_get_logging_disabled";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 1;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_internal_iterate_protocol_stack(void *a1, int a2, char a3, void *a4)
{
  id *v7;
  id v8;
  void (**v9)(_QWORD, _QWORD, _QWORD, _QWORD);
  _QWORD *v10;
  _QWORD *v11;
  void *v12;
  void *v13;
  NSObject *v14;
  void *v15;
  id *v16;
  id v17;
  void *v18;
  id v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  BOOL is_udp;
  nw_protocol_options_t v26;
  void *v27;
  void *v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  void *v32;
  os_log_type_t v33;
  void *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  char *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  os_log_type_t v41;
  _BOOL4 v42;
  char *backtrace_string;
  os_log_type_t v44;
  _BOOL4 v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_log_type_t v48;
  NWConcrete_nw_protocol_options *options;
  void *v50;
  void *v51;
  _QWORD v53[4];
  void (**v54)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v55;
  _QWORD v56[4];
  void (**v57)(_QWORD, _QWORD, _QWORD, _QWORD);
  char v58;
  os_log_type_t v59;
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  char *v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a4;
  v9 = (void (**)(_QWORD, _QWORD, _QWORD, _QWORD))v8;
  if (v7)
  {
    if (v8)
    {
      v10 = v7[19];
      v11 = v10;
      if (v10)
      {
        switch(a2)
        {
          case 1:
            if (v10[7])
              goto LABEL_95;
            if (nw_protocol_copy_ethernet_definition::onceToken == -1)
            {
              v12 = (void *)nw_protocol_copy_ethernet_definition::ethernet_definition;
              if (nw_protocol_copy_ethernet_definition::ethernet_definition)
              {
LABEL_8:
                v13 = os_retain(v12);
                goto LABEL_94;
              }
            }
            else
            {
              dispatch_once(&nw_protocol_copy_ethernet_definition::onceToken, &__block_literal_global_5_31644);
              v12 = (void *)nw_protocol_copy_ethernet_definition::ethernet_definition;
              if (nw_protocol_copy_ethernet_definition::ethernet_definition)
                goto LABEL_8;
            }
            v13 = 0;
LABEL_94:
            options = nw_protocol_create_options(v13);
            v50 = (void *)v11[7];
            v11[7] = options;

LABEL_95:
            if (nw_protocol_copy_ethernet_definition::onceToken == -1)
            {
              v51 = (void *)nw_protocol_copy_ethernet_definition::ethernet_definition;
              if (nw_protocol_copy_ethernet_definition::ethernet_definition)
              {
LABEL_97:
                v17 = os_retain(v51);
                goto LABEL_100;
              }
            }
            else
            {
              dispatch_once(&nw_protocol_copy_ethernet_definition::onceToken, &__block_literal_global_5_31644);
              v51 = (void *)nw_protocol_copy_ethernet_definition::ethernet_definition;
              if (nw_protocol_copy_ethernet_definition::ethernet_definition)
                goto LABEL_97;
            }
            v17 = 0;
LABEL_100:
            ((void (**)(_QWORD, _QWORD, id, _QWORD))v9)[2](v9, 0, v17, v11[6]);
            goto LABEL_101;
          case 2:
            v15 = (void *)v10[6];
            if (!v15)
              goto LABEL_91;
            v16 = v15;
            v17 = v16[1];

            ((void (**)(_QWORD, _QWORD, id, _QWORD))v9)[2](v9, 0, v17, v11[6]);
            goto LABEL_101;
          case 3:
            v18 = (void *)v10[3];
            if (!v18)
              goto LABEL_91;
            v19 = v18;
            if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
              dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
            v20 = nw_protocol_options_matches_definition(v19, (void *)g_tcp_definition);

            if (v20)
            {
              if ((a3 & 1) != 0)
                goto LABEL_102;
              goto LABEL_28;
            }
            is_udp = nw_protocol_options_is_udp((void *)v11[3]);
            if ((a3 & 1) != 0)
            {
              if (!is_udp && nw_protocol_options_is_quic((nw_protocol_options_t)v11[3]))
              {
LABEL_28:
                v17 = nw_protocol_options_copy_definition((nw_protocol_options_t)v11[3]);
                ((void (**)(_QWORD, _QWORD, id, _QWORD))v9)[2](v9, 0, v17, v11[3]);
                goto LABEL_101;
              }
            }
            else
            {
              if (is_udp || !nw_protocol_options_is_quic((nw_protocol_options_t)v11[3]))
                goto LABEL_28;
              if (!v11[4])
              {
                v26 = nw_udp_create_options();
                v27 = (void *)v11[4];
                v11[4] = v26;

                nw_udp_options_set_no_metadata((void *)v11[4], 1);
              }
              v17 = nw_protocol_copy_udp_definition();
              ((void (**)(_QWORD, uint64_t, id, _QWORD))v9)[2](v9, 1, v17, v11[4]);
LABEL_101:

            }
LABEL_102:
            v21 = 1;
            break;
          case 4:
            v21 = v10[2];
            if (!v21)
              goto LABEL_103;
            v22 = v10[1];
            if (v22)
              v23 = (uint64_t)(*(_QWORD *)(v22 + 24) - *(_QWORD *)(v22 + 16)) >> 3;
            else
              v23 = 0;
            v53[0] = MEMORY[0x1E0C809B0];
            v53[1] = 3221225472;
            v53[2] = __nw_parameters_internal_iterate_protocol_stack_block_invoke_2;
            v53[3] = &unk_1E149D020;
            v54 = v9;
            v55 = v23;
            nw_array_apply((unsigned __int8 *)v21, (uint64_t)v53);
            v24 = v54;
            goto LABEL_31;
          case 5:
            v21 = v10[1];
            if (!v21)
              goto LABEL_103;
            v56[0] = MEMORY[0x1E0C809B0];
            v56[1] = 3221225472;
            v56[2] = __nw_parameters_internal_iterate_protocol_stack_block_invoke;
            v56[3] = &unk_1E14AC278;
            v57 = v9;
            nw_array_apply((unsigned __int8 *)v21, (uint64_t)v56);
            v24 = v57;
LABEL_31:

            goto LABEL_102;
          default:
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v14 = (id)gLogObj;
            if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              v61 = "nw_parameters_internal_iterate_protocol_stack";
              v62 = 1024;
              LODWORD(v63) = a2;
              _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
            }

            goto LABEL_91;
        }
        goto LABEL_103;
      }
      __nwlog_obj();
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v61 = "nw_parameters_internal_iterate_protocol_stack";
      v35 = (char *)_os_log_send_and_compose_impl();

      v59 = OS_LOG_TYPE_ERROR;
      v58 = 0;
      if (__nwlog_fault(v35, &v59, &v58))
      {
        if (v59 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v37 = v59;
          if (os_log_type_enabled(v36, v59))
          {
            *(_DWORD *)buf = 136446210;
            v61 = "nw_parameters_internal_iterate_protocol_stack";
            _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s called with null stack", buf, 0xCu);
          }
        }
        else if (v58)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v44 = v59;
          v45 = os_log_type_enabled(v36, v59);
          if (backtrace_string)
          {
            if (v45)
            {
              *(_DWORD *)buf = 136446466;
              v61 = "nw_parameters_internal_iterate_protocol_stack";
              v62 = 2082;
              v63 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v36, v44, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_89;
          }
          if (v45)
          {
            *(_DWORD *)buf = 136446210;
            v61 = "nw_parameters_internal_iterate_protocol_stack";
            _os_log_impl(&dword_182FBE000, v36, v44, "%{public}s called with null stack, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v48 = v59;
          if (os_log_type_enabled(v36, v59))
          {
            *(_DWORD *)buf = 136446210;
            v61 = "nw_parameters_internal_iterate_protocol_stack";
            _os_log_impl(&dword_182FBE000, v36, v48, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_89:
      if (v35)
        free(v35);
LABEL_91:
      v21 = 0;
LABEL_103:

      goto LABEL_104;
    }
    __nwlog_obj();
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_parameters_internal_iterate_protocol_stack";
    v29 = (char *)_os_log_send_and_compose_impl();

    v59 = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (__nwlog_fault(v29, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v33 = v59;
        if (os_log_type_enabled(v30, v59))
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_182FBE000, v30, v33, "%{public}s called with null iterator", buf, 0xCu);
        }
LABEL_82:

        goto LABEL_83;
      }
      if (!v58)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v47 = v59;
        if (os_log_type_enabled(v30, v59))
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_182FBE000, v30, v47, "%{public}s called with null iterator, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_82;
      }
      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v41 = v59;
      v42 = os_log_type_enabled(v30, v59);
      if (!v38)
      {
        if (v42)
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_182FBE000, v30, v41, "%{public}s called with null iterator, no backtrace", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (v42)
      {
        *(_DWORD *)buf = 136446466;
        v61 = "nw_parameters_internal_iterate_protocol_stack";
        v62 = 2082;
        v63 = v38;
        _os_log_impl(&dword_182FBE000, v30, v41, "%{public}s called with null iterator, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_62;
    }
  }
  else
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_parameters_internal_iterate_protocol_stack";
    v29 = (char *)_os_log_send_and_compose_impl();

    v59 = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (__nwlog_fault(v29, &v59, &v58))
    {
      if (v59 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v31 = v59;
        if (os_log_type_enabled(v30, v59))
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s called with null parameters", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (!v58)
      {
        __nwlog_obj();
        v30 = objc_claimAutoreleasedReturnValue();
        v46 = v59;
        if (os_log_type_enabled(v30, v59))
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_182FBE000, v30, v46, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_82;
      }
      v38 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v39 = v59;
      v40 = os_log_type_enabled(v30, v59);
      if (!v38)
      {
        if (v40)
        {
          *(_DWORD *)buf = 136446210;
          v61 = "nw_parameters_internal_iterate_protocol_stack";
          _os_log_impl(&dword_182FBE000, v30, v39, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
        goto LABEL_82;
      }
      if (v40)
      {
        *(_DWORD *)buf = 136446466;
        v61 = "nw_parameters_internal_iterate_protocol_stack";
        v62 = 2082;
        v63 = v38;
        _os_log_impl(&dword_182FBE000, v30, v39, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_62:

      free(v38);
    }
  }
LABEL_83:
  if (v29)
    free(v29);
  v21 = 0;
LABEL_104:

  return v21;
}

void sub_1830604D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_flow_should_add_filter(void *a1, void *a2)
{
  id v3;
  int *v4;
  int *v5;
  int v6;
  _QWORD *v7;
  __int16 v8;
  _BOOL8 v9;

  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v4)
    goto LABEL_9;
  v6 = v4[68];
  if (!v3)
  {
    if (v6 < 1)
      goto LABEL_9;
    goto LABEL_8;
  }
  v7 = v3;
  v8 = *(_WORD *)(v7[13] + 100);

  v9 = 0;
  if ((v8 & 0x10) == 0 && v6 && (v6 & 0x80000000) == 0)
  {
LABEL_8:
    if ((nw_path_uses_interface_subtype(v5, 4001) & 1) == 0)
    {
      v9 = nw_path_get_nexus_protocol_level(v5) == 2
        || nw_path_get_nexus_protocol_level(v5) == 0;
      goto LABEL_10;
    }
LABEL_9:
    v9 = 0;
  }
LABEL_10:

  return v9;
}

void sub_1830605D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_parameters_get_upper_transport_protocol_options(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  id v5;
  _BOOL4 v6;
  void *v7;
  NSObject *v8;
  void *v9;
  id v10;
  id v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _QWORD iterate_block[5];
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_get_upper_transport_protocol_options";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v13, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_get_upper_transport_protocol_options";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_parameters_get_upper_transport_protocol_options";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_31;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_get_upper_transport_protocol_options";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_parameters_get_upper_transport_protocol_options";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_31:
    if (v13)
      free(v13);
    goto LABEL_33;
  }
  v3 = v1[19];
  if (!v3 || (v4 = *(void **)(v3 + 24)) == 0)
  {
LABEL_33:
    v11 = 0;
    goto LABEL_34;
  }
  v5 = v4;
  if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
  v6 = nw_protocol_options_matches_definition(v5, (void *)g_udp_definition);

  v7 = *(void **)(v2[19] + 24);
  if (!v6)
  {
    v10 = v7;
LABEL_12:
    v11 = v10;
    goto LABEL_34;
  }
  if (!nw_udp_options_get_use_quic_stats(v7))
  {
    v10 = *(id *)(v2[19] + 24);
    goto LABEL_12;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x3032000000;
  v25 = __Block_byref_object_copy__19149;
  v26 = __Block_byref_object_dispose__19150;
  v27 = 0;
  v8 = v2[19];
  if (v8)
  {
    iterate_block[0] = MEMORY[0x1E0C809B0];
    iterate_block[1] = 3221225472;
    iterate_block[2] = __nw_parameters_get_upper_transport_protocol_options_block_invoke;
    iterate_block[3] = &unk_1E14A0FD8;
    iterate_block[4] = buf;
    nw_protocol_stack_iterate_application_protocols(v8, iterate_block);
    v9 = *(void **)(*(_QWORD *)&buf[8] + 40);
  }
  else
  {
    v9 = 0;
  }
  v11 = v9;
  _Block_object_dispose(buf, 8);

LABEL_34:
  return v11;
}

void sub_183060994(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_path_flow_registration_copy_assigned_protocol(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  id *v2;
  id *v3;
  id v4;

  v2 = (id *)nw_path_copy_flow_for_registration(a1, a2);
  v3 = v2;
  if (v2)
    v4 = v2[9];
  else
    v4 = 0;

  return v4;
}

nw_protocol_options_t nw_udp_create_options(void)
{
  if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
  return (nw_protocol_options_t)nw_protocol_create_options((void *)g_udp_definition);
}

void nw_udp_options_set_no_metadata(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_udp(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_udp_options_set_no_metadata_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_udp_options_set_no_metadata";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_udp_options_set_no_metadata";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_udp(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_udp_options_set_no_metadata";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_udp_options_set_no_metadata";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_udp(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_udp_options_set_no_metadata";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_udp(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_183060D04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_protocol_definition_t nw_protocol_copy_udp_definition(void)
{
  if (nw_protocol_setup_udp_definition(void)::onceToken[0] != -1)
    dispatch_once(nw_protocol_setup_udp_definition(void)::onceToken, &__block_literal_global_45078);
  return (nw_protocol_definition_t)(id)g_udp_definition;
}

void NWPathMonitor.currentPath.getter(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_unfair_lock_s *v5;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = v3 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v3 + 16);
  v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(_QWORD *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_183061FA0(v4, a1);
  os_unfair_lock_unlock(v5);
}

uint64_t sub_183060DD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t locked;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  char *v33;
  const void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD aBlock[9];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD840F8);
  v70 = *(_QWORD *)(v4 - 8);
  v71 = v4;
  MEMORY[0x1E0C80A78](v4);
  v69 = (char *)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84110);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v68 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84108);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v74 = (char *)&v57 - v13;
  v66 = sub_183B915FC();
  v65 = *(char **)(v66 - 8);
  MEMORY[0x1E0C80A78](v66);
  v64 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_183B91614();
  v62 = *(_QWORD *)(v15 - 8);
  v63 = v15;
  MEMORY[0x1E0C80A78](v15);
  v67 = (char *)&v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for NWPath(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  MEMORY[0x1E0C80A78](v17);
  v72 = (uint64_t)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1830620D4(a1, (uint64_t *)&unk_1ECD84148);
  v73 = a2;
  sub_183058C44(a2, a1, type metadata accessor for NWPath);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(a1, 0, 1, v17);
  locked = type metadata accessor for NWPathMonitor.LockedState(0);
  v21 = locked;
  v22 = a1;
  v23 = (uint64_t *)(a1 + *(int *)(locked + 20));
  v24 = *v23;
  if (*v23)
  {
    v25 = *(void **)(a1 + *(int *)(locked + 28));
    if (v25)
    {
      v26 = v23[1];
      v61 = v22;
      v27 = v72;
      v58 = v25;
      sub_183058C44(v73, v72, type metadata accessor for NWPath);
      v28 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v29 = swift_allocObject();
      *(_QWORD *)(v29 + 16) = v24;
      *(_QWORD *)(v29 + 24) = v26;
      sub_183058EC4(v27, v29 + v28, type metadata accessor for NWPath);
      aBlock[4] = sub_1831C2BF4;
      aBlock[5] = v29;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = sub_18305665C;
      aBlock[3] = &block_descriptor_63;
      v59 = _Block_copy(aBlock);
      v60 = v26;
      sub_183061488(v24);
      sub_183061488(v24);
      v58 = v58;
      v30 = v67;
      sub_183B91608();
      aBlock[8] = MEMORY[0x1E0DEE9D8];
      v57 = sub_183064644((unint64_t *)&qword_1ECD840F0, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD840D0);
      sub_1830622EC();
      v31 = v64;
      v32 = v66;
      sub_183B91D58();
      v33 = v30;
      v34 = v59;
      v35 = v58;
      MEMORY[0x186DB21BC](0, v33, v31, v59);
      _Block_release(v34);

      sub_1830630AC(v24);
      (*((void (**)(char *, uint64_t))v65 + 1))(v31, v32);
      (*(void (**)(char *, uint64_t))(v62 + 8))(v67, v63);
      swift_release();
      v22 = v61;
    }
  }
  v36 = *(_QWORD *)(v22 + *(int *)(v21 + 32));
  v37 = *(_QWORD *)(v36 + 64);
  v66 = v36 + 64;
  v38 = 1 << *(_BYTE *)(v36 + 32);
  v39 = -1;
  if (v38 < 64)
    v39 = ~(-1 << v38);
  v40 = v39 & v37;
  v67 = (char *)((unint64_t)(v38 + 63) >> 6);
  v65 = v67 - 1;
  result = swift_bridgeObjectRetain();
  v42 = 0;
  if (!v40)
    goto LABEL_11;
LABEL_9:
  v46 = __clz(__rbit64(v40));
  v40 &= v40 - 1;
  v47 = v46 | (v42 << 6);
  v48 = (uint64_t)v74;
  while (2)
  {
    v49 = *(_QWORD *)(v36 + 56);
    *(_QWORD *)v12 = *(_QWORD *)(*(_QWORD *)(v36 + 48) + 8 * v47);
    v50 = v49 + *(_QWORD *)(v7 + 72) * v47;
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84100);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(&v12[*(int *)(v51 + 48)], v50, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v12, 0, 1, v51);
    while (1)
    {
      sub_1830630BC((uint64_t)v12, v48, &qword_1ECD84108);
      v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84100);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 48))(v48, 1, v56) == 1)
        return swift_release();
      v43 = v48 + *(int *)(v56 + 48);
      v44 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v68, v43, v6);
      sub_183058C44(v73, v72, type metadata accessor for NWPath);
      v45 = v69;
      sub_183B91A64();
      (*(void (**)(char *, uint64_t))(v70 + 8))(v45, v71);
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v44, v6);
      if (v40)
        goto LABEL_9;
LABEL_11:
      v52 = v42 + 1;
      v48 = (uint64_t)v74;
      if (__OFADD__(v42, 1))
      {
        __break(1u);
        goto LABEL_32;
      }
      if (v52 < (uint64_t)v67)
      {
        v53 = *(_QWORD *)(v66 + 8 * v52);
        if (v53)
          goto LABEL_14;
        v54 = v42 + 2;
        ++v42;
        if (v52 + 1 < (uint64_t)v67)
        {
          v53 = *(_QWORD *)(v66 + 8 * v54);
          if (v53)
            goto LABEL_17;
          v42 = v52 + 1;
          if (v52 + 2 < (uint64_t)v67)
          {
            v53 = *(_QWORD *)(v66 + 8 * (v52 + 2));
            if (v53)
            {
              v52 += 2;
              goto LABEL_14;
            }
            v54 = v52 + 3;
            v42 = v52 + 2;
            if (v52 + 3 < (uint64_t)v67)
              break;
          }
        }
      }
LABEL_28:
      v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84100);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v12, 1, 1, v55);
      v40 = 0;
    }
    v53 = *(_QWORD *)(v66 + 8 * v54);
    if (v53)
    {
LABEL_17:
      v52 = v54;
LABEL_14:
      v40 = (v53 - 1) & v53;
      v47 = __clz(__rbit64(v53)) + (v52 << 6);
      v42 = v52;
      continue;
    }
    break;
  }
  while (1)
  {
    v52 = v54 + 1;
    if (__OFADD__(v54, 1))
      break;
    if (v52 >= (uint64_t)v67)
    {
      v42 = (uint64_t)v65;
      goto LABEL_28;
    }
    v53 = *(_QWORD *)(v66 + 8 * v52);
    ++v54;
    if (v53)
      goto LABEL_14;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_183061488(uint64_t result)
{
  if (result)
    return swift_retain();
  return result;
}

_BYTE *sub_183061498(_BYTE *a1, _BYTE *a2, int *a3)
{
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  uint64_t v12;
  unsigned int (*v13)(_BYTE *, uint64_t, uint64_t);
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(_BYTE *, _QWORD, uint64_t, int *);
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v32;

  v6 = (int *)type metadata accessor for NWPath(0);
  v7 = *((_QWORD *)v6 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84148);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  else
  {
    v32 = v7;
    *a1 = *a2;
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
    *((_QWORD *)a1 + 3) = *((_QWORD *)a2 + 3);
    v9 = v6[11];
    v10 = &a1[v9];
    v11 = &a2[v9];
    v12 = type metadata accessor for NWEndpoint();
    v13 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v13(v11, 1, v12))
    {
      v15 = (char *)&loc_1830615D0 + 4 * byte_183BA16A0[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v14 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    v16 = v6[12];
    v17 = &a1[v16];
    v18 = &a2[v16];
    if (!v13(&a2[v16], 1, v12))
    {
      v20 = (char *)&loc_183061740 + 4 * byte_183BA16A5[swift_getEnumCaseMultiPayload()];
      __asm { BR              X10 }
    }
    v19 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    *(_QWORD *)&a1[v6[13]] = *(_QWORD *)&a2[v6[13]];
    v21 = *(void (**)(_BYTE *, _QWORD, uint64_t, int *))(v32 + 56);
    swift_unknownObjectRetain();
    v21(a1, 0, 1, v6);
  }
  v22 = a3[5];
  v23 = &a1[v22];
  v24 = &a2[v22];
  if (*v24)
  {
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_retain();
  }
  else
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  v26 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(_QWORD *)&a2[a3[6]];
  v27 = *(void **)&a2[v26];
  *(_QWORD *)&a1[v26] = v27;
  v28 = a3[9];
  *(_QWORD *)&a1[a3[8]] = *(_QWORD *)&a2[a3[8]];
  a1[v28] = a2[v28];
  v29 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  *(_QWORD *)&a1[v29] = *(_QWORD *)&a2[v29];
  v30 = v27;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t NWPathMonitor.init()()
{
  uint64_t v0;
  int *locked;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  locked = (int *)type metadata accessor for NWPathMonitor.LockedState(0);
  MEMORY[0x1E0C80A78](locked);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NWPath(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = &v3[locked[5]];
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *(_QWORD *)&v3[locked[6]] = 1;
  *(_QWORD *)&v3[locked[7]] = 0;
  *(_QWORD *)&v3[locked[8]] = MEMORY[0x1E0DEE9E0];
  v3[locked[9]] = 0;
  v3[locked[10]] = 0;
  *(_QWORD *)&v3[locked[11]] = 0;
  __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84128);
  v6 = swift_allocObject();
  *(_DWORD *)(v6 + ((*(unsigned int *)(*(_QWORD *)v6 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  sub_183058C44((uint64_t)v3, v6 + *(_QWORD *)(*MEMORY[0x1E0DEC528] + *(_QWORD *)v6 + 16), type metadata accessor for NWPathMonitor.LockedState);
  sub_183058AE0((uint64_t)v3, type metadata accessor for NWPathMonitor.LockedState);
  *(_QWORD *)(v0 + 16) = v6;
  *(_QWORD *)(v0 + 24) = nw_path_monitor_create();
  return v0;
}

uint64_t storeEnumTagSinglePayload for NWPath()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for NWPathMonitor.LockedState(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1ECD84118);
}

nw_path_monitor_t nw_path_monitor_create(void)
{
  NSObject *v0;
  NSObject *evaluator_for_endpoint_no_evaluate;

  v0 = nw_parameters_create();
  nw_parameters_set_multipath_service(v0, nw_multipath_service_handover);
  evaluator_for_endpoint_no_evaluate = nw_path_create_evaluator_for_endpoint_no_evaluate(0, v0);

  return evaluator_for_endpoint_no_evaluate;
}

void sub_183061ABC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_parameters_set_multipath_service(nw_parameters_t parameters, nw_multipath_service_t multipath_service)
{
  nw_parameters_t v3;
  nw_parameters_t v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = parameters;
  v4 = v3;
  if (v3)
  {
    *(_DWORD *)((char *)v3[13].isa + 103) = multipath_service;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_set_multipath_service";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_set_multipath_service";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_set_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t sub_183061D60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v4 = type metadata accessor for NWPath(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, 1, v4))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v5 = a1 + *(int *)(v4 + 44);
    v6 = type metadata accessor for NWEndpoint();
    v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48);
    if (!v7(v5, 1, v6))
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          sub_183058BF0(*(_QWORD *)v5, *(_QWORD *)(v5 + 8), *(_QWORD *)(v5 + 16), *(_BYTE *)(v5 + 24));
          break;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v5 + 48) != 1)
            goto LABEL_16;
          break;
        case 2u:
          swift_bridgeObjectRelease();
          break;
        case 3u:
          v10 = sub_183B913A4();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v5, v10);
          break;
        case 4u:
LABEL_16:
          swift_unknownObjectRelease();
          break;
        default:
          break;
      }
    }
    v8 = a1 + *(int *)(v4 + 48);
    if (!v7(v8, 1, v6))
    {
      switch(swift_getEnumCaseMultiPayload())
      {
        case 0u:
          sub_183058BF0(*(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16), *(_BYTE *)(v8 + 24));
          break;
        case 1u:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (*(_QWORD *)(v8 + 48) != 1)
            goto LABEL_21;
          break;
        case 2u:
          swift_bridgeObjectRelease();
          break;
        case 3u:
          v11 = sub_183B913A4();
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v8, v11);
          break;
        case 4u:
LABEL_21:
          swift_unknownObjectRelease();
          break;
        default:
          break;
      }
    }
    swift_unknownObjectRelease();
  }
  if (*(_QWORD *)(a1 + *(int *)(a2 + 20)))
    swift_release();

  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_183061FA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&unk_1ECD84148);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_183062090(a1, (uint64_t)v6, (uint64_t *)&unk_1ECD84148);
  v7 = type metadata accessor for NWPath(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) != 1)
    return sub_183058EC4((uint64_t)v6, a2, type metadata accessor for NWPath);
  sub_183062C08(0, a2);
  return sub_1830620D4((uint64_t)v6, (uint64_t *)&unk_1ECD84148);
}

uint64_t getEnumTagSinglePayload for NWPath()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_183062090(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1830620D4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for NWPath(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 44);
  v5 = type metadata accessor for NWEndpoint();
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48);
  if (!v6(v4, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)v4, *(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_BYTE *)(v4 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v4 + 48) != 1)
          goto LABEL_12;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v9 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v4, v9);
        break;
      case 4u:
LABEL_12:
        swift_unknownObjectRelease();
        break;
      default:
        break;
    }
  }
  v7 = a1 + *(int *)(a2 + 48);
  if (!v6(v7, 1, v5))
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
        sub_183058BF0(*(_QWORD *)v7, *(_QWORD *)(v7 + 8), *(_QWORD *)(v7 + 16), *(_BYTE *)(v7 + 24));
        break;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (*(_QWORD *)(v7 + 48) != 1)
          goto LABEL_17;
        break;
      case 2u:
        swift_bridgeObjectRelease();
        break;
      case 3u:
        v10 = sub_183B913A4();
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v7, v10);
        break;
      case 4u:
LABEL_17:
        swift_unknownObjectRelease();
        break;
      default:
        return swift_unknownObjectRelease();
    }
  }
  return swift_unknownObjectRelease();
}

unint64_t sub_1830622EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1ECD840E0;
  if (!qword_1ECD840E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&unk_1ECD840D0);
    result = MEMORY[0x186DB5558](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&qword_1ECD840E0);
  }
  return result;
}

uint64_t sub_183062338(uint64_t a1, unint64_t *a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  unint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  ((void (*)(void))MEMORY[0x1E0C80A78])();
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NWEndpoint();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v18 - v10;
  v12 = swift_unknownObjectRetain();
  sub_183056F9C(v12, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_1830620D4((uint64_t)v4, qword_1ECD84160);
  }
  else
  {
    sub_183058EC4((uint64_t)v4, (uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    sub_183058C44((uint64_t)v11, (uint64_t)v9, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    v13 = *a2;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a2 = v13;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v13 = sub_183062ADC(0, *(_QWORD *)(v13 + 16) + 1, 1, v13);
      *a2 = v13;
    }
    v16 = *(_QWORD *)(v13 + 16);
    v15 = *(_QWORD *)(v13 + 24);
    if (v16 >= v15 >> 1)
    {
      v13 = sub_183062ADC(v15 > 1, v16 + 1, 1, v13);
      *a2 = v13;
    }
    *(_QWORD *)(v13 + 16) = v16 + 1;
    sub_183058EC4((uint64_t)v9, v13+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v16, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
    sub_183058AE0((uint64_t)v11, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
  }
  return 1;
}

uint64_t sub_183062514(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t result;

  result = *(_QWORD *)(v1 + *(int *)(type metadata accessor for NWPath(0) + 52));
  if (result)
    return a1();
  return result;
}

BOOL nw_path_is_constrained(nw_path_t path)
{
  nw_path_t v1;
  nw_path_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  __int16 v6;
  BOOL v7;
  int isa_high;
  Class isa;
  char *v10;
  __int16 v11;
  Class v12;
  char *v13;
  __int16 v14;
  Class v15;
  char *v16;
  __int16 v17;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = path;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_path_is_constrained";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v20, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_path_is_constrained";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_path_is_constrained";
            v31 = 2082;
            v32 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_path_is_constrained";
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_path_is_constrained";
          _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_35:
    if (v20)
      free(v20);
    v7 = 0;
    goto LABEL_18;
  }
  if ((BYTE3(v1[59].isa) & 0x10) == 0)
  {
    v3 = nw_path_copy_connected_interface(v1);
    v4 = v3;
    if (v3)
    {
      v5 = v3;
      v6 = *(_WORD *)(v5 + 85);

      if ((v6 & 2) != 0)
        goto LABEL_16;
    }
    if (LODWORD(v2[47].isa) != 1)
    {
      v7 = 0;
      isa_high = HIDWORD(v2[47].isa);
      if (isa_high == 4 || isa_high == 30)
        goto LABEL_17;
    }
    isa = v2[12].isa;
    if (isa)
    {
      v10 = isa;
      v11 = *(_WORD *)(v10 + 85);

      if ((v11 & 2) != 0)
        goto LABEL_16;
    }
    v12 = v2[13].isa;
    if (v12)
    {
      v13 = v12;
      v14 = *(_WORD *)(v13 + 85);

      if ((v14 & 2) != 0)
        goto LABEL_16;
    }
    v15 = v2[14].isa;
    if (v15 && (v16 = v15, v17 = *(_WORD *)(v16 + 85), v16, (v17 & 2) != 0))
LABEL_16:
      v7 = 1;
    else
      v7 = 0;
LABEL_17:

    goto LABEL_18;
  }
  v7 = 1;
LABEL_18:

  return v7;
}

Swift::Bool __swiftcall NWPath.usesInterfaceType(_:)(Network::NWInterface::InterfaceType a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  NSObject *v3;

  v2 = (unsigned __int8 *)a1;
  v3 = *(NSObject **)(v1 + *(int *)(type metadata accessor for NWPath(0) + 52));
  if (v3)
    LOBYTE(v3) = nw_path_uses_interface_type(v3, (nw_interface_type_t)*v2);
  return (char)v3;
}

uint64_t type metadata accessor for NWPath(uint64_t a1)
{
  return sub_183058E90(a1, (uint64_t *)&unk_1ECD841D0);
}

uint64_t sub_1830628D0(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_183B91F50();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_183062AF0(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_183062ADC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_1830628D0(a1, a2, a3, a4, (uint64_t *)&unk_1ECD84138, (uint64_t (*)(_QWORD))type metadata accessor for NWEndpoint);
}

uint64_t sub_183062AF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183062C08@<X0>(NSObject *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t, uint64_t);
  NSObject *v17;
  nw_path_status_t status;
  char v19;
  uint64_t (*v20)(uint64_t);
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  NSObject *v32;
  uint64_t v33;
  NSObject *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t aBlock;
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t);
  void *v40;
  uint64_t (*v41)(uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = __swift_instantiateConcreteTypeFromMangledName(qword_1ECD84160);
  v5 = MEMORY[0x1E0C80A78](v4);
  v35 = (uint64_t)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v35 - v8;
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v35 - v10;
  v12 = (int *)type metadata accessor for NWPath(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x1E0DEE9D8];
  v44 = MEMORY[0x1E0DEE9D8];
  v15 = type metadata accessor for NWEndpoint();
  v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v16(v11, 1, 1, v15);
  v16(v9, 1, 1, v15);
  v36 = a2;
  if (!a1)
  {
    v20 = 0;
    v21 = 0;
    *v14 = 1;
    *((_DWORD *)v14 + 4) = 0;
LABEL_17:
    *((_QWORD *)v14 + 1) = v44;
    *((_QWORD *)v14 + 3) = v43;
    *(_QWORD *)&v14[v12[13]] = a1;
    sub_1830630BC((uint64_t)v11, (uint64_t)&v14[v12[11]], qword_1ECD84160);
    sub_1830630BC((uint64_t)v9, (uint64_t)&v14[v12[12]], qword_1ECD84160);
    sub_183058EC4((uint64_t)v14, v36, type metadata accessor for NWPath);
    sub_1830630AC((uint64_t)v20);
    return sub_1830630AC((uint64_t)v21);
  }
  v17 = swift_unknownObjectRetain();
  status = nw_path_get_status(v17);
  if (status == nw_path_status_satisfied)
  {
    *v14 = 0;
  }
  else
  {
    if (status == nw_path_status_satisfiable)
      v19 = 2;
    else
      v19 = 1;
    *v14 = v19;
  }
  v14[16] = nw_path_is_expensive(a1);
  v14[19] = nw_path_has_dns(a1);
  v14[17] = nw_path_has_ipv4(a1);
  v14[18] = nw_path_has_ipv6(a1);
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = &v44;
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = sub_18306438C;
  *(_QWORD *)(v23 + 24) = v22;
  v41 = sub_183064360;
  v42 = v23;
  v24 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v38 = 1107296256;
  v39 = sub_1830642F4;
  v40 = &block_descriptor_6;
  v25 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  nw_path_enumerate_interfaces(a1, v25);
  _Block_release(v25);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v28 = swift_allocObject();
    *(_QWORD *)(v28 + 16) = &v43;
    v29 = swift_allocObject();
    *(_QWORD *)(v29 + 16) = sub_18316DC38;
    *(_QWORD *)(v29 + 24) = v28;
    v41 = sub_183064360;
    v42 = v29;
    aBlock = v24;
    v38 = 1107296256;
    v39 = sub_1830642F4;
    v40 = &block_descriptor_41;
    v30 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    nw_path_enumerate_gateways(a1, v30);
    _Block_release(v30);
    v31 = swift_isEscapingClosureAtFileLocation();
    result = swift_release();
    if ((v31 & 1) == 0)
    {
      v32 = nw_path_copy_effective_local_endpoint(a1);
      v33 = v35;
      if (v32)
      {
        sub_183056F9C(v32, v35);
        sub_1830620D4((uint64_t)v11, qword_1ECD84160);
        sub_1830630BC(v33, (uint64_t)v11, qword_1ECD84160);
      }
      if (nw_path_copy_effective_remote_endpoint(a1))
      {
        v34 = swift_unknownObjectRetain();
        sub_183056F9C(v34, v33);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        sub_1830620D4((uint64_t)v9, qword_1ECD84160);
        sub_1830630BC(v33, (uint64_t)v9, qword_1ECD84160);
      }
      else
      {
        swift_unknownObjectRelease();
      }
      v21 = sub_18316DC38;
      v20 = sub_18306438C;
      goto LABEL_17;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_1830630AC(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t sub_1830630BC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

BOOL nw_path_is_expensive(nw_path_t path)
{
  nw_path_t v1;
  nw_path_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  __int16 v6;
  BOOL v7;
  int isa_high;
  Class isa;
  char *v10;
  __int16 v11;
  Class v12;
  char *v13;
  __int16 v14;
  Class v15;
  char *v16;
  __int16 v17;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v1 = path;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_path_is_expensive";
    v20 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v20, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_path_is_expensive";
          _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v21, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_path_is_expensive";
            v31 = 2082;
            v32 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_path_is_expensive";
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v21 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v21, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_path_is_expensive";
          _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_35:
    if (v20)
      free(v20);
    v7 = 0;
    goto LABEL_18;
  }
  if ((BYTE3(v1[59].isa) & 8) == 0)
  {
    v3 = nw_path_copy_connected_interface(v1);
    v4 = v3;
    if (v3)
    {
      v5 = v3;
      v6 = *(_WORD *)(v5 + 85);

      if ((v6 & 1) != 0)
        goto LABEL_16;
    }
    if (LODWORD(v2[47].isa) != 1)
    {
      v7 = 0;
      isa_high = HIDWORD(v2[47].isa);
      if (isa_high == 4 || isa_high == 30)
        goto LABEL_17;
    }
    isa = v2[12].isa;
    if (isa)
    {
      v10 = isa;
      v11 = *(_WORD *)(v10 + 85);

      if ((v11 & 1) != 0)
        goto LABEL_16;
    }
    v12 = v2[13].isa;
    if (v12)
    {
      v13 = v12;
      v14 = *(_WORD *)(v13 + 85);

      if ((v14 & 1) != 0)
        goto LABEL_16;
    }
    v15 = v2[14].isa;
    if (v15 && (v16 = v15, v17 = *(_WORD *)(v16 + 85), v16, (v17 & 1) != 0))
LABEL_16:
      v7 = 1;
    else
      v7 = 0;
LABEL_17:

    goto LABEL_18;
  }
  v7 = 1;
LABEL_18:

  return v7;
}

nw_path_status_t nw_path_get_status(nw_path_t path)
{
  nw_path_t v1;
  nw_path_t v2;
  nw_path_status_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = path;
  v2 = v1;
  if (v1)
  {
    isa = (nw_path_status_t)v1[47].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_get_status";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_status";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_get_status";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_status";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_get_status";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = nw_path_status_invalid;
LABEL_3:

  return isa;
}

void sub_18306380C(_Unwind_Exception *a1)
{
  void *v1;

  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void nw_path_enumerate_interfaces(nw_path_t path, nw_path_enumerate_interfaces_block_t enumerate_block)
{
  nw_path_t v3;
  uint64_t (**v4)(_QWORD);
  uint64_t (**v5)(_QWORD, _QWORD);
  unsigned __int8 *isa;
  uint64_t v7;
  unint64_t v8;
  Class v9;
  id v10;
  NWConcrete_nw_interface *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  _QWORD v26[4];
  NSObject *v27;
  uint64_t (**v28)(_QWORD, _QWORD);
  char v29;
  os_log_type_t v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v3 = path;
  v4 = enumerate_block;
  v5 = (uint64_t (**)(_QWORD, _QWORD))v4;
  if (!v3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_path_enumerate_interfaces";
    v13 = (char *)_os_log_send_and_compose_impl();

    v30 = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v13, &v30, &v29))
      goto LABEL_48;
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = v30;
      if (os_log_type_enabled(v14, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = v30;
      v20 = os_log_type_enabled(v14, v30);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_path_enumerate_interfaces";
          v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_48:
        if (!v13)
          goto LABEL_7;
        goto LABEL_49;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v24 = v30;
      if (os_log_type_enabled(v14, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_47:

    goto LABEL_48;
  }
  if (!v4)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_path_enumerate_interfaces";
    v13 = (char *)_os_log_send_and_compose_impl();

    v30 = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (!__nwlog_fault(v13, &v30, &v29))
      goto LABEL_48;
    if (v30 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = v30;
      if (os_log_type_enabled(v14, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null enumerate_block", buf, 0xCu);
      }
    }
    else if (v29)
    {
      v21 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v22 = v30;
      v23 = os_log_type_enabled(v14, v30);
      if (v21)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_path_enumerate_interfaces";
          v33 = 2082;
          v34 = v21;
          _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v21);
        if (!v13)
          goto LABEL_7;
LABEL_49:
        free(v13);
        goto LABEL_7;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v25 = v30;
      if (os_log_type_enabled(v14, v30))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_enumerate_interfaces";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_47;
  }
  if (!v3[12].isa || (v4[2](v4) & 1) != 0)
  {
    isa = (unsigned __int8 *)v3[9].isa;
    if (isa)
    {
      v26[0] = MEMORY[0x1E0C809B0];
      v26[1] = 3221225472;
      v26[2] = __nw_path_enumerate_interfaces_block_invoke;
      v26[3] = &unk_1E14A8F28;
      v27 = v3;
      v28 = v5;
      nw_array_apply(isa, (uint64_t)v26);

    }
    else if (LODWORD(v3[43].isa))
    {
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = v3[38].isa;
        v10 = nw_parameters_copy_context(v3[2].isa);
        v11 = nw_path_copy_interface_with_generation(v10, *(_DWORD *)((char *)v9 + v7), *(_DWORD *)((char *)v9 + v7 + 4));

        if (v11)
        {
          if (v11 != (NWConcrete_nw_interface *)v3[12].isa
            && (((uint64_t (**)(_QWORD, NWConcrete_nw_interface *))v5)[2](v5, v11) & 1) == 0)
          {
            break;
          }
        }

        ++v8;
        v7 += 24;
        if (v8 >= LODWORD(v3[43].isa))
          goto LABEL_7;
      }

    }
  }
LABEL_7:

}

void sub_183063DC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_path_enumerate_gateways(nw_path_t path, nw_path_enumerate_gateways_block_t enumerate_block)
{
  nw_path_t v3;
  nw_path_enumerate_gateways_block_t v4;
  void *v5;
  unsigned __int8 *isa;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = path;
  v4 = enumerate_block;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_path_enumerate_gateways";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_enumerate_gateways";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_path_enumerate_gateways";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v8)
          goto LABEL_5;
LABEL_40:
        free(v8);
        goto LABEL_5;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_enumerate_gateways";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_path_enumerate_gateways";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    isa = (unsigned __int8 *)v3[26].isa;
    if (isa)
    {
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_path_enumerate_gateways_block_invoke;
      v21[3] = &unk_1E14AC278;
      v22 = v4;
      nw_array_apply(isa, (uint64_t)v21);

    }
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_path_enumerate_gateways";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_enumerate_gateways";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_enumerate_gateways";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_path_enumerate_gateways";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_path_enumerate_gateways";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_40;
LABEL_5:

}

uint64_t sub_1830642F4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);
  char v4;

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain();
  v4 = v3(a2);
  swift_unknownObjectRelease();
  return v4 & 1;
}

uint64_t sub_18306433C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_183064360(uint64_t a1)
{
  uint64_t v1;

  return sub_183064368(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_183064368(uint64_t a1, uint64_t (*a2)(void))
{
  return a2() & 1;
}

uint64_t sub_18306438C(uint64_t a1)
{
  uint64_t v1;

  return sub_183064394(a1, *(_QWORD ***)(v1 + 16));
}

uint64_t sub_183064394(uint64_t a1, _QWORD **a2)
{
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v6;
  unint64_t v7;

  v4 = *a2;
  swift_unknownObjectRetain();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a2 = v4;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v4 = sub_183064448(0, v4[2] + 1, 1, v4);
    *a2 = v4;
  }
  v7 = v4[2];
  v6 = v4[3];
  if (v7 >= v6 >> 1)
    v4 = sub_183064448((_QWORD *)(v6 > 1), v7 + 1, 1, v4);
  v4[2] = v7 + 1;
  v4[v7 + 4] = a1;
  *a2 = v4;
  return 1;
}

_QWORD *sub_183064448(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_1ECD84130);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_183064554(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_183064554(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_183B91F98();
  __break(1u);
  return result;
}

uint64_t sub_183064644(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x186DB5558](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x186DB554C](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

_DWORD *network_proxy_create_from_parameters(void *a1)
{
  id *v1;
  _DWORD *v2;
  int v3;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "network_proxy_create_from_parameters";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11))
      goto LABEL_21;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v14 = "network_proxy_create_from_parameters";
      v8 = "%{public}s called with null parameters";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "network_proxy_create_from_parameters";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_21;
      }
      if (!v10)
      {
LABEL_21:
        if (v5)
          free(v5);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v14 = "network_proxy_create_from_parameters";
      v8 = "%{public}s called with null parameters, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_21;
      *(_DWORD *)buf = 136446210;
      v14 = "network_proxy_create_from_parameters";
      v8 = "%{public}s called with null parameters, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_21;
  }
  v1 = a1;
  v2 = v1[23];

  if (v2)
  {
    v2 = v2;
    v3 = v2[38];

    if (v3 != 1)
    {
      os_release(v2);
      return 0;
    }
  }
  return v2;
}

void nw_activity_complete_with_reason_and_underlying_error(void *a1, uint32_t a2, int a3, int a4)
{
  os_unfair_lock_s *v7;
  os_unfair_lock_s *v8;
  os_unfair_lock_s *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  const char *v15;
  const char *v16;
  uint32_t v17;
  uint32_t os_unfair_lock_opaque;
  uint64_t v19;
  const char *v20;
  NSObject *v21;
  uint32_t v22;
  uint64_t v23;
  int *v24;
  int domain;
  int label;
  NSObject *v27;
  NSObject *v28;
  os_signpost_id_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  char *v33;
  uint64_t duration;
  uint64_t v35;
  int *v36;
  int *v37;
  NWConcrete_nw_activity *v38;
  NWConcrete_nw_activity *v39;
  char *v40;
  void *activity_dictionary;
  char *v42;
  char *v43;
  const char *v44;
  NSObject *v45;
  id v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  char *backtrace_string;
  os_log_type_t v51;
  _BOOL4 v52;
  os_log_type_t v53;
  void *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  void *v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  void *v62;
  char *v63;
  NSObject *v64;
  os_log_type_t v65;
  char *v66;
  os_log_type_t v67;
  _BOOL4 v68;
  char *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  char *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  os_log_type_t v75;
  os_log_type_t v76;
  os_log_type_t v77;
  void *v78;
  char *v79;
  NSObject *v80;
  os_log_type_t v81;
  void *v82;
  char *v83;
  NSObject *v84;
  os_log_type_t v85;
  char *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  char *v89;
  _BOOL4 v90;
  os_log_type_t v91;
  os_log_type_t v92;
  os_log_type_t v93;
  _QWORD aBlock[4];
  os_unfair_lock_s *v95;
  os_log_type_t *v96;
  int v97;
  int v98;
  void *v99;
  os_log_type_t v100[8];
  os_log_type_t *v101;
  uint64_t v102;
  char v103;
  char *v104;
  char v105;
  char v106;
  os_log_type_t type[8];
  char v108;
  os_log_type_t v109;
  char *v110;
  char v111;
  uint8_t buf[64];
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  uint64_t value[2];
  _BYTE v130[12];
  __int16 v131;
  char *v132;
  uint64_t v133;

  v133 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = v7;
  if (v7)
  {
    *(_QWORD *)v100 = 0;
    v101 = v100;
    v102 = 0x2020000000;
    v103 = 1;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_activity_complete_with_reason_and_underlying_error_block_invoke;
    aBlock[3] = &unk_1E14AAE00;
    v9 = v7;
    v95 = v9;
    v96 = v100;
    v97 = a3;
    v98 = a4;
    v10 = _Block_copy(aBlock);
    v99 = v10;
    nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>(v8 + 18, (uint64_t)&v99);

    if (!*((_BYTE *)v101 + 24))
    {
LABEL_87:

      _Block_object_dispose(v100, 8);
      goto LABEL_88;
    }
    if (a2 < 5u)
    {
      os_unfair_lock_lock(v9 + 24);
      v11 = *(void **)&v9[20]._os_unfair_lock_opaque;
      if ((v9[22]._os_unfair_lock_opaque & 1) != 0 && v11)
      {
        *(_QWORD *)&v9[20]._os_unfair_lock_opaque = 0;

        v11 = *(void **)&v9[20]._os_unfair_lock_opaque;
      }
      *(_QWORD *)&v9[20]._os_unfair_lock_opaque = 0;

      os_unfair_lock_unlock(v9 + 24);
      v12 = mach_continuous_time();
      if (v12 <= 1)
        v13 = 1;
      else
        v13 = v12;
      *(_QWORD *)&v9[10]._os_unfair_lock_opaque = v13;
      v9[32]._os_unfair_lock_opaque = a2;
      if (!nw_activity_should_log(v9))
      {
LABEL_28:
        v24 = v9;
        if (nw_activity_duration_exceeds_threshold(v24))
        {
          *(_QWORD *)v130 = 0;
          domain = nw_activity_get_domain(v24);
          asprintf((char **)v130, "%u", domain);
          v110 = 0;
          label = nw_activity_get_label(v24);
          asprintf(&v110, "%u", label);
          if (__nwlog_activity_log::onceToken != -1)
            dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
          v27 = (id)gactivityLogObj;
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 138543362;
            *(_QWORD *)&buf[4] = v24;
            _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_DEFAULT, "%{public}@ over threshold, emitting signpost event", buf, 0xCu);
          }

          if (__nwlog_activity_log::onceToken != -1)
            dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
          v28 = (id)gactivityLogObj;
          v29 = os_signpost_id_generate(v28);

          if (__nwlog_activity_log::onceToken != -1)
            dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
          v30 = (id)gactivityLogObj;
          v31 = v30;
          if (v29 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v30))
          {
            v32 = *(_QWORD *)v130;
            v33 = v110;
            duration = nw_activity_get_duration(v24);
            v35 = nw_activity_duration_threshold_for_label(v24[27], v24[26]);
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = v32;
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v33;
            *(_WORD *)&buf[22] = 2050;
            *(_QWORD *)&buf[24] = duration;
            *(_WORD *)&buf[32] = 2050;
            *(_QWORD *)&buf[34] = v35;
            _os_signpost_emit_with_name_impl(&dword_182FBE000, v31, OS_SIGNPOST_EVENT, v29, "nw_activity over threshold", " enableTelemetry=YES Activity <nw_activity %{public, signpost.telemetry:string1, name=ActivityDomain}s:%{public, signpost.telemetry:string2, name=ActivityLabel}s> over threshold (duration %{public, signpost.telemetry:number1, name=Duration}llums exceeds threshold %{public, signpost.telemetry:number2, name=Threshold}llums)", buf, 0x2Au);
          }

          if (*(_QWORD *)v130)
          {
            free(*(void **)v130);
            *(_QWORD *)v130 = 0;
          }
          if (v110)
            free(v110);
        }

        v36 = v24;
        v37 = v36;
        if ((~*((unsigned __int8 *)v36 + 132) & 0xC) == 0)
        {
          if ((*((_BYTE *)v36 + 17) & 1) == 0)
          {
LABEL_86:

            goto LABEL_87;
          }
          v128 = 0u;
          *(_OWORD *)value = 0u;
          v126 = 0u;
          v127 = 0u;
          v124 = 0u;
          v125 = 0u;
          v122 = 0u;
          v123 = 0u;
          v120 = 0u;
          v121 = 0u;
          v118 = 0u;
          v119 = 0u;
          v116 = 0u;
          v117 = 0u;
          v114 = 0u;
          v115 = 0u;
          v113 = 0u;
          memset(buf, 0, sizeof(buf));
          v38 = v36;
          nw_activity_fill_out_activity_report(v38, (nw_activity_report_s *)&buf[8]);
          *(_QWORD *)buf = nw_activity_get_duration(v38);
          LODWORD(value[0]) = nw_activity_get_fragments_quenched(v38);
          HIDWORD(value[0]) = nw_activity_get_underlying_error_domain(v38);
          LODWORD(value[1]) = nw_activity_get_underlying_error_code(v38);
          HIDWORD(value[1]) = nw_activity_get_completion_reason(v38);

          if (!os_variant_has_internal_diagnostics()
            || !networkd_settings_get_BOOL((const char *)nw_setting_activity_write_metric_stream_to_log))
          {
            if (nw_connection_get_symptom_reporter_handle::once[0] != -1)
              dispatch_once(nw_connection_get_symptom_reporter_handle::once, &__block_literal_global_77956);
            symptom_new();
            symptom_set_qualifier();
            symptom_set_additional_qualifier();
            symptom_send();
            goto LABEL_86;
          }
          v39 = v38;
          v40 = (char *)xpc_dictionary_create(0, 0, 0);
          v110 = v40;
          v111 = -1;
          if (v40)
          {
            activity_dictionary = nw_activity_create_activity_dictionary(v39, (nw_activity_report_s *)&buf[8]);
            *(_QWORD *)type = activity_dictionary;
            v108 = -1;
            if (activity_dictionary)
            {
              xpc_dictionary_set_value(v40, "activity", activity_dictionary);
              xpc_dictionary_set_uint64(v40, "durationMsecs", *(uint64_t *)buf);
              xpc_dictionary_set_uint64(v40, "fragmentsQuenched", LODWORD(value[0]));
              v42 = v40;
              v43 = v42;
              if ((HIDWORD(value[1]) - 1) > 3)
                v44 = "invalid";
              else
                v44 = off_1E14A6B58[HIDWORD(value[1]) - 1];
              xpc_dictionary_set_string(v42, "completionReason", v44);

              xpc_dictionary_set_int64(v43, "underlyingErrorDomain", SHIDWORD(value[0]));
              xpc_dictionary_set_int64(v43, "underlyingErrorCode", SLODWORD(value[1]));

LABEL_57:
              v104 = v43;
              v105 = -1;
              v110 = 0;
              if (nw_activity_metric_object_is_valid(v43, 0, (const char **)&v110))
              {
                if (__nwlog_metricstream_log::onceToken != -1)
                  dispatch_once(&__nwlog_metricstream_log::onceToken, &__block_literal_global_51_44220);
                v45 = (id)gmetricstreamLogObj;
                if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v130 = 136446210;
                  *(_QWORD *)&v130[4] = v110;
                  _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEFAULT, "%{public}s", v130, 0xCu);
                }

LABEL_81:
                if (v110)
                  free(v110);
                if (v43)

                goto LABEL_86;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v46 = (id)gLogObj;
              *(_DWORD *)v130 = 136446210;
              *(_QWORD *)&v130[4] = "nw_activity_write_epilogue_report_to_log";
              v47 = (char *)_os_log_send_and_compose_impl();

              type[0] = OS_LOG_TYPE_ERROR;
              v109 = OS_LOG_TYPE_DEFAULT;
              if (__nwlog_fault(v47, type, &v109))
              {
                if (type[0] == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v48 = objc_claimAutoreleasedReturnValue();
                  v49 = type[0];
                  if (os_log_type_enabled(v48, type[0]))
                  {
                    *(_DWORD *)v130 = 136446210;
                    *(_QWORD *)&v130[4] = "nw_activity_write_epilogue_report_to_log";
                    _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s generated activity epilogue dictionary is not valid", v130, 0xCu);
                  }
                }
                else if (v109)
                {
                  backtrace_string = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v48 = objc_claimAutoreleasedReturnValue();
                  v51 = type[0];
                  v52 = os_log_type_enabled(v48, type[0]);
                  if (backtrace_string)
                  {
                    if (v52)
                    {
                      *(_DWORD *)v130 = 136446466;
                      *(_QWORD *)&v130[4] = "nw_activity_write_epilogue_report_to_log";
                      v131 = 2082;
                      v132 = backtrace_string;
                      _os_log_impl(&dword_182FBE000, v48, v51, "%{public}s generated activity epilogue dictionary is not valid, dumping backtrace:%{public}s", v130, 0x16u);
                    }

                    free(backtrace_string);
                    goto LABEL_79;
                  }
                  if (v52)
                  {
                    *(_DWORD *)v130 = 136446210;
                    *(_QWORD *)&v130[4] = "nw_activity_write_epilogue_report_to_log";
                    _os_log_impl(&dword_182FBE000, v48, v51, "%{public}s generated activity epilogue dictionary is not valid, no backtrace", v130, 0xCu);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v48 = objc_claimAutoreleasedReturnValue();
                  v53 = type[0];
                  if (os_log_type_enabled(v48, type[0]))
                  {
                    *(_DWORD *)v130 = 136446210;
                    *(_QWORD *)&v130[4] = "nw_activity_write_epilogue_report_to_log";
                    _os_log_impl(&dword_182FBE000, v48, v53, "%{public}s generated activity epilogue dictionary is not valid, backtrace limit exceeded", v130, 0xCu);
                  }
                }

              }
LABEL_79:
              if (v47)
                free(v47);
              goto LABEL_81;
            }
            __nwlog_obj();
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)v130 = 136446210;
            *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
            v83 = (char *)_os_log_send_and_compose_impl();

            v109 = OS_LOG_TYPE_ERROR;
            v106 = 0;
            if (!__nwlog_fault(v83, &v109, &v106))
              goto LABEL_177;
            if (v109 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v85 = v109;
              if (os_log_type_enabled(v84, v109))
              {
                *(_DWORD *)v130 = 136446210;
                *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
                _os_log_impl(&dword_182FBE000, v84, v85, "%{public}s failed to get activity dictionary", v130, 0xCu);
              }
            }
            else if (v106)
            {
              v89 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v93 = v109;
              v90 = os_log_type_enabled(v84, v109);
              if (v89)
              {
                if (v90)
                {
                  *(_DWORD *)v130 = 136446466;
                  *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
                  v131 = 2082;
                  v132 = v89;
                  _os_log_impl(&dword_182FBE000, v84, v93, "%{public}s failed to get activity dictionary, dumping backtrace:%{public}s", v130, 0x16u);
                }

                free(v89);
                goto LABEL_177;
              }
              if (v90)
              {
                *(_DWORD *)v130 = 136446210;
                *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
                _os_log_impl(&dword_182FBE000, v84, v93, "%{public}s failed to get activity dictionary, no backtrace", v130, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v84 = objc_claimAutoreleasedReturnValue();
              v92 = v109;
              if (os_log_type_enabled(v84, v109))
              {
                *(_DWORD *)v130 = 136446210;
                *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
                _os_log_impl(&dword_182FBE000, v84, v92, "%{public}s failed to get activity dictionary, backtrace limit exceeded", v130, 0xCu);
              }
            }

LABEL_177:
            if (v83)
              free(v83);

LABEL_180:
            v43 = 0;
            goto LABEL_57;
          }
          __nwlog_obj();
          v78 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)v130 = 136446210;
          *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
          v79 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v109 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v79, type, &v109))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v80 = objc_claimAutoreleasedReturnValue();
              v81 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)v130 = 136446210;
                *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
                _os_log_impl(&dword_182FBE000, v80, v81, "%{public}s failed to allocate dictionary", v130, 0xCu);
              }
            }
            else if (v109)
            {
              v86 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v80 = objc_claimAutoreleasedReturnValue();
              v87 = type[0];
              v88 = os_log_type_enabled(v80, type[0]);
              if (v86)
              {
                if (v88)
                {
                  *(_DWORD *)v130 = 136446466;
                  *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
                  v131 = 2082;
                  v132 = v86;
                  _os_log_impl(&dword_182FBE000, v80, v87, "%{public}s failed to allocate dictionary, dumping backtrace:%{public}s", v130, 0x16u);
                }

                free(v86);
                goto LABEL_172;
              }
              if (v88)
              {
                *(_DWORD *)v130 = 136446210;
                *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
                _os_log_impl(&dword_182FBE000, v80, v87, "%{public}s failed to allocate dictionary, no backtrace", v130, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v80 = objc_claimAutoreleasedReturnValue();
              v91 = type[0];
              if (os_log_type_enabled(v80, type[0]))
              {
                *(_DWORD *)v130 = 136446210;
                *(_QWORD *)&v130[4] = "nw_activity_create_epilogue_dictionary";
                _os_log_impl(&dword_182FBE000, v80, v91, "%{public}s failed to allocate dictionary, backtrace limit exceeded", v130, 0xCu);
              }
            }

          }
LABEL_172:
          if (v79)
            free(v79);
          goto LABEL_180;
        }
        __nwlog_obj();
        v62 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_activity_epilogue_report_if_selected";
        v63 = (char *)_os_log_send_and_compose_impl();

        v130[0] = 16;
        LOBYTE(v110) = 0;
        if (__nwlog_fault(v63, v130, &v110))
        {
          if (v130[0] == 17)
          {
            __nwlog_obj();
            v64 = objc_claimAutoreleasedReturnValue();
            v65 = v130[0];
            if (os_log_type_enabled(v64, (os_log_type_t)v130[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_activity_epilogue_report_if_selected";
              _os_log_impl(&dword_182FBE000, v64, v65, "%{public}s Cannot report activity before activation", buf, 0xCu);
            }
          }
          else if ((_BYTE)v110)
          {
            v72 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v64 = objc_claimAutoreleasedReturnValue();
            v73 = v130[0];
            v74 = os_log_type_enabled(v64, (os_log_type_t)v130[0]);
            if (v72)
            {
              if (v74)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_activity_epilogue_report_if_selected";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v72;
                _os_log_impl(&dword_182FBE000, v64, v73, "%{public}s Cannot report activity before activation, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v72);
              goto LABEL_151;
            }
            if (v74)
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_activity_epilogue_report_if_selected";
              _os_log_impl(&dword_182FBE000, v64, v73, "%{public}s Cannot report activity before activation, no backtrace", buf, 0xCu);
            }
          }
          else
          {
            __nwlog_obj();
            v64 = objc_claimAutoreleasedReturnValue();
            v77 = v130[0];
            if (os_log_type_enabled(v64, (os_log_type_t)v130[0]))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_activity_epilogue_report_if_selected";
              _os_log_impl(&dword_182FBE000, v64, v77, "%{public}s Cannot report activity before activation, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_151:
        if (v63)
          free(v63);
        goto LABEL_86;
      }
      if (a4 | a3)
      {
        if (__nwlog_activity_log::onceToken != -1)
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
        v14 = (id)gactivityLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_27;
        if (a2 - 1 > 3)
          v15 = "invalid";
        else
          v15 = off_1E14A6B58[a2 - 1];
        os_unfair_lock_opaque = v9[29]._os_unfair_lock_opaque;
        v17 = v9[30]._os_unfair_lock_opaque;
        v19 = nw_activity_get_duration(v9);
        *(_DWORD *)buf = 138544642;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a2;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v15;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = os_unfair_lock_opaque;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v17;
        *(_WORD *)&buf[40] = 2048;
        *(_QWORD *)&buf[42] = v19;
        v20 = "%{public}@ complete with reason %u (%{public}s), underlying error %d:%d, duration %llums";
        v21 = v14;
        v22 = 50;
      }
      else
      {
        if (__nwlog_activity_log::onceToken != -1)
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
        v14 = (id)gactivityLogObj;
        if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          goto LABEL_27;
        if (a2 - 1 > 3)
          v16 = "invalid";
        else
          v16 = off_1E14A6B58[a2 - 1];
        v23 = nw_activity_get_duration(v9);
        *(_DWORD *)buf = 138544130;
        *(_QWORD *)&buf[4] = v9;
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = a2;
        *(_WORD *)&buf[18] = 2082;
        *(_QWORD *)&buf[20] = v16;
        *(_WORD *)&buf[28] = 2048;
        *(_QWORD *)&buf[30] = v23;
        v20 = "%{public}@ complete with reason %u (%{public}s), duration %llums";
        v21 = v14;
        v22 = 38;
      }
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
LABEL_27:

      goto LABEL_28;
    }
    __nwlog_obj();
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = "Invalid completion reason";
    v59 = (char *)_os_log_send_and_compose_impl();

    v130[0] = 16;
    LOBYTE(v110) = 0;
    if (__nwlog_fault(v59, v130, &v110))
    {
      if (v130[0] == 17)
      {
        __nwlog_obj();
        v60 = objc_claimAutoreleasedReturnValue();
        v61 = v130[0];
        if (os_log_type_enabled(v60, (os_log_type_t)v130[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "Invalid completion reason";
          _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
        }
      }
      else if ((_BYTE)v110)
      {
        v69 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v60 = objc_claimAutoreleasedReturnValue();
        v70 = v130[0];
        v71 = os_log_type_enabled(v60, (os_log_type_t)v130[0]);
        if (v69)
        {
          if (v71)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = "Invalid completion reason";
            *(_WORD *)&buf[22] = 2082;
            *(_QWORD *)&buf[24] = v69;
            _os_log_impl(&dword_182FBE000, v60, v70, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v69);
          goto LABEL_146;
        }
        if (v71)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "Invalid completion reason";
          _os_log_impl(&dword_182FBE000, v60, v70, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        __nwlog_obj();
        v60 = objc_claimAutoreleasedReturnValue();
        v76 = v130[0];
        if (os_log_type_enabled(v60, (os_log_type_t)v130[0]))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = "Invalid completion reason";
          _os_log_impl(&dword_182FBE000, v60, v76, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
LABEL_146:
    if (v59)
      free(v59);
    goto LABEL_87;
  }
  __nwlog_obj();
  v54 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
  v55 = (char *)_os_log_send_and_compose_impl();

  v100[0] = OS_LOG_TYPE_ERROR;
  v130[0] = 0;
  if (__nwlog_fault(v55, v100, v130))
  {
    if (v100[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v57 = v100[0];
      if (os_log_type_enabled(v56, v100[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
        _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v130[0])
    {
      v66 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v67 = v100[0];
      v68 = os_log_type_enabled(v56, v100[0]);
      if (v66)
      {
        if (v68)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v66;
          _os_log_impl(&dword_182FBE000, v56, v67, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v66);
        goto LABEL_125;
      }
      if (v68)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
        _os_log_impl(&dword_182FBE000, v56, v67, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v56 = objc_claimAutoreleasedReturnValue();
      v75 = v100[0];
      if (os_log_type_enabled(v56, v100[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_activity_complete_with_reason_and_underlying_error";
        _os_log_impl(&dword_182FBE000, v56, v75, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_125:
  if (v55)
    free(v55);
LABEL_88:

}

void sub_183065E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_connection_start_activity(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_connection_start_activity";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_start_activity";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_connection_start_activity";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7)
          goto LABEL_5;
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_start_activity";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_start_activity";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    nw_activity_activate(v4);
    if (nw_activity_should_log(v5))
      nw_connection_add_client_event_internal(v3, 4, 0, v5);
    goto LABEL_5;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_start_activity";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_start_activity";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null activity", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_start_activity";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_start_activity";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null activity, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_connection_start_activity";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_40;
LABEL_5:

}

void sub_1830663CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_activity_activate(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  os_unfair_lock_s *v4;
  void *v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  os_unfair_lock_s *v16;
  os_log_type_t type[8];
  char v18;
  _QWORD aBlock[4];
  os_unfair_lock_s *v20;
  _BYTE *v21;
  void *v22;
  char v23;
  _BYTE buf[24];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v3 = MEMORY[0x1E0C809B0];
    v25 = 0;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 3221225472;
    aBlock[2] = __nw_activity_activate_block_invoke;
    aBlock[3] = &unk_1E14ACE40;
    v21 = buf;
    v4 = v1;
    v20 = v4;
    v5 = _Block_copy(aBlock);
    v22 = v5;
    nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>(v2 + 18, (uint64_t)&v22);

    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
    {
      if (nw_context_copy_implicit_context::onceToken[0] != -1)
        dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
      *(_QWORD *)type = (id)nw_context_copy_implicit_context::implicit_context;
      v18 = -1;
      v6 = *(id *)type;
      v15[0] = v3;
      v15[1] = 3221225472;
      v15[2] = __nw_activity_activate_block_invoke_49;
      v15[3] = &unk_1E14ACFD0;
      v16 = v4;
      nw_queue_context_async_if_needed(v6, v15);

      if (v6)
    }

    _Block_object_dispose(buf, 8);
    goto LABEL_9;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_activity_activate";
  v8 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (__nwlog_fault(v8, type, &v23))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_activity_activate";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type[0];
      v13 = os_log_type_enabled(v9, type[0]);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_activity_activate";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_activity_activate";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type[0];
      if (os_log_type_enabled(v9, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_activity_activate";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v8)
    free(v8);
LABEL_9:

}

void sub_18306678C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id a25)
{
  void *v25;
  void *v26;
  uint64_t v27;

  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)&a19);
  _Block_object_dispose((const void *)(v27 - 112), 8);

  _Unwind_Resume(a1);
}

void nw_synchronize<nw::unfair_mutex,void({block_pointer} {__strong})(void)>(os_unfair_lock_s *a1, uint64_t a2)
{
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  void *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_synchronize";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v5, &type, &v14))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_synchronize";
        v8 = "%{public}s called with null lock";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
LABEL_32:

      goto LABEL_33;
    }
    if (!v14)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_synchronize";
        v8 = "%{public}s called with null lock, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = type;
    v11 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_synchronize";
        v8 = "%{public}s called with null lock, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_synchronize";
      v18 = 2082;
      v19 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null lock, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(backtrace_string);
LABEL_33:
    if (!v5)
      return;
    goto LABEL_34;
  }
  if (*(_QWORD *)a2)
  {
    os_unfair_lock_lock(a1);
    (*(void (**)(void))(*(_QWORD *)a2 + 16))();
    os_unfair_lock_unlock(a1);
    return;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_synchronize";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v5, &type, &v14))
    goto LABEL_33;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_synchronize";
      v8 = "%{public}s called with null func";
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  if (!v14)
  {
    __nwlog_obj();
    v6 = objc_claimAutoreleasedReturnValue();
    v7 = type;
    if (os_log_type_enabled(v6, type))
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_synchronize";
      v8 = "%{public}s called with null func, backtrace limit exceeded";
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  v12 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = type;
  v13 = os_log_type_enabled(v6, type);
  if (!v12)
  {
    if (v13)
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_synchronize";
      v8 = "%{public}s called with null func, no backtrace";
      goto LABEL_31;
    }
    goto LABEL_32;
  }
  if (v13)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_synchronize";
    v18 = 2082;
    v19 = v12;
    _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null func, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v12);
  if (v5)
LABEL_34:
    free(v5);
}

void __nw_activity_activate_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  const char *v5;
  id v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  _QWORD *v11;
  id v12;
  _BYTE *v13;
  _DWORD *v14;
  unsigned int v15;
  NSObject *v16;
  int is_selected_for_reporting;
  NSObject *v18;
  id v19;
  NSObject *v20;
  NSObject *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  NSObject *v26;
  id v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  _BOOL4 v31;
  uint64_t v32;
  id v33;
  const char *v34;
  char *backtrace_string;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  void *v43;
  os_log_type_t v44;
  NSObject *v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  char *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  os_log_type_t v52;
  os_log_type_t v53;
  uint32_t __upper_bound[2];
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  _BYTE v58[10];
  char *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = (*(_BYTE *)(*(_QWORD *)(a1 + 32) + 132) & 4) == 0;
  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24))
    return;
  v2 = mach_continuous_time();
  if (v2 <= 1)
    v3 = 1;
  else
    v3 = v2;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 32) = v3;
  if (!nw_activity_is_lightweight_representation(*(void **)(a1 + 32)))
  {
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24)
      || (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 24) = nw_activity_get_investigation_id_from_defaults()) != 0)
    {
      if (__nwlog_activity_log::onceToken != -1)
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
      v4 = (id)gactivityLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      {
        v5 = *(const char **)(a1 + 32);
        *(_DWORD *)buf = 138412290;
        v56 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%@ overriding reporting strategy to always due to investigation identifier", buf, 0xCu);
      }

      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 124) = 3;
    }
    if (global_parent && (nw_activity_is_equal(*(void **)(a1 + 32), (void *)global_parent) & 1) == 0)
    {
      v6 = (id)global_parent;
      v7 = *(_QWORD *)(a1 + 32);
      v8 = *(void **)(v7 + 56);
      if ((*(_BYTE *)(v7 + 64) & 1) != 0 && v8)
      {
        *(_QWORD *)(v7 + 56) = 0;

        v8 = *(void **)(v7 + 56);
      }
      *(_QWORD *)(v7 + 56) = 0;

      v9 = *(void **)(v7 + 56);
      *(_QWORD *)(v7 + 56) = v6;
      v10 = v6;

      *(_BYTE *)(v7 + 64) |= 1u;
    }
    v11 = *(id *)(a1 + 32);
    v12 = v11;
    if (v11)
    {
      v13 = (_BYTE *)v11[7];
      if (v13)
      {
        if ((v13[132] & 4) != 0)
        {
          if (nw_activity_is_lightweight_representation(v13))
          {
            v14 = (_DWORD *)*((_QWORD *)v12 + 7);
          }
          else
          {
            if (__nwlog_activity_log::onceToken != -1)
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
            v18 = (id)gactivityLogObj;
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
            {
              v19 = *((id *)v12 + 7);
              *(_DWORD *)buf = 138543618;
              v56 = (const char *)v12;
              v57 = 2114;
              *(_QWORD *)v58 = v19;
              _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "Activity %{public}@ inheriting reporting strategy from parent %{public}@", buf, 0x16u);

            }
            v14 = (_DWORD *)*((_QWORD *)v12 + 7);
            *((_DWORD *)v12 + 31) = v14[31];
          }
          is_selected_for_reporting = nw_activity_is_selected_for_reporting(v14);
          goto LABEL_62;
        }
        if (__nwlog_activity_log::onceToken != -1)
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
        v45 = (id)gactivityLogObj;
        if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_ERROR, "Cannot activate activity if parent is not yet activated (log only)", buf, 2u);
        }

        goto LABEL_61;
      }
      v15 = *((_DWORD *)v12 + 31);
      if (v15 < 2)
      {
        *(_QWORD *)__upper_bound = 0;
        nw_activity_get_sampling_rate_for_domain(*((_DWORD *)v12 + 27), (int *)&__upper_bound[1], __upper_bound);
        if (__nwlog_activity_log::onceToken != -1)
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
        v20 = (id)gactivityLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543874;
          v56 = (const char *)v12;
          v57 = 1024;
          *(_DWORD *)v58 = __upper_bound[1];
          *(_WORD *)&v58[4] = 1024;
          *(_DWORD *)&v58[6] = __upper_bound[0];
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}@ sampled at %u / %u", buf, 0x18u);
        }

        is_selected_for_reporting = arc4random_uniform(__upper_bound[0]) < __upper_bound[1];
      }
      else
      {
        if (v15 != 2)
        {
          if (v15 == 3)
          {
            if (__nwlog_activity_log::onceToken != -1)
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
            v16 = (id)gactivityLogObj;
            if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 138543362;
              v56 = (const char *)v12;
              _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "Always reporting activity %{public}@", buf, 0xCu);
            }

            is_selected_for_reporting = 1;
            goto LABEL_48;
          }
          if (!nw_activity_label_is_valid(*((_DWORD *)v12 + 27), *((_DWORD *)v12 + 26)))
          {
LABEL_56:
            if (__nwlog_activity_log::onceToken != -1)
              dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
            v26 = (id)gactivityLogObj;
            if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 138739971;
              v56 = (const char *)v12;
              _os_log_impl(&dword_182FBE000, v26, OS_LOG_TYPE_ERROR, "Never reporting invalid activity %{sensitive}@", buf, 0xCu);
            }

LABEL_61:
            is_selected_for_reporting = 0;
LABEL_62:

            v27 = *(id *)(a1 + 32);
            uuid_generate_random((unsigned __int8 *)v27 + 8);
            *((_BYTE *)v27 + 17) = *((_BYTE *)v27 + 17) & 0xFE | is_selected_for_reporting;
            os_unfair_lock_lock((os_unfair_lock_t)v27 + 24);
            v28 = (void *)*((_QWORD *)v27 + 10);
            if ((*((_BYTE *)v27 + 88) & 1) != 0 && v28)
            {
              *((_QWORD *)v27 + 10) = 0;

              v28 = (void *)*((_QWORD *)v27 + 10);
            }
            *((_QWORD *)v27 + 10) = 0;

            os_unfair_lock_unlock((os_unfair_lock_t)v27 + 24);
            if ((is_selected_for_reporting | nw_activity_should_log(*(void **)(a1 + 32))) == 1)
            {
              v29 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 56);
              if (__nwlog_activity_log::onceToken != -1)
                dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
              v30 = (id)gactivityLogObj;
              v31 = os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT);
              if (v29)
              {
                if (v31)
                {
                  v32 = *(_QWORD *)(a1 + 32);
                  v33 = *(id *)(v32 + 56);
                  *(_DWORD *)buf = 138543618;
                  v56 = (const char *)v32;
                  v57 = 2114;
                  *(_QWORD *)v58 = v33;
                  _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEFAULT, "Activated %{public}@ with parent %{public}@", buf, 0x16u);

                }
              }
              else if (v31)
              {
                v34 = *(const char **)(a1 + 32);
                *(_DWORD *)buf = 138543362;
                v56 = v34;
                _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEFAULT, "Activated %{public}@", buf, 0xCu);
              }

            }
            *(_BYTE *)(*(_QWORD *)(a1 + 32) + 132) |= 4u;
            return;
          }
          __nwlog_obj();
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          *(_DWORD *)buf = 136446466;
          v56 = "nw_activity_make_reporting_decision";
          v57 = 2082;
          *(_QWORD *)v58 = "Unknown reporting strategy";
          v23 = (char *)_os_log_send_and_compose_impl();

          LOBYTE(__upper_bound[1]) = 16;
          LOBYTE(__upper_bound[0]) = 0;
          if (__nwlog_fault(v23, &__upper_bound[1], __upper_bound))
          {
            if (LOBYTE(__upper_bound[1]) == 17)
            {
              __nwlog_obj();
              v24 = objc_claimAutoreleasedReturnValue();
              v25 = __upper_bound[1];
              if (os_log_type_enabled(v24, __upper_bound[1]))
              {
                *(_DWORD *)buf = 136446466;
                v56 = "nw_activity_make_reporting_decision";
                v57 = 2082;
                *(_QWORD *)v58 = "Unknown reporting strategy";
                _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
              }
            }
            else if (LOBYTE(__upper_bound[0]))
            {
              backtrace_string = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v24 = objc_claimAutoreleasedReturnValue();
              v36 = __upper_bound[1];
              v37 = os_log_type_enabled(v24, __upper_bound[1]);
              if (backtrace_string)
              {
                if (v37)
                {
                  *(_DWORD *)buf = 136446722;
                  v56 = "nw_activity_make_reporting_decision";
                  v57 = 2082;
                  *(_QWORD *)v58 = "Unknown reporting strategy";
                  *(_WORD *)&v58[8] = 2082;
                  v59 = backtrace_string;
                  _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
                }

                free(backtrace_string);
                goto LABEL_87;
              }
              if (v37)
              {
                *(_DWORD *)buf = 136446466;
                v56 = "nw_activity_make_reporting_decision";
                v57 = 2082;
                *(_QWORD *)v58 = "Unknown reporting strategy";
                _os_log_impl(&dword_182FBE000, v24, v36, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
              }
            }
            else
            {
              __nwlog_obj();
              v24 = objc_claimAutoreleasedReturnValue();
              v38 = __upper_bound[1];
              if (os_log_type_enabled(v24, __upper_bound[1]))
              {
                *(_DWORD *)buf = 136446466;
                v56 = "nw_activity_make_reporting_decision";
                v57 = 2082;
                *(_QWORD *)v58 = "Unknown reporting strategy";
                _os_log_impl(&dword_182FBE000, v24, v38, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
              }
            }
            goto LABEL_86;
          }
          goto LABEL_87;
        }
        if (__nwlog_activity_log::onceToken != -1)
          dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
        v21 = (id)gactivityLogObj;
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 138543362;
          v56 = (const char *)v12;
          _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_DEBUG, "Suppressing reports for activity %{public}@", buf, 0xCu);
        }

        is_selected_for_reporting = 0;
      }
LABEL_48:
      if (nw_activity_label_is_valid(*((_DWORD *)v12 + 27), *((_DWORD *)v12 + 26)))
        goto LABEL_62;
      goto LABEL_56;
    }
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_activity_make_reporting_decision";
    v23 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(__upper_bound[1]) = 16;
    LOBYTE(__upper_bound[0]) = 0;
    if (__nwlog_fault(v23, &__upper_bound[1], __upper_bound))
    {
      if (LOBYTE(__upper_bound[1]) == 17)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v44 = __upper_bound[1];
        if (os_log_type_enabled(v24, __upper_bound[1]))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_activity_make_reporting_decision";
          _os_log_impl(&dword_182FBE000, v24, v44, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (LOBYTE(__upper_bound[0]))
      {
        v49 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v50 = __upper_bound[1];
        v51 = os_log_type_enabled(v24, __upper_bound[1]);
        if (v49)
        {
          if (v51)
          {
            *(_DWORD *)buf = 136446466;
            v56 = "nw_activity_make_reporting_decision";
            v57 = 2082;
            *(_QWORD *)v58 = v49;
            _os_log_impl(&dword_182FBE000, v24, v50, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v49);
          goto LABEL_87;
        }
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_activity_make_reporting_decision";
          _os_log_impl(&dword_182FBE000, v24, v50, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v53 = __upper_bound[1];
        if (os_log_type_enabled(v24, __upper_bound[1]))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_activity_make_reporting_decision";
          _os_log_impl(&dword_182FBE000, v24, v53, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }
LABEL_86:

    }
LABEL_87:
    if (v23)
      free(v23);
    goto LABEL_61;
  }
  __nwlog_obj();
  v39 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446466;
  v56 = "nw_activity_activate_block_invoke";
  v57 = 2082;
  *(_QWORD *)v58 = "Cannot activate lightweight representation of an activity";
  v40 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(__upper_bound[1]) = 16;
  LOBYTE(__upper_bound[0]) = 0;
  if (__nwlog_fault(v40, &__upper_bound[1], __upper_bound))
  {
    if (LOBYTE(__upper_bound[1]) == 17)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = __upper_bound[1];
      if (os_log_type_enabled(v41, __upper_bound[1]))
      {
        *(_DWORD *)buf = 136446466;
        v56 = "nw_activity_activate_block_invoke";
        v57 = 2082;
        *(_QWORD *)v58 = "Cannot activate lightweight representation of an activity";
        _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s", buf, 0x16u);
      }
    }
    else if (LOBYTE(__upper_bound[0]))
    {
      v46 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v47 = __upper_bound[1];
      v48 = os_log_type_enabled(v41, __upper_bound[1]);
      if (v46)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446722;
          v56 = "nw_activity_activate_block_invoke";
          v57 = 2082;
          *(_QWORD *)v58 = "Cannot activate lightweight representation of an activity";
          *(_WORD *)&v58[8] = 2082;
          v59 = v46;
          _os_log_impl(&dword_182FBE000, v41, v47, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
        }

        free(v46);
        goto LABEL_123;
      }
      if (v48)
      {
        *(_DWORD *)buf = 136446466;
        v56 = "nw_activity_activate_block_invoke";
        v57 = 2082;
        *(_QWORD *)v58 = "Cannot activate lightweight representation of an activity";
        _os_log_impl(&dword_182FBE000, v41, v47, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace", buf, 0x16u);
      }
    }
    else
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v52 = __upper_bound[1];
      if (os_log_type_enabled(v41, __upper_bound[1]))
      {
        *(_DWORD *)buf = 136446466;
        v56 = "nw_activity_activate_block_invoke";
        v57 = 2082;
        *(_QWORD *)v58 = "Cannot activate lightweight representation of an activity";
        _os_log_impl(&dword_182FBE000, v41, v52, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded", buf, 0x16u);
      }
    }

  }
LABEL_123:
  if (v40)
    free(v40);
}

void sub_1830679A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_activity_is_lightweight_representation(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[132] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_activity_is_lightweight_representation";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_activity_is_lightweight_representation";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_activity_is_lightweight_representation";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_activity_is_lightweight_representation";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_activity_is_lightweight_representation";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

int64_t nw_activity_get_investigation_id_from_defaults(void)
{
  int64_t int64_with_default;
  const char *v1;
  unint64_t int64;
  __uint64_t v3;
  unint64_t v4;
  __uint64_t v5;
  NSObject *v6;
  NSObject *v7;
  const char *v8;
  NSObject *v9;
  uint32_t v10;
  int v12;
  const char *v13;
  __int16 v14;
  unint64_t v15;
  __int16 v16;
  __uint64_t v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_investigation_id, 0);
  if (!int64_with_default)
    return int64_with_default;
  v1 = (const char *)nw_setting_activity_investigation_id_start_time;
  networkd_settings_init();
  if (!sCachedSettings)
  {
LABEL_11:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v12 = 136446210;
      v13 = "nw_activity_get_investigation_id_from_defaults";
      v8 = "%{public}s Investigation ID missing start time, allowing use";
      v9 = v7;
      v10 = 12;
LABEL_13:
      _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, v8, (uint8_t *)&v12, v10);
    }
LABEL_14:

    return int64_with_default;
  }
  pthread_mutex_lock(&sSettingsMutex);
  if (!sCachedSettings)
  {
    pthread_mutex_unlock(&sSettingsMutex);
    goto LABEL_11;
  }
  int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v1);
  pthread_mutex_unlock(&sSettingsMutex);
  if (!int64)
    goto LABEL_11;
  v3 = clock_gettime_nsec_np(_CLOCK_REALTIME);
  v4 = v3 - int64;
  if (v3 >= int64)
  {
    v5 = v3;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v6;
    if (v4 >= 0x2261034C3CA00)
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
      {
        v12 = 136446978;
        v13 = "nw_activity_get_investigation_id_from_defaults";
        v14 = 2048;
        v15 = int64;
        v16 = 2048;
        v17 = v5;
        v18 = 2048;
        v19 = v4 / 0x3B9ACA00;
        _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_INFO, "%{public}s Ignoring investigation ID that has expired (start: %llu, now: %llu, delta_sec: %llu)", (uint8_t *)&v12, 0x2Au);
      }
      int64_with_default = 0;
      goto LABEL_14;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      v12 = 136446978;
      v13 = "nw_activity_get_investigation_id_from_defaults";
      v14 = 2048;
      v15 = int64;
      v16 = 2048;
      v17 = v5;
      v18 = 2048;
      v19 = v4 / 0x3B9ACA00;
      v8 = "%{public}s Investigation ID has not expired (start: %llu, now: %llu, delta_sec: %llu)";
      v9 = v7;
      v10 = 42;
      goto LABEL_13;
    }
    goto LABEL_14;
  }
  return int64_with_default;
}

_DWORD *nw_activity_create(int a1, int a2)
{
  NWConcrete_nw_activity *v4;
  _DWORD *v5;
  _DWORD *v6;
  NSObject *v7;
  int v8;
  int v9;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *backtrace_string;
  os_log_type_t v20;
  _BOOL4 v21;
  char *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  objc_super v29;
  uint8_t buf[4];
  _BYTE v31[10];
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v4 = [NWConcrete_nw_activity alloc];
  if (!v4)
    return 0;
  v29.receiver = v4;
  v29.super_class = (Class)NWConcrete_nw_activity;
  v5 = objc_msgSendSuper2(&v29, sel_init);
  v6 = v5;
  if (!v5)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v11 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if ((__nwlog_fault(v12, &type, &v27) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v20 = type;
        v21 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v21)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
            *(_WORD *)&v31[8] = 2082;
            v32 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v21)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v13 = (id)gLogObj;
        v25 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v12)
      free(v12);
    return 0;
  }
  v5[26] = a2;
  v5[27] = a1;
  *((_BYTE *)v5 + 132) &= ~2u;
  if (nw_activity_should_log(v5))
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v7 = (id)gactivityLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v9 = v6[26];
      v8 = v6[27];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)v31 = v8;
      *(_WORD *)&v31[4] = 1024;
      *(_DWORD *)&v31[6] = v9;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEFAULT, "Create activity <nw_activity %u:%u>", buf, 0xEu);
    }

  }
  if (!nw_activity_label_is_valid(a1, a2))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v15 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v16, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Invalid domain or label specified", buf, 0xCu);
        }
      }
      else if (v27)
      {
        v22 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v23 = type;
        v24 = os_log_type_enabled(v17, type);
        if (v22)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
            *(_WORD *)&v31[8] = 2082;
            v32 = v22;
            _os_log_impl(&dword_182FBE000, v17, v23, "%{public}s Invalid domain or label specified, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v22);
          goto LABEL_46;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl(&dword_182FBE000, v17, v23, "%{public}s Invalid domain or label specified, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v17 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v31 = "-[NWConcrete_nw_activity initWithDomain:label:]";
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s Invalid domain or label specified, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_46:
    if (v16)
      free(v16);
  }
  return v6;
}

void sub_183068524(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_activity_should_log(void *a1)
{
  int *v1;
  int *v2;
  int v3;
  int v4;
  NSObject *v5;
  const char *v6;
  uint64_t v7;
  int v9;
  NSObject *v10;
  const char *v11;
  const char *v12;
  const char *v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  _BYTE v25[18];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)v25 = "nw_activity_should_log";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v15, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v25 = "nw_activity_should_log";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (v22)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v16, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)v25 = "nw_activity_should_log";
            *(_WORD *)&v25[8] = 2082;
            *(_QWORD *)&v25[10] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_66;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v25 = "nw_activity_should_log";
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)v25 = "nw_activity_should_log";
          _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_66:
    if (v15)
      free(v15);
    goto LABEL_44;
  }
  if ((v1[33] & 2) != 0)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v5 = (id)gactivityLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v25 = v2;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "Not checking if we should log for lightweight activity %{public}@", buf, 0xCu);
    }
    goto LABEL_19;
  }
  if (!nw_activity_label_is_valid(v1[27], v1[26]))
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v5 = (id)gactivityLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "Returning true for logging about invalid label", buf, 2u);
    }
    goto LABEL_19;
  }
  if ((v2[33] & 4) != 0 && (*((_BYTE *)v2 + 17) & 1) != 0)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v5 = (id)gactivityLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      *(_QWORD *)v25 = v2;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "Returning true for logging about activity that is selected for reporting %{public}@", buf, 0xCu);
    }
    goto LABEL_19;
  }
  v3 = v2[27];
  if (v3 == 12)
  {
    v9 = v2[26];
    if (v9 == 3)
    {
      if (__nwlog_activity_log::onceToken != -1)
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
      v10 = (id)gactivityLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v13 = nw_activity_domain_and_label_to_string(v2[27], v2[26]);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v25 = 0;
        *(_WORD *)&v25[4] = 2082;
        *(_QWORD *)&v25[6] = v13;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "Returning should log: %u for activity %{public}s", buf, 0x12u);
      }
    }
    else
    {
      if (v9 != 2)
        goto LABEL_20;
      if (__nwlog_activity_log::onceToken != -1)
        dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
      v10 = (id)gactivityLogObj;
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
      {
        v11 = nw_activity_domain_and_label_to_string(v2[27], v2[26]);
        *(_DWORD *)buf = 67109378;
        *(_DWORD *)v25 = 0;
        *(_WORD *)&v25[4] = 2082;
        *(_QWORD *)&v25[6] = v11;
        _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "Returning should log: %u for activity %{public}s", buf, 0x12u);
      }
    }
    goto LABEL_43;
  }
  if (v3 != 11)
    goto LABEL_20;
  v4 = v2[26];
  if (v4 == 8)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v10 = (id)gactivityLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      v12 = nw_activity_domain_and_label_to_string(v2[27], v2[26]);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v25 = 0;
      *(_WORD *)&v25[4] = 2082;
      *(_QWORD *)&v25[6] = v12;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "Returning should log: %u for activity %{public}s", buf, 0x12u);
    }
LABEL_43:

LABEL_44:
    v7 = 0;
    goto LABEL_21;
  }
  if (v4 == 7)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v5 = (id)gactivityLogObj;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
    {
      v6 = nw_activity_domain_and_label_to_string(v2[27], v2[26]);
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)v25 = 1;
      *(_WORD *)&v25[4] = 2082;
      *(_QWORD *)&v25[6] = v6;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_DEBUG, "Returning should log: %u for activity %{public}s", buf, 0x12u);
    }
LABEL_19:

  }
LABEL_20:
  v7 = 1;
LABEL_21:

  return v7;
}

BOOL nw_activity_label_is_valid(int a1, int a2)
{
  unsigned int v4;
  unsigned int v5;
  _BOOL8 result;
  NSObject *v7;
  _DWORD v8[2];
  __int16 v9;
  int v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = a1 - 900;
  v5 = a1 - 11;
  result = (a1 - 900) < 0x64;
  if (v4 < 0x64 || v5 < 0x32)
  {
    switch(v5)
    {
      case 0u:
        if ((a2 - 1) < 8)
          goto LABEL_10;
        break;
      case 1u:
      case 0x16u:
      case 0x1Bu:
      case 0x1Fu:
      case 0x25u:
        if ((a2 - 1) < 3)
          goto LABEL_10;
        break;
      case 2u:
      case 5u:
      case 0xDu:
      case 0xEu:
      case 0xFu:
      case 0x18u:
      case 0x27u:
      case 0x28u:
        if ((a2 - 1) < 2)
          goto LABEL_10;
        break;
      case 3u:
      case 0x15u:
        if ((a2 - 1) < 0xC)
          goto LABEL_10;
        break;
      case 4u:
      case 0x22u:
        if ((a2 - 1) < 9)
          goto LABEL_10;
        break;
      case 6u:
      case 0x13u:
      case 0x2Bu:
      case 0x2Cu:
      case 0x30u:
        if ((a2 - 1) < 4)
          goto LABEL_10;
        break;
      case 7u:
      case 0x2Fu:
        if ((a2 - 1) < 0x11)
          goto LABEL_10;
        break;
      case 0xAu:
        if ((a2 - 1) < 0x17)
          goto LABEL_10;
        break;
      case 0xBu:
      case 0x1Eu:
        if ((a2 - 1) < 6)
          goto LABEL_10;
        break;
      case 0xCu:
        if ((a2 - 1) < 0x18)
          goto LABEL_10;
        break;
      case 0x10u:
      case 0x11u:
      case 0x12u:
        if ((a2 - 1) < 0x42)
          goto LABEL_10;
        break;
      case 0x14u:
      case 0x1Cu:
      case 0x23u:
        if (a2 == 1)
          goto LABEL_10;
        break;
      case 0x17u:
      case 0x31u:
        if ((a2 - 1) < 0xB)
          goto LABEL_10;
        break;
      case 0x19u:
      case 0x26u:
        if ((a2 - 1) < 0xA)
          goto LABEL_10;
        break;
      case 0x1Au:
      case 0x24u:
        if ((a2 - 1) < 0xD)
          goto LABEL_10;
        break;
      case 0x1Du:
      case 0x21u:
      case 0x29u:
        if ((a2 - 1) < 7)
          goto LABEL_10;
        break;
      case 0x20u:
        if ((a2 - 1) < 0x10)
          goto LABEL_10;
        break;
      case 0x2Au:
        if ((a2 - 1) < 5)
LABEL_10:
          result = 1;
        break;
      default:
        return result;
    }
  }
  else
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v7 = (id)gactivityLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      v8[0] = 67109376;
      v8[1] = a2;
      v9 = 1024;
      v10 = a1;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "Label %u is not valid because domain %u is not valid", (uint8_t *)v8, 0xEu);
    }

    return 0;
  }
  return result;
}

void __nw_activity_complete_with_reason_and_underlying_error_block_invoke(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  void *v8;
  char *v9;
  _BOOL4 v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 132) & 4) != 0)
  {
    if ((*(_BYTE *)(v2 + 132) & 8) == 0)
    {
      *(_BYTE *)(v2 + 132) |= 8u;
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 116) = *(_DWORD *)(a1 + 48);
      *(_DWORD *)(*(_QWORD *)(a1 + 32) + 120) = *(_DWORD *)(a1 + 52);
      return;
    }
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
    v17 = 2082;
    v18 = "Cannot complete activity more than once";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v4, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
          v17 = 2082;
          v18 = "Cannot complete activity more than once";
          v7 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s";
          goto LABEL_31;
        }
      }
      else
      {
        if (v13)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v5 = objc_claimAutoreleasedReturnValue();
          v6 = type;
          v12 = os_log_type_enabled(v5, type);
          if (backtrace_string)
          {
            if (v12)
            {
              *(_DWORD *)buf = 136446722;
              v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
              v17 = 2082;
              v18 = "Cannot complete activity more than once";
              v19 = 2082;
              v20 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
            }

            free(backtrace_string);
            if (!v4)
              goto LABEL_35;
            goto LABEL_34;
          }
          if (!v12)
            goto LABEL_32;
          *(_DWORD *)buf = 136446466;
          v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
          v17 = 2082;
          v18 = "Cannot complete activity more than once";
          v7 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace";
          goto LABEL_31;
        }
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        if (os_log_type_enabled(v5, type))
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
          v17 = 2082;
          v18 = "Cannot complete activity more than once";
          v7 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded";
          goto LABEL_31;
        }
      }
      goto LABEL_32;
    }
  }
  else
  {
    __nwlog_obj();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446466;
    v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
    v17 = 2082;
    v18 = "Cannot complete activity before activation";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v4, &type, &v13))
      goto LABEL_33;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
        v17 = 2082;
        v18 = "Cannot complete activity before activation";
        v7 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0x16u);
      }
LABEL_32:

      goto LABEL_33;
    }
    if (!v13)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
        v17 = 2082;
        v18 = "Cannot complete activity before activation";
        v7 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, backtrace limit exceeded";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    v9 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v5 = objc_claimAutoreleasedReturnValue();
    v6 = type;
    v10 = os_log_type_enabled(v5, type);
    if (!v9)
    {
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
        v17 = 2082;
        v18 = "Cannot complete activity before activation";
        v7 = "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, no backtrace";
        goto LABEL_31;
      }
      goto LABEL_32;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446722;
      v16 = "nw_activity_complete_with_reason_and_underlying_error_block_invoke";
      v17 = 2082;
      v18 = "Cannot complete activity before activation";
      v19 = 2082;
      v20 = v9;
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s BUG IN CLIENT OF LIBNETWORK: %{public}s, dumping backtrace:%{public}s", buf, 0x20u);
    }

    free(v9);
  }
LABEL_33:
  if (v4)
LABEL_34:
    free(v4);
LABEL_35:
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = 0;
}

void nw_activity_get_sampling_rate_for_domain(unsigned int a1, int *a2, unsigned int *a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  NSObject *v9;
  const char *v10;
  unsigned int int64_with_default;
  unsigned int v12;
  NSObject *v13;
  const char *v14;
  uint64_t v15;
  const char **v16;
  NSObject *v17;
  const char *v18;
  unsigned int v19;
  NSObject *v21;
  const char *v22;
  const char *v23;
  int *v24;
  unsigned int int64;
  unsigned int *v26;
  const char *v27;
  int v28;
  int v29;
  BOOL v30;
  int v31;
  _BOOL4 v32;
  _BOOL4 v33;
  int v34;
  NSObject *v35;
  const char *v36;
  NSObject *v37;
  const char *v38;
  void *v39;
  char *v40;
  NSObject *v41;
  os_log_type_t v42;
  void *v43;
  os_log_type_t v44;
  void *v45;
  os_log_type_t v46;
  char *backtrace_string;
  os_log_type_t v48;
  _BOOL4 v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  os_log_type_t v53;
  _BOOL4 v54;
  os_log_type_t v55;
  os_log_type_t v56;
  os_log_type_t v57;
  char v58;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v61;
  __int16 v62;
  _BYTE v63[10];
  __int16 v64;
  int v65;
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_activity_get_sampling_rate_for_domain";
    v40 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (!__nwlog_fault(v40, &type, &v58))
      goto LABEL_151;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_182FBE000, v41, v42, "%{public}s called with null domain", buf, 0xCu);
      }
    }
    else if (v58)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      v49 = os_log_type_enabled(v41, type);
      if (backtrace_string)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136446466;
          v61 = "nw_activity_get_sampling_rate_for_domain";
          v62 = 2082;
          *(_QWORD *)v63 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v41, v48, "%{public}s called with null domain, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_151:
        if (!v40)
          return;
        goto LABEL_152;
      }
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_182FBE000, v41, v48, "%{public}s called with null domain, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v55 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_182FBE000, v41, v55, "%{public}s called with null domain, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_150:

    goto LABEL_151;
  }
  if (!a2)
  {
    __nwlog_obj();
    v43 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_activity_get_sampling_rate_for_domain";
    v40 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (!__nwlog_fault(v40, &type, &v58))
      goto LABEL_151;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_182FBE000, v41, v44, "%{public}s called with null out_sampling_rate_numerator", buf, 0xCu);
      }
      goto LABEL_150;
    }
    if (!v58)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v56 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_182FBE000, v41, v56, "%{public}s called with null out_sampling_rate_numerator, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_150;
    }
    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v41 = objc_claimAutoreleasedReturnValue();
    v51 = type;
    v52 = os_log_type_enabled(v41, type);
    if (!v50)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_182FBE000, v41, v51, "%{public}s called with null out_sampling_rate_numerator, no backtrace", buf, 0xCu);
      }
      goto LABEL_150;
    }
    if (v52)
    {
      *(_DWORD *)buf = 136446466;
      v61 = "nw_activity_get_sampling_rate_for_domain";
      v62 = 2082;
      *(_QWORD *)v63 = v50;
      _os_log_impl(&dword_182FBE000, v41, v51, "%{public}s called with null out_sampling_rate_numerator, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_131;
  }
  if (!a3)
  {
    __nwlog_obj();
    v45 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v61 = "nw_activity_get_sampling_rate_for_domain";
    v40 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v58 = 0;
    if (!__nwlog_fault(v40, &type, &v58))
      goto LABEL_151;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_182FBE000, v41, v46, "%{public}s called with null out_sampling_rate_denominator", buf, 0xCu);
      }
      goto LABEL_150;
    }
    if (!v58)
    {
      __nwlog_obj();
      v41 = objc_claimAutoreleasedReturnValue();
      v57 = type;
      if (os_log_type_enabled(v41, type))
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_182FBE000, v41, v57, "%{public}s called with null out_sampling_rate_denominator, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_150;
    }
    v50 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v41 = objc_claimAutoreleasedReturnValue();
    v53 = type;
    v54 = os_log_type_enabled(v41, type);
    if (!v50)
    {
      if (v54)
      {
        *(_DWORD *)buf = 136446210;
        v61 = "nw_activity_get_sampling_rate_for_domain";
        _os_log_impl(&dword_182FBE000, v41, v53, "%{public}s called with null out_sampling_rate_denominator, no backtrace", buf, 0xCu);
      }
      goto LABEL_150;
    }
    if (v54)
    {
      *(_DWORD *)buf = 136446466;
      v61 = "nw_activity_get_sampling_rate_for_domain";
      v62 = 2082;
      *(_QWORD *)v63 = v50;
      _os_log_impl(&dword_182FBE000, v41, v53, "%{public}s called with null out_sampling_rate_denominator, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_131:

    free(v50);
    if (!v40)
      return;
LABEL_152:
    free(v40);
    return;
  }
  v6 = a1 - 11;
  if (a1 - 11 > 0x31)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = dword_183C6E1D8[v6];
    v8 = 1;
  }
  if (__nwlog_activity_log::onceToken != -1)
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
  v9 = (id)gactivityLogObj;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x32)
    {
      if (a1 - 900 >= 0x64)
      {
        v10 = "invalid";
        if (a1 < 0xB)
          v10 = "reserved";
      }
      else
      {
        v10 = "experimental";
      }
    }
    else
    {
      v10 = off_1E14A58C0[v6];
    }
    *(_DWORD *)buf = 136315650;
    v61 = v10;
    v62 = 1024;
    *(_DWORD *)v63 = v8;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v7;
    _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "Domain %s rate configured in registry as %u / %u", buf, 0x18u);
  }

  int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_default_numerator, v8);
  v12 = networkd_settings_get_int64_with_default((const char *)nw_setting_activity_default_denominator, v7);
  if (__nwlog_activity_log::onceToken != -1)
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
  v13 = (id)gactivityLogObj;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x32)
    {
      if (a1 - 900 >= 0x64)
      {
        v14 = "invalid";
        if (a1 < 0xB)
          v14 = "reserved";
      }
      else
      {
        v14 = "experimental";
      }
    }
    else
    {
      v14 = off_1E14A58C0[v6];
    }
    *(_DWORD *)buf = 136315650;
    v61 = v14;
    v62 = 1024;
    *(_DWORD *)v63 = int64_with_default;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v12;
    _os_log_impl(&dword_182FBE000, v13, OS_LOG_TYPE_DEBUG, "Domain %s rate configured after remote default override as %u / %u", buf, 0x18u);
  }

  if (v6 < 0x32)
  {
    v15 = v6;
    v16 = (const char **)off_1E14A5730[v15];
    int64_with_default = networkd_settings_get_int64_with_default(*(const char **)off_1E14A55A0[v15], int64_with_default);
    v12 = networkd_settings_get_int64_with_default(*v16, v12);
  }
  if (__nwlog_activity_log::onceToken != -1)
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
  v17 = (id)gactivityLogObj;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x32)
    {
      if (a1 - 900 >= 0x64)
      {
        v18 = "invalid";
        if (a1 < 0xB)
          v18 = "reserved";
      }
      else
      {
        v18 = "experimental";
      }
    }
    else
    {
      v18 = off_1E14A58C0[v6];
    }
    *(_DWORD *)buf = 136315650;
    v61 = v18;
    v62 = 1024;
    *(_DWORD *)v63 = int64_with_default;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v12;
    _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEBUG, "After reading settings plist, domain %s rate configured as %u / %u", buf, 0x18u);
  }

  v19 = a1 - 900;
  if (a1 - 900 >= 0x64 && v6 >= 0x32)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v21 = (id)gactivityLogObj;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
    {
      v22 = "invalid";
      *(_DWORD *)buf = 136315906;
      if (a1 < 0xB)
        v22 = "reserved";
      v61 = v22;
      v62 = 1024;
      *(_DWORD *)v63 = a1;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = 0;
      v64 = 1024;
      v65 = 0;
      _os_log_impl(&dword_182FBE000, v21, OS_LOG_TYPE_INFO, "Invalid domain (%s: %u) sampled at %u / %u", buf, 0x1Eu);
    }

    int64_with_default = 0;
    v12 = 0;
  }
  v23 = (const char *)nw_setting_activity_report_numerator;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    v24 = a2;
    if (sCachedSettings)
      int64 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v23);
    else
      int64 = 0;
    v26 = a3;
    pthread_mutex_unlock(&sSettingsMutex);
  }
  else
  {
    v24 = a2;
    v26 = a3;
    int64 = 0;
  }
  v27 = (const char *)nw_setting_activity_report_denominator;
  networkd_settings_init();
  if (sCachedSettings)
  {
    pthread_mutex_lock(&sSettingsMutex);
    if (sCachedSettings)
      v28 = xpc_dictionary_get_int64((xpc_object_t)sCachedSettings, v27);
    else
      v28 = 0;
    pthread_mutex_unlock(&sSettingsMutex);
  }
  else
  {
    v28 = 0;
  }
  if (int64 <= 1)
    v29 = 1;
  else
    v29 = int64;
  if (v19 >= 0x64)
    v29 = int64;
  if (v28)
    v30 = 1;
  else
    v30 = v19 >= 0x64;
  if (v30)
    v31 = v28;
  else
    v31 = 20000;
  v32 = v29 != 0;
  v33 = v31 != 0;
  if (v32 && v33)
    v34 = v29;
  else
    v34 = int64_with_default;
  if (v32 && v33)
    v12 = v31;
  if (__nwlog_activity_log::onceToken != -1)
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
  v35 = (id)gactivityLogObj;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x32)
    {
      if (v19 >= 0x64)
      {
        v36 = "invalid";
        if (a1 < 0xB)
          v36 = "reserved";
      }
      else
      {
        v36 = "experimental";
      }
    }
    else
    {
      v36 = off_1E14A58C0[v6];
    }
    *(_DWORD *)buf = 136315650;
    v61 = v36;
    v62 = 1024;
    *(_DWORD *)v63 = v34;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v12;
    _os_log_impl(&dword_182FBE000, v35, OS_LOG_TYPE_DEBUG, "After settings override, domain %s rate configured as %u / %u", buf, 0x18u);
  }

  if (nw_activity_should_use_elevated_sampling_rate(void)::onceToken != -1)
    dispatch_once(&nw_activity_should_use_elevated_sampling_rate(void)::onceToken, &__block_literal_global_1181);
  if (__nwlog_activity_log::onceToken != -1)
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
  v37 = (id)gactivityLogObj;
  if (os_log_type_enabled(v37, OS_LOG_TYPE_DEBUG))
  {
    if (v6 >= 0x32)
    {
      if (v19 >= 0x64)
      {
        v38 = "invalid";
        if (a1 < 0xB)
          v38 = "reserved";
      }
      else
      {
        v38 = "experimental";
      }
    }
    else
    {
      v38 = off_1E14A58C0[v6];
    }
    *(_DWORD *)buf = 136315650;
    v61 = v38;
    v62 = 1024;
    *(_DWORD *)v63 = v34;
    *(_WORD *)&v63[4] = 1024;
    *(_DWORD *)&v63[6] = v12;
    _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEBUG, "Final domain %s rate configured as %u / %u", buf, 0x18u);
  }

  *v24 = v34;
  *v26 = v12;
}

void __nw_activity_set_global_parent_block_invoke()
{
  void *v0;

  v0 = (void *)global_parent;
  global_parent = 0;

}

uint64_t nw_protocol_instance_get_flow_for_key(void *a1, uint64_t a2)
{
  _QWORD *v3;
  char *v4;
  uint64_t v5;
  _BOOL8 node;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  NSObject *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  NSObject *v23;
  uint64_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = (char *)v3;
  if (!v3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_instance_get_flow_for_key";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null instance", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (!v27)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_protocol_instance_get_flow_for_key";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (!a2)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_instance_get_flow_for_key";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27))
      goto LABEL_54;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null key", buf, 0xCu);
      }
LABEL_53:

LABEL_54:
      if (v13)
        free(v13);
      goto LABEL_13;
    }
    if (!v27)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_53;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_instance_get_flow_for_key";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_53;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_protocol_instance_get_flow_for_key";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(backtrace_string);
    goto LABEL_54;
  }
  v5 = v3[30];
  if (!v5 || !*(_DWORD *)(v5 + 40))
  {
    if ((v4[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v30 = "nw_protocol_instance_get_flow_for_key";
        v31 = 2082;
        v32 = v4 + 407;
        v33 = 2080;
        v34 = " ";
        _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFlow mapping table is empty", buf, 0x20u);
      }

    }
    goto LABEL_13;
  }
  node = nw_hash_table_get_node(v5, a2, *(unsigned int *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 80) + 256));
  if (!node)
  {
    if ((v4[405] & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v11 = (id)gLogObj;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446978;
        v30 = "nw_protocol_instance_get_flow_for_key";
        v31 = 2082;
        v32 = v4 + 407;
        v33 = 2080;
        v34 = " ";
        v35 = 2048;
        v36 = a2;
        _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sNo flow found for key %p", buf, 0x2Au);
      }

    }
LABEL_13:
    v8 = 0;
    goto LABEL_14;
  }
  v7 = node;
  if ((v4[405] & 0x80000000) == 0 && gLogDatapath)
  {
    __nwlog_obj();
    v23 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      v24 = *(_QWORD *)(v7 + 32);
      *(_DWORD *)buf = 136447234;
      v30 = "nw_protocol_instance_get_flow_for_key";
      v31 = 2082;
      v32 = v4 + 407;
      v33 = 2080;
      v34 = " ";
      v35 = 2048;
      v36 = v24;
      v37 = 2048;
      v38 = a2;
      _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFound flow %llx for custom flow mapping key %p", buf, 0x34u);
    }

  }
  v8 = *(_QWORD *)(v7 + 32);
LABEL_14:

  return v8;
}

uint64_t nw_libnetwork_library_initializer(void)
{
  si_set_nat64_v4_requires_synthesis();
  si_set_nat64_v4_synthesize();
  return si_set_path_check();
}

id nw_connection_copy_protocol_metadata_on_queue(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[4];
  id v16;
  id v17;
  _BYTE *v18;
  char v19;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v22)(uint64_t, uint64_t);
  void (*v23)(uint64_t);
  id v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    nw_context_assert_queue(*((void **)v3 + 3));
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v22 = __Block_byref_object_copy__24122;
    v23 = __Block_byref_object_dispose__24123;
    v24 = 0;
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_copy_protocol_metadata_on_queue_block_invoke;
    v15[3] = &unk_1E14A2D98;
    v18 = buf;
    v16 = v3;
    v17 = v4;
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 34);
    __nw_connection_copy_protocol_metadata_on_queue_block_invoke((uint64_t)v15);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 34);
    v5 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_on_queue";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v8, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_on_queue";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_on_queue";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_on_queue";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_on_queue";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_3:

  return v5;
}

void sub_18306AAD0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void __nw_connection_copy_protocol_metadata_on_queue_block_invoke(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = nw_connection_copy_protocol_metadata_locked(*(_QWORD *)(a1 + 32), *(void **)(a1 + 40), 1, 0);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

nw_protocol_metadata_t nw_connection_copy_protocol_metadata(nw_connection_t connection, nw_protocol_definition_t definition)
{
  NSObject *v3;
  NSObject *v4;
  NSObject *v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = connection;
  v4 = definition;
  if (v3)
  {
    nw_connection_copy_protocol_metadata_internal(v3, v4, 0);
    v5 = objc_claimAutoreleasedReturnValue();
    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_connection_copy_protocol_metadata";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_connection_copy_protocol_metadata";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_connection_copy_protocol_metadata";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_connection_copy_protocol_metadata";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_connection_copy_protocol_metadata";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_3:

  return v5;
}

void sub_18306ADDC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_connection_copy_protocol_metadata_internal(void *a1, void *a2, char a3)
{
  os_unfair_lock_s *v5;
  id v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  os_unfair_lock_s *v18;
  id v19;
  _BYTE *v20;
  char v21;
  char v22;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  id v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  if (v5)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v25 = __Block_byref_object_copy__24122;
    v26 = __Block_byref_object_dispose__24123;
    v27 = 0;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[2] = __nw_connection_copy_protocol_metadata_internal_block_invoke;
    v17[3] = &unk_1E149DA38;
    v17[1] = 3221225472;
    v18 = v5;
    v20 = buf;
    v19 = v6;
    v21 = a3;
    os_unfair_lock_lock(v5 + 34);
    __nw_connection_copy_protocol_metadata_internal_block_invoke((uint64_t)v17);
    os_unfair_lock_unlock(v5 + 34);
    v7 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_internal";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v22 = 0;
  if (__nwlog_fault(v10, &type, &v22))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_internal";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_internal";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_internal";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_protocol_metadata_internal";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_3:

  return v7;
}

void __nw_connection_copy_protocol_metadata_internal_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  int v6;
  id v7;
  id v8;
  uint64_t v9;
  void *v10;
  int v11;
  const char *v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v6 = *(unsigned __int8 *)(a1 + 56);
    v7 = *(id *)(a1 + 40);
    v8 = nw_endpoint_handler_copy_protocol_metadata(*(void **)(v2 + 144), v7, 0, v6);

    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v10 = *(void **)(v9 + 40);
    *(_QWORD *)(v9 + 40) = v8;

  }
  else
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v11 = 136446466;
        v12 = "nw_connection_copy_protocol_metadata_internal_block_invoke";
        v13 = 1024;
        v14 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_copy_protocol_metadata_internal on unconnected nw_connection", (uint8_t *)&v11, 0x12u);
      }

    }
  }
}

void sub_18306B2DC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_protocol_metadata(void *a1, void *a2, int a3, int a4)
{
  id v7;
  id v8;
  void *v9;
  id v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v9 = v8;
  if (v7)
  {
    if (v8)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v7 + 28);
      if (*((_DWORD *)v7 + 29) == 2)
        v10 = nw_endpoint_flow_copy_protocol_metadata(v7, *((void **)v7 + 31), v9, a3, a4);
      else
        v10 = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)v7 + 28);
      goto LABEL_7;
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_endpoint_handler_copy_protocol_metadata";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null definition", buf, 0xCu);
        }
LABEL_39:

        goto LABEL_40;
      }
      if (!v25)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null definition, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_endpoint_handler_copy_protocol_metadata";
        v29 = 2082;
        v30 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_27;
    }
  }
  else
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_endpoint_handler_copy_protocol_metadata";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (!v25)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_39;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_endpoint_handler_copy_protocol_metadata";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_39;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_endpoint_handler_copy_protocol_metadata";
        v29 = 2082;
        v30 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_27:

      free(backtrace_string);
    }
  }
LABEL_40:
  if (v13)
    free(v13);
  v10 = 0;
LABEL_7:

  return v10;
}

void sub_18306B7E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_endpoint_flow_copy_protocol_metadata(void *a1, void *a2, void *a3, int a4, int a5)
{
  NWConcrete_nw_endpoint_handler *v9;
  os_unfair_lock_s *v10;
  id v11;
  uint64_t v12;
  unsigned __int8 *v13;
  id v14;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _QWORD v24[4];
  id v25;
  _BYTE *v26;
  char v27;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a3;
  if (v10)
  {
    if (a4)
      nw_endpoint_flow_update_connected_metadata(v9, a5);
    os_unfair_lock_lock(v10 + 220);
    v12 = 262;
    if (a5)
      v12 = 264;
    v13 = (unsigned __int8 *)*(id *)&v10[v12]._os_unfair_lock_opaque;
    os_unfair_lock_unlock(v10 + 220);
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v30 = __Block_byref_object_copy__79983;
    v31 = __Block_byref_object_dispose__79984;
    v32 = 0;
    v24[0] = MEMORY[0x1E0C809B0];
    v24[1] = 3221225472;
    v24[2] = __nw_endpoint_flow_copy_protocol_metadata_block_invoke;
    v24[3] = &unk_1E14AB5F0;
    v25 = v11;
    v26 = buf;
    nw_array_apply(v13, (uint64_t)v24);
    v14 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_7;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_metadata";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (__nwlog_fault(v17, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_metadata";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_metadata";
        _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_copy_protocol_metadata";
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v17)
    free(v17);
  v14 = 0;
LABEL_7:

  return v14;
}

void sub_18306BB90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_activity_complete_with_reason(void *a1, uint32_t a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    nw_activity_complete_with_reason_and_underlying_error(v3, a2, 0, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_activity_complete_with_reason";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_activity_complete_with_reason";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null activity", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_activity_complete_with_reason";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_activity_complete_with_reason";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_activity_complete_with_reason";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_18306BE48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_is_per_app_vpn(void *a1)
{
  NWConcrete_nw_path *v1;
  NWConcrete_nw_path *v2;
  _BOOL8 vpn_config_uuid;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[24];
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = 0;
    vpn_config_uuid = nw_path_get_vpn_config_uuid(v1, (unsigned __int8 (*)[16])buf, 0, 0, 0);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_is_per_app_vpn";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_is_per_app_vpn";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_is_per_app_vpn";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_is_per_app_vpn";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_is_per_app_vpn";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  vpn_config_uuid = 0;
LABEL_3:

  return vpn_config_uuid;
}

void sub_18306C108(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_endpoint_t *nw_resolver_create_with_path(void *a1)
{
  id v1;
  NWConcrete_nw_resolver *v2;
  id *v3;
  id v4;
  _BOOL8 v5;
  nw_endpoint_t *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (v1)
  {
    v2 = [NWConcrete_nw_resolver alloc];
    v3 = (id *)v1;
    v4 = v3[3];

    v5 = nw_path_copy_derived_parameters(v3);
    v6 = -[NWConcrete_nw_resolver initWithEndpoint:parameters:path:log_str:](v2, v4, (void *)v5, v3, 0);

    goto LABEL_3;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_resolver_create_with_path";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_create_with_path";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_resolver_create_with_path";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_create_with_path";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_resolver_create_with_path";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_3:

  return v6;
}

void sub_18306C408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_path_copy_derived_parameters(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  id v4;
  _BOOL8 v5;
  NSObject *v6;

  v1 = a1;
  v2 = v1;
  if (v1 && (v3 = (void *)*((_QWORD *)v1 + 2)) != 0)
  {
    v4 = v3;
    v5 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v4, 0, 0);

    if ((nw_path_may_span_multiple_interfaces(v2) & 1) == 0)
    {
      v6 = nw_path_copy_scoped_interface(v2);
      if (v6)
        nw_parameters_require_interface((nw_parameters_t)v5, v6);

    }
  }
  else
  {
    v5 = 0;
  }

  return v5;
}

void sub_18306C4CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL __nw_endpoint_enumerate_cnames_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  NSObject *v4;
  _BOOL8 v5;

  v4 = a3;
  v5 = nw_endpoint_get_type(v4) != nw_endpoint_type_host
    || !nw_endpoint_get_hostname(v4)
    || ((*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))() & 1) != 0;

  return v5;
}

void sub_18306C568(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_18306D470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{

  _Unwind_Resume(a1);
}

void nw_path_assert_required_agents(void *a1)
{
  _QWORD *v1;
  void *v2;
  void *v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD applier[4];
  _QWORD *v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (void *)v1[28];
    if (v3)
    {
      applier[0] = MEMORY[0x1E0C809B0];
      applier[1] = 3221225472;
      applier[2] = __nw_path_assert_required_agents_block_invoke;
      applier[3] = &unk_1E14A8E38;
      v13 = v1;
      xpc_dictionary_apply(v3, applier);

    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_path_assert_required_agents";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_assert_required_agents";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_path_assert_required_agents";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_assert_required_agents";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_path_assert_required_agents";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v5)
    free(v5);
LABEL_4:

}

void sub_18306D7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18306E360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void nw_path_enumerate_resolver_configs(void *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  unsigned __int8 *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  id v18;
  char v19;
  os_log_type_t type;
  _BYTE buf[24];
  void *v22;
  id v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = v3;
    v6 = MEMORY[0x1E0C809B0];
    *(_QWORD *)buf = MEMORY[0x1E0C809B0];
    *(_QWORD *)&buf[8] = 3221225472;
    *(_QWORD *)&buf[16] = ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke;
    v22 = &unk_1E14ACFD0;
    v7 = v5;
    v23 = v7;
    os_unfair_lock_lock((os_unfair_lock_t)v7 + 2);
    ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke((uint64_t)buf);
    os_unfair_lock_unlock((os_unfair_lock_t)v7 + 2);

    v8 = (unsigned __int8 *)*((_QWORD *)v7 + 23);
    v17[0] = v6;
    v17[1] = 3221225472;
    v17[2] = __nw_path_enumerate_resolver_configs_block_invoke;
    v17[3] = &unk_1E14AC278;
    v18 = v4;
    nw_array_apply(v8, (uint64_t)v17);

    goto LABEL_3;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_enumerate_resolver_configs";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v10, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_enumerate_resolver_configs";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_enumerate_resolver_configs";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_enumerate_resolver_configs";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_enumerate_resolver_configs";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v10)
    free(v10);
LABEL_3:

}

void sub_18306E70C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_path_has_dns(nw_path_t path)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  os_unfair_lock_s *v4;
  uint64_t v5;
  BOOL v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  void *v19;
  os_unfair_lock_s *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = path;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_has_dns";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_has_dns";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_has_dns";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_has_dns";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_has_dns";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v8)
      free(v8);
    goto LABEL_22;
  }
  v3 = v1;
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 3221225472;
  *(_QWORD *)&buf[16] = ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke;
  v19 = &unk_1E14ACFD0;
  v4 = v3;
  v20 = v4;
  os_unfair_lock_lock(v4 + 2);
  ___ZL18nw_path_update_dnsP18NWConcrete_nw_path_block_invoke((uint64_t)buf);
  os_unfair_lock_unlock(v4 + 2);

  v5 = *(_QWORD *)&v4[46]._os_unfair_lock_opaque;
  if (!v5)
  {
LABEL_22:
    v6 = 0;
    goto LABEL_23;
  }
  v6 = *(_QWORD *)(v5 + 24) != *(_QWORD *)(v5 + 16);
LABEL_23:

  return v6;
}

void sub_18306EA30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_has_ipv6(nw_path_t path)
{
  nw_path_t v1;
  nw_path_t v2;
  BOOL v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = path;
  v2 = v1;
  if (v1)
  {
    v3 = SBYTE1(v1[59].isa) < 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_ipv6";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_ipv6";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_ipv6";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_ipv6";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_ipv6";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_has_ipv4(nw_path_t path)
{
  nw_path_t v1;
  nw_path_t v2;
  _BOOL4 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = path;
  v2 = v1;
  if (v1)
  {
    v3 = (BYTE1(v1[59].isa) >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_has_ipv4";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_ipv4";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_has_ipv4";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_ipv4";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_has_ipv4";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  LOBYTE(v3) = 0;
LABEL_3:

  return v3;
}

id nw_path_copy_scoped_interface(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  _DWORD *v4;
  _DWORD *v5;
  int v6;
  int v8;
  id v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v22 = "nw_path_copy_scoped_interface";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v19 = 0;
    if (__nwlog_fault(v12, &type, &v19))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_path_copy_scoped_interface";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v19)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        v17 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v17)
          {
            *(_DWORD *)buf = 136446466;
            v22 = "nw_path_copy_scoped_interface";
            v23 = 2082;
            v24 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_path_copy_scoped_interface";
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v22 = "nw_path_copy_scoped_interface";
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_30:
    if (v12)
      free(v12);
    goto LABEL_12;
  }
  if ((*((_BYTE *)v1 + 476) & 1) == 0 || (v3 = (void *)*((_QWORD *)v1 + 11)) == 0)
  {
    v4 = v1;
    v5 = v4;
    v6 = v4[66];
    if (v6 != 6 && v6 != 12)
    {

LABEL_12:
      v9 = 0;
      goto LABEL_13;
    }
    v8 = v4[67];

    if (!v8)
      goto LABEL_12;
    v3 = (void *)*((_QWORD *)v5 + 12);
    if (!v3)
      goto LABEL_12;
  }
  v9 = v3;
LABEL_13:

  return v9;
}

uint64_t nw_path_has_unsatisfied_route(void *a1)
{
  unsigned int *v1;
  unsigned int *v2;
  unsigned int v3;
  BOOL v4;
  unsigned int v5;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_path_has_unsatisfied_route";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_has_unsatisfied_route";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_path_has_unsatisfied_route";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_has_unsatisfied_route";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_has_unsatisfied_route";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_22:
    if (v8)
      free(v8);
    goto LABEL_24;
  }
  if (v1[94] != 2)
  {
LABEL_24:
    v6 = 0;
    goto LABEL_25;
  }
  v3 = v1[95];
  v4 = v3 > 0x1F;
  v5 = (0xBC000168 >> v3) & 1;
  if (v4)
    v6 = 0;
  else
    v6 = v5;
LABEL_25:

  return v6;
}

uint64_t nw_path_get_dns_service_id(void *a1, char a2)
{
  nw_endpoint_t *v3;
  nw_endpoint_t *v4;
  uint64_t hostname;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  os_log_type_t type[4];
  char v18;
  uint8_t buf[24];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_get_dns_service_id";
    v9 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v9, type, &v18))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_get_dns_service_id";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type[0];
        v14 = os_log_type_enabled(v10, type[0]);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_get_dns_service_id";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_get_dns_service_id";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type[0];
        if (os_log_type_enabled(v10, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_get_dns_service_id";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_26:
    if (v9)
      free(v9);
    goto LABEL_28;
  }
  if (nw_endpoint_get_type(v3[3]) != nw_endpoint_type_host)
    goto LABEL_28;
  if (*((_DWORD *)v4 + 66) != 4 || (hostname = *((unsigned int *)v4 + 67), !(_DWORD)hostname) || (a2 & 1) == 0)
  {
    hostname = (uint64_t)nw_endpoint_get_hostname(v4[3]);
    if (hostname)
    {
      *(_DWORD *)type = 0;
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = 0;
      if (nw_path_get_vpn_config_uuid((NWConcrete_nw_path *)v4, (unsigned __int8 (*)[16])buf, (int *)type, 1, 1))
      {
        v6 = v4[12];
        if (v6)
        {
          v7 = v6;
          hostname = ne_session_service_get_dns_service_id_for_interface();

          goto LABEL_29;
        }
      }
LABEL_28:
      hostname = 0;
    }
  }
LABEL_29:

  return hostname;
}

void sub_18306F830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *__cdecl nw_endpoint_get_hostname(nw_endpoint_t endpoint)
{
  NSObject *v1;
  NSObject *v2;
  const char *v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = endpoint;
  v2 = v1;
  if (v1)
  {
    v3 = (const char *)-[NSObject hostname](v1, "hostname");
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_get_hostname";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_hostname";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_get_hostname";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_hostname";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_hostname";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_18306FAF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_resolver_set_update_handler(void *a1, void *a2, void *a3)
{
  id v6;
  id v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  void *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[4];
  id v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = a2;
  v8 = a3;
  v9 = v8;
  if (v6)
  {
    if (v8)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v6 + 3);
      if (*((_QWORD *)v6 + 12))
      {
        os_unfair_lock_unlock((os_unfair_lock_t)v6 + 3);
        v10 = 0;
      }
      else
      {
        v11 = _Block_copy(v9);
        v12 = (void *)*((_QWORD *)v6 + 12);
        *((_QWORD *)v6 + 12) = v11;

        objc_storeStrong((id *)v6 + 14, a2);
        *((_WORD *)v6 + 44) = 0;
        objc_storeStrong((id *)v6 + 27, a1);
        os_unfair_lock_unlock((os_unfair_lock_t)v6 + 3);
        v13 = (void *)*((_QWORD *)v6 + 4);
        v28[0] = MEMORY[0x1E0C809B0];
        v28[1] = 3221225472;
        v28[2] = __nw_resolver_set_update_handler_block_invoke;
        v28[3] = &unk_1E14ACFD0;
        v29 = v6;
        nw_queue_context_async_if_needed(v13, v28);

        v10 = 1;
      }
      goto LABEL_6;
    }
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_resolver_set_update_handler";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v16, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s called with null handler", buf, 0xCu);
        }
LABEL_38:

        goto LABEL_39;
      }
      if (!v30)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_182FBE000, v17, v27, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446466;
        v33 = "nw_resolver_set_update_handler";
        v34 = 2082;
        v35 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v24, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_26;
    }
  }
  else
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_resolver_set_update_handler";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v16, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null resolver", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (!v30)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v17 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v17, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_resolver_set_update_handler";
          _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
        }
        goto LABEL_38;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v33 = "nw_resolver_set_update_handler";
        v34 = 2082;
        v35 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_26:

      free(backtrace_string);
    }
  }
LABEL_39:
  if (v16)
    free(v16);
  v10 = 0;
LABEL_6:

  return v10;
}

void sub_183070088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

void sub_183071CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_endpoint(void *a1, void *a2)
{
  NWConcrete_nw_path_evaluator *evaluator_for_endpoint_no_evaluate;
  NWConcrete_nw_path_evaluator *v3;
  id v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  evaluator_for_endpoint_no_evaluate = nw_path_create_evaluator_for_endpoint_no_evaluate(a1, a2);
  v3 = evaluator_for_endpoint_no_evaluate;
  if (evaluator_for_endpoint_no_evaluate
    && (nw_path_evaluator_evaluate(evaluator_for_endpoint_no_evaluate, 0) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v4 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_path_create_evaluator_for_endpoint";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_create_evaluator_for_endpoint";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v10 = type;
        v11 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_path_create_evaluator_for_endpoint";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s nw_path_evaluator_evaluate failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v5)
            goto LABEL_10;
          goto LABEL_9;
        }
        if (v11)
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_create_evaluator_for_endpoint";
          _os_log_impl(&dword_182FBE000, v6, v10, "%{public}s nw_path_evaluator_evaluate failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v6 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_create_evaluator_for_endpoint";
          _os_log_impl(&dword_182FBE000, v6, v12, "%{public}s nw_path_evaluator_evaluate failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v5)
    {
LABEL_10:

      return 0;
    }
LABEL_9:
    free(v5);
    goto LABEL_10;
  }
  return v3;
}

void sub_1830720EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_flow_registration_copy_path(void *a1)
{
  NWConcrete_nw_path_flow_registration *v1;
  NWConcrete_nw_path_flow_registration *v2;
  NWConcrete_nw_path_evaluator *override_evaluator;
  NWConcrete_nw_path_evaluator *v4;
  os_unfair_lock_s *v5;
  id *v6;
  id v7;
  _BOOL8 v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_path_flow_registration_copy_path";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v11, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_path_flow_registration_copy_path";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null flow_registration", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        v16 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_path_flow_registration_copy_path";
            v22 = 2082;
            v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null flow_registration, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v16)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_path_flow_registration_copy_path";
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null flow_registration, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_path_flow_registration_copy_path";
          _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null flow_registration, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v11)
      free(v11);
    goto LABEL_25;
  }
  override_evaluator = v1->override_evaluator;
  if (!override_evaluator)
  {
    v4 = nw_path_flow_registration_copy_parent_evaluator(v1);
    if (v4)
      goto LABEL_5;
LABEL_25:
    v8 = 0;
    goto LABEL_6;
  }
  v4 = override_evaluator;
LABEL_5:
  v5 = (os_unfair_lock_s *)((char *)v4 + 96);
  v6 = v4;
  os_unfair_lock_lock(v5);
  v7 = v6[6];
  os_unfair_lock_unlock(v5);

  v8 = nw_path_copy_for_flow_registration(v7, v2);
LABEL_6:

  return v8;
}

void sub_1830723EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_path_copy_for_flow_registration(void *a1, void *a2)
{
  char *v3;
  unsigned int *v4;
  unsigned int *v5;
  NWConcrete_nw_path *v6;
  _BOOL8 v7;
  OS_nw_array *flows;
  unsigned __int8 *v9;
  const char *v10;
  char *v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  necp_client_result_netagent *v18;
  uint64_t v19;
  uint64_t v20;
  necp_client_interface_option *v21;
  int v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  in6_addr v43;
  in6_addr v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  OS_nw_array *override_extra_interface_options;
  int v50;
  unsigned int v51;
  int v52;
  const char *v53;
  int v54;
  NWConcrete_nw_path *v55;
  _BOOL8 result;
  void *v57;
  char *v58;
  NSObject *v59;
  os_log_type_t v60;
  char *backtrace_string;
  os_log_type_t v62;
  _BOOL4 v63;
  NSObject *v64;
  void *v65;
  NSObject *v66;
  void *v67;
  os_log_type_t v68;
  NSObject *v69;
  void *v70;
  NSObject *v71;
  void *v72;
  uint8_t *v73;
  _QWORD v74[4];
  unsigned int *v75;
  NWConcrete_nw_path *v76;
  char v77;
  os_log_type_t v78;
  uint8_t buf[4];
  const char *v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;

  v83 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v57 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v80 = "nw_path_copy_for_flow_registration";
    v58 = (char *)_os_log_send_and_compose_impl();

    v78 = OS_LOG_TYPE_ERROR;
    v77 = 0;
    if (__nwlog_fault(v58, &v78, &v77))
    {
      if (v78 == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v59 = objc_claimAutoreleasedReturnValue();
        v60 = v78;
        if (os_log_type_enabled(v59, v78))
        {
          *(_DWORD *)buf = 136446210;
          v80 = "nw_path_copy_for_flow_registration";
          _os_log_impl(&dword_182FBE000, v59, v60, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v77)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v59 = objc_claimAutoreleasedReturnValue();
        v62 = v78;
        v63 = os_log_type_enabled(v59, v78);
        if (backtrace_string)
        {
          if (v63)
          {
            *(_DWORD *)buf = 136446466;
            v80 = "nw_path_copy_for_flow_registration";
            v81 = 2082;
            v82 = (uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v59, v62, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_60;
        }
        if (v63)
        {
          *(_DWORD *)buf = 136446210;
          v80 = "nw_path_copy_for_flow_registration";
          _os_log_impl(&dword_182FBE000, v59, v62, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v59 = objc_claimAutoreleasedReturnValue();
        v68 = v78;
        if (os_log_type_enabled(v59, v78))
        {
          *(_DWORD *)buf = 136446210;
          v80 = "nw_path_copy_for_flow_registration";
          _os_log_impl(&dword_182FBE000, v59, v68, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_60:
    if (v58)
      free(v58);
    v6 = 0;
    goto LABEL_35;
  }
  if (!v4)
  {
    v6 = v3;
LABEL_35:

    return (BOOL)v6;
  }
  v6 = nw_path_create(*((void **)v3 + 3), *((void **)v3 + 2));
  if (!v6)
  {
LABEL_34:

    goto LABEL_35;
  }
  if (*((_QWORD *)v3 + 9))
  {
    v7 = nw_array_create();
    flows = v6->flows;
    v6->flows = (OS_nw_array *)v7;

    v9 = (unsigned __int8 *)*((_QWORD *)v3 + 9);
    v74[0] = MEMORY[0x1E0C809B0];
    v74[1] = 3221225472;
    v74[2] = __nw_path_copy_for_flow_registration_block_invoke;
    v74[3] = &unk_1E14A8D20;
    v75 = v5;
    v76 = v6;
    nw_array_apply(v9, (uint64_t)v74);

  }
  *(_OWORD *)v6->flow_registration_id = *((_OWORD *)v5 + 2);
  *(_OWORD *)v6->client_id = *(_OWORD *)(v3 + 120);
  *(_OWORD *)v6->fallback_agent = *(_OWORD *)(v3 + 152);
  v10 = (const char *)*((_QWORD *)v3 + 31);
  if (!v10)
  {
    __nwlog_obj();
    v64 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v64, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v80 = "strict_strdup";
    v73 = buf;
    v65 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v65);
    if (result)
      goto LABEL_63;
    free(v65);
  }
  v11 = strdup(v10);
  if (!v11)
  {
    __nwlog_obj();
    v66 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v66, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v80 = "strict_strdup";
    v73 = buf;
    v67 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v67);
    if (result)
      goto LABEL_63;
    free(v67);
  }
  v6->reason_description = v11;
  v12 = *(_OWORD *)(v3 + 280);
  *(_OWORD *)&v6->policy_result.routing_result = *(_OWORD *)(v3 + 264);
  *(_OWORD *)v6->policy_result.service_uuid = v12;
  v13 = *(_OWORD *)(v3 + 296);
  v14 = *(_OWORD *)(v3 + 312);
  v15 = *(_OWORD *)(v3 + 344);
  *(_OWORD *)&v6->policy_result.direct_interface_generation = *(_OWORD *)(v3 + 328);
  *(_OWORD *)&v6->policy_result.num_interface_options = v15;
  *(_OWORD *)&v6->policy_result.netagents = v13;
  *(_OWORD *)&v6->policy_result.service_flags = v14;
  v16 = *((unsigned int *)v3 + 87);
  if ((_DWORD)v16 && *((_QWORD *)v3 + 37))
  {
    v17 = 20 * v16;
    v18 = (necp_client_result_netagent *)malloc_type_malloc(20 * v16, 0xF2B69DE5uLL);
    if (!v18)
    {
      __nwlog_obj();
      v69 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v69, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446466;
      v80 = "strict_malloc";
      v81 = 2048;
      v82 = v17;
      v73 = buf;
      v70 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v70);
      if (result)
        goto LABEL_63;
      free(v70);
      v18 = 0;
    }
    v6->policy_result.netagents = v18;
    memcpy(v18, *((const void **)v3 + 37), 20 * *((unsigned int *)v3 + 87));
  }
  v19 = *((unsigned int *)v3 + 86);
  if (!(_DWORD)v19 || !*((_QWORD *)v3 + 38))
  {
LABEL_16:
    objc_storeStrong((id *)&v6->group_descriptor, *((id *)v3 + 4));
    objc_storeStrong((id *)&v6->browse_descriptor, *((id *)v3 + 5));
    objc_storeStrong((id *)&v6->discovered_endpoints, *((id *)v3 + 7));
    objc_storeStrong((id *)&v6->resolved_endpoints, *((id *)v3 + 8));
    objc_storeStrong((id *)&v6->direct, *((id *)v3 + 12));
    objc_storeStrong((id *)&v6->delegate, *((id *)v3 + 13));
    objc_storeStrong((id *)&v6->fallback_interface, *((id *)v3 + 14));
    objc_storeStrong((id *)&v6->fallback_agent_domains, *((id *)v3 + 21));
    objc_storeStrong((id *)&v6->fallback_agent_types, *((id *)v3 + 22));
    objc_storeStrong((id *)&v6->resolver_configs, *((id *)v3 + 23));
    objc_storeStrong((id *)&v6->network_agent_dictionary, *((id *)v3 + 28));
    objc_storeStrong((id *)&v6->proxy_settings, *((id *)v3 + 30));
    objc_storeStrong((id *)&v6->proxy_configs, *((id *)v3 + 29));
    v22 = *((_BYTE *)v6 + 476) & 0xFB | (4 * ((v3[476] >> 2) & 1));
    *((_BYTE *)v6 + 476) = v22;
    v6->effective_mtu = *((_DWORD *)v3 + 90);
    v6->effective_traffic_class = *((_DWORD *)v3 + 91);
    *(_QWORD *)&v6->status = *((_QWORD *)v3 + 47);
    v6->recommended_mss = v3[472];
    v23 = *((_BYTE *)v6 + 473) & 0xFE | v3[473] & 1;
    *((_BYTE *)v6 + 473) = v23;
    v24 = v23 & 0xFFFFFFFD | (2 * ((v3[473] >> 1) & 1));
    *((_BYTE *)v6 + 473) = v24;
    v25 = v24 & 0xFFFFFFEF | (16 * ((v3[473] >> 4) & 1));
    *((_BYTE *)v6 + 473) = v25;
    v26 = v25 & 0xFFFFFFDF | (32 * ((v3[473] >> 5) & 1));
    *((_BYTE *)v6 + 473) = v26;
    LOBYTE(v26) = v26 & 0xBF | (((v3[473] & 0x40) != 0) << 6);
    *((_BYTE *)v6 + 473) = v26;
    *((_BYTE *)v6 + 473) = v3[473] & 0x80 | v26 & 0x7F;
    v27 = *((_BYTE *)v6 + 474) & 0xFE | v3[474] & 1;
    *((_BYTE *)v6 + 474) = v27;
    v28 = v27 & 0xFFFFFFFD | (2 * ((v3[474] >> 1) & 1));
    *((_BYTE *)v6 + 474) = v28;
    v29 = v28 & 0xFFFFFFFB | (4 * ((v3[474] >> 2) & 1));
    *((_BYTE *)v6 + 474) = v29;
    v30 = v29 & 0xFFFFFFF7 | (8 * ((v3[474] >> 3) & 1));
    *((_BYTE *)v6 + 474) = v30;
    v31 = v30 & 0xFFFFFFEF | (16 * ((v3[474] >> 4) & 1));
    *((_BYTE *)v6 + 474) = v31;
    v32 = v31 & 0xFFFFFFDF | (32 * ((v3[474] >> 5) & 1));
    *((_BYTE *)v6 + 474) = v32;
    v33 = v32 & 0xFFFFFFBF | (((v3[474] >> 6) & 1) << 6);
    *((_BYTE *)v6 + 474) = v33;
    *((_BYTE *)v6 + 474) = v3[474] & 0x80 | v33 & 0x7F;
    v34 = v22 & 0xFFFFFFF7 | (8 * ((v3[476] >> 3) & 1));
    *((_BYTE *)v6 + 476) = v34;
    v35 = v34 & 0xFFFFFFEF | (16 * ((v3[476] >> 4) & 1));
    *((_BYTE *)v6 + 476) = v35;
    v36 = v35 & 0xFFFFFFDF | (32 * ((v3[476] >> 5) & 1));
    *((_BYTE *)v6 + 476) = v36;
    *((_BYTE *)v6 + 476) = v36 & 0xBF | v3[476] & 0x40;
    objc_storeStrong((id *)&v6->gateways, *((id *)v3 + 26));
    v6->nat64_prefixes[0].ipv6_prefix = *(in6_addr *)(v3 + 392);
    v42 = *(_OWORD *)(v3 + 408);
    v43 = *(in6_addr *)(v3 + 424);
    v44 = *(in6_addr *)(v3 + 456);
    *(in6_addr *)((char *)&v6->nat64_prefixes[2].ipv6_prefix + 8) = *(in6_addr *)(v3 + 440);
    *(in6_addr *)((char *)&v6->nat64_prefixes[3].ipv6_prefix + 4) = v44;
    *(_OWORD *)&v6->nat64_prefixes[0].prefix_len = v42;
    *(in6_addr *)((char *)&v6->nat64_prefixes[1].ipv6_prefix + 12) = v43;
    v45 = v5[36];
    if (v45 && !*((_DWORD *)v3 + 91))
    {
      v6->effective_traffic_class = v45;
      v46 = *((_QWORD *)v5 + 3);
      if (!v46)
        goto LABEL_22;
    }
    else
    {
      v46 = *((_QWORD *)v5 + 3);
      if (!v46)
        goto LABEL_22;
    }
    v47 = nw_array_create();
    if (v47 != v46)
    {
      v48 = v47;
      std::vector<nw_object_wrapper_t>::__assign_with_size[abi:nn180100]<nw_object_wrapper_t*,nw_object_wrapper_t*>(v47 + 16, *(void ***)(v46 + 16), *(void ***)(v46 + 24), (uint64_t)(*(_QWORD *)(v46 + 24) - *(_QWORD *)(v46 + 16)) >> 3);
      v46 = v48;
    }
    override_extra_interface_options = v6->override_extra_interface_options;
    v6->override_extra_interface_options = (OS_nw_array *)v46;

LABEL_22:
    v50 = *((_BYTE *)v6 + 475) & 0xF7 | (8 * ((*((unsigned __int8 *)v5 + 148) >> 3) & 1));
    *((_BYTE *)v6 + 475) = v50;
    v51 = v50 & 0xFFFFFFEF | (16 * ((*((unsigned __int8 *)v5 + 148) >> 4) & 1));
    *((_BYTE *)v6 + 475) = v51;
    LOBYTE(v51) = v51 & 0xBF | (((v5[37] & 0x20) != 0) << 6);
    *((_BYTE *)v6 + 475) = v51;
    *((_BYTE *)v6 + 475) = (2 * *((_BYTE *)v5 + 148)) & 0x80 | v51 & 0x7F;
    *((_BYTE *)v6 + 476) = *((_BYTE *)v6 + 476) & 0xFD | (*((_BYTE *)v5 + 148) >> 6) & 2;
    v52 = *((char *)v5 + 148);
    if (v52 < 0)
    {
      if ((v52 & 0x60) != 0)
      {
        v53 = "Proxy used prohibited interface type";
        v54 = 6;
LABEL_32:
        nw_path_set_reason(v6, v54, v53, v37, v38, v39, v40, v41, (char)v73);
        goto LABEL_33;
      }
      if ((v52 & 8) != 0)
      {
        v53 = "Proxy used prohibited expensive path";
        v54 = 5;
        goto LABEL_32;
      }
      if ((v52 & 0x10) != 0)
      {
        v53 = "Proxy used prohibited constrained path";
        v54 = 26;
        goto LABEL_32;
      }
    }
LABEL_33:
    v55 = v6;
    goto LABEL_34;
  }
  v20 = 24 * v19;
  v21 = (necp_client_interface_option *)malloc_type_malloc(24 * v19, 0xF2B69DE5uLL);
  if (v21)
  {
LABEL_15:
    v6->policy_result.interface_options = v21;
    memcpy(v21, *((const void **)v3 + 38), 24 * *((unsigned int *)v3 + 86));
    goto LABEL_16;
  }
  __nwlog_obj();
  v71 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v71, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446466;
  v80 = "strict_malloc";
  v81 = 2048;
  v82 = v20;
  v73 = buf;
  v72 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v72);
  if (!result)
  {
    free(v72);
    v21 = 0;
    goto LABEL_15;
  }
LABEL_63:
  __break(1u);
  return result;
}

void sub_183072DAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

NWConcrete_nw_path_evaluator *nw_path_create_evaluator_for_endpoint_no_evaluate(void *a1, void *a2)
{
  id v4;
  id v5;
  NWConcrete_nw_path_evaluator *v6;
  NWConcrete_nw_path_evaluator *v7;
  id *v8;
  id *v9;
  id v10;
  id v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  NWConcrete_nw_parameters *v15;
  NWConcrete_nw_protocol_stack *v16;
  id *v17;
  void *v18;
  id v19;
  int v20;
  _BOOL8 v21;
  void *v22;
  NWConcrete_nw_path_evaluator *v23;
  char *backtrace_string;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = a2;
  v6 = objc_alloc_init(NWConcrete_nw_path_evaluator);
  v7 = v6;
  if (v6)
  {
    if (v5)
    {
      objc_storeStrong((id *)v6 + 1, a2);
      v8 = (id *)v5;
      v9 = (id *)v8[19];

      if (v9)
      {
        v9 = v9;
        v10 = v9[3];

        if (v10 && nw_protocol_options_is_custom_ip(v10))
          *((_BYTE *)v7 + 106) = nw_custom_ip_options_get_protocol(v10);

      }
      if (!v4)
        goto LABEL_20;
    }
    else
    {
      v15 = [NWConcrete_nw_parameters alloc];
      v16 = objc_alloc_init(NWConcrete_nw_protocol_stack);
      v17 = -[NWConcrete_nw_parameters initWithStack:]((id *)&v15->super.isa, v16);

      v18 = (void *)*((_QWORD *)v7 + 1);
      *((_QWORD *)v7 + 1) = v17;

      if (!v4)
        goto LABEL_20;
    }
    v19 = v4;
    v20 = objc_msgSend(v19, "type");

    if (v20 == 4)
    {
      v21 = nw_endpoint_copy_host_port_endpoint_for_url(v19);
      v22 = (void *)*((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 2) = v21;

      nw_parameters_set_url_endpoint(*((void **)v7 + 1), v19);
LABEL_22:
      *((_BYTE *)v7 + 107) |= 0x40u;
      v23 = v7;
      goto LABEL_23;
    }
LABEL_20:
    objc_storeStrong((id *)v7 + 2, a1);
    if (v4 == 0 && v5 == 0)
      *((_BYTE *)v7 + 107) |= 1u;
    goto LABEL_22;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v11 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (__nwlog_fault(v12, &type, &v29))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed", buf, 0xCu);
      }
    }
    else if (v29)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v26 = type;
      v27 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v27)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
          v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (v12)
          goto LABEL_16;
        goto LABEL_23;
      }
      if (v27)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
        _os_log_impl(&dword_182FBE000, v13, v26, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v13 = (id)gLogObj;
      v28 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_create_evaluator_for_endpoint_no_evaluate";
        _os_log_impl(&dword_182FBE000, v13, v28, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_evaluator) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v12)
LABEL_16:
    free(v12);
LABEL_23:

  return v7;
}

void sub_1830734C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_default_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*updated_path)(void);
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_default_updated_path";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v7, &type, &v13))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_updated_path";
      v10 = "%{public}s called with null protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v8 = __nwlog_obj();
      v9 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_default_updated_path";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (!v12)
      {
LABEL_20:
        if (v7)
          free(v7);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_updated_path";
      v10 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (!os_log_type_enabled(v8, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_updated_path";
      v10 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
    goto LABEL_20;
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks)
    {
      updated_path = (uint64_t (*)(void))callbacks->updated_path;
      if (updated_path)
        return updated_path();
    }
  }
  return 0;
}

void nw_parameters_set_url_endpoint(void *a1, void *a2)
{
  id *v3;
  id v4;
  id v5;
  id v6;
  int v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_parameters_set_url_endpoint";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v22)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v25 = "nw_parameters_set_url_endpoint";
          v26 = 2082;
          v27 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v9)
          goto LABEL_5;
LABEL_40:
        free(v9);
        goto LABEL_5;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  v5 = v3[25];
  v3[25] = 0;

  if (v4)
  {
    v6 = v4;
    v7 = objc_msgSend(v6, "type");

    if (v7 == 4)
    {
      objc_storeStrong(v3 + 25, a2);
      goto LABEL_5;
    }
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_parameters_set_url_endpoint";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (!__nwlog_fault(v9, &type, &v22))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url)", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (!v22)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_38;
    }
    v17 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v10, type);
    if (!v17)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v25 = "nw_parameters_set_url_endpoint";
        _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), no backtrace", buf, 0xCu);
      }
      goto LABEL_38;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v25 = "nw_parameters_set_url_endpoint";
      v26 = 2082;
      v27 = v17;
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null (nw_endpoint_get_type(url_endpoint) == nw_endpoint_type_url), dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v17);
    if (v9)
      goto LABEL_40;
  }
LABEL_5:

}

void sub_183073F04(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_copy_host_port_endpoint_for_url(void *a1)
{
  id v1;
  void *v2;
  id v3;
  int v4;
  const char **v5;
  _BOOL8 host_with_numeric_port;
  id v7;
  id v8;
  int v9;
  const char *v10;
  NSObject *v11;
  os_log_type_t v12;
  id v13;
  int v14;
  char *v15;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  id v20;
  int v21;
  os_log_type_t v22;
  id v23;
  int v24;
  id v25;
  int v26;
  void *v27;
  const char *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  uint64_t v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  _WORD v41[17];

  *(_QWORD *)&v41[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
    v28 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v28, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v36)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        v33 = os_log_type_enabled(v29, type);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
            v40 = 2082;
            *(_QWORD *)v41 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        if (os_log_type_enabled(v29, type))
        {
          *(_DWORD *)buf = 136446210;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v28)
      goto LABEL_12;
    v15 = (char *)v28;
    goto LABEL_11;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v8 = v3;
    v9 = objc_msgSend(v8, "type");

    *(_DWORD *)buf = 136446466;
    v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
    v40 = 1024;
    *(_DWORD *)v41 = v9;
    LODWORD(v35) = 18;
    v10 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v10, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          v13 = v8;
          v14 = objc_msgSend(v13, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          v40 = 1024;
          *(_DWORD *)v41 = v14;
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v36)
      {
        v17 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v18 = type;
        v19 = os_log_type_enabled(v11, type);
        if (v17)
        {
          if (v19)
          {
            v20 = v8;
            v21 = objc_msgSend(v20, "type", buf, v35);

            *(_DWORD *)buf = 136446722;
            v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
            v40 = 1024;
            *(_DWORD *)v41 = v21;
            v41[2] = 2082;
            *(_QWORD *)&v41[3] = v17;
            _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v17);
          if (!v10)
            goto LABEL_12;
LABEL_10:
          v15 = (char *)v10;
LABEL_11:
          free(v15);
          goto LABEL_12;
        }
        if (v19)
        {
          v25 = v8;
          v26 = objc_msgSend(v25, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          v40 = 1024;
          *(_DWORD *)v41 = v26;
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v11 = (id)gLogObj;
        v22 = type;
        if (os_log_type_enabled(v11, type))
        {
          v23 = v8;
          v24 = objc_msgSend(v23, "type", buf, v35);

          *(_DWORD *)buf = 136446466;
          v39 = "nw_endpoint_copy_host_port_endpoint_for_url";
          v40 = 1024;
          *(_DWORD *)v41 = v24;
          _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v10)
    {
LABEL_12:
      host_with_numeric_port = 0;
      goto LABEL_13;
    }
    goto LABEL_10;
  }
  v5 = (const char **)v3;
  host_with_numeric_port = nw_endpoint_create_host_with_numeric_port(v5[33], bswap32(*((unsigned __int16 *)v5 + 120)) >> 16);
  nw_endpoint_copy_properties(v5, (void *)host_with_numeric_port);

LABEL_13:
  return host_with_numeric_port;
}

void sub_183074514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ____nwlog_salted_hash_block_invoke()
{
  arc4random_buf(&__nwlog_salted_hash::salt, 0x40uLL);
}

uint64_t nw_path_is_direct(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[473] >> 5) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_is_direct";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_direct";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_is_direct";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_direct";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_direct";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_endpoint_handler_cancel(void *a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;
  id v9;
  unsigned int *v10;
  unsigned int *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  const char *v17;
  nw_endpoint_t v18;
  const char *v19;
  uint64_t v20;
  const char *v21;
  unsigned int *v22;
  os_unfair_lock_s *v23;
  const char *v24;
  os_unfair_lock_s *v25;
  id *v26;
  id v27;
  unsigned int *v28;
  unsigned int *v29;
  void *v30;
  _QWORD *v31;
  BOOL v32;
  NSObject *v33;
  const char *v34;
  const char *v35;
  nw_endpoint_t v36;
  _QWORD *v37;
  const char *v38;
  const char *v39;
  const char *v40;
  id v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  void *v50;
  id v51;
  NSObject *v52;
  const char *v53;
  nw_endpoint_t v54;
  const char *v55;
  uint64_t v56;
  const char *v57;
  const char *v58;
  unsigned int *v59;
  os_unfair_lock_s *v60;
  const char *v61;
  _QWORD *v62;
  os_unfair_lock_s *v63;
  id *v64;
  id v65;
  os_unfair_lock_s *v66;
  void *v67;
  char *v68;
  NSObject *v69;
  os_log_type_t v70;
  const char *id_string;
  const char *v72;
  const char *logging_description;
  const char *v74;
  const char *v75;
  id v76;
  char *backtrace_string;
  os_log_type_t v78;
  _BOOL4 v79;
  os_log_type_t v80;
  nw_endpoint_t v81;
  unsigned int v82;
  const char *v83;
  nw_endpoint_t v84;
  _QWORD *v85;
  _QWORD *v86;
  char v87;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v90;
  __int16 v91;
  _BYTE *v92;
  __int16 v93;
  const char *v94;
  __int16 v95;
  const char *v96;
  __int16 v97;
  const char *v98;
  __int16 v99;
  const char *v100;
  __int16 v101;
  id v102;
  uint64_t v103;

  v103 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v67 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v90 = "nw_endpoint_handler_cancel";
    v68 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v87 = 0;
    if (__nwlog_fault(v68, &type, &v87))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        v70 = type;
        if (os_log_type_enabled(v69, type))
        {
          *(_DWORD *)buf = 136446210;
          v90 = "nw_endpoint_handler_cancel";
          _os_log_impl(&dword_182FBE000, v69, v70, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v87)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        v78 = type;
        v79 = os_log_type_enabled(v69, type);
        if (backtrace_string)
        {
          if (v79)
          {
            *(_DWORD *)buf = 136446466;
            v90 = "nw_endpoint_handler_cancel";
            v91 = 2082;
            v92 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v69, v78, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_86;
        }
        if (v79)
        {
          *(_DWORD *)buf = 136446210;
          v90 = "nw_endpoint_handler_cancel";
          _os_log_impl(&dword_182FBE000, v69, v78, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v69 = objc_claimAutoreleasedReturnValue();
        v80 = type;
        if (os_log_type_enabled(v69, type))
        {
          *(_DWORD *)buf = 136446210;
          v90 = "nw_endpoint_handler_cancel";
          _os_log_impl(&dword_182FBE000, v69, v80, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_86:
    if (v68)
      free(v68);
    goto LABEL_64;
  }
  v7 = (void *)v5[4];
  if (v7)
  {
    v8 = v7;
    v9 = *(id *)(v8[13] + 136);

    nw_context_assert_queue(v9);
  }
  v10 = v6;
  v11 = v10;
  v12 = (void *)v6[4];
  if (!v12)
  {

    if ((v11[67] & 0x20) != 0)
      goto LABEL_27;
    goto LABEL_9;
  }
  v13 = v12;
  v14 = v13[12];

  if ((v14 & 0x4000000000) != 0)
  {
    if ((nw_endpoint_handler_get_logging_disabled(v11) & 1) != 0)
      goto LABEL_27;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v16 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(v11);
      v72 = nw_endpoint_handler_dry_run_string(v11);
      v86 = v6;
      v84 = nw_endpoint_handler_copy_endpoint(v11);
      logging_description = nw_endpoint_get_logging_description(v84);
      v74 = nw_endpoint_handler_state_string(v11);
      v75 = nw_endpoint_handler_mode_string(v11);
      v76 = nw_endpoint_handler_copy_current_path(v11);
      *(_DWORD *)buf = 136447746;
      v90 = "nw_endpoint_handler_cancel";
      v91 = 2082;
      v92 = id_string;
      v93 = 2082;
      v94 = v72;
      v95 = 2082;
      v96 = logging_description;
      v97 = 2082;
      v98 = v74;
      v99 = 2082;
      v100 = v75;
      v101 = 2114;
      v102 = v76;
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

      v6 = v86;
    }
LABEL_26:

    goto LABEL_27;
  }
  if ((v11[67] & 0x20) == 0)
  {
LABEL_9:
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v16 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
    {
      if ((v11[67] & 1) != 0)
        v17 = "dry-run ";
      else
        v17 = "";
      v85 = v6;
      v18 = nw_endpoint_handler_copy_endpoint(v11);
      v19 = nw_endpoint_get_logging_description(v18);
      v20 = v11[30];
      if (v20 > 5)
        v21 = "unknown-state";
      else
        v21 = off_1E149FC48[v20];
      v22 = v11;
      v23 = (os_unfair_lock_s *)v22;
      v82 = a2;
      v81 = v18;
      v24 = "path";
      switch(v22[29])
      {
        case 0u:
          break;
        case 1u:
          v24 = "resolver";
          break;
        case 2u:
          v24 = nw_endpoint_flow_mode_string(*((void **)v22 + 31));
          break;
        case 3u:
          v24 = "proxy";
          break;
        case 4u:
          v24 = "fallback";
          break;
        case 5u:
          v24 = "transform";
          break;
        default:
          v24 = "unknown-mode";
          break;
      }

      v25 = v23 + 28;
      v26 = v23;
      os_unfair_lock_lock(v23 + 28);
      v27 = v26[8];
      os_unfair_lock_unlock(v25);

      *(_DWORD *)buf = 136447746;
      v90 = "nw_endpoint_handler_cancel";
      v91 = 2082;
      v92 = v11 + 42;
      v93 = 2082;
      v94 = v17;
      v95 = 2082;
      v96 = v19;
      v97 = 2082;
      v98 = v21;
      v99 = 2082;
      v100 = v24;
      v101 = 2114;
      v102 = v27;
      _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x48u);

      v6 = v85;
      a2 = v82;

    }
    goto LABEL_26;
  }
LABEL_27:
  if (v11[30] == 5)
  {
    v28 = v11;
    v29 = v28;
    v30 = (void *)v6[4];
    if (v30)
    {
      v31 = v30;
      v32 = (v31[12] & 0x4000000000) == 0;

      if (!v32)
      {
        if ((nw_endpoint_handler_get_logging_disabled(v29) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v33 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG))
          {
            v34 = nw_endpoint_handler_get_id_string(v29);
            v35 = nw_endpoint_handler_dry_run_string(v29);
            v36 = nw_endpoint_handler_copy_endpoint(v29);
            v37 = v6;
            v38 = nw_endpoint_get_logging_description(v36);
            v39 = nw_endpoint_handler_state_string(v29);
            v40 = nw_endpoint_handler_mode_string(v29);
            v41 = nw_endpoint_handler_copy_current_path(v29);
            *(_DWORD *)buf = 136447746;
            v90 = "nw_endpoint_handler_cancel";
            v91 = 2082;
            v92 = v34;
            v93 = 2082;
            v94 = v35;
            v95 = 2082;
            v96 = v38;
            v97 = 2082;
            v98 = v39;
            v99 = 2082;
            v100 = v40;
            v101 = 2114;
            v102 = v41;
            _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Handler already cancelled, ignoring cancel", buf, 0x48u);

            v6 = v37;
          }

        }
        goto LABEL_64;
      }
    }
    else
    {

    }
    if ((v29[67] & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v52 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_INFO))
      {
        if ((v29[67] & 1) != 0)
          v53 = "dry-run ";
        else
          v53 = "";
        v54 = nw_endpoint_handler_copy_endpoint(v29);
        v55 = nw_endpoint_get_logging_description(v54);
        v56 = v11[30];
        v57 = v55;
        if (v56 > 5)
          v58 = "unknown-state";
        else
          v58 = off_1E149FC48[v56];
        v83 = v58;
        v59 = v29;
        v60 = (os_unfair_lock_s *)v59;
        v61 = "path";
        switch(v59[29])
        {
          case 0u:
            break;
          case 1u:
            v61 = "resolver";
            break;
          case 2u:
            v61 = nw_endpoint_flow_mode_string(*((void **)v59 + 31));
            break;
          case 3u:
            v61 = "proxy";
            break;
          case 4u:
            v61 = "fallback";
            break;
          case 5u:
            v61 = "transform";
            break;
          default:
            v61 = "unknown-mode";
            break;
        }

        v62 = v6;
        v63 = v60 + 28;
        v64 = v60;
        os_unfair_lock_lock(v60 + 28);
        v65 = v64[8];
        v66 = v63;
        v6 = v62;
        os_unfair_lock_unlock(v66);

        *(_DWORD *)buf = 136447746;
        v90 = "nw_endpoint_handler_cancel";
        v91 = 2082;
        v92 = v29 + 42;
        v93 = 2082;
        v94 = v53;
        v95 = 2082;
        v96 = v57;
        v97 = 2082;
        v98 = v83;
        v99 = 2082;
        v100 = v61;
        v101 = 2114;
        v102 = v65;
        _os_log_impl(&dword_182FBE000, v52, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Handler already cancelled, ignoring cancel", buf, 0x48u);

      }
    }
  }
  else
  {
    if (a3)
    {
      v11[30] = 4;
      v11[20] = 458753;
      nw_endpoint_handler_report(v11, 0, (_WORD *)v11 + 40, 0);
    }
    v42 = *((_QWORD *)v11 + 17);
    if (v42)
    {
      nw_queue_cancel_source(v42, v15);
      *((_QWORD *)v11 + 17) = 0;
    }
    v43 = (void *)*((_QWORD *)v11 + 9);
    *((_QWORD *)v11 + 9) = 0;

    v44 = (void *)v6[4];
    v6[4] = 0;

    os_unfair_lock_lock((os_unfair_lock_t)v11 + 28);
    v45 = (void *)*((_QWORD *)v11 + 8);
    *((_QWORD *)v11 + 8) = 0;

    os_unfair_lock_unlock((os_unfair_lock_t)v11 + 28);
    v46 = (void *)*((_QWORD *)v11 + 7);
    if (v46)
    {
      nw_association_unregister(v46, v11);
      v47 = (void *)*((_QWORD *)v11 + 7);
      *((_QWORD *)v11 + 7) = 0;

    }
    v48 = (void *)*((_QWORD *)v11 + 11);
    *((_QWORD *)v11 + 11) = 0;

    v49 = (void *)*((_QWORD *)v11 + 12);
    *((_QWORD *)v11 + 12) = 0;

    v50 = (void *)*((_QWORD *)v11 + 13);
    *((_QWORD *)v11 + 13) = 0;

    v11[30] = 5;
    v51 = *((id *)v11 + 31);
    objc_msgSend(v51, "cancelWithHandler:forced:", v11, a2);

    if (v11[29] == 2)
      nw_endpoint_handler_cancel_read_write_requests(v11, 0);
  }
LABEL_64:

}

void sub_183075384(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_association_unregister(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  uint64_t v7;
  _BOOL8 node;
  _BOOL8 v9;
  id v10;
  const char *logging_description;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  const char *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  const char *v20;
  os_log_type_t v21;
  const char *v22;
  os_log_type_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  int v29;
  id v30;
  const char *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  const char *v35;
  id v36;
  const char *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  const char *v41;
  id v42;
  const char *v43;
  os_log_type_t v44;
  const char *v45;
  const char *v46;
  char *v47;
  os_log_type_t v48;
  const char *v49;
  const char *v50;
  os_log_type_t v51;
  const char *v52;
  const char *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  const char *v57;
  os_log_type_t v58;
  const char *v59;
  os_log_type_t v60;
  const char *v61;
  os_log_type_t v62;
  const char *v63;
  os_log_type_t v64;
  const char *v65;
  os_log_type_t v66;
  const char *v67;
  os_log_type_t v68;
  const char *v69;
  void *v70;
  os_log_type_t v71;
  void *v72;
  os_log_type_t v73;
  char *backtrace_string;
  os_log_type_t v75;
  _BOOL4 v76;
  os_log_type_t v77;
  _BOOL4 v78;
  os_log_type_t v79;
  os_log_type_t v80;
  char v81;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v84;
  __int16 v85;
  void *v86;
  __int16 v87;
  uint64_t v88;
  __int16 v89;
  char *v90;
  uint64_t v91;

  v91 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v70 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v84 = "nw_association_unregister";
    v38 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (__nwlog_fault(v38, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v71 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "nw_association_unregister";
          _os_log_impl(&dword_182FBE000, v39, v71, "%{public}s called with null association", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (!v81)
      {
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v79 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "nw_association_unregister";
          _os_log_impl(&dword_182FBE000, v39, v79, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_119;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v75 = type;
      v76 = os_log_type_enabled(v39, type);
      if (!backtrace_string)
      {
        if (v76)
        {
          *(_DWORD *)buf = 136446210;
          v84 = "nw_association_unregister";
          _os_log_impl(&dword_182FBE000, v39, v75, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (v76)
      {
        *(_DWORD *)buf = 136446466;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v39, v75, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    goto LABEL_120;
  }
  if (!v4)
  {
    __nwlog_obj();
    v72 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v84 = "nw_association_unregister";
    v38 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (__nwlog_fault(v38, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v73 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "nw_association_unregister";
          _os_log_impl(&dword_182FBE000, v39, v73, "%{public}s called with null handle", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (!v81)
      {
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v80 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v84 = "nw_association_unregister";
          _os_log_impl(&dword_182FBE000, v39, v80, "%{public}s called with null handle, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_119;
      }
      v47 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v39 = objc_claimAutoreleasedReturnValue();
      v77 = type;
      v78 = os_log_type_enabled(v39, type);
      if (!v47)
      {
        if (v78)
        {
          *(_DWORD *)buf = 136446210;
          v84 = "nw_association_unregister";
          _os_log_impl(&dword_182FBE000, v39, v77, "%{public}s called with null handle, no backtrace", buf, 0xCu);
        }
        goto LABEL_119;
      }
      if (v78)
      {
        *(_DWORD *)buf = 136446466;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = v47;
        _os_log_impl(&dword_182FBE000, v39, v77, "%{public}s called with null handle, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_85;
    }
    goto LABEL_120;
  }
  v6 = nw_path_parameters_copy_context(*((void **)v3 + 2));
  nw_context_assert_queue(v6);

  v7 = *((_QWORD *)v3 + 6);
  if (v7)
  {
    node = nw_hash_table_get_node(v7, (uint64_t)v5, 0);
    if (node)
    {
      v9 = node;
      if (!nw_hash_table_remove_node(*((_QWORD *)v3 + 6), node)
        && !nw_path_parameters_get_logging_disabled(*((_QWORD *)v3 + 2)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v10 = (id)gconnectionLogObj;
        logging_description = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)logging_description;
        v87 = 2048;
        v88 = v9;
        v12 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v81 = 0;
        if (__nwlog_fault(v12, &type, &v81))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v13 = (id)gconnectionLogObj;
            v14 = type;
            if (os_log_type_enabled(v13, type))
            {
              v15 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
              *(_DWORD *)buf = 136446722;
              v84 = "nw_association_unregister";
              v85 = 2082;
              v86 = (void *)v15;
              v87 = 2048;
              v88 = v9;
              _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p", buf, 0x20u);
            }
          }
          else if (v81)
          {
            v16 = __nw_create_backtrace_string();
            if (v16)
            {
              v17 = (char *)v16;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v18 = (id)gconnectionLogObj;
              v19 = type;
              if (os_log_type_enabled(v18, type))
              {
                v20 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
                *(_DWORD *)buf = 136446978;
                v84 = "nw_association_unregister";
                v85 = 2082;
                v86 = (void *)v20;
                v87 = 2048;
                v88 = v9;
                v89 = 2082;
                v90 = v17;
                _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, dumping backtrace:%{public}s", buf, 0x2Au);
              }

              free(v17);
              if (!v12)
                goto LABEL_36;
              goto LABEL_35;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v13 = (id)gconnectionLogObj;
            v23 = type;
            if (os_log_type_enabled(v13, type))
            {
              v24 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
              *(_DWORD *)buf = 136446722;
              v84 = "nw_association_unregister";
              v85 = 2082;
              v86 = (void *)v24;
              v87 = 2048;
              v88 = v9;
              _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, no backtrace", buf, 0x20u);
            }
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v13 = (id)gconnectionLogObj;
            v21 = type;
            if (os_log_type_enabled(v13, type))
            {
              v22 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
              *(_DWORD *)buf = 136446722;
              v84 = "nw_association_unregister";
              v85 = 2082;
              v86 = (void *)v22;
              v87 = 2048;
              v88 = v9;
              _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s <nw_association %{public}s> failed to remove connected flow for node %p, backtrace limit exceeded", buf, 0x20u);
            }
          }

        }
        if (v12)
LABEL_35:
          free(v12);
      }
    }
  }
LABEL_36:
  v25 = *((_QWORD *)v3 + 5);
  if (!v25)
  {
    if (nw_path_parameters_get_logging_disabled(*((_QWORD *)v3 + 2)))
      goto LABEL_130;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v36 = (id)gconnectionLogObj;
    v37 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
    *(_DWORD *)buf = 136446466;
    v84 = "nw_association_unregister";
    v85 = 2082;
    v86 = (void *)v37;
    v38 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (!__nwlog_fault(v38, &type, &v81))
      goto LABEL_120;
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = (id)gconnectionLogObj;
      v40 = type;
      if (os_log_type_enabled(v39, type))
      {
        v41 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446466;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v41;
        _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s <nw_association %{public}s> does not have a handle hash table", buf, 0x16u);
      }
      goto LABEL_119;
    }
    if (!v81)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = (id)gconnectionLogObj;
      v58 = type;
      if (os_log_type_enabled(v39, type))
      {
        v59 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446466;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v59;
        _os_log_impl(&dword_182FBE000, v39, v58, "%{public}s <nw_association %{public}s> does not have a handle hash table, backtrace limit exceeded", buf, 0x16u);
      }
      goto LABEL_119;
    }
    v46 = __nw_create_backtrace_string();
    if (!v46)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = (id)gconnectionLogObj;
      v60 = type;
      if (os_log_type_enabled(v39, type))
      {
        v61 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446466;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v61;
        _os_log_impl(&dword_182FBE000, v39, v60, "%{public}s <nw_association %{public}s> does not have a handle hash table, no backtrace", buf, 0x16u);
      }
      goto LABEL_119;
    }
    v47 = (char *)v46;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v39 = (id)gconnectionLogObj;
    v48 = type;
    if (os_log_type_enabled(v39, type))
    {
      v49 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446722;
      v84 = "nw_association_unregister";
      v85 = 2082;
      v86 = (void *)v49;
      v87 = 2082;
      v88 = (uint64_t)v47;
      _os_log_impl(&dword_182FBE000, v39, v48, "%{public}s <nw_association %{public}s> does not have a handle hash table, dumping backtrace:%{public}s", buf, 0x20u);
    }
    goto LABEL_85;
  }
  v26 = nw_hash_table_get_node(v25, (uint64_t)v5, 0);
  if (v26)
  {
    v27 = v26;
    v28 = *(void **)(v26 + 32);
    *(_QWORD *)(v26 + 32) = 0;

    if ((*(_BYTE *)(v27 + 40) & 1) != 0)
    {
      v29 = *((_DWORD *)v3 + 18);
      if (v29)
        *((_DWORD *)v3 + 18) = v29 - 1;
    }
    if (nw_hash_table_remove_node(*((_QWORD *)v3 + 5), v27)
      || nw_path_parameters_get_logging_disabled(*((_QWORD *)v3 + 2)))
    {
      goto LABEL_129;
    }
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v30 = (id)gconnectionLogObj;
    v31 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
    *(_DWORD *)buf = 136446722;
    v84 = "nw_association_unregister";
    v85 = 2082;
    v86 = (void *)v31;
    v87 = 2048;
    v88 = v27;
    v32 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v81 = 0;
    if (__nwlog_fault(v32, &type, &v81))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v33 = (id)gconnectionLogObj;
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          v35 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)buf = 136446722;
          v84 = "nw_association_unregister";
          v85 = 2082;
          v86 = (void *)v35;
          v87 = 2048;
          v88 = v27;
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s <nw_association %{public}s> failed to remove handle for node %p", buf, 0x20u);
        }
      }
      else if (v81)
      {
        v53 = __nw_create_backtrace_string();
        if (v53)
        {
          v54 = (char *)v53;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v55 = (id)gconnectionLogObj;
          v56 = type;
          if (os_log_type_enabled(v55, type))
          {
            v57 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
            *(_DWORD *)buf = 136446978;
            v84 = "nw_association_unregister";
            v85 = 2082;
            v86 = (void *)v57;
            v87 = 2048;
            v88 = v27;
            v89 = 2082;
            v90 = v54;
            _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s <nw_association %{public}s> failed to remove handle for node %p, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v54);
          if (!v32)
            goto LABEL_129;
          goto LABEL_128;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v33 = (id)gconnectionLogObj;
        v68 = type;
        if (os_log_type_enabled(v33, type))
        {
          v69 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)buf = 136446722;
          v84 = "nw_association_unregister";
          v85 = 2082;
          v86 = (void *)v69;
          v87 = 2048;
          v88 = v27;
          _os_log_impl(&dword_182FBE000, v33, v68, "%{public}s <nw_association %{public}s> failed to remove handle for node %p, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v33 = (id)gconnectionLogObj;
        v64 = type;
        if (os_log_type_enabled(v33, type))
        {
          v65 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
          *(_DWORD *)buf = 136446722;
          v84 = "nw_association_unregister";
          v85 = 2082;
          v86 = (void *)v65;
          v87 = 2048;
          v88 = v27;
          _os_log_impl(&dword_182FBE000, v33, v64, "%{public}s <nw_association %{public}s> failed to remove handle for node %p, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v32)
    {
LABEL_129:
      nw_association_schedule_deactivation((NWConcrete_nw_association *)v3);
      goto LABEL_130;
    }
LABEL_128:
    free(v32);
    goto LABEL_129;
  }
  if (nw_path_parameters_get_logging_disabled(*((_QWORD *)v3 + 2)))
    goto LABEL_130;
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v42 = (id)gconnectionLogObj;
  v43 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
  *(_DWORD *)buf = 136446722;
  v84 = "nw_association_unregister";
  v85 = 2082;
  v86 = (void *)v43;
  v87 = 2048;
  v88 = (uint64_t)v5;
  v38 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v81 = 0;
  if (__nwlog_fault(v38, &type, &v81))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = (id)gconnectionLogObj;
      v44 = type;
      if (os_log_type_enabled(v39, type))
      {
        v45 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v45;
        v87 = 2048;
        v88 = (uint64_t)v5;
        _os_log_impl(&dword_182FBE000, v39, v44, "%{public}s <nw_association %{public}s> does not have handle %p registered", buf, 0x20u);
      }
LABEL_119:

      goto LABEL_120;
    }
    if (!v81)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = (id)gconnectionLogObj;
      v62 = type;
      if (os_log_type_enabled(v39, type))
      {
        v63 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v63;
        v87 = 2048;
        v88 = (uint64_t)v5;
        _os_log_impl(&dword_182FBE000, v39, v62, "%{public}s <nw_association %{public}s> does not have handle %p registered, backtrace limit exceeded", buf, 0x20u);
      }
      goto LABEL_119;
    }
    v50 = __nw_create_backtrace_string();
    if (!v50)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v39 = (id)gconnectionLogObj;
      v66 = type;
      if (os_log_type_enabled(v39, type))
      {
        v67 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
        *(_DWORD *)buf = 136446722;
        v84 = "nw_association_unregister";
        v85 = 2082;
        v86 = (void *)v67;
        v87 = 2048;
        v88 = (uint64_t)v5;
        _os_log_impl(&dword_182FBE000, v39, v66, "%{public}s <nw_association %{public}s> does not have handle %p registered, no backtrace", buf, 0x20u);
      }
      goto LABEL_119;
    }
    v47 = (char *)v50;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v39 = (id)gconnectionLogObj;
    v51 = type;
    if (os_log_type_enabled(v39, type))
    {
      v52 = nw_endpoint_get_logging_description(*((void **)v3 + 1));
      *(_DWORD *)buf = 136446978;
      v84 = "nw_association_unregister";
      v85 = 2082;
      v86 = (void *)v52;
      v87 = 2048;
      v88 = (uint64_t)v5;
      v89 = 2082;
      v90 = v47;
      _os_log_impl(&dword_182FBE000, v39, v51, "%{public}s <nw_association %{public}s> does not have handle %p registered, dumping backtrace:%{public}s", buf, 0x2Au);
    }
LABEL_85:

    free(v47);
    if (!v38)
      goto LABEL_130;
    goto LABEL_121;
  }
LABEL_120:
  if (v38)
LABEL_121:
    free(v38);
LABEL_130:

}

void sub_1830766FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_hash_table_remove_node(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  void (*v6)(_QWORD);
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  _BOOL8 result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  NSObject *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  const char *v25;
  NSObject *v26;
  unint64_t v27;
  const char *v28;
  char *backtrace_string;
  uint64_t v30;
  _BOOL4 v31;
  char *v32;
  uint64_t v33;
  _BOOL4 v34;
  void *v35;
  char v36;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v39;
  __int16 v40;
  void *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj(0, a2);
    *(_DWORD *)buf = 136446210;
    v39 = "nw_hash_table_remove_node";
    v12 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    v13 = __nwlog_fault(v12, &type, &v36);
    if (!(_DWORD)v13)
      goto LABEL_53;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v15 = __nwlog_obj(v13, v14);
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_hash_table_remove_node";
      v17 = "%{public}s called with null table";
    }
    else if (v36)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v15 = __nwlog_obj(backtrace_string, v30);
      v16 = type;
      v31 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_hash_table_remove_node";
          v40 = 2082;
          v41 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null table, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_53;
      }
      if (!v31)
      {
LABEL_53:
        if (v12)
          free(v12);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v39 = "nw_hash_table_remove_node";
      v17 = "%{public}s called with null table, no backtrace";
    }
    else
    {
      v15 = __nwlog_obj(v13, v14);
      v16 = type;
      if (!os_log_type_enabled(v15, type))
        goto LABEL_53;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_hash_table_remove_node";
      v17 = "%{public}s called with null table, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v15, v16, v17, buf, 0xCu);
    goto LABEL_53;
  }
  if (*(_DWORD *)(a1 + 32))
  {
    v4 = *(_DWORD *)(a1 + 48);
    if ((v4 & 2) == 0)
      goto LABEL_5;
    goto LABEL_4;
  }
  v18 = __nwlog_obj(a1, a2);
  os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v39 = "nw_hash_table_lock";
  v19 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v19);
  if (result)
    goto LABEL_63;
  free(v19);
  v4 = *(_DWORD *)(a1 + 48);
  if ((v4 & 2) != 0)
  {
LABEL_4:
    os_unfair_lock_lock((os_unfair_lock_t)(a1 + 52));
    v4 = *(_DWORD *)(a1 + 48);
  }
LABEL_5:
  if ((v4 & 1) == 0)
  {
    __nwlog_obj(a1, a2);
    *(_DWORD *)buf = 136446210;
    v39 = "nw_hash_table_remove_node";
    v20 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    v21 = __nwlog_fault(v20, &type, &v36);
    if (!(_DWORD)v21)
      goto LABEL_58;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v23 = __nwlog_obj(v21, v22);
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_58;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_hash_table_remove_node";
      v25 = "%{public}s called with invalid hash table";
    }
    else if (v36)
    {
      v32 = (char *)__nw_create_backtrace_string();
      v23 = __nwlog_obj(v32, v33);
      v24 = type;
      v34 = os_log_type_enabled(v23, type);
      if (v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446466;
          v39 = "nw_hash_table_remove_node";
          v40 = 2082;
          v41 = v32;
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with invalid hash table, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v32);
LABEL_58:
        if (v20)
          free(v20);
        if ((*(_BYTE *)(a1 + 48) & 2) != 0)
        {
          os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 52));
          return 0;
        }
        return 0;
      }
      if (!v34)
        goto LABEL_58;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_hash_table_remove_node";
      v25 = "%{public}s called with invalid hash table, no backtrace";
    }
    else
    {
      v23 = __nwlog_obj(v21, v22);
      v24 = type;
      if (!os_log_type_enabled(v23, type))
        goto LABEL_58;
      *(_DWORD *)buf = 136446210;
      v39 = "nw_hash_table_remove_node";
      v25 = "%{public}s called with invalid hash table, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v23, v24, v25, buf, 0xCu);
    goto LABEL_58;
  }
  if (*(_BYTE *)(a2 + 30) != 1)
  {
    v26 = __nwlog_obj(a1, a2);
    os_log_type_enabled(v26, OS_LOG_TYPE_ERROR);
    v27 = *(unsigned __int8 *)(a2 + 30);
    if (v27 > 3)
      v28 = "invalid_state";
    else
      v28 = off_1E14A86D0[v27];
    *(_DWORD *)buf = 136446466;
    v39 = "nw_hash_table_remove_node";
    v40 = 2082;
    v41 = (void *)v28;
    v35 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v35);
    if (result)
      goto LABEL_63;
    free(v35);
    if (*(_BYTE *)(a2 + 30) != 1)
    {
      v11 = 0;
      if ((*(_BYTE *)(a1 + 48) & 2) == 0)
        return v11;
      goto LABEL_16;
    }
  }
  v5 = a1 + 16 * *(unsigned int *)(a2 + 24) + 56;
  *(_BYTE *)(a2 + 30) = 2;
  v6 = *(void (**)(_QWORD))(a1 + 24);
  if (v6)
  {
    v6(*(_QWORD *)(a2 + 16));
    *(_QWORD *)(a2 + 16) = 0;
  }
  --*(_DWORD *)(a1 + 40);
  v7 = *(_QWORD **)(a2 + 8);
  if (v7 && *v7 == a2)
  {
LABEL_13:
    if (!*(_WORD *)(a2 + 28))
      nw_hash_node_free(v5, (_QWORD *)a2);
    v11 = 1;
    if ((*(_BYTE *)(a1 + 48) & 2) == 0)
      return v11;
LABEL_16:
    os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 52));
    return v11;
  }
  v8 = pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init(v8);
  os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v39 = "nw_hash_table_remove_node_internal";
  v9 = (void *)_os_log_send_and_compose_impl();
  result = __nwlog_abort((uint64_t)v9);
  if (!result)
  {
    free(v9);
    goto LABEL_13;
  }
LABEL_63:
  __break(1u);
  return result;
}

void nw_queue_set_timer_values(uint64_t a1, dispatch_time_t a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  uint64_t v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_QWORD *)a1)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)a1, a2, a3, a4);
    }
    else
    {
      *(_QWORD *)(a1 + 32) = a2;
      *(_QWORD *)(a1 + 40) = a3;
      if (*(_BYTE *)(a1 + 48))
      {
        if (*(_BYTE *)(a1 + 49))
          nw_queue_source_run_timer(a1, a2);
      }
    }
    return;
  }
  __nwlog_obj(0, a2);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_queue_set_timer_values";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  v6 = __nwlog_fault(v5, &type, &v14);
  if ((_DWORD)v6)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_queue_set_timer_values";
        v10 = "%{public}s called with null source";
LABEL_20:
        _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
      }
    }
    else
    {
      if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj(backtrace_string, v12);
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_queue_set_timer_values";
            v18 = 2082;
            v19 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null source, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_22;
        }
        if (!v13)
          goto LABEL_21;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_queue_set_timer_values";
        v10 = "%{public}s called with null source, no backtrace";
        goto LABEL_20;
      }
      __nwlog_obj(v6, v7);
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_queue_set_timer_values";
        v10 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_20;
      }
    }
LABEL_21:

  }
LABEL_22:
  if (v5)
    free(v5);
}

void nw_queue_activate_source(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  void *v4;
  void *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  uint64_t v13;
  _BOOL4 v14;
  NSObject *v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj(0, a2);
    v5 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_queue_activate_source";
    v6 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    v7 = __nwlog_fault(v6, &type, &v16);
    if (!(_DWORD)v7)
      goto LABEL_28;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj(v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_activate_source";
        v11 = "%{public}s called with null source";
LABEL_26:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
    else
    {
      if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj(backtrace_string, v13);
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v14 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_queue_activate_source";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null source, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (!v14)
          goto LABEL_27;
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_activate_source";
        v11 = "%{public}s called with null source, no backtrace";
        goto LABEL_26;
      }
      __nwlog_obj(v7, v8);
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_activate_source";
        v11 = "%{public}s called with null source, backtrace limit exceeded";
        goto LABEL_26;
      }
    }
LABEL_27:

LABEL_28:
    if (v6)
      free(v6);
    return;
  }
  v3 = *(NSObject **)a1;
  if (v3)
  {
    dispatch_activate(v3);
    return;
  }
  if (*(_BYTE *)(a1 + 48))
  {
    if (!*(_BYTE *)(a1 + 49))
    {
      nw_queue_source_run_timer(a1, a2);
LABEL_10:
      *(_BYTE *)(a1 + 49) = 1;
    }
  }
  else
  {
    v4 = *(void **)(a1 + 16);
    if (v4)
    {
      if (!*(_BYTE *)(a1 + 49))
      {
        nw_context_queue_source_block(*(void **)(a1 + 8), v4);
        goto LABEL_10;
      }
    }
    else if (gLogDatapath)
    {
      __nwlog_obj(0, 0);
      v15 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_queue_activate_source";
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_DEBUG, "%{public}s Cancelled, not activating source", buf, 0xCu);
      }

    }
  }
}

uint64_t nw_context_get_association_dormant_delay(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_context_get_association_dormant_delay";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_context_get_association_dormant_delay";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_context_get_association_dormant_delay";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_context_get_association_dormant_delay";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_context_get_association_dormant_delay";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_minimize_logging(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[100] >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_minimize_logging";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_minimize_logging";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_minimize_logging";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_minimize_logging";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_minimize_logging";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183077FD4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1830781D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, objc_super a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;
  uint64_t v19;

  _Block_object_dispose((const void *)(v19 - 80), 8);
  a11.super_class = (Class)NWConcrete_nw_association;
  -[_Unwind_Exception dealloc](&a11, sel_dealloc);
  _Unwind_Resume(a1);
}

id nw_connection_copy_metadata(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  void **v3;
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _QWORD v17[4];
  void **v18;
  os_log_type_t *v19;
  _BYTE *v20;
  os_log_type_t type[8];
  os_log_type_t *v22;
  uint64_t v23;
  char v24;
  char v25;
  _BYTE buf[24];
  uint64_t (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t);
  id v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v27 = __Block_byref_object_copy__24122;
    v28 = __Block_byref_object_dispose__24123;
    v29 = 0;
    *(_QWORD *)type = 0;
    v22 = type;
    v23 = 0x2020000000;
    v24 = 0;
    v17[0] = MEMORY[0x1E0C809B0];
    v17[1] = 3221225472;
    v17[2] = __nw_connection_copy_metadata_block_invoke;
    v17[3] = &unk_1E14A54F0;
    v3 = v1;
    v18 = v3;
    v19 = type;
    v20 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_metadata_block_invoke(v17);
    os_unfair_lock_unlock(v2 + 34);
    v4 = *(_QWORD *)&buf[8];
    if (*((_BYTE *)v22 + 24) && !*(_QWORD *)(*(_QWORD *)&buf[8] + 40))
    {
      v5 = nw_parameters_copy_metadata(v3[2]);
      v6 = *(void **)(*(_QWORD *)&buf[8] + 40);
      *(_QWORD *)(*(_QWORD *)&buf[8] + 40) = v5;

      v4 = *(_QWORD *)&buf[8];
    }
    v7 = *(id *)(v4 + 40);

    _Block_object_dispose(type, 8);
    _Block_object_dispose(buf, 8);

    goto LABEL_6;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_metadata";
  v10 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v10, type, &v25))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_metadata";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type[0];
      v15 = os_log_type_enabled(v11, type[0]);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_metadata";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_metadata";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type[0];
      if (os_log_type_enabled(v11, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_metadata";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_6:

  return v7;
}

id nw_parameters_copy_metadata(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[27];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_copy_metadata";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_metadata";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_copy_metadata";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_metadata";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_metadata";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_copy_metadata_block_invoke(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  int v8;
  os_unfair_lock_s *v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t type[8];
  uint64_t v23;
  uint64_t (*v24)(uint64_t);
  void *v25;
  _BYTE *v26;
  char v27;
  _BYTE buf[24];
  uint64_t (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = a1[4];
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    *(_BYTE *)(*(_QWORD *)(a1[5] + 8) + 24) = 1;
    v6 = (os_unfair_lock_s *)*(id *)(a1[4] + 144);
    v7 = v6;
    if (v6)
    {
      *(_QWORD *)buf = 0;
      *(_QWORD *)&buf[8] = buf;
      *(_QWORD *)&buf[16] = 0x3032000000;
      v29 = __Block_byref_object_copy__30992;
      v30 = __Block_byref_object_dispose__30993;
      v31 = 0;
      os_unfair_lock_lock(v6 + 28);
      v8 = nw_endpoint_flow_uses_flow_divert(*(void **)&v7[62]._os_unfair_lock_opaque);
      os_unfair_lock_unlock(v7 + 28);
      if (v8)
      {
        v9 = v7;
        os_unfair_lock_lock(v7 + 28);
        if (v9[29]._os_unfair_lock_opaque == 2)
          v10 = nw_endpoint_flow_copy_connected_socket_wrapper(*(void **)&v7[62]._os_unfair_lock_opaque);
        else
          v10 = 0;
        os_unfair_lock_unlock(v7 + 28);

        if (v10)
        {
          *(_QWORD *)type = MEMORY[0x1E0C809B0];
          v23 = 3221225472;
          v24 = __nw_endpoint_handler_copy_metadata_block_invoke;
          v25 = &unk_1E14AB578;
          v26 = buf;
          nw_fd_wrapper_get_fd(v10, type);
        }

      }
      v11 = *(id *)(*(_QWORD *)&buf[8] + 40);
      _Block_object_dispose(buf, 8);

LABEL_19:
      v12 = *(_QWORD *)(a1[6] + 8);
      v13 = *(void **)(v12 + 40);
      *(_QWORD *)(v12 + 40) = v11;

      return;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_metadata";
    v15 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v15, type, &v27))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v17 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_metadata";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v19 = type[0];
        v20 = os_log_type_enabled(v16, type[0]);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_metadata";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_metadata";
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        v21 = type[0];
        if (os_log_type_enabled(v16, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_copy_metadata";
          _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_36:
    if (v15)
      free(v15);
    v11 = 0;
    goto LABEL_19;
  }
  v3 = *(_QWORD *)(v2 + 16);
  if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      v5 = *(_DWORD *)(a1[4] + 448);
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_connection_copy_metadata_block_invoke";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_copy_metadata on unconnected nw_connection", buf, 0x12u);
    }

  }
}

void sub_183078D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id a24)
{
  void *v24;
  void *v25;

  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_uses_flow_divert(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_mode_handler *v4;
  uint64_t v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    os_unfair_lock_lock(v1 + 220);
    if ((v2[8]._os_unfair_lock_opaque & 2) != 0 || (v2[8]._os_unfair_lock_opaque & 0x100) != 0)
    {
      v5 = (BYTE2(v2[8]._os_unfair_lock_opaque) >> 2) & 1;
    }
    else
    {
      v3 = *(NWConcrete_nw_endpoint_handler **)&v2[234]._os_unfair_lock_opaque;
      if (v3)
      {
        v4 = nw_endpoint_handler_copy_flow(v3);
        v5 = nw_endpoint_flow_uses_flow_divert();

      }
      else
      {
        v5 = 0;
      }
    }
    os_unfair_lock_unlock(v2 + 220);
    goto LABEL_8;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_endpoint_flow_uses_flow_divert";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_endpoint_flow_uses_flow_divert";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_endpoint_flow_uses_flow_divert";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_26;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_endpoint_flow_uses_flow_divert";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_endpoint_flow_uses_flow_divert";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_26:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_8:

  return v5;
}

void sub_183079098(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_is_local(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[473] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_is_local";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_local";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_is_local";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_local";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_is_local";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_connection_cancel(nw_connection_t connection)
{
  NWConcrete_nw_connection *v1;
  void *v2;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  char *backtrace_string;
  os_log_type_t v7;
  _BOOL4 v8;
  os_log_type_t v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v1 = connection;
  if (v1)
  {
    if (_nw_signposts_once != -1)
      dispatch_once(&_nw_signposts_once, &__block_literal_global_230);
    if (_nw_signposts_enabled && kdebug_is_enabled())
      kdebug_trace();
    nw_connection_cancel_inner(v1, 0);
    goto LABEL_8;
  }
  __nwlog_obj();
  v2 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v13 = "nw_connection_cancel";
  v3 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v10 = 0;
  if (__nwlog_fault(v3, &type, &v10))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v5 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_connection_cancel";
        _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v10)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v13 = "nw_connection_cancel";
          v14 = 2082;
          v15 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_25;
      }
      if (v8)
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_connection_cancel";
        _os_log_impl(&dword_182FBE000, v4, v7, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v4 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v4, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_connection_cancel";
        _os_log_impl(&dword_182FBE000, v4, v9, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_25:
  if (v3)
    free(v3);
LABEL_8:

}

void sub_183079648(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void nw_flow_protocol_release(_QWORD *a1)
{
  void *v2;

  nw_endpoint_flow_cleanup_protocol(0, (uint64_t)a1, 1);
  v2 = (void *)a1[23];
  a1[23] = 0;

  free(a1);
}

void nw_endpoint_handler_cancel_read_write_requests(void *a1, void *a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  id v4;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v6;
  NWConcrete_nw_endpoint_handler *v7;
  id *v8;
  id v9;
  NSObject *v10;
  const char *id_string;
  const char *v12;
  nw_endpoint_t v13;
  const char *logging_description;
  const char *v15;
  const char *v16;
  id v17;
  id v18;
  id v19;
  _DWORD *v20;
  id v21;
  id v22;
  _DWORD *v23;
  id v24;
  NWConcrete_nw_endpoint_mode_handler *v25;
  id v26;
  const char *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  const char *v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  const char *v35;
  os_log_type_t v36;
  const char *v37;
  const char *v38;
  void *v39;
  NSObject *v40;
  os_log_type_t v41;
  void *v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *backtrace_string;
  os_log_type_t v47;
  _BOOL4 v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  os_log_type_t v53;
  os_log_type_t v54;
  id v55;
  id v56;
  NWConcrete_nw_endpoint_handler *v57;
  NWConcrete_nw_endpoint_mode_handler *v58;
  char v59;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v62;
  __int16 v63;
  void *v64;
  __int16 v65;
  const char *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  const char *v72;
  __int16 v73;
  id v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (!v3)
  {
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v62 = "nw_endpoint_handler_cancel_read_write_requests";
    v28 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (!__nwlog_fault(v28, &type, &v59))
      goto LABEL_44;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v41 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_endpoint_handler_cancel_read_write_requests";
        _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else
    {
      if (v59)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v47 = type;
        v48 = os_log_type_enabled(v29, type);
        if (!backtrace_string)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446210;
            v62 = "nw_endpoint_handler_cancel_read_write_requests";
            _os_log_impl(&dword_182FBE000, v29, v47, "%{public}s called with null handler, no backtrace", buf, 0xCu);
          }
          goto LABEL_43;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446466;
          v62 = "nw_endpoint_handler_cancel_read_write_requests";
          v63 = 2082;
          v64 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v47, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v28)
          goto LABEL_46;
LABEL_45:
        free(v28);
        goto LABEL_46;
      }
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      v53 = type;
      if (os_log_type_enabled(v40, type))
      {
        *(_DWORD *)buf = 136446210;
        v62 = "nw_endpoint_handler_cancel_read_write_requests";
        _os_log_impl(&dword_182FBE000, v40, v53, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_44;
  }
  mode = v3->mode;
  if ((_DWORD)mode == 2)
  {
    v6 = nw_endpoint_handler_copy_flow(v3);
    if (v6)
    {
      v7 = v3;
      v58 = v6;
      v8 = v6;
      v9 = v4;
      if ((nw_endpoint_handler_get_logging_disabled(v7) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v10 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
        {
          v56 = v4;
          v57 = v3;
          id_string = nw_endpoint_handler_get_id_string(v7);
          v12 = nw_endpoint_handler_dry_run_string(v7);
          v55 = v9;
          v13 = nw_endpoint_handler_copy_endpoint(v7);
          logging_description = nw_endpoint_get_logging_description(v13);
          v15 = nw_endpoint_handler_state_string(v7);
          v16 = nw_endpoint_handler_mode_string(v7);
          v17 = nw_endpoint_handler_copy_current_path(v7);
          *(_DWORD *)buf = 136447746;
          v62 = "nw_flow_cancel_read_write_requests";
          v63 = 2082;
          v64 = (void *)id_string;
          v65 = 2082;
          v66 = v12;
          v67 = 2082;
          v68 = (void *)logging_description;
          v69 = 2082;
          v70 = v15;
          v71 = 2082;
          v72 = v16;
          v73 = 2114;
          v74 = v17;
          _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] cancelling read/write requests", buf, 0x48u);

          v4 = v56;
          v3 = v57;
          v9 = v55;

        }
      }
      v18 = v8[74];
      v19 = v8[74];
      v8[74] = 0;

      v20 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
      nw_read_request_report_error_with_override(v18, v9, v20);

      v21 = v8[71];
      v22 = v8[71];
      v8[71] = 0;

      v23 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
      nw_write_request_report_error_with_override(v21, v9, v23);

      v24 = v8[86];
      v8[86] = 0;

      v25 = v58;
LABEL_11:

      goto LABEL_46;
    }
    v25 = 0;
    __nwlog_obj();
    v42 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v62 = "nw_endpoint_handler_cancel_read_write_requests";
    v43 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v59 = 0;
    if (__nwlog_fault(v43, &type, &v59))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v44 = objc_claimAutoreleasedReturnValue();
        v45 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_endpoint_handler_cancel_read_write_requests";
          _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else
      {
        if (v59)
        {
          v49 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v50 = objc_claimAutoreleasedReturnValue();
          v51 = type;
          v52 = os_log_type_enabled(v50, type);
          if (v49)
          {
            if (v52)
            {
              *(_DWORD *)buf = 136446466;
              v62 = "nw_endpoint_handler_cancel_read_write_requests";
              v63 = 2082;
              v64 = v49;
              _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v49);
          }
          else
          {
            if (v52)
            {
              *(_DWORD *)buf = 136446210;
              v62 = "nw_endpoint_handler_cancel_read_write_requests";
              _os_log_impl(&dword_182FBE000, v50, v51, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_79;
        }
        __nwlog_obj();
        v44 = objc_claimAutoreleasedReturnValue();
        v54 = type;
        if (os_log_type_enabled(v44, type))
        {
          *(_DWORD *)buf = 136446210;
          v62 = "nw_endpoint_handler_cancel_read_write_requests";
          _os_log_impl(&dword_182FBE000, v44, v54, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_79:
    if (v43)
      free(v43);
    goto LABEL_11;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v26 = (id)gLogObj;
  if (mode > 5)
    v27 = "unknown-mode";
  else
    v27 = off_1E149FBE8[mode];
  *(_DWORD *)buf = 136446722;
  v62 = "nw_endpoint_handler_cancel_read_write_requests";
  v63 = 2082;
  v64 = (void *)v27;
  v65 = 2082;
  v66 = "flow";
  v28 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v59 = 0;
  if (!__nwlog_fault(v28, &type, &v59))
    goto LABEL_44;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v29 = (id)gLogObj;
    v30 = type;
    if (os_log_type_enabled(v29, type))
    {
      if (mode > 5)
        v31 = "unknown-mode";
      else
        v31 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v62 = "nw_endpoint_handler_cancel_read_write_requests";
      v63 = 2082;
      v64 = (void *)v31;
      v65 = 2082;
      v66 = "flow";
      _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_43:

    goto LABEL_44;
  }
  if (!v59)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v29 = (id)gLogObj;
    v36 = type;
    if (os_log_type_enabled(v29, type))
    {
      if (mode > 5)
        v37 = "unknown-mode";
      else
        v37 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v62 = "nw_endpoint_handler_cancel_read_write_requests";
      v63 = 2082;
      v64 = (void *)v37;
      v65 = 2082;
      v66 = "flow";
      _os_log_impl(&dword_182FBE000, v29, v36, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_43;
  }
  v32 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v29 = (id)gLogObj;
  v33 = type;
  v34 = os_log_type_enabled(v29, type);
  if (!v32)
  {
    if (v34)
    {
      if (mode > 5)
        v38 = "unknown-mode";
      else
        v38 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v62 = "nw_endpoint_handler_cancel_read_write_requests";
      v63 = 2082;
      v64 = (void *)v38;
      v65 = 2082;
      v66 = "flow";
      _os_log_impl(&dword_182FBE000, v29, v33, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_43;
  }
  if (v34)
  {
    if (mode > 5)
      v35 = "unknown-mode";
    else
      v35 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    v62 = "nw_endpoint_handler_cancel_read_write_requests";
    v63 = 2082;
    v64 = (void *)v35;
    v65 = 2082;
    v66 = "flow";
    v67 = 2082;
    v68 = v32;
    _os_log_impl(&dword_182FBE000, v29, v33, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v32);
  if (v28)
    goto LABEL_45;
LABEL_46:

}

void sub_18307A0BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, void *a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void nw_endpoint_flow_cleanup_protocol(void *a1, uint64_t a2, int a3)
{
  NWConcrete_nw_endpoint_handler *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char *v16;
  uint64_t v17;
  os_unfair_lock_s *v18;
  uint64_t v19;
  uint64_t v20;
  NWConcrete_nw_endpoint_mode_handler *v21;
  char v22;
  void *v23;
  _DWORD *v24;
  void *v25;
  NWConcrete_nw_endpoint_handler *v26;
  _QWORD *v27;
  NWConcrete_nw_write_request *v28;
  _BOOL8 v29;
  _QWORD *v30;
  NWConcrete_nw_write_request *v31;
  _BOOL8 v32;
  void *v33;
  _DWORD *v34;
  void *v35;
  void *v36;
  _DWORD *v37;
  void *v38;
  void *v39;
  _DWORD *v40;
  void *v41;
  void *v42;
  _DWORD *v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_QWORD, uint64_t);
  NSObject *v50;
  const char *id_string;
  const char *v52;
  nw_endpoint_t v53;
  const char *logging_description;
  const char *v55;
  const char *v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(void);
  NSObject *v62;
  const char *v63;
  const char *v64;
  nw_endpoint_t v65;
  NWConcrete_nw_endpoint_handler *v66;
  const char *v67;
  const char *v68;
  const char *v69;
  id v70;
  uint64_t v71;
  void *v72;
  NWConcrete_nw_endpoint_handler *v74;
  NWConcrete_nw_endpoint_handler *v75;
  _QWORD v76[5];
  _QWORD v77[2];
  uint64_t (*v78)(uint64_t, void *);
  void *v79;
  uint64_t v80;
  uint8_t buf[4];
  const char *v82;
  __int16 v83;
  const char *v84;
  __int16 v85;
  const char *v86;
  __int16 v87;
  const char *v88;
  __int16 v89;
  const char *v90;
  __int16 v91;
  const char *v92;
  __int16 v93;
  id v94;
  __int16 v95;
  uint64_t v96;
  uint64_t v97;

  v97 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v5 = *(void **)(a2 + 176);
  *(_QWORD *)(a2 + 176) = 0;

  v6 = *(void **)(a2 + 248);
  *(_QWORD *)(a2 + 248) = 0;

  v7 = *(void **)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 0;

  v8 = *(void **)(a2 + 240);
  *(_QWORD *)(a2 + 240) = 0;

  v9 = *(void **)(a2 + 224);
  *(_QWORD *)(a2 + 224) = 0;

  *(_WORD *)(a2 + 332) &= ~2u;
  v10 = *(void **)(a2 + 256);
  *(_QWORD *)(a2 + 256) = 0;

  v11 = *(void **)(a2 + 264);
  *(_QWORD *)(a2 + 264) = 0;

  *(_WORD *)(a2 + 332) &= 0xFD2Fu;
  v12 = MEMORY[0x1E0C809B0];
  v77[0] = MEMORY[0x1E0C809B0];
  v77[1] = 3221225472;
  v78 = __nw_endpoint_flow_cleanup_protocol_block_invoke;
  v79 = &__block_descriptor_40_e31_B16__0__NSObject_OS_nw_frame__8l;
  v80 = a2;
  v13 = *(_QWORD *)(a2 + 272);
  do
  {
    if (!v13)
      break;
    v14 = *(_QWORD *)(v13 + 32);
    v15 = ((uint64_t (*)(_QWORD *))v78)(v77);
    v13 = v14;
  }
  while ((v15 & 1) != 0);
  v16 = *(char **)(a2 + 288);
  if (v16)
  {
    v76[0] = v12;
    v76[1] = 3221225472;
    v76[2] = __nw_endpoint_flow_cleanup_protocol_block_invoke_2;
    v76[3] = &__block_descriptor_40_e23_B16__0__nw_hash_node__8l;
    v76[4] = a2;
    nw_hash_table_apply(v16, (uint64_t)v76);
    v18 = *(os_unfair_lock_s **)(a2 + 288);
    if (v18)
    {
      _nw_hash_table_release(v18, v17);
      *(_QWORD *)(a2 + 288) = 0;
    }
  }
  *(_WORD *)(a2 + 332) &= ~0x800u;
  v19 = *(_QWORD *)(a2 + 296);
  if (v19)
  {
    do
    {
      v20 = *(_QWORD *)(v19 + 16);
      nw_frame_finalize(v19);
      v19 = v20;
    }
    while (v20);
  }
  if (!v4)
  {
    v4 = (NWConcrete_nw_endpoint_handler *)*(id *)(a2 + 160);
    if (!v4)
    {
      v74 = 0;
      goto LABEL_19;
    }
  }
  v74 = v4;
  v21 = nw_endpoint_handler_copy_flow(v4);
  if (!v21 || (*((_BYTE *)v21 + 33) & 8) != 0)
  {

    goto LABEL_19;
  }
  v22 = *((_BYTE *)v21 + 32);

  if ((v22 & 1) == 0)
  {
LABEL_19:
    v33 = *(void **)(a2 + 216);
    v34 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_read_request_report_error_with_override(v33, 0, v34);

    v35 = *(void **)(a2 + 216);
    *(_QWORD *)(a2 + 216) = 0;

    v36 = *(void **)(a2 + 200);
    v37 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_write_request_report_error_with_override(v36, 0, v37);

    v38 = *(void **)(a2 + 200);
    *(_QWORD *)(a2 + 200) = 0;

    v39 = *(void **)(a2 + 208);
    v40 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_write_request_report_error_with_override(v39, 0, v40);

    v41 = *(void **)(a2 + 208);
    *(_QWORD *)(a2 + 208) = 0;

    v42 = *(void **)(a2 + 192);
    v43 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
    nw_write_request_report_error_with_override(v42, 0, v43);

    v44 = *(void **)(a2 + 192);
    *(_QWORD *)(a2 + 192) = 0;
    v26 = v74;
LABEL_20:

    goto LABEL_21;
  }
  v23 = *(void **)(a2 + 200);
  v24 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 89);
  nw_write_request_report_error_with_override(v23, 0, v24);

  v25 = *(void **)(a2 + 208);
  v26 = v74;
  if (v25)
  {
    v27 = v25;
    v28 = nw_write_request_create_clone(v27);
    v29 = nw_write_request_list_append(0, v28);

    v30 = (_QWORD *)v27[1];
    if (v30)
    {
      do
      {
        v31 = nw_write_request_create_clone(v30);
        v32 = nw_write_request_list_append((void *)v29, v31);

        v30 = (_QWORD *)v30[1];
        v29 = v32;
      }
      while (v30);
    }
    else
    {
      v32 = v29;
    }

    v44 = *(void **)(a2 + 200);
    *(_QWORD *)(a2 + 200) = v32;
    goto LABEL_20;
  }
LABEL_21:
  v45 = *(void **)(a2 + 312);
  *(_QWORD *)(a2 + 312) = 0;

  v46 = *(void **)(a2 + 320);
  *(_QWORD *)(a2 + 320) = 0;

  v47 = *(_QWORD *)(a2 + 72);
  if (v47)
  {
    v48 = *(_QWORD *)(v47 + 24);
    if (v48)
    {
      v49 = *(uint64_t (**)(_QWORD, uint64_t))(v48 + 240);
      if (v49)
      {
        if ((v49(*(_QWORD *)(a2 + 72), a2 + 64) & 1) == 0
          && (nw_endpoint_handler_get_logging_disabled(*(void **)(a2 + 160)) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v50 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
          {
            id_string = nw_endpoint_handler_get_id_string(*(void **)(a2 + 160));
            v52 = nw_endpoint_handler_dry_run_string(*(void **)(a2 + 160));
            v75 = v26;
            v53 = nw_endpoint_handler_copy_endpoint(*(void **)(a2 + 160));
            logging_description = nw_endpoint_get_logging_description(v53);
            v55 = nw_endpoint_handler_state_string(*(void **)(a2 + 160));
            v56 = nw_endpoint_handler_mode_string(*(void **)(a2 + 160));
            v57 = nw_endpoint_handler_copy_current_path(*(void **)(a2 + 160));
            v58 = *(_QWORD *)(v47 + 16);
            *(_DWORD *)buf = 136448002;
            v82 = "nw_endpoint_flow_cleanup_protocol";
            v83 = 2082;
            v84 = id_string;
            v85 = 2082;
            v86 = v52;
            v87 = 2082;
            v88 = logging_description;
            v89 = 2082;
            v90 = v55;
            v91 = 2082;
            v92 = v56;
            v93 = 2114;
            v94 = v57;
            v95 = 2082;
            v96 = v58;
            _os_log_impl(&dword_182FBE000, v50, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to remove listen handler %{public}s", buf, 0x52u);

            v26 = v75;
          }

        }
      }
    }
  }
  if (a3)
  {
    v59 = *(_QWORD *)(a2 + 32);
    if (v59)
    {
      v60 = *(_QWORD *)(v59 + 24);
      if (v60)
      {
        v61 = *(uint64_t (**)(void))(v60 + 8);
        if (v61)
        {
          if ((v61() & 1) == 0 && (nw_endpoint_handler_get_logging_disabled(*(void **)(a2 + 160)) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v62 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
            {
              v63 = nw_endpoint_handler_get_id_string(*(void **)(a2 + 160));
              v64 = nw_endpoint_handler_dry_run_string(*(void **)(a2 + 160));
              v65 = nw_endpoint_handler_copy_endpoint(*(void **)(a2 + 160));
              v66 = v26;
              v67 = nw_endpoint_get_logging_description(v65);
              v68 = nw_endpoint_handler_state_string(*(void **)(a2 + 160));
              v69 = nw_endpoint_handler_mode_string(*(void **)(a2 + 160));
              v70 = nw_endpoint_handler_copy_current_path(*(void **)(a2 + 160));
              v71 = *(_QWORD *)(a2 + 16);
              *(_DWORD *)buf = 136448002;
              v82 = "nw_endpoint_flow_cleanup_protocol";
              v83 = 2082;
              v84 = v63;
              v85 = 2082;
              v86 = v64;
              v87 = 2082;
              v88 = v67;
              v89 = 2082;
              v90 = v68;
              v91 = 2082;
              v92 = v69;
              v93 = 2114;
              v94 = v70;
              v95 = 2082;
              v96 = v71;
              _os_log_impl(&dword_182FBE000, v62, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to remove protocol %{public}s", buf, 0x52u);

              v26 = v66;
            }

          }
        }
      }
    }
    v72 = *(void **)(a2 + 160);
    *(_QWORD *)(a2 + 160) = 0;

  }
}

void sub_18307A7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void nw_write_request_report_error_with_override(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v7)
  {
    while (v5)
    {
      v8 = v5;
      nw_write_request_report(v8, v6, v7);
      v5 = (id)nw_write_request_list_remove_head(v8);

    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_write_request_report_error_with_override";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_write_request_report_error_with_override";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null error", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_write_request_report_error_with_override";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_write_request_report_error_with_override";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null error, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_write_request_report_error_with_override";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null error, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v10)
    free(v10);

LABEL_4:
}

void sub_18307AE08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_read_request_report_error_with_override(void *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  id *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v7)
  {
    while (v5)
    {
      v8 = (id *)v5;
      objc_storeStrong(v8 + 19, a3);
      nw_read_request_report(v8, v6);
      v5 = (id)nw_read_request_list_remove_head(v8);

    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_read_request_report_error_with_override";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v10, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_read_request_report_error_with_override";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null error", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_read_request_report_error_with_override";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_read_request_report_error_with_override";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null error, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_read_request_report_error_with_override";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null error, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v10)
    free(v10);

LABEL_4:
}

void sub_18307B10C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_connection_async_client_if_needed_with_override(void *a1, void *a2, dispatch_qos_class_t a3, void *a4)
{
  NSObject *v7;
  void (**v8)(_QWORD);
  dispatch_block_t v9;
  void *v10;
  NSObject *v11;
  dispatch_block_t v12;
  _QWORD *v13;

  v13 = a1;
  v7 = a2;
  v8 = a4;
  if (v7)
  {
    v9 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, a3, 0, v8);
    dispatch_async(v7, v9);

  }
  else
  {
    v10 = (void *)v13[25];
    if (v10)
    {
      v11 = v10;
      v12 = dispatch_block_create_with_qos_class((dispatch_block_flags_t)0, a3, 0, v8);
      dispatch_async(v11, v12);

    }
    else if (!v13[5])
    {
      v8[2](v8);
    }
  }

}

void sub_18307B20C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void nw_content_context_mark_completed_send(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    if (v3 != &__block_literal_global_5_41741
      && v3 != &__block_literal_global_4
      && v3 != &__block_literal_global_3_41726
      && v3 != &__block_literal_global_41718)
    {
      os_unfair_lock_lock((os_unfair_lock_t)v3 + 28);
      *((_BYTE *)v3 + 118) |= 4u;
      objc_storeStrong((id *)v3 + 12, a2);
      *((_QWORD *)v3 + 9) = 0;
      os_unfair_lock_unlock((os_unfair_lock_t)v3 + 28);
    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_content_context_mark_completed_send";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_mark_completed_send";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_content_context_mark_completed_send";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_mark_completed_send";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_mark_completed_send";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v6)
    free(v6);
LABEL_7:

}

void ___ZL21nw_flow_service_readsP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP16nw_flow_protocolb_block_invoke(uint64_t a1, void *a2, void *a3, BOOL a4, void *a5)
{
  NSObject *v9;
  id v10;
  id v11;
  uint64_t v12;
  int v13;
  NSObject *v14;
  id v15;
  id v16;
  _BOOL8 v17;
  void *v18;
  void *v19;
  NSObject *v20;
  const char *id_string;
  const char *logging_description;
  const char *v23;
  const char *v24;
  id v25;
  size_t size;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  const char *v35;
  const char *v36;
  nw_endpoint_t v37;
  char v38;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v41;
  __int16 v42;
  char *v43;
  __int16 v44;
  const char *v45;
  __int16 v46;
  const char *v47;
  __int16 v48;
  const char *v49;
  __int16 v50;
  const char *v51;
  __int16 v52;
  id v53;
  __int16 v54;
  size_t v55;
  __int16 v56;
  id v57;
  __int16 v58;
  id v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v9 = a2;
  v10 = a3;
  v11 = a5;
  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v20 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v35 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v36 = id_string;
      v37 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      logging_description = nw_endpoint_get_logging_description(v37);
      v23 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v24 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v25 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      if (v9)
        size = dispatch_data_get_size(v9);
      else
        size = 0;
      *(_DWORD *)buf = 136448514;
      v41 = "nw_flow_service_reads_block_invoke";
      v42 = 2082;
      v43 = (char *)v36;
      v44 = 2082;
      v45 = v35;
      v46 = 2082;
      v47 = logging_description;
      v48 = 2082;
      v49 = v23;
      v50 = 2082;
      v51 = v24;
      v52 = 2114;
      v53 = v25;
      v54 = 2048;
      v55 = size;
      v56 = 2048;
      v57 = v10;
      v58 = 2114;
      v59 = v11;
      _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Got final data length %zu, context %p, error %{public}@", buf, 0x66u);

    }
  }
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(unsigned __int8 *)(a1 + 48);
  v14 = v9;
  v15 = v10;
  v16 = v11;
  if (v12)
  {
    if (!*(_QWORD *)(v12 + 312))
    {
      v17 = nw_array_create();
      v18 = *(void **)(v12 + 312);
      *(_QWORD *)(v12 + 312) = v17;

    }
    nw_flow_final_read_create(v14, v15, v13 != 0, a4, v16);
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    nw_array_append(*(_QWORD *)(v12 + 312), v19);

    goto LABEL_6;
  }
  __nwlog_obj();
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v41 = "nw_flow_append_final_read";
  v28 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v38 = 0;
  if (__nwlog_fault(v28, &type, &v38))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_flow_append_final_read";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null flow_protocol", buf, 0xCu);
      }
    }
    else if (v38)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v29, type);
      if (backtrace_string)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v41 = "nw_flow_append_final_read";
          v42 = 2082;
          v43 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_flow_append_final_read";
        _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v41 = "nw_flow_append_final_read";
        _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_32:
  if (v28)
    free(v28);
LABEL_6:

}

void sub_18307B9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;

  _Unwind_Resume(a1);
}

NWConcrete_nw_flow_final_read *nw_flow_final_read_create(void *a1, void *a2, BOOL a3, BOOL a4, void *a5)
{
  id v10;
  id v11;
  id v12;
  NWConcrete_nw_flow_final_read *v13;
  id v14;
  NWConcrete_nw_flow_final_read *v15;
  void *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  id v25;
  id v26;
  char v27;
  os_log_type_t type;
  objc_super v29;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v10 = a1;
  v11 = a2;
  v12 = a5;
  v13 = [NWConcrete_nw_flow_final_read alloc];
  v25 = v10;
  v26 = v11;
  v14 = v12;
  if (!v13)
    goto LABEL_4;
  v29.receiver = v13;
  v29.super_class = (Class)NWConcrete_nw_flow_final_read;
  v15 = (NWConcrete_nw_flow_final_read *)objc_msgSendSuper2(&v29, sel_init);
  v13 = v15;
  if (v15)
  {
    objc_storeStrong((id *)&v15->content, a1);
    objc_storeStrong((id *)&v13->content_context, a2);
    v13->receive_single_message = a3;
    v13->is_complete = a4;
    objc_storeStrong((id *)&v13->error, a5);
    goto LABEL_4;
  }
  __nwlog_obj();
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
  v18 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if ((__nwlog_fault(v18, &type, &v27) & 1) != 0)
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
        _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s [super init] failed", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v19, type);
      if (backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
          v32 = 2082;
          v33 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
        _os_log_impl(&dword_182FBE000, v19, v22, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v19 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v19, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "-[NWConcrete_nw_flow_final_read initWithContent:contentContext:receiveSingleMessage:isComplete:error:]";
        _os_log_impl(&dword_182FBE000, v19, v24, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v18)
    free(v18);
  v13 = 0;
LABEL_4:

  return v13;
}

void sub_18307BD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

int nw_error_get_error_code(nw_error_t error)
{
  nw_error_t v1;
  nw_error_t v2;
  int isa_high;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = error;
  v2 = v1;
  if (v1)
  {
    isa_high = HIDWORD(v1[1].isa);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_error_get_error_code";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_error_get_error_code";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null error", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_error_get_error_code";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null error, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_error_get_error_code";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null error, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_error_get_error_code";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null error, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa_high = 0;
LABEL_3:

  return isa_high;
}

uint64_t nw_context_64k_buffer_length()
{
  return dword_1EDCDF390;
}

void nw_flow_passthrough_output_available(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*output_available)(void);
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    default_input_handler = a1->default_input_handler;
    if (default_input_handler)
    {
      callbacks = default_input_handler->callbacks;
      if (callbacks)
      {
        output_available = (void (*)(void))callbacks->output_available;
        if (output_available)
          output_available();
      }
    }
    return;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v15 = "nw_flow_passthrough_output_available";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (__nwlog_fault(v6, &type, &v12))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_output_available";
        v9 = "%{public}s called with null protocol";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
      }
    }
    else
    {
      if (v12)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v7 = objc_claimAutoreleasedReturnValue();
        v8 = type;
        v11 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (v11)
          {
            *(_DWORD *)buf = 136446466;
            v15 = "nw_flow_passthrough_output_available";
            v16 = 2082;
            v17 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (!v11)
          goto LABEL_20;
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_output_available";
        v9 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_19;
      }
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v15 = "nw_flow_passthrough_output_available";
        v9 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:

  }
LABEL_21:
  if (v6)
    free(v6);
}

void nw_proxy_options_set_authentication_challenge_handler(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  id v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_proxy_options_set_authentication_challenge_handler_block_invoke;
    v14[3] = &unk_1E14A9DD0;
    v15 = v4;
    nw_protocol_options_access_handle(v3, v14);

    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_proxy_options_set_authentication_challenge_handler";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v7, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_proxy_options_set_authentication_challenge_handler";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_proxy_options_set_authentication_challenge_handler";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_proxy_options_set_authentication_challenge_handler";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_proxy_options_set_authentication_challenge_handler";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
LABEL_3:

}

void sub_18307C5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

uint64_t __nw_proxy_options_set_authentication_challenge_handler_block_invoke(uint64_t a1, void **a2)
{
  void *v3;
  void *v4;

  v3 = _Block_copy(*(const void **)(a1 + 32));
  v4 = *a2;
  *a2 = v3;

  return 1;
}

void __nw_path_create_necp_parameters_block_invoke(uint64_t a1, void *a2)
{
  NSObject *v3;
  uint64_t v4;
  void *v5;
  size_t v6;
  _OWORD *v7;
  nw_protocol_definition_t v8;
  char *identifier;
  uint64_t v10;
  __int128 v11;
  size_t v12;
  xpc_object_t v13;
  void *v14;
  xpc_object_t v15;
  uint64_t v16;
  void *v17;
  NSObject *v18;
  void *v19;
  NSObject *v20;
  void *v21;
  size_t __n;
  int v23;
  const char *v24;
  __int16 v25;
  size_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = a2;
  __n = 0;
  v4 = nw_protocol_options_copy_serialized_bytes(v3, (uint64_t)&__n, 1);
  v5 = (void *)v4;
  if (!v4 || (v6 = __n) == 0)
  {
    if (!v4)
    {
LABEL_10:

      return;
    }
LABEL_9:
    free(v5);
    goto LABEL_10;
  }
  if (__n == -42)
  {
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v18, OS_LOG_TYPE_ERROR);
    v23 = 136446210;
    v24 = "strict_malloc";
    v19 = (void *)_os_log_send_and_compose_impl();

    if (__nwlog_abort((uint64_t)v19))
      goto LABEL_15;
    free(v19);
  }
  v7 = malloc_type_malloc(v6 + 42, 0xF2B69DE5uLL);
  if (v7)
  {
LABEL_5:
    v8 = nw_protocol_options_copy_definition(v3);
    identifier = nw_protocol_definition_get_identifier(v8);
    v10 = *((_QWORD *)identifier + 4);
    v11 = *((_OWORD *)identifier + 1);
    *v7 = *(_OWORD *)identifier;
    v7[1] = v11;
    *((_QWORD *)v7 + 4) = v10;
    v12 = __n;
    *((_WORD *)v7 + 20) = __n;
    memcpy((char *)v7 + 42, v5, v12);
    v13 = xpc_data_create(v7, v6 + 42);
    v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    if (!v14)
    {
      v15 = xpc_array_create(0, 0);
      v16 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v17 = *(void **)(v16 + 40);
      *(_QWORD *)(v16 + 40) = v15;

      v14 = *(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
    }
    xpc_array_append_value(v14, v13);
    free(v7);
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) += v6 + 47;

    goto LABEL_9;
  }
  __nwlog_obj();
  v20 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
  v23 = 136446466;
  v24 = "strict_malloc";
  v25 = 2048;
  v26 = v6 + 42;
  v21 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v21))
  {
    free(v21);
    goto LABEL_5;
  }
LABEL_15:
  __break(1u);
}

void sub_18307C8BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_options_copy_serialized_bytes(void *a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t (*v8)(void);
  uint64_t v9;
  unsigned int (*v10)(void);
  uint64_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  os_log_type_t v28;
  os_log_type_t v29;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_options_copy_serialized_bytes";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null options", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v14, v27, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_options_copy_serialized_bytes";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_41;
  }
  if (!a2)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_options_copy_serialized_bytes";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null serialized_length", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v14, v28, "%{public}s called with null serialized_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null serialized_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_options_copy_serialized_bytes";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null serialized_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_41;
  }
  v7 = v5[1];
  if (!v7)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_protocol_options_copy_serialized_bytes";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (!__nwlog_fault(v13, &type, &v31))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null options->definition", buf, 0xCu);
      }
LABEL_59:

LABEL_60:
      if (v13)
        free(v13);
      goto LABEL_62;
    }
    if (!v31)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v14, v29, "%{public}s called with null options->definition, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    v26 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v26)
      {
        *(_DWORD *)buf = 136446210;
        v34 = "nw_protocol_options_copy_serialized_bytes";
        _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null options->definition, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v26)
    {
      *(_DWORD *)buf = 136446466;
      v34 = "nw_protocol_options_copy_serialized_bytes";
      v35 = 2082;
      v36 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null options->definition, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_41:

    free(backtrace_string);
    goto LABEL_60;
  }
  v8 = *(uint64_t (**)(void))(v7 + 128);
  if (!v8)
    goto LABEL_62;
  if (!a3 || (*(_BYTE *)(v7 + 185) & 1) != 0)
    goto LABEL_11;
  v9 = *(_QWORD *)(v7 + 80);
  if (!v9 || (v10 = *(unsigned int (**)(void))(v9 + 248)) == 0 || !v10())
  {
LABEL_62:
    v11 = 0;
    goto LABEL_63;
  }
  v8 = *(uint64_t (**)(void))(v6[1] + 128);
LABEL_11:
  v11 = v8();
LABEL_63:

  return v11;
}

void sub_18307CFE0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void tcp_connection_start(void *a1)
{
  id v2;
  NSObject *v3;
  NSObject *v4;
  uint64_t v5;
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  int *v12;
  char v13;
  void *v14;
  void *v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  int *v23;
  int *v24;
  void *v25;
  int v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  NSObject *v30;
  os_log_type_t v31;
  _QWORD v32[4];
  int *v33;
  _QWORD handler[4];
  id v35;
  char v36;
  os_log_type_t type;
  _BYTE buf[24];
  void *v39;
  int *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  v4 = v3;
  if (!v2)
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "tcp_connection_start";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v36 = 0;
    if (__nwlog_fault(v19, &type, &v36))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = type;
        if (!os_log_type_enabled(v20, type))
          goto LABEL_40;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "tcp_connection_start";
        v22 = "%{public}s called with null connection";
LABEL_38:
        v30 = v20;
        v31 = v21;
        goto LABEL_39;
      }
      if (!v36)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = type;
        if (!os_log_type_enabled(v20, type))
          goto LABEL_40;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "tcp_connection_start";
        v22 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_38;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      v28 = type;
      v29 = os_log_type_enabled(v20, type);
      if (!backtrace_string)
      {
        if (!v29)
        {
LABEL_40:

          if (!v19)
            goto LABEL_35;
          goto LABEL_34;
        }
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "tcp_connection_start";
        v22 = "%{public}s called with null connection, no backtrace";
        v30 = v20;
        v31 = v28;
LABEL_39:
        _os_log_impl(&dword_182FBE000, v30, v31, v22, buf, 0xCu);
        goto LABEL_40;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "tcp_connection_start";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v19)
      goto LABEL_35;
LABEL_34:
    free(v19);
    goto LABEL_35;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEBUG))
  {
    v5 = *((_QWORD *)v2 + 12);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "tcp_connection_start";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v5;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "%{public}s %llu starting", buf, 0x16u);
  }

  if (!*((_QWORD *)v2 + 2))
  {
    v6 = nw_connection_create_with_id(*((void **)v2 + 5), *((void **)v2 + 6), *((_QWORD *)v2 + 12));
    v7 = (void *)*((_QWORD *)v2 + 2);
    *((_QWORD *)v2 + 2) = v6;

    nw_connection_set_queue(*((nw_connection_t *)v2 + 2), *((dispatch_queue_t *)v2 + 7));
    *((_QWORD *)v2 + 12) = nw_connection_get_id(*((void **)v2 + 2));
  }
  *((_BYTE *)v2 + 159) |= 0x10u;
  objc_storeStrong((id *)v2 + 11, a1);
  v8 = *((_QWORD *)v2 + 2);
  v9 = MEMORY[0x1E0C809B0];
  handler[0] = MEMORY[0x1E0C809B0];
  handler[1] = 3221225472;
  handler[2] = __tcp_connection_start_block_invoke;
  handler[3] = &unk_1E14ACF48;
  v10 = v2;
  v35 = v10;
  nw_connection_set_state_changed_handler(v8, handler);
  v11 = *((_QWORD *)v2 + 2);
  v32[0] = v9;
  v32[1] = 3221225472;
  v32[2] = __tcp_connection_start_block_invoke_29;
  v32[3] = &unk_1E14AC2C8;
  v12 = (int *)v10;
  v33 = v12;
  nw_connection_set_path_changed_handler(v11, v32);
  v13 = *((_BYTE *)v2 + 159);
  if ((v13 & 0x20) != 0)
  {
    tcp_connection_set_keepalive_handler_on_nw_connection(v12);
    v13 = *((_BYTE *)v2 + 159);
    if ((v13 & 0x40) == 0)
    {
LABEL_8:
      if ((v13 & 0x80) == 0)
        goto LABEL_9;
      goto LABEL_23;
    }
  }
  else if ((*((_BYTE *)v2 + 159) & 0x40) == 0)
  {
    goto LABEL_8;
  }
  tcp_connection_set_adaptive_read_handler_on_nw_connection(v12);
  if ((*((_BYTE *)v2 + 159) & 0x80) == 0)
  {
LABEL_9:
    if (!v12[38])
      goto LABEL_10;
LABEL_24:
    v23 = v12;
    v24 = v23;
    v25 = (void *)*((_QWORD *)v2 + 2);
    if (v25)
    {
      v26 = v12[38];
      *(_QWORD *)buf = v9;
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = __tcp_connection_set_minimum_throughput_on_nw_connection_block_invoke;
      v39 = &unk_1E149FE18;
      v40 = v23;
      nw_connection_set_low_throughput_handler(v25, v26, buf);

    }
    v14 = (void *)*((_QWORD *)v12 + 9);
    if (!v14)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_23:
  tcp_connection_set_adaptive_write_handler_on_nw_connection(v12);
  if (v12[38])
    goto LABEL_24;
LABEL_10:
  v14 = (void *)*((_QWORD *)v12 + 9);
  if (v14)
  {
LABEL_11:
    nw_connection_set_cancel_handler(*((void **)v2 + 2), v14);
    v15 = (void *)*((_QWORD *)v12 + 9);
    *((_QWORD *)v12 + 9) = 0;

  }
LABEL_12:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v16 = (id)gLogObj;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    v17 = *((_QWORD *)v2 + 2);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "tcp_connection_start";
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = v17;
    _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, "%{public}s starting tc_nwconn=%p", buf, 0x16u);
  }

  v18 = *((_QWORD *)v2 + 2);
  if (v18)
    nw_connection_start(v18);

LABEL_35:
}

uint64_t nw_connection_get_id(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[112];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_connection_get_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_get_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_connection_get_id";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_get_id";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_connection_get_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void NWConnection.send(content:contentContext:isComplete:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  const char *v12;
  void *v13;
  NSObject *v14;
  const char *v15;
  void *v16;
  NSObject *v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  NSObject *v21;
  _QWORD aBlock[6];

  v9 = *a5;
  if (*a5)
  {
    v10 = a5[1];
    v11 = *(NSObject **)(v5 + 16);
    sub_183061488(*a5);
    swift_unknownObjectRetain();
    if (a2 >> 60 == 15)
      v13 = 0;
    else
      v13 = (void *)sub_183B9141C();
    v17 = NWCreateDispatchDataFromNSData(v13, v12);

    v18 = *(NSObject **)(a3 + 16);
    v19 = swift_allocObject();
    *(_QWORD *)(v19 + 16) = v9;
    *(_QWORD *)(v19 + 24) = v10;
    aBlock[4] = sub_183083F38;
    aBlock[5] = v19;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_183056AB0;
    aBlock[3] = &block_descriptor_9_0;
    v20 = _Block_copy(aBlock);
    sub_183061488(v9);
    swift_unknownObjectRetain();
    swift_release();
    nw_connection_send(v11, v17, v18, a4 & 1, v20);
    _Block_release(v20);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    sub_1830630AC(v9);
  }
  else
  {
    v14 = *(NSObject **)(v5 + 16);
    swift_unknownObjectRetain();
    if (a2 >> 60 == 15)
      v16 = 0;
    else
      v16 = (void *)sub_183B9141C();
    v21 = NWCreateDispatchDataFromNSData(v16, v15);

    nw_connection_send_idempotent(v14, v21, *(NSObject **)(a3 + 16), a4 & 1);
    swift_unknownObjectRelease();

  }
}

void nw_connection_send(nw_connection_t connection, dispatch_data_t content, nw_content_context_t context, BOOL is_complete, nw_connection_send_completion_t completion)
{
  _BOOL4 v6;
  nw_connection_t v9;
  NSObject *v10;
  NSObject *v11;
  nw_connection_send_completion_t v12;
  void *v13;
  NSObject *v14;
  NSObject *v15;
  NWConcrete_nw_write_request *v16;
  Class isa;
  NSObject *v18;
  int v19;
  dispatch_qos_class_t v20;
  NWConcrete_nw_write_request *v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  void *v34;
  os_log_type_t v35;
  char *backtrace_string;
  os_log_type_t v37;
  _BOOL4 v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  os_log_type_t v43;
  _QWORD v44[4];
  id v45;
  char v46;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v49;
  __int16 v50;
  _WORD v51[17];

  v6 = is_complete;
  *(_QWORD *)&v51[13] = *MEMORY[0x1E0C80C00];
  v9 = connection;
  v10 = content;
  v11 = context;
  v12 = completion;
  v13 = v12;
  if (!v9)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_connection_send";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v31, &type, &v46))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_send";
        _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v46)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v37 = type;
      v38 = os_log_type_enabled(v32, type);
      if (backtrace_string)
      {
        if (v38)
        {
          *(_DWORD *)buf = 136446466;
          v49 = "nw_connection_send";
          v50 = 2082;
          *(_QWORD *)v51 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_73:
        if (!v31)
          goto LABEL_39;
        goto LABEL_74;
      }
      if (v38)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_send";
        _os_log_impl(&dword_182FBE000, v32, v37, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v42 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_send";
        _os_log_impl(&dword_182FBE000, v32, v42, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_72:

    goto LABEL_73;
  }
  if (!v12)
  {
    __nwlog_obj();
    v34 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v49 = "nw_connection_send";
    v31 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (!__nwlog_fault(v31, &type, &v46))
      goto LABEL_73;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v35 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_send";
        _os_log_impl(&dword_182FBE000, v32, v35, "%{public}s called with null completion", buf, 0xCu);
      }
    }
    else if (v46)
    {
      v39 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      v41 = os_log_type_enabled(v32, type);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v49 = "nw_connection_send";
          v50 = 2082;
          *(_QWORD *)v51 = v39;
          _os_log_impl(&dword_182FBE000, v32, v40, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        if (!v31)
          goto LABEL_39;
LABEL_74:
        free(v31);
        goto LABEL_39;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_send";
        _os_log_impl(&dword_182FBE000, v32, v40, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v43 = type;
      if (os_log_type_enabled(v32, type))
      {
        *(_DWORD *)buf = 136446210;
        v49 = "nw_connection_send";
        _os_log_impl(&dword_182FBE000, v32, v43, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_72;
  }
  if (v11 != &__block_literal_global_5_41741)
  {
    v14 = &__block_literal_global_41718;
    if (v11)
      v14 = v11;
    v15 = v14;
    if (v13 == &__block_literal_global_24144)
      v16 = nw_write_request_create_idempotent(v10, v15, 0, v6);
    else
      v16 = nw_write_request_create(v10, v15, 0, v6, v9, v13);
    v21 = v16;
    if (v16)
    {
      nw_connection_add_write_request(v9, v16);
LABEL_38:

      goto LABEL_39;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v49 = "nw_connection_send";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v23, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_connection_send";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s nw_write_request_create failed", buf, 0xCu);
        }
      }
      else if (v46)
      {
        v26 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v27 = type;
        v28 = os_log_type_enabled(v24, type);
        if (v26)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v49 = "nw_connection_send";
            v50 = 2082;
            *(_QWORD *)v51 = v26;
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s nw_write_request_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v26);
          if (!v23)
            goto LABEL_38;
          goto LABEL_37;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_connection_send";
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s nw_write_request_create failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v24 = (id)gLogObj;
        v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v49 = "nw_connection_send";
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s nw_write_request_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v23)
      goto LABEL_38;
LABEL_37:
    free(v23);
    goto LABEL_38;
  }
  isa = v9[2].isa;
  if (isa && !nw_path_parameters_get_logging_disabled(*((_QWORD *)isa + 13)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v18 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      v19 = (int)v9[56].isa;
      *(_DWORD *)buf = 136446722;
      v49 = "nw_connection_send";
      v50 = 1024;
      *(_DWORD *)v51 = v19;
      v51[2] = 2082;
      *(_QWORD *)&v51[3] = "Cannot send replies on new inbound message context";
      _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s [C%u] %{public}s, sending error callback", buf, 0x1Cu);
    }

  }
  v20 = (dispatch_qos_class_t)v9[24].isa;
  v44[0] = MEMORY[0x1E0C809B0];
  v44[1] = 3221225472;
  v44[2] = __nw_connection_send_block_invoke;
  v44[3] = &unk_1E14AC390;
  v45 = v13;
  nw_connection_async_client_if_needed_with_override(v9, 0, v20, v44);

LABEL_39:
}

void sub_18307E2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

NWConcrete_nw_write_request *nw_write_request_create(void *a1, void *a2, void *a3, int a4, void *a5, void *a6)
{
  id v11;
  id v12;
  id v13;
  os_unfair_lock_s *v14;
  os_unfair_lock_s *v15;
  char v16;
  void *v17;
  NSObject *v18;
  NWConcrete_nw_write_request *v19;
  NWConcrete_nw_write_request *v20;
  void *v21;
  dispatch_data_t *p_data;
  void *v23;
  id completion;
  double *v25;
  double *v26;
  double v27;
  char v28;
  double *v29;
  NWConcrete_nw_write_request *v30;
  id v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  char *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  os_log_type_t v38;
  void *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  void *v48;
  os_log_type_t v49;
  char *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  char *backtrace_string;
  os_log_type_t v54;
  _BOOL4 v55;
  os_log_type_t v56;
  _BOOL4 v57;
  os_log_type_t v58;
  NSObject *v59;
  _DWORD *posix_error;
  os_log_type_t v61;
  os_log_type_t v62;
  NSObject *context;
  void *v64;
  _QWORD *v65;
  id aBlock;
  _QWORD block[4];
  id v68;
  char v69;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v72;
  __int16 v73;
  char *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v11 = a1;
  v12 = a2;
  v13 = a3;
  v65 = a5;
  aBlock = a6;
  v64 = v13;
  if (!aBlock)
  {
    v17 = v11;
    __nwlog_obj();
    v44 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v72 = "nw_write_request_create";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v69 = 0;
    if (!__nwlog_fault(v45, &type, &v69))
      goto LABEL_123;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v72 = "nw_write_request_create";
        _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s called with null completion", buf, 0xCu);
      }
      goto LABEL_122;
    }
    if (!v69)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v61 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v72 = "nw_write_request_create";
        _os_log_impl(&dword_182FBE000, v46, v61, "%{public}s called with null completion, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_122;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v54 = type;
    v55 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (v55)
      {
        *(_DWORD *)buf = 136446210;
        v72 = "nw_write_request_create";
        _os_log_impl(&dword_182FBE000, v46, v54, "%{public}s called with null completion, no backtrace", buf, 0xCu);
      }
      goto LABEL_122;
    }
    if (v55)
    {
      *(_DWORD *)buf = 136446466;
      v72 = "nw_write_request_create";
      v73 = 2082;
      v74 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v46, v54, "%{public}s called with null completion, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_93;
  }
  if (!v12)
  {
    v17 = v11;
    __nwlog_obj();
    v48 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v72 = "nw_write_request_create";
    v45 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v69 = 0;
    if (!__nwlog_fault(v45, &type, &v69))
      goto LABEL_123;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v49 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v72 = "nw_write_request_create";
        _os_log_impl(&dword_182FBE000, v46, v49, "%{public}s called with null context", buf, 0xCu);
      }
LABEL_122:

LABEL_123:
      if (v45)
        free(v45);
      goto LABEL_18;
    }
    if (!v69)
    {
      __nwlog_obj();
      v46 = objc_claimAutoreleasedReturnValue();
      v62 = type;
      if (os_log_type_enabled(v46, type))
      {
        *(_DWORD *)buf = 136446210;
        v72 = "nw_write_request_create";
        _os_log_impl(&dword_182FBE000, v46, v62, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_122;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v46 = objc_claimAutoreleasedReturnValue();
    v56 = type;
    v57 = os_log_type_enabled(v46, type);
    if (!backtrace_string)
    {
      if (v57)
      {
        *(_DWORD *)buf = 136446210;
        v72 = "nw_write_request_create";
        _os_log_impl(&dword_182FBE000, v46, v56, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
      goto LABEL_122;
    }
    if (v57)
    {
      *(_DWORD *)buf = 136446466;
      v72 = "nw_write_request_create";
      v73 = 2082;
      v74 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v46, v56, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_93:

    free(backtrace_string);
    goto LABEL_123;
  }
  if (!v11
    && (a4 & 1) == 0
    && (v12 == &__block_literal_global_3_41726
     || v12 == &__block_literal_global_41718
     || v12 == &__block_literal_global_4
     || v12 == &__block_literal_global_5_41741))
  {
    v17 = 0;
    __nwlog_obj();
    v40 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v72 = "nw_write_request_create";
    v41 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v69 = 0;
    if (__nwlog_fault(v41, &type, &v69))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          v72 = "nw_write_request_create";
          _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s Send content may only be nil if the request is marked as complete", buf, 0xCu);
        }
      }
      else if (v69)
      {
        v50 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v51 = type;
        v52 = os_log_type_enabled(v42, type);
        if (v50)
        {
          if (v52)
          {
            *(_DWORD *)buf = 136446466;
            v72 = "nw_write_request_create";
            v73 = 2082;
            v74 = v50;
            _os_log_impl(&dword_182FBE000, v42, v51, "%{public}s Send content may only be nil if the request is marked as complete, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v50);
          goto LABEL_103;
        }
        if (v52)
        {
          *(_DWORD *)buf = 136446210;
          v72 = "nw_write_request_create";
          _os_log_impl(&dword_182FBE000, v42, v51, "%{public}s Send content may only be nil if the request is marked as complete, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v42 = objc_claimAutoreleasedReturnValue();
        v58 = type;
        if (os_log_type_enabled(v42, type))
        {
          *(_DWORD *)buf = 136446210;
          v72 = "nw_write_request_create";
          _os_log_impl(&dword_182FBE000, v42, v58, "%{public}s Send content may only be nil if the request is marked as complete, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_103:
    if (v41)
      free(v41);
    v59 = v65[25];
    if (v59)
    {
      block[0] = MEMORY[0x1E0C809B0];
      block[1] = 3221225472;
      block[2] = __nw_write_request_create_block_invoke;
      block[3] = &unk_1E14AC390;
      v68 = aBlock;
      dispatch_async(v59, block);

    }
    else
    {
      posix_error = nw_error_create_posix_error(22);
      (*((void (**)(id, _DWORD *))aBlock + 2))(aBlock, posix_error);

    }
    goto LABEL_18;
  }
  if (!v13)
    goto LABEL_20;
  v14 = (os_unfair_lock_s *)v13;
  if (v14 == (os_unfair_lock_s *)&__block_literal_global_5_41741)
  {

    goto LABEL_20;
  }
  v15 = v14;
  if (v14 == (os_unfair_lock_s *)&__block_literal_global_4
    || v14 == (os_unfair_lock_s *)&__block_literal_global_3_41726
    || v14 == (os_unfair_lock_s *)&__block_literal_global_41718)
  {

    goto LABEL_15;
  }
  os_unfair_lock_lock(v14 + 28);
  v16 = BYTE2(v15[29]._os_unfair_lock_opaque);
  os_unfair_lock_unlock(v15 + 28);

  if ((v16 & 0x40) != 0)
  {
LABEL_20:
    v20 = objc_alloc_init(NWConcrete_nw_write_request);
    v19 = v20;
    if (v20)
    {
      v17 = v11;
      if (v11)
        v21 = v11;
      else
        v21 = (void *)MEMORY[0x1E0C80D00];
      p_data = (dispatch_data_t *)&v20->data;
      objc_storeStrong((id *)&v20->data, v21);
      objc_storeStrong((id *)&v19->context, a2);
      objc_storeStrong((id *)&v19->original_message, a3);
      *((_BYTE *)v19 + 128) = *((_BYTE *)v19 + 128) & 0xFE | a4;
      v23 = _Block_copy(aBlock);
      completion = v19->completion;
      v19->completion = v23;

      objc_storeStrong((id *)&v19->connection, a5);
      v19->qos_class = qos_class_self();
      v25 = (double *)v12;
      v26 = v25;
      v27 = 0.5;
      if (v25 != (double *)&__block_literal_global_5_41741
        && v25 != (double *)&__block_literal_global_4
        && v25 != (double *)&__block_literal_global_3_41726
        && v25 != (double *)&__block_literal_global_41718
        && (*((_BYTE *)v25 + 118) & 1) == 0)
      {
        v27 = v25[10];
      }

      v28 = 0;
      v19->relative_priority = v27;
      if (!v17 && a4)
      {
        v29 = v26;
        v28 = 0;
        if (v26 != (double *)&__block_literal_global_41718 && v26 != (double *)&__block_literal_global_5_41741)
        {
          v28 = 8;
          if (v26 != (double *)&__block_literal_global_3_41726 && v26 != (double *)&__block_literal_global_4)
            v28 = 8 * (*((_BYTE *)v29 + 118) & 1);
        }

      }
      *((_BYTE *)v19 + 128) = *((_BYTE *)v19 + 128) & 0xF7 | v28;
      if (_nw_signposts_once != -1)
        dispatch_once(&_nw_signposts_once, &__block_literal_global_32785);
      if (_nw_signposts_enabled && kdebug_is_enabled())
      {
        if (*p_data)
          dispatch_data_get_size(*p_data);
        context = v19->context;
        if (context)
          nw_content_context_get_is_final(context);
        kdebug_trace();
      }
      v30 = v19;
      goto LABEL_62;
    }
    v17 = v11;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v31 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v72 = "nw_write_request_create";
    v32 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v69 = 0;
    if (__nwlog_fault(v32, &type, &v69))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        v34 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v72 = "nw_write_request_create";
          _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed", buf, 0xCu);
        }
      }
      else if (v69)
      {
        v35 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        v36 = type;
        v37 = os_log_type_enabled(v33, type);
        if (v35)
        {
          if (v37)
          {
            *(_DWORD *)buf = 136446466;
            v72 = "nw_write_request_create";
            v73 = 2082;
            v74 = v35;
            _os_log_impl(&dword_182FBE000, v33, v36, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v35);
          if (!v32)
            goto LABEL_62;
          goto LABEL_61;
        }
        if (v37)
        {
          *(_DWORD *)buf = 136446210;
          v72 = "nw_write_request_create";
          _os_log_impl(&dword_182FBE000, v33, v36, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = (id)gLogObj;
        v38 = type;
        if (os_log_type_enabled(v33, type))
        {
          *(_DWORD *)buf = 136446210;
          v72 = "nw_write_request_create";
          _os_log_impl(&dword_182FBE000, v33, v38, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_write_request) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v32)
    {
LABEL_62:

      goto LABEL_63;
    }
LABEL_61:
    free(v32);
    goto LABEL_62;
  }
LABEL_15:
  v17 = v11;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v18 = (id)gLogObj;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    v72 = "nw_write_request_create";
    _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_ERROR, "%{public}s Cannot send a reply for a protocol that does not support replies", buf, 0xCu);
  }

LABEL_18:
  v19 = 0;
LABEL_63:

  return v19;
}

void sub_18307EFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_18307F338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)NWConcrete_nw_write_request;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void *NWCreateDispatchDataFromNSData(void *a1, const char *a2)
{
  if (a1)
    return (void *)objc_msgSend(a1, "_createDispatchData");
  return a1;
}

void NWConnection.start(queue:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t (*v8)();
  NSObject *v9;
  __int128 v10;
  uint64_t (*v11[4])();

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 96));
  *(_BYTE *)(v4 + 93) = 1;
  v5 = *(void **)(v4 + 80);
  v6 = a1;

  *(_QWORD *)(v4 + 80) = a1;
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 96));
  os_unfair_lock_lock((os_unfair_lock_t)(v4 + 96));
  sub_183080854((uint64_t *)(v4 + 16), v11);
  os_unfair_lock_unlock((os_unfair_lock_t)(v4 + 96));
  if (v11[0])
  {
    v10 = *(_OWORD *)v11;
    v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = v10;
    v8 = sub_182FEDAC0;
  }
  else
  {
    v8 = 0;
    v7 = 0;
  }
  sub_183061488((uint64_t)v8);
  sub_183061488((uint64_t)v8);
  NWConnection.stateUpdateHandler.setter((uint64_t)v8, v7);
  sub_1830630AC((uint64_t)v8);
  sub_1830630AC((uint64_t)v8);
  v9 = *(NSObject **)(v2 + 16);
  nw_connection_set_queue(v9, v6);
  nw_connection_start(v9);
}

void nw_connection_set_queue(nw_connection_t connection, dispatch_queue_t queue)
{
  nw_connection_t v3;
  NSObject *v4;
  NSObject *v5;
  NSObject *v6;
  NSObject *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  char *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  _QWORD v22[6];
  char v23;
  os_log_type_t v24;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = connection;
  v4 = queue;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_connection_set_queue";
    v9 = (char *)_os_log_send_and_compose_impl();

    v24 = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v9, &v24, &v23))
      goto LABEL_38;
    if (v24 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_set_queue";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = v24;
      v16 = os_log_type_enabled(v10, v24);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_connection_set_queue";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v9)
          goto LABEL_4;
LABEL_39:
        free(v9);
        goto LABEL_4;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_set_queue";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v20 = v24;
      if (os_log_type_enabled(v10, v24))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_connection_set_queue";
        _os_log_impl(&dword_182FBE000, v10, v20, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    v22[0] = MEMORY[0x1E0C809B0];
    v22[1] = 3221225472;
    v22[2] = __nw_connection_set_queue_block_invoke;
    v22[3] = &unk_1E14ACE68;
    v6 = v3;
    v22[4] = v6;
    v7 = v5;
    v22[5] = v7;
    os_unfair_lock_lock((os_unfair_lock_t)&v3[17]);
    __nw_connection_set_queue_block_invoke((uint64_t)v22);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[17]);

    goto LABEL_4;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_connection_set_queue";
  v9 = (char *)_os_log_send_and_compose_impl();

  v24 = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v9, &v24, &v23))
    goto LABEL_38;
  if (v24 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v13 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_set_queue";
      _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null queue", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v10 = objc_claimAutoreleasedReturnValue();
    v21 = v24;
    if (os_log_type_enabled(v10, v24))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_set_queue";
      _os_log_impl(&dword_182FBE000, v10, v21, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v17 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  v18 = v24;
  v19 = os_log_type_enabled(v10, v24);
  if (!v17)
  {
    if (v19)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_connection_set_queue";
      _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null queue, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v19)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_connection_set_queue";
    v27 = 2082;
    v28 = v17;
    _os_log_impl(&dword_182FBE000, v10, v18, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v17);
  if (v9)
    goto LABEL_39;
LABEL_4:

}

void __nw_connection_set_queue_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  int v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  int v9;
  uint64_t v10;
  NSObject *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  int v19;
  os_log_type_t v20;
  int v21;
  int v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  int v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x10) != 0)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      if (!nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v4 = (id)gconnectionLogObj;
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        *(_DWORD *)buf = 136446466;
        v26 = "nw_connection_set_queue_block_invoke";
        v27 = 1024;
        v28 = v5;
        v6 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v23 = 0;
        if (!__nwlog_fault(v6, &type, &v23))
        {
LABEL_13:
          if (!v6)
            goto LABEL_15;
          goto LABEL_14;
        }
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v7 = (id)gconnectionLogObj;
          v8 = type;
          if (os_log_type_enabled(v7, type))
          {
            v9 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v26 = "nw_connection_set_queue_block_invoke";
            v27 = 1024;
            v28 = v9;
            _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s [C%u] Error in client: nw_connection_set_queue called after nw_connection_start", buf, 0x12u);
          }
LABEL_12:

          goto LABEL_13;
        }
        if (!v23)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v7 = (id)gconnectionLogObj;
          v20 = type;
          if (os_log_type_enabled(v7, type))
          {
            v21 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v26 = "nw_connection_set_queue_block_invoke";
            v27 = 1024;
            v28 = v21;
            _os_log_impl(&dword_182FBE000, v7, v20, "%{public}s [C%u] Error in client: nw_connection_set_queue called after nw_connection_start, backtrace limit exceeded", buf, 0x12u);
          }
          goto LABEL_12;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v7 = (id)gconnectionLogObj;
        v17 = type;
        v18 = os_log_type_enabled(v7, type);
        if (!backtrace_string)
        {
          if (v18)
          {
            v22 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
            *(_DWORD *)buf = 136446466;
            v26 = "nw_connection_set_queue_block_invoke";
            v27 = 1024;
            v28 = v22;
            _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s [C%u] Error in client: nw_connection_set_queue called after nw_connection_start, no backtrace", buf, 0x12u);
          }
          goto LABEL_12;
        }
        if (v18)
        {
          v19 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
          *(_DWORD *)buf = 136446722;
          v26 = "nw_connection_set_queue_block_invoke";
          v27 = 1024;
          v28 = v19;
          v29 = 2082;
          v30 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s [C%u] Error in client: nw_connection_set_queue called after nw_connection_start, dumping backtrace:%{public}s", buf, 0x1Cu);
        }

        free(backtrace_string);
        if (v6)
LABEL_14:
          free(v6);
      }
    }
  }
LABEL_15:
  if (!nw_context_is_inline(*(void **)(*(_QWORD *)(a1 + 32) + 24)))
  {
    v14 = a1 + 32;
    v13 = *(_QWORD *)(a1 + 32);
    v15 = *(id *)(v14 + 8);
    v11 = *(NSObject **)(v13 + 200);
    *(_QWORD *)(v13 + 200) = v15;
LABEL_23:

    return;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 16);
  if (v10 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v10 + 104)))
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v11 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
      *(_DWORD *)buf = 136446466;
      v26 = "nw_connection_set_queue_block_invoke";
      v27 = 1024;
      v28 = v12;
      _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Connection client queue will be ignored for inline contexts", buf, 0x12u);
    }
    goto LABEL_23;
  }
}

void nw_connection_start(nw_connection_t connection)
{
  nw_connection_t v1;
  char *v2;
  char *backtrace_string;
  NSObject *v4;
  int isa;
  const char *logging_description;
  qos_class_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[4];
  NSObject *v17;
  qos_class_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  _BYTE v22[10];
  _BYTE v23[10];
  __int16 v24;
  const char *v25;
  __int16 v26;
  char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = connection;
  if (v1)
  {
    if (_nw_signposts_once != -1)
      dispatch_once(&_nw_signposts_once, &__block_literal_global_230);
    if (_nw_signposts_enabled && kdebug_is_enabled())
      kdebug_trace();
    if (_os_feature_enabled_impl() && !nw_parameters_get_logging_disabled((uint64_t)v1[2].isa))
    {
      v2 = nw_parameters_copy_description_internal((NWConcrete_nw_parameters *)v1[2].isa, 1);
      backtrace_string = (char *)__nw_create_backtrace_string();
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        isa = (int)v1[56].isa;
        logging_description = nw_endpoint_get_logging_description(v1[1].isa);
        *(_DWORD *)buf = 67110402;
        *(_DWORD *)v22 = isa;
        *(_WORD *)&v22[4] = 1042;
        *(_DWORD *)&v22[6] = 16;
        *(_WORD *)v23 = 2098;
        *(_QWORD *)&v23[2] = (char *)v1 + 452;
        v24 = 2082;
        v25 = logging_description;
        v26 = 2082;
        v27 = v2;
        v28 = 2080;
        v29 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "[C%u %{public,uuid_t}.16P %{public}s %{public}s] started by:\n%s", buf, 0x36u);
      }

      if (v2)
        free(v2);
      if (backtrace_string)
        free(backtrace_string);
    }
    v7 = qos_class_self();
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 3221225472;
    v16[2] = __nw_connection_start_block_invoke;
    v16[3] = &unk_1E14AB378;
    v17 = v1;
    v18 = v7;
    nw_connection_async_if_needed(v17, v16);

    goto LABEL_18;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)v22 = "nw_connection_start";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v9, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v22 = "nw_connection_start";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v19)
    {
      v12 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (v12)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)v22 = "nw_connection_start";
          *(_WORD *)&v22[8] = 2082;
          *(_QWORD *)v23 = v12;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v12);
        goto LABEL_35;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v22 = "nw_connection_start";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)v22 = "nw_connection_start";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v9)
    free(v9);
LABEL_18:

}

void sub_183080270(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t NWConnection.stateUpdateHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  _QWORD *v8;
  void *v9;
  _QWORD v11[6];

  v5 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(v5 + 96));
  v6 = *(_QWORD *)(v5 + 16);
  sub_183061488(a1);
  sub_1830630AC(v6);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  LODWORD(v6) = *(unsigned __int8 *)(v5 + 93);
  os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 96));
  if ((_DWORD)v6 != 1)
    return sub_1830630AC(a1);
  v7 = *(NSObject **)(v2 + 16);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v2;
  v8[3] = a1;
  v8[4] = a2;
  v11[4] = sub_182FEDA1C;
  v11[5] = v8;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = sub_182FED9C4;
  v11[3] = &block_descriptor_15;
  v9 = _Block_copy(v11);
  swift_unknownObjectRetain();
  swift_retain();
  sub_183061488(a1);
  swift_release();
  nw_connection_set_state_changed_handler(v7, v9);
  sub_1830630AC(a1);
  _Block_release(v9);
  return swift_unknownObjectRelease();
}

void nw_connection_set_state_changed_handler(nw_connection_t connection, nw_connection_state_changed_handler_t handler)
{
  nw_connection_t v3;
  nw_connection_state_changed_handler_t v4;
  NSObject *v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[6];
  char v16;
  os_log_type_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = connection;
  v4 = handler;
  if (v3)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_set_state_changed_handler_block_invoke;
    v15[3] = &unk_1E14ACE18;
    v5 = v3;
    v15[4] = v5;
    v6 = v4;
    v15[5] = v6;
    os_unfair_lock_lock((os_unfair_lock_t)&v3[17]);
    __nw_connection_set_state_changed_handler_block_invoke((uint64_t)v15);
    os_unfair_lock_unlock((os_unfair_lock_t)&v3[17]);

    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_connection_set_state_changed_handler";
  v8 = (char *)_os_log_send_and_compose_impl();

  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v8, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v17;
      if (os_log_type_enabled(v9, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v17;
      v13 = os_log_type_enabled(v9, v17);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_connection_set_state_changed_handler";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v17;
      if (os_log_type_enabled(v9, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_state_changed_handler";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

void __nw_connection_set_state_changed_handler_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  void *v6;
  uint64_t v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v2 + 80) == 5)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v9 = 136446466;
        v10 = "nw_connection_set_state_changed_handler_block_invoke";
        v11 = 1024;
        v12 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Cannot set state changed handler after cancel", (uint8_t *)&v9, 0x12u);
      }

    }
  }
  else
  {
    v6 = _Block_copy(*(const void **)(a1 + 40));
    v7 = *(_QWORD *)(a1 + 32);
    v8 = *(void **)(v7 + 208);
    *(_QWORD *)(v7 + 208) = v6;

  }
}

uint64_t sub_183080854@<X0>(uint64_t *a1@<X0>, uint64_t (**a2)()@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v3 = *a1;
  v4 = a1[1];
  if (*a1)
  {
    v5 = swift_allocObject();
    *(_QWORD *)(v5 + 16) = v3;
    *(_QWORD *)(v5 + 24) = v4;
    v6 = sub_182FEDAC0;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  *a2 = v6;
  a2[1] = (uint64_t (*)())v5;
  return sub_183061488(v3);
}

void nw_connection_set_path_changed_handler(nw_connection_t connection, nw_connection_path_event_handler_t handler)
{
  NSObject *v3;
  nw_connection_path_event_handler_t v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  NSObject *v14;
  id v15;
  char v16;
  os_log_type_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = connection;
  v4 = handler;
  if (v3)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_set_path_changed_handler_block_invoke;
    v13[3] = &unk_1E14ACE18;
    v14 = v3;
    v15 = v4;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_connection_set_path_changed_handler";
  v6 = (char *)_os_log_send_and_compose_impl();

  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_path_changed_handler";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = v17;
      v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_connection_set_path_changed_handler";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_path_changed_handler";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_path_changed_handler";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_183080BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void nw_connection_set_cancel_handler(void *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  os_unfair_lock_s *v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  _QWORD v15[6];
  char v16;
  os_log_type_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v15[0] = MEMORY[0x1E0C809B0];
    v15[1] = 3221225472;
    v15[2] = __nw_connection_set_cancel_handler_block_invoke;
    v15[3] = &unk_1E14ACE18;
    v5 = v3;
    v15[4] = v5;
    v6 = v4;
    v15[5] = v6;
    os_unfair_lock_lock(v3 + 34);
    __nw_connection_set_cancel_handler_block_invoke((uint64_t)v15);
    os_unfair_lock_unlock(v3 + 34);

    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_connection_set_cancel_handler";
  v8 = (char *)_os_log_send_and_compose_impl();

  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v8, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = v17;
      if (os_log_type_enabled(v9, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_cancel_handler";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = v17;
      v13 = os_log_type_enabled(v9, v17);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_connection_set_cancel_handler";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_cancel_handler";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = v17;
      if (os_log_type_enabled(v9, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_cancel_handler";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

void __nw_connection_set_cancel_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 216);
  *(_QWORD *)(v3 + 216) = v2;

}

NWConcrete_nw_resolver_config *nw_resolver_config_create_with_dictionary(void *a1)
{
  id v1;
  void *v2;
  NWConcrete_nw_resolver_config *v3;
  OS_xpc_object *v4;
  NWConcrete_nw_resolver_config *v5;
  NWConcrete_nw_resolver_config *v6;
  OS_xpc_object *m_obj;
  OS_xpc_object *v8;
  OS_xpc_object *v9;
  unsigned __int8 *v10;
  const char *string;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  char *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  os_log_type_t v34;
  char v35;
  os_log_type_t v36[8];
  char v37;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  char *v42;
  uint64_t v43;

  v43 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_resolver_config_create_with_dictionary";
    v22 = (char *)_os_log_send_and_compose_impl();

    v36[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v22, v36, &type))
      goto LABEL_62;
    if (v36[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v24 = v36[0];
      if (os_log_type_enabled(v23, v36[0]))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_create_with_dictionary";
        _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null dictionary", buf, 0xCu);
      }
    }
    else if (type)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v28 = v36[0];
      v29 = os_log_type_enabled(v23, v36[0]);
      if (backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_resolver_config_create_with_dictionary";
          v41 = 2082;
          v42 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        if (!v22)
          goto LABEL_64;
        goto LABEL_63;
      }
      if (v29)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_create_with_dictionary";
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null dictionary, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v33 = v36[0];
      if (os_log_type_enabled(v23, v36[0]))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_create_with_dictionary";
        _os_log_impl(&dword_182FBE000, v23, v33, "%{public}s called with null dictionary, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_61;
  }
  if (object_getClass(v1) != (Class)MEMORY[0x1E0C812F8])
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v40 = "nw_resolver_config_create_with_dictionary";
    v22 = (char *)_os_log_send_and_compose_impl();

    v36[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v22, v36, &type))
      goto LABEL_62;
    if (v36[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v26 = v36[0];
      if (os_log_type_enabled(v23, v36[0]))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_create_with_dictionary";
        _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary))", buf, 0xCu);
      }
    }
    else if (type)
    {
      v30 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v31 = v36[0];
      v32 = os_log_type_enabled(v23, v36[0]);
      if (v30)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v40 = "nw_resolver_config_create_with_dictionary";
          v41 = 2082;
          v42 = v30;
          _os_log_impl(&dword_182FBE000, v23, v31, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v30);
LABEL_62:
        if (!v22)
        {
LABEL_64:
          v3 = 0;
          goto LABEL_28;
        }
LABEL_63:
        free(v22);
        goto LABEL_64;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_create_with_dictionary";
        _os_log_impl(&dword_182FBE000, v23, v31, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v34 = v36[0];
      if (os_log_type_enabled(v23, v36[0]))
      {
        *(_DWORD *)buf = 136446210;
        v40 = "nw_resolver_config_create_with_dictionary";
        _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null (xpc_get_type(dictionary) == (&_xpc_type_dictionary)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  v3 = objc_alloc_init(NWConcrete_nw_resolver_config);
  *(_QWORD *)v36 = v3;
  v37 = -1;
  if (v3)
  {
    v4 = v2;
    v5 = v3;
    v6 = v5;
    m_obj = v5->dictionary.m_obj;
    if ((*((_BYTE *)&v5->dictionary + 8) & 1) != 0 && m_obj)
    {
      v5->dictionary.m_obj = 0;

      m_obj = v6->dictionary.m_obj;
    }
    v6->dictionary.m_obj = 0;

    v8 = v6->dictionary.m_obj;
    v6->dictionary.m_obj = v4;

    *((_BYTE *)&v6->dictionary + 8) |= 1u;
    v9 = v6->dictionary.m_obj;
    v10 = v6;
    string = xpc_dictionary_get_string(v9, "Identifier");

    if (string)
      uuid_parse(string, v10 + 24);
    goto LABEL_28;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v12 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v40 = "nw_resolver_config_create_with_dictionary";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (!__nwlog_fault(v13, &type, &v35))
    goto LABEL_26;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v15 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_resolver_config_create_with_dictionary";
      _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s [nw_resolver_config init] failed", buf, 0xCu);
    }
LABEL_25:

LABEL_26:
    if (!v13)
      goto LABEL_28;
LABEL_27:
    free(v13);
    goto LABEL_28;
  }
  if (!v35)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v14 = (id)gLogObj;
    v19 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_resolver_config_create_with_dictionary";
      _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s [nw_resolver_config init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_25;
  }
  v16 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v14 = (id)gLogObj;
  v17 = type;
  v18 = os_log_type_enabled(v14, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v40 = "nw_resolver_config_create_with_dictionary";
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s [nw_resolver_config init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_25;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v40 = "nw_resolver_config_create_with_dictionary";
    v41 = 2082;
    v42 = v16;
    _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s [nw_resolver_config init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v13)
    goto LABEL_27;
LABEL_28:

  return v3;
}

void sub_1830816C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  void *v6;
  va_list va;

  va_start(va, a6);
  nw::retained_ptr<void({block_pointer} {__strong})(void)>::~retained_ptr((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1830819A4(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    *(_BYTE *)(result + 16) = 0;
  }
  return result;
}

nw_multipath_service_t nw_parameters_get_multipath_service(nw_parameters_t parameters)
{
  nw_parameters_t v1;
  nw_parameters_t v2;
  nw_multipath_service_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = parameters;
  v2 = v1;
  if (v1)
  {
    v3 = *(_DWORD *)((char *)v1[13].isa + 103);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_multipath_service";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_multipath_service";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_multipath_service";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = nw_multipath_service_disabled;
LABEL_3:

  return v3;
}

uint64_t validate_tcp_cksum(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int *a4, unsigned int a5, unsigned int a6, int a7)
{
  unsigned int v8;
  int v14;
  int internet_checksum_handler;
  int v16;
  int v17;
  unsigned int v18;
  NSObject *v19;
  unsigned int v20;
  int v21;
  const char *v22;
  int v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  _BOOL8 v32;
  NSObject *v33;
  BOOL v34;
  int v35;
  const char *v36;
  const char *v37;
  unsigned int v38;
  unsigned int v39;
  const char *v40;
  const char *v41;
  NSObject *v42;
  const char *v43;
  NSObject *v44;
  os_log_type_t v45;
  uint32_t v46;
  int v47;
  unint64_t v48;
  int v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  char *backtrace_string;
  NSObject *v55;
  _BOOL4 v56;
  NSObject *v57;
  char v58;
  uint64_t v59;
  unsigned int v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  unsigned int v64;
  const char *v65;
  __int16 v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  const char *v70;
  const char *v71;
  unsigned int v72;
  unsigned int v73;
  const char *v74;
  const char *v75;
  const char *v76;
  unsigned int v77;
  char *v78;
  _BOOL4 v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  const char *v84;
  unsigned int v85;
  unsigned int v86;
  const char *v87;
  unsigned int v88;
  int v90;
  unsigned __int16 v91;
  unsigned __int16 v92;
  unsigned __int8 v93;
  uint8_t buf[4];
  const char *v95;
  __int16 v96;
  _BYTE v97[10];
  _BYTE v98[6];
  const char *v99;
  _BYTE v100[6];
  _BYTE v101[10];
  __int16 v102;
  void *v103;
  __int16 v104;
  _BYTE v105[10];
  _BYTE v106[6];
  int v107;
  char v108[46];
  char v109[46];
  uint64_t v110;

  v8 = a6;
  v110 = *MEMORY[0x1E0C80C00];
  v93 = 0;
  v92 = 0;
  v91 = 0;
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v95 = "__nw_frame_get_internet_checksum";
    v50 = (char *)_os_log_send_and_compose_impl();
    v109[0] = 16;
    v108[0] = 0;
    if (__nwlog_fault(v50, v109, v108))
    {
      if (v109[0] == 17)
      {
        v51 = __nwlog_obj();
        v52 = v109[0];
        if (os_log_type_enabled(v51, (os_log_type_t)v109[0]))
        {
          *(_DWORD *)buf = 136446210;
          v95 = "__nw_frame_get_internet_checksum";
          v53 = "%{public}s called with null frame";
LABEL_67:
          v57 = v51;
LABEL_68:
          _os_log_impl(&dword_182FBE000, v57, v52, v53, buf, 0xCu);
        }
      }
      else if (v108[0])
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v55 = __nwlog_obj();
        v52 = v109[0];
        v56 = os_log_type_enabled(v55, (os_log_type_t)v109[0]);
        if (backtrace_string)
        {
          if (v56)
          {
            *(_DWORD *)buf = 136446466;
            v95 = "__nw_frame_get_internet_checksum";
            v96 = 2082;
            *(_QWORD *)v97 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v55, v52, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_69;
        }
        if (v56)
        {
          *(_DWORD *)buf = 136446210;
          v95 = "__nw_frame_get_internet_checksum";
          v53 = "%{public}s called with null frame, no backtrace";
          v57 = v55;
          goto LABEL_68;
        }
      }
      else
      {
        v51 = __nwlog_obj();
        v52 = v109[0];
        if (os_log_type_enabled(v51, (os_log_type_t)v109[0]))
        {
          *(_DWORD *)buf = 136446210;
          v95 = "__nw_frame_get_internet_checksum";
          v53 = "%{public}s called with null frame, backtrace limit exceeded";
          goto LABEL_67;
        }
      }
    }
LABEL_69:
    if (v50)
      free(v50);
    v14 = 22;
    v8 = a6;
    goto LABEL_72;
  }
  v14 = 45;
  if ((*(_WORD *)(a1 + 204) & 0x100) == 0 || !g_channel_get_internet_checksum_handler)
  {
LABEL_72:
    v16 = 0;
    v90 = v14;
    goto LABEL_73;
  }
  internet_checksum_handler = g_channel_get_internet_checksum_handler(a1, &v93, &v92, &v91);
  v90 = internet_checksum_handler;
  if (internet_checksum_handler)
  {
    v14 = internet_checksum_handler;
    v16 = 0;
    goto LABEL_73;
  }
  v17 = *(unsigned __int16 *)(a1 + 204);
  v18 = v17 | (*(unsigned __int8 *)(a1 + 206) << 16);
  if ((v17 & 0x800) != 0)
  {
    if ((v17 & 0x1000) != 0)
    {
      v31 = v8;
      v32 = v91 == 0xFFFF;
      if (v91 != 0xFFFF)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v33 = gLogObj;
        if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
        {
          v34 = a7 == 0;
          if (a7)
            v35 = 30;
          else
            v35 = 2;
          if (v34)
            v36 = "IPv4";
          else
            v36 = "IPv6";
          v37 = inet_ntop(v35, a3, v109, 0x2Eu);
          v38 = __rev16(a5);
          v39 = __rev16(v31);
          v40 = inet_ntop(v35, a4, v108, 0x2Eu);
          v41 = "partial";
          if (!v93)
            v41 = "";
          *(_DWORD *)buf = 136448515;
          v95 = "validate_tcp_cksum";
          v96 = 2085;
          *(_QWORD *)v97 = v37;
          *(_WORD *)&v97[8] = 1024;
          *(_DWORD *)v98 = v38;
          *(_WORD *)&v98[4] = 2085;
          v99 = v40;
          *(_WORD *)v100 = 1024;
          *(_DWORD *)&v100[2] = v39;
          *(_WORD *)v101 = 2082;
          *(_QWORD *)&v101[2] = v36;
          v102 = 2082;
          v103 = (void *)v41;
          v104 = 1024;
          *(_DWORD *)v105 = v92;
          *(_WORD *)&v105[4] = 1024;
          *(_DWORD *)&v105[6] = v91;
          *(_WORD *)v106 = 1024;
          *(_DWORD *)&v106[2] = a2;
          _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s TCP %{sensitive}s:%d -> %{sensitive}s:%d invalid %{public}s-TCP offload %{public}s start %u checksum 0x%x tlen %u", buf, 0x52u);
        }
      }
      return v32;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      v20 = v8;
      if (a7)
        v21 = 30;
      else
        v21 = 2;
      v22 = "IPv4";
      if (a7)
        v22 = "IPv6";
      v87 = v22;
      v84 = inet_ntop(v21, a3, v109, 0x2Eu);
      v85 = __rev16(a5);
      v86 = __rev16(v20);
      v23 = v21;
      v8 = v20;
      v24 = inet_ntop(v23, a4, v108, 0x2Eu);
      v25 = "partial";
      if (!v93)
        v25 = "";
      *(_DWORD *)buf = 136448515;
      v95 = "validate_tcp_cksum";
      v96 = 2085;
      *(_QWORD *)v97 = v84;
      *(_WORD *)&v97[8] = 1024;
      *(_DWORD *)v98 = v85;
      *(_WORD *)&v98[4] = 2085;
      v99 = v24;
      *(_WORD *)v100 = 1024;
      *(_DWORD *)&v100[2] = v86;
      *(_WORD *)v101 = 2082;
      *(_QWORD *)&v101[2] = v87;
      v102 = 2082;
      v103 = (void *)v25;
      v104 = 1024;
      *(_DWORD *)v105 = v92;
      *(_WORD *)&v105[4] = 1024;
      *(_DWORD *)&v105[6] = v91;
      *(_WORD *)v106 = 1024;
      *(_DWORD *)&v106[2] = a2;
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s TCP %{sensitive}s:%d -> %{sensitive}s:%d not final %{public}s-TCP offload %{public}s start %u checksum 0x%x tlen %u", buf, 0x52u);
    }
  }
  v16 = (v18 >> 11) & 1;
  if (v93)
  {
    v88 = v8;
    if (((*(_WORD *)(a1 + 204) & 0x100) == 0
       || !g_channel_check_validity
       || g_channel_check_validity(a1, *(_QWORD *)(a1 + 88)))
      && (v26 = *(_QWORD *)(a1 + 112)) != 0
      && (v27 = *(_DWORD *)(a1 + 48)) != 0)
    {
      v28 = *(_QWORD *)(a1 + 112);
      if ((*(_WORD *)(a1 + 204) & 0x100) == 0
        || (v28 = *(_QWORD *)(a1 + 112), !g_channel_check_validity)
        || g_channel_check_validity(a1, *(_QWORD *)(a1 + 88)) && (v28 = *(_QWORD *)(a1 + 112)) != 0)
      {
        v29 = (unsigned __int16)(v28 + *(_WORD *)(a1 + 56) - v26);
        if ((a7 & 1) != 0 || !v92 || v92 == v29)
        {
          v47 = v29 + a2;
          if (a7)
          {
            v30 = v91;
            if (v92 == v29 && v27 == v47)
            {
              v8 = v88;
              goto LABEL_84;
            }
          }
          else
          {
            v30 = v91;
            if (v27 == v47)
            {
              v8 = v88;
              goto LABEL_53;
            }
          }
        }
        else
        {
          v30 = v91;
        }
        LOWORD(v30) = in_adjust_cksum(v26, v27, v92, v29, a2, v30);
        v8 = v88;
        if (!a7)
          goto LABEL_53;
LABEL_84:
        v49 = in6_pseudo((unsigned __int16 *)a3, (unsigned __int16 *)a4, bswap32(a2 + 6) + (unsigned __int16)v30);
        goto LABEL_85;
      }
      v42 = __nwlog_obj();
      if (!os_log_type_enabled(v42, OS_LOG_TYPE_INFO))
        return 0;
      *(_DWORD *)buf = 136446210;
      v95 = "validate_tcp_cksum";
      v43 = "%{public}s Frame buffer no longer valid for TCP";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v42 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return 0;
      *(_DWORD *)buf = 136446210;
      v95 = "validate_tcp_cksum";
      v43 = "%{public}s Frame buffer no longer valid";
    }
    v44 = v42;
    v45 = OS_LOG_TYPE_INFO;
    v46 = 12;
LABEL_100:
    _os_log_impl(&dword_182FBE000, v44, v45, v43, buf, v46);
    return 0;
  }
  v14 = 0;
LABEL_73:
  if (!*(_QWORD *)(a1 + 32))
  {
    v90 = 0;
    v66 = inet_cksum(a1, 0, a2, &v90);
    if (!v90)
    {
      LOWORD(v30) = ~v66;
      if (a7)
        goto LABEL_84;
LABEL_53:
      v48 = *a4 + (unint64_t)*a3 + bswap32(a2 + 6) + (unsigned __int16)v30;
      LODWORD(v48) = ((WORD1(v48) + (unsigned __int16)v48 + HIDWORD(v48)) >> 16)
                   + (unsigned __int16)(WORD1(v48) + v48 + WORD2(v48));
      v49 = (unsigned __int16)(((WORD1(v48) + (unsigned __int16)v48) >> 16)
                             + WORD1(v48)
                             + v48
                             + ((((WORD1(v48) + (unsigned __int16)v48) >> 16)
                               + (unsigned __int16)(WORD1(v48) + v48)) >> 16));
LABEL_85:
      v91 = ~(_WORD)v49;
      if (v49 == 0xFFFF)
        return 1;
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v67 = gLogObj;
      if (!os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_INFO))
        return 0;
      v68 = a7 == 0;
      if (a7)
        v69 = 30;
      else
        v69 = 2;
      if (v68)
        v70 = "IPv4";
      else
        v70 = "IPv6";
      v71 = inet_ntop(v69, a3, v109, 0x2Eu);
      v72 = __rev16(a5);
      v73 = __rev16(v8);
      v74 = inet_ntop(v69, a4, v108, 0x2Eu);
      v75 = "";
      v95 = "validate_tcp_cksum";
      v76 = "-fallback";
      *(_DWORD *)buf = 136448515;
      if (!v16)
        v76 = "";
      v96 = 2085;
      *(_QWORD *)v97 = v71;
      if (v93)
        v75 = "partial";
      *(_WORD *)&v97[8] = 1024;
      *(_DWORD *)v98 = v72;
      *(_WORD *)&v98[4] = 2085;
      v99 = v74;
      *(_WORD *)v100 = 1024;
      *(_DWORD *)&v100[2] = v73;
      *(_WORD *)v101 = 2082;
      *(_QWORD *)&v101[2] = v70;
      v102 = 2082;
      v103 = (void *)v76;
      v104 = 2082;
      *(_QWORD *)v105 = v75;
      *(_WORD *)&v105[8] = 1024;
      *(_DWORD *)v106 = v91;
      *(_WORD *)&v106[4] = 1024;
      v107 = a2;
      v43 = "%{public}s TCP %{sensitive}s:%d -> %{sensitive}s:%d incorrect %{public}s-TCP manual%{public}s %{public}s che"
            "cksum 0x%x tlen %u";
      v44 = v67;
      v45 = OS_LOG_TYPE_INFO;
      v46 = 86;
      goto LABEL_100;
    }
    return 0;
  }
  v58 = 1;
  if ((*(_WORD *)(a1 + 204) & 0x100) != 0 && g_channel_check_validity)
    v58 = g_channel_check_validity(a1, *(_QWORD *)(a1 + 88));
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v59 = gLogObj;
  if ((v58 & 1) != 0)
  {
    v60 = *(unsigned __int16 *)(a1 + 204);
    *(_DWORD *)buf = 136448002;
    v95 = "validate_tcp_cksum";
    v96 = 1024;
    *(_DWORD *)v97 = (v60 >> 8) & 1;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)&v97[6] = (v60 >> 6) & 1;
    *(_WORD *)v98 = 1024;
    *(_DWORD *)&v98[2] = (v60 >> 11) & 1;
    LOWORD(v99) = 1024;
    *(_DWORD *)((char *)&v99 + 2) = (v60 >> 12) & 1;
    HIWORD(v99) = 1024;
    *(_DWORD *)v100 = v93;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)v101 = v91;
    *(_WORD *)&v101[4] = 1024;
    *(_DWORD *)&v101[6] = v14;
    v61 = (char *)_os_log_send_and_compose_impl();
    v109[0] = 16;
    v108[0] = 0;
    if (!__nwlog_fault(v61, v109, v108))
      goto LABEL_112;
    if (v109[0] == 17)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v62 = gLogObj;
      v63 = v109[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v109[0]))
        goto LABEL_112;
      v64 = *(unsigned __int16 *)(a1 + 204);
      *(_DWORD *)buf = 136448002;
      v95 = "validate_tcp_cksum";
      v96 = 1024;
      *(_DWORD *)v97 = (v64 >> 8) & 1;
      *(_WORD *)&v97[4] = 1024;
      *(_DWORD *)&v97[6] = (v64 >> 6) & 1;
      *(_WORD *)v98 = 1024;
      *(_DWORD *)&v98[2] = (v64 >> 11) & 1;
      LOWORD(v99) = 1024;
      *(_DWORD *)((char *)&v99 + 2) = (v64 >> 12) & 1;
      HIWORD(v99) = 1024;
      *(_DWORD *)v100 = v93;
      *(_WORD *)&v100[4] = 1024;
      *(_DWORD *)v101 = v91;
      *(_WORD *)&v101[4] = 1024;
      *(_DWORD *)&v101[6] = v14;
      v65 = "%{public}s super packet checksum not validated or offloaded: channel_frame: %d packet_chain_member: %d csum_"
            "data_valid: %d csum_pseudo_hdr %d partial %u tcp_sum %x error: %d";
    }
    else if (v108[0])
    {
      v78 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v62 = gLogObj;
      v63 = v109[0];
      v79 = os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v109[0]);
      if (v78)
      {
        if (v79)
        {
          v80 = *(unsigned __int16 *)(a1 + 204);
          *(_DWORD *)buf = 136448258;
          v95 = "validate_tcp_cksum";
          v96 = 1024;
          *(_DWORD *)v97 = (v80 >> 8) & 1;
          *(_WORD *)&v97[4] = 1024;
          *(_DWORD *)&v97[6] = (v80 >> 6) & 1;
          *(_WORD *)v98 = 1024;
          *(_DWORD *)&v98[2] = (v80 >> 11) & 1;
          LOWORD(v99) = 1024;
          *(_DWORD *)((char *)&v99 + 2) = (v80 >> 12) & 1;
          HIWORD(v99) = 1024;
          *(_DWORD *)v100 = v93;
          *(_WORD *)&v100[4] = 1024;
          *(_DWORD *)v101 = v91;
          *(_WORD *)&v101[4] = 1024;
          *(_DWORD *)&v101[6] = v14;
          v102 = 2082;
          v103 = v78;
          _os_log_impl(&dword_182FBE000, v62, v63, "%{public}s super packet checksum not validated or offloaded: channel_frame: %d packet_chain_member: %d csum_data_valid: %d csum_pseudo_hdr %d partial %u tcp_sum %x error: %d, dumping backtrace:%{public}s", buf, 0x40u);
        }
        free(v78);
        goto LABEL_112;
      }
      if (!v79)
      {
LABEL_112:
        if (v61)
          free(v61);
        return 1;
      }
      v82 = *(unsigned __int16 *)(a1 + 204);
      *(_DWORD *)buf = 136448002;
      v95 = "validate_tcp_cksum";
      v96 = 1024;
      *(_DWORD *)v97 = (v82 >> 8) & 1;
      *(_WORD *)&v97[4] = 1024;
      *(_DWORD *)&v97[6] = (v82 >> 6) & 1;
      *(_WORD *)v98 = 1024;
      *(_DWORD *)&v98[2] = (v82 >> 11) & 1;
      LOWORD(v99) = 1024;
      *(_DWORD *)((char *)&v99 + 2) = (v82 >> 12) & 1;
      HIWORD(v99) = 1024;
      *(_DWORD *)v100 = v93;
      *(_WORD *)&v100[4] = 1024;
      *(_DWORD *)v101 = v91;
      *(_WORD *)&v101[4] = 1024;
      *(_DWORD *)&v101[6] = v14;
      v65 = "%{public}s super packet checksum not validated or offloaded: channel_frame: %d packet_chain_member: %d csum_"
            "data_valid: %d csum_pseudo_hdr %d partial %u tcp_sum %x error: %d, no backtrace";
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v62 = gLogObj;
      v63 = v109[0];
      if (!os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)v109[0]))
        goto LABEL_112;
      v81 = *(unsigned __int16 *)(a1 + 204);
      *(_DWORD *)buf = 136448002;
      v95 = "validate_tcp_cksum";
      v96 = 1024;
      *(_DWORD *)v97 = (v81 >> 8) & 1;
      *(_WORD *)&v97[4] = 1024;
      *(_DWORD *)&v97[6] = (v81 >> 6) & 1;
      *(_WORD *)v98 = 1024;
      *(_DWORD *)&v98[2] = (v81 >> 11) & 1;
      LOWORD(v99) = 1024;
      *(_DWORD *)((char *)&v99 + 2) = (v81 >> 12) & 1;
      HIWORD(v99) = 1024;
      *(_DWORD *)v100 = v93;
      *(_WORD *)&v100[4] = 1024;
      *(_DWORD *)v101 = v91;
      *(_WORD *)&v101[4] = 1024;
      *(_DWORD *)&v101[6] = v14;
      v65 = "%{public}s super packet checksum not validated or offloaded: channel_frame: %d packet_chain_member: %d csum_"
            "data_valid: %d csum_pseudo_hdr %d partial %u tcp_sum %x error: %d, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v62, v63, v65, buf, 0x36u);
    goto LABEL_112;
  }
  v32 = 0;
  if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEFAULT))
  {
    v77 = *(unsigned __int16 *)(a1 + 204);
    *(_DWORD *)buf = 136448002;
    v95 = "validate_tcp_cksum";
    v96 = 1024;
    *(_DWORD *)v97 = (v77 >> 8) & 1;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)&v97[6] = (v77 >> 6) & 1;
    *(_WORD *)v98 = 1024;
    *(_DWORD *)&v98[2] = (v77 >> 11) & 1;
    LOWORD(v99) = 1024;
    *(_DWORD *)((char *)&v99 + 2) = (v77 >> 12) & 1;
    HIWORD(v99) = 1024;
    *(_DWORD *)v100 = v93;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)v101 = v91;
    *(_WORD *)&v101[4] = 1024;
    *(_DWORD *)&v101[6] = v14;
    v43 = "%{public}s super packet invalid, channel_frame: %d packet_chain_member: %u csum_data_valid: %u csum_pseudo_hdr"
          " %u partial %u tcp_sum %x error: %d";
    v44 = v59;
    v45 = OS_LOG_TYPE_DEFAULT;
    v46 = 54;
    goto LABEL_100;
  }
  return v32;
}

void *nw_frame_copy_metadata_for_protocol(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  void *v5;
  id *v6;
  id v7;
  _BOOL4 is_equal_unsafe;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  const char *v13;
  char *backtrace_string;
  _BOOL4 v15;
  char *v16;
  _BOOL4 v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "__nw_frame_copy_metadata_for_protocol";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v21 = "__nw_frame_copy_metadata_for_protocol";
      v13 = "%{public}s called with null frame";
      goto LABEL_39;
    }
    if (!v18)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v21 = "__nw_frame_copy_metadata_for_protocol";
      v13 = "%{public}s called with null frame, backtrace limit exceeded";
      goto LABEL_39;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v15 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (!v15)
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v21 = "__nw_frame_copy_metadata_for_protocol";
      v13 = "%{public}s called with null frame, no backtrace";
      goto LABEL_39;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v21 = "__nw_frame_copy_metadata_for_protocol";
      v22 = 2082;
      v23 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_40:
    if (!v10)
      return 0;
LABEL_41:
    free(v10);
    return 0;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v21 = "__nw_frame_copy_metadata_for_protocol";
    v10 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (!__nwlog_fault(v10, &type, &v18))
      goto LABEL_40;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v21 = "__nw_frame_copy_metadata_for_protocol";
      v13 = "%{public}s called with null definition";
      goto LABEL_39;
    }
    if (!v18)
    {
      v11 = __nwlog_obj();
      v12 = type;
      if (!os_log_type_enabled(v11, type))
        goto LABEL_40;
      *(_DWORD *)buf = 136446210;
      v21 = "__nw_frame_copy_metadata_for_protocol";
      v13 = "%{public}s called with null definition, backtrace limit exceeded";
      goto LABEL_39;
    }
    v16 = (char *)__nw_create_backtrace_string();
    v11 = __nwlog_obj();
    v12 = type;
    v17 = os_log_type_enabled(v11, type);
    if (v16)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v21 = "__nw_frame_copy_metadata_for_protocol";
        v22 = 2082;
        v23 = v16;
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v16);
      if (!v10)
        return 0;
      goto LABEL_41;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v21 = "__nw_frame_copy_metadata_for_protocol";
      v13 = "%{public}s called with null definition, no backtrace";
LABEL_39:
      _os_log_impl(&dword_182FBE000, v11, v12, v13, buf, 0xCu);
      goto LABEL_40;
    }
    goto LABEL_40;
  }
  v3 = *(_QWORD **)(a1 + 64);
  if (!v3)
    return 0;
  while (1)
  {
    v5 = (void *)v3[6];
    if (v5)
    {
      v6 = v5;
      v7 = v6[1];

      is_equal_unsafe = nw_protocol_definition_is_equal_unsafe(a2, (uint64_t)v7);
      if (v7)
        os_release(v7);
      if (is_equal_unsafe)
        break;
    }
    v3 = (_QWORD *)*v3;
    if (!v3)
      return 0;
  }
  v9 = (void *)v3[6];
  if (!v9)
    return 0;
  return os_retain(v9);
}

uint64_t nw_frame_is_metadata_complete(uint64_t a1)
{
  uint64_t v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *backtrace_string;
  _BOOL4 v8;
  char v9;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v12;
  __int16 v13;
  char *v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v12 = "__nw_frame_is_metadata_complete";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v9 = 0;
    if (!__nwlog_fault(v3, &type, &v9))
      goto LABEL_18;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v12 = "__nw_frame_is_metadata_complete";
      v6 = "%{public}s called with null frame";
    }
    else if (v9)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v8 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v8)
        {
          *(_DWORD *)buf = 136446466;
          v12 = "__nw_frame_is_metadata_complete";
          v13 = 2082;
          v14 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_18;
      }
      if (!v8)
      {
LABEL_18:
        if (v3)
          free(v3);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v12 = "__nw_frame_is_metadata_complete";
      v6 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_18;
      *(_DWORD *)buf = 136446210;
      v12 = "__nw_frame_is_metadata_complete";
      v6 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
    goto LABEL_18;
  }
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
    return (*(unsigned __int8 *)(v1 + 66) >> 6) & 1;
  return 0;
}

uint64_t nw_connection_get_privacy_stance(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  int v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v19 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_get_privacy_stance_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v15 = buf;
    v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_get_privacy_stance_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_get_privacy_stance";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_get_privacy_stance";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_get_privacy_stance";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_get_privacy_stance";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_get_privacy_stance";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_connection_get_privacy_stance_block_invoke(uint64_t result)
{
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_DWORD *)(*(_QWORD *)(result + 32) + 504);
  return result;
}

void nw_connection_set_alternate_path_state_handler(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  id v14;
  id v15;
  char v16;
  os_log_type_t v17;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_set_alternate_path_state_handler_block_invoke;
    v13[3] = &unk_1E14ACE18;
    v14 = v3;
    v15 = v4;
    nw_connection_async_if_needed(v14, v13);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_connection_set_alternate_path_state_handler";
  v6 = (char *)_os_log_send_and_compose_impl();

  v17 = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &v17, &v16))
  {
    if (v17 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_alternate_path_state_handler";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = v17;
      v11 = os_log_type_enabled(v7, v17);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_connection_set_alternate_path_state_handler";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_alternate_path_state_handler";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = v17;
      if (os_log_type_enabled(v7, v17))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_connection_set_alternate_path_state_handler";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_18308373C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void __nw_connection_set_alternate_path_state_handler_block_invoke(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  void *v4;

  v2 = _Block_copy(*(const void **)(a1 + 40));
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(void **)(v3 + 248);
  *(_QWORD *)(v3 + 248) = v2;

}

void nw_context_set_privacy_level(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    nw_context_set_privacy_level_internal(v3, a2, a2 == 4);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_context_set_privacy_level";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_context_set_privacy_level";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_context_set_privacy_level";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_context_set_privacy_level";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_context_set_privacy_level";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_183083A34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183083AB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_resolver_config_get_class(void *a1)
{
  id v1;
  void *v2;
  os_unfair_lock_s *v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  _QWORD v14[4];
  os_unfair_lock_s *v15;
  _BYTE *v16;
  char v17;
  os_log_type_t type;
  _BYTE buf[24];
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v20 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 3221225472;
    v14[2] = __nw_resolver_config_get_class_block_invoke;
    v14[3] = &unk_1E14ACE40;
    v16 = buf;
    v15 = (os_unfair_lock_s *)v1;
    v3 = v15 + 22;
    os_unfair_lock_lock(v15 + 22);
    __nw_resolver_config_get_class_block_invoke((uint64_t)v14);
    os_unfair_lock_unlock(v3);
    v4 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_resolver_config_get_class";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v7, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_class";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null config", buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_resolver_config_get_class";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_class";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null config, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_resolver_config_get_class";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null config, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_3:

  return v4;
}

void sub_183083DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  va_list va;

  va_start(va, a13);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void __nw_resolver_config_get_class_block_invoke(uint64_t a1)
{
  id v2;

  v2 = *(id *)(*(_QWORD *)(a1 + 32) + 8);
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = xpc_dictionary_get_int64(v2, "Class");

}

void sub_183083E5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_183083E70(uint64_t a1, NSObject **a2, uint64_t *a3)
{
  NSObject *v4;
  uint64_t v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;

  v4 = *a2;
  type metadata accessor for NWConnection.ContentContext();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 40) = 0;
  v6 = swift_unknownObjectRetain_n();
  *(_BYTE *)(v5 + 64) = nw_content_context_get_is_final(v6);
  nw_content_context_get_identifier(v4);
  v7 = sub_183B91800();
  v9 = v8;
  result = swift_unknownObjectRelease();
  *(_QWORD *)(v5 + 24) = v7;
  *(_QWORD *)(v5 + 32) = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_183083EF8()
{
  uint64_t v0;
  uint64_t (*v1)(_BYTE *);
  NSObject *v2;
  _BYTE v4[8];

  v1 = *(uint64_t (**)(_BYTE *))(v0 + 16);
  v2 = swift_unknownObjectRetain();
  sub_1830840B4(v2, (uint64_t)v4);
  return v1(v4);
}

uint64_t sub_183083F30(uint64_t a1)
{
  uint64_t v1;

  return sub_1832D47DC(a1, *(uint64_t (**)(_BYTE *))(v1 + 16));
}

void sub_183083F3C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v9)(void *, uint64_t, uint64_t, uint64_t);
  id v10;

  v9 = *(void (**)(void *, uint64_t, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v10 = a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  v9(a2, a3, a4, a5);
  swift_release();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

}

uint64_t sub_183083FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_1832D4380(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24));
}

uint64_t sub_183083FE0(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;

  return sub_183083FF8(a1, a2, a3, a4, *(void (**)(uint64_t, unint64_t, _QWORD *, _QWORD, _BYTE *))(v4 + 16));
}

uint64_t sub_183083FF8(void *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t, unint64_t, _QWORD *, _QWORD, _BYTE *))
{
  void *v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *v12;
  _QWORD *v13;
  NSObject *v14;
  _BYTE v16[8];

  v7 = NWCreateNSDataFromDispatchData(a1);
  if (v7)
  {
    v8 = v7;
    v9 = sub_183B91428();
    v11 = v10;

  }
  else
  {
    v9 = 0;
    v11 = 0xF000000000000000;
  }
  v12 = swift_unknownObjectRetain();
  v13 = sub_1830841B8(v12);
  v14 = swift_unknownObjectRetain();
  sub_1830840B4(v14, (uint64_t)v16);
  a5(v9, v11, v13, a3 & 1, v16);
  swift_release();
  return sub_183084848(v9, v11);
}

NSObject *sub_1830840B4@<X0>(NSObject *result@<X0>, uint64_t a2@<X8>)
{
  NSObject *v3;
  nw_error_domain_t error_domain;
  uint64_t v5;
  uint64_t v6;
  unsigned int error_code;
  unsigned int v8;

  if (result)
  {
    v3 = result;
    error_domain = nw_error_get_error_domain(result);
    switch(error_domain)
    {
      case nw_error_domain_tls:
        error_code = nw_error_get_error_code(v3);
        result = swift_unknownObjectRelease();
        v6 = error_code | 0x200000000;
        break;
      case nw_error_domain_dns:
        v8 = nw_error_get_error_code(v3);
        result = swift_unknownObjectRelease();
        v6 = v8 | 0x100000000;
        break;
      case nw_error_domain_posix:
        nw_error_get_error_code(v3);
        v5 = sub_183B915E4();
        result = swift_unknownObjectRelease();
        v6 = 22;
        if ((v5 & 0x100000000) == 0)
          v6 = v5;
        break;
      default:
        result = swift_unknownObjectRelease();
        v6 = 22;
        break;
    }
  }
  else
  {
    v6 = 0xFF00000000;
  }
  *(_DWORD *)a2 = v6;
  *(_BYTE *)(a2 + 4) = BYTE4(v6);
  return result;
}

void *NWCreateNSDataFromDispatchData(void *a1)
{
  id v1;
  void *v2;
  id v3;

  v1 = a1;
  v2 = v1;
  if (v1)
    v3 = v1;

  return v2;
}

_QWORD *sub_1830841B8(NSObject *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  type metadata accessor for NWConnection.ContentContext();
  v2 = (_QWORD *)swift_allocObject();
  v3 = v2;
  if (a1)
  {
    v2[2] = a1;
    v2[6] = 0;
    v2[7] = 0;
    v2[5] = 0;
    v4 = swift_unknownObjectRetain();
    *((_BYTE *)v3 + 64) = nw_content_context_get_is_final(v4);
    nw_content_context_get_identifier(a1);
    v5 = sub_183B91800();
    v7 = v6;
    swift_unknownObjectRelease();
    v3[3] = v5;
    v3[4] = v7;
  }
  else
  {
    swift_deallocPartialClassInstance();
    return 0;
  }
  return v3;
}

uint64_t type metadata accessor for NWConnection.ContentContext()
{
  return objc_opt_self();
}

BOOL nw_content_context_get_is_final(nw_content_context_t context)
{
  nw_content_context_t v1;
  nw_content_context_t v2;
  BOOL v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = context;
  v2 = v1;
  if (v1)
  {
    v3 = 0;
    if (v1 != (nw_content_context_t)&__block_literal_global_41718
      && v1 != (nw_content_context_t)&__block_literal_global_5_41741)
    {
      v3 = 1;
      if (v1 != (nw_content_context_t)&__block_literal_global_3_41726
        && v1 != (nw_content_context_t)&__block_literal_global_4)
      {
        v3 = BYTE6(v1[14].isa) & 1;
      }
    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_content_context_get_is_final";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_get_is_final";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_content_context_get_is_final";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_get_is_final";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_content_context_get_is_final";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_7:

  return v3;
}

const char *__cdecl nw_content_context_get_identifier(nw_content_context_t context)
{
  NSObject *v1;
  NSObject *v2;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = context;
  v2 = v1;
  if (v1)
  {
    v3 = "Final Message";
    v4 = "Default Stream";
    if (v1 == &__block_literal_global_5_41741)
      v5 = "New Inbound Message";
    else
      v5 = (const char *)&v1[3];
    if (v1 != &__block_literal_global_4)
      v4 = v5;
    if (v1 != &__block_literal_global_3_41726)
      v3 = v4;
    if (v1 == &__block_literal_global_41718)
      v6 = "Default Message";
    else
      v6 = v3;
    goto LABEL_12;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_content_context_get_identifier";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_content_context_get_identifier";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_content_context_get_identifier";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_29;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_content_context_get_identifier";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_content_context_get_identifier";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_29:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_12:

  return v6;
}

uint64_t sub_183084848(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_18308485C(a1, a2);
  return a1;
}

uint64_t sub_18308485C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

BOOL nw_parameters_get_sensitive_redacted(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _DWORD *v3;
  void *v4;
  int v5;
  int v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_parameters_get_sensitive_redacted";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_get_sensitive_redacted";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_parameters_get_sensitive_redacted";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_34;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_get_sensitive_redacted";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_get_sensitive_redacted";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_34:
    if (v10)
      free(v10);
    goto LABEL_16;
  }
  v3 = *(id *)(v1[13] + 136);
  v4 = v3;
  if (!v3 || (v5 = v3[31], (v5 - 2) < 2))
  {
    if (nwlog_get_sensitive_redacted::onceToken != -1)
      dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
    v6 = nwlog_get_sensitive_redacted::sensitiveRedacted;

    if (!v6)
      goto LABEL_10;
LABEL_16:
    v7 = 1;
    goto LABEL_17;
  }
  if (v5 != 1)
  {

    goto LABEL_16;
  }

LABEL_10:
  if (*(unsigned __int8 *)(v2[13] + 102) - 1 > 1)
  {
    v7 = 0;
  }
  else
  {
    if (nwlog_get_sensitive_redacted::onceToken != -1)
      dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
    v7 = nwlog_get_sensitive_redacted::sensitiveRedacted != 0;
  }
LABEL_17:

  return v7;
}

void sub_18308535C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint16_t nw_endpoint_get_port(nw_endpoint_t endpoint)
{
  NSObject *v1;
  NSObject *v2;
  uint16_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = endpoint;
  v2 = v1;
  if (v1)
  {
    v3 = __rev16(-[NSObject port](v1, "port"));
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_get_port";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_port";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_get_port";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_port";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_port";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void sub_183085710(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_alternate_port(void *a1)
{
  unsigned __int16 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[114];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_get_alternate_port";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_alternate_port";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_get_alternate_port";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_alternate_port";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_get_alternate_port";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_connection_receive_with_context(void *a1, void *a2, unsigned int a3, unsigned int a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v9 = a1;
  v10 = a2;
  v11 = a5;
  if (v10)
  {
    nw_connection_receive_internal(v9, v10, a3, a4, v11);
    goto LABEL_3;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_receive_with_context";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_receive_with_context";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null message", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_connection_receive_with_context";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null message, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_receive_with_context";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null message, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_receive_with_context";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null message, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v13)
    free(v13);
LABEL_3:

}

void sub_183085C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ____nwlog_activity_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gactivityLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "activity");
}

NSObject *nw_parameters_create_quic_connection_with_tls_fallback(void *a1, void *a2, void *a3, void *a4)
{
  void (**v7)(id, id);
  void (**v8)(id, NWConcrete_nw_protocol_options *);
  void (**v9)(id, NWConcrete_nw_protocol_options *);
  void (**v10)(id, NWConcrete_nw_protocol_options *);
  nw_parameters_t v11;
  void *v12;
  NWConcrete_nw_protocol_options *options;
  NWConcrete_nw_protocol_options *v14;
  NWConcrete_nw_protocol_options *v15;
  id *v16;
  NWConcrete_nw_protocol_options *v17;
  NWConcrete_nw_protocol_transform *v18;
  NWConcrete_nw_protocol_transform *v19;
  id *v20;
  id v21;
  NWConcrete_nw_protocol_transform *v22;
  NWConcrete_nw_protocol_transform *v23;
  NWConcrete_nw_protocol_transform *v24;
  NWConcrete_nw_protocol_transform *v25;
  NWConcrete_nw_protocol_options *v26;
  NWConcrete_nw_protocol_transform *v27;
  _BOOL8 v28;
  Class isa;
  NSObject *v30;
  id v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  id v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  id v42;
  char *v43;
  NSObject *v44;
  os_log_type_t v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  id v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  const char *v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  os_log_type_t v57;
  id v58;
  char *v59;
  NSObject *v60;
  os_log_type_t v61;
  char *v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  NWConcrete_nw_protocol_options *v66;
  os_log_type_t v67;
  id v68;
  char *v69;
  NSObject *v70;
  os_log_type_t v71;
  char *v72;
  NSObject *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  os_log_type_t v76;
  char *v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  os_log_type_t v81;
  os_log_type_t v82;
  os_log_type_t v83;
  os_log_type_t v84;
  void *v86;
  char *v87;
  NSObject *v88;
  os_log_type_t v89;
  void *v90;
  os_log_type_t v91;
  void *v92;
  os_log_type_t v93;
  void *v94;
  os_log_type_t v95;
  void *v96;
  os_log_type_t v97;
  char *backtrace_string;
  os_log_type_t v99;
  _BOOL4 v100;
  os_log_type_t v101;
  _BOOL4 v102;
  os_log_type_t v103;
  _BOOL4 v104;
  os_log_type_t v105;
  _BOOL4 v106;
  char *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  void *v110;
  char *v111;
  NSObject *v112;
  os_log_type_t v113;
  os_log_type_t v114;
  os_log_type_t v115;
  os_log_type_t v116;
  os_log_type_t v117;
  os_log_type_t v118;
  char *v119;
  NSObject *v120;
  os_log_type_t v121;
  _BOOL4 v122;
  os_log_type_t v123;
  NSObject *log;
  NWConcrete_nw_protocol_transform *v125;
  id *v126;
  NWConcrete_nw_protocol_options *v127;
  NWConcrete_nw_protocol_options *v128;
  id v129;
  char v130;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v133;
  __int16 v134;
  char *v135;
  uint64_t v136;

  v136 = *MEMORY[0x1E0C80C00];
  v7 = a1;
  v8 = a2;
  v129 = a3;
  v9 = a4;
  v10 = v9;
  if (!v7)
  {
    __nwlog_obj();
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130))
      goto LABEL_244;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v89 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v89, "%{public}s called with null configure_security", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (!v130)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v114 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v114, "%{public}s called with null configure_security, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_243;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v88 = objc_claimAutoreleasedReturnValue();
    v99 = type;
    v100 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v100)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v99, "%{public}s called with null configure_security, no backtrace", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (v100)
    {
      *(_DWORD *)buf = 136446466;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      v134 = 2082;
      v135 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v88, v99, "%{public}s called with null configure_security, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_197;
  }
  if (!v9)
  {
    __nwlog_obj();
    v90 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130))
      goto LABEL_244;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v91 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v91, "%{public}s called with null configure_tcp_fallback", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (!v130)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v115 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v115, "%{public}s called with null configure_tcp_fallback, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_243;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v88 = objc_claimAutoreleasedReturnValue();
    v101 = type;
    v102 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v102)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v101, "%{public}s called with null configure_tcp_fallback, no backtrace", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (v102)
    {
      *(_DWORD *)buf = 136446466;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      v134 = 2082;
      v135 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v88, v101, "%{public}s called with null configure_tcp_fallback, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_197;
  }
  if (!v8)
  {
    __nwlog_obj();
    v92 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130))
      goto LABEL_244;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v93 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v93, "%{public}s called with null configure_quic_connection", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (!v130)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v116 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v116, "%{public}s called with null configure_quic_connection, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_243;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v88 = objc_claimAutoreleasedReturnValue();
    v103 = type;
    v104 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v104)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v103, "%{public}s called with null configure_quic_connection, no backtrace", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (v104)
    {
      *(_DWORD *)buf = 136446466;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      v134 = 2082;
      v135 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v88, v103, "%{public}s called with null configure_quic_connection, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_197;
  }
  if (v8 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
  {
    __nwlog_obj();
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130))
      goto LABEL_244;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v95 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v95, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (!v130)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v117 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v117, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_243;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v88 = objc_claimAutoreleasedReturnValue();
    v105 = type;
    v106 = os_log_type_enabled(v88, type);
    if (!backtrace_string)
    {
      if (v106)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v105, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
      goto LABEL_243;
    }
    if (v106)
    {
      *(_DWORD *)buf = 136446466;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      v134 = 2082;
      v135 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v88, v105, "%{public}s called with null (configure_quic_connection != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_197:

    free(backtrace_string);
    if (!v87)
      goto LABEL_246;
    goto LABEL_245;
  }
  if (v9 == (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_18950)
  {
    __nwlog_obj();
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v87 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v130 = 0;
    if (!__nwlog_fault(v87, &type, &v130))
      goto LABEL_244;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v97 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v97, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable))", buf, 0xCu);
      }
    }
    else if (v130)
    {
      v107 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v108 = type;
      v109 = os_log_type_enabled(v88, type);
      if (v107)
      {
        if (v109)
        {
          *(_DWORD *)buf = 136446466;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          v134 = 2082;
          v135 = v107;
          _os_log_impl(&dword_182FBE000, v88, v108, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v107);
LABEL_244:
        if (!v87)
        {
LABEL_246:
          v30 = 0;
          goto LABEL_152;
        }
LABEL_245:
        free(v87);
        goto LABEL_246;
      }
      if (v109)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v108, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v88 = objc_claimAutoreleasedReturnValue();
      v118 = type;
      if (os_log_type_enabled(v88, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v88, v118, "%{public}s called with null (configure_tcp_fallback != (_nw_parameters_configure_protocol_disable)), backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_243:

    goto LABEL_244;
  }
  v11 = nw_parameters_create();
  if (v11)
  {
    v12 = (void *)nw_protocol_boringssl_copy_definition();
    options = nw_protocol_create_options(v12);

    if (options)
    {
      v14 = options;
      v128 = v14;
      if (v7 != (void (**)(id, id))&__block_literal_global_88)
        v7[2](v7, v14);
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_54912);
      v15 = nw_protocol_create_options((void *)nw_protocol_copy_quic_connection_definition::quic_definition);
      nw_protocol_options_set_prohibit_joining(v15);
      if (v15)
      {
        nw_quic_connection_set_sec_protocol_options(v15, v128);
        v16 = v11[19].isa;
        v126 = v16;
        if (v16)
        {
          objc_storeStrong(v16 + 3, v15);
          if (v8 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
            v8[2](v8, v15);
          if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
            dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
          v17 = nw_protocol_create_options((void *)g_tcp_definition);
          v127 = v17;
          if (v17)
          {
            if (v10 != (void (**)(id, NWConcrete_nw_protocol_options *))&__block_literal_global_86)
              v10[2](v10, v17);
            v125 = objc_alloc_init(NWConcrete_nw_protocol_transform);
            if (v125)
            {
              v18 = objc_alloc_init(NWConcrete_nw_protocol_transform);
              v19 = v18;
              if (v18)
              {
                if (v129)
                {
                  v20 = v18;
                  v21 = v129;
                  objc_storeStrong(v20 + 4, a3);

                }
                v22 = v125;
                *((_BYTE *)v22 + 8) |= 2u;

                nw_protocol_transform_append_protocol(v22, 3, v15);
                v23 = v22;
                v23->fallback_mode = 2;

                v24 = v23;
                *((_BYTE *)v22 + 8) |= 0x10u;

                v25 = v19;
                *((_BYTE *)v25 + 8) |= 2u;

                v26 = nw_protocol_options_copy(v128);
                nw_protocol_transform_append_protocol(v25, 4, v26);

                nw_protocol_transform_append_protocol(v25, 3, v127);
                v27 = v25;
                *((_BYTE *)v25 + 8) |= 0x10u;

                v28 = nw_array_create();
                isa = v11[20].isa;
                v11[20].isa = (Class)v28;

                nw_array_append((uint64_t)v11[20].isa, v24);
                nw_array_append((uint64_t)v11[20].isa, v27);
                BYTE4(v11[11].isa) = 2;
                v30 = v11;
LABEL_145:

                goto LABEL_146;
              }
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v68 = (id)gLogObj;
              *(_DWORD *)buf = 136446210;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              v69 = (char *)_os_log_send_and_compose_impl();

              type = OS_LOG_TYPE_ERROR;
              v130 = 0;
              if (__nwlog_fault(v69, &type, &v130))
              {
                if (type == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v70 = objc_claimAutoreleasedReturnValue();
                  v71 = type;
                  if (os_log_type_enabled(v70, type))
                  {
                    *(_DWORD *)buf = 136446210;
                    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                    _os_log_impl(&dword_182FBE000, v70, v71, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                  }
                }
                else
                {
                  if (v130)
                  {
                    v77 = (char *)__nw_create_backtrace_string();
                    __nwlog_obj();
                    v78 = objc_claimAutoreleasedReturnValue();
                    v79 = type;
                    log = v78;
                    v80 = os_log_type_enabled(v78, type);
                    if (v77)
                    {
                      if (v80)
                      {
                        *(_DWORD *)buf = 136446466;
                        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                        v134 = 2082;
                        v135 = v77;
                        _os_log_impl(&dword_182FBE000, log, v79, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                      }

                      free(v77);
                    }
                    else
                    {
                      if (v80)
                      {
                        *(_DWORD *)buf = 136446210;
                        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                        _os_log_impl(&dword_182FBE000, log, v79, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
                      }

                    }
                    goto LABEL_142;
                  }
                  __nwlog_obj();
                  v70 = objc_claimAutoreleasedReturnValue();
                  v84 = type;
                  if (os_log_type_enabled(v70, type))
                  {
                    *(_DWORD *)buf = 136446210;
                    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                    _os_log_impl(&dword_182FBE000, v70, v84, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                  }
                }

              }
LABEL_142:
              if (v69)
                free(v69);
              v30 = 0;
              goto LABEL_145;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v58 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            v59 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v130 = 0;
            if (__nwlog_fault(v59, &type, &v130))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v60 = (id)gLogObj;
                v61 = type;
                if (os_log_type_enabled(v60, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v60, v61, "%{public}s nw_protocol_transform_create failed", buf, 0xCu);
                }
LABEL_71:

                goto LABEL_133;
              }
              if (!v130)
              {
                __nwlog_obj();
                v60 = objc_claimAutoreleasedReturnValue();
                v83 = type;
                if (os_log_type_enabled(v60, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v60, v83, "%{public}s nw_protocol_transform_create failed, backtrace limit exceeded", buf, 0xCu);
                }
                goto LABEL_71;
              }
              v72 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v73 = objc_claimAutoreleasedReturnValue();
              v74 = type;
              v75 = os_log_type_enabled(v73, type);
              if (v72)
              {
                if (v75)
                {
                  *(_DWORD *)buf = 136446466;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  v134 = 2082;
                  v135 = v72;
                  _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s nw_protocol_transform_create failed, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v72);
                if (!v59)
                  goto LABEL_135;
                goto LABEL_134;
              }
              if (v75)
              {
                *(_DWORD *)buf = 136446210;
                v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                _os_log_impl(&dword_182FBE000, v73, v74, "%{public}s nw_protocol_transform_create failed, no backtrace", buf, 0xCu);
              }

            }
LABEL_133:
            if (!v59)
            {
LABEL_135:
              v30 = 0;
LABEL_146:

              v66 = v127;
              goto LABEL_147;
            }
LABEL_134:
            free(v59);
            goto LABEL_135;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v49 = (id)gLogObj;
          *(_DWORD *)buf = 136446210;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          v50 = (char *)_os_log_send_and_compose_impl();

          type = OS_LOG_TYPE_ERROR;
          v130 = 0;
          if (__nwlog_fault(v50, &type, &v130))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v51 = (id)gLogObj;
              v52 = type;
              if (os_log_type_enabled(v51, type))
              {
                *(_DWORD *)buf = 136446210;
                v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s nw_tcp_create_options failed", buf, 0xCu);
              }
LABEL_57:

              goto LABEL_124;
            }
            if (!v130)
            {
              __nwlog_obj();
              v51 = objc_claimAutoreleasedReturnValue();
              v82 = type;
              if (os_log_type_enabled(v51, type))
              {
                *(_DWORD *)buf = 136446210;
                v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                _os_log_impl(&dword_182FBE000, v51, v82, "%{public}s nw_tcp_create_options failed, backtrace limit exceeded", buf, 0xCu);
              }
              goto LABEL_57;
            }
            v62 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v63 = objc_claimAutoreleasedReturnValue();
            v64 = type;
            v65 = os_log_type_enabled(v63, type);
            if (v62)
            {
              if (v65)
              {
                *(_DWORD *)buf = 136446466;
                v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                v134 = 2082;
                v135 = v62;
                _os_log_impl(&dword_182FBE000, v63, v64, "%{public}s nw_tcp_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
              }

              free(v62);
              v66 = 0;
              if (!v50)
                goto LABEL_126;
              goto LABEL_125;
            }
            if (v65)
            {
              *(_DWORD *)buf = 136446210;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              _os_log_impl(&dword_182FBE000, v63, v64, "%{public}s nw_tcp_create_options failed, no backtrace", buf, 0xCu);
            }

          }
LABEL_124:
          v66 = 0;
          if (!v50)
          {
LABEL_126:
            v30 = 0;
LABEL_147:

LABEL_148:
            goto LABEL_149;
          }
LABEL_125:
          free(v50);
          goto LABEL_126;
        }
        __nwlog_obj();
        v110 = (void *)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        v111 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v130 = 0;
        if (__nwlog_fault(v111, &type, &v130))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            __nwlog_obj();
            v112 = objc_claimAutoreleasedReturnValue();
            v113 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)buf = 136446210;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              _os_log_impl(&dword_182FBE000, v112, v113, "%{public}s called with null stack", buf, 0xCu);
            }
          }
          else
          {
            if (v130)
            {
              v119 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v120 = objc_claimAutoreleasedReturnValue();
              v121 = type;
              v122 = os_log_type_enabled(v120, type);
              if (v119)
              {
                if (v122)
                {
                  *(_DWORD *)buf = 136446466;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  v134 = 2082;
                  v135 = v119;
                  _os_log_impl(&dword_182FBE000, v120, v121, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
                }

                free(v119);
              }
              else
              {
                if (v122)
                {
                  *(_DWORD *)buf = 136446210;
                  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
                  _os_log_impl(&dword_182FBE000, v120, v121, "%{public}s called with null stack, no backtrace", buf, 0xCu);
                }

              }
              goto LABEL_253;
            }
            __nwlog_obj();
            v112 = objc_claimAutoreleasedReturnValue();
            v123 = type;
            if (os_log_type_enabled(v112, type))
            {
              *(_DWORD *)buf = 136446210;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              _os_log_impl(&dword_182FBE000, v112, v123, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
            }
          }

        }
LABEL_253:
        if (v111)
          free(v111);
        v30 = 0;
        goto LABEL_148;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v42 = (id)gLogObj;
      *(_DWORD *)buf = 136446210;
      v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
      v43 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v130 = 0;
      if (__nwlog_fault(v43, &type, &v130))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = (id)gLogObj;
          v45 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)buf = 136446210;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            _os_log_impl(&dword_182FBE000, v44, v45, "%{public}s nw_quic_create_connection_options failed", buf, 0xCu);
          }
        }
        else if (v130)
        {
          v53 = __nw_create_backtrace_string();
          if (v53)
          {
            v54 = (char *)v53;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v55 = (id)gLogObj;
            v56 = type;
            if (os_log_type_enabled(v55, type))
            {
              *(_DWORD *)buf = 136446466;
              v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
              v134 = 2082;
              v135 = v54;
              _os_log_impl(&dword_182FBE000, v55, v56, "%{public}s nw_quic_create_connection_options failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v54);
            if (!v43)
              goto LABEL_117;
            goto LABEL_116;
          }
          __nwlog_obj();
          v44 = objc_claimAutoreleasedReturnValue();
          v81 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)buf = 136446210;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            _os_log_impl(&dword_182FBE000, v44, v81, "%{public}s nw_quic_create_connection_options failed, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v44 = (id)gLogObj;
          v76 = type;
          if (os_log_type_enabled(v44, type))
          {
            *(_DWORD *)buf = 136446210;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            _os_log_impl(&dword_182FBE000, v44, v76, "%{public}s nw_quic_create_connection_options failed, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
      if (!v43)
      {
LABEL_117:
        v30 = 0;
LABEL_149:

        goto LABEL_150;
      }
LABEL_116:
      free(v43);
      goto LABEL_117;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v35 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
    v36 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v130 = 0;
    if (__nwlog_fault(v36, &type, &v130))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (id)gLogObj;
        v38 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s nw_tls_create_options failed", buf, 0xCu);
        }
      }
      else if (v130)
      {
        v46 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (id)gLogObj;
        v47 = type;
        v48 = os_log_type_enabled(v37, type);
        if (v46)
        {
          if (v48)
          {
            *(_DWORD *)buf = 136446466;
            v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
            v134 = 2082;
            v135 = v46;
            _os_log_impl(&dword_182FBE000, v37, v47, "%{public}s nw_tls_create_options failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v46);
          if (!v36)
            goto LABEL_103;
          goto LABEL_102;
        }
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          _os_log_impl(&dword_182FBE000, v37, v47, "%{public}s nw_tls_create_options failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v37 = (id)gLogObj;
        v67 = type;
        if (os_log_type_enabled(v37, type))
        {
          *(_DWORD *)buf = 136446210;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          _os_log_impl(&dword_182FBE000, v37, v67, "%{public}s nw_tls_create_options failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v36)
    {
LABEL_103:
      v30 = 0;
LABEL_150:

      goto LABEL_151;
    }
LABEL_102:
    free(v36);
    goto LABEL_103;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v31 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
  v32 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v130 = 0;
  if (__nwlog_fault(v32, &type, &v130))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = (id)gLogObj;
      v34 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s nw_parameters_create failed", buf, 0xCu);
      }
    }
    else if (v130)
    {
      v39 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = (id)gLogObj;
      v40 = type;
      v41 = os_log_type_enabled(v33, type);
      if (v39)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446466;
          v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
          v134 = 2082;
          v135 = v39;
          _os_log_impl(&dword_182FBE000, v33, v40, "%{public}s nw_parameters_create failed, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v39);
        if (!v32)
          goto LABEL_83;
        goto LABEL_82;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v33, v40, "%{public}s nw_parameters_create failed, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v33 = (id)gLogObj;
      v57 = type;
      if (os_log_type_enabled(v33, type))
      {
        *(_DWORD *)buf = 136446210;
        v133 = "nw_parameters_create_quic_connection_with_tls_fallback";
        _os_log_impl(&dword_182FBE000, v33, v57, "%{public}s nw_parameters_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
  if (v32)
LABEL_82:
    free(v32);
LABEL_83:
  v30 = 0;
LABEL_151:

LABEL_152:
  return v30;
}

void sub_183087B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,void *a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  void *v29;

  _Unwind_Resume(a1);
}

_QWORD *nw_path_copy_without_parameters(void *a1)
{
  _QWORD *v1;
  nw_parameters_t v2;
  void *v3;
  _QWORD *v4;
  id v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = (_QWORD *)objc_msgSend(a1, "copy");
  if (v1)
  {
    v2 = nw_parameters_create();
    v3 = (void *)v1[2];
    v1[2] = v2;

    v4 = v1;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v17 = "nw_path_copy_without_parameters";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (!__nwlog_fault(v6, &type, &v14))
    goto LABEL_8;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v8 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_path_copy_without_parameters";
      _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s [path copy] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v6)
      goto LABEL_10;
LABEL_9:
    free(v6);
    goto LABEL_10;
  }
  if (!v14)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    v13 = type;
    if (os_log_type_enabled(v7, type))
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_path_copy_without_parameters";
      _os_log_impl(&dword_182FBE000, v7, v13, "%{public}s [path copy] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v7 = (id)gLogObj;
  v11 = type;
  v12 = os_log_type_enabled(v7, type);
  if (!backtrace_string)
  {
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      v17 = "nw_path_copy_without_parameters";
      _os_log_impl(&dword_182FBE000, v7, v11, "%{public}s [path copy] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v17 = "nw_path_copy_without_parameters";
    v18 = 2082;
    v19 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v7, v11, "%{public}s [path copy] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v6)
    goto LABEL_9;
LABEL_10:

  return v1;
}

void sub_183087ED0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

nw_parameters_t nw_parameters_create(void)
{
  NWConcrete_nw_parameters *v0;
  NWConcrete_nw_protocol_stack *v1;
  NWConcrete_nw_protocol_options *options;
  OS_nw_protocol_options *internet_protocol;
  NSObject *v4;

  v0 = [NWConcrete_nw_parameters alloc];
  v1 = objc_alloc_init(NWConcrete_nw_protocol_stack);
  if (v1)
  {
    if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
    options = nw_protocol_create_options((void *)g_ip_definition);
    internet_protocol = v1->internet_protocol;
    v1->internet_protocol = (OS_nw_protocol_options *)options;

  }
  v4 = -[NWConcrete_nw_parameters initWithStack:]((id *)&v0->super.isa, v1);

  return v4;
}

void sub_183087F78(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_protocol_create_options(void *a1)
{
  id v2;
  NWConcrete_nw_protocol_options *v3;
  _QWORD *v4;
  _QWORD *v5;
  NWConcrete_nw_protocol_options *v6;
  uint64_t (*v7)(_QWORD *);
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t receiver;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  char v25;
  objc_super v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v2 = a1;
  v3 = [NWConcrete_nw_protocol_options alloc];
  v4 = v2;
  v5 = v4;
  if (!v3)
    goto LABEL_6;
  if (!v4)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
    v10 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v26.receiver) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v10, &v26, &type))
    {
      if (LOBYTE(v26.receiver) == 17)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        receiver = (os_log_type_t)v26.receiver;
        if (os_log_type_enabled(v11, (os_log_type_t)v26.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_182FBE000, v11, receiver, "%{public}s called with null _definition", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v18 = (os_log_type_t)v26.receiver;
        v19 = os_log_type_enabled(v11, (os_log_type_t)v26.receiver);
        if (backtrace_string)
        {
          if (v19)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
            v30 = 2082;
            v31 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null _definition, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null _definition, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v23 = (os_log_type_t)v26.receiver;
        if (os_log_type_enabled(v11, (os_log_type_t)v26.receiver))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_182FBE000, v11, v23, "%{public}s called with null _definition, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_36:
    if (v10)
      free(v10);

    goto LABEL_44;
  }
  v26.receiver = v3;
  v26.super_class = (Class)NWConcrete_nw_protocol_options;
  v6 = (NWConcrete_nw_protocol_options *)objc_msgSendSuper2(&v26, sel_init);
  v3 = v6;
  if (!v6)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if ((__nwlog_fault(v14, &type, &v25) & 1) != 0)
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s [super init] failed", buf, 0xCu);
        }
      }
      else if (v25)
      {
        v20 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        v22 = os_log_type_enabled(v15, type);
        if (v20)
        {
          if (v22)
          {
            *(_DWORD *)buf = 136446466;
            v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
            v30 = 2082;
            v31 = v20;
            _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s [super init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v20);
          goto LABEL_42;
        }
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s [super init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v29 = "-[NWConcrete_nw_protocol_options initWithDefinition:]";
          _os_log_impl(&dword_182FBE000, v15, v24, "%{public}s [super init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (v14)
      free(v14);
LABEL_44:
    v3 = 0;
    goto LABEL_6;
  }
  objc_storeStrong((id *)&v6->definition, a1);
  v7 = (uint64_t (*)(_QWORD *))v5[11];
  if (v7)
    v3->handle = (void *)v7(v5);
LABEL_6:

  return v3;
}

void sub_183088494(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_183088568(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void nw_protocol_transform_append_protocol(void *a1, int a2, void *a3)
{
  _QWORD *v5;
  id v6;
  void *v7;
  void *v8;
  NWConcrete_nw_protocol_stack *v9;
  NWConcrete_nw_protocol_options *options;
  OS_nw_protocol_options *internet_protocol;
  void *v12;
  id *v13;
  id v14;
  id v15;
  const char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  char *v23;
  void *v24;
  const char *v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  void *v36;
  os_log_type_t v37;
  os_log_type_t v38;
  os_log_type_t v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  char v43;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v46;
  __int16 v47;
  _WORD v48[17];

  *(_QWORD *)&v48[13] = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v6;
  if (!v5)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_transform_append_protocol";
    v25 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v25, &type, &v43))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_transform_append_protocol";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v43)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      v32 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v46 = "nw_protocol_transform_append_protocol";
          v47 = 2082;
          *(_QWORD *)v48 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v26, v31, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_86:
        if (!v25)
          goto LABEL_36;
        goto LABEL_87;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_transform_append_protocol";
        _os_log_impl(&dword_182FBE000, v26, v31, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v38 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_transform_append_protocol";
        _os_log_impl(&dword_182FBE000, v26, v38, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_85:

    goto LABEL_86;
  }
  if (!v6)
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v46 = "nw_protocol_transform_append_protocol";
    v25 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v43 = 0;
    if (!__nwlog_fault(v25, &type, &v43))
      goto LABEL_86;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_transform_append_protocol";
        _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (!v43)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_transform_append_protocol";
        _os_log_impl(&dword_182FBE000, v26, v39, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_85;
    }
    v33 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    v34 = type;
    v35 = os_log_type_enabled(v26, type);
    if (!v33)
    {
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v46 = "nw_protocol_transform_append_protocol";
        _os_log_impl(&dword_182FBE000, v26, v34, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_85;
    }
    if (v35)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_transform_append_protocol";
      v47 = 2082;
      *(_QWORD *)v48 = v33;
      _os_log_impl(&dword_182FBE000, v26, v34, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_72;
  }
  v8 = (void *)v5[7];
  if (!v8)
  {
    v9 = objc_alloc_init(NWConcrete_nw_protocol_stack);
    if (v9)
    {
      if (nw_protocol_setup_ip_definition(void)::onceToken != -1)
        dispatch_once(&nw_protocol_setup_ip_definition(void)::onceToken, &__block_literal_global_52132);
      options = nw_protocol_create_options((void *)g_ip_definition);
      internet_protocol = v9->internet_protocol;
      v9->internet_protocol = (OS_nw_protocol_options *)options;

    }
    v12 = (void *)v5[7];
    v5[7] = v9;

    v8 = (void *)v5[7];
    if (!v8)
    {
      __nwlog_obj();
      v36 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v46 = "nw_protocol_transform_append_protocol";
      v25 = (const char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v43 = 0;
      if (!__nwlog_fault(v25, &type, &v43))
        goto LABEL_86;
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_protocol_transform_append_protocol";
          _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s called with null transform->transform_stack", buf, 0xCu);
        }
        goto LABEL_85;
      }
      if (!v43)
      {
        __nwlog_obj();
        v26 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v26, type))
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_protocol_transform_append_protocol";
          _os_log_impl(&dword_182FBE000, v26, v42, "%{public}s called with null transform->transform_stack, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_85;
      }
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v40 = type;
      v41 = os_log_type_enabled(v26, type);
      if (!v33)
      {
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          v46 = "nw_protocol_transform_append_protocol";
          _os_log_impl(&dword_182FBE000, v26, v40, "%{public}s called with null transform->transform_stack, no backtrace", buf, 0xCu);
        }
        goto LABEL_85;
      }
      if (v41)
      {
        *(_DWORD *)buf = 136446466;
        v46 = "nw_protocol_transform_append_protocol";
        v47 = 2082;
        *(_QWORD *)v48 = v33;
        _os_log_impl(&dword_182FBE000, v26, v40, "%{public}s called with null transform->transform_stack, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_72:

      free(v33);
      if (!v25)
        goto LABEL_36;
LABEL_87:
      v23 = (char *)v25;
      goto LABEL_35;
    }
  }
  switch(a2)
  {
    case 2:
      v13 = v8;
      v14 = v7;
      objc_storeStrong(v13 + 6, a3);
LABEL_15:

      goto LABEL_36;
    case 3:
      v13 = v8;
      v14 = v7;
      objc_storeStrong(v13 + 3, a3);
      goto LABEL_15;
    case 4:
      nw_protocol_stack_append_application_protocol(v8, v7);
      goto LABEL_36;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v15 = (id)gLogObj;
  *(_DWORD *)buf = 136446466;
  v46 = "nw_protocol_transform_append_protocol";
  v47 = 1024;
  *(_DWORD *)v48 = a2;
  v16 = (const char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v43 = 0;
  if (!__nwlog_fault(v16, &type, &v43))
    goto LABEL_33;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    v18 = type;
    if (os_log_type_enabled(v17, type))
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_transform_append_protocol";
      v47 = 1024;
      *(_DWORD *)v48 = a2;
      _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s Unsupported protocol level %u", buf, 0x12u);
    }
LABEL_32:

LABEL_33:
    if (!v16)
      goto LABEL_36;
    goto LABEL_34;
  }
  if (!v43)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v17 = (id)gLogObj;
    v22 = type;
    if (os_log_type_enabled(v17, type))
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_transform_append_protocol";
      v47 = 1024;
      *(_DWORD *)v48 = a2;
      _os_log_impl(&dword_182FBE000, v17, v22, "%{public}s Unsupported protocol level %u, backtrace limit exceeded", buf, 0x12u);
    }
    goto LABEL_32;
  }
  v19 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v17 = (id)gLogObj;
  v20 = type;
  v21 = os_log_type_enabled(v17, type);
  if (!v19)
  {
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v46 = "nw_protocol_transform_append_protocol";
      v47 = 1024;
      *(_DWORD *)v48 = a2;
      _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s Unsupported protocol level %u, no backtrace", buf, 0x12u);
    }
    goto LABEL_32;
  }
  if (v21)
  {
    *(_DWORD *)buf = 136446722;
    v46 = "nw_protocol_transform_append_protocol";
    v47 = 1024;
    *(_DWORD *)v48 = a2;
    v48[2] = 2082;
    *(_QWORD *)&v48[3] = v19;
    _os_log_impl(&dword_182FBE000, v17, v20, "%{public}s Unsupported protocol level %u, dumping backtrace:%{public}s", buf, 0x1Cu);
  }

  free(v19);
  if (v16)
  {
LABEL_34:
    v23 = (char *)v16;
LABEL_35:
    free(v23);
  }
LABEL_36:

}

void sub_183089834(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_protocol_stack_append_application_protocol(void *a1, void *a2)
{
  void **v3;
  id v4;
  void *v5;
  void *combined_array;
  void *v7;
  void *v8;
  uint64_t v9;
  _BOOL8 v10;
  void *v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  char *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  char v26;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v29;
  __int16 v30;
  char *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v29 = "nw_protocol_stack_append_application_protocol";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v26 = 0;
    if (!__nwlog_fault(v13, &type, &v26))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_stack_append_application_protocol";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v26)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446466;
          v29 = "nw_protocol_stack_append_application_protocol";
          v30 = 2082;
          v31 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v13)
          goto LABEL_8;
LABEL_43:
        free(v13);
        goto LABEL_8;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_stack_append_application_protocol";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v29 = "nw_protocol_stack_append_application_protocol";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    if (nw_protocol_options_are_persistent(v4))
    {
      combined_array = nw_array_create_combined_array(v3[1], v3[2]);
      v7 = v3[1];
      v3[1] = combined_array;

      nw_array_append((uint64_t)v3[1], v5);
      v8 = v3[2];
      v3[2] = 0;

    }
    else
    {
      v9 = (uint64_t)v3[2];
      if (!v9)
      {
        v10 = nw_array_create();
        v11 = v3[2];
        v3[2] = (void *)v10;

        v9 = (uint64_t)v3[2];
      }
      nw_array_append(v9, v5);
    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v16 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v29 = "nw_protocol_stack_append_application_protocol";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v26 = 0;
  if (!__nwlog_fault(v13, &type, &v26))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_protocol_stack_append_application_protocol";
      _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null protocol", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v26)
  {
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v25 = type;
    if (os_log_type_enabled(v14, type))
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_protocol_stack_append_application_protocol";
      _os_log_impl(&dword_182FBE000, v14, v25, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v21 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  v22 = type;
  v23 = os_log_type_enabled(v14, type);
  if (!v21)
  {
    if (v23)
    {
      *(_DWORD *)buf = 136446210;
      v29 = "nw_protocol_stack_append_application_protocol";
      _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v23)
  {
    *(_DWORD *)buf = 136446466;
    v29 = "nw_protocol_stack_append_application_protocol";
    v30 = 2082;
    v31 = v21;
    _os_log_impl(&dword_182FBE000, v14, v22, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v21);
  if (v13)
    goto LABEL_43;
LABEL_8:

}

void nw_quic_connection_set_sec_protocol_options(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  id v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (nw_protocol_options_is_quic_connection(v3))
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_quic_connection_set_sec_protocol_options_block_invoke;
    v13[3] = &unk_1E14A9F20;
    v14 = v4;
    nw_protocol_options_access_handle(v3, v13);

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_quic_connection_set_sec_protocol_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v6, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_quic_connection_set_sec_protocol_options";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null nw_protocol_options_is_quic_connection(options)", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_quic_connection_set_sec_protocol_options";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_quic_connection(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_quic_connection_set_sec_protocol_options";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null nw_protocol_options_is_quic_connection(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_quic_connection_set_sec_protocol_options";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null nw_protocol_options_is_quic_connection(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void sub_18308A048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void nw_protocol_options_set_prohibit_joining(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v8;
  _BOOL4 v9;
  os_log_type_t v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *((_BYTE *)v1 + 153) = 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v3 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v14 = "nw_protocol_options_set_prohibit_joining";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v11 = 0;
  if (__nwlog_fault(v4, &type, &v11))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_options_set_prohibit_joining";
        _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      v9 = os_log_type_enabled(v5, type);
      if (backtrace_string)
      {
        if (v9)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_options_set_prohibit_joining";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v9)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_options_set_prohibit_joining";
        _os_log_impl(&dword_182FBE000, v5, v8, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_protocol_options_set_prohibit_joining";
        _os_log_impl(&dword_182FBE000, v5, v10, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v4)
    free(v4);
LABEL_3:

}

BOOL nw_endpoint_handler_should_reset_for_fallback(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  int mode;
  NWConcrete_nw_endpoint_mode_handler *mode_handler;
  _BOOL8 v5;

  v1 = a1;
  v2 = v1;
  v5 = !v1->parent_handler
    && !nw_endpoint_handler_has_fallback_children(v1)
    && (*((_BYTE *)v2 + 268) & 0x10) == 0
    && v2->state == 2
    && (mode = v2->mode, (mode | 4) != 4)
    && (*((_BYTE *)v2 + 268) & 1) == 0
    && (mode != 2
     || (mode_handler = v2->mode_handler) == 0
     || (nw_endpoint_flow_should_ignore_path_result(mode_handler) & 1) == 0)
    && nw_path_should_fallback(v2->current_path, 0);

  return v5;
}

void sub_18308A394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_should_ignore_path_result(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[34] >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_flow_should_ignore_path_result";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_flow_should_ignore_path_result";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint_flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_flow_should_ignore_path_result";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_flow_should_ignore_path_result";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_flow_should_ignore_path_result";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_endpoint_handler_has_fallback_children(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_mode_handler *mode_handler;
  _BOOL8 v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v13[5];
  char v14;
  os_log_type_t type;
  _BYTE buf[24];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_fallback_children";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (__nwlog_fault(v5, &type, &v14))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_fallback_children";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v14)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_fallback_children";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_fallback_children";
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_has_fallback_children";
          _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v5)
      free(v5);
    goto LABEL_22;
  }
  if ((objc_opt_respondsToSelector() & 1) == 0)
  {
LABEL_22:
    v3 = 0;
    goto LABEL_23;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v17 = 0;
  mode_handler = v1->mode_handler;
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = ___ZL41nw_endpoint_handler_has_fallback_childrenP30NWConcrete_nw_endpoint_handler_block_invoke;
  v13[3] = &unk_1E149FBA0;
  v13[4] = buf;
  -[NWConcrete_nw_endpoint_mode_handler applyWithHandler:toChildren:](mode_handler, "applyWithHandler:toChildren:", v1, v13);
  v3 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
  _Block_object_dispose(buf, 8);
LABEL_23:

  return v3;
}

void sub_18308A950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

void sub_18308B1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_account_id(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(_QWORD *)(*((_QWORD *)v1 + 13) + 112);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_account_id";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_account_id";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_account_id";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_account_id";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_account_id";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_parameters_get_e_proc_uuid(void *a1, _OWORD *a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *a2 = *(_OWORD *)(*((_QWORD *)v3 + 13) + 24);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_e_proc_uuid";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_e_proc_uuid";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_e_proc_uuid";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_e_proc_uuid";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_e_proc_uuid";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

const uint8_t *__cdecl nw_endpoint_get_signature(nw_endpoint_t endpoint, size_t *out_signature_length)
{
  nw_endpoint_t v3;
  xpc_object_t *p_isa;
  Class isa;
  const uint8_t *bytes_ptr;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v3 = endpoint;
  p_isa = (xpc_object_t *)&v3->isa;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_endpoint_get_signature";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_get_signature";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (!v21)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_get_signature";
        _os_log_impl(&dword_182FBE000, v9, v18, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    v15 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_get_signature";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_endpoint_get_signature";
      v25 = 2082;
      v26 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_24;
  }
  if (!out_signature_length)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_endpoint_get_signature";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v8, &type, &v21))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_get_signature";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null out_signature_length", buf, 0xCu);
      }
LABEL_36:

LABEL_37:
      if (v8)
        free(v8);
      goto LABEL_39;
    }
    if (!v21)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_get_signature";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null out_signature_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_endpoint_get_signature";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null out_signature_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v24 = "nw_endpoint_get_signature";
      v25 = 2082;
      v26 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null out_signature_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_24:

    free(backtrace_string);
    goto LABEL_37;
  }
  isa = v3[24].isa;
  if (!isa)
  {
LABEL_39:
    bytes_ptr = 0;
    goto LABEL_40;
  }
  *out_signature_length = xpc_data_get_length(isa);
  bytes_ptr = (const uint8_t *)xpc_data_get_bytes_ptr(p_isa[24]);
LABEL_40:

  return bytes_ptr;
}

void sub_18308BC08(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_url_scheme(void *a1)
{
  id v1;
  void *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  id v6;
  _QWORD *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  _QWORD *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  _QWORD *v17;
  int v18;
  os_log_type_t v19;
  _QWORD *v20;
  int v21;
  _QWORD *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_url_scheme";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_url_scheme";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_url_scheme";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_url_scheme";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_url_scheme";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_url_scheme";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_url_scheme";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_url_scheme";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_url_scheme";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_url_scheme";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[32];
LABEL_25:

  return v5;
}

void sub_18308C1D8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_delegated_proc_audit_token(void *a1, _QWORD *a2)
{
  _QWORD *v3;
  void *v4;
  _BOOL8 v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_parameters_has_delegated_proc_audit_token";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_47;
    }
    if (!v23)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    v17 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_47;
    }
    if (v17)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_parameters_has_delegated_proc_audit_token";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_35;
  }
  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_parameters_has_delegated_proc_audit_token";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_48;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null audit_token", buf, 0xCu);
      }
LABEL_47:

LABEL_48:
      if (v10)
        free(v10);
      goto LABEL_50;
    }
    if (!v23)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null audit_token, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_47;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_has_delegated_proc_audit_token";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null audit_token, no backtrace", buf, 0xCu);
      }
      goto LABEL_47;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v26 = "nw_parameters_has_delegated_proc_audit_token";
      v27 = 2082;
      v28 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null audit_token, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_35:

    free(backtrace_string);
    goto LABEL_48;
  }
  if (!(v3[5] | v3[6] | v3[7] | v3[8]))
  {
LABEL_50:
    v8 = 0;
    goto LABEL_51;
  }
  v8 = v3[5] != *a2 || v3[6] != a2[1] || v3[7] != a2[2] || v3[8] != a2[3];
LABEL_51:

  return v8;
}

uint64_t nw_resolver_derive_service_flags(void *a1, void *a2, void *a3)
{
  _BYTE *v5;
  id v6;
  NSObject *v7;
  int v8;
  unsigned int v9;
  id v10;
  int v11;
  id v12;
  int v13;
  _BOOL4 v14;
  int traffic_class;
  _BOOL4 prohibit_cellular;
  _BOOL4 prohibit_expensive;
  _BOOL4 prohibit_constrained;
  int use_awdl;
  int use_p2p;
  unsigned int v21;
  uint64_t v22;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  char v32;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v35;
  __int16 v36;
  char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  v7 = a3;
  if (v5)
  {
    v8 = 1073762304;
    v9 = 1073758208;
    if (v6)
    {
      v10 = v6;
      v11 = objc_msgSend(v10, "type");

      if (v11 != 3)
      {
        if ((nw_parameters_get_desperate_ivan(v7) & 1) == 0
          && (nw_parameters_get_allow_unusable_addresses(v7) & 1) == 0
          && ((v5[347] & 1) == 0 || (v5[346] & 0x40) != 0))
        {
          v8 = 1073795072;
        }
        if (nw_parameters_get_expired_dns_behavior(v7) == nw_parameters_expired_dns_behavior_prohibit)
        {
          v9 = v8;
        }
        else
        {
          v12 = v10;
          v13 = objc_msgSend(v12, "type");

          if (v13 == 2)
            v9 = v8 | 0x80000000;
          else
            v9 = v8;
        }
      }
    }
    v14 = nw_parameters_requires_dnssec_validation(v7);
    traffic_class = nw_parameters_get_traffic_class(v7);
    prohibit_cellular = nw_parameters_get_prohibit_cellular(v7);
    prohibit_expensive = nw_parameters_get_prohibit_expensive(v7);
    prohibit_constrained = nw_parameters_get_prohibit_constrained(v7);
    use_awdl = nw_parameters_get_use_awdl(v7);
    use_p2p = nw_parameters_get_use_p2p(v7);
    v21 = v9 | 0x200000;
    if (!v14)
      v21 = v9;
    if (traffic_class == 100)
      v21 |= 0x80000u;
    if (prohibit_cellular)
      v21 |= 0x8000000u;
    if (prohibit_expensive)
      v21 |= 0x20000000u;
    if (prohibit_constrained)
      v21 |= 0x2000u;
    if (use_awdl)
      v21 |= 0x100000u;
    if (use_p2p)
      v22 = v21 | 0x20000;
    else
      v22 = v21;
    goto LABEL_29;
  }
  __nwlog_obj();
  v24 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v35 = "nw_resolver_derive_service_flags";
  v25 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v32 = 0;
  if (__nwlog_fault(v25, &type, &v32))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_resolver_derive_service_flags";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null resolver", buf, 0xCu);
      }
    }
    else if (v32)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      v30 = os_log_type_enabled(v26, type);
      if (backtrace_string)
      {
        if (v30)
        {
          *(_DWORD *)buf = 136446466;
          v35 = "nw_resolver_derive_service_flags";
          v36 = 2082;
          v37 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s called with null resolver, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_46;
      }
      if (v30)
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_resolver_derive_service_flags";
        _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s called with null resolver, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v31 = type;
      if (os_log_type_enabled(v26, type))
      {
        *(_DWORD *)buf = 136446210;
        v35 = "nw_resolver_derive_service_flags";
        _os_log_impl(&dword_182FBE000, v26, v31, "%{public}s called with null resolver, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_46:
  if (v25)
    free(v25);
  v22 = 0;
LABEL_29:

  return v22;
}

void sub_18308CB00(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_use_p2p(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 108) >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_use_p2p";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_use_p2p";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_use_p2p";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_use_p2p";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_use_p2p";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_use_awdl(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (*(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 108) >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_use_awdl";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_use_awdl";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_use_awdl";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_use_awdl";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_use_awdl";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_socket_updated_path(nw_protocol *a1, nw_protocol *a2, nw_path *a3)
{
  int effective_traffic_class;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  const char *v10;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  _BOOL4 v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (a1->handle == &nw_protocol_ref_counted_handle)
    {
      effective_traffic_class = nw_path_get_effective_traffic_class(a3);
      nw_socket_set_traffic_class((uint64_t)&a1[1].output_handler, effective_traffic_class);
      if (LODWORD(a1[4].callbacks) != 9216)
        LODWORD(a1[4].callbacks) = nw_path_get_maximum_datagram_size(a3);
      return 1;
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_updated_path";
    v7 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (!__nwlog_fault(v7, &type, &v15))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_socket_updated_path";
        v10 = "%{public}s called with null socket_handler";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (!v15)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_socket_updated_path";
        v10 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v14 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_socket_updated_path";
        v10 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v14)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_socket_updated_path";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_23;
    }
    goto LABEL_24;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_socket_updated_path";
  v7 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (!__nwlog_fault(v7, &type, &v15))
    goto LABEL_34;
  if (type != OS_LOG_TYPE_FAULT)
  {
    if (!v15)
    {
      v8 = __nwlog_obj();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_socket_updated_path";
        v10 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v8 = __nwlog_obj();
    v9 = type;
    v12 = os_log_type_enabled(v8, type);
    if (!backtrace_string)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_socket_updated_path";
        v10 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_33;
      }
      goto LABEL_34;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446466;
      v18 = "nw_socket_updated_path";
      v19 = 2082;
      v20 = backtrace_string;
      v13 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v8, v9, v13, buf, 0x16u);
    }
LABEL_24:
    free(backtrace_string);
    goto LABEL_34;
  }
  v8 = __nwlog_obj();
  v9 = type;
  if (os_log_type_enabled(v8, type))
  {
    *(_DWORD *)buf = 136446210;
    v18 = "nw_socket_updated_path";
    v10 = "%{public}s called with null protocol";
LABEL_33:
    _os_log_impl(&dword_182FBE000, v8, v9, v10, buf, 0xCu);
  }
LABEL_34:
  if (v7)
    free(v7);
  return 0;
}

uint64_t nw_path_get_effective_traffic_class(void *a1)
{
  NWConcrete_nw_path *v1;
  NWConcrete_nw_path *v2;
  uint64_t effective_traffic_class;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_path_get_effective_traffic_class";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (__nwlog_fault(v5, &type, &v13))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_get_effective_traffic_class";
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v13)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        v10 = os_log_type_enabled(v6, type);
        if (backtrace_string)
        {
          if (v10)
          {
            *(_DWORD *)buf = 136446466;
            v16 = "nw_path_get_effective_traffic_class";
            v17 = 2082;
            v18 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v10)
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_get_effective_traffic_class";
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v6, type))
        {
          *(_DWORD *)buf = 136446210;
          v16 = "nw_path_get_effective_traffic_class";
          _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v5)
      free(v5);
    goto LABEL_23;
  }
  if (!nw_path_network_is_satisfied_update_reason(v1, 0))
  {
LABEL_23:
    effective_traffic_class = 0;
    goto LABEL_24;
  }
  effective_traffic_class = v2->effective_traffic_class;
  if (!(_DWORD)effective_traffic_class)
    effective_traffic_class = nw_parameters_get_traffic_class(v2->parameters);
LABEL_24:

  return effective_traffic_class;
}

void sub_18308D718(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_traffic_class(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(unsigned int *)(*((_QWORD *)v1 + 13) + 72);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_traffic_class";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_traffic_class";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_traffic_class";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_traffic_class";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_traffic_class";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_socket_set_traffic_class(uint64_t a1, int a2)
{
  uint64_t v2;
  NSObject *v4;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char v13;
  os_log_type_t type;
  int v15;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  _BYTE v19[14];
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v15 = a2;
  if (*(_DWORD *)(a1 + 192) == a2)
    return 0;
  if (!setsockopt(*(_DWORD *)(a1 + 196), 0xFFFF, 4230, &v15, 4u))
  {
    v2 = 0;
    *(_DWORD *)(a1 + 192) = v15;
    return v2;
  }
  v2 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v4 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446722;
    v17 = "nw_socket_set_traffic_class";
    v18 = 2080;
    *(_QWORD *)v19 = a1 + 340;
    *(_WORD *)&v19[8] = 1024;
    *(_DWORD *)&v19[10] = v2;
    _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d", buf, 0x1Cu);
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = gLogObj;
  if ((_DWORD)v2 == 22)
  {
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_socket_set_traffic_class";
      v18 = 1024;
      *(_DWORD *)v19 = 22;
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d", buf, 0x12u);
    }
    return v2;
  }
  *(_DWORD *)buf = 136446466;
  v17 = "nw_socket_set_traffic_class";
  v18 = 1024;
  *(_DWORD *)v19 = v2;
  v6 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446466;
      v17 = "nw_socket_set_traffic_class";
      v18 = 1024;
      *(_DWORD *)v19 = v2;
      v9 = "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d";
      goto LABEL_25;
    }
    if (!v13)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_26;
      *(_DWORD *)buf = 136446466;
      v17 = "nw_socket_set_traffic_class";
      v18 = 1024;
      *(_DWORD *)v19 = v2;
      v9 = "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d, backtrace limit exceeded";
      goto LABEL_25;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v11 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (backtrace_string)
    {
      if (v11)
      {
        *(_DWORD *)buf = 136446722;
        v17 = "nw_socket_set_traffic_class";
        v18 = 1024;
        *(_DWORD *)v19 = v2;
        *(_WORD *)&v19[4] = 2082;
        *(_QWORD *)&v19[6] = backtrace_string;
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
      }
      free(backtrace_string);
      goto LABEL_26;
    }
    if (v11)
    {
      *(_DWORD *)buf = 136446466;
      v17 = "nw_socket_set_traffic_class";
      v18 = 1024;
      *(_DWORD *)v19 = v2;
      v9 = "%{public}s setsockopt SO_TRAFFIC_CLASS failed %{darwin.errno}d, no backtrace";
LABEL_25:
      _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0x12u);
    }
  }
LABEL_26:
  if (v6)
    free(v6);
  return v2;
}

BOOL nw_parameters_requires_dnssec_validation(nw_parameters_t parameters)
{
  nw_parameters_t v1;
  nw_parameters_t v2;
  _BOOL4 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = parameters;
  v2 = v1;
  if (v1)
  {
    v3 = (BYTE3(v1[12].isa) >> 6) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_requires_dnssec_validation";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_requires_dnssec_validation";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_requires_dnssec_validation";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_requires_dnssec_validation";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_requires_dnssec_validation";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  LOBYTE(v3) = 0;
LABEL_3:

  return v3;
}

nw_parameters_expired_dns_behavior_t nw_parameters_get_expired_dns_behavior(nw_parameters_t parameters)
{
  nw_parameters_t v1;
  nw_parameters_t v2;
  nw_parameters_expired_dns_behavior_t isa_high;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = parameters;
  v2 = v1;
  if (v1)
  {
    isa_high = HIBYTE(v1[11].isa);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_expired_dns_behavior";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_expired_dns_behavior";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_expired_dns_behavior";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_expired_dns_behavior";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_expired_dns_behavior";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa_high = nw_parameters_expired_dns_behavior_default;
LABEL_3:

  return isa_high;
}

BOOL nw_copy_current_audit_token(_OWORD *a1)
{
  __int128 v2;
  int v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  const char *v14;
  char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  _WORD v22[17];

  *(_QWORD *)&v22[13] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (nw_copy_current_audit_token::onceToken != -1)
      dispatch_once(&nw_copy_current_audit_token::onceToken, &__block_literal_global_47692);
    if (nw_copy_current_audit_token::valid)
    {
      v2 = unk_1ECD849B8;
      *a1 = nw_copy_current_audit_token::my_audit_token;
      a1[1] = v2;
      return 1;
    }
    v4 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v20 = "nw_copy_current_audit_token";
    v21 = 1024;
    *(_DWORD *)v22 = v4;
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v5, &type, &v17))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v20 = "nw_copy_current_audit_token";
        v21 = 1024;
        *(_DWORD *)v22 = v4;
        v8 = "%{public}s task_info(mach_task_self(), TASK_AUDIT_TOKEN, (integer_t *) &audit_token, &info_size) failed %{darwin.errno}d";
LABEL_19:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0x12u);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      v10 = os_log_type_enabled((os_log_t)gLogObj, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446722;
          v20 = "nw_copy_current_audit_token";
          v21 = 1024;
          *(_DWORD *)v22 = v4;
          v22[2] = 2082;
          *(_QWORD *)&v22[3] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s task_info(mach_task_self(), TASK_AUDIT_TOKEN, (integer_t *) &audit_token, &info_size) failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446466;
        v20 = "nw_copy_current_audit_token";
        v21 = 1024;
        *(_DWORD *)v22 = v4;
        v8 = "%{public}s task_info(mach_task_self(), TASK_AUDIT_TOKEN, (integer_t *) &audit_token, &info_size) failed %{d"
             "arwin.errno}d, no backtrace";
        goto LABEL_19;
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v6 = gLogObj;
      v7 = type;
      if (os_log_type_enabled((os_log_t)gLogObj, type))
      {
        *(_DWORD *)buf = 136446466;
        v20 = "nw_copy_current_audit_token";
        v21 = 1024;
        *(_DWORD *)v22 = v4;
        v8 = "%{public}s task_info(mach_task_self(), TASK_AUDIT_TOKEN, (integer_t *) &audit_token, &info_size) failed %{d"
             "arwin.errno}d, backtrace limit exceeded";
        goto LABEL_19;
      }
    }
LABEL_20:
    if (v5)
      free(v5);
    return nw_copy_current_audit_token::valid != 0;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v20 = "nw_copy_current_audit_token";
  v11 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v17 = 0;
  if (__nwlog_fault(v11, &type, &v17))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_copy_current_audit_token";
        v14 = "%{public}s called with null audit_token";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v12, v13, v14, buf, 0xCu);
      }
    }
    else if (v17)
    {
      v15 = (char *)__nw_create_backtrace_string();
      v12 = __nwlog_obj();
      v13 = type;
      v16 = os_log_type_enabled(v12, type);
      if (v15)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_copy_current_audit_token";
          v21 = 2082;
          *(_QWORD *)v22 = v15;
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null audit_token, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v15);
        goto LABEL_37;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_copy_current_audit_token";
        v14 = "%{public}s called with null audit_token, no backtrace";
        goto LABEL_36;
      }
    }
    else
    {
      v12 = __nwlog_obj();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_copy_current_audit_token";
        v14 = "%{public}s called with null audit_token, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
  }
LABEL_37:
  if (v11)
    free(v11);
  return 0;
}

BOOL nw_context_get_require_encrypted_name_resolution(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  char v3;
  _BOOL8 v4;
  _BOOL8 v5;
  int v6;
  _BOOL8 v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_context_get_require_encrypted_name_resolution";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_context_get_require_encrypted_name_resolution";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_context_get_require_encrypted_name_resolution";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_context_get_require_encrypted_name_resolution";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_context_get_require_encrypted_name_resolution";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_28:
    if (v10)
      free(v10);
    v5 = 0;
    goto LABEL_11;
  }
  v3 = v1[136];
  if ((v3 & 0x48) != 0x40)
    goto LABEL_5;
  if (dispatch_workloop_is_current())
  {
    v3 = v2[136];
LABEL_5:
    if (v3 < 0)
    {
      v5 = 1;
    }
    else
    {
      v4 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
      v5 = *(char *)(v4 + 136) < 0;

    }
    goto LABEL_11;
  }
  os_unfair_lock_lock((os_unfair_lock_t)v2 + 20);
  v6 = (char)v2[136];
  if ((v6 & 0x80000000) == 0)
  {
    v7 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
    LOBYTE(v6) = *(_BYTE *)(v7 + 136);

  }
  v5 = (v6 & 0x80u) != 0;
  os_unfair_lock_unlock((os_unfair_lock_t)v2 + 20);
LABEL_11:

  return v5;
}

void sub_18308EAC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_effective_audit_token(void *a1, _OWORD *a2)
{
  _QWORD *v3;
  void *v4;
  __int128 v5;
  uint64_t v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_parameters_get_effective_audit_token";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v8, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_parameters_get_effective_audit_token";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_parameters_get_effective_audit_token";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_20;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_parameters_get_effective_audit_token";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_parameters_get_effective_audit_token";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_20:
    if (v8)
      free(v8);
    goto LABEL_22;
  }
  if (!(v3[5] | v3[6] | v3[7] | v3[8]))
  {
LABEL_22:
    v6 = 0;
    goto LABEL_23;
  }
  v5 = *(_OWORD *)(v3 + 7);
  *a2 = *(_OWORD *)(v3 + 5);
  a2[1] = v5;
  v6 = 1;
LABEL_23:

  return v6;
}

BOOL nw_connection_is_unlisted_tracker(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  uint64_t *v15;
  char v16;
  os_log_type_t type;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char v21;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  v18 = 0;
  v19 = &v18;
  v20 = 0x2020000000;
  v21 = 0;
  if (v1)
  {
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_is_unlisted_tracker_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v15 = &v18;
    v14 = v1;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_is_unlisted_tracker_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *((_BYTE *)v19 + 24) != 0;

    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_is_unlisted_tracker";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_is_unlisted_tracker";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_connection_is_unlisted_tracker";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_is_unlisted_tracker";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_is_unlisted_tracker";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:
  _Block_object_dispose(&v18, 8);

  return v3;
}

uint64_t __nw_connection_is_unlisted_tracker_block_invoke(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = (*(_BYTE *)(*(_QWORD *)(result + 32) + 110) & 2) != 0;
  return result;
}

uint64_t nw_establishment_report_get_attempt_started_after_milliseconds(nw_establishment_report_t report)
{
  nw_establishment_report_t v1;
  nw_establishment_report_t v2;
  uint64_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = report;
  v2 = v1;
  if (v1)
  {
    isa = (uint64_t)v1[1].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_attempt_started_after_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = 0;
LABEL_3:

  return isa;
}

uint64_t nw_establishment_report_get_resolution_started_after_milliseconds(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 3);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_resolution_started_after_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_establishment_report_get_flow_started_after_milliseconds(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 4);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_flow_started_after_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_establishment_report_get_duration_milliseconds(nw_establishment_report_t report)
{
  nw_establishment_report_t v1;
  nw_establishment_report_t v2;
  uint64_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = report;
  v2 = v1;
  if (v1)
  {
    isa = (uint64_t)v1[2].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_establishment_report_get_duration_milliseconds";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_duration_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_establishment_report_get_duration_milliseconds";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_duration_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_establishment_report_get_duration_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = 0;
LABEL_3:

  return isa;
}

id nw_endpoint_copy_parent_endpoint(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[14];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_copy_parent_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_parent_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_copy_parent_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_parent_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_copy_parent_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_sensitive_redacted_for_endpoint(void *a1, void *a2)
{
  id v3;
  id v4;
  _QWORD *v5;
  _DWORD *v6;
  void *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;

  v3 = a1;
  v4 = a2;
  if (!v3)
    goto LABEL_18;
  v5 = v3;
  v6 = *(id *)(v5[13] + 136);
  v7 = v6;
  if (v6)
  {
    v8 = v6[31];
    if ((v8 - 2) >= 2)
    {
      if (v8 == 1)
      {

        goto LABEL_10;
      }

LABEL_17:
      goto LABEL_18;
    }
  }
  if (nwlog_get_sensitive_redacted::onceToken != -1)
    dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
  v9 = nwlog_get_sensitive_redacted::sensitiveRedacted;

  if (v9)
    goto LABEL_17;
LABEL_10:
  if (*(unsigned __int8 *)(v5[13] + 102) - 1 < 2)
  {
    if (nwlog_get_sensitive_redacted::onceToken != -1)
      dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
    v10 = nwlog_get_sensitive_redacted::sensitiveRedacted;

    if (!v10)
    {
LABEL_20:
      v11 = 0;
      goto LABEL_22;
    }
LABEL_18:
    if (!v4 || !nw_endpoint_get_do_not_redact(v4))
    {
      v11 = 1;
      goto LABEL_22;
    }
    goto LABEL_20;
  }

  v11 = 0;
LABEL_22:

  return v11;
}

void sub_183090050(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_18309026C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL nw_endpoint_get_do_not_redact(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v4;
  int v5;
  _BOOL8 v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((*((_BYTE *)v1 + 231) & 0x20) != 0)
    {
      v6 = 1;
    }
    else
    {
      v3 = v1[1];
      v4 = v3;
      if (v3 && (v5 = *((_DWORD *)v3 + 31), (v5 - 2) >= 2))
      {
        v6 = v5 == 1;
      }
      else
      {
        if (nwlog_get_sensitive_redacted::onceToken != -1)
          dispatch_once(&nwlog_get_sensitive_redacted::onceToken, &__block_literal_global_59);
        v6 = nwlog_get_sensitive_redacted::sensitiveRedacted == 0;
      }

    }
    goto LABEL_11;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_endpoint_get_do_not_redact";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_get_do_not_redact";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null endpoint", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_endpoint_get_do_not_redact";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_get_do_not_redact";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_endpoint_get_do_not_redact";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_28:
  if (v9)
    free(v9);
  v6 = 0;
LABEL_11:

  return v6;
}

uint64_t nw_settings_setup_atfork_inner(void)
{
  return pthread_atfork((void (*)(void))nw_settings_prepare_fork, nw_settings_parent_has_forked, nw_settings_child_has_forked);
}

uint64_t nw_path_get_tso_max_segment_size_v4(void *a1)
{
  NWConcrete_nw_path *v1;
  NWConcrete_nw_path *v2;
  OS_nw_interface *direct;
  OS_nw_interface *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_path_get_tso_max_segment_size_v4";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_path_get_tso_max_segment_size_v4";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_path_get_tso_max_segment_size_v4";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_path_get_tso_max_segment_size_v4";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_path_get_tso_max_segment_size_v4";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v7)
      free(v7);
    goto LABEL_23;
  }
  if (!nw_path_network_is_satisfied_update_reason(v1, 0) || (direct = v2->direct) == 0)
  {
LABEL_23:
    v5 = 0;
    goto LABEL_24;
  }
  v4 = direct;
  v5 = *((unsigned int *)v4 + 16);

LABEL_24:
  return v5;
}

void sub_1830909CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void __nw_context_copy_implicit_context_block_invoke()
{
  _BOOL8 v0;
  void *v1;
  _DWORD *v2;
  char *v3;
  const char *v4;
  NSObject *v5;
  int v6;
  int v7;
  const char *v8;
  __int16 v9;
  const char *v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v0 = -[NWConcrete_nw_context initWithIdentifier:]([NWConcrete_nw_context alloc], "Default Network Context");
  v1 = (void *)nw_context_copy_implicit_context::implicit_context;
  nw_context_copy_implicit_context::implicit_context = v0;

  v2 = (_DWORD *)nw_context_copy_implicit_context::implicit_context;
  *(_BYTE *)(nw_context_copy_implicit_context::implicit_context + 136) |= 4u;
  v3 = getenv("DEFAULT_NETWORK_PRIVACY_LEVEL");
  if (v3)
  {
    v4 = v3;
    if (!strcasecmp(v3, "public"))
    {
      v6 = 1;
      goto LABEL_11;
    }
    if (strcasecmp(v4, "private"))
    {
      if (!strcasecmp(v4, "sensitive"))
      {
        v6 = 3;
        goto LABEL_11;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v5 = (id)gLogObj;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v7 = 136446466;
        v8 = "nw_context_get_default_implicit_level";
        v9 = 2082;
        v10 = v4;
        _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s Unsupported privacy level: %{public}s", (uint8_t *)&v7, 0x16u);
      }

      v2 = (_DWORD *)nw_context_copy_implicit_context::implicit_context;
    }
  }
  v6 = 2;
LABEL_11:
  v2[31] = v6;
  nw_context_activate(v2);
}

BOOL nw_channel_add_input_handler(nw_protocol *a1, nw_protocol *uu)
{
  char *handle;
  NSObject *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  const char *v9;
  uint64_t internal;
  char *backtrace_string;
  _BOOL4 v12;
  const char *v13;
  _BOOL8 v14;
  _BOOL8 v15;
  void *v16;
  uint64_t extra;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  char v24;
  nw_protocol_callbacks *callbacks;
  char v26;
  nw_protocol *output_handler;
  nw_protocol_callbacks *v28;
  nw_protocol_callbacks *v29;
  uint64_t (*get_parameters)(nw_protocol *);
  void *v31;
  NSObject *v32;
  nw_protocol_callbacks *v33;
  _BYTE *v34;
  BOOL v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  nw_protocol_callbacks *v40;
  nw_protocol_callbacks *v41;
  void (**v42)(_QWORD);
  const void *v43;
  _BOOL4 v44;
  nw_protocol_callbacks *v45;
  nw_protocol_callbacks *v46;
  void (**v47)(_QWORD);
  const void *v48;
  _BOOL4 v49;
  _BOOL4 v50;
  char v51;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v54;
  __int16 v55;
  _WORD v56[17];

  *(_QWORD *)&v56[13] = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_channel_add_input_handler";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v6, &type, &v51))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_channel_add_input_handler";
        v9 = "%{public}s called with null channel_protocol";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (!v51)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_channel_add_input_handler";
        v9 = "%{public}s called with null channel_protocol, backtrace limit exceeded";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v49 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v49)
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_channel_add_input_handler";
        v9 = "%{public}s called with null channel_protocol, no backtrace";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (!v49)
      goto LABEL_19;
    *(_DWORD *)buf = 136446466;
    v54 = "nw_channel_add_input_handler";
    v55 = 2082;
    *(_QWORD *)v56 = backtrace_string;
    v13 = "%{public}s called with null channel_protocol, dumping backtrace:%{public}s";
LABEL_18:
    _os_log_impl(&dword_182FBE000, v7, v8, v13, buf, 0x16u);
    goto LABEL_19;
  }
  handle = (char *)a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_channel_add_input_handler";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v6, &type, &v51))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_channel_add_input_handler";
        v9 = "%{public}s called with null channel";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (!v51)
    {
      v7 = __nwlog_obj();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_channel_add_input_handler";
        v9 = "%{public}s called with null channel, backtrace limit exceeded";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v7 = __nwlog_obj();
    v8 = type;
    v50 = os_log_type_enabled(v7, type);
    if (!backtrace_string)
    {
      if (v50)
      {
        *(_DWORD *)buf = 136446210;
        v54 = "nw_channel_add_input_handler";
        v9 = "%{public}s called with null channel, no backtrace";
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (!v50)
      goto LABEL_19;
    *(_DWORD *)buf = 136446466;
    v54 = "nw_channel_add_input_handler";
    v55 = 2082;
    *(_QWORD *)v56 = backtrace_string;
    v13 = "%{public}s called with null channel, dumping backtrace:%{public}s";
    goto LABEL_18;
  }
  if (!uu)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_channel_add_input_handler";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (!__nwlog_fault(v6, &type, &v51))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_72;
      *(_DWORD *)buf = 136446210;
      v54 = "nw_channel_add_input_handler";
      v9 = "%{public}s called with null input_protocol";
      goto LABEL_71;
    }
    if (!v51)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v7 = gLogObj;
      v8 = type;
      if (!os_log_type_enabled((os_log_t)gLogObj, type))
        goto LABEL_72;
      *(_DWORD *)buf = 136446210;
      v54 = "nw_channel_add_input_handler";
      v9 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_71;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = gLogObj;
    v8 = type;
    v12 = os_log_type_enabled((os_log_t)gLogObj, type);
    if (!backtrace_string)
    {
      if (!v12)
        goto LABEL_72;
      *(_DWORD *)buf = 136446210;
      v54 = "nw_channel_add_input_handler";
      v9 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_71;
    }
    if (!v12)
    {
LABEL_19:
      free(backtrace_string);
      goto LABEL_72;
    }
    *(_DWORD *)buf = 136446466;
    v54 = "nw_channel_add_input_handler";
    v55 = 2082;
    *(_QWORD *)v56 = backtrace_string;
    v13 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_18;
  }
  if (!uuid_is_null(uu->flow_id))
  {
    *((_WORD *)handle + 222) |= 0x100u;
    internal = *((_QWORD *)handle + 35);
    if (internal)
      goto LABEL_23;
LABEL_21:
    internal = nw_hash_table_create_internal(0x11u, 128, (const void *(*)(const void *, unsigned int *))nw_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_protocol_matches_key, 0);
    if (internal)
    {
      *(_DWORD *)(internal + 48) &= ~2u;
      *((_QWORD *)handle + 35) = internal;
      goto LABEL_23;
    }
    *((_QWORD *)handle + 35) = 0;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446210;
    v54 = "nw_channel_add_input_handler";
    v6 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v51 = 0;
    if (__nwlog_fault(v6, &type, &v51))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = gLogObj;
        v8 = type;
        if (!os_log_type_enabled((os_log_t)gLogObj, type))
          goto LABEL_72;
        *(_DWORD *)buf = 136446210;
        v54 = "nw_channel_add_input_handler";
        v9 = "%{public}s nw_protocol_hash_table_create failed";
        goto LABEL_71;
      }
      if (v51)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v7 = __nwlog_obj();
        v8 = type;
        v44 = os_log_type_enabled(v7, type);
        if (backtrace_string)
        {
          if (!v44)
            goto LABEL_19;
          *(_DWORD *)buf = 136446466;
          v54 = "nw_channel_add_input_handler";
          v55 = 2082;
          *(_QWORD *)v56 = backtrace_string;
          v13 = "%{public}s nw_protocol_hash_table_create failed, dumping backtrace:%{public}s";
          goto LABEL_18;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_channel_add_input_handler";
          v9 = "%{public}s nw_protocol_hash_table_create failed, no backtrace";
          goto LABEL_71;
        }
      }
      else
      {
        v7 = __nwlog_obj();
        v8 = type;
        if (os_log_type_enabled(v7, type))
        {
          *(_DWORD *)buf = 136446210;
          v54 = "nw_channel_add_input_handler";
          v9 = "%{public}s nw_protocol_hash_table_create failed, backtrace limit exceeded";
LABEL_71:
          _os_log_impl(&dword_182FBE000, v7, v8, v9, buf, 0xCu);
        }
      }
    }
LABEL_72:
    if (v6)
      free(v6);
    return 0;
  }
  if (*((_QWORD *)handle + 34))
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v54 = "nw_channel_add_input_handler";
      _os_log_impl(&dword_182FBE000, v5, OS_LOG_TYPE_ERROR, "%{public}s Channel already has input handler registered as default", buf, 0xCu);
    }
    return 0;
  }
  *((_QWORD *)handle + 34) = uu;
  internal = *((_QWORD *)handle + 35);
  if (!internal)
    goto LABEL_21;
LABEL_23:
  type = OS_LOG_TYPE_DEFAULT;
  v14 = nw_hash_table_add_object(internal, (uint64_t)uu, (char *)&type);
  v15 = type != OS_LOG_TYPE_DEFAULT;
  if (type)
  {
    v16 = (void *)v14;
    extra = nw_hash_node_get_extra(v14);
    *(_OWORD *)extra = 0u;
    *(_OWORD *)(extra + 16) = 0u;
    *(_OWORD *)(extra + 32) = 0u;
    *(_OWORD *)(extra + 48) = 0u;
    *(_OWORD *)(extra + 64) = 0u;
    *(_OWORD *)(extra + 80) = 0u;
    *(_OWORD *)(extra + 96) = 0u;
    *(_OWORD *)(extra + 112) = 0u;
    *(_QWORD *)(extra + 8) = extra;
    if (!uuid_is_null((const unsigned __int8 *)handle + 352)
      && !uuid_compare((const unsigned __int8 *)handle + 352, uu->flow_id))
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v18 = gLogObj;
      if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446722;
        v54 = "nw_channel_add_input_handler";
        v55 = 1042;
        *(_DWORD *)v56 = 16;
        v56[2] = 2098;
        *(_QWORD *)&v56[3] = uu;
        _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s Adding pending input frames for %{public,uuid_t}.16P", buf, 0x1Cu);
      }
      v19 = *((_QWORD *)handle + 42);
      if (v19)
      {
        **(_QWORD **)(extra + 8) = v19;
        *(_QWORD *)(*((_QWORD *)handle + 42) + 40) = *(_QWORD *)(extra + 8);
        *(_QWORD *)(extra + 8) = *((_QWORD *)handle + 43);
        *((_QWORD *)handle + 42) = 0;
        *((_QWORD *)handle + 43) = handle + 336;
      }
      uuid_clear((unsigned __int8 *)handle + 352);
      v21 = *((_QWORD *)handle + 24);
      if (v21)
      {
        nw_queue_cancel_source(v21, v20);
        *((_QWORD *)handle + 24) = 0;
      }
    }
    v22 = *(void **)(extra + 16);
    if (v22)
    {
      os_release(v22);
      *(_QWORD *)(extra + 16) = 0;
    }
    v23 = *(void **)(extra + 72);
    if (v23)
    {
      os_release(v23);
      *(_QWORD *)(extra + 72) = 0;
    }
    v24 = 0;
    *(_QWORD *)(extra + 72) = nw_link_info_create(0);
    if (uu->handle == &nw_protocol_ref_counted_handle)
    {
      callbacks = uu[1].callbacks;
      if (callbacks)
        uu[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
      v24 = 1;
    }
    v26 = *(_BYTE *)(extra + 32);
    if ((v26 & 1) != 0)
    {
      nw::release_if_needed<nw_protocol *>((uint64_t *)(extra + 24));
      v26 = *(_BYTE *)(extra + 32);
    }
    *(_QWORD *)(extra + 24) = uu;
    *(_BYTE *)(extra + 32) = v26 & 0xFE | v24;
    uuid_unparse(uu->flow_id, (char *)(extra + 84));
    uu->output_handler_context = v16;
    output_handler = uu->output_handler;
    if (output_handler != a1)
    {
      if (output_handler)
      {
        if (output_handler->handle == &nw_protocol_ref_counted_handle)
        {
          v40 = output_handler[1].callbacks;
          if (v40)
          {
            v41 = (nw_protocol_callbacks *)((char *)v40 - 1);
            output_handler[1].callbacks = v41;
            if (!v41)
            {
              v42 = *(void (***)(_QWORD))output_handler[1].flow_id;
              if (v42)
              {
                *(_QWORD *)output_handler[1].flow_id = 0;
                v42[2](v42);
                _Block_release(v42);
              }
              if ((output_handler[1].flow_id[8] & 1) != 0)
              {
                v43 = *(const void **)output_handler[1].flow_id;
                if (v43)
                  _Block_release(v43);
              }
              free(output_handler);
            }
          }
        }
      }
      uu->output_handler = a1;
      if (a1->handle == &nw_protocol_ref_counted_handle)
      {
        v28 = a1[1].callbacks;
        if (v28)
          a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v28->add_input_handler + 1);
      }
    }
    v29 = uu->callbacks;
    if (v29)
    {
      get_parameters = (uint64_t (*)(nw_protocol *))v29->get_parameters;
      if (get_parameters)
      {
        if (uu->handle == &nw_protocol_ref_counted_handle)
        {
          v33 = uu[1].callbacks;
          if (v33)
            uu[1].callbacks = (nw_protocol_callbacks *)((char *)&v33->add_input_handler + 1);
          v31 = (void *)get_parameters(uu);
          if (uu->handle == &nw_protocol_ref_counted_handle)
          {
            v45 = uu[1].callbacks;
            if (v45)
            {
              v46 = (nw_protocol_callbacks *)((char *)v45 - 1);
              uu[1].callbacks = v46;
              if (!v46)
              {
                v47 = *(void (***)(_QWORD))uu[1].flow_id;
                if (v47)
                {
                  *(_QWORD *)uu[1].flow_id = 0;
                  v47[2](v47);
                  _Block_release(v47);
                }
                if ((uu[1].flow_id[8] & 1) != 0)
                {
                  v48 = *(const void **)uu[1].flow_id;
                  if (v48)
                    _Block_release(v48);
                }
                free(uu);
              }
            }
          }
        }
        else
        {
          v31 = (void *)get_parameters(uu);
        }
        if (v31)
        {
          v34 = v31;
          v35 = v34[92] == 1;

          *(_BYTE *)(extra + 121) = *(_BYTE *)(extra + 121) & 0xFB | (4 * v35);
        }
      }
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v36 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v54 = "nw_channel_add_input_handler";
      v55 = 1042;
      *(_DWORD *)v56 = 16;
      v56[2] = 2098;
      *(_QWORD *)&v56[3] = uu;
      _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s Added channel input handler for %{public,uuid_t}.16P", buf, 0x1Cu);
    }
    v38 = *((_QWORD *)handle + 25);
    if (v38)
    {
      nw_queue_cancel_source(v38, v37);
      *((_QWORD *)handle + 25) = 0;
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v32 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      v54 = "nw_channel_add_input_handler";
      v55 = 1042;
      *(_DWORD *)v56 = 16;
      v56[2] = 2098;
      *(_QWORD *)&v56[3] = uu;
      _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_ERROR, "%{public}s Channel already has input handler registered for %{public,uuid_t}.16P", buf, 0x1Cu);
    }
  }
  return v15;
}

uint64_t nw_protocol_default_get_parameters(nw_protocol *a1)
{
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_parameters)(void);
  NSObject *v6;
  nw_protocol_identifier *identifier;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  nw_protocol_identifier *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_default_get_parameters";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v8, &type, &v14))
      goto LABEL_24;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_default_get_parameters";
      v11 = "%{public}s called with null protocol";
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_default_get_parameters";
          v18 = 2082;
          v19 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_24;
      }
      if (!v13)
      {
LABEL_24:
        if (v8)
          free(v8);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_default_get_parameters";
      v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_24;
      *(_DWORD *)buf = 136446210;
      v17 = "nw_protocol_default_get_parameters";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    goto LABEL_24;
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      get_parameters = (uint64_t (*)(void))callbacks->get_parameters;
      if (get_parameters)
        return get_parameters();
    }
  }
  v6 = __nwlog_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    identifier = (nw_protocol_identifier *)"<null>";
    if (a1->identifier)
      identifier = a1->identifier;
    *(_DWORD *)buf = 136446466;
    v17 = "nw_protocol_default_get_parameters";
    v18 = 2082;
    v19 = identifier;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Protocol %{public}s does not support get parameters", buf, 0x16u);
  }
  return 0;
}

void nw_parameters_set_context(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  _BOOL8 v6;
  uint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_parameters_set_context";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v10, &type, &v23))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_set_context";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_parameters_set_context";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v10)
          goto LABEL_4;
LABEL_39:
        free(v10);
        goto LABEL_4;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_set_context";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_parameters_set_context";
        _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  if (v4)
  {
    nw_context_activate(v4);
    v6 = nw_context_copy_cache_context(v5);
    v7 = v3[13];
    v8 = *(void **)(v7 + 136);
    *(_QWORD *)(v7 + 136) = v6;

    goto LABEL_4;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_parameters_set_context";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v10, &type, &v23))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v14 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_parameters_set_context";
      _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null context", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (!v23)
  {
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    if (os_log_type_enabled(v11, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_parameters_set_context";
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_37;
  }
  v18 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  v19 = type;
  v20 = os_log_type_enabled(v11, type);
  if (!v18)
  {
    if (v20)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_parameters_set_context";
      _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null context, no backtrace", buf, 0xCu);
    }
    goto LABEL_37;
  }
  if (v20)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_parameters_set_context";
    v27 = 2082;
    v28 = v18;
    _os_log_impl(&dword_182FBE000, v11, v19, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v18);
  if (v10)
    goto LABEL_39;
LABEL_4:

}

void sub_183092878(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_endpoint_flow_initialize_protocol(void *a1, uint64_t a2, int a3)
{
  NWConcrete_nw_endpoint_handler *v6;
  NWConcrete_nw_endpoint_handler *v7;
  unsigned int mode;
  NWConcrete_nw_endpoint_mode_handler *v9;
  NWConcrete_nw_endpoint_mode_handler *v10;
  uint64_t (*v11)(nw_protocol *);
  void *v12;
  void (*v13)(nw_protocol *, nw_protocol *);
  uint64_t internal;
  __int16 v15;
  NWConcrete_nw_endpoint_handler *v16;
  NWConcrete_nw_endpoint_mode_handler *v17;
  NWConcrete_nw_endpoint_mode_handler *v18;
  id *v19;
  id v20;
  void *v21;
  id v22;
  void *v23;
  uint64_t v24;
  id *v25;
  char v26;
  id v27;
  id *v28;
  id *v29;
  char v30;
  const char *v31;
  nw_endpoint_t v32;
  unsigned int *v33;
  unsigned int *v34;
  uint64_t v35;
  const char *v36;
  void **v37;
  void **v38;
  const char *v39;
  void **v40;
  id v41;
  NSObject *v42;
  os_log_type_t v43;
  id *v44;
  id *v45;
  _BOOL4 v46;
  const char *v47;
  nw_endpoint_t v48;
  const char *v49;
  id *v50;
  id *v51;
  uint64_t v52;
  const char *v53;
  const char *v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  const char *id_string;
  const char *v59;
  const char *v60;
  const char *v61;
  const char *v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  const char *v66;
  const char *v67;
  const char *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  id v72;
  void **v73;
  const char *v74;
  os_log_type_t v75;
  const char *v76;
  const char *v77;
  const char *v78;
  const char *v79;
  const char *v80;
  const char *v81;
  id v82;
  void **v83;
  id v84;
  char *v85;
  void *v86;
  char *v87;
  NSObject *v88;
  os_log_type_t v89;
  char *backtrace_string;
  os_log_type_t v91;
  _BOOL4 v92;
  char *v93;
  void *v94;
  const char *v95;
  NSObject *v96;
  os_log_type_t v97;
  os_log_type_t v98;
  char *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  id v102;
  const char *v103;
  void *v104;
  NSObject *v105;
  os_log_type_t v106;
  const char *v107;
  char *v108;
  os_log_type_t v109;
  _BOOL4 v110;
  const char *v111;
  os_log_type_t v112;
  const char *v113;
  const char *v114;
  os_log_type_t v115;
  os_unfair_lock_s *lock;
  unsigned int *v117;
  const char *v118;
  id *v119;
  char *v120;
  os_log_t log;
  NSObject *loga;
  NSObject *logb;
  NSObject *logc;
  NSObject *logd;
  id *v126;
  const char *v127;
  const char *v128;
  char *v129;
  nw_endpoint_t v130;
  nw_endpoint_t v131;
  nw_endpoint_t v132;
  const char *logging_description;
  const char *v134;
  NWConcrete_nw_endpoint_handler *v135;
  char v136;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v139;
  __int16 v140;
  void *v141;
  __int16 v142;
  const char *v143;
  __int16 v144;
  void *v145;
  __int16 v146;
  void *v147;
  __int16 v148;
  const char *v149;
  __int16 v150;
  id v151;
  __int16 v152;
  char *v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  v7 = v6;
  if (!v6)
  {
    __nwlog_obj();
    v86 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v139 = "nw_endpoint_handler_get_mode";
    v87 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v136 = 0;
    if (__nwlog_fault(v87, &type, &v136))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v88 = objc_claimAutoreleasedReturnValue();
        v89 = type;
        if (os_log_type_enabled(v88, type))
        {
          *(_DWORD *)buf = 136446210;
          v139 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v88, v89, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v136)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v88 = objc_claimAutoreleasedReturnValue();
        v91 = type;
        v92 = os_log_type_enabled(v88, type);
        if (backtrace_string)
        {
          if (v92)
          {
            *(_DWORD *)buf = 136446466;
            v139 = "nw_endpoint_handler_get_mode";
            v140 = 2082;
            v141 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v88, v91, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_100;
        }
        if (v92)
        {
          *(_DWORD *)buf = 136446210;
          v139 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v88, v91, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v88 = objc_claimAutoreleasedReturnValue();
        v98 = type;
        if (os_log_type_enabled(v88, type))
        {
          *(_DWORD *)buf = 136446210;
          v139 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v88, v98, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_100:
    if (v87)
      free(v87);
    mode = 0;
    goto LABEL_103;
  }
  mode = v6->mode;

  if (mode == 2)
  {
    v9 = nw_endpoint_handler_copy_flow(v7);
    v10 = v9;
    if ((*((_BYTE *)v9 + 32) & 8) == 0)
    {
      *((_BYTE *)v9 + 32) |= 8u;
      strcpy((char *)v9 + 48, "endpoint_flow");
      *((_QWORD *)v9 + 10) = 0x100000004;
      if (a3)
      {
        *((_QWORD *)v9 + 19) = nw_flow_input_available;
        *((_QWORD *)v9 + 20) = nw_flow_output_available;
        *((_QWORD *)v9 + 34) = nw_flow_input_finished;
        v11 = nw_flow_supports_external_data;
        v12 = nw_flow_notify;
        v13 = nw_flow_disconnected;
      }
      else
      {
        *((_QWORD *)v9 + 44) = nw_protocol_default_input_flush;
        *((_QWORD *)v9 + 24) = nw_protocol_default_link_state;
        *((_QWORD *)v9 + 25) = nw_protocol_default_get_parameters;
        *((_QWORD *)v9 + 26) = nw_protocol_default_get_path;
        *((_QWORD *)v9 + 27) = nw_protocol_default_get_local;
        *((_QWORD *)v9 + 32) = nw_protocol_default_updated_path;
        *((_QWORD *)v9 + 36) = nw_protocol_default_get_output_local;
        *((_QWORD *)v9 + 37) = nw_protocol_default_get_output_interface;
        *((_QWORD *)v9 + 13) = nw_protocol_default_replace_input_handler;
        *((_QWORD *)v9 + 14) = nw_protocol_default_connect;
        *((_QWORD *)v9 + 15) = nw_protocol_default_disconnect;
        *((_QWORD *)v9 + 16) = nw_protocol_default_connected;
        *((_QWORD *)v9 + 42) = nw_protocol_default_get_message_properties;
        *((_QWORD *)v9 + 43) = nw_protocol_default_reset;
        *((_QWORD *)v9 + 38) = nw_protocol_default_waiting_for_output;
        *((_QWORD *)v9 + 39) = nw_protocol_default_copy_info;
        *((_QWORD *)v9 + 28) = nw_protocol_default_get_remote;
        *((_QWORD *)v9 + 29) = nw_protocol_default_register_notification;
        *((_QWORD *)v9 + 30) = nw_protocol_default_unregister_notification;
        *((_QWORD *)v9 + 40) = nw_protocol_default_add_listen_handler;
        *((_QWORD *)v9 + 41) = nw_protocol_default_remove_listen_handler;
        *((_QWORD *)v9 + 11) = nw_flow_passthrough_add_input_handler;
        *((_QWORD *)v9 + 12) = nw_flow_passthrough_remove_input_handler;
        *((_QWORD *)v9 + 22) = nw_flow_passthrough_get_output_frames;
        *((_QWORD *)v9 + 23) = nw_flow_passthrough_finalize_output_frames;
        *((_QWORD *)v9 + 20) = nw_flow_passthrough_output_available;
        *((_QWORD *)v9 + 21) = nw_flow_passthrough_get_input_frames;
        *((_QWORD *)v9 + 18) = nw_protocol_default_error;
        *((_QWORD *)v9 + 19) = nw_flow_passthrough_input_available;
        *((_QWORD *)v9 + 34) = nw_flow_passthrough_input_finished;
        *((_QWORD *)v9 + 35) = nw_protocol_default_output_finished;
        v11 = nw_flow_passthrough_supports_external_data;
        v12 = nw_flow_passthrough_notify;
        v13 = nw_flow_passthrough_disconnected;
      }
      *((_QWORD *)v9 + 33) = v11;
      *((_QWORD *)v9 + 17) = v13;
      *((_QWORD *)v9 + 18) = nw_flow_error;
      *((_QWORD *)v9 + 14) = nw_flow_connect;
      *((_QWORD *)v9 + 16) = nw_flow_connected;
      *((_QWORD *)v9 + 25) = nw_flow_get_parameters;
      *((_QWORD *)v9 + 26) = nw_flow_get_path;
      *((_QWORD *)v9 + 31) = v12;
      *((_QWORD *)v9 + 32) = nw_flow_updated_path;
      *((_QWORD *)v9 + 27) = nw_flow_get_local;
      *((_QWORD *)v9 + 28) = nw_flow_get_remote;
      *((_QWORD *)v9 + 45) = nw_flow_listener_new_flow;
      *((_QWORD *)v9 + 46) = nw_flow_listener_disconnected;
      internal = nw_hash_table_create_internal(7u, 0, (const void *(*)(const void *, unsigned int *))nw_flow_protocol_get_key, (unsigned int (*)(const void *, unsigned int))nw_flow_protocol_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_flow_protocol_matches_key, (void (*)(void *))nw_flow_protocol_release);
      if (internal)
        *(_DWORD *)(internal + 48) &= ~2u;
      *((_QWORD *)v10 + 108) = internal;
    }
    v15 = *(_WORD *)(a2 + 332);
    if ((v15 & 1) != 0)
      goto LABEL_73;
    *(_WORD *)(a2 + 332) = v15 | 1;
    objc_storeStrong((id *)(a2 + 160), a1);
    v16 = v7;
    v17 = v10;
    v18 = v17;
    v135 = v16;
    if ((*((_BYTE *)v10 + 32) & 8) != 0)
    {
      v19 = v16;
      v20 = v19[4];

      v21 = *(void **)(a2 + 176);
      *(_QWORD *)(a2 + 176) = v20;

      v22 = nw_parameters_copy_context(*(void **)(a2 + 176));
      v23 = *(void **)(a2 + 184);
      *(_QWORD *)(a2 + 184) = v22;

      *(_QWORD *)(a2 + 16) = (char *)v18 + 48;
      *(_QWORD *)(a2 + 24) = (char *)v18 + 88;
      *(_QWORD *)(a2 + 88) = a2;
      *(_QWORD *)(a2 + 64) = (char *)v18 + 360;
      if (nw_flow_initialize_replay_protocol(void)::onceToken[0] != -1)
        dispatch_once(nw_flow_initialize_replay_protocol(void)::onceToken, &__block_literal_global_98);
      *(_QWORD *)(a2 + 136) = a2;
      *(_QWORD *)(a2 + 112) = &g_replay_protocol_identifier;
      *(_QWORD *)(a2 + 120) = &g_replay_protocol_callbacks;
      v24 = *(_QWORD *)(a2 + 40);
      if (!v24)
      {
        *(_QWORD *)(a2 + 40) = a2;
        goto LABEL_72;
      }
      if (v24 == a2)
        goto LABEL_72;
      v25 = v19;
      v26 = *((_BYTE *)v25 + 268);

      if ((v26 & 0x20) != 0)
        goto LABEL_72;
      v120 = (char *)v18;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v27 = (id)gconnectionLogObj;
      v28 = v25;

      v29 = v28;
      v30 = *((_BYTE *)v25 + 268);

      if ((v30 & 1) != 0)
        v31 = "dry-run ";
      else
        v31 = "";
      v32 = nw_endpoint_handler_copy_endpoint(v29);
      logging_description = nw_endpoint_get_logging_description(v32);
      v129 = (char *)(v28 + 21);
      v33 = v29;
      v34 = v33;
      v35 = v33[30];
      if (v35 > 5)
        v36 = "unknown-state";
      else
        v36 = off_1E149FC48[v35];
      log = (os_log_t)v36;
      v126 = v25;

      v37 = v34;
      v38 = v37;
      v117 = v34;
      v39 = "path";
      switch(v7->mode)
      {
        case 0:
          break;
        case 1:
          v39 = "resolver";
          break;
        case 2:
          v39 = nw_endpoint_flow_mode_string(v37[31]);
          break;
        case 3:
          v39 = "proxy";
          break;
        case 4:
          v39 = "fallback";
          break;
        case 5:
          v39 = "transform";
          break;
        default:
          v39 = "unknown-mode";
          break;
      }

      v40 = v38;
      os_unfair_lock_lock((os_unfair_lock_t)v40 + 28);
      v41 = v40[8];
      lock = (os_unfair_lock_s *)(v40 + 14);
      os_unfair_lock_unlock((os_unfair_lock_t)v40 + 28);
      v119 = v40;

      *(_DWORD *)buf = 136447746;
      v139 = "nw_flow_protocol_initialize";
      v140 = 2082;
      v141 = v129;
      v142 = 2082;
      v143 = v31;
      v144 = 2082;
      v145 = (void *)logging_description;
      v146 = 2082;
      v147 = log;
      v148 = 2082;
      v149 = v39;
      v150 = 2114;
      v151 = v41;
      v134 = (const char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v136 = 0;
      if (__nwlog_fault(v134, &type, &v136))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v42 = (id)gconnectionLogObj;
          v43 = type;
          if (os_log_type_enabled(v42, type))
          {
            loga = v42;
            v44 = v119;

            v45 = v44;
            v46 = (*((_BYTE *)v126 + 268) & 1) == 0;

            if (v46)
              v47 = "";
            else
              v47 = "dry-run ";
            v48 = nw_endpoint_handler_copy_endpoint(v45);
            v49 = nw_endpoint_get_logging_description(v48);
            v50 = v45;
            v51 = v50;
            v52 = v117[30];
            if (v52 > 5)
              v53 = "unknown-state";
            else
              v53 = off_1E149FC48[v52];
            v128 = v53;

            v73 = v51;
            v74 = "path";
            switch(v7->mode)
            {
              case 0:
                break;
              case 1:
                v74 = "resolver";
                break;
              case 2:
                v74 = nw_endpoint_flow_mode_string(v73[31]);
                break;
              case 3:
                v74 = "proxy";
                break;
              case 4:
                v74 = "fallback";
                break;
              case 5:
                v74 = "transform";
                break;
              default:
                v74 = "unknown-mode";
                break;
            }
            v118 = v74;

            v83 = v73;
            os_unfair_lock_lock(lock);
            v84 = v119[8];
            os_unfair_lock_unlock(lock);

            *(_DWORD *)buf = 136447746;
            v139 = "nw_flow_protocol_initialize";
            v140 = 2082;
            v141 = v129;
            v142 = 2082;
            v143 = v47;
            v144 = 2082;
            v145 = (void *)v49;
            v146 = 2082;
            v147 = (void *)v128;
            v148 = 2082;
            v149 = v118;
            v150 = 2114;
            v151 = v84;
            _os_log_impl(&dword_182FBE000, loga, v43, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Flow protocol handle non-NULL at initialization", buf, 0x48u);

            v42 = loga;
          }

          goto LABEL_70;
        }
        if (v136)
        {
          v54 = __nw_create_backtrace_string();
          if (v54)
          {
            v55 = (char *)v54;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v56 = (id)gconnectionLogObj;
            v57 = type;
            if (os_log_type_enabled(v56, type))
            {
              id_string = nw_endpoint_handler_get_id_string(v119);
              logb = v56;
              v127 = nw_endpoint_handler_dry_run_string(v119);
              v130 = nw_endpoint_handler_copy_endpoint(v119);
              v59 = id_string;
              v60 = nw_endpoint_get_logging_description(v130);
              v61 = nw_endpoint_handler_state_string(v119);
              v62 = nw_endpoint_handler_mode_string(v119);
              v63 = nw_endpoint_handler_copy_current_path(v119);
              *(_DWORD *)buf = 136448002;
              v139 = "nw_flow_protocol_initialize";
              v140 = 2082;
              v141 = (void *)v59;
              v142 = 2082;
              v143 = v127;
              v144 = 2082;
              v145 = (void *)v60;
              v146 = 2082;
              v147 = (void *)v61;
              v148 = 2082;
              v149 = v62;
              v150 = 2114;
              v151 = v63;
              v152 = 2082;
              v153 = v55;
              _os_log_impl(&dword_182FBE000, logb, v57, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Flow protocol handle non-NULL at initialization, dumping backtrace:%{public}s", buf, 0x52u);

              v56 = logb;
            }

            free(v55);
            goto LABEL_70;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v64 = (id)gconnectionLogObj;
          v75 = type;
          if (os_log_type_enabled(v64, type))
          {
            v76 = nw_endpoint_handler_get_id_string(v119);
            logd = v64;
            v77 = nw_endpoint_handler_dry_run_string(v119);
            v78 = v76;
            v132 = nw_endpoint_handler_copy_endpoint(v119);
            v79 = nw_endpoint_get_logging_description(v132);
            v80 = nw_endpoint_handler_state_string(v119);
            v81 = nw_endpoint_handler_mode_string(v119);
            v82 = nw_endpoint_handler_copy_current_path(v119);
            *(_DWORD *)buf = 136447746;
            v139 = "nw_flow_protocol_initialize";
            v140 = 2082;
            v141 = (void *)v78;
            v142 = 2082;
            v143 = v77;
            v144 = 2082;
            v145 = (void *)v79;
            v146 = 2082;
            v147 = (void *)v80;
            v148 = 2082;
            v149 = v81;
            v150 = 2114;
            v151 = v82;
            _os_log_impl(&dword_182FBE000, logd, v75, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Flow protocol handle non-NULL at initialization, no backtrace", buf, 0x48u);

            v64 = logd;
          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v64 = (id)gconnectionLogObj;
          v65 = type;
          if (os_log_type_enabled(v64, type))
          {
            v66 = nw_endpoint_handler_get_id_string(v119);
            logc = v64;
            v67 = nw_endpoint_handler_dry_run_string(v119);
            v68 = v66;
            v131 = nw_endpoint_handler_copy_endpoint(v119);
            v69 = nw_endpoint_get_logging_description(v131);
            v70 = nw_endpoint_handler_state_string(v119);
            v71 = nw_endpoint_handler_mode_string(v119);
            v72 = nw_endpoint_handler_copy_current_path(v119);
            *(_DWORD *)buf = 136447746;
            v139 = "nw_flow_protocol_initialize";
            v140 = 2082;
            v141 = (void *)v68;
            v142 = 2082;
            v143 = v67;
            v144 = 2082;
            v145 = (void *)v69;
            v146 = 2082;
            v147 = (void *)v70;
            v148 = 2082;
            v149 = v71;
            v150 = 2114;
            v151 = v72;
            _os_log_impl(&dword_182FBE000, logc, v65, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Flow protocol handle non-NULL at initialization, backtrace limit exceeded", buf, 0x48u);

            v64 = logc;
          }
        }

      }
LABEL_70:
      v18 = (NWConcrete_nw_endpoint_mode_handler *)v120;
      v85 = (char *)v134;
      if (v134)
LABEL_71:
        free(v85);
LABEL_72:

      *(_QWORD *)(a2 + 272) = 0;
      *(_QWORD *)(a2 + 280) = a2 + 272;
      *(_QWORD *)(a2 + 296) = 0;
      *(_QWORD *)(a2 + 304) = a2 + 296;
LABEL_73:

      goto LABEL_137;
    }
    v93 = (char *)v17;
    __nwlog_obj();
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v139 = "nw_flow_protocol_initialize";
    v95 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v136 = 0;
    if (__nwlog_fault(v95, &type, &v136))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v96 = objc_claimAutoreleasedReturnValue();
        v97 = type;
        if (os_log_type_enabled(v96, type))
        {
          *(_DWORD *)buf = 136446210;
          v139 = "nw_flow_protocol_initialize";
          _os_log_impl(&dword_182FBE000, v96, v97, "%{public}s called with null endpoint_flow->initialized_protocol_callbacks", buf, 0xCu);
        }
      }
      else if (v136)
      {
        v99 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v96 = objc_claimAutoreleasedReturnValue();
        v100 = type;
        v101 = os_log_type_enabled(v96, type);
        if (v99)
        {
          if (v101)
          {
            *(_DWORD *)buf = 136446466;
            v139 = "nw_flow_protocol_initialize";
            v140 = 2082;
            v141 = v99;
            _os_log_impl(&dword_182FBE000, v96, v100, "%{public}s called with null endpoint_flow->initialized_protocol_callbacks, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v99);
          goto LABEL_144;
        }
        if (v101)
        {
          *(_DWORD *)buf = 136446210;
          v139 = "nw_flow_protocol_initialize";
          _os_log_impl(&dword_182FBE000, v96, v100, "%{public}s called with null endpoint_flow->initialized_protocol_callbacks, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v96 = objc_claimAutoreleasedReturnValue();
        v115 = type;
        if (os_log_type_enabled(v96, type))
        {
          *(_DWORD *)buf = 136446210;
          v139 = "nw_flow_protocol_initialize";
          _os_log_impl(&dword_182FBE000, v96, v115, "%{public}s called with null endpoint_flow->initialized_protocol_callbacks, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_144:
    v18 = (NWConcrete_nw_endpoint_mode_handler *)v93;
    if (!v95)
      goto LABEL_72;
    v85 = (char *)v95;
    goto LABEL_71;
  }
LABEL_103:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v102 = (id)gLogObj;
  if (mode > 5)
    v103 = "unknown-mode";
  else
    v103 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v139 = "nw_endpoint_flow_initialize_protocol";
  v140 = 2082;
  v141 = (void *)v103;
  v142 = 2082;
  v143 = "flow";
  v104 = (void *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v136 = 0;
  if (!__nwlog_fault((const char *)v104, &type, &v136))
  {
LABEL_135:
    if (!v104)
      goto LABEL_137;
LABEL_136:
    free(v104);
    goto LABEL_137;
  }
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v105 = (id)gLogObj;
    v106 = type;
    if (os_log_type_enabled(v105, type))
    {
      if (mode > 5)
        v107 = "unknown-mode";
      else
        v107 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v139 = "nw_endpoint_flow_initialize_protocol";
      v140 = 2082;
      v141 = (void *)v107;
      v142 = 2082;
      v143 = "flow";
      _os_log_impl(&dword_182FBE000, v105, v106, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_134:

    goto LABEL_135;
  }
  if (!v136)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v105 = (id)gLogObj;
    v112 = type;
    if (os_log_type_enabled(v105, type))
    {
      if (mode > 5)
        v113 = "unknown-mode";
      else
        v113 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v139 = "nw_endpoint_flow_initialize_protocol";
      v140 = 2082;
      v141 = (void *)v113;
      v142 = 2082;
      v143 = "flow";
      _os_log_impl(&dword_182FBE000, v105, v112, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_134;
  }
  v108 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v105 = (id)gLogObj;
  v109 = type;
  v110 = os_log_type_enabled(v105, type);
  if (!v108)
  {
    if (v110)
    {
      if (mode > 5)
        v114 = "unknown-mode";
      else
        v114 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v139 = "nw_endpoint_flow_initialize_protocol";
      v140 = 2082;
      v141 = (void *)v114;
      v142 = 2082;
      v143 = "flow";
      _os_log_impl(&dword_182FBE000, v105, v109, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_134;
  }
  if (v110)
  {
    if (mode > 5)
      v111 = "unknown-mode";
    else
      v111 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    v139 = "nw_endpoint_flow_initialize_protocol";
    v140 = 2082;
    v141 = (void *)v111;
    v142 = 2082;
    v143 = "flow";
    v144 = 2082;
    v145 = v108;
    _os_log_impl(&dword_182FBE000, v105, v109, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v108);
  if (v104)
    goto LABEL_136;
LABEL_137:

}

void sub_183093C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,void *a22)
{
  void *v22;

  _Unwind_Resume(a1);
}

void nw_context_activate(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  char os_unfair_lock_opaque;
  NSObject *v4;
  void **v5;
  dispatch_workloop_t inactive;
  void *v7;
  char v8;
  _BOOL8 v9;
  void *v10;
  os_unfair_lock_s **v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  int v16;
  os_unfair_lock_s *v17;
  id v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *v22;
  const char *v23;
  char *v24;
  NSObject *v25;
  os_log_type_t v26;
  id v27;
  os_log_type_t v28;
  os_log_type_t v29;
  os_log_type_t v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  dispatch_workloop_t v34;
  void *v35;
  id v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  char *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  char v43;
  dispatch_workloop_t v44;
  void *v45;
  os_log_type_t v46;
  os_log_type_t v47;
  os_unfair_lock_s *v48;
  id v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  _OWORD *v53;
  _BOOL8 v54;
  uint64_t v55;
  void *v56;
  _BOOL8 v57;
  void *v58;
  char *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  void *v62;
  os_log_type_t v63;
  os_log_type_t v64;
  os_log_type_t v65;
  _BOOL4 v66;
  os_log_type_t v67;
  void *v68;
  char *v69;
  NSObject *v70;
  os_log_type_t v71;
  unint64_t *p_os_unfair_lock_opaque;
  __uint64_t v73;
  unint64_t v74;
  char v75;
  __uint64_t v76;
  unint64_t *v77;
  unint64_t v78;
  char v79;
  void *v80;
  char *v81;
  NSObject *v82;
  os_log_type_t v83;
  void *v84;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  char *backtrace_string;
  os_log_type_t v89;
  _BOOL4 v90;
  os_log_type_t v91;
  NSObject *v92;
  void *v93;
  NSObject *v94;
  void *v95;
  char *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  char *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  os_log_type_t v102;
  os_log_type_t v103;
  __uint64_t v104;
  char v105;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v108;
  __int16 v109;
  __uint64_t v110;
  __int16 v111;
  uint64_t v112;
  __int16 v113;
  char *v114;
  uint64_t v115;

  v115 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v68 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_context_activate";
    v69 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v104) = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v69, &v104, &type))
    {
      if (v104 == 17)
      {
        __nwlog_obj();
        v70 = objc_claimAutoreleasedReturnValue();
        v71 = v104;
        if (os_log_type_enabled(v70, (os_log_type_t)v104))
        {
          *(_DWORD *)buf = 136446210;
          v108 = "nw_context_activate";
          _os_log_impl(&dword_182FBE000, v70, v71, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v70 = objc_claimAutoreleasedReturnValue();
        v89 = v104;
        v90 = os_log_type_enabled(v70, (os_log_type_t)v104);
        if (backtrace_string)
        {
          if (v90)
          {
            *(_DWORD *)buf = 136446466;
            v108 = "nw_context_activate";
            v109 = 2082;
            v110 = (__uint64_t)backtrace_string;
            _os_log_impl(&dword_182FBE000, v70, v89, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_171;
        }
        if (v90)
        {
          *(_DWORD *)buf = 136446210;
          v108 = "nw_context_activate";
          _os_log_impl(&dword_182FBE000, v70, v89, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v70 = objc_claimAutoreleasedReturnValue();
        v91 = v104;
        if (os_log_type_enabled(v70, (os_log_type_t)v104))
        {
          *(_DWORD *)buf = 136446210;
          v108 = "nw_context_activate";
          _os_log_impl(&dword_182FBE000, v70, v91, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_171:
    if (v69)
      free(v69);
    goto LABEL_132;
  }
  os_unfair_lock_lock(v1 + 20);
  v104 = 0;
  pthread_threadid_np(0, &v104);
  if (v2[30]._os_unfair_lock_opaque == 4)
  {
    p_os_unfair_lock_opaque = (unint64_t *)&v2[28]._os_unfair_lock_opaque;
    v73 = v104;
    while (1)
    {
      v74 = __ldaxr(p_os_unfair_lock_opaque);
      if (v74)
        break;
      if (!__stlxr(v73, p_os_unfair_lock_opaque))
      {
        v75 = 1;
        goto LABEL_147;
      }
    }
    v75 = 0;
    __clrex();
LABEL_147:
    if ((v75 & 1) == 0)
    {
      __nwlog_obj();
      v80 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446722;
      v108 = "nw_context_activate";
      v109 = 2048;
      v110 = v104;
      v111 = 2048;
      v112 = v74;
      v81 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v105 = 0;
      if (__nwlog_fault(v81, &type, &v105))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v82 = objc_claimAutoreleasedReturnValue();
          v83 = type;
          if (os_log_type_enabled(v82, type))
          {
            *(_DWORD *)buf = 136446722;
            v108 = "nw_context_activate";
            v109 = 2048;
            v110 = v104;
            v111 = 2048;
            v112 = v74;
            _os_log_impl(&dword_182FBE000, v82, v83, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu", buf, 0x20u);
          }
        }
        else if (v105)
        {
          v96 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v82 = objc_claimAutoreleasedReturnValue();
          v97 = type;
          v98 = os_log_type_enabled(v82, type);
          if (v96)
          {
            if (v98)
            {
              *(_DWORD *)buf = 136446978;
              v108 = "nw_context_activate";
              v109 = 2048;
              v110 = v104;
              v111 = 2048;
              v112 = v74;
              v113 = 2082;
              v114 = v96;
              _os_log_impl(&dword_182FBE000, v82, v97, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v96);
            goto LABEL_196;
          }
          if (v98)
          {
            *(_DWORD *)buf = 136446722;
            v108 = "nw_context_activate";
            v109 = 2048;
            v110 = v104;
            v111 = 2048;
            v112 = v74;
            _os_log_impl(&dword_182FBE000, v82, v97, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v82 = objc_claimAutoreleasedReturnValue();
          v102 = type;
          if (os_log_type_enabled(v82, type))
          {
            *(_DWORD *)buf = 136446722;
            v108 = "nw_context_activate";
            v109 = 2048;
            v110 = v104;
            v111 = 2048;
            v112 = v74;
            _os_log_impl(&dword_182FBE000, v82, v102, "%{public}s Entering call, current TID=%llu, inline TID is already set to %llu, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_196:
      if (v81)
        free(v81);
    }
  }
  os_unfair_lock_opaque = v2[34]._os_unfair_lock_opaque;
  if ((os_unfair_lock_opaque & 0x40) != 0)
  {
LABEL_130:
    if ((os_unfair_lock_opaque & 8) == 0)
      goto LABEL_131;
    v76 = v104;
    v77 = (unint64_t *)&v2[28]._os_unfair_lock_opaque;
    while (1)
    {
      v78 = __ldaxr(v77);
      if (v78 != v76)
        break;
      if (!__stlxr(0, v77))
      {
        v79 = 1;
        goto LABEL_154;
      }
    }
    v79 = 0;
    __clrex();
LABEL_154:
    if ((v79 & 1) != 0)
      goto LABEL_131;
    __nwlog_obj();
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    v108 = "nw_context_activate";
    v109 = 2048;
    v110 = v104;
    v111 = 2048;
    v112 = v78;
    v85 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v105 = 0;
    if (__nwlog_fault(v85, &type, &v105))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v86 = objc_claimAutoreleasedReturnValue();
        v87 = type;
        if (os_log_type_enabled(v86, type))
        {
          *(_DWORD *)buf = 136446722;
          v108 = "nw_context_activate";
          v109 = 2048;
          v110 = v104;
          v111 = 2048;
          v112 = v78;
          _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s Exiting call, expected inline TID to be %llu but got %llu", buf, 0x20u);
        }
      }
      else if (v105)
      {
        v99 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v86 = objc_claimAutoreleasedReturnValue();
        v100 = type;
        v101 = os_log_type_enabled(v86, type);
        if (v99)
        {
          if (v101)
          {
            *(_DWORD *)buf = 136446978;
            v108 = "nw_context_activate";
            v109 = 2048;
            v110 = v104;
            v111 = 2048;
            v112 = v78;
            v113 = 2082;
            v114 = v99;
            _os_log_impl(&dword_182FBE000, v86, v100, "%{public}s Exiting call, expected inline TID to be %llu but got %llu, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v99);
          goto LABEL_201;
        }
        if (v101)
        {
          *(_DWORD *)buf = 136446722;
          v108 = "nw_context_activate";
          v109 = 2048;
          v110 = v104;
          v111 = 2048;
          v112 = v78;
          _os_log_impl(&dword_182FBE000, v86, v100, "%{public}s Exiting call, expected inline TID to be %llu but got %llu, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        __nwlog_obj();
        v86 = objc_claimAutoreleasedReturnValue();
        v103 = type;
        if (os_log_type_enabled(v86, type))
        {
          *(_DWORD *)buf = 136446722;
          v108 = "nw_context_activate";
          v109 = 2048;
          v110 = v104;
          v111 = 2048;
          v112 = v78;
          _os_log_impl(&dword_182FBE000, v86, v103, "%{public}s Exiting call, expected inline TID to be %llu but got %llu, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
LABEL_201:
    if (v85)
      free(v85);
LABEL_131:
    os_unfair_lock_unlock(v2 + 20);
LABEL_132:

    return;
  }
  v5 = (void **)&v2[2];
  v4 = *(NSObject **)&v2[2]._os_unfair_lock_opaque;
  if (v4)
    goto LABEL_12;
  if ((v2[34]._os_unfair_lock_opaque & 4) != 0)
  {
    inactive = dispatch_workloop_create_inactive("com.apple.network.connections");
    v7 = *v5;
    *v5 = inactive;

  }
  else
  {
    if ((v2[34]._os_unfair_lock_opaque & 1) != 0)
    {
      switch(v2[30]._os_unfair_lock_opaque)
      {
        case 1u:
        case 2u:
        case 3u:
          v34 = dispatch_workloop_create_inactive(*(const char **)&v2[4]._os_unfair_lock_opaque);
          v35 = *(void **)&v2[2]._os_unfair_lock_opaque;
          *(_QWORD *)&v2[2]._os_unfair_lock_opaque = v34;

          dispatch_workloop_set_scheduler_priority();
          dispatch_workloop_set_cpupercent();
          v4 = *v5;
          if (!*v5)
            goto LABEL_53;
          goto LABEL_12;
        case 4u:
          *(_QWORD *)&v2[2]._os_unfair_lock_opaque = 0;
          v43 = os_unfair_lock_opaque | 8;
          LOBYTE(v2[34]._os_unfair_lock_opaque) = v43;
          if ((v43 & 8) == 0)
            goto LABEL_54;
          break;
        default:
          v44 = dispatch_workloop_create_inactive(*(const char **)&v2[4]._os_unfair_lock_opaque);
          v45 = *(void **)&v2[2]._os_unfair_lock_opaque;
          *(_QWORD *)&v2[2]._os_unfair_lock_opaque = v44;

          goto LABEL_11;
      }
      goto LABEL_13;
    }
    if (nw_context_copy_implicit_context::onceToken[0] != -1)
      dispatch_once(nw_context_copy_implicit_context::onceToken, &__block_literal_global_14);
    objc_storeStrong((id *)&v2[2], *(id *)(nw_context_copy_implicit_context::implicit_context + 8));
  }
LABEL_11:
  v4 = *v5;
  if (*v5)
  {
LABEL_12:
    dispatch_activate(v4);
    goto LABEL_13;
  }
LABEL_53:
  if ((v2[34]._os_unfair_lock_opaque & 8) != 0)
    goto LABEL_13;
LABEL_54:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v36 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v108 = "nw_context_activate";
  v37 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v105 = 0;
  if (__nwlog_fault(v37, &type, &v105))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_activate";
        _os_log_impl(&dword_182FBE000, v38, v39, "%{public}s dispatch_workloop_create failed", buf, 0xCu);
      }
LABEL_75:

      goto LABEL_76;
    }
    if (!v105)
    {
      __nwlog_obj();
      v38 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_activate";
        _os_log_impl(&dword_182FBE000, v38, v46, "%{public}s dispatch_workloop_create failed, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_75;
    }
    v40 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v38 = objc_claimAutoreleasedReturnValue();
    v41 = type;
    v42 = os_log_type_enabled(v38, type);
    if (!v40)
    {
      if (v42)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_activate";
        _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s dispatch_workloop_create failed, no backtrace", buf, 0xCu);
      }
      goto LABEL_75;
    }
    if (v42)
    {
      *(_DWORD *)buf = 136446466;
      v108 = "nw_context_activate";
      v109 = 2082;
      v110 = (__uint64_t)v40;
      _os_log_impl(&dword_182FBE000, v38, v41, "%{public}s dispatch_workloop_create failed, dumping backtrace:%{public}s", buf, 0x16u);
    }

    free(v40);
  }
LABEL_76:
  if (v37)
    free(v37);
  v4 = *v5;
  if (*v5)
    goto LABEL_12;
LABEL_13:
  v8 = v2[34]._os_unfair_lock_opaque;
  if ((v8 & 0x24) == 0 && (v8 & 3) != 0)
  {
    v9 = -[NWConcrete_nw_context initWithIdentifier:]([NWConcrete_nw_context alloc], *(const char **)&v2[4]._os_unfair_lock_opaque);
    v11 = (os_unfair_lock_s **)&v2[10];
    v10 = *(void **)&v2[10]._os_unfair_lock_opaque;
    *(_QWORD *)&v2[10]._os_unfair_lock_opaque = v9;

    LOBYTE((*v11)[34]._os_unfair_lock_opaque) = (*v11)[34]._os_unfair_lock_opaque & 0xFD | v2[34]._os_unfair_lock_opaque & 2;
    LOBYTE((*v11)[34]._os_unfair_lock_opaque) = (*v11)[34]._os_unfair_lock_opaque & 0xFE | v2[34]._os_unfair_lock_opaque & 1;
    (*v11)[31]._os_unfair_lock_opaque = v2[31]._os_unfair_lock_opaque;
    LOBYTE((*v11)[34]._os_unfair_lock_opaque) = v2[34]._os_unfair_lock_opaque & 0x80 | (*v11)[34]._os_unfair_lock_opaque & 0x7F;
    objc_storeStrong((id *)(*(_QWORD *)&v2[10]._os_unfair_lock_opaque + 48), *(id *)&v2[12]._os_unfair_lock_opaque);
    objc_storeStrong((id *)(*(_QWORD *)&v2[10]._os_unfair_lock_opaque + 56), *(id *)&v2[14]._os_unfair_lock_opaque);
    (*v11)[30]._os_unfair_lock_opaque = v2[30]._os_unfair_lock_opaque;
    (*v11)[21]._os_unfair_lock_opaque = v2[21]._os_unfair_lock_opaque;
    (*v11)[22]._os_unfair_lock_opaque = v2[22]._os_unfair_lock_opaque;
    (*v11)[23]._os_unfair_lock_opaque = v2[23]._os_unfair_lock_opaque;
    LOBYTE((*v11)[34]._os_unfair_lock_opaque) |= 0x20u;
    objc_storeStrong((id *)(*(_QWORD *)&v2[10]._os_unfair_lock_opaque + 8), *(id *)&v2[2]._os_unfair_lock_opaque);
    objc_storeStrong((id *)(*(_QWORD *)&v2[10]._os_unfair_lock_opaque + 64), *(id *)&v2[16]._os_unfair_lock_opaque);
    v12 = _Block_copy(*(const void **)&v2[18]._os_unfair_lock_opaque);
    v13 = *(void **)(*(_QWORD *)&v2[10]._os_unfair_lock_opaque + 72);
    *(_QWORD *)&(*v11)[18]._os_unfair_lock_opaque = v12;

    BYTE1((*v11)[34]._os_unfair_lock_opaque) = BYTE1((*v11)[34]._os_unfair_lock_opaque) & 0xFE | BYTE1(v2[34]._os_unfair_lock_opaque) & 1;
    v14 = _Block_copy(*(const void **)&v2[32]._os_unfair_lock_opaque);
    v15 = *(void **)(*(_QWORD *)&v2[10]._os_unfair_lock_opaque + 128);
    *(_QWORD *)&(*v11)[32]._os_unfair_lock_opaque = v14;

    nw_context_activate(*(_QWORD *)&v2[10]._os_unfair_lock_opaque);
LABEL_129:
    os_unfair_lock_opaque = LOBYTE(v2[34]._os_unfair_lock_opaque) | 0x40;
    LOBYTE(v2[34]._os_unfair_lock_opaque) = os_unfair_lock_opaque;
    goto LABEL_130;
  }
  if ((v2[34]._os_unfair_lock_opaque & 4) == 0)
  {
    v16 = 0;
    if ((v2[34]._os_unfair_lock_opaque & 0x20) == 0 || (v8 & 3) == 0)
      goto LABEL_86;
  }
  v17 = v2;
  if (*(_QWORD *)&v17[6]._os_unfair_lock_opaque)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v108 = "nw_context_initialize_cache";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v105 = 0;
    if (!__nwlog_fault(v19, &type, &v105))
      goto LABEL_83;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s Cannot initialize cache twice", buf, 0xCu);
      }
    }
    else if (v105)
    {
      v23 = __nw_create_backtrace_string();
      if (v23)
      {
        v24 = (char *)v23;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v25, type))
        {
          *(_DWORD *)buf = 136446466;
          v108 = "nw_context_initialize_cache";
          v109 = 2082;
          v110 = (__uint64_t)v24;
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s Cannot initialize cache twice, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v24);
        if (!v19)
          goto LABEL_85;
        goto LABEL_84;
      }
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl(&dword_182FBE000, v20, v30, "%{public}s Cannot initialize cache twice, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v20 = (id)gLogObj;
      v29 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl(&dword_182FBE000, v20, v29, "%{public}s Cannot initialize cache twice, backtrace limit exceeded", buf, 0xCu);
      }
    }
    goto LABEL_82;
  }
  if ((v2[34]._os_unfair_lock_opaque & 7) != 0)
  {
    v22 = (char *)malloc_type_calloc(1uLL, 0x48uLL, 0xEAFB8F1AuLL);
    if (!v22)
    {
      __nwlog_obj();
      v92 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v92, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446722;
      v108 = "strict_calloc";
      v109 = 2048;
      v110 = 1;
      v111 = 2048;
      v112 = 72;
      v93 = (void *)_os_log_send_and_compose_impl();

      if (__nwlog_abort((uint64_t)v93))
        goto LABEL_203;
      free(v93);
    }
    *(_OWORD *)(v22 + 56) = 0u;
    *(_OWORD *)(v22 + 40) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_OWORD *)(v22 + 8) = 0u;
    *(_QWORD *)&v17[6]._os_unfair_lock_opaque = v22;
    *(_QWORD *)v22 = 0;
    *(_QWORD *)(*(_QWORD *)&v17[6]._os_unfair_lock_opaque + 8) = *(_QWORD *)&v17[6]._os_unfair_lock_opaque;
    *(_QWORD *)(*(_QWORD *)&v17[6]._os_unfair_lock_opaque + 16) = 0;
    *(_QWORD *)(*(_QWORD *)&v17[6]._os_unfair_lock_opaque + 24) = *(_QWORD *)&v17[6]._os_unfair_lock_opaque + 16;
    *(_QWORD *)(*(_QWORD *)&v17[6]._os_unfair_lock_opaque + 32) = nw_hash_table_create_internal(0x11u, 0, (const void *(*)(const void *, unsigned int *))nw_context_endpoint_table_get_key, (unsigned int (*)(const void *, unsigned int))nw_context_endpoint_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_context_endpoint_table_matches_key, (void (*)(void *))nw_context_endpoint_table_release);
    *(_QWORD *)(*(_QWORD *)&v17[6]._os_unfair_lock_opaque + 40) = nw_hash_table_create_internal(0x11u, 0, (const void *(*)(const void *, unsigned int *))nw_context_endpoint_table_get_key, (unsigned int (*)(const void *, unsigned int))nw_context_endpoint_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_context_endpoint_table_matches_key, (void (*)(void *))nw_context_endpoint_table_release);
    *(_QWORD *)(*(_QWORD *)&v17[6]._os_unfair_lock_opaque + 48) = nw_hash_table_create_internal(0x11u, 0, (const void *(*)(const void *, unsigned int *))nw_context_endpoint_table_get_key, (unsigned int (*)(const void *, unsigned int))nw_context_endpoint_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_context_endpoint_table_matches_key, (void (*)(void *))nw_context_endpoint_table_release);
    goto LABEL_85;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v27 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v108 = "nw_context_initialize_cache";
  v19 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v105 = 0;
  if (__nwlog_fault(v19, &type, &v105))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl(&dword_182FBE000, v20, v28, "%{public}s Cannot initialize cache for non-isolated context", buf, 0xCu);
      }
    }
    else if (v105)
    {
      v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v20, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v108 = "nw_context_initialize_cache";
          v109 = 2082;
          v110 = (__uint64_t)v31;
          _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s Cannot initialize cache for non-isolated context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        if (!v19)
          goto LABEL_85;
        goto LABEL_84;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl(&dword_182FBE000, v20, v32, "%{public}s Cannot initialize cache for non-isolated context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v20 = objc_claimAutoreleasedReturnValue();
      v47 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_cache";
        _os_log_impl(&dword_182FBE000, v20, v47, "%{public}s Cannot initialize cache for non-isolated context, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_82:

  }
LABEL_83:
  if (v19)
LABEL_84:
    free(v19);
LABEL_85:

  v8 = v2[34]._os_unfair_lock_opaque;
  v16 = v8 & 4;
LABEL_86:
  if (!v16 && (v8 & 0x21) != 0x21)
    goto LABEL_129;
  v48 = v2;
  if (*(_QWORD *)&v48[8]._os_unfair_lock_opaque)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v49 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v108 = "nw_context_initialize_globals";
    v50 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v105 = 0;
    if (!__nwlog_fault(v50, &type, &v105))
      goto LABEL_126;
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v51 = (id)gLogObj;
      v52 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s Cannot initialize globals twice", buf, 0xCu);
      }
LABEL_125:

LABEL_126:
      if (!v50)
      {
LABEL_128:

        goto LABEL_129;
      }
LABEL_127:
      free(v50);
      goto LABEL_128;
    }
    if (!v105)
    {
      __nwlog_obj();
      v51 = objc_claimAutoreleasedReturnValue();
      v64 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl(&dword_182FBE000, v51, v64, "%{public}s Cannot initialize globals twice, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_125;
    }
    v59 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v51 = objc_claimAutoreleasedReturnValue();
    v60 = type;
    v61 = os_log_type_enabled(v51, type);
    if (!v59)
    {
      if (v61)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl(&dword_182FBE000, v51, v60, "%{public}s Cannot initialize globals twice, no backtrace", buf, 0xCu);
      }
      goto LABEL_125;
    }
    if (v61)
    {
      *(_DWORD *)buf = 136446466;
      v108 = "nw_context_initialize_globals";
      v109 = 2082;
      v110 = (__uint64_t)v59;
      _os_log_impl(&dword_182FBE000, v51, v60, "%{public}s Cannot initialize globals twice, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_102:

    free(v59);
    if (!v50)
      goto LABEL_128;
    goto LABEL_127;
  }
  if ((v2[34]._os_unfair_lock_opaque & 5) == 0)
  {
    __nwlog_obj();
    v62 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v108 = "nw_context_initialize_globals";
    v50 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v105 = 0;
    if (!__nwlog_fault(v50, &type, &v105))
      goto LABEL_126;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v51 = objc_claimAutoreleasedReturnValue();
      v63 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl(&dword_182FBE000, v51, v63, "%{public}s Cannot initialize globals for non-isolated context", buf, 0xCu);
      }
      goto LABEL_125;
    }
    if (!v105)
    {
      __nwlog_obj();
      v51 = objc_claimAutoreleasedReturnValue();
      v67 = type;
      if (os_log_type_enabled(v51, type))
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl(&dword_182FBE000, v51, v67, "%{public}s Cannot initialize globals for non-isolated context, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_125;
    }
    v59 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v51 = objc_claimAutoreleasedReturnValue();
    v65 = type;
    v66 = os_log_type_enabled(v51, type);
    if (!v59)
    {
      if (v66)
      {
        *(_DWORD *)buf = 136446210;
        v108 = "nw_context_initialize_globals";
        _os_log_impl(&dword_182FBE000, v51, v65, "%{public}s Cannot initialize globals for non-isolated context, no backtrace", buf, 0xCu);
      }
      goto LABEL_125;
    }
    if (v66)
    {
      *(_DWORD *)buf = 136446466;
      v108 = "nw_context_initialize_globals";
      v109 = 2082;
      v110 = (__uint64_t)v59;
      _os_log_impl(&dword_182FBE000, v51, v65, "%{public}s Cannot initialize globals for non-isolated context, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_102;
  }
  v53 = malloc_type_calloc(1uLL, 0xBCuLL, 0xEAFB8F1AuLL);
  if (v53)
  {
LABEL_96:
    *(_OWORD *)((char *)v53 + 172) = 0u;
    v53[9] = 0u;
    v53[10] = 0u;
    v53[7] = 0u;
    v53[8] = 0u;
    v53[5] = 0u;
    v53[6] = 0u;
    v53[3] = 0u;
    v53[4] = 0u;
    v53[1] = 0u;
    v53[2] = 0u;
    *v53 = 0u;
    *(_QWORD *)&v48[8]._os_unfair_lock_opaque = v53;
    *((_QWORD *)v53 + 1) = 0;
    *(_QWORD *)(*(_QWORD *)&v48[8]._os_unfair_lock_opaque + 16) = *(_QWORD *)&v48[8]._os_unfair_lock_opaque + 8;
    *(_QWORD *)(*(_QWORD *)&v48[8]._os_unfair_lock_opaque + 52) = nw_hash_table_create_internal(0x11u, 8, (const void *(*)(const void *, unsigned int *))nw_context_object_get_key, (unsigned int (*)(const void *, unsigned int))nw_context_object_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_context_object_matches_key, (void (*)(void *))nw_context_object_release);
    *(_QWORD *)(*(_QWORD *)&v48[8]._os_unfair_lock_opaque + 24) = nw_hash_table_create_internal(0x11u, 0, (const void *(*)(const void *, unsigned int *))nw_context_timer_object_get_key, (unsigned int (*)(const void *, unsigned int))nw_context_timer_object_key_hash, (BOOL (*)(const void *, const void *, unsigned int))nw_context_timer_object_matches_key, (void (*)(void *))nw_context_timer_object_release);
    if ((v2[34]._os_unfair_lock_opaque & 8) != 0)
    {
      v54 = nw_array_create();
      v55 = *(_QWORD *)&v48[8]._os_unfair_lock_opaque;
      v56 = *(void **)(v55 + 100);
      *(_QWORD *)(v55 + 100) = v54;

      v57 = nw_array_create();
      v58 = *(void **)(*(_QWORD *)&v48[8]._os_unfair_lock_opaque + 116);
      *(_QWORD *)(*(_QWORD *)&v48[8]._os_unfair_lock_opaque + 116) = v57;

    }
    goto LABEL_128;
  }
  __nwlog_obj();
  v94 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446722;
  v108 = "strict_calloc";
  v109 = 2048;
  v110 = 1;
  v111 = 2048;
  v112 = 188;
  v95 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v95))
  {
    free(v95);
    goto LABEL_96;
  }
LABEL_203:
  __break(1u);
}

void sub_1830956B4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_uses_interface_subtype(void *a1, int a2)
{
  _DWORD *v3;
  _DWORD *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  int v8;
  int v9;
  void *v11;
  _DWORD *v12;
  int v13;
  void *v14;
  _DWORD *v15;
  int v16;
  void *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = nw_path_copy_connected_interface(v3);
    v6 = v5;
    if (v5)
    {
      v7 = v5;
      v8 = *((_DWORD *)v7 + 25);

      if (v8 == a2)
        goto LABEL_15;
    }
    if (v4[94] != 1)
    {
      v9 = v4[95];
      if (v9 == 4 || v9 == 30)
        goto LABEL_16;
    }
    v11 = (void *)*((_QWORD *)v4 + 12);
    if (v11)
    {
      v12 = v11;
      v13 = v12[25];

      if (v13 == a2)
        goto LABEL_15;
    }
    v14 = (void *)*((_QWORD *)v4 + 13);
    if (v14)
    {
      v15 = v14;
      v16 = v15[25];

      if (v16 == a2)
        goto LABEL_15;
    }
    v17 = (void *)*((_QWORD *)v4 + 14);
    if (v17 && (v18 = v17, v19 = v18[25], v18, v19 == a2))
LABEL_15:
      v20 = 1;
    else
LABEL_16:
      v20 = 0;

    goto LABEL_18;
  }
  __nwlog_obj();
  v22 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v33 = "nw_path_uses_interface_subtype";
  v23 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (__nwlog_fault(v23, &type, &v30))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_path_uses_interface_subtype";
        _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v24, type);
      if (backtrace_string)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_path_uses_interface_subtype";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_35;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_path_uses_interface_subtype";
        _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v24 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v24, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_path_uses_interface_subtype";
        _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v23)
    free(v23);
  v20 = 0;
LABEL_18:

  return v20;
}

void ___ZL20nw_flow_disconnectedP11nw_protocolS0__block_invoke(uint64_t a1)
{
  void *v1;
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 node;
  NSObject *v8;
  const char *id_string;
  const char *v10;
  nw_endpoint_t v11;
  const char *logging_description;
  const char *v13;
  const char *v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  const char *v18;
  void *v19;
  char *v20;
  NSObject *v21;
  os_log_type_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  void *v32;
  __int16 v33;
  const char *v34;
  __int16 v35;
  const char *v36;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  id v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v1 = *(void **)(a1 + 32);
  if (v1)
  {
    v3 = v1;
    v4 = v3[29];

    if ((_DWORD)v4 == 2)
    {
      v5 = *(_QWORD *)(a1 + 40);
      if (*(_QWORD *)(a1 + 64) == v5 + 376)
      {
        nw_endpoint_flow_failed_with_error(*(void **)(a1 + 32), 1, *(void **)(a1 + 48));
      }
      else
      {
        v6 = *(_QWORD *)(v5 + 864);
        if (v6)
        {
          if (*(_BYTE *)(a1 + 80))
          {
            node = nw_hash_table_get_node(v6, *(_QWORD *)(a1 + 56), 0);
            if (node
              && !nw_hash_table_remove_node(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 864), node)
              && (nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v8 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
              {
                id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
                v10 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
                v11 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
                logging_description = nw_endpoint_get_logging_description(v11);
                v13 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
                v14 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
                v15 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
                v16 = *(_QWORD *)(a1 + 72);
                *(_DWORD *)buf = 136448002;
                v30 = "nw_flow_disconnected_block_invoke";
                v31 = 2082;
                v32 = (void *)id_string;
                v33 = 2082;
                v34 = v10;
                v35 = 2082;
                v36 = logging_description;
                v37 = 2082;
                v38 = v13;
                v39 = 2082;
                v40 = v14;
                v41 = 2114;
                v42 = v15;
                v43 = 2048;
                v44 = v16;
                _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to remove protocol %p from multiplexed table", buf, 0x52u);

              }
            }
          }
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v17 = (id)gLogObj;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        if (v4 > 5)
          v18 = "unknown-mode";
        else
          v18 = off_1E149FC18[v4];
        *(_DWORD *)buf = 136446722;
        v30 = "nw_flow_disconnected_block_invoke";
        v31 = 2082;
        v32 = (void *)v18;
        v33 = 2082;
        v34 = "flow";
        _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }

    }
    return;
  }
  __nwlog_obj();
  v19 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_flow_disconnected_block_invoke";
  v20 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (__nwlog_fault(v20, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_flow_disconnected_block_invoke";
        _os_log_impl(&dword_182FBE000, v21, v22, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      v25 = os_log_type_enabled(v21, type);
      if (backtrace_string)
      {
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_flow_disconnected_block_invoke";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_38;
      }
      if (v25)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_flow_disconnected_block_invoke";
        _os_log_impl(&dword_182FBE000, v21, v24, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v21 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v21, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_flow_disconnected_block_invoke";
        _os_log_impl(&dword_182FBE000, v21, v26, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_38:
  if (v20)
    free(v20);
}

void sub_183096114(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_context_set_privacy_level_internal(void *a1, int a2, char a3)
{
  _BYTE *v5;
  id v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  _QWORD v16[4];
  id v17;
  int v18;
  char v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (v5)
  {
    if ((v5[136] & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 3221225472;
      v16[2] = __nw_context_set_privacy_level_internal_block_invoke;
      v16[3] = &unk_1E149A4A8;
      v17 = v6;
      v18 = a2;
      v19 = a3;
      nw_queue_context_async(v17, v16);

    }
    else
    {
      *((_DWORD *)v6 + 31) = a2;
      *((_BYTE *)v6 + 137) = *((_BYTE *)v6 + 137) & 0xFE | a3;
      v7 = *((_QWORD *)v6 + 5);
      if (v7)
      {
        *(_DWORD *)(v7 + 124) = a2;
        *(_BYTE *)(*((_QWORD *)v6 + 5) + 137) = *(_BYTE *)(*((_QWORD *)v6 + 5) + 137) & 0xFE | a3;
      }
    }
    goto LABEL_7;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_context_set_privacy_level_internal";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v9, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_context_set_privacy_level_internal";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_context_set_privacy_level_internal";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_24;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_context_set_privacy_level_internal";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_context_set_privacy_level_internal";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_24:
  if (v9)
    free(v9);
LABEL_7:

}

void sub_183096468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;

  _Unwind_Resume(a1);
}

void nw_path_evaluator_set_cancel_handler(os_unfair_lock_s *a1, void *a2)
{
  os_unfair_lock_s *v3;
  id v4;
  void *v5;
  void *v6;
  os_unfair_lock_s *v7;

  if (a1)
  {
    v3 = a1 + 24;
    v4 = a2;
    v7 = a1;
    os_unfair_lock_lock(v3);
    v5 = _Block_copy(v4);

    v6 = *(void **)&v7[18]._os_unfair_lock_opaque;
    *(_QWORD *)&v7[18]._os_unfair_lock_opaque = v5;

    os_unfair_lock_unlock(v3);
  }
}

uint64_t __nw_connection_fillout_tcp_statistics_block_invoke(uint64_t a1, void *a2)
{
  NSObject *v3;

  v3 = a2;
  **(_DWORD **)(a1 + 32) = nw_resolution_report_get_milliseconds(v3);

  return 0;
}

uint64_t nw_resolution_report_get_milliseconds(nw_resolution_report_t resolution_report)
{
  nw_resolution_report_t v1;
  nw_resolution_report_t v2;
  uint64_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = resolution_report;
  v2 = v1;
  if (v1)
  {
    isa = (uint64_t)v1[1].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_resolution_report_get_milliseconds";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null resolution_report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_resolution_report_get_milliseconds";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null resolution_report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_resolution_report_get_milliseconds";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null resolution_report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = 0;
LABEL_3:

  return isa;
}

void sub_183096838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_resolver_receive_report(void *a1, int a2, unsigned int a3, unsigned __int16 *a4, void *a5, void *a6)
{
  id v12;
  unsigned int *v13;
  uint64_t v14;
  unsigned int *v15;
  char v16;
  _QWORD *v17;
  NSObject *v18;
  unsigned int *v19;
  char *v20;
  char v21;
  const char *v22;
  const char *logging_description;
  unsigned int *v24;
  unsigned int *v25;
  uint64_t v26;
  const char *v27;
  NSObject *v28;
  const char *v29;
  uint64_t v30;
  void **v31;
  const char *v32;
  void **v33;
  id v34;
  id v35;
  const char *id_string;
  const char *v37;
  nw_endpoint_t v38;
  const char *v39;
  const char *v40;
  char *v41;
  const char *v42;
  const char *v43;
  id v44;
  NWConcrete_nw_endpoint_mode_handler *v45;
  uint64_t v46;
  id *v47;
  id *v48;
  int v49;
  NSObject *p_super;
  id v51;
  nw_endpoint_t v52;
  unsigned __int8 *v53;
  int v54;
  char v55;
  NSObject *v56;
  const char *v57;
  nw_endpoint_t v58;
  const char *v59;
  const char *v60;
  const char *v61;
  id v62;
  unsigned int *v63;
  NWConcrete_nw_path *v64;
  NWConcrete_nw_path *v65;
  const sockaddr *address;
  NSObject *v67;
  const char *v68;
  const char *v69;
  const char *v70;
  const char *v71;
  const char *v72;
  id v73;
  unsigned int *v74;
  BOOL v75;
  id v76;
  _BOOL4 v77;
  unsigned int *v78;
  int v79;
  int v80;
  char v81;
  uint64_t v82;
  NSObject *v83;
  const char *v84;
  const char *v85;
  nw_endpoint_t v86;
  const char *v87;
  const char *v88;
  const char *v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  _BOOL4 v93;
  _BOOL4 v94;
  _DWORD *v95;
  unsigned int v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int *v101;
  _BOOL4 v102;
  NSObject *v103;
  char *v104;
  char *v105;
  _BOOL4 v106;
  const char *v107;
  nw_endpoint_t v108;
  const char *v109;
  unsigned int *v110;
  unsigned int *v111;
  uint64_t v112;
  const char *v113;
  int v114;
  char v115;
  int v116;
  uint64_t v117;
  id *v118;
  id *v119;
  unsigned int *v120;
  _BOOL8 v121;
  void *v122;
  NWConcrete_nw_endpoint_handler *v123;
  int state;
  uint64_t v125;
  uint64_t v126;
  char v127;
  id v128;
  unsigned int *v129;
  unsigned __int8 *v130;
  id *v131;
  id v132;
  int v133;
  char v134;
  NSObject *v135;
  const char *v136;
  const char *v137;
  nw_endpoint_t v138;
  const char *v139;
  const char *v140;
  const char *v141;
  id v142;
  uint64_t v143;
  dispatch_time_t v144;
  NSObject *v145;
  _BOOL4 v146;
  void **v147;
  void **v148;
  const char *v149;
  int v150;
  char v151;
  NSObject *v152;
  const char *v153;
  const char *v154;
  nw_endpoint_t v155;
  const char *v156;
  const char *v157;
  const char *v158;
  id v159;
  int v160;
  char v161;
  NSObject *v162;
  const char *v163;
  const char *v164;
  nw_endpoint_t v165;
  const char *v166;
  const char *v167;
  const char *v168;
  id v169;
  void *v170;
  id v171;
  void **v172;
  id v173;
  int v175;
  int minimize_logging;
  char logging_disabled;
  const char *v178;
  const char *v179;
  nw_endpoint_t v180;
  const char *v181;
  const char *v182;
  const char *v183;
  id v184;
  NSObject *v185;
  const char *v186;
  const char *v187;
  nw_endpoint_t v188;
  const char *v189;
  const char *v190;
  const char *v191;
  id v192;
  __int16 v193;
  void *v194;
  char *v195;
  NSObject *v196;
  os_log_type_t v197;
  char *backtrace_string;
  os_log_type_t v199;
  _BOOL4 v200;
  os_log_type_t v201;
  const char *v202;
  const char *v203;
  nw_endpoint_t v204;
  const char *v205;
  const char *v206;
  const char *v207;
  id v208;
  const char *v209;
  const char *v210;
  nw_endpoint_t v211;
  const char *v212;
  const char *v213;
  const char *v214;
  id v215;
  const char *v216;
  const char *v217;
  nw_endpoint_t v218;
  const char *v219;
  const char *v220;
  const char *v221;
  id v222;
  const char *v223;
  nw_endpoint_t v224;
  const char *v225;
  const char *v226;
  const char *v227;
  id v228;
  nw_endpoint_t v229;
  const char *v230;
  const char *v231;
  const char *v232;
  id v233;
  NSObject *v234;
  const char *v235;
  nw_endpoint_t v236;
  const char *v237;
  const char *v238;
  const char *v239;
  id v240;
  const char *v241;
  const char *v242;
  nw_endpoint_t v243;
  const char *v244;
  const char *v245;
  const char *v246;
  id v247;
  const char *v248;
  nw_endpoint_t v249;
  const char *v250;
  const char *v251;
  const char *v252;
  id v253;
  int v254;
  const char *v255;
  const char *v256;
  const char *v257;
  nw_endpoint_t v258;
  NSObject *log;
  const char *loga;
  unsigned int *v261;
  unsigned int *v262;
  unsigned int *v263;
  id obj;
  unsigned __int16 *v265;
  const char *v266;
  const char *v267;
  const char *v268;
  unsigned int v269;
  NSObject *v270;
  os_log_t v271;
  os_log_t v272;
  NSObject *v273;
  NSObject *v274;
  const char *v275;
  const char *v276;
  const char *v277;
  unsigned int *v278;
  id v279;
  void *v280;
  NSObject *object;
  _QWORD v282[4];
  NSObject *v283;
  os_log_type_t *v284;
  os_log_type_t type[8];
  os_log_type_t *v286;
  uint64_t v287;
  char v288;
  _QWORD v289[4];
  NWConcrete_nw_endpoint_handler *v290;
  _QWORD v291[4];
  NWConcrete_nw_endpoint_handler *v292;
  _QWORD v293[4];
  NSObject *v294;
  char v295;
  _BYTE buf[22];
  __int16 v297;
  const char *v298;
  __int16 v299;
  const char *v300;
  __int16 v301;
  void *v302;
  __int16 v303;
  const char *v304;
  __int16 v305;
  id v306;
  __int16 v307;
  uint64_t v308;
  __int16 v309;
  const char *v310;
  __int16 v311;
  const char *v312;
  __int16 v313;
  const char *v314;
  __int16 v315;
  const char *v316;
  __int16 v317;
  id v318;
  uint64_t v319;

  v319 = *MEMORY[0x1E0C80C00];
  object = a1;
  v279 = a5;
  v12 = a6;
  v280 = v12;
  if (!v12)
  {
    __nwlog_obj();
    v194 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
    v195 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v295 = 0;
    if (__nwlog_fault(v195, type, &v295))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v196 = objc_claimAutoreleasedReturnValue();
        v197 = type[0];
        if (os_log_type_enabled(v196, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
          _os_log_impl(&dword_182FBE000, v196, v197, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v295)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v196 = objc_claimAutoreleasedReturnValue();
        v199 = type[0];
        v200 = os_log_type_enabled(v196, type[0]);
        if (backtrace_string)
        {
          if (v200)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v196, v199, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_234;
        }
        if (v200)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
          _os_log_impl(&dword_182FBE000, v196, v199, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v196 = objc_claimAutoreleasedReturnValue();
        v201 = type[0];
        if (os_log_type_enabled(v196, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
          _os_log_impl(&dword_182FBE000, v196, v201, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_234:
    if (v195)
      free(v195);
    goto LABEL_18;
  }
  v13 = (unsigned int *)v12;
  v14 = v13[29];

  if ((_DWORD)v14 == 1)
  {
    obj = a1;
    v269 = a3;
    v15 = v13;
    v16 = *((_BYTE *)v15 + 268);

    v17 = &unk_1ECD84000;
    v278 = v15;
    v265 = a4;
    if ((v16 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v18 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        v19 = v15;

        v20 = v19;
        v21 = *((_BYTE *)v15 + 268);

        if ((v21 & 1) != 0)
          v22 = "dry-run ";
        else
          v22 = "";
        log = v18;
        v258 = nw_endpoint_handler_copy_endpoint(v20);
        logging_description = nw_endpoint_get_logging_description(v258);
        v24 = v20;
        v25 = v24;
        v26 = v24[30];
        if (v26 > 5)
          v27 = "unknown-state";
        else
          v27 = off_1E149FC48[v26];
        v256 = v27;

        v31 = v25;
        v257 = logging_description;
        v32 = "path";
        switch(v13[29])
        {
          case 0u:
            break;
          case 1u:
            v32 = "resolver";
            break;
          case 2u:
            v32 = nw_endpoint_flow_mode_string(v31[31]);
            break;
          case 3u:
            v32 = "proxy";
            break;
          case 4u:
            v32 = "fallback";
            break;
          case 5u:
            v32 = "transform";
            break;
          default:
            v32 = "unknown-mode";
            break;
        }
        v255 = v32;

        v33 = v31;
        os_unfair_lock_lock((os_unfair_lock_t)v33 + 28);
        v34 = v33[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v33 + 28);

        v35 = v34;
        id_string = nw_endpoint_handler_get_id_string(object);
        v37 = nw_endpoint_handler_dry_run_string(object);
        v38 = nw_endpoint_handler_copy_endpoint(object);
        v39 = v22;
        v254 = a2;
        v261 = v13;
        v40 = nw_endpoint_get_logging_description(v38);
        v41 = (char *)(v19 + 42);
        v42 = nw_endpoint_handler_state_string(object);
        v43 = nw_endpoint_handler_mode_string(object);
        v44 = nw_endpoint_handler_copy_current_path(object);
        *(_DWORD *)buf = 136449282;
        *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v41;
        v297 = 2082;
        v298 = v39;
        v299 = 2082;
        v300 = v257;
        v301 = 2082;
        v302 = (void *)v256;
        v303 = 2082;
        v304 = v255;
        v305 = 2114;
        v306 = v35;
        v307 = 2082;
        v308 = (uint64_t)id_string;
        v309 = 2082;
        v310 = v37;
        v311 = 2082;
        v312 = v40;
        v313 = 2082;
        v314 = v42;
        v315 = 2082;
        v316 = v43;
        v317 = 2114;
        v318 = v44;
        v18 = log;
        _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] received child report: [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", buf, 0x84u);

        v17 = &unk_1ECD84000;
        v13 = v261;
        a2 = v254;

      }
      v15 = v278;
      a4 = v265;
    }
    nw_endpoint_handler_report(v15, object, a4, v279);
    v45 = nw_endpoint_handler_copy_resolver((NWConcrete_nw_endpoint_handler *)v15);
    v46 = *((_QWORD *)v45 + 5);
    if (v46 && object)
    {
      v48 = *(id **)(v46 + 16);
      v47 = *(id **)(v46 + 24);
      if (v48 != v47)
      {
        while (*v48 != object)
        {
          if (++v48 == v47)
          {
            v48 = *(id **)(v46 + 24);
            break;
          }
        }
      }
      if (v48 != v47)
      {
        if (a4 && *a4 - 1 <= 1 && a4[1] == 7)
        {
          v49 = 1;
LABEL_95:
          v93 = networkd_settings_get_BOOL((const char *)nw_setting_tcpconn_no_happy_eyeballs_full_stack);
          v94 = 0;
          if (v269 == 2 && a4)
            v94 = *a4 == 3 && a4[1] == 5;
          if (v279)
          {
            v95 = v279;
            v96 = v95[3];

            if (v96 > 0x3D)
              LODWORD(v97) = 1;
            else
              v97 = (0xFFFFFFFFFFFFFFEuLL >> v96) & 1;
          }
          else
          {
            LODWORD(v97) = 0;
          }
          if (v269 != 3)
          {
            v114 = *((unsigned __int8 *)v45 + 24);
            v115 = v97 & v114;
            v116 = v93 ? v94 : v97 & v114;
            if ((v115 & 1) == 0 && !v116)
            {
              if (v269 == 4)
              {
                v117 = *((_QWORD *)v45 + 6);
                if (v117)
                {
                  v119 = *(id **)(v117 + 16);
                  v118 = *(id **)(v117 + 24);
                  if (v119 != v118)
                  {
                    while (*v119 != object)
                    {
                      if (++v119 == v118)
                      {
                        v119 = *(id **)(v117 + 24);
                        break;
                      }
                    }
                  }
                  v120 = v278;
                  if (v119 != v118)
                  {
LABEL_138:
                    v123 = v120;
                    state = v123->state;

                    if (state != 5)
                    {
                      v125 = *((_QWORD *)v45 + 6);
                      if (v125)
                        v125 = (uint64_t)(*(_QWORD *)(v125 + 24) - *(_QWORD *)(v125 + 16)) >> 3;
                      v126 = *((_QWORD *)v45 + 5);
                      if (v126)
                        v126 = (uint64_t)(*(_QWORD *)(v126 + 24) - *(_QWORD *)(v126 + 16)) >> 3;
                      if (v125 == v126)
                      {
                        v127 = *((_BYTE *)v45 + 24);
                        if ((v127 & 4) == 0)
                        {
                          nw_endpoint_resolver_check_desperate_ivan(v123);
                          v127 = *((_BYTE *)v45 + 24);
                        }
                        if ((v127 & 8) != 0 && nw_endpoint_resolver_add_desperate_ivan(v123))
                        {
                          v128 = nw_endpoint_handler_copy_context(v123);
                          v291[0] = MEMORY[0x1E0C809B0];
                          v291[1] = 3221225472;
                          v291[2] = ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_2;
                          v291[3] = &unk_1E14ACFD0;
                          v292 = v123;
                          nw_queue_context_async(v128, v291);

                          p_super = &v292->super;
                          goto LABEL_167;
                        }
                        v175 = *((_DWORD *)v45 + 4);
                        minimize_logging = nw_endpoint_handler_get_minimize_logging(v123);
                        logging_disabled = nw_endpoint_handler_get_logging_disabled(v123);
                        if (v175 == 1)
                        {
                          if (minimize_logging)
                          {
                            if ((logging_disabled & 1) != 0)
                              goto LABEL_198;
                            if (v17[413] != -1)
                              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                            p_super = (id)gconnectionLogObj;
                            if (os_log_type_enabled(p_super, OS_LOG_TYPE_DEBUG))
                            {
                              v241 = nw_endpoint_handler_get_id_string(v123);
                              v242 = nw_endpoint_handler_dry_run_string(v123);
                              v243 = nw_endpoint_handler_copy_endpoint(v123);
                              v244 = nw_endpoint_get_logging_description(v243);
                              v245 = nw_endpoint_handler_state_string(v123);
                              v246 = nw_endpoint_handler_mode_string(v123);
                              v247 = nw_endpoint_handler_copy_current_path(v123);
                              *(_DWORD *)buf = 136447746;
                              *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v241;
                              v297 = 2082;
                              v298 = v242;
                              v299 = 2082;
                              v300 = v244;
                              v301 = 2082;
                              v302 = (void *)v245;
                              v303 = 2082;
                              v304 = v246;
                              v305 = 2114;
                              v306 = v247;
                              _os_log_impl(&dword_182FBE000, p_super, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed, but resolver isn't done. Wait.", buf, 0x48u);

                            }
                          }
                          else
                          {
                            if ((logging_disabled & 1) != 0)
                              goto LABEL_198;
                            if (v17[413] != -1)
                              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                            p_super = (id)gconnectionLogObj;
                            if (os_log_type_enabled(p_super, OS_LOG_TYPE_INFO))
                            {
                              v178 = nw_endpoint_handler_get_id_string(v123);
                              v179 = nw_endpoint_handler_dry_run_string(v123);
                              v180 = nw_endpoint_handler_copy_endpoint(v123);
                              v181 = nw_endpoint_get_logging_description(v180);
                              v182 = nw_endpoint_handler_state_string(v123);
                              v183 = nw_endpoint_handler_mode_string(v123);
                              v184 = nw_endpoint_handler_copy_current_path(v123);
                              *(_DWORD *)buf = 136447746;
                              *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
                              *(_WORD *)&buf[12] = 2082;
                              *(_QWORD *)&buf[14] = v178;
                              v297 = 2082;
                              v298 = v179;
                              v299 = 2082;
                              v300 = v181;
                              v301 = 2082;
                              v302 = (void *)v182;
                              v303 = 2082;
                              v304 = v183;
                              v305 = 2114;
                              v306 = v184;
                              _os_log_impl(&dword_182FBE000, p_super, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed, but resolver isn't done. Wait.", buf, 0x48u);

                            }
                          }
                          goto LABEL_167;
                        }
                        if (minimize_logging)
                        {
                          if ((logging_disabled & 1) != 0)
                            goto LABEL_214;
                          if (v17[413] != -1)
                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                          v185 = (id)gconnectionLogObj;
                          if (os_log_type_enabled(v185, OS_LOG_TYPE_DEBUG))
                          {
                            v277 = nw_endpoint_handler_get_id_string(v123);
                            v248 = nw_endpoint_handler_dry_run_string(v123);
                            v249 = nw_endpoint_handler_copy_endpoint(v123);
                            v250 = nw_endpoint_get_logging_description(v249);
                            v251 = nw_endpoint_handler_state_string(v123);
                            v252 = nw_endpoint_handler_mode_string(v123);
                            v253 = nw_endpoint_handler_copy_current_path(v123);
                            *(_DWORD *)buf = 136447746;
                            *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v277;
                            v297 = 2082;
                            v298 = v248;
                            v299 = 2082;
                            v300 = v250;
                            v301 = 2082;
                            v302 = (void *)v251;
                            v303 = 2082;
                            v304 = v252;
                            v305 = 2114;
                            v306 = v253;
                            _os_log_impl(&dword_182FBE000, v185, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);

                          }
                        }
                        else
                        {
                          if ((logging_disabled & 1) != 0)
                          {
LABEL_214:
                            nw_endpoint_handler_handle_failure(v123);
                            if (v49)
                              v193 = 7;
                            else
                              v193 = 5;
                            v123->event.domain = 2;
                            v123->event.event = v193;
                            nw_endpoint_handler_report(v123, 0, &v123->event.domain, 0);
                            goto LABEL_198;
                          }
                          if (v17[413] != -1)
                            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                          v185 = (id)gconnectionLogObj;
                          if (os_log_type_enabled(v185, OS_LOG_TYPE_INFO))
                          {
                            v274 = v185;
                            v186 = nw_endpoint_handler_get_id_string(v123);
                            v187 = nw_endpoint_handler_dry_run_string(v123);
                            v188 = nw_endpoint_handler_copy_endpoint(v123);
                            v189 = nw_endpoint_get_logging_description(v188);
                            v190 = nw_endpoint_handler_state_string(v123);
                            v191 = nw_endpoint_handler_mode_string(v123);
                            v192 = nw_endpoint_handler_copy_current_path(v123);
                            *(_DWORD *)buf = 136447746;
                            *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
                            *(_WORD *)&buf[12] = 2082;
                            *(_QWORD *)&buf[14] = v186;
                            v297 = 2082;
                            v298 = v187;
                            v299 = 2082;
                            v300 = v189;
                            v301 = 2082;
                            v302 = (void *)v190;
                            v303 = 2082;
                            v304 = v191;
                            v305 = 2114;
                            v306 = v192;
                            _os_log_impl(&dword_182FBE000, v274, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all children failed", buf, 0x48u);

                            v185 = v274;
                          }
                        }

                        goto LABEL_214;
                      }
                      if (v125 != *((_DWORD *)v45 + 5))
                        goto LABEL_198;
                      v160 = nw_endpoint_handler_get_minimize_logging(v123);
                      v161 = nw_endpoint_handler_get_logging_disabled(v123);
                      if (v160)
                      {
                        if ((v161 & 1) != 0)
                          goto LABEL_187;
                        if (v17[413] != -1)
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                        v234 = (id)gconnectionLogObj;
                        if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
                        {
                          v276 = nw_endpoint_handler_get_id_string(v123);
                          v235 = nw_endpoint_handler_dry_run_string(v123);
                          v236 = nw_endpoint_handler_copy_endpoint(v123);
                          v237 = nw_endpoint_get_logging_description(v236);
                          v238 = nw_endpoint_handler_state_string(v123);
                          v239 = nw_endpoint_handler_mode_string(v123);
                          v240 = nw_endpoint_handler_copy_current_path(v123);
                          *(_DWORD *)buf = 136447746;
                          *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v276;
                          v297 = 2082;
                          v298 = v235;
                          v299 = 2082;
                          v300 = v237;
                          v301 = 2082;
                          v302 = (void *)v238;
                          v303 = 2082;
                          v304 = v239;
                          v305 = 2114;
                          v306 = v240;
                          _os_log_impl(&dword_182FBE000, v234, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.", buf, 0x48u);

                        }
                        v162 = v234;
                      }
                      else
                      {
                        if ((v161 & 1) != 0)
                        {
LABEL_187:
                          if (v49)
                          {
                            v170 = (void *)*((_QWORD *)v45 + 4);
                            *((_QWORD *)v45 + 4) = 0;

                          }
                          v171 = nw_endpoint_handler_copy_context(v123);
                          v289[0] = MEMORY[0x1E0C809B0];
                          v289[1] = 3221225472;
                          v289[2] = ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_110;
                          v289[3] = &unk_1E14ACFD0;
                          v290 = v123;
                          nw_queue_context_async(v171, v289);

                          p_super = &v290->super;
                          goto LABEL_167;
                        }
                        if (v17[413] != -1)
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                        v162 = (id)gconnectionLogObj;
                        if (os_log_type_enabled(v162, OS_LOG_TYPE_INFO))
                        {
                          v163 = nw_endpoint_handler_get_id_string(v123);
                          v164 = nw_endpoint_handler_dry_run_string(v123);
                          v273 = v162;
                          v165 = nw_endpoint_handler_copy_endpoint(v123);
                          v166 = nw_endpoint_get_logging_description(v165);
                          v167 = nw_endpoint_handler_state_string(v123);
                          v168 = nw_endpoint_handler_mode_string(v123);
                          v169 = nw_endpoint_handler_copy_current_path(v123);
                          *(_DWORD *)buf = 136447746;
                          *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
                          *(_WORD *)&buf[12] = 2082;
                          *(_QWORD *)&buf[14] = v163;
                          v297 = 2082;
                          v298 = v164;
                          v299 = 2082;
                          v300 = v166;
                          v301 = 2082;
                          v302 = (void *)v167;
                          v303 = 2082;
                          v304 = v168;
                          v305 = 2114;
                          v306 = v169;
                          _os_log_impl(&dword_182FBE000, v273, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] all started children failed, start next child.", buf, 0x48u);

                          v162 = v273;
                        }
                      }

                      goto LABEL_187;
                    }
LABEL_198:

                    v30 = 1;
                    goto LABEL_199;
                  }
                }
                else
                {
                  v121 = nw_array_create();
                  v122 = (void *)*((_QWORD *)v45 + 6);
                  *((_QWORD *)v45 + 6) = v121;

                  v117 = *((_QWORD *)v45 + 6);
                }
                nw_array_append(v117, object);
                v120 = v278;
                goto LABEL_138;
              }
              if (v114 & 1 | !v94)
                goto LABEL_198;
              *((_BYTE *)v45 + 24) = v114 | 1;
              if (!*((_QWORD *)v45 + 7))
                goto LABEL_198;
              v133 = nw_endpoint_handler_get_minimize_logging(v278);
              v134 = nw_endpoint_handler_get_logging_disabled(v278);
              if (v133)
              {
                if ((v134 & 1) != 0)
                  goto LABEL_163;
                if (v17[413] != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v135 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v135, OS_LOG_TYPE_DEBUG))
                {
                  v216 = nw_endpoint_handler_get_id_string(v278);
                  v217 = nw_endpoint_handler_dry_run_string(v278);
                  v218 = nw_endpoint_handler_copy_endpoint(v278);
                  v219 = nw_endpoint_get_logging_description(v218);
                  v220 = nw_endpoint_handler_state_string(v278);
                  v221 = nw_endpoint_handler_mode_string(v278);
                  v222 = nw_endpoint_handler_copy_current_path(v278);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v216;
                  v297 = 2082;
                  v298 = v217;
                  v299 = 2082;
                  v300 = v219;
                  v301 = 2082;
                  v302 = (void *)v220;
                  v303 = 2082;
                  v304 = v221;
                  v305 = 2114;
                  v306 = v222;
                  v307 = 2048;
                  v308 = 2000;
                  _os_log_impl(&dword_182FBE000, v135, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] pushing out endpoint race by %llums", buf, 0x52u);

                }
              }
              else
              {
                if ((v134 & 1) != 0)
                {
LABEL_163:
                  v143 = *((_QWORD *)v45 + 7);
                  v144 = dispatch_time(0x8000000000000000, 2000000000);
                  nw_queue_set_timer_values(v143, v144, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
                  goto LABEL_198;
                }
                if (v17[413] != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v135 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v135, OS_LOG_TYPE_INFO))
                {
                  v136 = nw_endpoint_handler_get_id_string(v278);
                  v137 = nw_endpoint_handler_dry_run_string(v278);
                  v138 = nw_endpoint_handler_copy_endpoint(v278);
                  v139 = nw_endpoint_get_logging_description(v138);
                  v140 = nw_endpoint_handler_state_string(v278);
                  v141 = nw_endpoint_handler_mode_string(v278);
                  v142 = nw_endpoint_handler_copy_current_path(v278);
                  *(_DWORD *)buf = 136448002;
                  *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v136;
                  v297 = 2082;
                  v298 = v137;
                  v299 = 2082;
                  v300 = v139;
                  v301 = 2082;
                  v302 = (void *)v140;
                  v303 = 2082;
                  v304 = v141;
                  v305 = 2114;
                  v306 = v142;
                  v307 = 2048;
                  v308 = 2000;
                  _os_log_impl(&dword_182FBE000, v135, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] pushing out endpoint race by %llums", buf, 0x52u);

                }
              }

              goto LABEL_163;
            }
          }
          v98 = *((_QWORD *)v45 + 7);
          if (v98)
          {
            nw_queue_cancel_source(v98, v92);
            *((_QWORD *)v45 + 7) = 0;
          }
          v99 = *((_QWORD *)v45 + 8);
          if (v99)
          {
            nw_queue_cancel_source(v99, v92);
            *((_QWORD *)v45 + 8) = 0;
          }
          v100 = *((_QWORD *)v45 + 9);
          if (v100)
          {
            nw_queue_cancel_source(v100, v92);
            *((_QWORD *)v45 + 9) = 0;
          }
          if (v269 != 4)
          {
            objc_storeStrong((id *)v45 + 4, obj);
            if (v269 == 3)
            {
              v129 = v278;
              v129[30] = 3;

            }
            nw_endpoint_handler_report(v278, 0, v265, 0);
            v130 = (unsigned __int8 *)*((_QWORD *)v45 + 5);
            v293[0] = MEMORY[0x1E0C809B0];
            v293[1] = 3221225472;
            v293[2] = ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke;
            v293[3] = &unk_1E14AC200;
            v294 = object;
            nw_array_apply(v130, (uint64_t)v293);
            if (*((_QWORD *)v45 + 1))
            {
              v131 = v278;
              v132 = v131[4];

              if (nw_parameters_get_use_long_outstanding_queries(v132))
              {

              }
              else
              {
                v145 = nw_endpoint_handler_copy_endpoint(v131);
                v146 = nw_endpoint_get_type(v145) == nw_endpoint_type_bonjour_service;

                if (v146)
                  nw_resolver_cancel(*((void **)v45 + 1));
              }
            }
            p_super = v294;
            goto LABEL_167;
          }
          if (nw_endpoint_handler_get_minimize_logging(v278))
          {
            if ((nw_endpoint_handler_get_logging_disabled(v278) & 1) != 0)
              goto LABEL_197;
            if (v17[413] != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v103 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
            {
              v202 = nw_endpoint_handler_get_id_string(v278);
              v203 = nw_endpoint_handler_dry_run_string(v278);
              v204 = nw_endpoint_handler_copy_endpoint(v278);
              v205 = nw_endpoint_get_logging_description(v204);
              v206 = nw_endpoint_handler_state_string(v278);
              v207 = nw_endpoint_handler_mode_string(v278);
              v208 = nw_endpoint_handler_copy_current_path(v278);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v202;
              v297 = 2082;
              v298 = v203;
              v299 = 2082;
              v300 = v205;
              v301 = 2082;
              v302 = (void *)v206;
              v303 = 2082;
              v304 = v207;
              v305 = 2114;
              v306 = v208;
              _os_log_impl(&dword_182FBE000, v103, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child failed after transport finished", buf, 0x48u);

            }
          }
          else
          {
            v101 = v278;
            v102 = (v278[67] & 0x20) == 0;

            if (!v102)
            {
LABEL_197:
              nw_endpoint_handler_handle_failure(v278);
              v278[20] = 327682;
              nw_endpoint_handler_report(v278, 0, (_WORD *)v278 + 40, 0);
              goto LABEL_198;
            }
            if (v17[413] != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v103 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
            {
              v104 = v101;

              v105 = v104;
              v106 = (v278[67] & 1) == 0;

              if (v106)
                v107 = "";
              else
                v107 = "dry-run ";
              v108 = nw_endpoint_handler_copy_endpoint(v105);
              v109 = nw_endpoint_get_logging_description(v108);
              v110 = v105;
              v111 = v110;
              v112 = v110[30];
              if (v112 > 5)
                v113 = "unknown-state";
              else
                v113 = off_1E149FC48[v112];
              v272 = (os_log_t)v113;

              v147 = v111;
              v148 = v147;
              v149 = "path";
              switch(v13[29])
              {
                case 0u:
                  break;
                case 1u:
                  v149 = "resolver";
                  break;
                case 2u:
                  v149 = nw_endpoint_flow_mode_string(v147[31]);
                  break;
                case 3u:
                  v149 = "proxy";
                  break;
                case 4u:
                  v149 = "fallback";
                  break;
                case 5u:
                  v149 = "transform";
                  break;
                default:
                  v149 = "unknown-mode";
                  break;
              }

              v172 = v148;
              os_unfair_lock_lock((os_unfair_lock_t)v172 + 28);
              v173 = v172[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v172 + 28);

              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v104 + 168;
              v297 = 2082;
              v298 = v107;
              v299 = 2082;
              v300 = v109;
              v301 = 2082;
              v302 = v272;
              v303 = 2082;
              v304 = v149;
              v305 = 2114;
              v306 = v173;
              _os_log_impl(&dword_182FBE000, v103, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child failed after transport finished", buf, 0x48u);

            }
          }

          goto LABEL_197;
        }
        if (*((NSObject **)v45 + 4) != object)
        {
          if (a2 == 2 && v269 == 4)
          {
            p_super = nw_endpoint_handler_copy_endpoint(object);
            if (nw_endpoint_get_type(p_super) == nw_endpoint_type_address)
            {
              v63 = v15;
              os_unfair_lock_lock((os_unfair_lock_t)v63 + 28);
              v64 = (NWConcrete_nw_path *)*((id *)v63 + 8);
              os_unfair_lock_unlock((os_unfair_lock_t)v63 + 28);

              *(_DWORD *)type = 0;
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = 0;
              v65 = v64;
              if (nw_path_get_vpn_config_uuid(v64, (unsigned __int8 (*)[16])buf, (int *)type, 1, 1))
              {
                address = nw_endpoint_get_address(p_super);
                if (nw_path_voluntary_agent_matches_address(v64, (uint64_t)address))
                {
                  if (nw_endpoint_handler_trigger_agents(v63, 1))
                  {
                    if ((nw_endpoint_handler_get_logging_disabled(v63) & 1) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v67 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v67, OS_LOG_TYPE_DEBUG))
                      {
                        v68 = nw_endpoint_handler_get_id_string(v63);
                        v267 = nw_endpoint_handler_dry_run_string(v63);
                        v271 = nw_endpoint_handler_copy_endpoint(v63);
                        v69 = v68;
                        v70 = nw_endpoint_get_logging_description(v271);
                        v71 = nw_endpoint_handler_state_string(v63);
                        v72 = nw_endpoint_handler_mode_string(v63);
                        v73 = nw_endpoint_handler_copy_current_path(v63);
                        *(_DWORD *)buf = 136447746;
                        *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
                        *(_WORD *)&buf[12] = 2082;
                        *(_QWORD *)&buf[14] = v69;
                        v297 = 2082;
                        v298 = v267;
                        v299 = 2082;
                        v300 = v70;
                        v301 = 2082;
                        v302 = (void *)v71;
                        v303 = 2082;
                        v304 = v72;
                        v305 = 2114;
                        v306 = v73;
                        _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Child flow failed, trying to trigger matching voluntary agents", buf, 0x48u);

                      }
                      v65 = v64;
                    }
                    nw_endpoint_handler_reset_mode(v63, 0);
                  }

                  goto LABEL_167;
                }
              }

            }
            goto LABEL_94;
          }
          if (a2 != 3 || (v79 = *((_DWORD *)v45 + 5)) == 0 || !*((_QWORD *)v45 + 7))
          {
            v49 = 0;
            goto LABEL_95;
          }
          nw_array_get_object_at_index(v46, (v79 - 1));
          p_super = objc_claimAutoreleasedReturnValue();
          if (p_super != object)
          {
LABEL_94:

            v49 = 0;
            a4 = v265;
            goto LABEL_95;
          }
          v80 = nw_endpoint_handler_get_minimize_logging(v278);
          v81 = nw_endpoint_handler_get_logging_disabled(v278);
          if (v80)
          {
            if ((v81 & 1) != 0)
            {
LABEL_90:
              v91 = *((_QWORD *)v45 + 7);
              p_super = object;
              if (v91)
              {
                nw_queue_cancel_source(v91, v82);
                *((_QWORD *)v45 + 7) = 0;
                p_super = object;
              }
              goto LABEL_94;
            }
            v263 = v13;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v83 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
            {
              loga = nw_endpoint_handler_get_id_string(v278);
              v223 = nw_endpoint_handler_dry_run_string(v278);
              v224 = nw_endpoint_handler_copy_endpoint(v278);
              v225 = nw_endpoint_get_logging_description(v224);
              v226 = nw_endpoint_handler_state_string(v278);
              v227 = nw_endpoint_handler_mode_string(v278);
              v228 = nw_endpoint_handler_copy_current_path(v278);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = loga;
              v297 = 2082;
              v298 = v223;
              v299 = 2082;
              v300 = v225;
              v301 = 2082;
              v302 = (void *)v226;
              v303 = 2082;
              v304 = v227;
              v305 = 2114;
              v306 = v228;
              _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child is proxy, cancelling happy eyeballs timer", buf, 0x48u);

              v13 = v263;
              v17 = &unk_1ECD84000;

            }
          }
          else
          {
            if ((v81 & 1) != 0)
              goto LABEL_90;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v83 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v83, OS_LOG_TYPE_INFO))
            {
              v84 = nw_endpoint_handler_get_id_string(v278);
              v85 = nw_endpoint_handler_dry_run_string(v278);
              v86 = nw_endpoint_handler_copy_endpoint(v278);
              v262 = v13;
              v87 = nw_endpoint_get_logging_description(v86);
              v88 = nw_endpoint_handler_state_string(v278);
              v89 = nw_endpoint_handler_mode_string(v278);
              v90 = nw_endpoint_handler_copy_current_path(v278);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v84;
              v297 = 2082;
              v298 = v85;
              v299 = 2082;
              v300 = v87;
              v301 = 2082;
              v302 = (void *)v88;
              v303 = 2082;
              v304 = v89;
              v305 = 2114;
              v306 = v90;
              _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] child is proxy, cancelling happy eyeballs timer", buf, 0x48u);

              v17 = (_QWORD *)&unk_1ECD84000;
              v13 = v262;

            }
          }

          goto LABEL_90;
        }
        if (v269 != 4)
          goto LABEL_78;
        v74 = v15;
        v75 = (v15[67] & 8) == 0;

        v15 = v278;
        if (v75 || (v76 = nw_endpoint_handler_copy_parent(v74), v77 = v76 == 0, v76, v15 = v278, !v77))
        {
LABEL_78:
          v78 = v15;
          v78[30] = v269;

          nw_endpoint_handler_report(v78, 0, v265, 0);
          goto LABEL_198;
        }
        v150 = nw_endpoint_handler_get_minimize_logging(v74);
        v151 = nw_endpoint_handler_get_logging_disabled(v74);
        if (v150)
        {
          if ((v151 & 1) != 0)
            goto LABEL_178;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v152 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v152, OS_LOG_TYPE_DEBUG))
          {
            v209 = nw_endpoint_handler_get_id_string(v74);
            v210 = nw_endpoint_handler_dry_run_string(v74);
            v211 = nw_endpoint_handler_copy_endpoint(v74);
            v212 = nw_endpoint_get_logging_description(v211);
            v213 = nw_endpoint_handler_state_string(v74);
            v214 = nw_endpoint_handler_mode_string(v74);
            v215 = nw_endpoint_handler_copy_current_path(v74);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v209;
            v297 = 2082;
            v298 = v210;
            v299 = 2082;
            v300 = v212;
            v301 = 2082;
            v302 = (void *)v213;
            v303 = 2082;
            v304 = v214;
            v305 = 2114;
            v306 = v215;
            _os_log_impl(&dword_182FBE000, v152, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] connected child failed when a better path is available", buf, 0x48u);

          }
        }
        else
        {
          if ((v151 & 1) != 0)
          {
LABEL_178:
            nw_endpoint_handler_handle_failure(v74);
            goto LABEL_198;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v152 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v152, OS_LOG_TYPE_INFO))
          {
            v153 = nw_endpoint_handler_get_id_string(v74);
            v154 = nw_endpoint_handler_dry_run_string(v74);
            v155 = nw_endpoint_handler_copy_endpoint(v74);
            v156 = nw_endpoint_get_logging_description(v155);
            v157 = nw_endpoint_handler_state_string(v74);
            v158 = nw_endpoint_handler_mode_string(v74);
            v159 = nw_endpoint_handler_copy_current_path(v74);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v153;
            v297 = 2082;
            v298 = v154;
            v299 = 2082;
            v300 = v156;
            v301 = 2082;
            v302 = (void *)v157;
            v303 = 2082;
            v304 = v158;
            v305 = 2114;
            v306 = v159;
            _os_log_impl(&dword_182FBE000, v152, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] connected child failed when a better path is available", buf, 0x48u);

          }
        }

        goto LABEL_178;
      }
    }
    if (v269 | a2 || !a4 || *a4 != 1 || a4[1] != 1)
      goto LABEL_198;
    p_super = nw_endpoint_handler_copy_parameters(object);
    if (!nw_parameters_get_desperate_ivan(p_super))
      goto LABEL_167;
    v51 = nw_endpoint_handler_copy_parameters(v15);
    if ((nw_parameters_get_desperate_ivan(v51) & 1) != 0)
    {
LABEL_59:

LABEL_167:
      goto LABEL_198;
    }
    v52 = nw_endpoint_handler_copy_endpoint(object);
    if (nw_endpoint_get_type(v52) != nw_endpoint_type_address
      || nw_endpoint_get_address_family(v52) != 30)
    {
LABEL_58:

      goto LABEL_59;
    }
    *(_QWORD *)type = 0;
    v286 = type;
    v287 = 0x2020000000;
    v288 = 0;
    v53 = (unsigned __int8 *)*((_QWORD *)v45 + 5);
    v282[0] = MEMORY[0x1E0C809B0];
    v282[1] = 3221225472;
    v282[2] = ___ZL35nw_endpoint_resolver_receive_reportP30NWConcrete_nw_endpoint_handler26nw_endpoint_handler_mode_t21nw_connection_state_tP27nw_endpoint_handler_event_sPU22objcproto11OS_nw_error8NSObjectPU23objcproto12OS_nw_objectS5__block_invoke_111;
    v282[3] = &unk_1E14AB5F0;
    v283 = v52;
    v284 = type;
    nw_array_apply(v53, (uint64_t)v282);
    if (!*((_BYTE *)v286 + 24))
    {
LABEL_57:

      _Block_object_dispose(type, 8);
      goto LABEL_58;
    }
    v54 = nw_endpoint_handler_get_minimize_logging(v278);
    v55 = nw_endpoint_handler_get_logging_disabled(v278);
    if (v54)
    {
      if ((v55 & 1) != 0)
        goto LABEL_56;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v56 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEBUG))
      {
        v275 = nw_endpoint_handler_get_id_string(v278);
        v268 = nw_endpoint_handler_dry_run_string(v278);
        v229 = nw_endpoint_handler_copy_endpoint(v278);
        v230 = nw_endpoint_get_logging_description(v229);
        v231 = nw_endpoint_handler_state_string(v278);
        v232 = nw_endpoint_handler_mode_string(v278);
        v233 = nw_endpoint_handler_copy_current_path(v278);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v275;
        v297 = 2082;
        v298 = v268;
        v299 = 2082;
        v300 = v230;
        v301 = 2082;
        v302 = (void *)v231;
        v303 = 2082;
        v304 = v232;
        v305 = 2114;
        v306 = v233;
        _os_log_impl(&dword_182FBE000, v56, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping DesperateIvan, address already started", buf, 0x48u);

      }
    }
    else
    {
      if ((v55 & 1) != 0)
      {
LABEL_56:
        nw_endpoint_handler_cancel(object, 0, 1);
        goto LABEL_57;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v56 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v56, OS_LOG_TYPE_INFO))
      {
        v57 = nw_endpoint_handler_get_id_string(v278);
        v266 = nw_endpoint_handler_dry_run_string(v278);
        v270 = v56;
        v58 = nw_endpoint_handler_copy_endpoint(v278);
        v59 = nw_endpoint_get_logging_description(v58);
        v60 = nw_endpoint_handler_state_string(v278);
        v61 = nw_endpoint_handler_mode_string(v278);
        v62 = nw_endpoint_handler_copy_current_path(v278);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v57;
        v297 = 2082;
        v298 = v266;
        v299 = 2082;
        v300 = v59;
        v301 = 2082;
        v302 = (void *)v60;
        v303 = 2082;
        v304 = v61;
        v305 = 2114;
        v306 = v62;
        _os_log_impl(&dword_182FBE000, v270, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping DesperateIvan, address already started", buf, 0x48u);

        v56 = v270;
      }
    }

    goto LABEL_56;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v28 = (id)gLogObj;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    if (v14 > 5)
      v29 = "unknown-mode";
    else
      v29 = off_1E149FC18[v14];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_resolver_receive_report";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v29;
    v297 = 2082;
    v298 = "resolver";
    _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }

LABEL_18:
  v30 = 0;
LABEL_199:

  return v30;
}

void sub_183098B60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;

  _Unwind_Resume(a1);
}

NWConcrete_nw_endpoint_mode_handler *nw_endpoint_handler_copy_resolver(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  NWConcrete_nw_endpoint_mode_handler *v3;
  NSObject *v4;
  const char *v5;
  nw_endpoint_t v6;
  const char *logging_description;
  uint64_t state;
  const char *v9;
  const char *v10;
  NWConcrete_nw_endpoint_handler *v11;
  os_unfair_lock_s *v12;
  const char *v13;
  os_unfair_lock_s *v14;
  id *v15;
  id v16;
  id v17;
  id *v18;
  id *v19;
  const char *v20;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  const char *v30;
  char v31;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v34;
  __int16 v35;
  char *id_str;
  __int16 v37;
  const char *v38;
  __int16 v39;
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  id v46;
  __int16 v47;
  const char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v34 = "nw_endpoint_handler_copy_resolver";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v23, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_endpoint_handler_copy_resolver";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v34 = "nw_endpoint_handler_copy_resolver";
            v35 = 2082;
            id_str = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_48;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_endpoint_handler_copy_resolver";
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          v34 = "nw_endpoint_handler_copy_resolver";
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_48:
    if (v23)
      free(v23);
    goto LABEL_30;
  }
  if (v1->mode != 1)
  {
    if ((*((_BYTE *)v1 + 268) & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        if ((*((_BYTE *)v2 + 268) & 1) != 0)
          v5 = "dry-run ";
        else
          v5 = "";
        v6 = nw_endpoint_handler_copy_endpoint(v2);
        logging_description = nw_endpoint_get_logging_description(v6);
        state = v2->state;
        v9 = logging_description;
        if (state > 5)
          v10 = "unknown-state";
        else
          v10 = off_1E149FC48[state];
        v30 = v10;
        v11 = v2;
        v12 = (os_unfair_lock_s *)v11;
        v13 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            v13 = "resolver";
            break;
          case 2:
            v13 = nw_endpoint_flow_mode_string(v11->mode_handler);
            break;
          case 3:
            v13 = "proxy";
            break;
          case 4:
            v13 = "fallback";
            break;
          case 5:
            v13 = "transform";
            break;
          default:
            v13 = "unknown-mode";
            break;
        }

        v14 = v12 + 28;
        v15 = v12;
        os_unfair_lock_lock(v12 + 28);
        v16 = v15[8];
        os_unfair_lock_unlock(v14);

        v17 = v16;
        v18 = v15;
        v19 = v18;
        v20 = "path";
        switch(v2->mode)
        {
          case 0:
            break;
          case 1:
            v20 = "resolver";
            break;
          case 2:
            v20 = nw_endpoint_flow_mode_string(v18[31]);
            break;
          case 3:
            v20 = "proxy";
            break;
          case 4:
            v20 = "fallback";
            break;
          case 5:
            v20 = "transform";
            break;
          default:
            v20 = "unknown-mode";
            break;
        }

        *(_DWORD *)buf = 136448002;
        v34 = "nw_endpoint_handler_copy_resolver";
        v35 = 2082;
        id_str = v2->id_str;
        v37 = 2082;
        v38 = v5;
        v39 = 2082;
        v40 = v9;
        v41 = 2082;
        v42 = v30;
        v43 = 2082;
        v44 = v13;
        v45 = 2114;
        v46 = v17;
        v47 = 2082;
        v48 = v20;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Endpoint handler is %{public}s, not a resolver", buf, 0x52u);

      }
    }
LABEL_30:
    v3 = 0;
    goto LABEL_31;
  }
  v3 = v1->mode_handler;
LABEL_31:

  return v3;
}

void sub_183099360(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_use_long_outstanding_queries(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[96] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_use_long_outstanding_queries";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_use_long_outstanding_queries";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_use_long_outstanding_queries";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_use_long_outstanding_queries";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_use_long_outstanding_queries";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_instance_process_external_input(void *a1, void *a2)
{
  _BYTE *v3;
  void (**v4)(_QWORD);
  void (**v5)(_QWORD);
  char v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *v11;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  void (*v15)(_BYTE *);
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  os_log_type_t v28;
  os_log_type_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  __int16 v36;
  const char *v37;
  __int16 v38;
  char *v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_protocol_instance_process_external_input";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (!__nwlog_fault(v17, &type, &v30))
      goto LABEL_62;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_protocol_instance_process_external_input";
        _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      v24 = os_log_type_enabled(v18, type);
      if (backtrace_string)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v33 = "nw_protocol_instance_process_external_input";
          v34 = 2082;
          v35 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_62:
        if (!v17)
          goto LABEL_28;
LABEL_63:
        free(v17);
        goto LABEL_28;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_protocol_instance_process_external_input";
        _os_log_impl(&dword_182FBE000, v18, v23, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v18 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      if (os_log_type_enabled(v18, type))
      {
        *(_DWORD *)buf = 136446210;
        v33 = "nw_protocol_instance_process_external_input";
        _os_log_impl(&dword_182FBE000, v18, v28, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_61:

    goto LABEL_62;
  }
  if (v4)
  {
    v6 = v3[403];
    if ((v6 & 0x10) == 0 || (char)v3[405] < 0)
      goto LABEL_25;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446722;
    v33 = "nw_protocol_instance_process_external_input";
    v34 = 2082;
    v35 = v3 + 407;
    v36 = 2080;
    v37 = " ";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v8, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446722;
          v33 = "nw_protocol_instance_process_external_input";
          v34 = 2082;
          v35 = v3 + 407;
          v36 = 2080;
          v37 = " ";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s %{public}s%snested nw_protocol_instance_process_external_input", buf, 0x20u);
        }
      }
      else if (v30)
      {
        v11 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v12 = type;
        v13 = os_log_type_enabled(v9, type);
        if (v11)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446978;
            v33 = "nw_protocol_instance_process_external_input";
            v34 = 2082;
            v35 = v3 + 407;
            v36 = 2080;
            v37 = " ";
            v38 = 2082;
            v39 = v11;
            _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s %{public}s%snested nw_protocol_instance_process_external_input, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v11);
          if (!v8)
            goto LABEL_24;
          goto LABEL_23;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446722;
          v33 = "nw_protocol_instance_process_external_input";
          v34 = 2082;
          v35 = v3 + 407;
          v36 = 2080;
          v37 = " ";
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s %{public}s%snested nw_protocol_instance_process_external_input, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v14 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446722;
          v33 = "nw_protocol_instance_process_external_input";
          v34 = 2082;
          v35 = v3 + 407;
          v36 = 2080;
          v37 = " ";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s %{public}s%snested nw_protocol_instance_process_external_input, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v8)
    {
LABEL_24:
      v6 = v3[403];
LABEL_25:
      v3[403] = v6 | 0x10;
      v15 = *(void (**)(_BYTE *))(*(_QWORD *)(*((_QWORD *)v3 + 1) + 80) + 80);
      if (v15)
        v15(v3);
      v5[2](v5);
      nw_protocol_instance_flush_batched_input_internal((NWConcrete_nw_protocol_instance *)v3);
      goto LABEL_28;
    }
LABEL_23:
    free(v8);
    goto LABEL_24;
  }
  __nwlog_obj();
  v20 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v33 = "nw_protocol_instance_process_external_input";
  v17 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v30 = 0;
  if (!__nwlog_fault(v17, &type, &v30))
    goto LABEL_62;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    if (os_log_type_enabled(v18, type))
    {
      *(_DWORD *)buf = 136446210;
      v33 = "nw_protocol_instance_process_external_input";
      _os_log_impl(&dword_182FBE000, v18, v21, "%{public}s called with null block", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (!v30)
  {
    __nwlog_obj();
    v18 = objc_claimAutoreleasedReturnValue();
    v29 = type;
    if (os_log_type_enabled(v18, type))
    {
      *(_DWORD *)buf = 136446210;
      v33 = "nw_protocol_instance_process_external_input";
      _os_log_impl(&dword_182FBE000, v18, v29, "%{public}s called with null block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_61;
  }
  v25 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v18 = objc_claimAutoreleasedReturnValue();
  v26 = type;
  v27 = os_log_type_enabled(v18, type);
  if (!v25)
  {
    if (v27)
    {
      *(_DWORD *)buf = 136446210;
      v33 = "nw_protocol_instance_process_external_input";
      _os_log_impl(&dword_182FBE000, v18, v26, "%{public}s called with null block, no backtrace", buf, 0xCu);
    }
    goto LABEL_61;
  }
  if (v27)
  {
    *(_DWORD *)buf = 136446466;
    v33 = "nw_protocol_instance_process_external_input";
    v34 = 2082;
    v35 = v25;
    _os_log_impl(&dword_182FBE000, v18, v26, "%{public}s called with null block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v25);
  if (v17)
    goto LABEL_63;
LABEL_28:

}

void sub_183099DE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_instance_access_state(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  void *v9;
  char *backtrace_string;
  _BOOL4 v11;
  char *v12;
  _BOOL4 v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_instance_access_state";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v5, &type, &v14))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_access_state";
        v8 = "%{public}s called with null instance";
LABEL_32:
        _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      v11 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_protocol_instance_access_state";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_34:
        if (!v5)
          return 0;
LABEL_35:
        free(v5);
        return 0;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_access_state";
        v8 = "%{public}s called with null instance, no backtrace";
        goto LABEL_32;
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_access_state";
        v8 = "%{public}s called with null instance, backtrace limit exceeded";
        goto LABEL_32;
      }
    }
LABEL_33:

    goto LABEL_34;
  }
  if (!a2)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v17 = "nw_protocol_instance_access_state";
    v5 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v14 = 0;
    if (!__nwlog_fault(v5, &type, &v14))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_access_state";
        v8 = "%{public}s called with null access_block";
        goto LABEL_32;
      }
    }
    else
    {
      if (v14)
      {
        v12 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v6 = objc_claimAutoreleasedReturnValue();
        v7 = type;
        v13 = os_log_type_enabled(v6, type);
        if (v12)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v17 = "nw_protocol_instance_access_state";
            v18 = 2082;
            v19 = v12;
            _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null access_block, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v12);
          if (!v5)
            return 0;
          goto LABEL_35;
        }
        if (!v13)
          goto LABEL_33;
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_access_state";
        v8 = "%{public}s called with null access_block, no backtrace";
        goto LABEL_32;
      }
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_protocol_instance_access_state";
        v8 = "%{public}s called with null access_block, backtrace limit exceeded";
        goto LABEL_32;
      }
    }
    goto LABEL_33;
  }
  v2 = *(_QWORD *)(a1 + 112);
  if (v2)
    return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, v2);
  return 0;
}

void nw_protocol_instance_report_ready(void *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  dispatch_queue_t *v6;
  dispatch_queue_t *v7;
  char *v8;
  uint64_t node;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  NWConcrete_nw_protocol_instance *v13;
  void *v14;
  id v15;
  NSObject *v16;
  const char *v17;
  void *v18;
  char v19;
  NSObject *v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(const char *, unsigned __int16 *, uint64_t, id, uint64_t);
  nw_protocol *v27;
  NWConcrete_nw_protocol_instance *v28;
  unint64_t v29;
  void *v30;
  char *v31;
  NSObject *v32;
  os_log_type_t v33;
  NSObject *v34;
  void *v35;
  os_log_type_t v36;
  char *backtrace_string;
  os_log_type_t v38;
  _BOOL4 v39;
  void *v40;
  const char *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  const char *v45;
  char *v46;
  os_log_type_t v47;
  _BOOL4 v48;
  void *v49;
  char *v50;
  NSObject *v51;
  os_log_type_t v52;
  os_log_type_t v53;
  char *v54;
  _BOOL4 v55;
  const char *v56;
  os_log_type_t v57;
  char *v58;
  os_log_type_t v59;
  _BOOL4 v60;
  os_log_type_t v61;
  const char *v62;
  NSObject *v63;
  const char *v64;
  os_log_type_t v65;
  os_log_type_t v66;
  _QWORD v67[4];
  NWConcrete_nw_protocol_instance *v68;
  uint64_t v69;
  char v70;
  os_log_type_t v71;
  unsigned __int16 *p_paths_log_id_num;
  char v73;
  os_log_type_t type[8];
  char v75;
  uint8_t buf[4];
  const char *v77;
  __int16 v78;
  char *v79;
  __int16 v80;
  const char *v81;
  __int16 v82;
  uint64_t v83;
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v77 = "nw_protocol_instance_report_ready";
    v31 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (!__nwlog_fault(v31, type, &p_paths_log_id_num))
      goto LABEL_119;
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v33 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_protocol_instance_report_ready";
        _os_log_impl(&dword_182FBE000, v32, v33, "%{public}s called with null instance", buf, 0xCu);
      }
    }
    else if ((_BYTE)p_paths_log_id_num)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v38 = type[0];
      v39 = os_log_type_enabled(v32, type[0]);
      if (backtrace_string)
      {
        if (v39)
        {
          *(_DWORD *)buf = 136446466;
          v77 = "nw_protocol_instance_report_ready";
          v78 = 2082;
          v79 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v32, v38, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_119:
        if (!v31)
          goto LABEL_50;
LABEL_120:
        free(v31);
        goto LABEL_50;
      }
      if (v39)
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_protocol_instance_report_ready";
        _os_log_impl(&dword_182FBE000, v32, v38, "%{public}s called with null instance, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v32 = objc_claimAutoreleasedReturnValue();
      v53 = type[0];
      if (os_log_type_enabled(v32, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        v77 = "nw_protocol_instance_report_ready";
        _os_log_impl(&dword_182FBE000, v32, v53, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_118:

    goto LABEL_119;
  }
  v5 = (void *)v3[15];
  if (v5)
  {
    v6 = v5;
    v7 = v6;
    if (((_BYTE)v6[17] & 8) == 0)
      dispatch_assert_queue_V2(v6[1]);

  }
  if ((*((char *)v4 + 405) & 0x80000000) == 0 && gLogDatapath)
  {
    __nwlog_obj();
    v34 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446978;
      v77 = "nw_protocol_instance_report_ready";
      v78 = 2082;
      v79 = (char *)v4 + 407;
      v80 = 2080;
      v81 = " ";
      v82 = 2048;
      v83 = a2;
      _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sReporting flow %llx ready", buf, 0x2Au);
    }

  }
  if (*(_DWORD *)(v4[1] + 64) == 3)
  {
    *((_BYTE *)v4 + 402) |= 8u;
    v8 = (char *)v4[29];
    if (a2 != -1)
    {
      node = nw_hash_table_get_node(v4[29], a2, 8);
      if (node)
      {
        v10 = node;
        v11 = *(_WORD *)(node + 84);
        if ((v11 & 0x10) == 0)
        {
          v12 = v11 | 0x10;
          *(_WORD *)(node + 84) = v11 | 0x10;
          if ((v11 & 4) != 0)
          {
            v27 = *(nw_protocol **)(node + 16);
            v28 = v4;
            if (nw_protocol_definition_get_message_is_stream((void *)v4[1])
              && *(nw_protocol **)&v28[-1].log_str[41] == v27)
            {
              v29 = -2;
            }
            else
            {
              v29 = (unint64_t)v27;
            }

            nw_protocol_implementation_report_connected(v28, (nw_protocol *)(v4 - 12), v27, v29);
          }
          else
          {
            if ((*((char *)v4 + 405) & 0x80000000) == 0 && gLogDatapath)
            {
              __nwlog_obj();
              v63 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                v77 = "nw_protocol_instance_report_ready";
                v78 = 2082;
                v79 = (char *)v4 + 407;
                v80 = 2080;
                v81 = " ";
                v82 = 2048;
                v83 = a2;
                _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sDelaying the delivery of connected() on flow %llx", buf, 0x2Au);
              }

              v12 = *(_WORD *)(v10 + 84);
            }
            *(_WORD *)(v10 + 84) = v12 | 0x20;
          }
        }
      }
      else if ((*((char *)v4 + 405) & 0x80000000) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 136446978;
          v77 = "nw_protocol_instance_report_ready";
          v78 = 2082;
          v79 = (char *)v4 + 407;
          v80 = 2080;
          v81 = " ";
          v82 = 2048;
          v83 = a2;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot report ready, flow %llx does not exist", buf, 0x2Au);
        }

      }
      goto LABEL_50;
    }
    v67[0] = MEMORY[0x1E0C809B0];
    v67[1] = 3221225472;
    v67[2] = __nw_protocol_instance_report_ready_block_invoke;
    v67[3] = &unk_1E149C860;
    v13 = v4;
    v68 = v13;
    v69 = -1;
    nw_hash_table_apply(v8, (uint64_t)v67);
    nw_protocol_instance_update_available_paths(v13);
    v14 = (void *)nw_protocol_instance_copy_path(v13, -1);
    v15 = nw_path_copy_interface(v14);
    if ((*((char *)v4 + 405) & 0x80000000) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446978;
        v77 = "nw_protocol_instance_report_ready";
        v78 = 2082;
        v79 = (char *)&v13->flow_in_connected + 7;
        v80 = 2080;
        v81 = " ";
        v82 = 2112;
        v83 = (uint64_t)v15;
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s%sCalling notify with interface %@", buf, 0x2Au);
      }

    }
    v17 = *(const char **)&v13[-1].log_str[41];
    if (v17)
    {
      v18 = (void *)*((_QWORD *)v17 + 5);
      if (v18 == &nw_protocol_ref_counted_handle)
      {
        v21 = *((_QWORD *)v17 + 11);
        if (v21)
          *((_QWORD *)v17 + 11) = v21 + 1;
        v19 = -1;
      }
      else
      {
        v19 = 0;
      }
      *(_QWORD *)type = v17;
      v75 = v19;
      v22 = *(void **)&v13[-1].log_str[33];
      if (v22 == &nw_protocol_ref_counted_handle)
      {
        v24 = *(_QWORD *)&v13[-1].log_str[81];
        if (v24)
          *(_QWORD *)&v13[-1].log_str[81] = v24 + 1;
        v23 = -1;
      }
      else
      {
        v23 = 0;
      }
      p_paths_log_id_num = &v13[-1].paths_log_id_num;
      v73 = v23;
      v25 = *((_QWORD *)v17 + 3);
      if (v25)
      {
        v26 = *(void (**)(const char *, unsigned __int16 *, uint64_t, id, uint64_t))(v25 + 160);
        if (v26)
        {
          v26(v17, &v13[-1].paths_log_id_num, 24, v15, 8);
          goto LABEL_40;
        }
      }
      __nwlog_obj();
      v40 = (void *)objc_claimAutoreleasedReturnValue();
      v41 = (const char *)*((_QWORD *)v17 + 2);
      *(_DWORD *)buf = 136446722;
      v77 = "__nw_protocol_notify";
      if (!v41)
        v41 = "invalid";
      v78 = 2082;
      v79 = (char *)v41;
      v80 = 2048;
      v81 = v17;
      v42 = (char *)_os_log_send_and_compose_impl();

      v71 = OS_LOG_TYPE_ERROR;
      v70 = 0;
      if (__nwlog_fault(v42, &v71, &v70))
      {
        if (v71 == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v43 = objc_claimAutoreleasedReturnValue();
          v44 = v71;
          if (os_log_type_enabled(v43, v71))
          {
            v45 = (const char *)*((_QWORD *)v17 + 2);
            if (!v45)
              v45 = "invalid";
            *(_DWORD *)buf = 136446722;
            v77 = "__nw_protocol_notify";
            v78 = 2082;
            v79 = (char *)v45;
            v80 = 2048;
            v81 = v17;
            _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s protocol %{public}s (%p) has invalid notify callback", buf, 0x20u);
          }
        }
        else if (v70)
        {
          v54 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v43 = objc_claimAutoreleasedReturnValue();
          v66 = v71;
          v55 = os_log_type_enabled(v43, v71);
          if (v54)
          {
            if (v55)
            {
              v56 = (const char *)*((_QWORD *)v17 + 2);
              if (!v56)
                v56 = "invalid";
              *(_DWORD *)buf = 136446978;
              v77 = "__nw_protocol_notify";
              v78 = 2082;
              v79 = (char *)v56;
              v80 = 2048;
              v81 = v17;
              v82 = 2082;
              v83 = (uint64_t)v54;
              _os_log_impl(&dword_182FBE000, v43, v66, "%{public}s protocol %{public}s (%p) has invalid notify callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v54);
            goto LABEL_129;
          }
          if (v55)
          {
            v64 = (const char *)*((_QWORD *)v17 + 2);
            if (!v64)
              v64 = "invalid";
            *(_DWORD *)buf = 136446722;
            v77 = "__nw_protocol_notify";
            v78 = 2082;
            v79 = (char *)v64;
            v80 = 2048;
            v81 = v17;
            _os_log_impl(&dword_182FBE000, v43, v66, "%{public}s protocol %{public}s (%p) has invalid notify callback, no backtrace", buf, 0x20u);
          }
        }
        else
        {
          __nwlog_obj();
          v43 = objc_claimAutoreleasedReturnValue();
          v61 = v71;
          if (os_log_type_enabled(v43, v71))
          {
            v62 = (const char *)*((_QWORD *)v17 + 2);
            if (!v62)
              v62 = "invalid";
            *(_DWORD *)buf = 136446722;
            v77 = "__nw_protocol_notify";
            v78 = 2082;
            v79 = (char *)v62;
            v80 = 2048;
            v81 = v17;
            _os_log_impl(&dword_182FBE000, v43, v61, "%{public}s protocol %{public}s (%p) has invalid notify callback, backtrace limit exceeded", buf, 0x20u);
          }
        }

      }
LABEL_129:
      if (v42)
        free(v42);
LABEL_40:
      if (v22 == &nw_protocol_ref_counted_handle)
      {
        nw::release_if_needed<nw_protocol *>((uint64_t *)&p_paths_log_id_num);
        if (v18 == &nw_protocol_ref_counted_handle)
LABEL_44:
          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      }
      else if (v18 == &nw_protocol_ref_counted_handle)
      {
        goto LABEL_44;
      }
LABEL_45:

      goto LABEL_50;
    }
    __nwlog_obj();
    v49 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v77 = "__nw_protocol_notify";
    v50 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(p_paths_log_id_num) = 0;
    if (__nwlog_fault(v50, type, &p_paths_log_id_num))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v52 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v51, v52, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if ((_BYTE)p_paths_log_id_num)
      {
        v58 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v59 = type[0];
        v60 = os_log_type_enabled(v51, type[0]);
        if (v58)
        {
          if (v60)
          {
            *(_DWORD *)buf = 136446466;
            v77 = "__nw_protocol_notify";
            v78 = 2082;
            v79 = v58;
            _os_log_impl(&dword_182FBE000, v51, v59, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v58);
          goto LABEL_137;
        }
        if (v60)
        {
          *(_DWORD *)buf = 136446210;
          v77 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v51, v59, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v51 = objc_claimAutoreleasedReturnValue();
        v65 = type[0];
        if (os_log_type_enabled(v51, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          v77 = "__nw_protocol_notify";
          _os_log_impl(&dword_182FBE000, v51, v65, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_137:
    if (v50)
      free(v50);
    goto LABEL_45;
  }
  if (a2 == -1)
  {
    *((_BYTE *)v4 + 402) |= 8u;
    nw_protocol_implementation_report_connected((NWConcrete_nw_protocol_instance *)v4, (nw_protocol *)(v4 - 12), (nw_protocol *)*(v4 - 6), 0xFFFFFFFFFFFFFFFFLL);
    nw_protocol_instance_update_available_paths((NWConcrete_nw_protocol_instance *)v4);
    goto LABEL_50;
  }
  __nwlog_obj();
  v35 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v77 = "nw_protocol_instance_report_ready";
  v31 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(p_paths_log_id_num) = 0;
  if (!__nwlog_fault(v31, type, &p_paths_log_id_num))
    goto LABEL_119;
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v32 = objc_claimAutoreleasedReturnValue();
    v36 = type[0];
    if (os_log_type_enabled(v32, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      v77 = "nw_protocol_instance_report_ready";
      _os_log_impl(&dword_182FBE000, v32, v36, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW)", buf, 0xCu);
    }
    goto LABEL_118;
  }
  if (!(_BYTE)p_paths_log_id_num)
  {
    __nwlog_obj();
    v32 = objc_claimAutoreleasedReturnValue();
    v57 = type[0];
    if (os_log_type_enabled(v32, type[0]))
    {
      *(_DWORD *)buf = 136446210;
      v77 = "nw_protocol_instance_report_ready";
      _os_log_impl(&dword_182FBE000, v32, v57, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_118;
  }
  v46 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v32 = objc_claimAutoreleasedReturnValue();
  v47 = type[0];
  v48 = os_log_type_enabled(v32, type[0]);
  if (!v46)
  {
    if (v48)
    {
      *(_DWORD *)buf = 136446210;
      v77 = "nw_protocol_instance_report_ready";
      _os_log_impl(&dword_182FBE000, v32, v47, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), no backtrace", buf, 0xCu);
    }
    goto LABEL_118;
  }
  if (v48)
  {
    *(_DWORD *)buf = 136446466;
    v77 = "nw_protocol_instance_report_ready";
    v78 = 2082;
    v79 = v46;
    _os_log_impl(&dword_182FBE000, v32, v47, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v46);
  if (v31)
    goto LABEL_120;
LABEL_50:

}

void sub_18309B0BC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_implementation_finalize_pending_frames(void *a1)
{
  char *v1;
  char *v2;
  char *v3;
  const char *v4;
  void *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(const char *, char *);
  char *v11;
  void *v13;
  const char *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  NSObject *v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  const char *v23;
  os_log_type_t v24;
  const char *v25;
  const char *v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *backtrace_string;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  _QWORD v35[4];
  char *v36;
  char v37;
  os_log_type_t v38[8];
  char v39;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  char *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  v3 = v1 + 208;
  if (!*((_QWORD *)v1 + 26))
  {
    v7 = 1;
    goto LABEL_15;
  }
  if ((v1[405] & 0x80000000) == 0 && gLogDatapath)
  {
    __nwlog_obj();
    v19 = objc_claimAutoreleasedReturnValue();
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      v42 = "nw_protocol_implementation_finalize_pending_frames";
      v43 = 2082;
      v44 = v2 + 407;
      v45 = 2080;
      v46 = " ";
      _os_log_impl(&dword_182FBE000, v19, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s%sFinalizing outbound frames (batched)", buf, 0x20u);
    }

  }
  v4 = (const char *)*((_QWORD *)v2 - 8);
  if (!v4)
  {
    __nwlog_obj();
    v27 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v42 = "__nw_protocol_finalize_output_frames";
    v28 = (char *)_os_log_send_and_compose_impl();

    v38[0] = OS_LOG_TYPE_ERROR;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v28, v38, &type))
    {
      if (v38[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v30 = v38[0];
        if (os_log_type_enabled(v29, v38[0]))
        {
          *(_DWORD *)buf = 136446210;
          v42 = "__nw_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null protocol", buf, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v32 = v38[0];
        v33 = os_log_type_enabled(v29, v38[0]);
        if (backtrace_string)
        {
          if (v33)
          {
            *(_DWORD *)buf = 136446466;
            v42 = "__nw_protocol_finalize_output_frames";
            v43 = 2082;
            v44 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_69;
        }
        if (v33)
        {
          *(_DWORD *)buf = 136446210;
          v42 = "__nw_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v29 = objc_claimAutoreleasedReturnValue();
        v34 = v38[0];
        if (os_log_type_enabled(v29, v38[0]))
        {
          *(_DWORD *)buf = 136446210;
          v42 = "__nw_protocol_finalize_output_frames";
          _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_69:
    if (v28)
      free(v28);
    v7 = 0;
    goto LABEL_15;
  }
  v5 = (void *)*((_QWORD *)v4 + 5);
  if (v5 == &nw_protocol_ref_counted_handle)
  {
    v8 = *((_QWORD *)v4 + 11);
    if (v8)
      *((_QWORD *)v4 + 11) = v8 + 1;
    v6 = -1;
  }
  else
  {
    v6 = 0;
  }
  *(_QWORD *)v38 = v4;
  v39 = v6;
  v9 = *((_QWORD *)v4 + 3);
  if (v9)
  {
    v10 = *(uint64_t (**)(const char *, char *))(v9 + 96);
    if (v10)
    {
      v7 = v10(v4, v3);
      if (v5 != &nw_protocol_ref_counted_handle)
        goto LABEL_15;
      goto LABEL_14;
    }
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  v14 = (const char *)*((_QWORD *)v4 + 2);
  *(_DWORD *)buf = 136446722;
  v42 = "__nw_protocol_finalize_output_frames";
  if (!v14)
    v14 = "invalid";
  v43 = 2082;
  v44 = (char *)v14;
  v45 = 2048;
  v46 = v4;
  v15 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v37 = 0;
  if (!__nwlog_fault(v15, &type, &v37))
    goto LABEL_49;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    if (os_log_type_enabled(v16, type))
    {
      v18 = (const char *)*((_QWORD *)v4 + 2);
      if (!v18)
        v18 = "invalid";
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_finalize_output_frames";
      v43 = 2082;
      v44 = (char *)v18;
      v45 = 2048;
      v46 = v4;
      _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback", buf, 0x20u);
    }
LABEL_48:

    goto LABEL_49;
  }
  if (!v37)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    if (os_log_type_enabled(v16, type))
    {
      v25 = (const char *)*((_QWORD *)v4 + 2);
      if (!v25)
        v25 = "invalid";
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_finalize_output_frames";
      v43 = 2082;
      v44 = (char *)v25;
      v45 = 2048;
      v46 = v4;
      _os_log_impl(&dword_182FBE000, v16, v24, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_48;
  }
  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v16 = objc_claimAutoreleasedReturnValue();
  v21 = type;
  v22 = os_log_type_enabled(v16, type);
  if (!v20)
  {
    if (v22)
    {
      if (*((_QWORD *)v4 + 2))
        v26 = (const char *)*((_QWORD *)v4 + 2);
      else
        v26 = "invalid";
      *(_DWORD *)buf = 136446722;
      v42 = "__nw_protocol_finalize_output_frames";
      v43 = 2082;
      v44 = (char *)v26;
      v45 = 2048;
      v46 = v4;
      _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, no backtrace", buf, 0x20u);
    }
    goto LABEL_48;
  }
  if (v22)
  {
    if (*((_QWORD *)v4 + 2))
      v23 = (const char *)*((_QWORD *)v4 + 2);
    else
      v23 = "invalid";
    *(_DWORD *)buf = 136446978;
    v42 = "__nw_protocol_finalize_output_frames";
    v43 = 2082;
    v44 = (char *)v23;
    v45 = 2048;
    v46 = v4;
    v47 = 2082;
    v48 = v20;
    _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s protocol %{public}s (%p) has invalid finalize_output_frames callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v20);
LABEL_49:
  if (v15)
    free(v15);
  v7 = 0;
  if (v5 == &nw_protocol_ref_counted_handle)
LABEL_14:
    nw::release_if_needed<nw_protocol *>((uint64_t *)v38);
LABEL_15:
  v11 = (char *)*((_QWORD *)v2 + 37);
  if (v11)
  {
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 3221225472;
    v35[2] = __nw_protocol_implementation_finalize_pending_frames_block_invoke;
    v35[3] = &unk_1E14AC340;
    v36 = v2;
    nw_hash_table_apply(v11, (uint64_t)v35);

  }
  return v7;
}

void nw_context_set_isolate_protocol_cache(void *a1, int a2)
{
  _BYTE *v3;
  _BYTE *v4;
  char v5;
  NSObject *v6;
  void *v7;
  char v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_context_set_isolate_protocol_cache";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v10, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_context_set_isolate_protocol_cache";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_context_set_isolate_protocol_cache";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_26;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_context_set_isolate_protocol_cache";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_context_set_isolate_protocol_cache";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_26:
    if (v10)
      free(v10);
    goto LABEL_9;
  }
  v5 = v3[136];
  if ((v5 & 0x40) == 0)
  {
LABEL_5:
    if (a2)
      v8 = 2;
    else
      v8 = 0;
    v4[136] = v5 & 0xFD | v8;
LABEL_9:

    return;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  os_log_type_enabled(v6, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v20 = "nw_context_set_isolate_protocol_cache";
  v7 = (void *)_os_log_send_and_compose_impl();

  if (!__nwlog_abort((uint64_t)v7))
  {
    free(v7);
    v5 = v4[136];
    goto LABEL_5;
  }
  __break(1u);
}

uint64_t ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  id v5;
  id v6;
  NWConcrete_nw_parameters *v7;
  id v8;
  int is_above_failure_threshold;
  int v10;
  char v11;
  NSObject *v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  id v17;
  uint64_t v18;
  void *v19;
  BOOL v20;
  _BOOL4 v21;
  void *v22;
  _BOOL8 has_custom_proxy_configs;
  unsigned __int8 *v24;
  id *inner;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  void *v29;
  xpc_object_t v30;
  uint64_t v31;
  void *v32;
  unsigned int fallback_mode;
  _BOOL8 v34;
  uint64_t v35;
  void *v36;
  xpc_object_t v37;
  uint64_t v38;
  void *v39;
  xpc_object_t *v40;
  int v41;
  char v42;
  NSObject *v43;
  const char *v44;
  const char *v45;
  nw_endpoint_t v46;
  const char *v47;
  const char *v48;
  const char *v49;
  id v50;
  int minimize_logging;
  char logging_disabled;
  NSObject *v54;
  const char *v55;
  nw_endpoint_t v56;
  const char *v57;
  const char *v58;
  const char *v59;
  id v60;
  NSObject *v61;
  const char *id_string;
  const char *v63;
  const char *v64;
  const char *logging_description;
  const char *v66;
  const char *v67;
  id v68;
  const char *v69;
  nw_endpoint_t v70;
  const char *v71;
  const char *v72;
  const char *v73;
  id v74;
  nw_endpoint_t v75;
  const char *v76;
  const char *v77;
  const char *v78;
  id v79;
  const char *v80;
  nw_endpoint_t v81;
  const char *v82;
  const char *v83;
  const char *v84;
  id v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  os_log_t loga;
  NSObject *logb;
  NSObject *log;
  const char *logc;
  const char *logd;
  NWConcrete_nw_parameters *v95;
  NWConcrete_nw_parameters *v96;
  NWConcrete_nw_parameters *v97;
  NWConcrete_nw_parameters *v98;
  NWConcrete_nw_parameters *v99;
  NWConcrete_nw_parameters *v100;
  void *v101;
  nw_endpoint_t v102;
  _QWORD v103[4];
  NWConcrete_nw_parameters *v104;
  id v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t *v109;
  uint64_t v110;
  char v111;
  _QWORD v112[4];
  id v113;
  id v114;
  id v115;
  uint64_t *v116;
  uint64_t *v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  id *v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t, uint64_t);
  void (*v126)(uint64_t);
  id v127;
  _BYTE buf[22];
  __int16 v129;
  const char *v130;
  __int16 v131;
  const char *v132;
  __int16 v133;
  const char *v134;
  __int16 v135;
  const char *v136;
  __int16 v137;
  id v138;
  uint64_t v139;

  v139 = *MEMORY[0x1E0C80C00];
  v4 = a3;
  v122 = 0;
  v123 = (id *)&v122;
  v124 = 0x3032000000;
  v125 = __Block_byref_object_copy__77389;
  v126 = __Block_byref_object_dispose__77390;
  v127 = nw_protocol_transform_copy_endpoint(v4);
  v118 = 0;
  v119 = &v118;
  v120 = 0x2020000000;
  v121 = 0;
  v5 = nw_parameters_copy_url_endpoint(*(void **)(a1 + 32));
  if (!v5)
    v5 = *(id *)(*(_QWORD *)(a1 + 40) + 56);
  if (!nw_protocol_transform_supports_endpoint(v4, v5))
  {
    *((_BYTE *)v119 + 24) = 1;
    if (gLogDatapath)
    {
      if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48)) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v61 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v61, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          v63 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          v64 = id_string;
          v102 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          logging_description = nw_endpoint_get_logging_description(v102);
          v66 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          v67 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          v68 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_endpoint_transform_add_children_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v64;
          v129 = 2082;
          v130 = v63;
          v131 = 2082;
          v132 = logging_description;
          v133 = 2082;
          v134 = v66;
          v135 = 2082;
          v136 = v67;
          v137 = 2114;
          v138 = v68;
          _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Skipping transform due to unsupported endpoint", buf, 0x48u);

        }
      }
    }
  }
  if (!*((_BYTE *)v119 + 24))
  {
    if (v123[5])
      goto LABEL_96;
    v19 = *(void **)(*(_QWORD *)(a1 + 40) + 56);
    v112[0] = MEMORY[0x1E0C809B0];
    v112[1] = 3221225472;
    v112[2] = ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_94;
    v112[3] = &unk_1E14AA950;
    v116 = &v122;
    v113 = v4;
    v117 = &v118;
    v114 = *(id *)(a1 + 48);
    v115 = *(id *)(a1 + 40);
    nw_endpoint_enumerate_alternatives(v19, v112);

    if (!*((_BYTE *)v119 + 24))
    {
LABEL_96:
      if (nw_protocol_transform_get_prohibit_direct(v4))
        *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = 0;
      if (!v123[5])
        objc_storeStrong(v123 + 5, *(id *)(*(_QWORD *)(a1 + 40) + 56));
      v6 = *(id *)(a1 + 32);
      v7 = (NWConcrete_nw_parameters *)-[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v6, 0, 0);

      nw_protocol_transform_modify_parameters(v4, v7);
      if (nw_parameters_get_upper_transport_protocol(v7) != 253)
      {
        is_above_failure_threshold = 0;
        goto LABEL_36;
      }
      v8 = nw_endpoint_handler_copy_association(*(void **)(a1 + 48), 0);
      v101 = v8;
      if (!v8)
      {
        is_above_failure_threshold = 0;
        goto LABEL_28;
      }
      LOBYTE(v108) = 0;
      is_above_failure_threshold = nw_quic_is_above_failure_threshold(v8, &v108);
      if (!is_above_failure_threshold)
      {
LABEL_28:
        v20 = networkd_settings_get_BOOL((const char *)nw_setting_disable_quic_race);
        v21 = networkd_settings_get_BOOL((const char *)nw_setting_disable_quic);
        if (!v20 && !v21)
        {
          v22 = *(void **)(a1 + 56);
          has_custom_proxy_configs = nw_parameters_has_custom_proxy_configs(*(void **)(a1 + 32));
          if (!nw_path_should_use_proxy(v22, has_custom_proxy_configs))
          {
LABEL_35:

LABEL_36:
            *(_QWORD *)buf = 0;
            *(_QWORD *)&buf[8] = 0;
            if (nw_path_get_client_id(*(void **)(a1 + 56), buf))
              nw_parameters_set_parent_id_inner(v7, buf, 0);
            inner = nw_endpoint_handler_create_inner(v123[5], v7, nw_endpoint_transform_receive_report, *(void **)(a1 + 48), *(void **)(a1 + 48), 0, 0);
            v26 = *(_QWORD *)(a1 + 40);
            if (*(_QWORD *)(v26 + 8))
            {
              if (!*(_QWORD *)(v26 + 24))
                goto LABEL_42;
            }
            else
            {
              v27 = nw_array_create();
              v28 = *(_QWORD *)(a1 + 40);
              v29 = *(void **)(v28 + 8);
              *(_QWORD *)(v28 + 8) = v27;

              if (!*(_QWORD *)(*(_QWORD *)(a1 + 40) + 24))
              {
LABEL_42:
                v30 = xpc_array_create(0, 0);
                v31 = *(_QWORD *)(a1 + 40);
                v32 = *(void **)(v31 + 24);
                *(_QWORD *)(v31 + 24) = v30;

              }
            }
            fallback_mode = nw_protocol_transform_get_fallback_mode(v4);
            if (is_above_failure_threshold)
            {
              if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40))
              {
                v34 = nw_array_create();
                v35 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
                v36 = *(void **)(v35 + 40);
                *(_QWORD *)(v35 + 40) = v34;

              }
              if (!*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40))
              {
                v37 = xpc_array_create(0, 0);
                v38 = *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8);
                v39 = *(void **)(v38 + 40);
                *(_QWORD *)(v38 + 40) = v37;

              }
              nw_array_append(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 72) + 8) + 40), inner);
              v40 = (xpc_object_t *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 40);
            }
            else
            {
              nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), inner);
              v40 = (xpc_object_t *)(*(_QWORD *)(a1 + 40) + 24);
            }
            xpc_array_set_int64(*v40, 0xFFFFFFFFFFFFFFFFLL, fallback_mode);

            goto LABEL_59;
          }
          v24 = (unsigned __int8 *)nw_parameters_copy_custom_proxy_configs(*(void **)(a1 + 32));
          if (!v24)
            v24 = (unsigned __int8 *)nw_path_copy_proxy_configs(*(void **)(a1 + 56));
          v108 = 0;
          v109 = &v108;
          v110 = 0x2020000000;
          v111 = 0;
          v103[0] = MEMORY[0x1E0C809B0];
          v103[1] = 3221225472;
          v103[2] = ___ZL34nw_endpoint_transform_add_childrenP30NWConcrete_nw_endpoint_handler_block_invoke_96;
          v103[3] = &unk_1E14AA978;
          v106 = &v122;
          v104 = v7;
          v105 = *(id *)(a1 + 56);
          v107 = &v108;
          nw_array_apply(v24, (uint64_t)v103);
          if (*((_BYTE *)v109 + 24))
          {

            _Block_object_dispose(&v108, 8);
            goto LABEL_35;
          }
          minimize_logging = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 48));
          logging_disabled = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0)
              goto LABEL_69;
            v100 = v7;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            log = (id)gconnectionLogObj;
            if (os_log_type_enabled(log, OS_LOG_TYPE_DEBUG))
            {
              v89 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
              v80 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
              v81 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
              v82 = nw_endpoint_get_logging_description(v81);
              v83 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
              v84 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
              v85 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_endpoint_transform_add_children_block_invoke_2";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v89;
              v129 = 2082;
              v130 = v80;
              v131 = 2082;
              v132 = v82;
              v133 = 2082;
              v134 = v83;
              v135 = 2082;
              v136 = v84;
              v137 = 2114;
              v138 = v85;
              _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Non-QUIC proxies detected, denying QUIC attempt", buf, 0x48u);

              v7 = v100;
            }
          }
          else
          {
            if ((logging_disabled & 1) != 0)
            {
LABEL_69:
              *(_BYTE *)(*(_QWORD *)(a1 + 40) + 94) = 1;

              _Block_object_dispose(&v108, 8);
              goto LABEL_59;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v54 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v54, OS_LOG_TYPE_INFO))
            {
LABEL_68:

              goto LABEL_69;
            }
            v55 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
            v87 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
            log = v54;
            v97 = v7;
            v56 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
            v57 = nw_endpoint_get_logging_description(v56);
            v58 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
            v59 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
            v60 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_transform_add_children_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v55;
            v129 = 2082;
            v130 = v87;
            v131 = 2082;
            v132 = v57;
            v133 = 2082;
            v134 = v58;
            v135 = 2082;
            v136 = v59;
            v137 = 2114;
            v138 = v60;
            _os_log_impl(&dword_182FBE000, log, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Non-QUIC proxies detected, denying QUIC attempt", buf, 0x48u);

            v7 = v97;
          }
          v54 = log;
          goto LABEL_68;
        }
        v41 = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 48));
        v42 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
        if (v41)
        {
          if ((v42 & 1) != 0)
            goto LABEL_58;
          v98 = v7;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v43 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
          {
            v69 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
            logc = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
            v70 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
            v71 = nw_endpoint_get_logging_description(v70);
            v72 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
            v73 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
            v74 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_transform_add_children_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v69;
            v129 = 2082;
            v130 = logc;
            v131 = 2082;
            v132 = v71;
            v133 = 2082;
            v134 = v72;
            v135 = 2082;
            v136 = v73;
            v137 = 2114;
            v138 = v74;
            _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC disabled, denying race attempt", buf, 0x48u);

            v7 = v98;
          }
        }
        else
        {
          if ((v42 & 1) != 0)
          {
LABEL_58:
            *(_BYTE *)(*(_QWORD *)(a1 + 40) + 94) = 1;

LABEL_59:
            goto LABEL_60;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v43 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
          {
            v96 = v7;
            v44 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
            v45 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
            logb = v43;
            v46 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
            v47 = nw_endpoint_get_logging_description(v46);
            v48 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
            v49 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
            v50 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_transform_add_children_block_invoke";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v44;
            v129 = 2082;
            v130 = v45;
            v131 = 2082;
            v132 = v47;
            v133 = 2082;
            v134 = v48;
            v135 = 2082;
            v136 = v49;
            v137 = 2114;
            v138 = v50;
            v43 = logb;
            _os_log_impl(&dword_182FBE000, logb, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC disabled, denying race attempt", buf, 0x48u);

            v7 = v96;
          }
        }

        goto LABEL_58;
      }
      v10 = nw_endpoint_handler_get_minimize_logging(*(void **)(a1 + 48));
      v11 = nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 48));
      if (v10)
      {
        if ((v11 & 1) != 0)
          goto LABEL_21;
        v99 = v7;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
        {
          logd = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          v88 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          v75 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          v76 = nw_endpoint_get_logging_description(v75);
          v77 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          v78 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          v79 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_endpoint_transform_add_children_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = logd;
          v129 = 2082;
          v130 = v88;
          v131 = 2082;
          v132 = v76;
          v133 = 2082;
          v134 = v77;
          v135 = 2082;
          v136 = v78;
          v137 = 2114;
          v138 = v79;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC is beyond failure threshold, deferring", buf, 0x48u);

          v7 = v99;
        }
      }
      else
      {
        if ((v11 & 1) != 0)
        {
LABEL_21:
          v18 = 92;
          if ((_BYTE)v108)
            v18 = 93;
          *(_BYTE *)(*(_QWORD *)(a1 + 40) + v18) = 1;
          goto LABEL_28;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v12 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          v13 = nw_endpoint_handler_get_id_string(*(void **)(a1 + 48));
          v95 = v7;
          v86 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 48));
          loga = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 48));
          v14 = nw_endpoint_get_logging_description(loga);
          v15 = nw_endpoint_handler_state_string(*(void **)(a1 + 48));
          v16 = nw_endpoint_handler_mode_string(*(void **)(a1 + 48));
          v17 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 48));
          *(_DWORD *)buf = 136447746;
          *(_QWORD *)&buf[4] = "nw_endpoint_transform_add_children_block_invoke";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v13;
          v129 = 2082;
          v130 = v86;
          v131 = 2082;
          v132 = v14;
          v133 = 2082;
          v134 = v15;
          v135 = 2082;
          v136 = v16;
          v137 = 2114;
          v138 = v17;
          _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] QUIC is beyond failure threshold, deferring", buf, 0x48u);

          v7 = v95;
        }
      }

      goto LABEL_21;
    }
  }
LABEL_60:

  _Block_object_dispose(&v118, 8);
  _Block_object_dispose(&v122, 8);

  return 1;
}

void sub_18309C978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
  void *v44;
  void *v45;
  void *v46;
  void *v47;

  _Block_object_dispose(&a22, 8);
  _Block_object_dispose(&a35, 8);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

id nw_parameters_copy_url_endpoint(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[25];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_copy_url_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_url_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_copy_url_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_url_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_copy_url_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_protocol_transform_supports_endpoint(void *a1, void *a2)
{
  _QWORD *v3;
  id v4;
  void *v5;
  NSObject *v6;
  id v7;
  int v8;
  uint64_t url_scheme;
  void *v10;
  _BOOL8 v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  _QWORD applier[6];
  char v27;
  os_log_type_t type;
  _BYTE buf[24];
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null transform", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (!v27)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_29;
  }
  if (!v4)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v13, &type, &v27))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_41:

LABEL_42:
      if (v13)
        free(v13);
      goto LABEL_44;
    }
    if (!v27)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_41;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v14 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v14, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_41;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = backtrace_string;
      _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_29:

    free(backtrace_string);
    goto LABEL_42;
  }
  if (!v3[6])
  {
    v11 = 1;
    goto LABEL_45;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_transform_supports_endpoint";
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s matching url scheme", buf, 0xCu);
  }

  v7 = v5;
  v8 = objc_msgSend(v7, "type");

  if (v8 != 4 || (url_scheme = nw_endpoint_get_url_scheme(v7)) == 0)
  {
LABEL_44:
    v11 = 0;
    goto LABEL_45;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v30 = 0;
  v10 = (void *)v3[6];
  applier[0] = MEMORY[0x1E0C809B0];
  applier[1] = 3221225472;
  applier[2] = __nw_protocol_transform_supports_endpoint_block_invoke;
  applier[3] = &unk_1E14A91F0;
  applier[4] = buf;
  applier[5] = url_scheme;
  xpc_array_apply(v10, applier);
  v11 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
  _Block_object_dispose(buf, 8);
LABEL_45:

  return v11;
}

void sub_18309D364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

id nw_protocol_transform_copy_endpoint(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[4];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_transform_copy_endpoint";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_transform_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_transform_copy_endpoint";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_transform_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_transform_copy_endpoint";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_protocol_transform_get_fallback_mode(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[4];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_transform_get_fallback_mode";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_transform_get_fallback_mode";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_transform_get_fallback_mode";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_transform_get_fallback_mode";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_transform_get_fallback_mode";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_transform_modify_parameters(void *a1, void *a2)
{
  char *v3;
  id v4;
  void *v5;
  _QWORD *v6;
  unsigned int v7;
  char v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  char v12;
  void *v13;
  uint64_t v14;
  id *v15;
  id v16;
  NSObject *v17;
  NSObject *v18;
  NSObject *v19;
  nw_protocol_options_t v20;
  _QWORD *v21;
  int v22;
  _QWORD *v23;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  os_log_type_t v37;
  _QWORD iterate_block[4];
  NSObject *v39;
  _QWORD applier[4];
  _QWORD *v41;
  char v42;
  os_log_type_t v43;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v24 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_protocol_transform_modify_parameters";
    v25 = (char *)_os_log_send_and_compose_impl();

    v43 = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (!__nwlog_fault(v25, &v43, &v42))
      goto LABEL_69;
    if (v43 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = v43;
      if (os_log_type_enabled(v26, v43))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_protocol_transform_modify_parameters";
        _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v42)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v31 = v43;
      v32 = os_log_type_enabled(v26, v43);
      if (backtrace_string)
      {
        if (v32)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_protocol_transform_modify_parameters";
          v46 = 2082;
          v47 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v26, v31, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_69:
        if (!v25)
          goto LABEL_30;
LABEL_70:
        free(v25);
        goto LABEL_30;
      }
      if (v32)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_protocol_transform_modify_parameters";
        _os_log_impl(&dword_182FBE000, v26, v31, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v26 = objc_claimAutoreleasedReturnValue();
      v36 = v43;
      if (os_log_type_enabled(v26, v43))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_protocol_transform_modify_parameters";
        _os_log_impl(&dword_182FBE000, v26, v36, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_68:

    goto LABEL_69;
  }
  if (v4)
  {
    v6 = v4;
    *(_WORD *)(v6[13] + 108) |= 4u;

    v7 = *((_DWORD *)v3 + 6);
    if (v7)
      nw_parameters_set_data_mode(v6, v7);
    if ((v3[8] & 8) != 0)
    {
      v9 = v6;
      *(_WORD *)(v6[13] + 108) |= 2u;

      if ((v3[9] & 2) == 0)
      {
LABEL_7:
        v8 = v3[8];
        if ((v8 & 0x20) == 0)
          goto LABEL_8;
        goto LABEL_12;
      }
    }
    else if ((v3[9] & 2) == 0)
    {
      goto LABEL_7;
    }
    v10 = *((_DWORD *)v3 + 5);
    v11 = v6;
    *(_DWORD *)(v6[13] + 103) = v10;

    v8 = v3[8];
    if ((v8 & 0x20) == 0)
    {
LABEL_8:
      if ((v8 & 0x40) == 0)
      {
LABEL_14:
        if ((v3[9] & 1) != 0)
          nw_parameters_set_fast_open_force_enable(v6, 1);
        if (v3[8] < 0)
        {
          v21 = v6;
          *(_WORD *)(v6[13] + 108) |= 0x20u;

          if ((v3[9] & 4) == 0)
          {
LABEL_18:
            v12 = v3[8];
            if ((v12 & 1) == 0)
              goto LABEL_19;
            goto LABEL_33;
          }
        }
        else if ((v3[9] & 4) == 0)
        {
          goto LABEL_18;
        }
        v22 = *((_DWORD *)v3 + 3);
        v23 = v6;
        *(_DWORD *)(v6[13] + 72) = v22;

        v12 = v3[8];
        if ((v12 & 1) == 0)
        {
LABEL_19:
          if ((v12 & 2) == 0)
            goto LABEL_20;
          goto LABEL_34;
        }
LABEL_33:
        nw_parameters_clear_protocol_stack(v6, 5);
        nw_parameters_clear_protocol_stack(v6, 4);
        v12 = v3[8];
        if ((v12 & 2) == 0)
        {
LABEL_20:
          if ((v12 & 4) == 0)
          {
LABEL_22:
            v13 = (void *)*((_QWORD *)v3 + 5);
            v14 = MEMORY[0x1E0C809B0];
            if (v13)
            {
              applier[0] = MEMORY[0x1E0C809B0];
              applier[1] = 3221225472;
              applier[2] = __nw_protocol_transform_modify_parameters_block_invoke;
              applier[3] = &unk_1E14AC908;
              v41 = v6;
              xpc_array_apply(v13, applier);

            }
            if (*((_QWORD *)v3 + 7))
            {
              v15 = v6;
              v16 = v15[19];

              v17 = *((_QWORD *)v3 + 7);
              iterate_block[0] = v14;
              iterate_block[1] = 3221225472;
              iterate_block[2] = __nw_protocol_transform_modify_parameters_block_invoke_2;
              iterate_block[3] = &unk_1E14A9960;
              v18 = v16;
              v39 = v18;
              nw_protocol_stack_iterate_application_protocols(v17, iterate_block);
              v19 = nw_protocol_stack_copy_transport_protocol(*((nw_protocol_stack_t *)v3 + 7));
              if (v19)
                nw_protocol_stack_set_transport_protocol(v18, v19);
              v20 = nw_protocol_stack_copy_internet_protocol(*((nw_protocol_stack_t *)v3 + 7));
              if (v20)
                nw_protocol_stack_set_internet_protocol(v18, v20);

            }
            goto LABEL_30;
          }
LABEL_21:
          nw_parameters_clear_protocol_stack(v6, 2);
          goto LABEL_22;
        }
LABEL_34:
        nw_parameters_clear_protocol_stack(v6, 3);
        if ((v3[8] & 4) == 0)
          goto LABEL_22;
        goto LABEL_21;
      }
LABEL_13:
      nw_parameters_set_tfo_no_cookie(v6, 1);
      goto LABEL_14;
    }
LABEL_12:
    nw_parameters_set_tfo(v6, 1);
    if ((v3[8] & 0x40) == 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  __nwlog_obj();
  v28 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v45 = "nw_protocol_transform_modify_parameters";
  v25 = (char *)_os_log_send_and_compose_impl();

  v43 = OS_LOG_TYPE_ERROR;
  v42 = 0;
  if (!__nwlog_fault(v25, &v43, &v42))
    goto LABEL_69;
  if (v43 == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    v29 = v43;
    if (os_log_type_enabled(v26, v43))
    {
      *(_DWORD *)buf = 136446210;
      v45 = "nw_protocol_transform_modify_parameters";
      _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s called with null parameters_to_modify", buf, 0xCu);
    }
    goto LABEL_68;
  }
  if (!v42)
  {
    __nwlog_obj();
    v26 = objc_claimAutoreleasedReturnValue();
    v37 = v43;
    if (os_log_type_enabled(v26, v43))
    {
      *(_DWORD *)buf = 136446210;
      v45 = "nw_protocol_transform_modify_parameters";
      _os_log_impl(&dword_182FBE000, v26, v37, "%{public}s called with null parameters_to_modify, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_68;
  }
  v33 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v26 = objc_claimAutoreleasedReturnValue();
  v34 = v43;
  v35 = os_log_type_enabled(v26, v43);
  if (!v33)
  {
    if (v35)
    {
      *(_DWORD *)buf = 136446210;
      v45 = "nw_protocol_transform_modify_parameters";
      _os_log_impl(&dword_182FBE000, v26, v34, "%{public}s called with null parameters_to_modify, no backtrace", buf, 0xCu);
    }
    goto LABEL_68;
  }
  if (v35)
  {
    *(_DWORD *)buf = 136446466;
    v45 = "nw_protocol_transform_modify_parameters";
    v46 = 2082;
    v47 = v33;
    _os_log_impl(&dword_182FBE000, v26, v34, "%{public}s called with null parameters_to_modify, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v33);
  if (v25)
    goto LABEL_70;
LABEL_30:

}

void sub_18309DFBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

void nw_endpoint_flow_start_child(void *a1)
{
  _DWORD *v1;
  _DWORD *v2;
  unsigned int v3;
  NWConcrete_nw_endpoint_handler *v4;
  char v5;
  NSObject *v6;
  char *v7;
  char *v8;
  char v9;
  const char *v10;
  nw_endpoint_t v11;
  const char *logging_description;
  char *v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  const char *v17;
  void **v18;
  void **v19;
  const char *v20;
  void **v21;
  id v22;
  NWConcrete_nw_endpoint_mode_handler *v23;
  id *v24;
  id v25;
  id v26;
  _BOOL8 v27;
  _QWORD *v28;
  void *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(_QWORD *);
  void *v34;
  void *v35;
  char *v36;
  NSObject *v37;
  os_log_type_t v38;
  void *v39;
  const char *v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  const char *v44;
  char *backtrace_string;
  os_log_type_t v46;
  _BOOL4 v47;
  char *v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  const char *v52;
  os_log_type_t v53;
  id v54;
  void *v55;
  const char *v56;
  void *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  char *v61;
  os_log_type_t v62;
  _BOOL4 v63;
  const char *v64;
  os_log_type_t v65;
  const char *v66;
  const char *v67;
  os_log_type_t v68;
  const char *v69;
  const char *v70;
  NSObject *v71;
  _QWORD *v72;
  void *v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(_QWORD *);
  void *v78;
  void *v79;
  const char *v80;
  char *v81;
  NSObject *v82;
  const char *v83;
  void *v84;
  char *v85;
  NSObject *v86;
  os_log_type_t v87;
  char *v88;
  _BOOL4 v89;
  const char *v90;
  char *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  NSObject *v94;
  os_log_type_t v95;
  NSObject *v96;
  const char *v97;
  const char *v98;
  id v99;
  _BOOL8 v100;
  id v101;
  BOOL v102;
  id v103;
  os_log_type_t v104;
  id v105;
  _QWORD *v106;
  id *v107;
  id v108;
  _BOOL8 has_custom_proxy_configs;
  _BOOL4 should_use_proxy;
  id *v111;
  NSObject *v112;
  id v113;
  void *v114;
  NSObject *v115;
  int v116;
  NSObject *v117;
  int disposition;
  id *inner;
  void *v120;
  void *v121;
  char *v122;
  NSObject *v123;
  os_log_type_t v124;
  char *v125;
  os_log_type_t v126;
  _BOOL4 v127;
  os_log_type_t v128;
  os_log_type_t v129;
  os_log_type_t v130;
  const char *v131;
  const char *v132;
  const char *v133;
  NWConcrete_nw_endpoint_handler *v134;
  _DWORD *v135;
  nw_endpoint_t v136;
  char v137;
  os_log_type_t type[8];
  char v139;
  os_log_type_t v140;
  _OWORD buf[4];
  __int128 v142;
  uint64_t v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v35 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
    v36 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    v140 = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v36, type, &v140))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v38 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v37, v38, "%{public}s called with null handler", (uint8_t *)buf, 0xCu);
        }
      }
      else if (v140)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v46 = type[0];
        v47 = os_log_type_enabled(v37, type[0]);
        if (backtrace_string)
        {
          if (v47)
          {
            LODWORD(buf[0]) = 136446466;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
            WORD6(buf[0]) = 2082;
            *(_QWORD *)((char *)buf + 14) = backtrace_string;
            _os_log_impl(&dword_182FBE000, v37, v46, "%{public}s called with null handler, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_65;
        }
        if (v47)
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v37, v46, "%{public}s called with null handler, no backtrace", (uint8_t *)buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v37 = objc_claimAutoreleasedReturnValue();
        v53 = type[0];
        if (os_log_type_enabled(v37, type[0]))
        {
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v37, v53, "%{public}s called with null handler, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
        }
      }

    }
LABEL_65:
    if (v36)
      free(v36);
    v3 = 0;
    v2 = 0;
    goto LABEL_68;
  }
  v3 = v1[29];

  if (v3 == 2)
  {
    v135 = v2;
    v4 = v2;
    v5 = *((_BYTE *)v4 + 268);

    if ((v5 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v6 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        v7 = v4;

        v8 = v7;
        v9 = *((_BYTE *)v4 + 268);

        if ((v9 & 1) != 0)
          v10 = "dry-run ";
        else
          v10 = "";
        v134 = v4;
        v11 = nw_endpoint_handler_copy_endpoint(v8);
        logging_description = nw_endpoint_get_logging_description(v11);
        v13 = v7 + 168;
        v14 = v8;
        v15 = v14;
        v16 = v14[30];
        if (v16 > 5)
          v17 = "unknown-state";
        else
          v17 = off_1E149FC48[v16];

        v18 = v15;
        v19 = v18;
        v20 = "path";
        switch(v135[29])
        {
          case 0:
            break;
          case 1:
            v20 = "resolver";
            break;
          case 2:
            v20 = nw_endpoint_flow_mode_string(v18[31]);
            break;
          case 3:
            v20 = "proxy";
            break;
          case 4:
            v20 = "fallback";
            break;
          case 5:
            v20 = "transform";
            break;
          default:
            v20 = "unknown-mode";
            break;
        }

        v21 = v19;
        os_unfair_lock_lock((os_unfair_lock_t)v21 + 28);
        v22 = v21[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v21 + 28);

        LODWORD(buf[0]) = 136447746;
        *(_QWORD *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
        WORD6(buf[0]) = 2082;
        *(_QWORD *)((char *)buf + 14) = v13;
        WORD3(buf[1]) = 2082;
        *((_QWORD *)&buf[1] + 1) = v10;
        LOWORD(buf[2]) = 2082;
        *(_QWORD *)((char *)&buf[2] + 2) = logging_description;
        WORD5(buf[2]) = 2082;
        *(_QWORD *)((char *)&buf[2] + 12) = v17;
        WORD2(buf[3]) = 2082;
        *(_QWORD *)((char *)&buf[3] + 6) = v20;
        HIWORD(buf[3]) = 2114;
        *(_QWORD *)&v142 = v22;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] creating and starting child handler", (uint8_t *)buf, 0x48u);

        v4 = v134;
      }

    }
    v23 = nw_endpoint_handler_copy_flow(v4);
    v136 = nw_endpoint_handler_copy_endpoint(v4);
    v24 = v4;
    v25 = v24[4];

    v26 = v25;
    v27 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v26, 0, 0);

    v28 = (_QWORD *)*((_QWORD *)v23 + 94);
    if (!v28)
    {
LABEL_184:
      nw_parameters_clear_protocol_stack((void *)v27, 5);
      if ((*((_BYTE *)v23 + 35) & 0x40) == 0)
      {
LABEL_190:
        v107 = v24;
        os_unfair_lock_lock((os_unfair_lock_t)v107 + 28);
        v108 = v107[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v107 + 28);

        has_custom_proxy_configs = nw_parameters_has_custom_proxy_configs((void *)v27);
        should_use_proxy = nw_endpoint_proxy_handler_should_use_proxy(v107, v108, has_custom_proxy_configs);

        if (should_use_proxy)
        {
          if (nw_parameters_get_logging_disabled(v27))
          {
            nw_parameters_set_website_attribution((void *)v27, 0);
          }
          else
          {
            v111 = v107;
            v112 = v136;
            v113 = (id)v27;
            v114 = v113;
            if (v112 && v113 && (!v112[11].isa || !nw_endpoint_hostname_matches_tracker(v112)))
            {
              v115 = v112;
              v116 = -[NSObject type](v115, "type");

              if (v116 == 2)
              {
                v117 = v115;
                v133 = (const char *)-[NSObject hostname](v117, "hostname");

                if (v133)
                {
                  v143 = 0;
                  v142 = 0u;
                  memset(buf, 0, sizeof(buf));
                  nw_parameters_to_ne_app_context(v114, (uint64_t)buf);
                  *(_QWORD *)type = 0;
                  v140 = OS_LOG_TYPE_DEFAULT;
                  disposition = ne_tracker_get_disposition();
                  if (disposition != 1)
                  {
                    nw_parameters_set_is_known_tracker(v114, 1);
                    nw_endpoint_set_tracker_owner(v117, *(const char **)type);
                    nw_endpoint_set_can_block_request(v117, v140);
                    nw_endpoint_set_known_tracker_name(v117, v133);
                    nw_endpoint_set_is_approved_app_domain(v117, disposition == 3);
                  }
                  if (*(_QWORD *)type)
                    free(*(void **)type);
                }
              }
            }

          }
        }
        inner = nw_endpoint_handler_create_inner(v136, (void *)v27, nw_endpoint_flow_receive_report, v107, v107, 0, 0);
        v120 = (void *)*((_QWORD *)v23 + 116);
        *((_QWORD *)v23 + 116) = inner;

        *((_DWORD *)v107 + 20) = 786435;
        nw_endpoint_handler_report(v107, 0, (_WORD *)v107 + 40, 0);
        nw_endpoint_handler_start(*((void **)v23 + 116));

        v55 = v135;
        goto LABEL_205;
      }
      nw_parameters_set_use_enhanced_privacy_mode((void *)v27, 0);
      v105 = nw_parameters_copy_context(v26);
      if (nw_context_get_privacy_level(v105) != 4)
      {
LABEL_189:

        goto LABEL_190;
      }
      v106 = (id)v27;
      if (v106)
      {
        v106[12] |= 0x100000000000uLL;
LABEL_188:

        goto LABEL_189;
      }
      __nwlog_obj();
      v121 = (void *)objc_claimAutoreleasedReturnValue();
      LODWORD(buf[0]) = 136446210;
      *(_QWORD *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
      v122 = (char *)_os_log_send_and_compose_impl();

      type[0] = OS_LOG_TYPE_ERROR;
      v140 = OS_LOG_TYPE_DEFAULT;
      if (__nwlog_fault(v122, type, &v140))
      {
        if (type[0] == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v123 = objc_claimAutoreleasedReturnValue();
          v124 = type[0];
          if (os_log_type_enabled(v123, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
            _os_log_impl(&dword_182FBE000, v123, v124, "%{public}s called with null parameters", (uint8_t *)buf, 0xCu);
          }
        }
        else if (v140)
        {
          v125 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v123 = objc_claimAutoreleasedReturnValue();
          v126 = type[0];
          v127 = os_log_type_enabled(v123, type[0]);
          if (v125)
          {
            if (v127)
            {
              LODWORD(buf[0]) = 136446466;
              *(_QWORD *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
              WORD6(buf[0]) = 2082;
              *(_QWORD *)((char *)buf + 14) = v125;
              _os_log_impl(&dword_182FBE000, v123, v126, "%{public}s called with null parameters, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
            }

            free(v125);
            goto LABEL_222;
          }
          if (v127)
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
            _os_log_impl(&dword_182FBE000, v123, v126, "%{public}s called with null parameters, no backtrace", (uint8_t *)buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v123 = objc_claimAutoreleasedReturnValue();
          v128 = type[0];
          if (os_log_type_enabled(v123, type[0]))
          {
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_parameters_set_inherited_from_silent_context";
            _os_log_impl(&dword_182FBE000, v123, v128, "%{public}s called with null parameters, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
          }
        }

      }
LABEL_222:
      if (v122)
        free(v122);
      v106 = 0;
      goto LABEL_188;
    }
    v29 = (void *)v28[5];
    if (v29 == &nw_protocol_ref_counted_handle)
    {
      v31 = v28[11];
      if (v31)
        v28[11] = v31 + 1;
      v30 = -1;
    }
    else
    {
      v30 = 0;
    }
    *(_QWORD *)type = v28;
    v139 = v30;
    v32 = v28[3];
    if (v32)
    {
      v33 = *(void (**)(_QWORD *))(v32 + 136);
      if (v33)
      {
        v33(v28);
        v34 = (void *)objc_claimAutoreleasedReturnValue();
        if (v29 != &nw_protocol_ref_counted_handle)
          goto LABEL_31;
        goto LABEL_116;
      }
    }
    __nwlog_obj();
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v40 = (const char *)v28[2];
    LODWORD(buf[0]) = 136446722;
    *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
    if (!v40)
      v40 = "invalid";
    WORD6(buf[0]) = 2082;
    *(_QWORD *)((char *)buf + 14) = v40;
    WORD3(buf[1]) = 2048;
    *((_QWORD *)&buf[1] + 1) = v28;
    v131 = (const char *)_os_log_send_and_compose_impl();

    v140 = OS_LOG_TYPE_ERROR;
    v137 = 0;
    v41 = (char *)v131;
    if (!__nwlog_fault(v131, &v140, &v137))
    {
LABEL_113:
      if (v41)
        free(v41);
      v34 = 0;
      if (v29 != &nw_protocol_ref_counted_handle)
      {
LABEL_31:
        if (!v34)
        {
LABEL_118:
          v72 = (_QWORD *)*((_QWORD *)v23 + 94);
          if (v72)
          {
            v73 = (void *)v72[5];
            if (v73 == &nw_protocol_ref_counted_handle)
            {
              v75 = v72[11];
              if (v75)
                v72[11] = v75 + 1;
              v74 = -1;
            }
            else
            {
              v74 = 0;
            }
            *(_QWORD *)type = v72;
            v139 = v74;
            v76 = v72[3];
            if (v76)
            {
              v77 = *(void (**)(_QWORD *))(v76 + 112);
              if (v77)
              {
                v77(v72);
                v78 = (void *)objc_claimAutoreleasedReturnValue();
                if (v73 != &nw_protocol_ref_counted_handle)
                  goto LABEL_127;
                goto LABEL_169;
              }
            }
            __nwlog_obj();
            v79 = (void *)objc_claimAutoreleasedReturnValue();
            v80 = (const char *)v72[2];
            LODWORD(buf[0]) = 136446722;
            *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
            if (!v80)
              v80 = "invalid";
            WORD6(buf[0]) = 2082;
            *(_QWORD *)((char *)buf + 14) = v80;
            WORD3(buf[1]) = 2048;
            *((_QWORD *)&buf[1] + 1) = v72;
            v132 = (const char *)_os_log_send_and_compose_impl();

            v140 = OS_LOG_TYPE_ERROR;
            v137 = 0;
            v81 = (char *)v132;
            if (!__nwlog_fault(v132, &v140, &v137))
            {
LABEL_166:
              if (v81)
                free(v81);
              v78 = 0;
              if (v73 != &nw_protocol_ref_counted_handle)
              {
LABEL_127:
                if (!v78)
                  goto LABEL_182;
                goto LABEL_170;
              }
LABEL_169:
              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              if (!v78)
              {
LABEL_182:
                v99 = 0;
LABEL_183:

                goto LABEL_184;
              }
LABEL_170:
              v99 = v78;
              v100 = -[NWConcrete_nw_parameters initWithParameters:stripConnected:shallowCopy:]((id *)[NWConcrete_nw_parameters alloc], v99, 0, 0);

              if (v34)
              {
                v101 = v34;
                v102 = (*((_BYTE *)v101 + 231) & 4) == 0;

                if (!v102)
                {
                  v103 = *((id *)v101 + 1);
                  nw_parameters_set_context((void *)v100, v103);

                }
              }
              v27 = v100;
              goto LABEL_183;
            }
            if (v140 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v82 = objc_claimAutoreleasedReturnValue();
              v130 = v140;
              if (os_log_type_enabled(v82, v140))
              {
                v83 = (const char *)v72[2];
                if (!v83)
                  v83 = "invalid";
                LODWORD(buf[0]) = 136446722;
                *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                WORD6(buf[0]) = 2082;
                *(_QWORD *)((char *)buf + 14) = v83;
                WORD3(buf[1]) = 2048;
                *((_QWORD *)&buf[1] + 1) = v72;
                _os_log_impl(&dword_182FBE000, v82, v130, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback", (uint8_t *)buf, 0x20u);
              }
            }
            else
            {
              if (!v137)
              {
                __nwlog_obj();
                v94 = objc_claimAutoreleasedReturnValue();
                v95 = v140;
                v96 = v94;
                if (os_log_type_enabled(v94, v140))
                {
                  v97 = (const char *)v72[2];
                  if (!v97)
                    v97 = "invalid";
                  LODWORD(buf[0]) = 136446722;
                  *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                  WORD6(buf[0]) = 2082;
                  *(_QWORD *)((char *)buf + 14) = v97;
                  WORD3(buf[1]) = 2048;
                  *((_QWORD *)&buf[1] + 1) = v72;
                  _os_log_impl(&dword_182FBE000, v96, v95, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded", (uint8_t *)buf, 0x20u);
                }

                goto LABEL_165;
              }
              v88 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v82 = objc_claimAutoreleasedReturnValue();
              v129 = v140;
              v89 = os_log_type_enabled(v82, v140);
              if (v88)
              {
                if (v89)
                {
                  v90 = (const char *)v72[2];
                  if (!v90)
                    v90 = "invalid";
                  LODWORD(buf[0]) = 136446978;
                  *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                  WORD6(buf[0]) = 2082;
                  *(_QWORD *)((char *)buf + 14) = v90;
                  WORD3(buf[1]) = 2048;
                  *((_QWORD *)&buf[1] + 1) = v72;
                  LOWORD(buf[2]) = 2082;
                  *(_QWORD *)((char *)&buf[2] + 2) = v88;
                  _os_log_impl(&dword_182FBE000, v82, v129, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x2Au);
                }

                free(v88);
                goto LABEL_165;
              }
              if (v89)
              {
                v98 = (const char *)v72[2];
                if (!v98)
                  v98 = "invalid";
                LODWORD(buf[0]) = 136446722;
                *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                WORD6(buf[0]) = 2082;
                *(_QWORD *)((char *)buf + 14) = v98;
                WORD3(buf[1]) = 2048;
                *((_QWORD *)&buf[1] + 1) = v72;
                _os_log_impl(&dword_182FBE000, v82, v129, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace", (uint8_t *)buf, 0x20u);
              }
            }

LABEL_165:
            v81 = (char *)v132;
            goto LABEL_166;
          }
          __nwlog_obj();
          v84 = (void *)objc_claimAutoreleasedReturnValue();
          LODWORD(buf[0]) = 136446210;
          *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
          v85 = (char *)_os_log_send_and_compose_impl();

          type[0] = OS_LOG_TYPE_ERROR;
          v140 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v85, type, &v140))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v86 = objc_claimAutoreleasedReturnValue();
              v87 = type[0];
              if (os_log_type_enabled(v86, type[0]))
              {
                LODWORD(buf[0]) = 136446210;
                *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_182FBE000, v86, v87, "%{public}s called with null protocol", (uint8_t *)buf, 0xCu);
              }
            }
            else if (v140)
            {
              v91 = (char *)__nw_create_backtrace_string();
              __nwlog_obj();
              v86 = objc_claimAutoreleasedReturnValue();
              v92 = type[0];
              v93 = os_log_type_enabled(v86, type[0]);
              if (v91)
              {
                if (v93)
                {
                  LODWORD(buf[0]) = 136446466;
                  *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                  WORD6(buf[0]) = 2082;
                  *(_QWORD *)((char *)buf + 14) = v91;
                  _os_log_impl(&dword_182FBE000, v86, v92, "%{public}s called with null protocol, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
                }

                free(v91);
                goto LABEL_180;
              }
              if (v93)
              {
                LODWORD(buf[0]) = 136446210;
                *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_182FBE000, v86, v92, "%{public}s called with null protocol, no backtrace", (uint8_t *)buf, 0xCu);
              }
            }
            else
            {
              __nwlog_obj();
              v86 = objc_claimAutoreleasedReturnValue();
              v104 = type[0];
              if (os_log_type_enabled(v86, type[0]))
              {
                LODWORD(buf[0]) = 136446210;
                *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_parameters";
                _os_log_impl(&dword_182FBE000, v86, v104, "%{public}s called with null protocol, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
              }
            }

          }
LABEL_180:
          if (v85)
            free(v85);
          goto LABEL_182;
        }
LABEL_117:
        v71 = v34;

        v136 = v71;
        goto LABEL_118;
      }
LABEL_116:
      nw::release_if_needed<nw_protocol *>((uint64_t *)type);
      if (!v34)
        goto LABEL_118;
      goto LABEL_117;
    }
    if (v140 == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v43 = v140;
      if (os_log_type_enabled(v42, v140))
      {
        v44 = (const char *)v28[2];
        if (!v44)
          v44 = "invalid";
        LODWORD(buf[0]) = 136446722;
        *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
        WORD6(buf[0]) = 2082;
        *(_QWORD *)((char *)buf + 14) = v44;
        WORD3(buf[1]) = 2048;
        *((_QWORD *)&buf[1] + 1) = v28;
        _os_log_impl(&dword_182FBE000, v42, v43, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback", (uint8_t *)buf, 0x20u);
      }
    }
    else
    {
      if (v137)
      {
        v48 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v49 = objc_claimAutoreleasedReturnValue();
        v50 = v140;
        v51 = os_log_type_enabled(v49, v140);
        if (v48)
        {
          if (v51)
          {
            v52 = (const char *)v28[2];
            if (!v52)
              v52 = "invalid";
            LODWORD(buf[0]) = 136446978;
            *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
            WORD6(buf[0]) = 2082;
            *(_QWORD *)((char *)buf + 14) = v52;
            WORD3(buf[1]) = 2048;
            *((_QWORD *)&buf[1] + 1) = v28;
            LOWORD(buf[2]) = 2082;
            *(_QWORD *)((char *)&buf[2] + 2) = v48;
            _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", (uint8_t *)buf, 0x2Au);
          }

          free(v48);
        }
        else
        {
          if (v51)
          {
            v70 = (const char *)v28[2];
            if (!v70)
              v70 = "invalid";
            LODWORD(buf[0]) = 136446722;
            *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
            WORD6(buf[0]) = 2082;
            *(_QWORD *)((char *)buf + 14) = v70;
            WORD3(buf[1]) = 2048;
            *((_QWORD *)&buf[1] + 1) = v28;
            _os_log_impl(&dword_182FBE000, v49, v50, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace", (uint8_t *)buf, 0x20u);
          }

        }
        goto LABEL_112;
      }
      __nwlog_obj();
      v42 = objc_claimAutoreleasedReturnValue();
      v68 = v140;
      if (os_log_type_enabled(v42, v140))
      {
        v69 = (const char *)v28[2];
        if (!v69)
          v69 = "invalid";
        LODWORD(buf[0]) = 136446722;
        *(_QWORD *)((char *)buf + 4) = "__nw_protocol_get_remote_endpoint";
        WORD6(buf[0]) = 2082;
        *(_QWORD *)((char *)buf + 14) = v69;
        WORD3(buf[1]) = 2048;
        *((_QWORD *)&buf[1] + 1) = v28;
        _os_log_impl(&dword_182FBE000, v42, v68, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded", (uint8_t *)buf, 0x20u);
      }
    }

LABEL_112:
    v41 = (char *)v131;
    goto LABEL_113;
  }
LABEL_68:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v54 = (id)gLogObj;
  v55 = v2;
  if (v3 > 5)
    v56 = "unknown-mode";
  else
    v56 = off_1E149FC18[v3];
  LODWORD(buf[0]) = 136446722;
  *(_QWORD *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
  WORD6(buf[0]) = 2082;
  *(_QWORD *)((char *)buf + 14) = v56;
  WORD3(buf[1]) = 2082;
  *((_QWORD *)&buf[1] + 1) = "flow";
  v57 = (void *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  v140 = OS_LOG_TYPE_DEFAULT;
  if (!__nwlog_fault((const char *)v57, type, &v140))
  {
LABEL_100:
    if (!v57)
      goto LABEL_205;
LABEL_101:
    free(v57);
    goto LABEL_205;
  }
  if (type[0] == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v58 = (id)gLogObj;
    v59 = type[0];
    if (os_log_type_enabled(v58, type[0]))
    {
      if (v3 > 5)
        v60 = "unknown-mode";
      else
        v60 = off_1E149FC18[v3];
      LODWORD(buf[0]) = 136446722;
      *(_QWORD *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
      WORD6(buf[0]) = 2082;
      *(_QWORD *)((char *)buf + 14) = v60;
      WORD3(buf[1]) = 2082;
      *((_QWORD *)&buf[1] + 1) = "flow";
      _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s Handler is in mode %{public}s, expected %{public}s", (uint8_t *)buf, 0x20u);
    }
LABEL_99:

    goto LABEL_100;
  }
  if (v140 == OS_LOG_TYPE_DEFAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v58 = (id)gLogObj;
    v65 = type[0];
    if (os_log_type_enabled(v58, type[0]))
    {
      if (v3 > 5)
        v66 = "unknown-mode";
      else
        v66 = off_1E149FC18[v3];
      LODWORD(buf[0]) = 136446722;
      *(_QWORD *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
      WORD6(buf[0]) = 2082;
      *(_QWORD *)((char *)buf + 14) = v66;
      WORD3(buf[1]) = 2082;
      *((_QWORD *)&buf[1] + 1) = "flow";
      _os_log_impl(&dword_182FBE000, v58, v65, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", (uint8_t *)buf, 0x20u);
    }
    goto LABEL_99;
  }
  v61 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v58 = (id)gLogObj;
  v62 = type[0];
  v63 = os_log_type_enabled(v58, type[0]);
  if (!v61)
  {
    if (v63)
    {
      if (v3 > 5)
        v67 = "unknown-mode";
      else
        v67 = off_1E149FC18[v3];
      LODWORD(buf[0]) = 136446722;
      *(_QWORD *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
      WORD6(buf[0]) = 2082;
      *(_QWORD *)((char *)buf + 14) = v67;
      WORD3(buf[1]) = 2082;
      *((_QWORD *)&buf[1] + 1) = "flow";
      _os_log_impl(&dword_182FBE000, v58, v62, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", (uint8_t *)buf, 0x20u);
    }
    goto LABEL_99;
  }
  if (v63)
  {
    if (v3 > 5)
      v64 = "unknown-mode";
    else
      v64 = off_1E149FC18[v3];
    LODWORD(buf[0]) = 136446978;
    *(_QWORD *)((char *)buf + 4) = "nw_endpoint_flow_start_child";
    WORD6(buf[0]) = 2082;
    *(_QWORD *)((char *)buf + 14) = v64;
    WORD3(buf[1]) = 2082;
    *((_QWORD *)&buf[1] + 1) = "flow";
    LOWORD(buf[2]) = 2082;
    *(_QWORD *)((char *)&buf[2] + 2) = v61;
    _os_log_impl(&dword_182FBE000, v58, v62, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", (uint8_t *)buf, 0x2Au);
  }

  free(v61);
  if (v57)
    goto LABEL_101;
LABEL_205:

}

void sub_18309F6D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_custom_proxy_configs(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = nw_context_has_proxies(*(void **)(v1[13] + 136)) || v2[22] != 0;
    goto LABEL_5;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_has_custom_proxy_configs";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_custom_proxy_configs";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_has_custom_proxy_configs";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_custom_proxy_configs";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_custom_proxy_configs";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_5:

  return v3;
}

void sub_18309FA90(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_context_has_proxies(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  uint64_t v3;
  _BOOL8 v4;
  _BOOL8 v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    if ((v1[34]._os_unfair_lock_opaque & 0x48) == 0x40 && !dispatch_workloop_is_current())
    {
      os_unfair_lock_lock(v2 + 20);
      v7 = *(_QWORD *)&v2[14]._os_unfair_lock_opaque;
      if (!v7 || *(_QWORD *)(v7 + 16) == *(_QWORD *)(v7 + 24))
      {
        v8 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
        v9 = *(_QWORD *)(v8 + 56);
        if (v9)
          v4 = *(_QWORD *)(v9 + 16) != *(_QWORD *)(v9 + 24);
        else
          v4 = 0;

      }
      else
      {
        v4 = 1;
      }
      os_unfair_lock_unlock(v2 + 20);
    }
    else
    {
      v3 = *(_QWORD *)&v2[14]._os_unfair_lock_opaque;
      if (!v3 || *(_QWORD *)(v3 + 16) == *(_QWORD *)(v3 + 24))
      {
        v5 = nw_context_copy_globals_context((NWConcrete_nw_context *)v2);
        v6 = *(_QWORD *)(v5 + 56);
        if (v6)
          v4 = *(_QWORD *)(v6 + 16) != *(_QWORD *)(v6 + 24);
        else
          v4 = 0;

      }
      else
      {
        v4 = 1;
      }
    }
    goto LABEL_19;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_context_has_proxies";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_context_has_proxies";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_context_has_proxies";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_context_has_proxies";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_context_has_proxies";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_36:
  if (v12)
    free(v12);
  v4 = 0;
LABEL_19:

  return v4;
}

void sub_18309FDF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_clear_protocol_stack(void *a1, int a2)
{
  id *v3;
  id *v4;
  _QWORD *v5;
  _QWORD *v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  void *v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  char *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = v3[19];
    v6 = v5;
    if (v5)
    {
      switch(a2)
      {
        case 2:
          v7 = (void *)v5[6];
          v5[6] = 0;
          break;
        case 3:
          v10 = (void *)v5[3];
          v5[3] = 0;

          v7 = (void *)v6[4];
          v6[4] = 0;
          break;
        case 4:
          v7 = (void *)v5[2];
          v5[2] = 0;
          break;
        case 5:
          v7 = (void *)v5[1];
          v5[1] = 0;
          break;
        default:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v8 = (id)gLogObj;
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            v31 = "nw_parameters_clear_protocol_stack";
            v32 = 1024;
            LODWORD(v33) = a2;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s Unsupported protocol level %u", buf, 0x12u);
          }

          goto LABEL_8;
      }

      v9 = 1;
LABEL_13:

      goto LABEL_14;
    }
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_parameters_clear_protocol_stack";
    v17 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (__nwlog_fault(v17, &type, &v28))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_parameters_clear_protocol_stack";
          _os_log_impl(&dword_182FBE000, v18, v19, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v28)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        v25 = os_log_type_enabled(v18, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v31 = "nw_parameters_clear_protocol_stack";
            v32 = 2082;
            v33 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v18, v24, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_50;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_parameters_clear_protocol_stack";
          _os_log_impl(&dword_182FBE000, v18, v24, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v18 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        if (os_log_type_enabled(v18, type))
        {
          *(_DWORD *)buf = 136446210;
          v31 = "nw_parameters_clear_protocol_stack";
          _os_log_impl(&dword_182FBE000, v18, v27, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_50:
    if (v17)
      free(v17);
LABEL_8:
    v9 = 0;
    goto LABEL_13;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v31 = "nw_parameters_clear_protocol_stack";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v28 = 0;
  if (__nwlog_fault(v13, &type, &v28))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_parameters_clear_protocol_stack";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v28)
    {
      v20 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (v20)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v31 = "nw_parameters_clear_protocol_stack";
          v32 = 2082;
          v33 = v20;
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v20);
        goto LABEL_44;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_parameters_clear_protocol_stack";
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_parameters_clear_protocol_stack";
        _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_44:
  if (v13)
    free(v13);
  v9 = 0;
LABEL_14:

  return v9;
}

uint64_t nw_protocol_get_remote_endpoint(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void (**v10)(_QWORD);
  const void *v11;
  const char *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  const char *v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  const char *v21;
  char *v22;
  _BOOL4 v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  const char *v27;
  const char *v28;
  char v29;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v32 = "__nw_protocol_get_remote_endpoint";
    v18 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v29 = 0;
    if (__nwlog_fault(v18, &type, &v29))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_remote_endpoint";
          v21 = "%{public}s called with null protocol";
LABEL_59:
          _os_log_impl(&dword_182FBE000, v19, v20, v21, buf, 0xCu);
        }
      }
      else if (v29)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v19 = __nwlog_obj();
        v20 = type;
        v26 = os_log_type_enabled(v19, type);
        if (backtrace_string)
        {
          if (v26)
          {
            *(_DWORD *)buf = 136446466;
            v32 = "__nw_protocol_get_remote_endpoint";
            v33 = 2082;
            v34 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v19, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }
          free(backtrace_string);
          goto LABEL_60;
        }
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_remote_endpoint";
          v21 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_59;
        }
      }
      else
      {
        v19 = __nwlog_obj();
        v20 = type;
        if (os_log_type_enabled(v19, type))
        {
          *(_DWORD *)buf = 136446210;
          v32 = "__nw_protocol_get_remote_endpoint";
          v21 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_59;
        }
      }
    }
LABEL_60:
    if (v18)
      free(v18);
    return 0;
  }
  v2 = *(void **)(a1 + 40);
  if (v2 == &nw_protocol_ref_counted_handle)
  {
    v3 = *(_QWORD *)(a1 + 88);
    if (v3)
      *(_QWORD *)(a1 + 88) = v3 + 1;
  }
  v4 = *(_QWORD *)(a1 + 24);
  if (v4)
  {
    v5 = *(uint64_t (**)(uint64_t))(v4 + 136);
    if (v5)
    {
      v6 = v5(a1);
      if (v2 != &nw_protocol_ref_counted_handle)
        return v6;
      goto LABEL_8;
    }
  }
  __nwlog_obj();
  v12 = *(const char **)(a1 + 16);
  *(_DWORD *)buf = 136446722;
  v32 = "__nw_protocol_get_remote_endpoint";
  if (!v12)
    v12 = "invalid";
  v33 = 2082;
  v34 = (void *)v12;
  v35 = 2048;
  v36 = a1;
  v13 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v29 = 0;
  if (!__nwlog_fault(v13, &type, &v29))
    goto LABEL_51;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v16 = *(const char **)(a1 + 16);
    if (!v16)
      v16 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_remote_endpoint";
    v33 = 2082;
    v34 = (void *)v16;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_50:
    _os_log_impl(&dword_182FBE000, v14, v15, v17, buf, 0x20u);
    goto LABEL_51;
  }
  if (!v29)
  {
    v14 = __nwlog_obj();
    v15 = type;
    if (!os_log_type_enabled(v14, type))
      goto LABEL_51;
    v27 = *(const char **)(a1 + 16);
    if (!v27)
      v27 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_remote_endpoint";
    v33 = 2082;
    v34 = (void *)v27;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
    goto LABEL_50;
  }
  v22 = (char *)__nw_create_backtrace_string();
  v14 = __nwlog_obj();
  v15 = type;
  v23 = os_log_type_enabled(v14, type);
  if (!v22)
  {
    if (!v23)
      goto LABEL_51;
    v28 = *(const char **)(a1 + 16);
    if (!v28)
      v28 = "invalid";
    *(_DWORD *)buf = 136446722;
    v32 = "__nw_protocol_get_remote_endpoint";
    v33 = 2082;
    v34 = (void *)v28;
    v35 = 2048;
    v36 = a1;
    v17 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
    goto LABEL_50;
  }
  if (v23)
  {
    v24 = *(const char **)(a1 + 16);
    if (!v24)
      v24 = "invalid";
    *(_DWORD *)buf = 136446978;
    v32 = "__nw_protocol_get_remote_endpoint";
    v33 = 2082;
    v34 = (void *)v24;
    v35 = 2048;
    v36 = a1;
    v37 = 2082;
    v38 = v22;
    _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
  }
  free(v22);
LABEL_51:
  if (v13)
    free(v13);
  v6 = 0;
  if (v2 == &nw_protocol_ref_counted_handle)
  {
LABEL_8:
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v8 = *(_QWORD *)(a1 + 88);
      if (v8)
      {
        v9 = v8 - 1;
        *(_QWORD *)(a1 + 88) = v9;
        if (!v9)
        {
          v10 = *(void (***)(_QWORD))(a1 + 64);
          if (v10)
          {
            *(_QWORD *)(a1 + 64) = 0;
            v10[2](v10);
            _Block_release(v10);
          }
          if ((*(_BYTE *)(a1 + 72) & 1) != 0)
          {
            v11 = *(const void **)(a1 + 64);
            if (v11)
              _Block_release(v11);
          }
          free((void *)a1);
        }
      }
    }
  }
  return v6;
}

void nw_protocol_stack_set_transport_protocol(nw_protocol_stack_t stack, nw_protocol_options_t protocol)
{
  nw_protocol_stack_t v3;
  NSObject *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = stack;
  v4 = protocol;
  if (v3)
  {
    objc_storeStrong((id *)&v3[3].isa, protocol);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_stack_set_transport_protocol";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_stack_set_transport_protocol";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_stack_set_transport_protocol";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_stack_set_transport_protocol";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_stack_set_transport_protocol";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_protocol_transform_get_prohibit_direct(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[8] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_transform_get_prohibit_direct";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_transform_get_prohibit_direct";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null transform", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_transform_get_prohibit_direct";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null transform, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_transform_get_prohibit_direct";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null transform, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_transform_get_prohibit_direct";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null transform, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_protocol_stack_set_internet_protocol(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    objc_storeStrong(v3 + 6, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_stack_set_internet_protocol";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_stack_set_internet_protocol";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null stack", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_stack_set_internet_protocol";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_stack_set_internet_protocol";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null stack, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_stack_set_internet_protocol";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

uint64_t nw_quic_is_above_failure_threshold(void *a1, _BYTE *a2)
{
  id v3;
  id v4;
  _DWORD *cached_content_for_protocol;
  int64_t int64_with_default;
  int64_t v7;
  uint64_t v8;
  int64_t v9;
  NSObject *v11;
  int v12;
  int v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  void *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  os_log_type_t v27;
  _BOOL4 v28;
  char *backtrace_string;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  os_log_type_t v34;
  int64_t v35;
  NSObject *v36;
  int v37;
  int v38;
  int v39;
  char v41;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v44;
  __int16 v45;
  _BYTE v46[10];
  __int16 v47;
  int v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (v3)
  {
    if (a2)
    {
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_54912);
      v4 = (id)nw_protocol_copy_quic_connection_definition::quic_definition;
      if (v4)
      {
        cached_content_for_protocol = (_DWORD *)nw_association_get_cached_content_for_protocol(v3, v4);
        if (cached_content_for_protocol)
        {
          int64_with_default = networkd_settings_get_int64_with_default((const char *)nw_setting_quic_failure_threshold, 10);
          v7 = networkd_settings_get_int64_with_default((const char *)nw_setting_quic_application_failure_threshold, 3);
          if (cached_content_for_protocol[6]
            || int64_with_default >= cached_content_for_protocol[7]
            && int64_with_default >= cached_content_for_protocol[8])
          {
            v8 = 0;
          }
          else
          {
            *a2 = 0;
            if (gLogDatapath)
            {
              v35 = v7;
              __nwlog_obj();
              v36 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
              {
                v37 = cached_content_for_protocol[6];
                v38 = cached_content_for_protocol[7];
                v39 = cached_content_for_protocol[8];
                *(_DWORD *)buf = 136446978;
                v44 = "nw_quic_is_above_failure_threshold";
                v45 = 1024;
                *(_DWORD *)v46 = v37;
                *(_WORD *)&v46[4] = 1024;
                *(_DWORD *)&v46[6] = v38;
                v47 = 1024;
                v48 = v39;
                _os_log_impl(&dword_182FBE000, v36, OS_LOG_TYPE_DEBUG, "%{public}s QUIC above failure threshold (success: %u, fail: %u, cancel: %u)", buf, 0x1Eu);
              }

              v8 = 1;
              v7 = v35;
            }
            else
            {
              v8 = 1;
            }
          }
          v9 = cached_content_for_protocol[10];
          if (cached_content_for_protocol[9] < v9 && v7 < v9)
          {
            v8 = 1;
            *a2 = 1;
            if (gLogDatapath)
            {
              __nwlog_obj();
              v11 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v11, OS_LOG_TYPE_DEBUG))
              {
                v12 = cached_content_for_protocol[9];
                v13 = cached_content_for_protocol[10];
                *(_DWORD *)buf = 136446722;
                v44 = "nw_quic_is_above_failure_threshold";
                v45 = 1024;
                *(_DWORD *)v46 = v12;
                *(_WORD *)&v46[4] = 1024;
                *(_DWORD *)&v46[6] = v13;
                _os_log_impl(&dword_182FBE000, v11, OS_LOG_TYPE_DEBUG, "%{public}s QUIC above application failure threshold (success: %u, fail: %u)", buf, 0x18u);
              }

            }
          }
          goto LABEL_79;
        }
LABEL_78:
        v8 = 0;
LABEL_79:

        goto LABEL_80;
      }
      __nwlog_obj();
      v20 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v44 = "nw_quic_is_above_failure_threshold";
      v21 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v41 = 0;
      if (__nwlog_fault(v21, &type, &v41))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v23 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            v44 = "nw_quic_is_above_failure_threshold";
            _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null definition", buf, 0xCu);
          }
        }
        else if (v41)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v30 = type;
          v31 = os_log_type_enabled(v22, type);
          if (backtrace_string)
          {
            if (v31)
            {
              *(_DWORD *)buf = 136446466;
              v44 = "nw_quic_is_above_failure_threshold";
              v45 = 2082;
              *(_QWORD *)v46 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s called with null definition, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_76;
          }
          if (v31)
          {
            *(_DWORD *)buf = 136446210;
            v44 = "nw_quic_is_above_failure_threshold";
            _os_log_impl(&dword_182FBE000, v22, v30, "%{public}s called with null definition, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v22 = objc_claimAutoreleasedReturnValue();
          v34 = type;
          if (os_log_type_enabled(v22, type))
          {
            *(_DWORD *)buf = 136446210;
            v44 = "nw_quic_is_above_failure_threshold";
            _os_log_impl(&dword_182FBE000, v22, v34, "%{public}s called with null definition, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_76:
      if (v21)
        free(v21);
      goto LABEL_78;
    }
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_quic_is_above_failure_threshold";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v15, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null application", buf, 0xCu);
        }
LABEL_69:

        goto LABEL_70;
      }
      if (!v41)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_182FBE000, v16, v33, "%{public}s called with null application, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_69;
      }
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      v28 = os_log_type_enabled(v16, type);
      if (!v24)
      {
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null application, no backtrace", buf, 0xCu);
        }
        goto LABEL_69;
      }
      if (v28)
      {
        *(_DWORD *)buf = 136446466;
        v44 = "nw_quic_is_above_failure_threshold";
        v45 = 2082;
        *(_QWORD *)v46 = v24;
        _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null application, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_46;
    }
  }
  else
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v44 = "nw_quic_is_above_failure_threshold";
    v15 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v41 = 0;
    if (__nwlog_fault(v15, &type, &v41))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null association", buf, 0xCu);
        }
        goto LABEL_69;
      }
      if (!v41)
      {
        __nwlog_obj();
        v16 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v16, type))
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_182FBE000, v16, v32, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_69;
      }
      v24 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      v26 = os_log_type_enabled(v16, type);
      if (!v24)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446210;
          v44 = "nw_quic_is_above_failure_threshold";
          _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null association, no backtrace", buf, 0xCu);
        }
        goto LABEL_69;
      }
      if (v26)
      {
        *(_DWORD *)buf = 136446466;
        v44 = "nw_quic_is_above_failure_threshold";
        v45 = 2082;
        *(_QWORD *)v46 = v24;
        _os_log_impl(&dword_182FBE000, v16, v25, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_46:

      free(v24);
    }
  }
LABEL_70:
  if (v15)
    free(v15);
  v8 = 0;
LABEL_80:

  return v8;
}

void sub_1830A19A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_endpoint_handler_copy_association(void *a1, int a2)
{
  id *v3;
  id *v4;
  id v5;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      nw_endpoint_handler_initialize_association(v3);
    v5 = v4[7];
    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_endpoint_handler_copy_association";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_endpoint_handler_copy_association";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_endpoint_handler_copy_association";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_endpoint_handler_copy_association";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_endpoint_handler_copy_association";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
  v5 = 0;
LABEL_5:

  return v5;
}

void sub_1830A1C60(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL static NWInterface.InterfaceType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void nw_parameters_set_skip_stack_trace_capture(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = 0x8000000000;
    if (!a2)
      v5 = 0;
    *((_QWORD *)v3 + 12) = *((_QWORD *)v3 + 12) & 0xFFFFFF7FFFFFFFFFLL | v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_parameters_set_skip_stack_trace_capture";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_skip_stack_trace_capture";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_parameters_set_skip_stack_trace_capture";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_skip_stack_trace_capture";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_parameters_set_skip_stack_trace_capture";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
LABEL_5:

}

void nw_protocol_default_output_available(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  void (*output_available)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_default_output_available";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_output_available";
      v8 = "%{public}s called with null protocol";
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_default_output_available";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_34:
        if (!v5)
          return;
        goto LABEL_35;
      }
      if (!v10)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_output_available";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_output_available";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_33:
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_34;
  }
  default_input_handler = a1->default_input_handler;
  if (default_input_handler)
  {
    callbacks = default_input_handler->callbacks;
    if (callbacks)
    {
      output_available = (void (*)(void))callbacks->output_available;
      if (output_available)
        output_available();
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_default_output_available";
  v5 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (!__nwlog_fault(v5, &type, &v13))
    goto LABEL_34;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_default_output_available";
    v8 = "%{public}s called with null protocol->default_input_handler";
    goto LABEL_33;
  }
  if (!v13)
  {
    v6 = __nwlog_obj();
    v7 = type;
    if (!os_log_type_enabled(v6, type))
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_default_output_available";
    v8 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
    goto LABEL_33;
  }
  v11 = (char *)__nw_create_backtrace_string();
  v6 = __nwlog_obj();
  v7 = type;
  v12 = os_log_type_enabled(v6, type);
  if (!v11)
  {
    if (!v12)
      goto LABEL_34;
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_default_output_available";
    v8 = "%{public}s called with null protocol->default_input_handler, no backtrace";
    goto LABEL_33;
  }
  if (v12)
  {
    *(_DWORD *)buf = 136446466;
    v16 = "nw_protocol_default_output_available";
    v17 = 2082;
    v18 = v11;
    _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v11);
  if (v5)
LABEL_35:
    free(v5);
}

void nw_association_force_update(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    if ((*((_BYTE *)v3 + 76) & 2) == 0)
    {
      *((_BYTE *)v3 + 76) |= 2u;
      nw_path_evaluator_force_update(*((void **)v3 + 3), v4);
      *((_BYTE *)v3 + 76) &= ~2u;
    }
    goto LABEL_4;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_association_force_update";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_association_force_update";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null association", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_association_force_update";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null association, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_21;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_association_force_update";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null association, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_association_force_update";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null association, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_21:
  if (v6)
    free(v6);
LABEL_4:

}

void sub_1830A26EC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_path_evaluator_start(void *a1)
{
  char *v1;
  id v2;
  uint64_t globals_for_path;
  os_unfair_lock_s *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  void *v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  NSObject *v16;
  const char *v17;
  char *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  int v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char *backtrace_string;
  _BOOL4 v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  _BOOL8 v32;
  uint64_t *v33;
  void *v34;
  _DWORD *v35;
  BOOL v36;
  NSObject *v37;
  const char *logging_description;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  char *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  os_log_type_t v48;
  os_log_type_t v49;
  char v50;
  os_log_type_t type;
  _BYTE buf[38];
  __int16 v53;
  uint64_t v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;

  v57 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  nw_allow_use_of_dispatch_internal();
  if (v1)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v1 + 24);
    if (*((_QWORD *)v1 + 6) || (nw_path_evaluator_evaluate((NWConcrete_nw_path_evaluator *)v1, 0) & 1) != 0)
    {
      if ((v1[107] & 0x30) != 0)
      {
LABEL_5:
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 24);
        goto LABEL_73;
      }
      v1[107] |= 0x10u;
      v2 = nw_parameters_copy_context(*((void **)v1 + 1));
      nw_path_watch_necp_changes(v2);
      globals_for_path = nw_context_get_globals_for_path(v2);
      v4 = (os_unfair_lock_s *)(globals_for_path + 124);
      os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
      if ((*(_BYTE *)(globals_for_path + 140) & 1) != 0)
      {
        v6 = *(_QWORD *)(globals_for_path + 56);
        if (v6)
        {
          nw_queue_resume_source(v6, v5);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v7 = (id)gLogObj;
          if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
            _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s Resuming NECP source", buf, 0xCu);
          }

        }
      }
      if ((v1[107] & 1) == 0)
      {
        memset(buf, 0, 37);
        uuid_unparse((const unsigned __int8 *)v1 + 80, buf);
        v8 = *(_QWORD *)(globals_for_path + 32);
        if (!v8)
        {
          v9 = nw_dictionary_create();
          v11 = *(void **)(globals_for_path + 32);
          v10 = (uint64_t *)(globals_for_path + 32);
          *v10 = (uint64_t)v9;

          v8 = *v10;
        }
        nw_dictionary_set_value(v8, buf, v1);
LABEL_64:
        os_unfair_lock_unlock(v4);
        if ((v1[107] & 0x40) != 0)
        {
          v35 = nw_parameters_copy_context(*((void **)v1 + 1));
          if (!v35 || (v36 = v35[31] == 4, v35, !v36))
          {
            if (__nwlog_path_log::onceToken[0] != -1)
              dispatch_once(__nwlog_path_log::onceToken, &__block_literal_global_39_44205);
            v37 = (id)gpathLogObj;
            if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
            {
              logging_description = nw_endpoint_get_logging_description(*((void **)v1 + 2));
              v39 = *((_QWORD *)v1 + 1);
              v40 = *((_QWORD *)v1 + 6);
              *(_DWORD *)buf = 136447490;
              *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
              *(_WORD *)&buf[12] = 1042;
              *(_DWORD *)&buf[14] = 16;
              *(_WORD *)&buf[18] = 2098;
              *(_QWORD *)&buf[20] = v1 + 80;
              *(_WORD *)&buf[28] = 2082;
              *(_QWORD *)&buf[30] = logging_description;
              v53 = 2112;
              v54 = v39;
              v55 = 2112;
              v56 = v40;
              _os_log_impl(&dword_182FBE000, v37, OS_LOG_TYPE_DEFAULT, "%{public}s [%{public,uuid_t}.16P %{public}s %@]\n\tpath: %@", buf, 0x3Au);
            }

          }
        }
        os_unfair_lock_unlock((os_unfair_lock_t)v1 + 24);

        goto LABEL_73;
      }
      if (uuid_is_null((const unsigned __int8 *)globals_for_path))
      {
        *(_OWORD *)globals_for_path = *((_OWORD *)v1 + 5);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
        {
LABEL_61:

          v31 = *(_QWORD *)(globals_for_path + 48);
          if (!v31)
          {
            v32 = nw_array_create();
            v34 = *(void **)(globals_for_path + 48);
            v33 = (uint64_t *)(globals_for_path + 48);
            *v33 = v32;

            v31 = *v33;
          }
          nw_array_append(v31, v1);
          goto LABEL_64;
        }
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
        v17 = "%{public}s Registering client as default path evaluator";
LABEL_60:
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_DEBUG, v17, buf, 0xCu);
        goto LABEL_61;
      }
      nw_path_shared_necp_fd(v2);
      if (!necp_client_action())
      {
LABEL_56:
        *((_OWORD *)v1 + 5) = *(_OWORD *)globals_for_path;
        v30 = *((_QWORD *)v1 + 6);
        if (v30)
          *(_OWORD *)(v30 + 120) = *(_OWORD *)globals_for_path;
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v16 = (id)gLogObj;
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
          goto LABEL_61;
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
        v17 = "%{public}s Adding client to default path evaluator";
        goto LABEL_60;
      }
      v21 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v22 = (id)gLogObj;
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v21;
      v23 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v50 = 0;
      if (__nwlog_fault(v23, &type, &v50))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v24 = objc_claimAutoreleasedReturnValue();
          v25 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v21;
            _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d", buf, 0x12u);
          }
        }
        else if (v50)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v24 = objc_claimAutoreleasedReturnValue();
          v49 = type;
          v28 = os_log_type_enabled(v24, type);
          if (backtrace_string)
          {
            if (v28)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v21;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v24, v49, "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
            }

            free(backtrace_string);
            goto LABEL_54;
          }
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v21;
            _os_log_impl(&dword_182FBE000, v24, v49, "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d, no backtrace", buf, 0x12u);
          }
        }
        else
        {
          __nwlog_obj();
          v24 = objc_claimAutoreleasedReturnValue();
          v29 = type;
          if (os_log_type_enabled(v24, type))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v21;
            _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s NECP_CLIENT_ACTION_REMOVE error %{darwin.errno}d, backtrace limit exceeded", buf, 0x12u);
          }
        }

      }
LABEL_54:
      if (v23)
        free(v23);
      goto LABEL_56;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v50 = 0;
    if (__nwlog_fault(v13, &type, &v50))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s nw_path_evaluator_evaluate failed", buf, 0xCu);
        }
      }
      else if (v50)
      {
        v18 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v19 = type;
        v20 = os_log_type_enabled(v14, type);
        if (v18)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v18;
            _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s nw_path_evaluator_evaluate failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v18);
          if (!v13)
            goto LABEL_5;
          goto LABEL_21;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s nw_path_evaluator_evaluate failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
          _os_log_impl(&dword_182FBE000, v14, v26, "%{public}s nw_path_evaluator_evaluate failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v13)
      goto LABEL_5;
LABEL_21:
    free(v13);
    goto LABEL_5;
  }
  __nwlog_obj();
  v41 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
  v42 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v50 = 0;
  if (__nwlog_fault(v42, &type, &v50))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v44 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
        _os_log_impl(&dword_182FBE000, v43, v44, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }
    else if (v50)
    {
      v45 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v46 = type;
      v47 = os_log_type_enabled(v43, type);
      if (v45)
      {
        if (v47)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v45;
          _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v45);
        goto LABEL_90;
      }
      if (v47)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
        _os_log_impl(&dword_182FBE000, v43, v46, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v43 = objc_claimAutoreleasedReturnValue();
      v48 = type;
      if (os_log_type_enabled(v43, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_evaluator_start";
        _os_log_impl(&dword_182FBE000, v43, v48, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_90:
  if (v42)
    free(v42);
LABEL_73:

}

void sub_1830A3224(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_path_evaluator_force_update(void *a1, void *a2)
{
  id v3;
  id v4;
  unsigned int v5;
  id v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    os_unfair_lock_lock((os_unfair_lock_t)v3 + 24);
    v5 = *((_DWORD *)v3 + 25);
    os_unfair_lock_unlock((os_unfair_lock_t)v3 + 24);
    v6 = nw_parameters_copy_context(*((void **)v3 + 1));
    nw_path_necp_check_for_updates(v6, (_OWORD *)v3 + 5, v5);

    goto LABEL_3;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_path_evaluator_force_update";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_path_evaluator_force_update";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null evaluator", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_path_evaluator_force_update";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null evaluator, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_path_evaluator_force_update";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null evaluator, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_path_evaluator_force_update";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null evaluator, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v8)
    free(v8);
LABEL_3:

}

void sub_1830A352C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

BOOL tcp_connection_is_cellular(void *a1)
{
  id v1;
  void *v2;
  void *v3;
  NSObject *v4;
  NSObject *v5;
  _BOOL8 v6;
  id v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  NSObject *v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  NSObject *v16;
  NSObject *v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v7 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v23 = "tcp_connection_is_cellular";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (__nwlog_fault(v8, &type, &v20))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_29;
        *(_DWORD *)buf = 136446210;
        v23 = "tcp_connection_is_cellular";
        v11 = "%{public}s called with null connection";
LABEL_27:
        v18 = v9;
        v19 = v10;
        goto LABEL_28;
      }
      if (!v20)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v9 = (id)gLogObj;
        v10 = type;
        if (!os_log_type_enabled(v9, type))
          goto LABEL_29;
        *(_DWORD *)buf = 136446210;
        v23 = "tcp_connection_is_cellular";
        v11 = "%{public}s called with null connection, backtrace limit exceeded";
        goto LABEL_27;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v9 = (id)gLogObj;
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (!v15)
        {
LABEL_29:

          if (!v8)
            goto LABEL_19;
          goto LABEL_18;
        }
        *(_DWORD *)buf = 136446210;
        v23 = "tcp_connection_is_cellular";
        v11 = "%{public}s called with null connection, no backtrace";
        v18 = v9;
        v19 = v14;
LABEL_28:
        _os_log_impl(&dword_182FBE000, v18, v19, v11, buf, 0xCu);
        goto LABEL_29;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v23 = "tcp_connection_is_cellular";
        v24 = 2082;
        v25 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
    if (!v8)
    {
LABEL_19:
      v6 = 0;
      goto LABEL_24;
    }
LABEL_18:
    free(v8);
    goto LABEL_19;
  }
  v3 = (void *)*((_QWORD *)v1 + 2);
  if (v3)
  {
    v4 = nw_connection_copy_connected_path(v3);
    v5 = v4;
    if (v4)
    {
      v6 = nw_path_uses_interface_type(v4, nw_interface_type_cellular);
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v16 = (id)gLogObj;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "tcp_connection_is_cellular";
        _os_log_impl(&dword_182FBE000, v16, OS_LOG_TYPE_ERROR, "%{public}s No connected path", buf, 0xCu);
      }

      v6 = 0;
    }

  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "tcp_connection_is_cellular";
      _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s API Misuse: Function must be called after tcp_connection_start", buf, 0xCu);
    }

    v6 = 0;
  }
LABEL_24:

  return v6;
}

id nw_connection_copy_connected_path(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  id v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  _QWORD v13[4];
  os_unfair_lock_s *v14;
  _BYTE *v15;
  char v16;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x3032000000;
    v19 = __Block_byref_object_copy__24122;
    v20 = __Block_byref_object_dispose__24123;
    v21 = 0;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 3221225472;
    v13[2] = __nw_connection_copy_connected_path_block_invoke;
    v13[3] = &unk_1E14ACE40;
    v14 = v1;
    v15 = buf;
    os_unfair_lock_lock(v2 + 34);
    __nw_connection_copy_connected_path_block_invoke((uint64_t)v13);
    os_unfair_lock_unlock(v2 + 34);
    v3 = *(id *)(*(_QWORD *)&buf[8] + 40);

    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_connection_copy_connected_path";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v6, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_path";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_connection_copy_connected_path";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_path";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_connection_copy_connected_path";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void __nw_connection_copy_connected_path_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  int v9;
  const char *v10;
  __int16 v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 32);
  if ((*(_BYTE *)(v2 + 109) & 0x40) != 0)
  {
    v6 = nw_endpoint_handler_copy_connected_path(*(void **)(v2 + 144));
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v8 = *(void **)(v7 + 40);
    *(_QWORD *)(v7 + 40) = v6;

  }
  else
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v3 + 104)))
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v4 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        v5 = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 448);
        v9 = 136446466;
        v10 = "nw_connection_copy_connected_path_block_invoke";
        v11 = 1024;
        v12 = v5;
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s [C%u] Client called nw_connection_copy_connected_path on unconnected nw_connection", (uint8_t *)&v9, 0x12u);
      }

    }
  }
}

uint64_t __nw_endpoint_handler_add_read_request_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t object;
  uint64_t v4;
  NSObject *v6;
  const char *id_string;
  const char *v8;
  nw_endpoint_t v9;
  const char *logging_description;
  const char *v11;
  const char *v12;
  id v13;
  uint64_t v14;
  int v15;
  const char *v16;
  __int16 v17;
  const char *v18;
  __int16 v19;
  const char *v20;
  __int16 v21;
  const char *v22;
  __int16 v23;
  const char *v24;
  __int16 v25;
  const char *v26;
  __int16 v27;
  id v28;
  __int16 v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  object = nw_hash_node_get_object(a2);
  if (!object)
    return 1;
  v4 = object;
  if ((*(_WORD *)(object + 332) & 0x20) == 0)
    return 1;
  if ((nw_endpoint_handler_get_logging_disabled(*(void **)(a1 + 32)) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v6 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
    {
      id_string = nw_endpoint_handler_get_id_string(*(void **)(a1 + 32));
      v8 = nw_endpoint_handler_dry_run_string(*(void **)(a1 + 32));
      v9 = nw_endpoint_handler_copy_endpoint(*(void **)(a1 + 32));
      logging_description = nw_endpoint_get_logging_description(v9);
      v11 = nw_endpoint_handler_state_string(*(void **)(a1 + 32));
      v12 = nw_endpoint_handler_mode_string(*(void **)(a1 + 32));
      v13 = nw_endpoint_handler_copy_current_path(*(void **)(a1 + 32));
      v14 = *(_QWORD *)(a1 + 40);
      v15 = 136448258;
      v16 = "nw_endpoint_handler_add_read_request_block_invoke";
      v17 = 2082;
      v18 = id_string;
      v19 = 2082;
      v20 = v8;
      v21 = 2082;
      v22 = logging_description;
      v23 = 2082;
      v24 = v11;
      v25 = 2082;
      v26 = v12;
      v27 = 2114;
      v28 = v13;
      v29 = 2112;
      v30 = v14;
      v31 = 2048;
      v32 = v4;
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Adding new flow read request %@ to %p", (uint8_t *)&v15, 0x5Cu);

    }
  }
  *(_WORD *)(v4 + 332) &= ~0x20u;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 24) = 1;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = nw_flow_add_read_request(*(void **)(a1 + 32), v4, *(void **)(a1 + 40));
  nw_flow_service_reads(*(NWConcrete_nw_endpoint_handler **)(a1 + 32), *(NWConcrete_nw_endpoint_flow **)(a1 + 48), (nw_flow_protocol *)v4, 0);
  return 0;
}

void sub_1830A3FC8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_flow_add_read_request(void *a1, uint64_t a2, void *a3)
{
  NWConcrete_nw_endpoint_handler *v5;
  uint64_t mode;
  NWConcrete_nw_endpoint_handler *v7;
  char v8;
  NSObject *v9;
  NWConcrete_nw_endpoint_handler *v10;
  NWConcrete_nw_endpoint_handler *v11;
  char v12;
  const char *v13;
  const char *logging_description;
  unsigned int *v15;
  unsigned int *v16;
  uint64_t v17;
  const char *v18;
  id v19;
  const char *v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  const char *v28;
  os_log_type_t v29;
  const char *v30;
  void **v31;
  void **v32;
  const char *v33;
  const char *v34;
  void **v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  NSObject *v41;
  size_t size;
  NWConcrete_nw_endpoint_handler *v43;
  int state;
  NWConcrete_nw_endpoint_handler *v45;
  BOOL v46;
  NSObject *v47;
  char *v48;
  char *v49;
  _BOOL4 v50;
  const char *v51;
  nw_endpoint_t v52;
  const char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  const char *v57;
  _BOOL8 request_list_append;
  void *v59;
  void *v60;
  void **v61;
  void **v62;
  const char *v63;
  NWConcrete_nw_endpoint_handler *v64;
  _BOOL4 v65;
  NSObject *v66;
  const char *v67;
  const char *v68;
  nw_endpoint_t v69;
  const char *v70;
  const char *v71;
  const char *v72;
  id v73;
  _DWORD *v74;
  void *v75;
  id v76;
  void *v77;
  NSObject *request_receive;
  void *v79;
  int v80;
  int v81;
  void *v82;
  NSObject *v83;
  id v84;
  id v85;
  _BOOL8 v86;
  void *v87;
  void *v88;
  _BYTE *request_list_report;
  void *v90;
  _BOOL8 v91;
  void **v92;
  id v93;
  void *v94;
  os_log_type_t v95;
  void *v96;
  os_log_type_t v97;
  char *backtrace_string;
  os_log_type_t v99;
  _BOOL4 v100;
  const char *v101;
  const char *v102;
  const char *v103;
  const char *v104;
  id v105;
  os_log_type_t v106;
  _BOOL4 v107;
  void *v108;
  char *v109;
  NSObject *v110;
  os_log_type_t v111;
  os_log_type_t v112;
  char *v113;
  os_log_type_t v114;
  _BOOL4 v115;
  os_log_type_t v116;
  os_log_type_t v117;
  NSObject *v118;
  const char *v119;
  const char *v120;
  const char *v121;
  id v122;
  size_t v123;
  NWConcrete_nw_endpoint_handler *v124;
  id v125;
  NWConcrete_nw_endpoint_handler *v126;
  NWConcrete_nw_endpoint_handler *v127;
  _BOOL4 v128;
  const char *v129;
  nw_endpoint_t v130;
  const char *v131;
  unsigned int *v132;
  unsigned int *v133;
  uint64_t v134;
  const char *v135;
  void **v136;
  const char *v137;
  NWConcrete_nw_endpoint_handler *v138;
  nw_endpoint_t v139;
  NWConcrete_nw_endpoint_handler *v140;
  unsigned int *v141;
  const char *v142;
  NWConcrete_nw_endpoint_handler *v143;
  id v144;
  void **v145;
  id v146;
  void *v147;
  NWConcrete_nw_endpoint_handler *v148;
  const char *v149;
  unsigned int *v150;
  NWConcrete_nw_endpoint_handler *v151;
  nw_endpoint_t v152;
  char *v153;
  char *v154;
  NSObject *v155;
  os_log_type_t v156;
  id *v157;
  id *v158;
  _BOOL4 v159;
  const char *v160;
  nw_endpoint_t v161;
  const char *v162;
  id *v163;
  id *v164;
  uint64_t v165;
  const char *v166;
  const char *v167;
  char *v168;
  NSObject *v169;
  os_log_type_t v170;
  const char *v171;
  const char *v172;
  const char *v173;
  const char *v174;
  const char *v175;
  id v176;
  os_log_type_t v177;
  const char *v178;
  const char *v179;
  nw_endpoint_t v180;
  const char *v181;
  const char *v182;
  const char *v183;
  id v184;
  void **v185;
  const char *v186;
  os_log_type_t v187;
  const char *v188;
  const char *v189;
  nw_endpoint_t v190;
  const char *v191;
  const char *v192;
  const char *v193;
  id v194;
  void **v195;
  id v196;
  NSObject *v198;
  const char *v199;
  const char *v200;
  const char *v201;
  id v202;
  NSObject *v203;
  const char *v204;
  const char *v205;
  id v206;
  uint64_t v207;
  NSObject *v208;
  const char *v209;
  const char *v210;
  id v211;
  os_unfair_lock_s *lock;
  const char *locka;
  const char *lockb;
  const char *v215;
  const char *v216;
  const char *v217;
  const char *v218;
  const char *v219;
  const char *id_string;
  const char *v221;
  id *v222;
  const char *v223;
  const char *v224;
  const char *v225;
  nw_endpoint_t v226;
  nw_endpoint_t v227;
  nw_endpoint_t v228;
  const char *v229;
  const char *v230;
  nw_endpoint_t v231;
  nw_endpoint_t v232;
  nw_endpoint_t v233;
  void *v234;
  const char *v235;
  nw_endpoint_t v236;
  const char *v237;
  NWConcrete_nw_endpoint_mode_handler *v238;
  char v239;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v242;
  __int16 v243;
  char *id_str;
  __int16 v245;
  const char *v246;
  __int16 v247;
  void *v248;
  __int16 v249;
  const char *v250;
  __int16 v251;
  const char *v252;
  __int16 v253;
  id v254;
  __int16 v255;
  uint64_t next_max_size;
  __int16 v257;
  uint64_t maximum_datagram_count;
  uint64_t v259;

  v259 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v94 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v242 = "nw_flow_add_read_request";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v239 = 0;
    if (!__nwlog_fault(v21, &type, &v239))
      goto LABEL_119;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v95 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v242 = "nw_flow_add_read_request";
        _os_log_impl(&dword_182FBE000, v22, v95, "%{public}s called with null handler", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (!v239)
    {
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v112 = type;
      if (os_log_type_enabled(v22, type))
      {
        *(_DWORD *)buf = 136446210;
        v242 = "nw_flow_add_read_request";
        _os_log_impl(&dword_182FBE000, v22, v112, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_118;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v22 = objc_claimAutoreleasedReturnValue();
    v99 = type;
    v100 = os_log_type_enabled(v22, type);
    if (!backtrace_string)
    {
      if (v100)
      {
        *(_DWORD *)buf = 136446210;
        v242 = "nw_flow_add_read_request";
        _os_log_impl(&dword_182FBE000, v22, v99, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
      goto LABEL_118;
    }
    if (v100)
    {
      *(_DWORD *)buf = 136446466;
      v242 = "nw_flow_add_read_request";
      v243 = 2082;
      id_str = backtrace_string;
      _os_log_impl(&dword_182FBE000, v22, v99, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_157;
  }
  v5 = a1;
  mode = v5->mode;

  if ((_DWORD)mode == 2)
  {
    if (a3)
    {
      if (_nw_signposts_once != -1)
        dispatch_once(&_nw_signposts_once, &__block_literal_global_89);
      if (_nw_signposts_enabled && kdebug_is_enabled())
        kdebug_trace();
      v234 = a3;
      v238 = nw_endpoint_handler_copy_flow(v5);
      if ((*((_BYTE *)v238 + 34) & 8) != 0)
      {
        if (!nw_endpoint_handler_get_minimize_logging(v5))
        {
          v7 = v5;
          v8 = *((_BYTE *)v7 + 268);

          if ((v8 & 0x20) != 0)
            goto LABEL_59;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v9 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            v10 = v7;

            v11 = v10;
            v12 = *((_BYTE *)v7 + 268);

            if ((v12 & 1) != 0)
              v13 = "dry-run ";
            else
              v13 = "";
            v226 = nw_endpoint_handler_copy_endpoint(v11);
            logging_description = nw_endpoint_get_logging_description(v226);
            v15 = v11;
            v16 = v15;
            v17 = v15[30];
            if (v17 > 5)
              v18 = "unknown-state";
            else
              v18 = off_1E149FC48[v17];
            v219 = v18;

            v31 = v16;
            v32 = v31;
            v33 = "path";
            switch(v5->mode)
            {
              case 0:
                break;
              case 1:
                v33 = "resolver";
                break;
              case 2:
                v33 = nw_endpoint_flow_mode_string(v31[31]);
                break;
              case 3:
                v33 = "proxy";
                break;
              case 4:
                v33 = "fallback";
                break;
              case 5:
                v33 = "transform";
                break;
              default:
                v33 = "unknown-mode";
                break;
            }

            v35 = v32;
            os_unfair_lock_lock((os_unfair_lock_t)v35 + 28);
            v36 = v35[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v35 + 28);

            v37 = v36;
            *(_DWORD *)buf = 136448258;
            v242 = "nw_flow_add_read_request";
            v243 = 2082;
            id_str = v10->id_str;
            v245 = 2082;
            v246 = v13;
            v247 = 2082;
            v248 = (void *)logging_description;
            v249 = 2082;
            v250 = v219;
            v251 = 2082;
            v252 = v33;
            v253 = 2114;
            v254 = v37;
            v255 = 2048;
            next_max_size = nw_read_request_get_next_max_size(v234);
            v257 = 2048;
            maximum_datagram_count = nw_read_request_get_maximum_datagram_count(v234);
            _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Read request submitted: %zu bytes, %zu datagrams", buf, 0x5Cu);

          }
          goto LABEL_58;
        }
        if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v9 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
          {
            id_string = nw_endpoint_handler_get_id_string(v5);
            v101 = nw_endpoint_handler_dry_run_string(v5);
            v227 = nw_endpoint_handler_copy_endpoint(v5);
            v102 = nw_endpoint_get_logging_description(v227);
            v103 = nw_endpoint_handler_state_string(v5);
            v104 = nw_endpoint_handler_mode_string(v5);
            v105 = nw_endpoint_handler_copy_current_path(v5);
            *(_DWORD *)buf = 136448258;
            v242 = "nw_flow_add_read_request";
            v243 = 2082;
            id_str = (char *)id_string;
            v245 = 2082;
            v246 = v101;
            v247 = 2082;
            v248 = (void *)v102;
            v249 = 2082;
            v250 = v103;
            v251 = 2082;
            v252 = v104;
            v253 = 2114;
            v254 = v105;
            v255 = 2048;
            next_max_size = nw_read_request_get_next_max_size(v234);
            v257 = 2048;
            maximum_datagram_count = nw_read_request_get_maximum_datagram_count(v234);
            _os_log_impl(&dword_182FBE000, v9, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Read request submitted: %zu bytes, %zu datagrams", buf, 0x5Cu);

          }
LABEL_58:

        }
      }
LABEL_59:
      if (!nw_flow_has_final_read((nw_flow_protocol *)a2))
      {
        v43 = v5;
        state = v43->state;

        if ((state & 0xFFFFFFFE) == 4)
        {
          v45 = v43;
          v46 = (*((_BYTE *)v45 + 268) & 0x20) == 0;

          if (v46)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v47 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEBUG))
            {
              v48 = v45;

              v49 = v48;
              v50 = (*((_BYTE *)v45 + 268) & 1) == 0;

              if (v50)
                v51 = "";
              else
                v51 = "dry-run ";
              v52 = nw_endpoint_handler_copy_endpoint(v49);
              v53 = nw_endpoint_get_logging_description(v52);
              v54 = v49;
              v55 = v54;
              v56 = v43->state;
              if (v56 > 5)
                v57 = "unknown-state";
              else
                v57 = off_1E149FC48[v56];

              v61 = v55;
              v62 = v61;
              v63 = "path";
              switch(v5->mode)
              {
                case 0:
                  break;
                case 1:
                  v63 = "resolver";
                  break;
                case 2:
                  v63 = nw_endpoint_flow_mode_string(v61[31]);
                  break;
                case 3:
                  v63 = "proxy";
                  break;
                case 4:
                  v63 = "fallback";
                  break;
                case 5:
                  v63 = "transform";
                  break;
                default:
                  v63 = "unknown-mode";
                  break;
              }

              v92 = v62;
              os_unfair_lock_lock((os_unfair_lock_t)v92 + 28);
              v93 = v92[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v92 + 28);

              *(_DWORD *)buf = 136447746;
              v242 = "nw_flow_add_read_request";
              v243 = 2082;
              id_str = v48 + 168;
              v245 = 2082;
              v246 = v51;
              v247 = 2082;
              v248 = (void *)v53;
              v249 = 2082;
              v250 = v57;
              v251 = 2082;
              v252 = v63;
              v253 = 2114;
              v254 = v93;
              _os_log_impl(&dword_182FBE000, v47, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] cannot accept read requests", buf, 0x48u);

            }
          }
        }
        else
        {
          if ((*(_WORD *)(a2 + 332) & 0x80) == 0)
          {
            request_list_append = nw_read_request_list_append(*(void **)(a2 + 216), v234);
            v59 = *(void **)(a2 + 216);
            *(_QWORD *)(a2 + 216) = request_list_append;

LABEL_115:
            v91 = 1;
LABEL_250:

            return v91;
          }
          v60 = *(void **)(a2 + 320);
          if (v60)
          {
            nw_read_request_report_error_with_override(v234, 0, v60);
          }
          else
          {
            v64 = v43;
            v65 = (*((_BYTE *)v64 + 268) & 0x20) == 0;

            if (v65)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v66 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
              {
                v67 = nw_endpoint_handler_get_id_string(v64);
                v68 = nw_endpoint_handler_dry_run_string(v64);
                v69 = nw_endpoint_handler_copy_endpoint(v64);
                v70 = nw_endpoint_get_logging_description(v69);
                v71 = nw_endpoint_handler_state_string(v64);
                v72 = nw_endpoint_handler_mode_string(v64);
                v73 = nw_endpoint_handler_copy_current_path(v64);
                *(_DWORD *)buf = 136447746;
                v242 = "nw_flow_add_read_request";
                v243 = 2082;
                id_str = (char *)v67;
                v245 = 2082;
                v246 = v68;
                v247 = 2082;
                v248 = (void *)v70;
                v249 = 2082;
                v250 = v71;
                v251 = 2082;
                v252 = v72;
                v253 = 2114;
                v254 = v73;
                _os_log_impl(&dword_182FBE000, v66, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already delivered final read, cannot accept read requests", buf, 0x48u);

              }
            }
            v74 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 96);
            nw_read_request_report_error_with_override(v234, 0, v74);

          }
        }
LABEL_249:
        v91 = 0;
        goto LABEL_250;
      }
      if (a2)
      {
        v38 = *(_QWORD *)(a2 + 312);
        if (v38)
        {
          if (*(_QWORD *)(v38 + 16) != *(_QWORD *)(v38 + 24))
          {
            nw_array_get_object_at_index(v38, 0);
            v39 = objc_claimAutoreleasedReturnValue();

            if (v39)
            {
              if (!nw_flow_has_final_read((nw_flow_protocol *)a2))
              {
                v40 = *(void **)(v39 + 16);
                if (v40
                  && v40 != &__block_literal_global_3_41726
                  && v40 != &__block_literal_global_41718
                  && v40 != &__block_literal_global_4
                  && v40 != &__block_literal_global_5_41741)
                {
                  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v203 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v203, OS_LOG_TYPE_DEBUG))
                    {
                      v224 = nw_endpoint_handler_get_id_string(v5);
                      v217 = nw_endpoint_handler_dry_run_string(v5);
                      v232 = nw_endpoint_handler_copy_endpoint(v5);
                      locka = nw_endpoint_get_logging_description(v232);
                      v204 = nw_endpoint_handler_state_string(v5);
                      v205 = nw_endpoint_handler_mode_string(v5);
                      v206 = nw_endpoint_handler_copy_current_path(v5);
                      v207 = *(_QWORD *)(v39 + 16);
                      *(_DWORD *)buf = 136448002;
                      v242 = "nw_flow_add_read_request";
                      v243 = 2082;
                      id_str = (char *)v224;
                      v245 = 2082;
                      v246 = v217;
                      v247 = 2082;
                      v248 = (void *)locka;
                      v249 = 2082;
                      v250 = v204;
                      v251 = 2082;
                      v252 = v205;
                      v253 = 2114;
                      v254 = v206;
                      v255 = 2048;
                      next_max_size = v207;
                      _os_log_impl(&dword_182FBE000, v203, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Setting final on non-static context %p", buf, 0x52u);

                    }
                  }
                  nw_content_context_set_is_final(*(nw_content_context_t *)(v39 + 16), 1);
                }
                if (!*(_BYTE *)(v39 + 25) && *(_BYTE *)(v39 + 24) && !*(_QWORD *)(v39 + 32))
                {
                  if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
                  {
                    if (__nwlog_connection_log::onceToken != -1)
                      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                    v208 = (id)gconnectionLogObj;
                    if (os_log_type_enabled(v208, OS_LOG_TYPE_DEBUG))
                    {
                      v225 = nw_endpoint_handler_get_id_string(v5);
                      v218 = nw_endpoint_handler_dry_run_string(v5);
                      v233 = nw_endpoint_handler_copy_endpoint(v5);
                      lockb = nw_endpoint_get_logging_description(v233);
                      v209 = nw_endpoint_handler_state_string(v5);
                      v210 = nw_endpoint_handler_mode_string(v5);
                      v211 = nw_endpoint_handler_copy_current_path(v5);
                      *(_DWORD *)buf = 136447746;
                      v242 = "nw_flow_add_read_request";
                      v243 = 2082;
                      id_str = (char *)v225;
                      v245 = 2082;
                      v246 = v218;
                      v247 = 2082;
                      v248 = (void *)lockb;
                      v249 = 2082;
                      v250 = v209;
                      v251 = 2082;
                      v252 = v210;
                      v253 = 2114;
                      v254 = v211;
                      _os_log_impl(&dword_182FBE000, v208, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Setting is_complete on last final read", buf, 0x48u);

                    }
                  }
                  *(_BYTE *)(v39 + 25) = 1;
                }
              }
              v41 = *(NSObject **)(v39 + 8);
              if (v41)
                size = dispatch_data_get_size(v41);
              else
                size = 0;
              v75 = *(void **)(v39 + 16);
              if (!v75)
                v75 = &__block_literal_global_3_41726;
              v76 = v75;
              v77 = v234;
              request_receive = nw_read_request_receive(v234, *(void **)(v39 + 8), v76, *(unsigned __int8 *)(v39 + 25), *(void **)(v39 + 32));
              if (size)
              {
                *((_QWORD *)v238 + 134) += size;
                if ((*((_BYTE *)v238 + 34) & 0x20) == 0)
                  nw_context_count_input_bytes(*(void **)(a2 + 184), size);
              }
              if (request_receive)
              {
                if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v118 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v118, OS_LOG_TYPE_DEBUG))
                  {
                    v221 = nw_endpoint_handler_get_id_string(v5);
                    v215 = nw_endpoint_handler_dry_run_string(v5);
                    v228 = nw_endpoint_handler_copy_endpoint(v5);
                    v119 = nw_endpoint_get_logging_description(v228);
                    v120 = nw_endpoint_handler_state_string(v5);
                    v121 = nw_endpoint_handler_mode_string(v5);
                    v122 = nw_endpoint_handler_copy_current_path(v5);
                    v123 = dispatch_data_get_size(request_receive);
                    *(_DWORD *)buf = 136448258;
                    v242 = "nw_flow_add_read_request";
                    v243 = 2082;
                    id_str = (char *)v221;
                    v245 = 2082;
                    v246 = v215;
                    v247 = 2082;
                    v248 = (void *)v119;
                    v249 = 2082;
                    v250 = v120;
                    v251 = 2082;
                    v252 = v121;
                    v253 = 2114;
                    v254 = v122;
                    v255 = 2048;
                    next_max_size = size - v123;
                    v257 = 2048;
                    maximum_datagram_count = size;
                    _os_log_impl(&dword_182FBE000, v118, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Consumed %zu/%zu final bytes", buf, 0x5Cu);

                  }
                }
                v79 = *(void **)(v39 + 16);
                v80 = *(unsigned __int8 *)(v39 + 24);
                v81 = *(unsigned __int8 *)(v39 + 25);
                v82 = *(void **)(v39 + 32);
                v83 = request_receive;
                v84 = v79;
                v85 = v82;
                if (!*(_QWORD *)(a2 + 312))
                {
                  v86 = nw_array_create();
                  v87 = *(void **)(a2 + 312);
                  *(_QWORD *)(a2 + 312) = v86;

                }
                nw_flow_final_read_create(v83, v84, v80 != 0, v81 != 0, v85);
                v88 = (void *)objc_claimAutoreleasedReturnValue();
                nw_array_prepend(*(_QWORD *)(a2 + 312), v88);

                v77 = v234;
              }
              else
              {
                if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v198 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v198, OS_LOG_TYPE_DEBUG))
                  {
                    v223 = nw_endpoint_handler_get_id_string(v5);
                    v216 = nw_endpoint_handler_dry_run_string(v5);
                    v231 = nw_endpoint_handler_copy_endpoint(v5);
                    v199 = nw_endpoint_get_logging_description(v231);
                    v200 = nw_endpoint_handler_state_string(v5);
                    v201 = nw_endpoint_handler_mode_string(v5);
                    v202 = nw_endpoint_handler_copy_current_path(v5);
                    *(_DWORD *)buf = 136448002;
                    v242 = "nw_flow_add_read_request";
                    v243 = 2082;
                    id_str = (char *)v223;
                    v245 = 2082;
                    v246 = v216;
                    v247 = 2082;
                    v248 = (void *)v199;
                    v249 = 2082;
                    v250 = v200;
                    v251 = 2082;
                    v252 = v201;
                    v253 = 2114;
                    v254 = v202;
                    v255 = 2048;
                    next_max_size = size;
                    _os_log_impl(&dword_182FBE000, v198, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Consumed all %zu final bytes", buf, 0x52u);

                  }
                  v77 = v234;
                }
                *(_WORD *)(a2 + 332) |= 0x80u;
              }
              request_list_report = nw_read_request_list_report(v77);
              v90 = request_list_report;
              if (request_list_report)
                nw_read_request_fail(request_list_report, 57);

              goto LABEL_115;
            }
          }
        }
LABEL_194:
        v124 = v5;
        v91 = (*((_BYTE *)v124 + 268) & 0x20) == 0;

        if (!v91)
          goto LABEL_250;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v125 = (id)gconnectionLogObj;
        v126 = v124;

        v127 = v126;
        v128 = (*((_BYTE *)v124 + 268) & 1) == 0;

        if (v128)
          v129 = "";
        else
          v129 = "dry-run ";
        v130 = nw_endpoint_handler_copy_endpoint(v127);
        v131 = nw_endpoint_get_logging_description(v130);
        v132 = v127;
        v133 = v132;
        v134 = v132[30];
        if (v134 > 5)
          v135 = "unknown-state";
        else
          v135 = off_1E149FC48[v134];
        v235 = v135;

        v136 = v133;
        v137 = "path";
        switch(v5->mode)
        {
          case 0:
            break;
          case 1:
            v137 = "resolver";
            break;
          case 2:
            v137 = nw_endpoint_flow_mode_string(v136[31]);
            break;
          case 3:
            v137 = "proxy";
            break;
          case 4:
            v137 = "fallback";
            break;
          case 5:
            v137 = "transform";
            break;
          default:
            v137 = "unknown-mode";
            break;
        }
        v229 = v137;

        v138 = v126;
        v139 = v130;
        v140 = v124;
        v141 = v133;
        v142 = v129;
        v143 = v5;
        v144 = v125;
        v145 = v136;
        os_unfair_lock_lock((os_unfair_lock_t)v145 + 28);
        lock = (os_unfair_lock_s *)(v145 + 14);
        v146 = v145[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v145 + 28);
        v222 = v145;

        v147 = v144;
        v148 = v143;
        v149 = v142;
        v150 = v141;
        v151 = v140;
        v152 = v139;
        v153 = v138->id_str;
        *(_DWORD *)buf = 136447746;
        v242 = "nw_flow_add_read_request";
        v243 = 2082;
        id_str = v138->id_str;
        v245 = 2082;
        v246 = v149;
        v247 = 2082;
        v248 = (void *)v131;
        v249 = 2082;
        v250 = v235;
        v251 = 2082;
        v252 = v229;
        v253 = 2114;
        v254 = v146;
        v154 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v239 = 0;
        if (!__nwlog_fault(v154, &type, &v239))
          goto LABEL_247;
        if (type == OS_LOG_TYPE_FAULT)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v155 = (id)gconnectionLogObj;
          v156 = type;
          if (os_log_type_enabled(v155, type))
          {
            v157 = v222;

            v158 = v157;
            v159 = (*((_BYTE *)v151 + 268) & 1) == 0;

            if (v159)
              v160 = "";
            else
              v160 = "dry-run ";
            v161 = nw_endpoint_handler_copy_endpoint(v158);
            v162 = nw_endpoint_get_logging_description(v161);
            v163 = v158;
            v164 = v163;
            v165 = v150[30];
            if (v165 > 5)
              v166 = "unknown-state";
            else
              v166 = off_1E149FC48[v165];
            v237 = v166;

            v185 = v164;
            v186 = "path";
            switch(v148->mode)
            {
              case 0:
                break;
              case 1:
                v186 = "resolver";
                break;
              case 2:
                v186 = nw_endpoint_flow_mode_string(v185[31]);
                break;
              case 3:
                v186 = "proxy";
                break;
              case 4:
                v186 = "fallback";
                break;
              case 5:
                v186 = "transform";
                break;
              default:
                v186 = "unknown-mode";
                break;
            }
            v230 = v186;

            v195 = v185;
            os_unfair_lock_lock(lock);
            v196 = v222[8];
            os_unfair_lock_unlock(lock);

            *(_DWORD *)buf = 136447746;
            v242 = "nw_flow_add_read_request";
            v243 = 2082;
            id_str = v153;
            v245 = 2082;
            v246 = v160;
            v247 = 2082;
            v248 = (void *)v162;
            v249 = 2082;
            v250 = v237;
            v251 = 2082;
            v252 = v230;
            v253 = 2114;
            v254 = v196;
            _os_log_impl(&dword_182FBE000, v155, v156, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No final data returned from nw_flow_remove_next_final_read", buf, 0x48u);

          }
        }
        else if (v239)
        {
          v167 = __nw_create_backtrace_string();
          if (v167)
          {
            v168 = (char *)v167;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v169 = (id)gconnectionLogObj;
            v170 = type;
            if (os_log_type_enabled(v169, type))
            {
              v171 = nw_endpoint_handler_get_id_string(v222);
              v172 = nw_endpoint_handler_dry_run_string(v222);
              v236 = nw_endpoint_handler_copy_endpoint(v222);
              v173 = nw_endpoint_get_logging_description(v236);
              v174 = nw_endpoint_handler_state_string(v222);
              v175 = nw_endpoint_handler_mode_string(v222);
              v176 = nw_endpoint_handler_copy_current_path(v222);
              *(_DWORD *)buf = 136448002;
              v242 = "nw_flow_add_read_request";
              v243 = 2082;
              id_str = (char *)v171;
              v245 = 2082;
              v246 = v172;
              v247 = 2082;
              v248 = (void *)v173;
              v249 = 2082;
              v250 = v174;
              v251 = 2082;
              v252 = v175;
              v253 = 2114;
              v254 = v176;
              v255 = 2082;
              next_max_size = (uint64_t)v168;
              _os_log_impl(&dword_182FBE000, v169, v170, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No final data returned from nw_flow_remove_next_final_read, dumping backtrace:%{public}s", buf, 0x52u);

            }
            free(v168);
            goto LABEL_247;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v155 = (id)gconnectionLogObj;
          v187 = type;
          if (os_log_type_enabled(v155, type))
          {
            v188 = nw_endpoint_handler_get_id_string(v222);
            v189 = nw_endpoint_handler_dry_run_string(v222);
            v190 = nw_endpoint_handler_copy_endpoint(v222);
            v191 = nw_endpoint_get_logging_description(v190);
            v192 = nw_endpoint_handler_state_string(v222);
            v193 = nw_endpoint_handler_mode_string(v222);
            v194 = nw_endpoint_handler_copy_current_path(v222);
            *(_DWORD *)buf = 136447746;
            v242 = "nw_flow_add_read_request";
            v243 = 2082;
            id_str = (char *)v188;
            v245 = 2082;
            v246 = v189;
            v247 = 2082;
            v248 = (void *)v191;
            v249 = 2082;
            v250 = v192;
            v251 = 2082;
            v252 = v193;
            v253 = 2114;
            v254 = v194;
            _os_log_impl(&dword_182FBE000, v155, v187, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No final data returned from nw_flow_remove_next_final_read, no backtrace", buf, 0x48u);

          }
        }
        else
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v155 = (id)gconnectionLogObj;
          v177 = type;
          if (os_log_type_enabled(v155, type))
          {
            v178 = nw_endpoint_handler_get_id_string(v222);
            v179 = nw_endpoint_handler_dry_run_string(v222);
            v180 = nw_endpoint_handler_copy_endpoint(v222);
            v181 = nw_endpoint_get_logging_description(v180);
            v182 = nw_endpoint_handler_state_string(v222);
            v183 = nw_endpoint_handler_mode_string(v222);
            v184 = nw_endpoint_handler_copy_current_path(v222);
            *(_DWORD *)buf = 136447746;
            v242 = "nw_flow_add_read_request";
            v243 = 2082;
            id_str = (char *)v178;
            v245 = 2082;
            v246 = v179;
            v247 = 2082;
            v248 = (void *)v181;
            v249 = 2082;
            v250 = v182;
            v251 = 2082;
            v252 = v183;
            v253 = 2114;
            v254 = v184;
            _os_log_impl(&dword_182FBE000, v155, v177, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No final data returned from nw_flow_remove_next_final_read, backtrace limit exceeded", buf, 0x48u);

          }
        }

LABEL_247:
        if (v154)
          free(v154);
        goto LABEL_249;
      }
      __nwlog_obj();
      v108 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v242 = "nw_flow_remove_next_final_read";
      v109 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v239 = 0;
      if (__nwlog_fault(v109, &type, &v239))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v111 = type;
          if (os_log_type_enabled(v110, type))
          {
            *(_DWORD *)buf = 136446210;
            v242 = "nw_flow_remove_next_final_read";
            _os_log_impl(&dword_182FBE000, v110, v111, "%{public}s called with null flow_protocol", buf, 0xCu);
          }
        }
        else if (v239)
        {
          v113 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v114 = type;
          v115 = os_log_type_enabled(v110, type);
          if (v113)
          {
            if (v115)
            {
              *(_DWORD *)buf = 136446466;
              v242 = "nw_flow_remove_next_final_read";
              v243 = 2082;
              id_str = v113;
              _os_log_impl(&dword_182FBE000, v110, v114, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v113);
            goto LABEL_192;
          }
          if (v115)
          {
            *(_DWORD *)buf = 136446210;
            v242 = "nw_flow_remove_next_final_read";
            _os_log_impl(&dword_182FBE000, v110, v114, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v110 = objc_claimAutoreleasedReturnValue();
          v117 = type;
          if (os_log_type_enabled(v110, type))
          {
            *(_DWORD *)buf = 136446210;
            v242 = "nw_flow_remove_next_final_read";
            _os_log_impl(&dword_182FBE000, v110, v117, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_192:
      if (v109)
        free(v109);
      goto LABEL_194;
    }
    __nwlog_obj();
    v96 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v242 = "nw_flow_add_read_request";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v239 = 0;
    if (__nwlog_fault(v21, &type, &v239))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v97 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v242 = "nw_flow_add_read_request";
          _os_log_impl(&dword_182FBE000, v22, v97, "%{public}s called with null read_request", buf, 0xCu);
        }
LABEL_118:

        goto LABEL_119;
      }
      if (!v239)
      {
        __nwlog_obj();
        v22 = objc_claimAutoreleasedReturnValue();
        v116 = type;
        if (os_log_type_enabled(v22, type))
        {
          *(_DWORD *)buf = 136446210;
          v242 = "nw_flow_add_read_request";
          _os_log_impl(&dword_182FBE000, v22, v116, "%{public}s called with null read_request, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_118;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v22 = objc_claimAutoreleasedReturnValue();
      v106 = type;
      v107 = os_log_type_enabled(v22, type);
      if (!backtrace_string)
      {
        if (v107)
        {
          *(_DWORD *)buf = 136446210;
          v242 = "nw_flow_add_read_request";
          _os_log_impl(&dword_182FBE000, v22, v106, "%{public}s called with null read_request, no backtrace", buf, 0xCu);
        }
        goto LABEL_118;
      }
      if (v107)
      {
        *(_DWORD *)buf = 136446466;
        v242 = "nw_flow_add_read_request";
        v243 = 2082;
        id_str = backtrace_string;
        _os_log_impl(&dword_182FBE000, v22, v106, "%{public}s called with null read_request, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_157:

      free(backtrace_string);
    }
  }
  else
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = (id)gLogObj;
    if (mode > 5)
      v20 = "unknown-mode";
    else
      v20 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v242 = "nw_flow_add_read_request";
    v243 = 2082;
    id_str = (char *)v20;
    v245 = 2082;
    v246 = "flow";
    v21 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v239 = 0;
    if (__nwlog_fault(v21, &type, &v239))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v23 = type;
        if (os_log_type_enabled(v22, type))
        {
          if (mode > 5)
            v24 = "unknown-mode";
          else
            v24 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v242 = "nw_flow_add_read_request";
          v243 = 2082;
          id_str = (char *)v24;
          v245 = 2082;
          v246 = "flow";
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v239)
      {
        v25 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v26 = type;
        v27 = os_log_type_enabled(v22, type);
        if (v25)
        {
          if (v27)
          {
            if (mode > 5)
              v28 = "unknown-mode";
            else
              v28 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            v242 = "nw_flow_add_read_request";
            v243 = 2082;
            id_str = (char *)v28;
            v245 = 2082;
            v246 = "flow";
            v247 = 2082;
            v248 = v25;
            _os_log_impl(&dword_182FBE000, v22, v26, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v25);
          if (!v21)
            return 0;
          goto LABEL_120;
        }
        if (v27)
        {
          if (mode > 5)
            v34 = "unknown-mode";
          else
            v34 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v242 = "nw_flow_add_read_request";
          v243 = 2082;
          id_str = (char *)v34;
          v245 = 2082;
          v246 = "flow";
          _os_log_impl(&dword_182FBE000, v22, v26, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v22 = (id)gLogObj;
        v29 = type;
        if (os_log_type_enabled(v22, type))
        {
          if (mode > 5)
            v30 = "unknown-mode";
          else
            v30 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v242 = "nw_flow_add_read_request";
          v243 = 2082;
          id_str = (char *)v30;
          v245 = 2082;
          v246 = "flow";
          _os_log_impl(&dword_182FBE000, v22, v29, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
      goto LABEL_118;
    }
  }
LABEL_119:
  if (v21)
LABEL_120:
    free(v21);
  return 0;
}

void sub_1830A61D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

BOOL nw_read_request_list_append(void *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  id *v7;
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  void *v15;
  _BOOL8 result;
  NSObject *v17;
  void *v18;
  _QWORD *v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  void *v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  char v30;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v33;
  __int16 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v4)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v33 = "nw_read_request_list_append";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v30 = 0;
    if (__nwlog_fault(v11, &type, &v30))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_read_request_list_append";
          _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null request", buf, 0xCu);
        }
      }
      else if (v30)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v12, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            v33 = "nw_read_request_list_append";
            v34 = 2082;
            v35 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_36;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_read_request_list_append";
          _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v33 = "nw_read_request_list_append";
          _os_log_impl(&dword_182FBE000, v12, v29, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_36:
    if (v11)
      free(v11);
    v19 = 0;
    goto LABEL_20;
  }
  if (!v4[1])
  {
    if (!v4[2])
      goto LABEL_4;
LABEL_16:
    __nwlog_obj();
    v17 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v17, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v33 = "nw_read_request_list_append";
    v18 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v18);
    if (result)
      goto LABEL_39;
    free(v18);
    if (v3)
      goto LABEL_5;
LABEL_18:
    v9 = v5;
    v3 = v9;
    if (v5[2])
      goto LABEL_19;
    goto LABEL_8;
  }
  __nwlog_obj();
  v14 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v14, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v33 = "nw_read_request_list_append";
  v15 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v15);
  if (result)
    goto LABEL_39;
  free(v15);
  if (v5[2])
    goto LABEL_16;
LABEL_4:
  if (!v3)
    goto LABEL_18;
LABEL_5:
  v6 = v3[2];
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = (id *)(v6 + 8);
    if (!v8)
    {
LABEL_7:
      objc_storeStrong(v7, a2);
      v9 = 0;
      v3[2] = v5;
LABEL_8:
      v5[2] = v9;
      v9 = v3;
LABEL_19:
      v3 = v9;
      v19 = v3;
LABEL_20:

      return (BOOL)v19;
    }
  }
  else
  {
    __nwlog_obj();
    v20 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v20, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v33 = "nw_read_request_list_append";
    v21 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v21);
    if (result)
      goto LABEL_39;
    free(v21);
    v22 = v3[2];
    v23 = *(_QWORD *)(v22 + 8);
    v7 = (id *)(v22 + 8);
    if (!v23)
      goto LABEL_7;
  }
  __nwlog_obj();
  v24 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v33 = "nw_read_request_list_append";
  v25 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v25);
  if (!result)
  {
    free(v25);
    goto LABEL_7;
  }
LABEL_39:
  __break(1u);
  return result;
}

BOOL nw_flow_has_final_read(nw_flow_protocol *a1)
{
  OS_nw_array *final_read_list;
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_flow_has_final_read";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v4, &type, &v10))
      goto LABEL_19;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_flow_has_final_read";
        v7 = "%{public}s called with null flow_protocol";
LABEL_17:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            v13 = "nw_flow_has_final_read";
            v14 = 2082;
            v15 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_19;
        }
        if (!v9)
          goto LABEL_18;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_flow_has_final_read";
        v7 = "%{public}s called with null flow_protocol, no backtrace";
        goto LABEL_17;
      }
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_flow_has_final_read";
        v7 = "%{public}s called with null flow_protocol, backtrace limit exceeded";
        goto LABEL_17;
      }
    }
LABEL_18:

LABEL_19:
    if (v4)
      free(v4);
    return 0;
  }
  final_read_list = a1->final_read_list;
  if (final_read_list)
    return final_read_list[2].super.super.isa != final_read_list[3].super.super.isa;
  return 0;
}

void nw_connection_end_activity(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v23 = "nw_connection_end_activity";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v20 = 0;
    if (!__nwlog_fault(v7, &type, &v20))
      goto LABEL_39;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_end_activity";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_connection_end_activity";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_39:
        if (!v7)
          goto LABEL_5;
LABEL_40:
        free(v7);
        goto LABEL_5;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_end_activity";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_connection_end_activity";
        _os_log_impl(&dword_182FBE000, v8, v18, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_38:

    goto LABEL_39;
  }
  if (v4)
  {
    nw_activity_activate(v4);
    if (nw_activity_should_log(v5))
      nw_connection_add_client_event_internal(v3, 5, 0, v5);
    goto LABEL_5;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_connection_end_activity";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (!__nwlog_fault(v7, &type, &v20))
    goto LABEL_39;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v11 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_end_activity";
      _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null activity", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (!v20)
  {
    __nwlog_obj();
    v8 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    if (os_log_type_enabled(v8, type))
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_end_activity";
      _os_log_impl(&dword_182FBE000, v8, v19, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_38;
  }
  v15 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v8 = objc_claimAutoreleasedReturnValue();
  v16 = type;
  v17 = os_log_type_enabled(v8, type);
  if (!v15)
  {
    if (v17)
    {
      *(_DWORD *)buf = 136446210;
      v23 = "nw_connection_end_activity";
      _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null activity, no backtrace", buf, 0xCu);
    }
    goto LABEL_38;
  }
  if (v17)
  {
    *(_DWORD *)buf = 136446466;
    v23 = "nw_connection_end_activity";
    v24 = 2082;
    v25 = v15;
    _os_log_impl(&dword_182FBE000, v8, v16, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v15);
  if (v7)
    goto LABEL_40;
LABEL_5:

}

void sub_1830A7004(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NSObject *NWInterface.type.getter@<X0>(_BYTE *a1@<X8>)
{
  NSObject **v1;
  NSObject *result;
  char v4;

  result = *v1;
  if (*v1)
  {
    result = nw_interface_get_type(result);
    if (result >= 5)
      v4 = 0;
    else
      v4 = (char)result;
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return result;
}

nw_interface_type_t nw_interface_get_type(nw_interface_t interface)
{
  nw_interface_t v1;
  nw_interface_t v2;
  nw_interface_type_t isa;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = interface;
  v2 = v1;
  if (v1)
  {
    isa = (nw_interface_type_t)v1[12].isa;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_interface_get_type";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_get_type";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_interface_get_type";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_get_type";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_get_type";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  isa = nw_interface_type_other;
LABEL_3:

  return isa;
}

void nw_parameters_set_is_third_party_web_content(void *a1, int a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  __int16 v9;
  unsigned int v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  char v19;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v22;
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = *((_QWORD *)v3 + 13);
    v7 = *(unsigned __int16 *)(v5 + 108);
    v6 = v5 + 108;
    v8 = v7 | (*(unsigned __int8 *)(v6 + 2) << 16);
    if (a2)
      v9 = 0x8000;
    else
      v9 = 0;
    v10 = v8 & 0xFFFF7FFF;
    *(_WORD *)v6 = v10 | v9;
    *(_BYTE *)(v6 + 2) = BYTE2(v10);
    goto LABEL_6;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v22 = "nw_parameters_set_is_third_party_web_content";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v19 = 0;
  if (__nwlog_fault(v12, &type, &v19))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_is_third_party_web_content";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v19)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v22 = "nw_parameters_set_is_third_party_web_content";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_is_third_party_web_content";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v22 = "nw_parameters_set_is_third_party_web_content";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v12)
    free(v12);
LABEL_6:

}

void nwlog_legacy_init_once(void)
{
  if ((gHasForked & 1) == 0)
    gLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "");
}

uint64_t __nw_establishment_report_create_from_dictionary_block_invoke_3(uint64_t a1, uint64_t a2, void *a3)
{
  id v4;
  const char *string;
  uint64_t *v6;
  id v7;
  NWConcrete_nw_protocol_establishment_report *v8;
  NWConcrete_nw_protocol_establishment_report *v9;

  v4 = a3;
  if (object_getClass(v4) != (Class)MEMORY[0x1E0C812F8])
    goto LABEL_21;
  string = xpc_dictionary_get_string(v4, "protocol");
  if (!strcmp(string, "tcp"))
  {
    if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
      dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
    v6 = &g_tcp_definition;
LABEL_17:
    v7 = (id)*v6;
    if (!v7)
      goto LABEL_21;
    goto LABEL_18;
  }
  if (strcmp(string, "tls"))
  {
    if (!strcmp(string, "quic"))
    {
      if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
      v6 = &nw_protocol_copy_quic_stream_definition::quic_definition;
    }
    else
    {
      if (strcmp(string, "quic-connection"))
        goto LABEL_21;
      if (nw_protocol_copy_quic_connection_definition::onceToken != -1)
        dispatch_once(&nw_protocol_copy_quic_connection_definition::onceToken, &__block_literal_global_54912);
      v6 = &nw_protocol_copy_quic_connection_definition::quic_definition;
    }
    goto LABEL_17;
  }
  v7 = (id)nw_protocol_boringssl_copy_definition();
  if (!v7)
    goto LABEL_21;
LABEL_18:
  v8 = objc_alloc_init(NWConcrete_nw_protocol_establishment_report);
  v9 = v8;
  if (v8)
  {
    objc_storeStrong((id *)&v8->protocol, v7);
    v9->handshake_milliseconds = xpc_dictionary_get_uint64(v4, "handshake_milliseconds");
    v9->handshake_rtt_milliseconds = xpc_dictionary_get_uint64(v4, "handshake_rtt_milliseconds");
    v9->client_accurate_ecn_state = xpc_dictionary_get_uint64(v4, "client_accurate_ecn_state");
    v9->server_accurate_ecn_state = xpc_dictionary_get_uint64(v4, "server_accurate_ecn_state");
    *((_BYTE *)v9 + 40) = *((_BYTE *)v9 + 40) & 0xFE | xpc_dictionary_get_BOOL(v4, "l4s_enabled");
    nw_array_append(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64), v9);
  }

LABEL_21:
  return 1;
}

void sub_1830A7824(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_establishment_report *nw_protocol_establishment_report_create(void *a1, unint64_t a2, unint64_t a3)
{
  id v6;
  NWConcrete_nw_protocol_establishment_report *v7;
  NWConcrete_nw_protocol_establishment_report *v8;
  NWConcrete_nw_protocol_establishment_report *v9;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  char *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  char *backtrace_string;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v6 = a1;
  if (v6)
  {
    v7 = objc_alloc_init(NWConcrete_nw_protocol_establishment_report);
    v8 = v7;
    if (v7)
    {
      objc_storeStrong((id *)&v7->protocol, a1);
      v8->handshake_milliseconds = a2;
      v8->handshake_rtt_milliseconds = a3;
      v9 = v8;
LABEL_4:

      goto LABEL_5;
    }
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_protocol_establishment_report_create";
    v16 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (__nwlog_fault(v16, &type, &v27))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v18 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_protocol_establishment_report_create";
          _os_log_impl(&dword_182FBE000, v17, v18, "%{public}s called with null report", buf, 0xCu);
        }
      }
      else if (v27)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        v24 = os_log_type_enabled(v17, type);
        if (backtrace_string)
        {
          if (v24)
          {
            *(_DWORD *)buf = 136446466;
            v30 = "nw_protocol_establishment_report_create";
            v31 = 2082;
            v32 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v17, v23, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_41;
        }
        if (v24)
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_protocol_establishment_report_create";
          _os_log_impl(&dword_182FBE000, v17, v23, "%{public}s called with null report, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v17 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v17, type))
        {
          *(_DWORD *)buf = 136446210;
          v30 = "nw_protocol_establishment_report_create";
          _os_log_impl(&dword_182FBE000, v17, v26, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_41:
    if (v16)
      free(v16);
    goto LABEL_4;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_protocol_establishment_report_create";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (__nwlog_fault(v12, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_establishment_report_create";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol", buf, 0xCu);
      }
    }
    else if (v27)
    {
      v19 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      v21 = os_log_type_enabled(v13, type);
      if (v19)
      {
        if (v21)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "nw_protocol_establishment_report_create";
          v31 = 2082;
          v32 = v19;
          _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v19);
        goto LABEL_35;
      }
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_establishment_report_create";
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null protocol, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_protocol_establishment_report_create";
        _os_log_impl(&dword_182FBE000, v13, v25, "%{public}s called with null protocol, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_35:
  if (v12)
    free(v12);
  v8 = 0;
LABEL_5:

  return v8;
}

void sub_1830A7D20(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_path_flow_registration_get_nexus_instance(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2, _OWORD *a3, _DWORD *a4)
{
  id v6;
  void *v7;
  _OWORD *v8;
  void *v9;
  _OWORD *v10;
  int is_null;
  _BOOL8 v12;

  v6 = nw_path_copy_flow_for_registration(a1, a2);
  v7 = v6;
  if (v6)
  {
    v8 = v6;
    v9 = v8;
    if (a4)
      *a4 = *((_DWORD *)v8 + 42);
    v10 = v8 + 8;
    is_null = uuid_is_null((const unsigned __int8 *)v8 + 128);
    v12 = is_null == 0;
    if (!is_null)
      *a3 = *v10;

  }
  else
  {
    v12 = 0;
  }

  return v12;
}

void sub_1830A8060(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

NWConcrete_nw_protocol_options *nw_proxy_create_options(void *a1)
{
  id v1;
  void *v2;
  NWConcrete_nw_protocol_options *options;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    options = nw_protocol_create_options(v1);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_proxy_create_options";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_create_options";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null proxy_definition", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_proxy_create_options";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null proxy_definition, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_create_options";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null proxy_definition, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_proxy_create_options";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null proxy_definition, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  options = 0;
LABEL_3:

  return options;
}

void sub_1830A830C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t ___ZL38nw_endpoint_transform_start_next_childP30NWConcrete_nw_endpoint_handler_block_invoke(uint64_t a1)
{
  return nw_endpoint_transform_start_next_child(*(NWConcrete_nw_endpoint_handler **)(a1 + 32));
}

uint64_t nw_path_get_nexus_protocol_level(void *a1)
{
  NWConcrete_nw_path *v1;
  NWConcrete_nw_path *v2;
  uint64_t nexus_agent;
  unsigned int v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_path_get_nexus_protocol_level";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_path_get_nexus_protocol_level";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_path_get_nexus_protocol_level";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_23;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_path_get_nexus_protocol_level";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_path_get_nexus_protocol_level";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_23:
    if (v7)
      free(v7);
    goto LABEL_25;
  }
  if (!nw_path_uses_nexus_internal(v1, 0)
    || (nexus_agent = nw_path_get_nexus_agent(v2, 0), *(_DWORD *)(nexus_agent + 212) < 0xCCu))
  {
LABEL_25:
    v5 = 0;
    goto LABEL_26;
  }
  v4 = *(_DWORD *)(nexus_agent + 216);
  if (v4 >= 5)
    v5 = 0;
  else
    v5 = v4;
LABEL_26:

  return v5;
}

void sub_1830A85E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_maximum_datagram_size(void *a1)
{
  void **v1;
  void **v2;
  uint64_t mtu;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  id v7;
  int v8;
  int v9;
  int v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v23;
  __int16 v24;
  char *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    mtu = nw_path_get_mtu(v1);
    v4 = mtu;
    if ((_DWORD)mtu)
      v5 = mtu;
    else
      v5 = 1500;
    if (v5 >= 0x3C)
    {
      v6 = v2[3];
      if (v6
        && (v7 = v6, v8 = objc_msgSend(v7, "type"), v7, v8 == 1)
        && nw_endpoint_get_address_family(v2[3]) == 2)
      {
        v9 = -20;
      }
      else
      {
        v9 = -40;
      }
      if (nw_parameters_get_ip_protocol(v2[2]) == 17)
        v10 = -8;
      else
        v10 = -20;
      v4 = v10 + v5 + v9;
    }
    goto LABEL_15;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v23 = "nw_path_get_maximum_datagram_size";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_path_get_maximum_datagram_size";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v23 = "nw_path_get_maximum_datagram_size";
          v24 = 2082;
          v25 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_32;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_path_get_maximum_datagram_size";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)buf = 136446210;
        v23 = "nw_path_get_maximum_datagram_size";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_32:
  if (v13)
    free(v13);
  v4 = 0;
LABEL_15:

  return v4;
}

void sub_1830A890C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_protocol_ipv4_add_input_handler(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol_identifier *identifier;
  nw_protocol_callbacks *callbacks;
  NSObject *v6;
  nw_protocol_callbacks *v7;
  void *handle;
  nw_protocol_callbacks *v9;
  nw_protocol_callbacks *v10;
  uint64_t (*get_parameters)(nw_protocol *);
  void *v12;
  void *v13;
  nw_protocol_callbacks *v14;
  nw_protocol_callbacks *v15;
  uint64_t (*get_local_endpoint)(nw_protocol *);
  NSObject *v17;
  void *v18;
  _BOOL4 v19;
  nw_protocol_callbacks *v20;
  nw_protocol_callbacks *v21;
  nw_protocol_callbacks *v22;
  void (**v23)(_QWORD);
  const void *v24;
  nw_protocol_identifier *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  nw_protocol_identifier *v29;
  const char *v30;
  nw_protocol_identifier *v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  nw_protocol_identifier *v35;
  const char *v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  const char *v40;
  char *v41;
  _BOOL4 v42;
  nw_protocol_identifier *v43;
  char *v44;
  _BOOL4 v45;
  nw_protocol_identifier *v46;
  char *backtrace_string;
  _BOOL4 v48;
  const char *v49;
  _BOOL4 v50;
  _BOOL4 v51;
  _BOOL4 v52;
  _BOOL4 v53;
  nw_protocol_identifier *v54;
  nw_protocol_identifier *v55;
  nw_protocol_identifier *v56;
  nw_protocol_identifier *v57;
  nw_protocol_callbacks *v58;
  uint64_t (*get_remote_endpoint)(nw_protocol *);
  NSObject *v60;
  nw_protocol *default_input_handler;
  void *v62;
  nw_protocol_callbacks *v63;
  nw_protocol_callbacks *v64;
  uint64_t (*get_path)(nw_protocol *);
  id *v66;
  id v67;
  id v68;
  _BYTE *v69;
  int v70;
  _DWORD *v71;
  void *v72;
  int v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  uint64_t v77;
  char *v78;
  unint64_t v79;
  int v80;
  int hop_limit;
  char v82;
  char v83;
  char v84;
  char v85;
  uint64_t v86;
  nw_protocol_callbacks *v88;
  nw_protocol_callbacks *v89;
  void (**v90)(_QWORD);
  const void *v91;
  nw_protocol_callbacks *v92;
  nw_protocol_callbacks *v93;
  void (**v94)(_QWORD);
  const void *v95;
  nw_protocol_callbacks *v96;
  nw_protocol_callbacks *v97;
  void (**v98)(_QWORD);
  const void *v99;
  nw_protocol_identifier *v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  nw_protocol_identifier *v104;
  const char *v105;
  const char *name;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  const char *v110;
  const char *v111;
  char *v112;
  NSObject *v113;
  os_log_type_t v114;
  const char *v115;
  char *v116;
  NSObject *v117;
  _BOOL4 v118;
  nw_protocol_identifier *v119;
  char *v120;
  _BOOL4 v121;
  const char *v122;
  char *v123;
  _BOOL4 v124;
  nw_protocol_identifier *v125;
  NSObject *v126;
  const char *v127;
  nw_protocol_identifier *v128;
  const char *v129;
  NSObject *log;
  char v131;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v134;
  __int16 v135;
  nw_protocol_identifier *v136;
  __int16 v137;
  nw_protocol *v138;
  __int16 v139;
  char *v140;
  uint64_t v141;

  v141 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v134 = "nw_protocol_ipv4_add_input_handler";
    v37 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131))
      goto LABEL_299;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v131)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v134 = "nw_protocol_ipv4_add_input_handler";
          v40 = "%{public}s called with null protocol, backtrace limit exceeded";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v38 = __nwlog_obj();
      v39 = type;
      v48 = os_log_type_enabled(v38, type);
      if (!backtrace_string)
      {
        if (v48)
        {
          *(_DWORD *)buf = 136446210;
          v134 = "nw_protocol_ipv4_add_input_handler";
          v40 = "%{public}s called with null protocol, no backtrace";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      if (!v48)
        goto LABEL_112;
      *(_DWORD *)buf = 136446466;
      v134 = "nw_protocol_ipv4_add_input_handler";
      v135 = 2082;
      v136 = (nw_protocol_identifier *)backtrace_string;
      v49 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
      goto LABEL_111;
    }
    v38 = __nwlog_obj();
    v39 = type;
    if (!os_log_type_enabled(v38, type))
      goto LABEL_299;
    *(_DWORD *)buf = 136446210;
    v134 = "nw_protocol_ipv4_add_input_handler";
    v40 = "%{public}s called with null protocol";
LABEL_298:
    _os_log_impl(&dword_182FBE000, v38, v39, v40, buf, 0xCu);
    goto LABEL_299;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v134 = "nw_protocol_ipv4_add_input_handler";
    v37 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131))
      goto LABEL_299;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v131)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v134 = "nw_protocol_ipv4_add_input_handler";
          v40 = "%{public}s called with null ipv4, backtrace limit exceeded";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v38 = __nwlog_obj();
      v39 = type;
      v50 = os_log_type_enabled(v38, type);
      if (!backtrace_string)
      {
        if (v50)
        {
          *(_DWORD *)buf = 136446210;
          v134 = "nw_protocol_ipv4_add_input_handler";
          v40 = "%{public}s called with null ipv4, no backtrace";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      if (!v50)
        goto LABEL_112;
      *(_DWORD *)buf = 136446466;
      v134 = "nw_protocol_ipv4_add_input_handler";
      v135 = 2082;
      v136 = (nw_protocol_identifier *)backtrace_string;
      v49 = "%{public}s called with null ipv4, dumping backtrace:%{public}s";
      goto LABEL_111;
    }
    v38 = __nwlog_obj();
    v39 = type;
    if (!os_log_type_enabled(v38, type))
      goto LABEL_299;
    *(_DWORD *)buf = 136446210;
    v134 = "nw_protocol_ipv4_add_input_handler";
    v40 = "%{public}s called with null ipv4";
    goto LABEL_298;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v134 = "nw_protocol_ipv4_add_input_handler";
    v37 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131))
      goto LABEL_299;
    if (type != OS_LOG_TYPE_FAULT)
    {
      if (!v131)
      {
        v38 = __nwlog_obj();
        v39 = type;
        if (os_log_type_enabled(v38, type))
        {
          *(_DWORD *)buf = 136446210;
          v134 = "nw_protocol_ipv4_add_input_handler";
          v40 = "%{public}s called with null input_protocol, backtrace limit exceeded";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v38 = __nwlog_obj();
      v39 = type;
      v51 = os_log_type_enabled(v38, type);
      if (!backtrace_string)
      {
        if (v51)
        {
          *(_DWORD *)buf = 136446210;
          v134 = "nw_protocol_ipv4_add_input_handler";
          v40 = "%{public}s called with null input_protocol, no backtrace";
          goto LABEL_298;
        }
        goto LABEL_299;
      }
      if (!v51)
        goto LABEL_112;
      *(_DWORD *)buf = 136446466;
      v134 = "nw_protocol_ipv4_add_input_handler";
      v135 = 2082;
      v136 = (nw_protocol_identifier *)backtrace_string;
      v49 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
      goto LABEL_111;
    }
    v38 = __nwlog_obj();
    v39 = type;
    if (!os_log_type_enabled(v38, type))
      goto LABEL_299;
    *(_DWORD *)buf = 136446210;
    v134 = "nw_protocol_ipv4_add_input_handler";
    v40 = "%{public}s called with null input_protocol";
    goto LABEL_298;
  }
  if (a1->default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v134 = "nw_protocol_ipv4_add_input_handler";
    v37 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131))
      goto LABEL_299;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (!os_log_type_enabled(v38, type))
        goto LABEL_299;
      *(_DWORD *)buf = 136446210;
      v134 = "nw_protocol_ipv4_add_input_handler";
      v40 = "%{public}s Default input handler already exists";
      goto LABEL_298;
    }
    if (!v131)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v134 = "nw_protocol_ipv4_add_input_handler";
        v40 = "%{public}s Default input handler already exists, backtrace limit exceeded";
        goto LABEL_298;
      }
      goto LABEL_299;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v38 = __nwlog_obj();
    v39 = type;
    v52 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v52)
      {
        *(_DWORD *)buf = 136446210;
        v134 = "nw_protocol_ipv4_add_input_handler";
        v40 = "%{public}s Default input handler already exists, no backtrace";
        goto LABEL_298;
      }
      goto LABEL_299;
    }
    if (!v52)
      goto LABEL_112;
    *(_DWORD *)buf = 136446466;
    v134 = "nw_protocol_ipv4_add_input_handler";
    v135 = 2082;
    v136 = (nw_protocol_identifier *)backtrace_string;
    v49 = "%{public}s Default input handler already exists, dumping backtrace:%{public}s";
LABEL_111:
    _os_log_impl(&dword_182FBE000, v38, v39, v49, buf, 0x16u);
    goto LABEL_112;
  }
  if (a2->identifier)
    identifier = a2->identifier;
  else
    identifier = (nw_protocol_identifier *)"invalid";
  if (!strncmp(identifier->name, "quic", 4uLL))
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v134 = "nw_protocol_ipv4_add_input_handler";
    v37 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v131 = 0;
    if (!__nwlog_fault(v37, &type, &v131))
      goto LABEL_299;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v134 = "nw_protocol_ipv4_add_input_handler";
        v40 = "%{public}s Attempt to add quic to ip";
        goto LABEL_298;
      }
LABEL_299:
      if (v37)
        free(v37);
      return 0;
    }
    if (!v131)
    {
      v38 = __nwlog_obj();
      v39 = type;
      if (os_log_type_enabled(v38, type))
      {
        *(_DWORD *)buf = 136446210;
        v134 = "nw_protocol_ipv4_add_input_handler";
        v40 = "%{public}s Attempt to add quic to ip, backtrace limit exceeded";
        goto LABEL_298;
      }
      goto LABEL_299;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v38 = __nwlog_obj();
    v39 = type;
    v53 = os_log_type_enabled(v38, type);
    if (!backtrace_string)
    {
      if (v53)
      {
        *(_DWORD *)buf = 136446210;
        v134 = "nw_protocol_ipv4_add_input_handler";
        v40 = "%{public}s Attempt to add quic to ip, no backtrace";
        goto LABEL_298;
      }
      goto LABEL_299;
    }
    if (v53)
    {
      *(_DWORD *)buf = 136446466;
      v134 = "nw_protocol_ipv4_add_input_handler";
      v135 = 2082;
      v136 = (nw_protocol_identifier *)backtrace_string;
      v49 = "%{public}s Attempt to add quic to ip, dumping backtrace:%{public}s";
      goto LABEL_111;
    }
LABEL_112:
    free(backtrace_string);
    goto LABEL_299;
  }
  a1->default_input_handler = a2;
  if (a2->handle == &nw_protocol_ref_counted_handle)
  {
    callbacks = a2[1].callbacks;
    if (callbacks)
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&callbacks->add_input_handler + 1);
  }
  *(_OWORD *)a1->flow_id = *(_OWORD *)a2->flow_id;
  if (a2->output_handler)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = gLogObj;
    if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446210;
      v134 = "nw_protocol_ipv4_add_input_handler";
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Output handler already exists for protocol being added as input handler", buf, 0xCu);
    }
  }
  else
  {
    a2->output_handler = a1;
    v7 = a1[1].callbacks;
    if (v7)
      a1[1].callbacks = (nw_protocol_callbacks *)((char *)&v7->add_input_handler + 1);
  }
  handle = a2->handle;
  if (handle == &nw_protocol_ref_counted_handle)
  {
    v9 = a2[1].callbacks;
    if (v9)
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v9->add_input_handler + 1);
  }
  v10 = a2->callbacks;
  if (v10)
  {
    get_parameters = (uint64_t (*)(nw_protocol *))v10->get_parameters;
    if (get_parameters)
    {
      v12 = (void *)get_parameters(a2);
      if (handle != &nw_protocol_ref_counted_handle)
        goto LABEL_24;
      goto LABEL_23;
    }
  }
  __nwlog_obj();
  v25 = a2->identifier;
  if (!v25)
    v25 = (nw_protocol_identifier *)"invalid";
  *(_DWORD *)buf = 136446722;
  v134 = "__nw_protocol_get_parameters";
  v135 = 2082;
  v136 = v25;
  v137 = 2048;
  v138 = a2;
  v26 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v131 = 0;
  if (__nwlog_fault(v26, &type, &v131))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_126;
      v29 = a2->identifier;
      if (!v29)
        v29 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v134 = "__nw_protocol_get_parameters";
      v135 = 2082;
      v136 = v29;
      v137 = 2048;
      v138 = a2;
      v30 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback";
LABEL_125:
      _os_log_impl(&dword_182FBE000, v27, v28, v30, buf, 0x20u);
      goto LABEL_126;
    }
    if (!v131)
    {
      v27 = __nwlog_obj();
      v28 = type;
      if (!os_log_type_enabled(v27, type))
        goto LABEL_126;
      v54 = a2->identifier;
      if (!v54)
        v54 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v134 = "__nw_protocol_get_parameters";
      v135 = 2082;
      v136 = v54;
      v137 = 2048;
      v138 = a2;
      v30 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, backtrace limit exceeded";
      goto LABEL_125;
    }
    v41 = (char *)__nw_create_backtrace_string();
    v27 = __nwlog_obj();
    v28 = type;
    v42 = os_log_type_enabled(v27, type);
    if (!v41)
    {
      if (!v42)
        goto LABEL_126;
      v56 = a2->identifier;
      if (!v56)
        v56 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v134 = "__nw_protocol_get_parameters";
      v135 = 2082;
      v136 = v56;
      v137 = 2048;
      v138 = a2;
      v30 = "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, no backtrace";
      goto LABEL_125;
    }
    if (v42)
    {
      v43 = a2->identifier;
      if (!v43)
        v43 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446978;
      v134 = "__nw_protocol_get_parameters";
      v135 = 2082;
      v136 = v43;
      v137 = 2048;
      v138 = a2;
      v139 = 2082;
      v140 = v41;
      _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s protocol %{public}s (%p) has invalid get_parameters callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v41);
  }
LABEL_126:
  if (v26)
    free(v26);
  v12 = 0;
  if (handle == &nw_protocol_ref_counted_handle)
  {
LABEL_23:
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      v21 = a2[1].callbacks;
      if (v21)
      {
        v22 = (nw_protocol_callbacks *)((char *)v21 - 1);
        a2[1].callbacks = v22;
        if (!v22)
        {
          v23 = *(void (***)(_QWORD))a2[1].flow_id;
          if (v23)
          {
            *(_QWORD *)a2[1].flow_id = 0;
            v23[2](v23);
            _Block_release(v23);
          }
          if ((a2[1].flow_id[8] & 1) != 0)
          {
            v24 = *(const void **)a2[1].flow_id;
            if (v24)
              _Block_release(v24);
          }
          free(a2);
        }
      }
    }
  }
LABEL_24:
  BYTE6(a1[3].output_handler) = nw_parameters_get_ip_protocol(v12);
  v13 = a2->handle;
  if (v13 == &nw_protocol_ref_counted_handle)
  {
    v14 = a2[1].callbacks;
    if (v14)
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v14->add_input_handler + 1);
  }
  v15 = a2->callbacks;
  if (v15)
  {
    get_local_endpoint = (uint64_t (*)(nw_protocol *))v15->get_local_endpoint;
    if (get_local_endpoint)
    {
      v17 = get_local_endpoint(a2);
      if (v13 != &nw_protocol_ref_counted_handle)
        goto LABEL_30;
      goto LABEL_138;
    }
  }
  __nwlog_obj();
  v31 = a2->identifier;
  if (!v31)
    v31 = (nw_protocol_identifier *)"invalid";
  *(_DWORD *)buf = 136446722;
  v134 = "__nw_protocol_get_local_endpoint";
  v135 = 2082;
  v136 = v31;
  v137 = 2048;
  v138 = a2;
  v32 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v131 = 0;
  if (__nwlog_fault(v32, &type, &v131))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v33 = __nwlog_obj();
      v34 = type;
      if (!os_log_type_enabled(v33, type))
        goto LABEL_135;
      v35 = a2->identifier;
      if (!v35)
        v35 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v134 = "__nw_protocol_get_local_endpoint";
      v135 = 2082;
      v136 = v35;
      v137 = 2048;
      v138 = a2;
      v36 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback";
LABEL_134:
      _os_log_impl(&dword_182FBE000, v33, v34, v36, buf, 0x20u);
      goto LABEL_135;
    }
    if (!v131)
    {
      v33 = __nwlog_obj();
      v34 = type;
      if (!os_log_type_enabled(v33, type))
        goto LABEL_135;
      v55 = a2->identifier;
      if (!v55)
        v55 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v134 = "__nw_protocol_get_local_endpoint";
      v135 = 2082;
      v136 = v55;
      v137 = 2048;
      v138 = a2;
      v36 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, backtrace limit exceeded";
      goto LABEL_134;
    }
    v44 = (char *)__nw_create_backtrace_string();
    v33 = __nwlog_obj();
    v34 = type;
    v45 = os_log_type_enabled(v33, type);
    if (!v44)
    {
      if (!v45)
        goto LABEL_135;
      v57 = a2->identifier;
      if (!v57)
        v57 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v134 = "__nw_protocol_get_local_endpoint";
      v135 = 2082;
      v136 = v57;
      v137 = 2048;
      v138 = a2;
      v36 = "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, no backtrace";
      goto LABEL_134;
    }
    if (v45)
    {
      v46 = a2->identifier;
      if (!v46)
        v46 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446978;
      v134 = "__nw_protocol_get_local_endpoint";
      v135 = 2082;
      v136 = v46;
      v137 = 2048;
      v138 = a2;
      v139 = 2082;
      v140 = v44;
      _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s protocol %{public}s (%p) has invalid get_local_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
    }
    free(v44);
  }
LABEL_135:
  if (v32)
    free(v32);
  v17 = 0;
  if (v13 != &nw_protocol_ref_counted_handle)
    goto LABEL_30;
LABEL_138:
  if (a2->handle != &nw_protocol_ref_counted_handle)
  {
    v19 = 0;
    goto LABEL_140;
  }
  v92 = a2[1].callbacks;
  if (v92)
  {
    v93 = (nw_protocol_callbacks *)((char *)v92 - 1);
    a2[1].callbacks = v93;
    if (!v93)
    {
      v94 = *(void (***)(_QWORD))a2[1].flow_id;
      if (v94)
      {
        *(_QWORD *)a2[1].flow_id = 0;
        v94[2](v94);
        _Block_release(v94);
      }
      if ((a2[1].flow_id[8] & 1) != 0)
      {
        v95 = *(const void **)a2[1].flow_id;
        if (v95)
          _Block_release(v95);
      }
      free(a2);
    }
  }
LABEL_30:
  v18 = a2->handle;
  v19 = v18 == &nw_protocol_ref_counted_handle;
  if (v18 == &nw_protocol_ref_counted_handle)
  {
    v20 = a2[1].callbacks;
    if (v20)
      a2[1].callbacks = (nw_protocol_callbacks *)((char *)&v20->add_input_handler + 1);
  }
LABEL_140:
  v58 = a2->callbacks;
  if (v58)
  {
    get_remote_endpoint = (uint64_t (*)(nw_protocol *))v58->get_remote_endpoint;
    if (get_remote_endpoint)
    {
      v60 = get_remote_endpoint(a2);
      if (!v19)
        goto LABEL_144;
      goto LABEL_143;
    }
  }
  __nwlog_obj();
  v100 = a2->identifier;
  if (!v100)
    v100 = (nw_protocol_identifier *)"invalid";
  *(_DWORD *)buf = 136446722;
  v134 = "__nw_protocol_get_remote_endpoint";
  v135 = 2082;
  v136 = v100;
  v137 = 2048;
  v138 = a2;
  v101 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v131 = 0;
  if (__nwlog_fault(v101, &type, &v131))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v102 = __nwlog_obj();
      v103 = type;
      if (!os_log_type_enabled(v102, type))
        goto LABEL_255;
      v104 = a2->identifier;
      if (!v104)
        v104 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v134 = "__nw_protocol_get_remote_endpoint";
      v135 = 2082;
      v136 = v104;
      v137 = 2048;
      v138 = a2;
      v105 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback";
LABEL_253:
      v126 = v102;
LABEL_254:
      _os_log_impl(&dword_182FBE000, v126, v103, v105, buf, 0x20u);
      goto LABEL_255;
    }
    if (!v131)
    {
      v102 = __nwlog_obj();
      v103 = type;
      if (!os_log_type_enabled(v102, type))
        goto LABEL_255;
      v125 = a2->identifier;
      if (!v125)
        v125 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v134 = "__nw_protocol_get_remote_endpoint";
      v135 = 2082;
      v136 = v125;
      v137 = 2048;
      v138 = a2;
      v105 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, backtrace limit exceeded";
      goto LABEL_253;
    }
    v116 = (char *)__nw_create_backtrace_string();
    v117 = __nwlog_obj();
    v103 = type;
    log = v117;
    v118 = os_log_type_enabled(v117, type);
    if (v116)
    {
      if (v118)
      {
        v119 = a2->identifier;
        if (!v119)
          v119 = (nw_protocol_identifier *)"invalid";
        *(_DWORD *)buf = 136446978;
        v134 = "__nw_protocol_get_remote_endpoint";
        v135 = 2082;
        v136 = v119;
        v137 = 2048;
        v138 = a2;
        v139 = 2082;
        v140 = v116;
        _os_log_impl(&dword_182FBE000, log, v103, "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v116);
    }
    else if (v118)
    {
      v128 = a2->identifier;
      if (!v128)
        v128 = (nw_protocol_identifier *)"invalid";
      *(_DWORD *)buf = 136446722;
      v134 = "__nw_protocol_get_remote_endpoint";
      v135 = 2082;
      v136 = v128;
      v137 = 2048;
      v138 = a2;
      v105 = "%{public}s protocol %{public}s (%p) has invalid get_remote_endpoint callback, no backtrace";
      v126 = log;
      goto LABEL_254;
    }
  }
LABEL_255:
  if (v101)
    free(v101);
  v60 = 0;
  if (v19)
  {
LABEL_143:
    if (a2->handle == &nw_protocol_ref_counted_handle)
    {
      v88 = a2[1].callbacks;
      if (v88)
      {
        v89 = (nw_protocol_callbacks *)((char *)v88 - 1);
        a2[1].callbacks = v89;
        if (!v89)
        {
          v90 = *(void (***)(_QWORD))a2[1].flow_id;
          if (v90)
          {
            *(_QWORD *)a2[1].flow_id = 0;
            v90[2](v90);
            _Block_release(v90);
          }
          if ((a2[1].flow_id[8] & 1) != 0)
          {
            v91 = *(const void **)a2[1].flow_id;
            if (v91)
              _Block_release(v91);
          }
          free(a2);
        }
      }
    }
  }
LABEL_144:
  if (nw_endpoint_get_address_family(v17) == 2)
    LODWORD(a1[2].callbacks) = *(_DWORD *)&nw_endpoint_get_address(v17)->sa_data[2];
  if (nw_endpoint_get_address_family(v60) == 2)
    HIDWORD(a1[2].callbacks) = *(_DWORD *)&nw_endpoint_get_address(v60)->sa_data[2];
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v134 = "__nw_protocol_get_path";
    v112 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v131 = 0;
    if (!__nwlog_fault(v112, &type, &v131))
      goto LABEL_305;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v113 = __nwlog_obj();
      v114 = type;
      if (!os_log_type_enabled(v113, type))
        goto LABEL_305;
      *(_DWORD *)buf = 136446210;
      v134 = "__nw_protocol_get_path";
      v115 = "%{public}s called with null protocol";
    }
    else if (v131)
    {
      v123 = (char *)__nw_create_backtrace_string();
      v113 = __nwlog_obj();
      v114 = type;
      v124 = os_log_type_enabled(v113, type);
      if (v123)
      {
        if (v124)
        {
          *(_DWORD *)buf = 136446466;
          v134 = "__nw_protocol_get_path";
          v135 = 2082;
          v136 = (nw_protocol_identifier *)v123;
          _os_log_impl(&dword_182FBE000, v113, v114, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v123);
        goto LABEL_305;
      }
      if (!v124)
      {
LABEL_305:
        if (v112)
          free(v112);
        goto LABEL_165;
      }
      *(_DWORD *)buf = 136446210;
      v134 = "__nw_protocol_get_path";
      v115 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v113 = __nwlog_obj();
      v114 = type;
      if (!os_log_type_enabled(v113, type))
        goto LABEL_305;
      *(_DWORD *)buf = 136446210;
      v134 = "__nw_protocol_get_path";
      v115 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v113, v114, v115, buf, 0xCu);
    goto LABEL_305;
  }
  v62 = default_input_handler->handle;
  if (v62 == &nw_protocol_ref_counted_handle)
  {
    v63 = default_input_handler[1].callbacks;
    if (v63)
      default_input_handler[1].callbacks = (nw_protocol_callbacks *)((char *)&v63->add_input_handler + 1);
  }
  v64 = default_input_handler->callbacks;
  if (!v64 || (get_path = (uint64_t (*)(nw_protocol *))v64->get_path) == 0)
  {
    __nwlog_obj();
    name = default_input_handler->identifier->name;
    if (!name)
      name = "invalid";
    *(_DWORD *)buf = 136446722;
    v134 = "__nw_protocol_get_path";
    v135 = 2082;
    v136 = (nw_protocol_identifier *)name;
    v137 = 2048;
    v138 = default_input_handler;
    v107 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v131 = 0;
    if (__nwlog_fault(v107, &type, &v131))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v108 = __nwlog_obj();
        v109 = type;
        if (!os_log_type_enabled(v108, type))
          goto LABEL_272;
        v110 = default_input_handler->identifier->name;
        if (!v110)
          v110 = "invalid";
        *(_DWORD *)buf = 136446722;
        v134 = "__nw_protocol_get_path";
        v135 = 2082;
        v136 = (nw_protocol_identifier *)v110;
        v137 = 2048;
        v138 = default_input_handler;
        v111 = "%{public}s protocol %{public}s (%p) has invalid get_path callback";
LABEL_271:
        _os_log_impl(&dword_182FBE000, v108, v109, v111, buf, 0x20u);
        goto LABEL_272;
      }
      if (!v131)
      {
        v108 = __nwlog_obj();
        v109 = type;
        if (!os_log_type_enabled(v108, type))
          goto LABEL_272;
        v127 = default_input_handler->identifier->name;
        if (!v127)
          v127 = "invalid";
        *(_DWORD *)buf = 136446722;
        v134 = "__nw_protocol_get_path";
        v135 = 2082;
        v136 = (nw_protocol_identifier *)v127;
        v137 = 2048;
        v138 = default_input_handler;
        v111 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, backtrace limit exceeded";
        goto LABEL_271;
      }
      v120 = (char *)__nw_create_backtrace_string();
      v108 = __nwlog_obj();
      v109 = type;
      v121 = os_log_type_enabled(v108, type);
      if (!v120)
      {
        if (!v121)
          goto LABEL_272;
        v129 = default_input_handler->identifier->name;
        if (!v129)
          v129 = "invalid";
        *(_DWORD *)buf = 136446722;
        v134 = "__nw_protocol_get_path";
        v135 = 2082;
        v136 = (nw_protocol_identifier *)v129;
        v137 = 2048;
        v138 = default_input_handler;
        v111 = "%{public}s protocol %{public}s (%p) has invalid get_path callback, no backtrace";
        goto LABEL_271;
      }
      if (v121)
      {
        v122 = default_input_handler->identifier->name;
        if (!v122)
          v122 = "invalid";
        *(_DWORD *)buf = 136446978;
        v134 = "__nw_protocol_get_path";
        v135 = 2082;
        v136 = (nw_protocol_identifier *)v122;
        v137 = 2048;
        v138 = default_input_handler;
        v139 = 2082;
        v140 = v120;
        _os_log_impl(&dword_182FBE000, v108, v109, "%{public}s protocol %{public}s (%p) has invalid get_path callback, dumping backtrace:%{public}s", buf, 0x2Au);
      }
      free(v120);
    }
LABEL_272:
    if (v107)
      free(v107);
    v66 = 0;
    if (v62 != &nw_protocol_ref_counted_handle)
      goto LABEL_156;
    goto LABEL_155;
  }
  v66 = (id *)get_path(default_input_handler);
  if (v62 == &nw_protocol_ref_counted_handle)
  {
LABEL_155:
    if (default_input_handler->handle == &nw_protocol_ref_counted_handle)
    {
      v96 = default_input_handler[1].callbacks;
      if (v96)
      {
        v97 = (nw_protocol_callbacks *)((char *)v96 - 1);
        default_input_handler[1].callbacks = v97;
        if (!v97)
        {
          v98 = *(void (***)(_QWORD))default_input_handler[1].flow_id;
          if (v98)
          {
            *(_QWORD *)default_input_handler[1].flow_id = 0;
            v98[2](v98);
            _Block_release(v98);
          }
          if ((default_input_handler[1].flow_id[8] & 1) != 0)
          {
            v99 = *(const void **)default_input_handler[1].flow_id;
            if (v99)
              _Block_release(v99);
          }
          free(default_input_handler);
        }
      }
    }
  }
LABEL_156:
  if (v66)
  {
    LODWORD(a1[3].identifier) = nw_path_get_maximum_packet_size(v66);
    HIDWORD(a1[3].identifier) = nw_path_get_mtu(v66);
    LOBYTE(a1[3].handle) = (16 * (nw_path_get_csum_flags(v66) & 1)) | (uint64_t)a1[3].handle & 0xEF;
    v67 = v66[12];
    if (v67)
    {
      v68 = v67;
      v69 = v68;
      if ((*(_WORD *)((_BYTE *)v68 + 85) & 0x80) != 0)
        v70 = *((_DWORD *)v68 + 18);
      else
        v70 = 0;

      HIDWORD(a1[3].callbacks) = v70;
      v71 = v69;
      v72 = v71;
      if ((*(_WORD *)(v69 + 85) & 0x100) != 0)
        v73 = v71[19];
      else
        v73 = 0;

      LODWORD(a1[3].output_handler) = v73;
      os_release(v72);
    }
  }
LABEL_165:
  v74 = nw_parameters_copy_protocol_options_legacy(v12, a1);
  if (v74)
  {
    v75 = v74;
    v76 = v75;
    v77 = 0;
    BYTE1(a1[3].handle) = 0;
    v78 = (char *)&a1[3].handle + 1;
    v79 = 84;
    while (1)
    {
      v80 = v75[v77 + 48];
      v78[v77] = v80;
      if (!v80)
        break;
      --v79;
      ++v77;
      if (v79 <= 1)
      {
        v78[v77] = 0;
        break;
      }
    }

    hop_limit = nw_ip_options_get_hop_limit(v76);
    if (hop_limit)
      v82 = hop_limit;
    else
      v82 = 64;
    HIBYTE(a1[3].output_handler) = v82;
    if (nw_ip_options_get_calculate_receive_time(v76))
      v83 = 2;
    else
      v83 = 0;
    LOBYTE(a1[3].handle) = (uint64_t)a1[3].handle & 0xFD | v83;
    if (nw_ip_options_get_receive_hop_limit(v76))
      v84 = 0x80;
    else
      v84 = 0;
    LOBYTE(a1[3].handle) = v84 & 0x80 | (uint64_t)a1[3].handle & 0x7F;
    LOBYTE(a1[3].handle) = (uint64_t)a1[3].handle & 0xF7 | (8
                                                         * (nw_ip_options_get_fragmentation_value(v76) == 2));
    if (nw_ip_options_get_corrupt_checksums(v76))
      v85 = 32;
    else
      v85 = 0;
    LOBYTE(a1[3].handle) = (uint64_t)a1[3].handle & 0xDF | v85;
    os_release(v76);
  }
  else
  {
    HIBYTE(a1[3].output_handler) = 64;
  }
  v86 = 1;
  nw_protocol_ip_register_segmentation_offload_notification(a1, 1);
  return v86;
}

uint64_t nw_protocol_default_get_remote(nw_protocol *a1)
{
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_remote_endpoint)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_default_get_remote";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_remote";
      v8 = "%{public}s called with null protocol";
      goto LABEL_33;
    }
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_remote";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (!v10)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_remote";
      v8 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "nw_protocol_default_get_remote";
      v17 = 2082;
      v18 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v5)
      return 0;
LABEL_35:
    free(v5);
    return 0;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_default_get_remote";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_remote";
      v8 = "%{public}s called with null protocol->default_input_handler";
      goto LABEL_33;
    }
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_remote";
      v8 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
      goto LABEL_33;
    }
    v11 = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v12 = os_log_type_enabled(v6, type);
    if (v11)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_protocol_default_get_remote";
        v17 = 2082;
        v18 = v11;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v11);
      if (!v5)
        return 0;
      goto LABEL_35;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_remote";
      v8 = "%{public}s called with null protocol->default_input_handler, no backtrace";
LABEL_33:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  callbacks = default_input_handler->callbacks;
  if (callbacks)
  {
    get_remote_endpoint = (uint64_t (*)(void))callbacks->get_remote_endpoint;
    if (get_remote_endpoint)
      return get_remote_endpoint();
  }
  return 0;
}

uint64_t nw_protocol_default_get_path(nw_protocol *a1)
{
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_path)(void);
  NSObject *v6;
  nw_protocol_identifier *identifier;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char *v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  nw_protocol_identifier *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_default_get_path";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_get_path";
      v11 = "%{public}s called with null protocol";
      goto LABEL_37;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_get_path";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_37;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v13 = os_log_type_enabled(v9, type);
    if (!backtrace_string)
    {
      if (!v13)
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_get_path";
      v11 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_37;
    }
    if (v13)
    {
      *(_DWORD *)buf = 136446466;
      v19 = "nw_protocol_default_get_path";
      v20 = 2082;
      v21 = (nw_protocol_identifier *)backtrace_string;
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_38:
    if (!v8)
      return 0;
LABEL_39:
    free(v8);
    return 0;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_default_get_path";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_get_path";
      v11 = "%{public}s called with null protocol->default_input_handler";
      goto LABEL_37;
    }
    if (!v16)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_get_path";
      v11 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
      goto LABEL_37;
    }
    v14 = (char *)__nw_create_backtrace_string();
    v9 = __nwlog_obj();
    v10 = type;
    v15 = os_log_type_enabled(v9, type);
    if (v14)
    {
      if (v15)
      {
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_default_get_path";
        v20 = 2082;
        v21 = (nw_protocol_identifier *)v14;
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v14);
      if (!v8)
        return 0;
      goto LABEL_39;
    }
    if (v15)
    {
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_get_path";
      v11 = "%{public}s called with null protocol->default_input_handler, no backtrace";
LABEL_37:
      _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      goto LABEL_38;
    }
    goto LABEL_38;
  }
  callbacks = default_input_handler->callbacks;
  if (callbacks)
  {
    get_path = (uint64_t (*)(void))callbacks->get_path;
    if (get_path)
      return get_path();
  }
  v6 = __nwlog_obj();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    identifier = (nw_protocol_identifier *)"<null>";
    if (a1->identifier)
      identifier = a1->identifier;
    *(_DWORD *)buf = 136446466;
    v19 = "nw_protocol_default_get_path";
    v20 = 2082;
    v21 = identifier;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Protocol %{public}s does not support get path", buf, 0x16u);
  }
  return 0;
}

uint64_t nw_protocol_default_get_local(nw_protocol *a1)
{
  nw_protocol *default_input_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_local_endpoint)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char *v11;
  _BOOL4 v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_default_get_local";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_local";
      v8 = "%{public}s called with null protocol";
      goto LABEL_33;
    }
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_local";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_33;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v10 = os_log_type_enabled(v6, type);
    if (!backtrace_string)
    {
      if (!v10)
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_local";
      v8 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_33;
    }
    if (v10)
    {
      *(_DWORD *)buf = 136446466;
      v16 = "nw_protocol_default_get_local";
      v17 = 2082;
      v18 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_34:
    if (!v5)
      return 0;
LABEL_35:
    free(v5);
    return 0;
  }
  default_input_handler = a1->default_input_handler;
  if (!default_input_handler)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v16 = "nw_protocol_default_get_local";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v13 = 0;
    if (!__nwlog_fault(v5, &type, &v13))
      goto LABEL_34;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_local";
      v8 = "%{public}s called with null protocol->default_input_handler";
      goto LABEL_33;
    }
    if (!v13)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_34;
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_local";
      v8 = "%{public}s called with null protocol->default_input_handler, backtrace limit exceeded";
      goto LABEL_33;
    }
    v11 = (char *)__nw_create_backtrace_string();
    v6 = __nwlog_obj();
    v7 = type;
    v12 = os_log_type_enabled(v6, type);
    if (v11)
    {
      if (v12)
      {
        *(_DWORD *)buf = 136446466;
        v16 = "nw_protocol_default_get_local";
        v17 = 2082;
        v18 = v11;
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol->default_input_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v11);
      if (!v5)
        return 0;
      goto LABEL_35;
    }
    if (v12)
    {
      *(_DWORD *)buf = 136446210;
      v16 = "nw_protocol_default_get_local";
      v8 = "%{public}s called with null protocol->default_input_handler, no backtrace";
LABEL_33:
      _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
      goto LABEL_34;
    }
    goto LABEL_34;
  }
  callbacks = default_input_handler->callbacks;
  if (callbacks)
  {
    get_local_endpoint = (uint64_t (*)(void))callbacks->get_local_endpoint;
    if (get_local_endpoint)
      return get_local_endpoint();
  }
  return 0;
}

char *__cdecl nw_endpoint_copy_address_string(nw_endpoint_t endpoint)
{
  NSObject *v1;
  NSObject *v2;
  NSObject *v3;
  int v4;
  NSObject *v5;
  int address_family;
  int v7;
  id v8;
  int v9;
  const char *v10;
  const char *v11;
  NSObject *v12;
  os_log_type_t v13;
  int v14;
  const char *v15;
  id v16;
  NSObject *v17;
  int v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  NSObject *v22;
  int v23;
  char *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  NSObject *v27;
  int v28;
  char *v29;
  NSObject *v30;
  const char *v31;
  char *result;
  unint64_t isa_low;
  size_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  os_log_type_t v41;
  NSObject *v42;
  int v43;
  char *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  const char *v47;
  NSObject *v48;
  int v49;
  unint64_t v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  os_log_type_t v54;
  int v55;
  const char *v56;
  char *v57;
  os_log_type_t v58;
  _BOOL4 v59;
  int v60;
  const char *v61;
  char *v62;
  os_log_type_t v63;
  os_log_type_t v64;
  void *v65;
  NSObject *v66;
  os_log_type_t v67;
  char *backtrace_string;
  os_log_type_t v69;
  _BOOL4 v70;
  os_log_type_t v71;
  NSObject *v72;
  void *v73;
  uint64_t v74;
  int v75;
  char v76;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v79;
  __int16 v80;
  int v81;
  __int16 v82;
  NSObject *v83;
  __int16 v84;
  int v85;
  __int16 v86;
  const char *v87;
  __int16 v88;
  char *v89;
  uint8_t v90[4];
  const char *v91;
  __int16 v92;
  _QWORD v93[10];

  *(_QWORD *)((char *)&v93[8] + 2) = *MEMORY[0x1E0C80C00];
  v1 = endpoint;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v65 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)v90 = 136446210;
    v91 = "nw_endpoint_copy_address_string";
    v19 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v19, buf, &type))
    {
      if (buf[0] == 17)
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v67 = buf[0];
        if (os_log_type_enabled(v66, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v90 = 136446210;
          v91 = "nw_endpoint_copy_address_string";
          _os_log_impl(&dword_182FBE000, v66, v67, "%{public}s called with null any_endpoint", v90, 0xCu);
        }
      }
      else if (type)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v69 = buf[0];
        v70 = os_log_type_enabled(v66, (os_log_type_t)buf[0]);
        if (backtrace_string)
        {
          if (v70)
          {
            *(_DWORD *)v90 = 136446466;
            v91 = "nw_endpoint_copy_address_string";
            v92 = 2082;
            v93[0] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v66, v69, "%{public}s called with null any_endpoint, dumping backtrace:%{public}s", v90, 0x16u);
          }

          free(backtrace_string);
          if (!v19)
            goto LABEL_49;
          goto LABEL_48;
        }
        if (v70)
        {
          *(_DWORD *)v90 = 136446210;
          v91 = "nw_endpoint_copy_address_string";
          _os_log_impl(&dword_182FBE000, v66, v69, "%{public}s called with null any_endpoint, no backtrace", v90, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v66 = objc_claimAutoreleasedReturnValue();
        v71 = buf[0];
        if (os_log_type_enabled(v66, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v90 = 136446210;
          v91 = "nw_endpoint_copy_address_string";
          _os_log_impl(&dword_182FBE000, v66, v71, "%{public}s called with null any_endpoint, backtrace limit exceeded", v90, 0xCu);
        }
      }

    }
LABEL_47:
    if (!v19)
    {
LABEL_49:
      v29 = 0;
LABEL_89:

      return v29;
    }
LABEL_48:
    free(v19);
    goto LABEL_49;
  }
  v3 = v1;
  v4 = -[NSObject type](v3, "type");

  if (v4 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v16 = (id)gLogObj;
    v17 = v3;
    v18 = -[NSObject type](v17, "type");

    *(_DWORD *)v90 = 136446466;
    v91 = "nw_endpoint_copy_address_string";
    v92 = 1024;
    LODWORD(v93[0]) = v18;
    LODWORD(v74) = 18;
    v19 = (char *)_os_log_send_and_compose_impl();

    buf[0] = 16;
    type = OS_LOG_TYPE_DEFAULT;
    if (__nwlog_fault(v19, buf, &type))
    {
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          v22 = v17;
          v23 = -[NSObject type](v22, "type", v90, v74);

          *(_DWORD *)v90 = 136446466;
          v91 = "nw_endpoint_copy_address_string";
          v92 = 1024;
          LODWORD(v93[0]) = v23;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s incorrect endpoint type %u", v90, 0x12u);
        }
      }
      else if (type)
      {
        v24 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v25 = buf[0];
        v26 = os_log_type_enabled(v20, (os_log_type_t)buf[0]);
        if (v24)
        {
          if (v26)
          {
            v27 = v17;
            v28 = -[NSObject type](v27, "type", v90, v74);

            *(_DWORD *)v90 = 136446722;
            v91 = "nw_endpoint_copy_address_string";
            v92 = 1024;
            LODWORD(v93[0]) = v28;
            WORD2(v93[0]) = 2082;
            *(_QWORD *)((char *)v93 + 6) = v24;
            _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", v90, 0x1Cu);
          }

          free(v24);
          if (!v19)
            goto LABEL_49;
          goto LABEL_48;
        }
        if (v26)
        {
          v48 = v17;
          v49 = -[NSObject type](v48, "type", v90, v74);

          *(_DWORD *)v90 = 136446466;
          v91 = "nw_endpoint_copy_address_string";
          v92 = 1024;
          LODWORD(v93[0]) = v49;
          _os_log_impl(&dword_182FBE000, v20, v25, "%{public}s incorrect endpoint type %u, no backtrace", v90, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v41 = buf[0];
        if (os_log_type_enabled(v20, (os_log_type_t)buf[0]))
        {
          v42 = v17;
          v43 = -[NSObject type](v42, "type", v90, v74);

          *(_DWORD *)v90 = 136446466;
          v91 = "nw_endpoint_copy_address_string";
          v92 = 1024;
          LODWORD(v93[0]) = v43;
          _os_log_impl(&dword_182FBE000, v20, v41, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", v90, 0x12u);
        }
      }

    }
    goto LABEL_47;
  }
  v5 = v3;
  address_family = nw_endpoint_get_address_family(v5);
  switch(address_family)
  {
    case 1:
      isa_low = LOBYTE(v5[29].isa);
      v34 = isa_low - 2;
      if (isa_low <= 2)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v35 = (id)gLogObj;
        *(_DWORD *)v90 = 136446210;
        v91 = "nw_endpoint_copy_address_string";
        v31 = (const char *)_os_log_send_and_compose_impl();

        buf[0] = 16;
        type = OS_LOG_TYPE_DEFAULT;
        if (!__nwlog_fault(v31, buf, &type))
          goto LABEL_84;
        if (buf[0] == 17)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v36 = (id)gLogObj;
          v37 = buf[0];
          if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)v90 = 136446210;
            v91 = "nw_endpoint_copy_address_string";
            _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s endpoint sockaddr has invalid length", v90, 0xCu);
          }
LABEL_83:

LABEL_84:
          if (!v31)
            goto LABEL_87;
          goto LABEL_85;
        }
        if (type == OS_LOG_TYPE_DEFAULT)
        {
          __nwlog_obj();
          v36 = objc_claimAutoreleasedReturnValue();
          v64 = buf[0];
          if (os_log_type_enabled(v36, (os_log_type_t)buf[0]))
          {
            *(_DWORD *)v90 = 136446210;
            v91 = "nw_endpoint_copy_address_string";
            _os_log_impl(&dword_182FBE000, v36, v64, "%{public}s endpoint sockaddr has invalid length, backtrace limit exceeded", v90, 0xCu);
          }
          goto LABEL_83;
        }
        v57 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v36 = objc_claimAutoreleasedReturnValue();
        v58 = buf[0];
        v59 = os_log_type_enabled(v36, (os_log_type_t)buf[0]);
        if (!v57)
        {
          if (v59)
          {
            *(_DWORD *)v90 = 136446210;
            v91 = "nw_endpoint_copy_address_string";
            _os_log_impl(&dword_182FBE000, v36, v58, "%{public}s endpoint sockaddr has invalid length, no backtrace", v90, 0xCu);
          }
          goto LABEL_83;
        }
        if (v59)
        {
          *(_DWORD *)v90 = 136446466;
          v91 = "nw_endpoint_copy_address_string";
          v92 = 2082;
          v93[0] = v57;
          _os_log_impl(&dword_182FBE000, v36, v58, "%{public}s endpoint sockaddr has invalid length, dumping backtrace:%{public}s", v90, 0x16u);
        }

        free(v57);
        if (!v31)
        {
LABEL_87:
          v29 = 0;
LABEL_88:

          goto LABEL_89;
        }
LABEL_85:
        v62 = (char *)v31;
LABEL_86:
        free(v62);
        goto LABEL_87;
      }
      v50 = isa_low - 1;
      v29 = (char *)malloc_type_malloc(isa_low - 1, 0xF2B69DE5uLL);
      if (v29)
        goto LABEL_51;
      __nwlog_obj();
      v72 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v72, OS_LOG_TYPE_ERROR);
      *(_DWORD *)v90 = 136446466;
      v91 = "strict_malloc";
      v92 = 2048;
      v93[0] = v50;
      v73 = (void *)_os_log_send_and_compose_impl();

      result = (char *)__nwlog_abort((uint64_t)v73);
      if (!(_DWORD)result)
      {
        free(v73);
LABEL_51:
        memcpy(v29, (char *)&v5[29].isa + 2, v34);
        v29[v34] = 0;
        goto LABEL_88;
      }
      goto LABEL_109;
    case 2:
    case 18:
    case 30:
      v7 = getnameinfo((const sockaddr *)&v5[29], LOBYTE(v5[29].isa), (char *)v90, 0x46u, 0, 0, 2);
      if (v7)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        v9 = LOBYTE(v5[29].isa);
        v10 = gai_strerror(v7);
        *(_DWORD *)buf = 136447235;
        v79 = "nw_endpoint_copy_address_string";
        v80 = 1040;
        v81 = v9;
        v82 = 2101;
        v83 = v5 + 29;
        v84 = 1024;
        v85 = v7;
        v86 = 2082;
        v87 = v10;
        v11 = (const char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v76 = 0;
        if (__nwlog_fault(v11, &type, &v76))
        {
          if (type == OS_LOG_TYPE_FAULT)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v12 = (id)gLogObj;
            v13 = type;
            if (os_log_type_enabled(v12, type))
            {
              v14 = LOBYTE(v5[29].isa);
              v15 = gai_strerror(v7);
              *(_DWORD *)buf = 136447235;
              v79 = "nw_endpoint_copy_address_string";
              v80 = 1040;
              v81 = v14;
              v82 = 2101;
              v83 = v5 + 29;
              v84 = 1024;
              v85 = v7;
              v86 = 2082;
              v87 = v15;
              _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s getnameinfo(%{sensitive}.*P}): [%d] %{public}s failed", buf, 0x2Cu);
            }
          }
          else if (v76)
          {
            v44 = (char *)__nw_create_backtrace_string();
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v12 = (id)gLogObj;
            v45 = type;
            v46 = os_log_type_enabled(v12, type);
            if (v44)
            {
              if (v46)
              {
                v75 = LOBYTE(v5[29].isa);
                v47 = gai_strerror(v7);
                *(_DWORD *)buf = 136447491;
                v79 = "nw_endpoint_copy_address_string";
                v80 = 1040;
                v81 = v75;
                v82 = 2101;
                v83 = v5 + 29;
                v84 = 1024;
                v85 = v7;
                v86 = 2082;
                v87 = v47;
                v88 = 2082;
                v89 = v44;
                _os_log_impl(&dword_182FBE000, v12, v45, "%{public}s getnameinfo(%{sensitive}.*P}): [%d] %{public}s failed, dumping backtrace:%{public}s", buf, 0x36u);
              }

              free(v44);
              if (!v11)
                goto LABEL_87;
LABEL_71:
              v62 = (char *)v11;
              goto LABEL_86;
            }
            if (v46)
            {
              v60 = LOBYTE(v5[29].isa);
              v61 = gai_strerror(v7);
              *(_DWORD *)buf = 136447235;
              v79 = "nw_endpoint_copy_address_string";
              v80 = 1040;
              v81 = v60;
              v82 = 2101;
              v83 = v5 + 29;
              v84 = 1024;
              v85 = v7;
              v86 = 2082;
              v87 = v61;
              _os_log_impl(&dword_182FBE000, v12, v45, "%{public}s getnameinfo(%{sensitive}.*P}): [%d] %{public}s failed, no backtrace", buf, 0x2Cu);
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v12 = (id)gLogObj;
            v54 = type;
            if (os_log_type_enabled(v12, type))
            {
              v55 = LOBYTE(v5[29].isa);
              v56 = gai_strerror(v7);
              *(_DWORD *)buf = 136447235;
              v79 = "nw_endpoint_copy_address_string";
              v80 = 1040;
              v81 = v55;
              v82 = 2101;
              v83 = v5 + 29;
              v84 = 1024;
              v85 = v7;
              v86 = 2082;
              v87 = v56;
              _os_log_impl(&dword_182FBE000, v12, v54, "%{public}s getnameinfo(%{sensitive}.*P}): [%d] %{public}s failed, backtrace limit exceeded", buf, 0x2Cu);
            }
          }

        }
        if (!v11)
          goto LABEL_87;
        goto LABEL_71;
      }
      v29 = strdup((const char *)v90);
      if (v29)
        goto LABEL_88;
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v30, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v79 = "strict_strdup";
      v31 = (const char *)_os_log_send_and_compose_impl();

      result = (char *)__nwlog_abort((uint64_t)v31);
      if (!(_DWORD)result)
        goto LABEL_85;
LABEL_109:
      __break(1u);
      return result;
    default:
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v38 = (id)gLogObj;
      *(_DWORD *)v90 = 136446466;
      v91 = "nw_endpoint_copy_address_string";
      v92 = 1024;
      LODWORD(v93[0]) = address_family;
      v31 = (const char *)_os_log_send_and_compose_impl();

      buf[0] = 16;
      type = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v31, buf, &type))
        goto LABEL_84;
      if (buf[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v39 = (id)gLogObj;
        v40 = buf[0];
        if (os_log_type_enabled(v39, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v90 = 136446466;
          v91 = "nw_endpoint_copy_address_string";
          v92 = 1024;
          LODWORD(v93[0]) = address_family;
          _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s endpoint has unknown address family %d", v90, 0x12u);
        }
      }
      else if (type)
      {
        v51 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v52 = buf[0];
        v53 = os_log_type_enabled(v39, (os_log_type_t)buf[0]);
        if (v51)
        {
          if (v53)
          {
            *(_DWORD *)v90 = 136446722;
            v91 = "nw_endpoint_copy_address_string";
            v92 = 1024;
            LODWORD(v93[0]) = address_family;
            WORD2(v93[0]) = 2082;
            *(_QWORD *)((char *)v93 + 6) = v51;
            _os_log_impl(&dword_182FBE000, v39, v52, "%{public}s endpoint has unknown address family %d, dumping backtrace:%{public}s", v90, 0x1Cu);
          }

          free(v51);
          if (!v31)
            goto LABEL_87;
          goto LABEL_85;
        }
        if (v53)
        {
          *(_DWORD *)v90 = 136446466;
          v91 = "nw_endpoint_copy_address_string";
          v92 = 1024;
          LODWORD(v93[0]) = address_family;
          _os_log_impl(&dword_182FBE000, v39, v52, "%{public}s endpoint has unknown address family %d, no backtrace", v90, 0x12u);
        }
      }
      else
      {
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v63 = buf[0];
        if (os_log_type_enabled(v39, (os_log_type_t)buf[0]))
        {
          *(_DWORD *)v90 = 136446466;
          v91 = "nw_endpoint_copy_address_string";
          v92 = 1024;
          LODWORD(v93[0]) = address_family;
          _os_log_impl(&dword_182FBE000, v39, v63, "%{public}s endpoint has unknown address family %d, backtrace limit exceeded", v90, 0x12u);
        }
      }

      goto LABEL_84;
  }
}

void sub_1830ABF34(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_get_address_family(void *a1)
{
  id v1;
  void *v2;
  unsigned __int8 *v3;
  int v4;
  uint64_t v5;
  id v6;
  unsigned __int8 *v7;
  int v8;
  const char *v9;
  NSObject *v10;
  os_log_type_t v11;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  unsigned __int8 *v17;
  int v18;
  os_log_type_t v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  char *v24;
  void *v26;
  const char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  os_log_type_t v33;
  uint64_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  _WORD v40[17];

  *(_QWORD *)&v40[13] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v26 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v38 = "nw_endpoint_get_address_family";
    v27 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v27, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_address_family";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v28, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_endpoint_get_address_family";
            v39 = 2082;
            *(_QWORD *)v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_42;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_address_family";
          _os_log_impl(&dword_182FBE000, v28, v31, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_endpoint_get_address_family";
          _os_log_impl(&dword_182FBE000, v28, v33, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_42:
    if (!v27)
      goto LABEL_24;
    v24 = (char *)v27;
    goto LABEL_23;
  }
  v3 = (unsigned __int8 *)v1;
  v4 = objc_msgSend(v3, "type");

  if (v4 != 1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    v7 = v3;
    v8 = objc_msgSend(v7, "type");

    *(_DWORD *)buf = 136446466;
    v38 = "nw_endpoint_get_address_family";
    v39 = 1024;
    *(_DWORD *)v40 = v8;
    LODWORD(v34) = 18;
    v9 = (const char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v9, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          v12 = v7;
          v13 = objc_msgSend(v12, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_address_family";
          v39 = 1024;
          *(_DWORD *)v40 = v13;
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s incorrect endpoint type %u", buf, 0x12u);
        }
      }
      else if (v35)
      {
        v14 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v15 = type;
        v16 = os_log_type_enabled(v10, type);
        if (v14)
        {
          if (v16)
          {
            v17 = v7;
            v18 = objc_msgSend(v17, "type", buf, v34);

            *(_DWORD *)buf = 136446722;
            v38 = "nw_endpoint_get_address_family";
            v39 = 1024;
            *(_DWORD *)v40 = v18;
            v40[2] = 2082;
            *(_QWORD *)&v40[3] = v14;
            _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }

          free(v14);
          if (!v9)
            goto LABEL_24;
LABEL_22:
          v24 = (char *)v9;
LABEL_23:
          free(v24);
          goto LABEL_24;
        }
        if (v16)
        {
          v22 = v7;
          v23 = objc_msgSend(v22, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_address_family";
          v39 = 1024;
          *(_DWORD *)v40 = v23;
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s incorrect endpoint type %u, no backtrace", buf, 0x12u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        v19 = type;
        if (os_log_type_enabled(v10, type))
        {
          v20 = v7;
          v21 = objc_msgSend(v20, "type", buf, v34);

          *(_DWORD *)buf = 136446466;
          v38 = "nw_endpoint_get_address_family";
          v39 = 1024;
          *(_DWORD *)v40 = v21;
          _os_log_impl(&dword_182FBE000, v10, v19, "%{public}s incorrect endpoint type %u, backtrace limit exceeded", buf, 0x12u);
        }
      }

    }
    if (!v9)
    {
LABEL_24:
      v5 = 0;
      goto LABEL_25;
    }
    goto LABEL_22;
  }
  v5 = v3[233];
LABEL_25:

  return v5;
}

void sub_1830AC590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_csum_flags(void *a1)
{
  NWConcrete_nw_path *v1;
  NWConcrete_nw_path *v2;
  OS_nw_interface *direct;
  OS_nw_interface *v4;
  uint64_t v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_path_get_csum_flags";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_path_get_csum_flags";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_path_get_csum_flags";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_path_get_csum_flags";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_path_get_csum_flags";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v7)
      free(v7);
    goto LABEL_23;
  }
  if (!nw_path_network_is_satisfied_update_reason(v1, 0) || (direct = v2->direct) == 0)
  {
LABEL_23:
    v5 = 0;
    goto LABEL_24;
  }
  v4 = direct;
  v5 = *((unsigned int *)v4 + 20);

LABEL_24:
  return v5;
}

void sub_1830AC8A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_ip_options_get_hop_limit(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_get_hop_limit_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(unsigned __int8 *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_options_get_hop_limit";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_options_get_hop_limit";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_hop_limit";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1830ACBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_ip_options_get_fragmentation_value(void *a1)
{
  id v1;
  uint64_t v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  int v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_ip(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    v16 = 0;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_ip_options_get_fragmentation_value_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(unsigned int *)(*(_QWORD *)&buf[8] + 24);
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_ip_options_get_fragmentation_value";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_fragmentation_value";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_ip(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_ip_options_get_fragmentation_value";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_fragmentation_value";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_ip(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_ip_options_get_fragmentation_value";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_ip(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1830ACED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_maximum_packet_size(void *a1)
{
  void **v1;
  void **v2;
  uint64_t mtu;
  uint64_t v4;
  unsigned int v5;
  void *v6;
  id v7;
  int v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *backtrace_string;
  os_log_type_t v15;
  _BOOL4 v16;
  os_log_type_t v17;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    mtu = nw_path_get_mtu(v1);
    v4 = mtu;
    if ((_DWORD)mtu)
      v5 = mtu;
    else
      v5 = 1500;
    if (v5 >= 0x28)
    {
      v6 = v2[3];
      if (v6
        && (v7 = v6, v8 = objc_msgSend(v7, "type"), v7, v8 == 1)
        && nw_endpoint_get_address_family(v2[3]) == 2)
      {
        v4 = v5 - 20;
      }
      else
      {
        v4 = v5 - 40;
      }
    }
    goto LABEL_11;
  }
  __nwlog_obj();
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v21 = "nw_path_get_maximum_packet_size";
  v11 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v18 = 0;
  if (__nwlog_fault(v11, &type, &v18))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_path_get_maximum_packet_size";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v18)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      v16 = os_log_type_enabled(v12, type);
      if (backtrace_string)
      {
        if (v16)
        {
          *(_DWORD *)buf = 136446466;
          v21 = "nw_path_get_maximum_packet_size";
          v22 = 2082;
          v23 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_28;
      }
      if (v16)
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_path_get_maximum_packet_size";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v21 = "nw_path_get_maximum_packet_size";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_28:
  if (v11)
    free(v11);
  v4 = 0;
LABEL_11:

  return v4;
}

void sub_1830AD1E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_path_get_mtu(void *a1)
{
  NWConcrete_nw_path *v1;
  NWConcrete_nw_path *v2;
  uint64_t effective_mtu;
  OS_nw_interface *direct;
  OS_nw_interface *v5;
  NSObject *v6;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_path_get_mtu";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (__nwlog_fault(v9, &type, &v16))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_get_mtu";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null path", buf, 0xCu);
        }
      }
      else if (v16)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v19 = "nw_path_get_mtu";
            v20 = 2082;
            v21 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_27;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_get_mtu";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v19 = "nw_path_get_mtu";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_27:
    if (v9)
      free(v9);
    goto LABEL_9;
  }
  if (!nw_path_network_is_satisfied_update_reason(v1, 0))
    goto LABEL_9;
  effective_mtu = v2->effective_mtu;
  if (!(_DWORD)effective_mtu)
  {
    direct = v2->direct;
    if (direct)
    {
      v5 = direct;
      effective_mtu = *((unsigned int *)v5 + 15);

      goto LABEL_10;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v6 = (id)gLogObj;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      v19 = "nw_path_get_mtu";
      _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_ERROR, "%{public}s Unable to determine MTU for path", buf, 0xCu);
    }

LABEL_9:
    effective_mtu = 0;
  }
LABEL_10:

  return effective_mtu;
}

void sub_1830AD538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

const char *nw_protocol_get_name(uint64_t a1)
{
  const char *result;
  uint64_t v3;

  result = "invalid";
  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 16);
    if (v3)
      return (const char *)v3;
  }
  return result;
}

uint64_t nw_protocol_default_register_notification(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_default_register_notification";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_register_notification";
      v8 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_default_register_notification";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (!v10)
      {
LABEL_20:
        if (v5)
          free(v5);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_register_notification";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_register_notification";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_20;
  }
  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      v3 = *(uint64_t (**)(void))(v2 + 144);
      if (v3)
        return v3();
    }
  }
  return 0;
}

uint64_t nw_interface_get_subtype(void *a1)
{
  unsigned int *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[25];
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_interface_get_subtype";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_get_subtype";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null interface", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_interface_get_subtype";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_get_subtype";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null interface, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_interface_get_subtype";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_parse_necp_result(void *a1, uint64_t a2, unint64_t a3)
{
  id v5;
  const char *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  necp_client_result_netagent *v14;
  unint64_t v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  int v19;
  unint64_t v20;
  necp_client_result_netagent *v22;
  id v23;
  void *v24;
  NSObject *v25;
  os_log_type_t v26;
  unint64_t v27;
  char *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  BOOL v32;
  unsigned int v33;
  nw_endpoint_t v34;
  NSObject *v35;
  uint64_t group_members;
  _BOOL8 v37;
  OS_nw_array *v38;
  NSObject *flow_result_from_tlv;
  uint64_t flows;
  _BOOL8 v41;
  OS_nw_array *v42;
  __int128 v43;
  in6_addr v44;
  in6_addr v45;
  NWConcrete_nw_path *v46;
  unsigned int v47;
  unsigned int v48;
  necp_client_result_netagent *v49;
  __int128 v50;
  char *v51;
  NWConcrete_nw_path *v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  NWConcrete_nw_path *v56;
  NSObject *v57;
  NWConcrete_nw_path *v58;
  unsigned int v59;
  __int128 v60;
  char *v61;
  void *v62;
  nw_endpoint_t v63;
  uint64_t gateways;
  _BOOL8 v65;
  OS_nw_array *v66;
  NSObject *v67;
  NSObject *v68;
  NSObject *v69;
  NSObject *v70;
  necp_client_result_netagent *v71;
  NSObject *v72;
  NSObject *v73;
  NSObject *v74;
  NSObject *v75;
  NSObject *v76;
  NSObject *v77;
  NSObject *v78;
  NSObject *v79;
  NSObject *v80;
  NSObject *v81;
  NSObject *v82;
  NSObject *v83;
  NSObject *v84;
  NSObject *v85;
  NSObject *v86;
  NSObject *v87;
  necp_client_result_netagent *v88;
  NSObject *v89;
  void *v90;
  _BOOL8 result;
  NSObject *v92;
  void *v93;
  necp_client_result_netagent *v94;
  NSObject *v95;
  void *v96;
  necp_client_result_netagent *v97;
  NSObject *v98;
  void *v99;
  necp_client_result_netagent *v100;
  id v101;
  char *v102;
  NSObject *v103;
  os_log_type_t v104;
  os_log_type_t v105;
  const char *v106;
  char *v107;
  NSObject *v108;
  os_log_type_t v109;
  char *v110;
  uint64_t v111;
  os_log_type_t v112;
  os_log_type_t v113;
  NWConcrete_nw_path *v114;
  unsigned int routed_interface_index;
  unsigned int direct_interface_index;
  NSObject *v117;
  unsigned int v118;
  unsigned int v119;
  necp_client_result_netagent *netagents;
  necp_client_interface_option *interface_options;
  void *v122;
  const char *v123;
  NSObject *v124;
  os_log_type_t v125;
  void *v126;
  os_log_type_t v127;
  void *v128;
  os_log_type_t v129;
  char *backtrace_string;
  os_log_type_t v131;
  _BOOL4 v132;
  char *v133;
  os_log_type_t v134;
  _BOOL4 v135;
  NSObject *v136;
  void *v137;
  os_log_type_t v138;
  _BOOL4 v139;
  necp_client_result_netagent *v140;
  void *v141;
  char *v142;
  NSObject *v143;
  os_log_type_t v144;
  char *v145;
  NSObject *v146;
  os_log_type_t v147;
  _BOOL4 v148;
  os_log_type_t v149;
  os_log_type_t v150;
  os_log_type_t v151;
  os_log_type_t v152;
  _BYTE *v153;
  unsigned int v154;
  unsigned int v155;
  unsigned __int8 *uu;
  necp_client_interface_option *__ptr;
  uint64_t v158;
  NSObject *v159;
  NWConcrete_nw_path *v160;
  char v161;
  __int128 v162;
  _BYTE buf[12];
  __int16 v164;
  _BYTE v165[34];
  uint64_t v166;

  v166 = *MEMORY[0x1E0C80C00];
  v160 = a1;
  if (!v160)
  {
    __nwlog_obj();
    v122 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
    v123 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    v161 = 0;
    if (!__nwlog_fault(v123, &v162, &v161))
      goto LABEL_364;
    if (v162 == 17)
    {
      __nwlog_obj();
      v124 = objc_claimAutoreleasedReturnValue();
      v125 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_182FBE000, v124, v125, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v161)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v124 = objc_claimAutoreleasedReturnValue();
      v131 = v162;
      v132 = os_log_type_enabled(v124, (os_log_type_t)v162);
      if (backtrace_string)
      {
        if (v132)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
          v164 = 2082;
          *(_QWORD *)v165 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v124, v131, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_364:
        if (!v123)
          goto LABEL_272;
        goto LABEL_365;
      }
      if (v132)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_182FBE000, v124, v131, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v124 = objc_claimAutoreleasedReturnValue();
      v149 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_182FBE000, v124, v149, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_363:

    goto LABEL_364;
  }
  if (!a2)
  {
    __nwlog_obj();
    v126 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
    v123 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    v161 = 0;
    if (!__nwlog_fault(v123, &v162, &v161))
      goto LABEL_364;
    if (v162 == 17)
    {
      __nwlog_obj();
      v124 = objc_claimAutoreleasedReturnValue();
      v127 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_182FBE000, v124, v127, "%{public}s called with null result", buf, 0xCu);
      }
      goto LABEL_363;
    }
    if (!v161)
    {
      __nwlog_obj();
      v124 = objc_claimAutoreleasedReturnValue();
      v150 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_182FBE000, v124, v150, "%{public}s called with null result, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_363;
    }
    v133 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v124 = objc_claimAutoreleasedReturnValue();
    v134 = v162;
    v135 = os_log_type_enabled(v124, (os_log_type_t)v162);
    if (!v133)
    {
      if (v135)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_182FBE000, v124, v134, "%{public}s called with null result, no backtrace", buf, 0xCu);
      }
      goto LABEL_363;
    }
    if (v135)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
      v164 = 2082;
      *(_QWORD *)v165 = v133;
      _os_log_impl(&dword_182FBE000, v124, v134, "%{public}s called with null result, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_334;
  }
  if (!a3)
  {
    __nwlog_obj();
    v128 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
    v123 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    v161 = 0;
    if (!__nwlog_fault(v123, &v162, &v161))
      goto LABEL_364;
    if (v162 == 17)
    {
      __nwlog_obj();
      v124 = objc_claimAutoreleasedReturnValue();
      v129 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_182FBE000, v124, v129, "%{public}s called with null result_length", buf, 0xCu);
      }
      goto LABEL_363;
    }
    if (!v161)
    {
      __nwlog_obj();
      v124 = objc_claimAutoreleasedReturnValue();
      v151 = v162;
      if (os_log_type_enabled(v124, (os_log_type_t)v162))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_182FBE000, v124, v151, "%{public}s called with null result_length, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_363;
    }
    v133 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v124 = objc_claimAutoreleasedReturnValue();
    v138 = v162;
    v139 = os_log_type_enabled(v124, (os_log_type_t)v162);
    if (!v133)
    {
      if (v139)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
        _os_log_impl(&dword_182FBE000, v124, v138, "%{public}s called with null result_length, no backtrace", buf, 0xCu);
      }
      goto LABEL_363;
    }
    if (v139)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
      v164 = 2082;
      *(_QWORD *)v165 = v133;
      _os_log_impl(&dword_182FBE000, v124, v138, "%{public}s called with null result_length, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_334:

    free(v133);
    if (!v123)
      goto LABEL_272;
LABEL_365:
    v110 = (char *)v123;
    goto LABEL_271;
  }
  if (a3 <= 4)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
    v164 = 2048;
    *(_QWORD *)v165 = a3;
    v6 = (const char *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    v161 = 0;
    if (__nwlog_fault(v6, &v162, &v161))
    {
      if (v162 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v8 = v162;
        if (os_log_type_enabled(v7, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
          v164 = 2048;
          *(_QWORD *)v165 = a3;
          _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s NECP buffer too short %zu", buf, 0x16u);
        }
      }
      else if (v161)
      {
        v16 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v17 = v162;
        v18 = os_log_type_enabled(v7, (os_log_type_t)v162);
        if (v16)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
            v164 = 2048;
            *(_QWORD *)v165 = a3;
            *(_WORD *)&v165[8] = 2082;
            *(_QWORD *)&v165[10] = v16;
            _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s NECP buffer too short %zu, dumping backtrace:%{public}s", buf, 0x20u);
          }

          free(v16);
          if (!v6)
            goto LABEL_272;
LABEL_270:
          v110 = (char *)v6;
LABEL_271:
          free(v110);
          goto LABEL_272;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
          v164 = 2048;
          *(_QWORD *)v165 = a3;
          _os_log_impl(&dword_182FBE000, v7, v17, "%{public}s NECP buffer too short %zu, no backtrace", buf, 0x16u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v7 = (id)gLogObj;
        v105 = v162;
        if (os_log_type_enabled(v7, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
          v164 = 2048;
          *(_QWORD *)v165 = a3;
          _os_log_impl(&dword_182FBE000, v7, v105, "%{public}s NECP buffer too short %zu, backtrace limit exceeded", buf, 0x16u);
        }
      }

    }
    if (!v6)
    {
LABEL_272:
      v111 = 0;
      goto LABEL_302;
    }
    goto LABEL_270;
  }
  v14 = (necp_client_result_netagent *)malloc_type_malloc(0xA0uLL, 0xF2B69DE5uLL);
  if (!v14)
  {
    __nwlog_obj();
    v136 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v136, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "strict_malloc";
    v164 = 2048;
    *(_QWORD *)v165 = 160;
    v153 = buf;
    v137 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v137);
    if (result)
    {
LABEL_375:
      __break(1u);
      return result;
    }
    free(v137);
  }
  if (a3 == 5)
  {
    __ptr = 0;
    v158 = 0;
    v159 = 0;
    v15 = 0;
    goto LABEL_282;
  }
  v15 = 0;
  v158 = 0;
  v159 = 0;
  __ptr = 0;
  uu = v160->client_id;
  v154 = 0;
  v155 = 8;
  while (1)
  {
    v19 = *(unsigned __int8 *)(a2 + v15);
    v20 = *(unsigned int *)(a2 + 1 + v15);
    if (!(_DWORD)v20)
    {
      v27 = 0;
      goto LABEL_50;
    }
    if (v20 <= 0xFFFFFFF9 && a3 >= v20 + 5 && a3 - (v20 + 5) >= v15)
    {
      v27 = a2 + 5 + v15;
      goto LABEL_50;
    }
    v22 = v14;
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v23 = (id)gLogObj;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
    v164 = 2048;
    *(_QWORD *)v165 = v15;
    *(_WORD *)&v165[8] = 2048;
    *(_QWORD *)&v165[10] = a3;
    *(_WORD *)&v165[18] = 1024;
    *(_DWORD *)&v165[20] = v20;
    v153 = buf;
    v24 = (void *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    v161 = 0;
    if (__nwlog_fault((const char *)v24, &v162, &v161))
    {
      if (v162 == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v26 = v162;
        if (os_log_type_enabled(v25, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
          v164 = 2048;
          *(_QWORD *)v165 = v15;
          *(_WORD *)&v165[8] = 2048;
          *(_QWORD *)&v165[10] = a3;
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v20;
          _os_log_impl(&dword_182FBE000, v25, v26, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u", buf, 0x26u);
        }
      }
      else if (v161)
      {
        v28 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v29 = v162;
        v30 = os_log_type_enabled(v25, (os_log_type_t)v162);
        if (v28)
        {
          if (v30)
          {
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
            v164 = 2048;
            *(_QWORD *)v165 = v15;
            *(_WORD *)&v165[8] = 2048;
            *(_QWORD *)&v165[10] = a3;
            *(_WORD *)&v165[18] = 1024;
            *(_DWORD *)&v165[20] = v20;
            *(_WORD *)&v165[24] = 2082;
            *(_QWORD *)&v165[26] = v28;
            _os_log_impl(&dword_182FBE000, v25, v29, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, dumping backtrace:%{public}s", buf, 0x30u);
          }

          free(v28);
          if (!v24)
            goto LABEL_49;
LABEL_48:
          free(v24);
          goto LABEL_49;
        }
        if (v30)
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
          v164 = 2048;
          *(_QWORD *)v165 = v15;
          *(_WORD *)&v165[8] = 2048;
          *(_QWORD *)&v165[10] = a3;
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v20;
          _os_log_impl(&dword_182FBE000, v25, v29, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, no backtrace", buf, 0x26u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v25 = (id)gLogObj;
        v31 = v162;
        if (os_log_type_enabled(v25, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_necp_buffer_get_tlv_value";
          v164 = 2048;
          *(_QWORD *)v165 = v15;
          *(_WORD *)&v165[8] = 2048;
          *(_QWORD *)&v165[10] = a3;
          *(_WORD *)&v165[18] = 1024;
          *(_DWORD *)&v165[20] = v20;
          _os_log_impl(&dword_182FBE000, v25, v31, "%{public}s buffer too short tlv_offset=%zu buffer_length=%zu value_length=%u, backtrace limit exceeded", buf, 0x26u);
        }
      }

    }
    if (v24)
      goto LABEL_48;
LABEL_49:
    v27 = 0;
    v14 = v22;
LABEL_50:
    v15 += v20 + 5;
    if (v15 > a3)
      break;
    if ((_DWORD)v20)
      v32 = v27 == 0;
    else
      v32 = 1;
    if (!v32)
    {
      switch(v19)
      {
        case 1:
          v162 = 0uLL;
          if ((_DWORD)v20 == 16)
            goto LABEL_57;
          if (v20 < 0x11)
            break;
          __nwlog_obj();
          v68 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            v164 = 1024;
            *(_DWORD *)v165 = 1;
            *(_WORD *)&v165[4] = 1024;
            *(_DWORD *)&v165[6] = v20;
            *(_WORD *)&v165[10] = 1024;
            *(_DWORD *)&v165[12] = 16;
            _os_log_impl(&dword_182FBE000, v68, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_57:
          v162 = *(_OWORD *)v27;
          if (uuid_is_null(uu))
          {
            *(_OWORD *)uu = v162;
          }
          else if (*(_OWORD *)v160->client_id != v162)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            flow_result_from_tlv = (id)gLogObj;
            if (os_log_type_enabled(flow_result_from_tlv, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)buf = 136447234;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
              v164 = 1042;
              *(_DWORD *)v165 = 16;
              *(_WORD *)&v165[4] = 2098;
              *(_QWORD *)&v165[6] = &v162;
              *(_WORD *)&v165[14] = 1042;
              *(_DWORD *)&v165[16] = 16;
              *(_WORD *)&v165[20] = 2098;
              *(_QWORD *)&v165[22] = v160->client_id;
              _os_log_impl(&dword_182FBE000, flow_result_from_tlv, OS_LOG_TYPE_INFO, "%{public}s Client ID from NECP (%{public,uuid_t}.16P) does not match path (%{public,uuid_t}.16P)", buf, 0x2Cu);
            }
LABEL_20:

          }
          break;
        case 2:
          v52 = v160;
          v160->policy_result.routing_result = 0;
          if ((_DWORD)v20 == 4)
            goto LABEL_93;
          v71 = v14;
          if (v20 < 5)
            goto LABEL_239;
          __nwlog_obj();
          v79 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v79, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            v164 = 1024;
            *(_DWORD *)v165 = 2;
            *(_WORD *)&v165[4] = 1024;
            *(_DWORD *)&v165[6] = v20;
            *(_WORD *)&v165[10] = 1024;
            *(_DWORD *)&v165[12] = 4;
            _os_log_impl(&dword_182FBE000, v79, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

          v52 = v160;
LABEL_93:
          v52->policy_result.routing_result = *(_DWORD *)v27;
          break;
        case 3:
          v46 = v160;
          v160->policy_result.routing_result_parameter.tunnel_interface_index = 0;
          if ((_DWORD)v20 == 4)
            goto LABEL_81;
          if (v20 >= 5)
          {
            __nwlog_obj();
            v75 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 3;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 4;
              _os_log_impl(&dword_182FBE000, v75, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

            v46 = v160;
LABEL_81:
            v46->policy_result.routing_result_parameter.tunnel_interface_index = *(_DWORD *)v27;
          }
          break;
        case 4:
          v58 = v160;
          v160->policy_result.filter_control_unit = 0;
          if ((_DWORD)v20 == 4)
            goto LABEL_119;
          if (v20 >= 5)
          {
            __nwlog_obj();
            v83 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 4;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 4;
              _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

            v58 = v160;
LABEL_119:
            v58->policy_result.filter_control_unit = *(_DWORD *)v27;
          }
          break;
        case 5:
          if ((_DWORD)v20 == 4)
            goto LABEL_121;
          if (v20 >= 5)
          {
            __nwlog_obj();
            v84 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 5;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 4;
              _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_121:
            v160->policy_result.routed_interface_index = *(_DWORD *)v27;
          }
          break;
        case 6:
          v47 = v155;
          if (HIDWORD(v158) < v155)
            goto LABEL_86;
          v48 = v155 + 8;
          if (v155 != -8)
            goto LABEL_84;
          v88 = v14;
          __nwlog_obj();
          v89 = objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v89, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "_strict_reallocf";
          v153 = buf;
          v90 = (void *)_os_log_send_and_compose_impl();

          result = __nwlog_abort((uint64_t)v90);
          if (result)
            goto LABEL_375;
          free(v90);
          v14 = v88;
LABEL_84:
          v47 = v155 + 8;
          v49 = (necp_client_result_netagent *)reallocf(v14, 20 * v48);
          if (v49)
          {
            v14 = v49;
          }
          else
          {
            __nwlog_obj();
            v92 = objc_claimAutoreleasedReturnValue();
            os_log_type_enabled(v92, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "_strict_reallocf";
            v164 = 2048;
            *(_QWORD *)v165 = 20 * v48;
            v153 = buf;
            v93 = (void *)_os_log_send_and_compose_impl();

            result = __nwlog_abort((uint64_t)v93);
            if (result)
              goto LABEL_375;
            free(v93);
            v14 = 0;
          }
LABEL_86:
          v155 = v47;
          if ((_DWORD)v20 == 20)
            goto LABEL_87;
          if (v20 >= 0x15)
          {
            __nwlog_obj();
            v76 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v76, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 6;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 20;
              _os_log_impl(&dword_182FBE000, v76, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_87:
            v50 = *(_OWORD *)v27;
            v51 = (char *)&v14[HIDWORD(v158)];
            *((_DWORD *)v51 + 4) = *(_DWORD *)(v27 + 16);
            *(_OWORD *)v51 = v50;
            ++HIDWORD(v158);
          }
          break;
        case 7:
          if ((_DWORD)v20 == 4)
            goto LABEL_95;
          if (v20 < 5)
            break;
          __nwlog_obj();
          v80 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v80, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            v164 = 1024;
            *(_DWORD *)v165 = 7;
            *(_WORD *)&v165[4] = 1024;
            *(_DWORD *)&v165[6] = v20;
            *(_WORD *)&v165[10] = 1024;
            *(_DWORD *)&v165[12] = 4;
            _os_log_impl(&dword_182FBE000, v80, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_95:
          v53 = *(_DWORD *)v27;
          if ((*(_DWORD *)v27 & 1) != 0)
          {
            *((_BYTE *)v160 + 473) |= 0x10u;
            if ((v53 & 2) == 0)
            {
LABEL_97:
              if ((v53 & 4) == 0)
                goto LABEL_98;
              goto LABEL_143;
            }
          }
          else if ((v53 & 2) == 0)
          {
            goto LABEL_97;
          }
          *((_BYTE *)v160 + 473) |= 0x20u;
          if ((v53 & 4) == 0)
          {
LABEL_98:
            if ((v53 & 8) == 0)
              goto LABEL_99;
            goto LABEL_144;
          }
LABEL_143:
          *((_BYTE *)v160 + 473) |= 0x40u;
          if ((v53 & 8) == 0)
          {
LABEL_99:
            if ((v53 & 0x2000) == 0)
              goto LABEL_100;
            goto LABEL_145;
          }
LABEL_144:
          *((_BYTE *)v160 + 473) |= 0x80u;
          if ((v53 & 0x2000) == 0)
          {
LABEL_100:
            if ((v53 & 0x10000) == 0)
              goto LABEL_101;
            goto LABEL_146;
          }
LABEL_145:
          *((_BYTE *)v160 + 474) |= 1u;
          if ((v53 & 0x10000) == 0)
          {
LABEL_101:
            if ((v53 & 0x20000) == 0)
              goto LABEL_102;
            goto LABEL_147;
          }
LABEL_146:
          *((_BYTE *)v160 + 476) |= 8u;
          if ((v53 & 0x20000) == 0)
          {
LABEL_102:
            if ((v53 & 0x40000) == 0)
              goto LABEL_103;
            goto LABEL_148;
          }
LABEL_147:
          *((_BYTE *)v160 + 476) |= 0x10u;
          if ((v53 & 0x40000) == 0)
          {
LABEL_103:
            if ((v53 & 0x80000) == 0)
              goto LABEL_104;
            goto LABEL_149;
          }
LABEL_148:
          *((_BYTE *)v160 + 476) |= 0x20u;
          if ((v53 & 0x80000) == 0)
          {
LABEL_104:
            if ((v53 & 0x20) == 0)
              goto LABEL_105;
            goto LABEL_150;
          }
LABEL_149:
          *((_BYTE *)v160 + 476) |= 0x40u;
          if ((v53 & 0x20) == 0)
          {
LABEL_105:
            if ((v53 & 0x100) == 0)
              goto LABEL_106;
            goto LABEL_151;
          }
LABEL_150:
          *((_BYTE *)v160 + 474) |= 4u;
          if ((v53 & 0x100) == 0)
          {
LABEL_106:
            if ((v53 & 0x800) == 0)
              goto LABEL_107;
            goto LABEL_152;
          }
LABEL_151:
          *((_BYTE *)v160 + 474) |= 0x20u;
          if ((v53 & 0x800) == 0)
          {
LABEL_107:
            if ((v53 & 0x8000) == 0)
              break;
            goto LABEL_153;
          }
LABEL_152:
          *((_BYTE *)v160 + 474) |= 0x40u;
          if ((v53 & 0x8000) == 0)
            break;
LABEL_153:
          *((_BYTE *)v160 + 475) |= 4u;
          break;
        case 8:
          if ((_DWORD)v20 == 8)
            goto LABEL_110;
          if (v20 >= 9)
          {
            __nwlog_obj();
            v81 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v81, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 8;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 8;
              _os_log_impl(&dword_182FBE000, v81, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_110:
            v54 = *(_DWORD *)v27;
            v55 = *(_DWORD *)(v27 + 4);
            if (v160->policy_result.direct_interface_index)
            {
              if (!v160->policy_result.delegate_interface_index)
              {
                v160->policy_result.delegate_interface_index = v55;
                v160->policy_result.delegate_interface_generation = v54;
              }
            }
            else
            {
              v160->policy_result.direct_interface_index = v55;
              v160->policy_result.direct_interface_generation = v54;
            }
          }
          break;
        case 9:
          if ((_DWORD)v20 == 24)
            goto LABEL_125;
          if (v20 < 0x19)
            break;
          __nwlog_obj();
          v86 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v86, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446978;
            *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
            v164 = 1024;
            *(_DWORD *)v165 = 9;
            *(_WORD *)&v165[4] = 1024;
            *(_DWORD *)&v165[6] = v20;
            *(_WORD *)&v165[10] = 1024;
            *(_DWORD *)&v165[12] = 24;
            _os_log_impl(&dword_182FBE000, v86, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
          }

LABEL_125:
          if (v158 < v154)
            goto LABEL_128;
          v59 = v154 + 8;
          if (v154 != -8)
            goto LABEL_127;
          v94 = v14;
          __nwlog_obj();
          v95 = objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v95, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "_strict_reallocf";
          v153 = buf;
          v96 = (void *)_os_log_send_and_compose_impl();

          result = __nwlog_abort((uint64_t)v96);
          if (result)
            goto LABEL_375;
          free(v96);
          v14 = v94;
LABEL_127:
          v154 += 8;
          __ptr = (necp_client_interface_option *)reallocf(__ptr, 24 * v59);
          if (__ptr)
            goto LABEL_128;
          v97 = v14;
          __nwlog_obj();
          v98 = objc_claimAutoreleasedReturnValue();
          os_log_type_enabled(v98, OS_LOG_TYPE_ERROR);
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "_strict_reallocf";
          v164 = 2048;
          *(_QWORD *)v165 = 24 * v59;
          v153 = buf;
          v99 = (void *)_os_log_send_and_compose_impl();

          result = __nwlog_abort((uint64_t)v99);
          if (result)
            goto LABEL_375;
          free(v99);
          __ptr = 0;
          v14 = v97;
LABEL_128:
          v60 = *(_OWORD *)v27;
          v61 = (char *)__ptr + 24 * v158;
          *((_QWORD *)v61 + 2) = *(_QWORD *)(v27 + 16);
          *(_OWORD *)v61 = v60;
          LODWORD(v158) = v158 + 1;
          break;
        case 10:
          if ((_DWORD)v20 == 4)
            goto LABEL_123;
          if (v20 >= 5)
          {
            __nwlog_obj();
            v85 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 10;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 4;
              _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_123:
            v160->effective_mtu = *(_DWORD *)v27;
          }
          break;
        case 11:
          flow_result_from_tlv = nw_path_create_flow_result_from_tlv(v160, (const unsigned __int8 *)v27, v20);
          if (flow_result_from_tlv)
          {
            flows = (uint64_t)v160->flows;
            if (!flows)
            {
              v41 = nw_array_create();
              v42 = v160->flows;
              v160->flows = (OS_nw_array *)v41;

              flows = (uint64_t)v160->flows;
            }
            nw_array_append(flows, flow_result_from_tlv);
          }
          goto LABEL_20;
        case 15:
          if ((_DWORD)v20 != 1)
          {
            __nwlog_obj();
            v77 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v77, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 15;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 1;
              _os_log_impl(&dword_182FBE000, v77, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

          }
          v160->recommended_mss = *(_BYTE *)v27;
          break;
        case 17:
          if ((_DWORD)v20 == 4)
            goto LABEL_77;
          if (v20 >= 5)
          {
            __nwlog_obj();
            v73 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 17;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 4;
              _os_log_impl(&dword_182FBE000, v73, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_77:
            v160->interface_time_delta = *(_DWORD *)v27;
          }
          break;
        case 18:
          if ((_DWORD)v20 == 4)
            goto LABEL_62;
          if (v20 >= 5)
          {
            __nwlog_obj();
            v70 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 18;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 4;
              _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_62:
            v33 = *(_DWORD *)v27 - 1;
            if (v33 <= 5)
              nw_path_set_reason(v160, dword_183C6E2CC[v33], off_1E14A7968[v33], v9, v10, v11, v12, v13, (char)v153);
          }
          break;
        case 19:
          v56 = v160;
          v160->policy_result.flow_divert_aggregate_unit = 0;
          if ((_DWORD)v20 == 4)
            goto LABEL_114;
          if (v20 >= 5)
          {
            __nwlog_obj();
            v82 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v82, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 19;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 4;
              _os_log_impl(&dword_182FBE000, v82, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

            v56 = v160;
LABEL_114:
            v56->policy_result.flow_divert_aggregate_unit = *(_DWORD *)v27;
          }
          break;
        case 156:
          if (v159)
          {
            if ((_DWORD)v20 == 16)
              goto LABEL_117;
            if (v20 >= 0x11)
            {
              __nwlog_obj();
              v87 = objc_claimAutoreleasedReturnValue();
              if (os_log_type_enabled(v87, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)buf = 136446978;
                *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
                v164 = 1024;
                *(_DWORD *)v165 = 156;
                *(_WORD *)&v165[4] = 1024;
                *(_DWORD *)&v165[6] = v20;
                *(_WORD *)&v165[10] = 1024;
                *(_DWORD *)&v165[12] = 16;
                _os_log_impl(&dword_182FBE000, v87, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
              }

LABEL_117:
              v57 = v159;
              *(_OWORD *)((char *)&v57[3].isa + 4) = *(_OWORD *)v27;
              v159 = v57;

              break;
            }
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v67 = (id)gLogObj;
            if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446210;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
              _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint agent to", buf, 0xCu);
            }
LABEL_162:

            v159 = 0;
          }
          break;
        case 158:
          if (v159)
          {
            *(_QWORD *)buf = 0;
            asprintf((char **)buf, "%.*s", v20, (const char *)v27);
            nw_endpoint_set_device_id(v159, *(const char **)buf);
            if (*(_QWORD *)buf)
              free(*(void **)buf);
            break;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v67 = (id)gLogObj;
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
            _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply endpoint device id to", buf, 0xCu);
          }
          goto LABEL_162;
        case 159:
          if (v159)
          {
            objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", v27, v20);
            v62 = (void *)objc_claimAutoreleasedReturnValue();
            nw_endpoint_append_public_key(v159, v62);

            break;
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v67 = (id)gLogObj;
          if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
            _os_log_impl(&dword_182FBE000, v67, OS_LOG_TYPE_ERROR, "%{public}s No previous endpoint to apply public key to", buf, 0xCu);
          }
          goto LABEL_162;
        case 210:
          if ((_DWORD)v20 == 4)
            goto LABEL_60;
          if (v20 >= 5)
          {
            __nwlog_obj();
            v69 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 210;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 4;
              _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_60:
            v160->effective_traffic_class = *(_DWORD *)v27;
          }
          break;
        case 211:
          if ((_DWORD)v20 == 4)
            goto LABEL_91;
          if (v20 >= 5)
          {
            __nwlog_obj();
            v78 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v78, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 211;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 4;
              _os_log_impl(&dword_182FBE000, v78, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_91:
            *((_BYTE *)v160 + 474) = *((_BYTE *)v160 + 474) & 0xFD | (2 * (*(_BYTE *)v27 & 1));
          }
          break;
        case 212:
          v63 = nw_path_copy_endpoint_from_tlv(212, v20, (void *)v27);

          v35 = v63;
          if (v35)
          {
            gateways = (uint64_t)v160->gateways;
            if (!gateways)
            {
              v65 = nw_array_create();
              v66 = v160->gateways;
              v160->gateways = (OS_nw_array *)v65;

              gateways = (uint64_t)v160->gateways;
            }
            nw_array_append(gateways, v35);
          }
          goto LABEL_68;
        case 213:
          v34 = nw_path_copy_endpoint_from_tlv(213, v20, (void *)v27);

          v35 = v34;
          if (v35)
          {
            group_members = (uint64_t)v160->group_members;
            if (!group_members)
            {
              v37 = nw_array_create();
              v38 = v160->group_members;
              v160->group_members = (OS_nw_array *)v37;

              group_members = (uint64_t)v160->group_members;
            }
            nw_array_append(group_members, v35);
          }
LABEL_68:
          v159 = v35;

          break;
        case 214:
          if ((_DWORD)v20 == 80)
            goto LABEL_79;
          if (v20 >= 0x51)
          {
            __nwlog_obj();
            v74 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 214;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 80;
              _os_log_impl(&dword_182FBE000, v74, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_79:
            v160->nat64_prefixes[0].ipv6_prefix = *(in6_addr *)v27;
            v43 = *(_OWORD *)(v27 + 16);
            v44 = *(in6_addr *)(v27 + 32);
            v45 = *(in6_addr *)(v27 + 64);
            *(in6_addr *)((char *)&v160->nat64_prefixes[2].ipv6_prefix + 8) = *(in6_addr *)(v27 + 48);
            *(in6_addr *)((char *)&v160->nat64_prefixes[3].ipv6_prefix + 4) = v45;
            *(_OWORD *)&v160->nat64_prefixes[0].prefix_len = v43;
            *(in6_addr *)((char *)&v160->nat64_prefixes[1].ipv6_prefix + 12) = v44;
          }
          break;
        case 215:
          if ((_DWORD)v20 == 2)
            goto LABEL_75;
          v71 = v14;
          if (v20 < 3)
          {
LABEL_239:
            v14 = v71;
          }
          else
          {
            __nwlog_obj();
            v72 = objc_claimAutoreleasedReturnValue();
            if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_verify_tlv_length";
              v164 = 1024;
              *(_DWORD *)v165 = 215;
              *(_WORD *)&v165[4] = 1024;
              *(_DWORD *)&v165[6] = v20;
              *(_WORD *)&v165[10] = 1024;
              *(_DWORD *)&v165[12] = 2;
              _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_DEBUG, "%{public}s Permitting TLV of type %u with larger length %u, should be %u", buf, 0x1Eu);
            }

LABEL_75:
            v160->estimates = *(necp_client_result_estimated_throughput *)v27;
          }
          break;
        default:
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          flow_result_from_tlv = (id)gLogObj;
          if (os_log_type_enabled(flow_result_from_tlv, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
            v164 = 1024;
            *(_DWORD *)v165 = v19;
            _os_log_impl(&dword_182FBE000, flow_result_from_tlv, OS_LOG_TYPE_ERROR, "%{public}s Received unknown client result TLV (type %d)", buf, 0x12u);
          }
          goto LABEL_20;
      }
    }
    if (v15 >= a3 - 5)
      goto LABEL_282;
  }
  v100 = v14;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v101 = (id)gLogObj;
  *(_DWORD *)buf = 136446978;
  *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
  v164 = 1024;
  *(_DWORD *)v165 = v20;
  *(_WORD *)&v165[4] = 2048;
  *(_QWORD *)&v165[6] = v15;
  *(_WORD *)&v165[14] = 2048;
  *(_QWORD *)&v165[16] = a3;
  v102 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v162) = 16;
  v161 = 0;
  if (!__nwlog_fault(v102, &v162, &v161))
    goto LABEL_279;
  if (v162 == 17)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v103 = (id)gLogObj;
    v104 = v162;
    if (os_log_type_enabled(v103, (os_log_type_t)v162))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
      v164 = 1024;
      *(_DWORD *)v165 = v20;
      *(_WORD *)&v165[4] = 2048;
      *(_QWORD *)&v165[6] = v15;
      *(_WORD *)&v165[14] = 2048;
      *(_QWORD *)&v165[16] = a3;
      _os_log_impl(&dword_182FBE000, v103, v104, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu)", buf, 0x26u);
    }
    goto LABEL_278;
  }
  if (!v161)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v103 = (id)gLogObj;
    v112 = v162;
    if (os_log_type_enabled(v103, (os_log_type_t)v162))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
      v164 = 1024;
      *(_DWORD *)v165 = v20;
      *(_WORD *)&v165[4] = 2048;
      *(_QWORD *)&v165[6] = v15;
      *(_WORD *)&v165[14] = 2048;
      *(_QWORD *)&v165[16] = a3;
      _os_log_impl(&dword_182FBE000, v103, v112, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), backtrace limit exceeded", buf, 0x26u);
    }
    goto LABEL_278;
  }
  v106 = __nw_create_backtrace_string();
  if (!v106)
  {
    __nwlog_obj();
    v103 = objc_claimAutoreleasedReturnValue();
    v113 = v162;
    if (os_log_type_enabled(v103, (os_log_type_t)v162))
    {
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
      v164 = 1024;
      *(_DWORD *)v165 = v20;
      *(_WORD *)&v165[4] = 2048;
      *(_QWORD *)&v165[6] = v15;
      *(_WORD *)&v165[14] = 2048;
      *(_QWORD *)&v165[16] = a3;
      _os_log_impl(&dword_182FBE000, v103, v113, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), no backtrace", buf, 0x26u);
    }
LABEL_278:

LABEL_279:
    if (!v102)
      goto LABEL_281;
    goto LABEL_280;
  }
  v107 = (char *)v106;
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v108 = (id)gLogObj;
  v109 = v162;
  if (os_log_type_enabled(v108, (os_log_type_t)v162))
  {
    *(_DWORD *)buf = 136447234;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
    v164 = 1024;
    *(_DWORD *)v165 = v20;
    *(_WORD *)&v165[4] = 2048;
    *(_QWORD *)&v165[6] = v15;
    *(_WORD *)&v165[14] = 2048;
    *(_QWORD *)&v165[16] = a3;
    *(_WORD *)&v165[24] = 2082;
    *(_QWORD *)&v165[26] = v107;
    _os_log_impl(&dword_182FBE000, v108, v109, "%{public}s TLV length (%u) at offset %zu goes beyond total length (%zu), dumping backtrace:%{public}s", buf, 0x30u);
  }

  free(v107);
  if (v102)
LABEL_280:
    free(v102);
LABEL_281:
  v14 = v100;
LABEL_282:
  if (v15 != a3)
  {
    v140 = v14;
    __nwlog_obj();
    v141 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
    v164 = 2048;
    *(_QWORD *)v165 = v15;
    *(_WORD *)&v165[8] = 2048;
    *(_QWORD *)&v165[10] = a3;
    v142 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v162) = 16;
    v161 = 0;
    if (__nwlog_fault(v142, &v162, &v161))
    {
      if (v162 == 17)
      {
        __nwlog_obj();
        v143 = objc_claimAutoreleasedReturnValue();
        v144 = v162;
        if (os_log_type_enabled(v143, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
          v164 = 2048;
          *(_QWORD *)v165 = v15;
          *(_WORD *)&v165[8] = 2048;
          *(_QWORD *)&v165[10] = a3;
          _os_log_impl(&dword_182FBE000, v143, v144, "%{public}s cursor has unexpected value %zu != %zu", buf, 0x20u);
        }
      }
      else
      {
        if (v161)
        {
          v145 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v146 = objc_claimAutoreleasedReturnValue();
          v147 = v162;
          v148 = os_log_type_enabled(v146, (os_log_type_t)v162);
          if (v145)
          {
            if (v148)
            {
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
              v164 = 2048;
              *(_QWORD *)v165 = v15;
              *(_WORD *)&v165[8] = 2048;
              *(_QWORD *)&v165[10] = a3;
              *(_WORD *)&v165[18] = 2082;
              *(_QWORD *)&v165[20] = v145;
              _os_log_impl(&dword_182FBE000, v146, v147, "%{public}s cursor has unexpected value %zu != %zu, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v145);
          }
          else
          {
            if (v148)
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
              v164 = 2048;
              *(_QWORD *)v165 = v15;
              *(_WORD *)&v165[8] = 2048;
              *(_QWORD *)&v165[10] = a3;
              _os_log_impl(&dword_182FBE000, v146, v147, "%{public}s cursor has unexpected value %zu != %zu, no backtrace", buf, 0x20u);
            }

          }
          goto LABEL_372;
        }
        __nwlog_obj();
        v143 = objc_claimAutoreleasedReturnValue();
        v152 = v162;
        if (os_log_type_enabled(v143, (os_log_type_t)v162))
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
          v164 = 2048;
          *(_QWORD *)v165 = v15;
          *(_WORD *)&v165[8] = 2048;
          *(_QWORD *)&v165[10] = a3;
          _os_log_impl(&dword_182FBE000, v143, v152, "%{public}s cursor has unexpected value %zu != %zu, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
LABEL_372:
    if (v142)
      free(v142);
    v14 = v140;
  }
  v114 = v160;
  routed_interface_index = v160->policy_result.routed_interface_index;
  if (routed_interface_index)
  {
    direct_interface_index = v160->policy_result.direct_interface_index;
    if (direct_interface_index)
    {
      if (routed_interface_index != direct_interface_index)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v117 = (id)gLogObj;
        if (os_log_type_enabled(v117, OS_LOG_TYPE_ERROR))
        {
          v118 = v160->policy_result.routed_interface_index;
          v119 = v160->policy_result.direct_interface_index;
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_path_parse_necp_result";
          v164 = 1024;
          *(_DWORD *)v165 = v118;
          *(_WORD *)&v165[4] = 1024;
          *(_DWORD *)&v165[6] = v119;
          _os_log_impl(&dword_182FBE000, v117, OS_LOG_TYPE_ERROR, "%{public}s Mismatch in interface results from NECP (%u != %u)", buf, 0x18u);
        }

        v114 = v160;
        v160->policy_result.routed_interface_index = v160->policy_result.direct_interface_index;
      }
    }
  }
  netagents = v114->policy_result.netagents;
  if (netagents)
  {
    free(netagents);
    v114->policy_result.netagents = 0;
  }
  v114->policy_result.num_netagents = HIDWORD(v158);
  if (HIDWORD(v158))
  {
    v114->policy_result.netagents = v14;
  }
  else if (v14)
  {
    free(v14);
  }
  interface_options = v114->policy_result.interface_options;
  if (interface_options)
  {
    free(interface_options);
    v114->policy_result.interface_options = 0;
  }
  v114->policy_result.num_interface_options = v158;
  if ((_DWORD)v158)
  {
    v114->policy_result.interface_options = __ptr;
  }
  else if (__ptr)
  {
    free(__ptr);
  }

  v111 = 1;
LABEL_302:

  return v111;
}

void sub_1830B06D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25)
{

  _Unwind_Resume(a1);
}

BOOL nw_path_is_equal_inner(void *a1, void *a2, int a3)
{
  NWConcrete_nw_path *v5;
  NWConcrete_nw_path *v6;
  _BOOL8 v7;
  unsigned int routing_result;
  unsigned int v9;
  BOOL v10;
  uint64_t num_netagents;
  uint64_t num_interface_options;
  necp_client_result_netagent *netagents;
  necp_client_result_netagent *v14;
  necp_client_interface_option *interface_options;
  necp_client_interface_option *v16;
  OS_nw_array *flows;
  OS_nw_array *v18;
  Class isa;
  objc_class *v20;
  OS_nw_array *v21;
  uint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  BOOL is_equal;
  OS_xpc_object *fallback_agent_domains;
  OS_xpc_object *v29;
  OS_xpc_object *fallback_agent_types;
  OS_xpc_object *v31;
  OS_xpc_object *network_agent_dictionary;
  OS_xpc_object *v33;
  OS_xpc_object *proxy_settings;
  OS_xpc_object *v35;
  NWConcrete_nw_path *v36;

  v5 = a1;
  v6 = a2;
  v7 = v5 == v6;
  if (v5 != v6 && v5 && v6)
  {
    if (*(_QWORD *)v5->flow_registration_id != *(_QWORD *)v6->flow_registration_id
      || *(_QWORD *)&v5->flow_registration_id[8] != *(_QWORD *)&v6->flow_registration_id[8])
    {
      goto LABEL_50;
    }
    routing_result = v5->policy_result.routing_result;
    v9 = v6->policy_result.routing_result;
    if (routing_result == 3 && v9 == 3)
    {
      v7 = 1;
      goto LABEL_51;
    }
    if (routing_result != v9
      || v5->policy_result.routing_result_parameter.tunnel_interface_index != v6->policy_result.routing_result_parameter.tunnel_interface_index
      || v5->policy_result.filter_control_unit != v6->policy_result.filter_control_unit
      || v5->policy_result.flow_divert_aggregate_unit != v6->policy_result.flow_divert_aggregate_unit
      || v5->policy_result.service_action != v6->policy_result.service_action
      || (*(_QWORD *)v5->policy_result.service_uuid == *(_QWORD *)v6->policy_result.service_uuid
        ? (v10 = *(_QWORD *)&v5->policy_result.service_uuid[8] == *(_QWORD *)&v6->policy_result.service_uuid[8])
        : (v10 = 0),
          !v10
       || v5->policy_result.service_flags != v6->policy_result.service_flags
       || v5->policy_result.service_data != v6->policy_result.service_data
       || v5->policy_result.routed_interface_index != v6->policy_result.routed_interface_index
       || v5->policy_result.direct_interface_index != v6->policy_result.direct_interface_index))
    {
LABEL_50:
      v7 = 0;
      goto LABEL_51;
    }
    v36 = v6;
    if (v5->policy_result.direct_interface_generation == v6->policy_result.direct_interface_generation
      && v5->policy_result.delegate_interface_index == v6->policy_result.delegate_interface_index
      && v5->policy_result.delegate_interface_generation == v6->policy_result.delegate_interface_generation
      && v5->policy_result.policy_id == v6->policy_result.policy_id)
    {
      num_netagents = v5->policy_result.num_netagents;
      if ((_DWORD)num_netagents == v6->policy_result.num_netagents)
      {
        num_interface_options = v5->policy_result.num_interface_options;
        if ((_DWORD)num_interface_options == v6->policy_result.num_interface_options
          && (!(_DWORD)num_netagents
           || (netagents = v5->policy_result.netagents) != 0
           && (v14 = v36->policy_result.netagents) != 0
           && !memcmp(netagents, v14, 20 * num_netagents))
          && (!(_DWORD)num_interface_options
           || (interface_options = v5->policy_result.interface_options) != 0
           && (v16 = v36->policy_result.interface_options) != 0
           && !memcmp(interface_options, v16, 24 * num_interface_options))
          && v5->status == v36->status
          && v5->reason == v36->reason)
        {
          if (!nw_path_network_is_satisfied(v5) && !nw_path_network_is_satisfied(v36))
          {
            v7 = 1;
            v6 = v36;
            goto LABEL_51;
          }
          if (a3)
          {
            flows = v5->flows;
            v18 = v36->flows;
            if (flows)
            {
              if (!v18)
                goto LABEL_82;
              v21 = flows + 2;
              isa = flows[2].super.super.isa;
              v20 = v21[1].super.super.isa;
              v22 = (v20 - isa) >> 3;
              if (v22 != (v18[3].super.super.isa - v18[2].super.super.isa) >> 3)
                goto LABEL_82;
              if (v20 != isa)
              {
                v23 = 0;
                do
                {
                  nw_array_get_object_at_index((uint64_t)v5->flows, v23);
                  v24 = (void *)objc_claimAutoreleasedReturnValue();
                  nw_array_get_object_at_index((uint64_t)v36->flows, v23);
                  v25 = (void *)objc_claimAutoreleasedReturnValue();
                  is_equal = nw_path_flow_is_equal(v24, v25);

                  if (!is_equal)
                    goto LABEL_82;
                }
                while (v22 != ++v23);
              }
            }
            else if (v18)
            {
              goto LABEL_82;
            }
          }
          if (((*((_BYTE *)v36 + 473) ^ *((_BYTE *)v5 + 473)) & 0xF3) == 0)
          {
            fallback_agent_domains = v5->fallback_agent_domains;
            v29 = v36->fallback_agent_domains;
            if (fallback_agent_domains && v29 && fallback_agent_domains != v29)
            {
              if (!xpc_equal(fallback_agent_domains, v29))
                goto LABEL_82;
            }
            else if (fallback_agent_domains != v29)
            {
              goto LABEL_82;
            }
            fallback_agent_types = v5->fallback_agent_types;
            v31 = v36->fallback_agent_types;
            if (fallback_agent_types && v31 && fallback_agent_types != v31)
            {
              if (!xpc_equal(fallback_agent_types, v31))
                goto LABEL_82;
            }
            else if (fallback_agent_types != v31)
            {
              goto LABEL_82;
            }
            network_agent_dictionary = v5->network_agent_dictionary;
            v33 = v36->network_agent_dictionary;
            if (network_agent_dictionary && v33 && network_agent_dictionary != v33)
            {
              if (!xpc_equal(network_agent_dictionary, v33))
                goto LABEL_82;
            }
            else if (network_agent_dictionary != v33)
            {
              goto LABEL_82;
            }
            proxy_settings = v5->proxy_settings;
            v35 = v36->proxy_settings;
            if (proxy_settings && v35 && proxy_settings != v35)
            {
              if (!xpc_equal(proxy_settings, v35))
                goto LABEL_82;
            }
            else if (proxy_settings != v35)
            {
              goto LABEL_82;
            }
            if (nw_interface_deep_compare(v5->fallback_interface, v36->fallback_interface)
              && nw_interface_deep_compare(v5->direct, v36->direct))
            {
              v7 = nw_interface_deep_compare(v5->delegate, v36->delegate);
              v6 = v36;
              goto LABEL_51;
            }
          }
        }
      }
    }
LABEL_82:
    v7 = 0;
    v6 = v36;
  }
LABEL_51:

  return v7;
}

void sub_1830B0B94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

BOOL nw_interface_deep_compare(void *a1, void *a2)
{
  char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  _BOOL8 v7;

  v3 = a1;
  v4 = a2;
  if (v3 == v4)
    v7 = 1;
  else
    v7 = nw_interface_shallow_compare(v3, v4)
      && *((_DWORD *)v3 + 22) == *((_DWORD *)v4 + 22)
      && ((*(_WORD *)(v4 + 85) ^ *(_WORD *)(v3 + 85)) & 0x3F) == 0
      && *((_DWORD *)v3 + 15) == *((_DWORD *)v4 + 15)
      && (v5 = v3[32], (_DWORD)v5 == v4[32])
      && !memcmp(v3 + 12, v4 + 12, v5)
      && (v6 = v3[56], (_DWORD)v6 == v4[56])
      && !memcmp(v3 + 36, v4 + 36, v6)
      && v3[84] == v4[84];

  return v7;
}

void __nw_mem_region_init_block_invoke()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  dispatch_time_t v3;
  _QWORD block[5];

  os_unfair_lock_lock((os_unfair_lock_t)&nw_mem_region_lock);
  v0 = nw_mem_region_head;
  if (nw_mem_region_head)
  {
    v1 = MEMORY[0x1E0C809B0];
    do
    {
      while (1)
      {
        block[0] = v1;
        block[1] = 0x40000000;
        block[2] = ___ZL20nw_mem_region_updateP13nw_mem_region_block_invoke;
        block[3] = &__block_descriptor_tmp_27_22944;
        block[4] = v0;
        if (*(_QWORD *)(v0 + 272))
        {
          if (!dispatch_workloop_is_current())
            break;
        }
        ___ZL20nw_mem_region_updateP13nw_mem_region_block_invoke((uint64_t)block);
        v0 = *(_QWORD *)(v0 + 144);
        if (!v0)
          goto LABEL_7;
      }
      dispatch_async(*(dispatch_queue_t *)(v0 + 272), block);
      v0 = *(_QWORD *)(v0 + 144);
    }
    while (v0);
  }
LABEL_7:
  os_unfair_lock_unlock((os_unfair_lock_t)&nw_mem_region_lock);
  v2 = nw_mem_region_update_source;
  if (nw_mem_region_update_source)
  {
    v3 = dispatch_time(0x8000000000000000, 13000000000);
    if (*(_QWORD *)v2)
    {
      dispatch_source_set_timer(*(dispatch_source_t *)v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
    }
    else
    {
      *(_QWORD *)(v2 + 32) = v3;
      *(_QWORD *)(v2 + 40) = -1;
      if (*(_BYTE *)(v2 + 48))
      {
        if (*(_BYTE *)(v2 + 49))
          nw_queue_source_run_timer(v2, v3);
      }
    }
    nw_queue_activate_source(nw_mem_region_update_source, v3);
  }
}

void ___ZL20nw_mem_region_updateP13nw_mem_region_block_invoke(uint64_t a1)
{
  size_t v1;
  unint64_t v2;
  size_t v3;
  size_t v4;
  unint64_t v5;
  char *v7;
  BOOL v8;
  unint64_t v9;
  int v10;
  unsigned int v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  size_t v23;
  uint64_t **v24;
  uint64_t v25;
  _QWORD *v26;
  double *v27;
  __int128 v28;
  unint64_t v29;
  double *v30;
  double *v31;
  NSObject *v33;
  _BOOL4 v34;
  int v35;
  NSObject *v36;
  void *v37;
  NSObject *v38;
  void *v39;
  NSObject *v40;
  uint8_t buf[4];
  const char *v42;
  __int16 v43;
  size_t v44;
  __int16 v45;
  _BYTE v46[10];
  __int16 v47;
  int v48;
  uint64_t v49;
  float64x2x2_t v50;

  v49 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  if (*(_DWORD *)(v1 + 384))
  {
    if (gLogDatapath)
    {
      v33 = __nwlog_obj();
      v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEBUG);
      v1 = *(_QWORD *)(a1 + 32);
      if (v34)
      {
        v35 = *(_DWORD *)(v1 + 384);
        *(_DWORD *)buf = 136446466;
        v42 = "nw_mem_region_update_block_invoke";
        v43 = 1024;
        LODWORD(v44) = v35;
        _os_log_impl(&dword_182FBE000, v33, OS_LOG_TYPE_DEBUG, "%{public}s waking up %u waiters to reclaim", buf, 0x12u);
        v1 = *(_QWORD *)(a1 + 32);
      }
    }
    *(_DWORD *)(v1 + 384) = 0;
  }
  v2 = *(_QWORD *)(v1 + 328);
  if (v2 <= 1 << (flsll(3 * *(_QWORD *)(v1 + 16) + 4) - 2))
    v3 = 1 << (flsll(3 * *(_QWORD *)(v1 + 16) + 4) - 2);
  else
    v3 = *(_QWORD *)(v1 + 328);
  if (*(_QWORD *)(v1 + 336) >= v3)
    v4 = v3;
  else
    v4 = *(_QWORD *)(v1 + 336);
  v5 = *(_QWORD *)(v1 + 352) + 1;
  if (v4 < v5 >> 1 || v4 > 2 * v5)
  {
    if (!v4 || v4 >> 60)
    {
      v36 = __nwlog_obj();
      os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v42 = "strict_calloc";
      v37 = (void *)_os_log_send_and_compose_impl();
      if (__nwlog_abort((uint64_t)v37))
        goto LABEL_54;
      free(v37);
    }
    v7 = (char *)malloc_type_calloc(v4, 0x10uLL, 0xEAFB8F1AuLL);
    if (v7)
    {
      if (!v4)
        goto LABEL_27;
      goto LABEL_19;
    }
    v38 = __nwlog_obj();
    os_log_type_enabled(v38, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446722;
    v42 = "strict_calloc";
    v43 = 2048;
    v44 = v4;
    v45 = 2048;
    *(_QWORD *)v46 = 16;
    v39 = (void *)_os_log_send_and_compose_impl();
    if (!__nwlog_abort((uint64_t)v39))
    {
      free(v39);
      if (!v4)
        goto LABEL_27;
LABEL_19:
      if (v4 >= 0xA && ((_DWORD)v4 ? (v8 = (v4 - 1) >> 32 == 0) : (v8 = 0), v8))
      {
        v9 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        v27 = (double *)(v7 + 32);
        v28 = 0uLL;
        v29 = v4 & 0xFFFFFFFFFFFFFFFCLL;
        do
        {
          *(_QWORD *)&v50.val[1].f64[0] = v27 - 4;
          *(_QWORD *)&v50.val[1].f64[1] = v27 - 2;
          v30 = v27;
          v31 = v27 + 2;
          v50.val[0] = 0uLL;
          vst2q_f64(*(double **)&v50.val[1].f64[0], v50);
          vst2q_f64(v27, *(float64x2x2_t *)&v28);
          v27 += 8;
          v29 -= 4;
        }
        while (v29);
        v10 = v4 & 0xFFFFFFFC;
        if (v4 == v9)
          goto LABEL_27;
      }
      else
      {
        v9 = 0;
        v10 = 0;
      }
      v11 = v10 + 1;
      do
      {
        v12 = &v7[16 * v9];
        *(_QWORD *)v12 = 0;
        *((_QWORD *)v12 + 1) = v12;
        v9 = v11++;
      }
      while (v4 > v9);
LABEL_27:
      v13 = *(_QWORD *)(v1 + 352);
      v14 = *(char **)(v1 + 360);
      *(_QWORD *)(v1 + 352) = v4 - 1;
      *(_QWORD *)(v1 + 360) = v7;
      ++*(_QWORD *)(v1 + 24);
      v15 = v13 + 1;
      if (v13 == -1)
      {
        v16 = 0;
      }
      else
      {
        v17 = 0;
        v16 = 0;
        do
        {
          v18 = &v14[16 * v17];
          v19 = *(uint64_t **)v18;
          if (*(_QWORD *)v18)
          {
            v20 = *(_QWORD *)(v1 + 344);
            do
            {
              v25 = *v19;
              v26 = (_QWORD *)v19[1];
              if (*v19)
              {
                *(_QWORD *)(v25 + 8) = v26;
                v26 = (_QWORD *)v19[1];
              }
              else
              {
                *((_QWORD *)v18 + 1) = v26;
              }
              *v26 = v25;
              v21 = *(_QWORD *)(v1 + 360);
              v22 = v19[3];
              *v19 = 0;
              v23 = v21 + 16 * (((v22 >> v20) + v22 + (v22 >> (2 * v20))) & (v4 - 1));
              v24 = *(uint64_t ***)(v23 + 8);
              v19[1] = (uint64_t)v24;
              *v24 = v19;
              *(_QWORD *)(v23 + 8) = v19;
              ++v16;
              v19 = *(uint64_t **)v18;
            }
            while (*(_QWORD *)v18);
          }
          ++v17;
        }
        while (v15 > v17);
      }
      if (gLogDatapath)
      {
        v40 = __nwlog_obj();
        if (os_log_type_enabled(v40, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136447234;
          v42 = "nw_mem_region_hash_rescale";
          v43 = 2048;
          v44 = v1;
          v45 = 1024;
          *(_DWORD *)v46 = v15;
          *(_WORD *)&v46[4] = 1024;
          *(_DWORD *)&v46[6] = v4;
          v47 = 1024;
          v48 = v16;
          _os_log_impl(&dword_182FBE000, v40, OS_LOG_TYPE_DEBUG, "%{public}s nwr %p old_size %u new_size %u [%u moved]", buf, 0x28u);
        }
      }
      if (v14)
        free(v14);
      return;
    }
LABEL_54:
    __break(1u);
  }
}

id nw_connection_copy_establishment_report_on_queue(void *a1)
{
  id v1;
  _QWORD *v2;
  void *v3;
  id v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    nw_context_assert_queue(*((void **)v1 + 3));
    v3 = (void *)v2[52];
    if (!v3)
    {
      nw_connection_fillout_establishment_report_on_nw_queue(v2, 0);
      v3 = (void *)v2[52];
    }
    v4 = v3;
    goto LABEL_5;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_connection_copy_establishment_report_on_queue";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_copy_establishment_report_on_queue";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null connection", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_connection_copy_establishment_report_on_queue";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null connection, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_copy_establishment_report_on_queue";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null connection, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_connection_copy_establishment_report_on_queue";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null connection, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v7)
    free(v7);
  v4 = 0;
LABEL_5:

  return v4;
}

void sub_1830B15D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_parameters_is_third_party_web_content(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(unsigned __int16 *)(*((_QWORD *)v1 + 13) + 108) >> 15;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_is_third_party_web_content";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_is_third_party_web_content";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_is_third_party_web_content";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_is_third_party_web_content";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_is_third_party_web_content";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_include_ble(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[100] >> 3) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_include_ble";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_include_ble";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_include_ble";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_include_ble";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_include_ble";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_is_approved_app_domain(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(_BYTE *)(*((_QWORD *)v1 + 13) + 110) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_is_approved_app_domain";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_is_approved_app_domain";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_is_approved_app_domain";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_is_approved_app_domain";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_is_approved_app_domain";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_include_screen_off_devices(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[100] >> 4) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_include_screen_off_devices";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_include_screen_off_devices";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_include_screen_off_devices";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_include_screen_off_devices";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_include_screen_off_devices";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t nw_parameters_get_fallback_mode(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *(unsigned __int8 *)(*((_QWORD *)v1 + 13) + 107);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_fallback_mode";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_fallback_mode";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_fallback_mode";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_fallback_mode";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_fallback_mode";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

void nw_endpoint_flow_add_initial_write_request(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  NWConcrete_nw_endpoint_handler *v2;
  unsigned int mode;
  NWConcrete_nw_endpoint_handler *v4;
  int state;
  NWConcrete_nw_endpoint_mode_handler *v6;
  id *v7;
  id v8;
  NSObject *v9;
  size_t size;
  NWConcrete_nw_write_request *v11;
  id *v12;
  char v13;
  NSObject *v14;
  const char *id_string;
  const char *logging_description;
  const char *v17;
  const char *v18;
  id v19;
  _BOOL8 v20;
  void *v21;
  NWConcrete_nw_write_request *v22;
  NSObject *data;
  OS_nw_fd_wrapper *fd;
  size_t num_bytes;
  id v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  size_t consumed_bytes;
  int v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  os_log_type_t v36;
  void *v37;
  char *v38;
  NSObject *v39;
  os_log_type_t v40;
  char *backtrace_string;
  os_log_type_t v42;
  _BOOL4 v43;
  os_log_type_t v44;
  id v45;
  const char *v46;
  void *v47;
  NSObject *v48;
  os_log_type_t v49;
  const char *v50;
  char *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  const char *v54;
  os_log_type_t v55;
  const char *v56;
  const char *v57;
  const char *v58;
  nw_endpoint_t v59;
  size_t v60;
  NSObject *v61;
  NWConcrete_nw_write_request *v62;
  char v63;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v66;
  __int16 v67;
  void *v68;
  __int16 v69;
  const char *v70;
  __int16 v71;
  void *v72;
  __int16 v73;
  const char *v74;
  __int16 v75;
  const char *v76;
  __int16 v77;
  id v78;
  __int16 v79;
  size_t v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v37 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v66 = "nw_endpoint_handler_get_mode";
    v38 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v63 = 0;
    if (__nwlog_fault(v38, &type, &v63))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v40 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v66 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v39, v40, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v63)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        v43 = os_log_type_enabled(v39, type);
        if (backtrace_string)
        {
          if (v43)
          {
            *(_DWORD *)buf = 136446466;
            v66 = "nw_endpoint_handler_get_mode";
            v67 = 2082;
            v68 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v39, v42, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_60;
        }
        if (v43)
        {
          *(_DWORD *)buf = 136446210;
          v66 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v39, v42, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v39 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        if (os_log_type_enabled(v39, type))
        {
          *(_DWORD *)buf = 136446210;
          v66 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v39, v44, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_60:
    if (v38)
      free(v38);
    mode = 0;
LABEL_63:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v45 = (id)gLogObj;
    if (mode > 5)
      v46 = "unknown-mode";
    else
      v46 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v66 = "nw_endpoint_flow_add_initial_write_request";
    v67 = 2082;
    v68 = (void *)v46;
    v69 = 2082;
    v70 = "flow";
    v47 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v63 = 0;
    if (__nwlog_fault((const char *)v47, &type, &v63))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v48 = (id)gLogObj;
        v49 = type;
        if (os_log_type_enabled(v48, type))
        {
          if (mode > 5)
            v50 = "unknown-mode";
          else
            v50 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v66 = "nw_endpoint_flow_add_initial_write_request";
          v67 = 2082;
          v68 = (void *)v50;
          v69 = 2082;
          v70 = "flow";
          _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v63)
      {
        v51 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v48 = (id)gLogObj;
        v52 = type;
        v53 = os_log_type_enabled(v48, type);
        if (v51)
        {
          if (v53)
          {
            if (mode > 5)
              v54 = "unknown-mode";
            else
              v54 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            v66 = "nw_endpoint_flow_add_initial_write_request";
            v67 = 2082;
            v68 = (void *)v54;
            v69 = 2082;
            v70 = "flow";
            v71 = 2082;
            v72 = v51;
            _os_log_impl(&dword_182FBE000, v48, v52, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v51);
          if (!v47)
            goto LABEL_84;
LABEL_83:
          free(v47);
          goto LABEL_84;
        }
        if (v53)
        {
          if (mode > 5)
            v57 = "unknown-mode";
          else
            v57 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v66 = "nw_endpoint_flow_add_initial_write_request";
          v67 = 2082;
          v68 = (void *)v57;
          v69 = 2082;
          v70 = "flow";
          _os_log_impl(&dword_182FBE000, v48, v52, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v48 = (id)gLogObj;
        v55 = type;
        if (os_log_type_enabled(v48, type))
        {
          if (mode > 5)
            v56 = "unknown-mode";
          else
            v56 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v66 = "nw_endpoint_flow_add_initial_write_request";
          v67 = 2082;
          v68 = (void *)v56;
          v69 = 2082;
          v70 = "flow";
          _os_log_impl(&dword_182FBE000, v48, v55, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }

    }
    if (!v47)
      goto LABEL_84;
    goto LABEL_83;
  }
  mode = v1->mode;

  if (mode != 2)
    goto LABEL_63;
  v4 = v2;
  state = v4->state;

  if ((state & 0xFFFFFFFE) != 4)
  {
    v6 = nw_endpoint_handler_copy_flow(v4);
    if ((*((_BYTE *)v6 + 33) & 0x10) != 0)
    {
LABEL_43:

      goto LABEL_84;
    }
    v7 = v4;
    v8 = v7[4];

    if (!nw_parameters_has_initial_data_payload(v8))
    {
LABEL_42:

      goto LABEL_43;
    }
    v9 = nw_parameters_copy_initial_data_payload(v8);
    size = dispatch_data_get_size(v9);
    v61 = v9;
    v11 = nw_write_request_create_idempotent(v9, &__block_literal_global_41718, 0, 1);
    v62 = v11;
    if (v11)
    {
      v12 = v7;
      v13 = *((_BYTE *)v12 + 268);

      if ((v13 & 0x20) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v14 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          v60 = size;
          id_string = nw_endpoint_handler_get_id_string(v12);
          v58 = nw_endpoint_handler_dry_run_string(v12);
          v59 = nw_endpoint_handler_copy_endpoint(v12);
          logging_description = nw_endpoint_get_logging_description(v59);
          v17 = nw_endpoint_handler_state_string(v12);
          v18 = nw_endpoint_handler_mode_string(v12);
          v19 = nw_endpoint_handler_copy_current_path(v12);
          *(_DWORD *)buf = 136448002;
          v66 = "nw_endpoint_flow_add_initial_write_request";
          v67 = 2082;
          v68 = (void *)id_string;
          v69 = 2082;
          v70 = v58;
          v71 = 2082;
          v72 = (void *)logging_description;
          v73 = 2082;
          v74 = v17;
          v75 = 2082;
          v76 = v18;
          v77 = 2114;
          v78 = v19;
          v79 = 2048;
          v80 = v60;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Writing initial payload of size %zu", buf, 0x52u);

        }
        v11 = v62;
      }
      *((_BYTE *)v6 + 33) |= 0x10u;
      v20 = nw_write_request_list_append(*((void **)v6 + 71), v11);
      v21 = (void *)*((_QWORD *)v6 + 71);
      *((_QWORD *)v6 + 71) = v20;

      os_unfair_lock_lock((os_unfair_lock_t)v6 + 220);
      v22 = v62;
      data = v22->data;
      fd = v22->fd;
      if (data)
      {
        if (!fd)
        {
          num_bytes = dispatch_data_get_size(data);
LABEL_23:
          consumed_bytes = v22->consumed_bytes;
          if (num_bytes <= consumed_bytes)
            LODWORD(consumed_bytes) = 0;
          v31 = num_bytes - consumed_bytes;
          goto LABEL_26;
        }
      }
      else if (!fd)
      {
        v31 = 0;
LABEL_26:

        *((_DWORD *)v6 + 224) += v31;
        os_unfair_lock_unlock((os_unfair_lock_t)v6 + 220);
LABEL_41:

        goto LABEL_42;
      }
      num_bytes = v22->num_bytes;
      goto LABEL_23;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v26 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v66 = "nw_endpoint_flow_add_initial_write_request";
    v27 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v63 = 0;
    if (__nwlog_fault(v27, &type, &v63))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v66 = "nw_endpoint_flow_add_initial_write_request";
          _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s network_write_request_create failed", buf, 0xCu);
        }
      }
      else
      {
        if (v63)
        {
          v32 = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v33 = objc_claimAutoreleasedReturnValue();
          v34 = type;
          v35 = os_log_type_enabled(v33, type);
          if (v32)
          {
            if (v35)
            {
              *(_DWORD *)buf = 136446466;
              v66 = "nw_endpoint_flow_add_initial_write_request";
              v67 = 2082;
              v68 = v32;
              _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s network_write_request_create failed, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(v32);
          }
          else
          {
            if (v35)
            {
              *(_DWORD *)buf = 136446210;
              v66 = "nw_endpoint_flow_add_initial_write_request";
              _os_log_impl(&dword_182FBE000, v33, v34, "%{public}s network_write_request_create failed, no backtrace", buf, 0xCu);
            }

          }
          goto LABEL_39;
        }
        __nwlog_obj();
        v28 = objc_claimAutoreleasedReturnValue();
        v36 = type;
        if (os_log_type_enabled(v28, type))
        {
          *(_DWORD *)buf = 136446210;
          v66 = "nw_endpoint_flow_add_initial_write_request";
          _os_log_impl(&dword_182FBE000, v28, v36, "%{public}s network_write_request_create failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_39:
    if (v27)
      free(v27);
    goto LABEL_41;
  }
LABEL_84:

}

void sub_1830B3C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_initial_data_payload(void *a1)
{
  id v1;
  void *v2;
  _BOOL8 v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = *((_QWORD *)v1 + 18) != 0;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_has_initial_data_payload";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_initial_data_payload";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_has_initial_data_payload";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_initial_data_payload";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_has_initial_data_payload";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

CFErrorRef nw_error_copy_cf_error(nw_error_t error)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  unsigned int v5;
  CFIndex isa_high;
  const __CFString *v7;
  const __CFAllocator *v8;
  const __CFDictionary *v9;
  __CFError *v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  char v20;
  os_log_type_t type;
  _BYTE values[12];
  __int16 v23;
  char *v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v1 = error;
  v2 = v1;
  if (v1)
  {
    -[NSObject description](v1, "description");
    v3 = objc_claimAutoreleasedReturnValue();
    v4 = (void *)v3;
    v5 = LODWORD(v2[1].isa) - 1;
    if (v5 < 3 && (isa_high = SHIDWORD(v2[1].isa), (_DWORD)isa_high))
    {
      v7 = off_1E149C318[v5];
      v8 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
      if (v3)
      {
        *(_QWORD *)values = v3;
        v9 = CFDictionaryCreate(v8, MEMORY[0x1E0C9AFB0], (const void **)values, 1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
      }
      else
      {
        v9 = 0;
      }
      v10 = CFErrorCreate(v8, v7, isa_high, v9);

    }
    else
    {
      v10 = 0;
    }

    goto LABEL_10;
  }
  __nwlog_obj();
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)values = 136446210;
  *(_QWORD *)&values[4] = "nw_error_copy_cf_error";
  v13 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v20 = 0;
  if (__nwlog_fault(v13, &type, &v20))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)values = 136446210;
        *(_QWORD *)&values[4] = "nw_error_copy_cf_error";
        _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null error", values, 0xCu);
      }
    }
    else if (v20)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      v18 = os_log_type_enabled(v14, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)values = 136446466;
          *(_QWORD *)&values[4] = "nw_error_copy_cf_error";
          v23 = 2082;
          v24 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null error, dumping backtrace:%{public}s", values, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v18)
      {
        *(_DWORD *)values = 136446210;
        *(_QWORD *)&values[4] = "nw_error_copy_cf_error";
        _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null error, no backtrace", values, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v14, type))
      {
        *(_DWORD *)values = 136446210;
        *(_QWORD *)&values[4] = "nw_error_copy_cf_error";
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null error, backtrace limit exceeded", values, 0xCu);
      }
    }

  }
LABEL_27:
  if (v13)
    free(v13);
  v10 = 0;
LABEL_10:

  return v10;
}

void sub_1830B48E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

const char *nwlog_get_string_for_dns_service_error(int a1)
{
  const char *result;

  result = (const char *)DNSServiceErrorCodeToString();
  if (!result)
  {
    switch(a1)
    {
      case -65570:
        result = "PolicyDenied";
        break;
      case -65569:
        result = "DefunctConnection";
        break;
      case -65568:
        result = "Timeout";
        break;
      case -65567:
        result = "PollingMode";
        break;
      case -65566:
        result = "NoRouter";
        break;
      case -65565:
        result = "NATPortMappingDisabled";
        break;
      case -65564:
        result = "NATPortMappingUnsupported";
        break;
      case -65563:
        result = "ServiceNotRunning";
        break;
      case -65562:
        result = "Transient";
        break;
      case -65561:
        result = "BadKey";
        break;
      case -65560:
        result = "BadSig";
        break;
      case -65559:
        result = "BadTime";
        break;
      case -65558:
        result = "DoubleNAT";
        break;
      case -65557:
        result = "NATTraversal";
        break;
      case -65556:
        result = "NoSuchKey";
        break;
      case -65555:
        result = "NoAuth";
        break;
      case -65554:
        result = "NoSuchRecord";
        break;
      case -65553:
        result = "Refused";
        break;
      case -65552:
        result = "BadInterfaceIndex";
        break;
      case -65551:
        result = "Incompatible";
        break;
      case -65550:
        result = "Firewall";
        break;
      case -65549:
        result = "Invalid";
        break;
      case -65548:
        result = "NameConflict";
        break;
      case -65547:
        result = "AlreadyRegistered";
        break;
      case -65546:
      case -65537:
        goto LABEL_7;
      case -65545:
        result = "NotInitialized";
        break;
      case -65544:
        result = "Unsupported";
        break;
      case -65543:
        result = "BadFlags";
        break;
      case -65542:
        result = "BadState";
        break;
      case -65541:
        result = "BadReference";
        break;
      case -65540:
        result = "BadParam";
        break;
      case -65539:
        result = "NoMemory";
        break;
      case -65538:
        result = "NoSuchName";
        break;
      default:
        if (a1)
LABEL_7:
          result = "Unknown";
        else
          result = "NoError";
        break;
    }
  }
  return result;
}

BOOL nw_parameters_has_required_netagents(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _BOOL8 v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_parameters_has_required_netagents";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_has_required_netagents";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_parameters_has_required_netagents";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_has_required_netagents";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_has_required_netagents";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_28:
    if (v9)
      free(v9);
    goto LABEL_30;
  }
  v3 = *(_QWORD **)(v1[13] + 176);
  if (!v3)
    goto LABEL_30;
  v4 = (void *)v3[8];
  if (!v4)
  {
LABEL_6:
    v5 = (void *)v3[7];
    if (v5)
    {
      if (xpc_array_get_count(v5))
        goto LABEL_8;
      v3 = *(_QWORD **)(v2[13] + 176);
    }
    v7 = (void *)v3[9];
    if (v7)
    {
      v6 = xpc_array_get_count(v7) != 0;
      goto LABEL_31;
    }
LABEL_30:
    v6 = 0;
    goto LABEL_31;
  }
  if (!xpc_array_get_count(v4))
  {
    v3 = *(_QWORD **)(v2[13] + 176);
    goto LABEL_6;
  }
LABEL_8:
  v6 = 1;
LABEL_31:

  return v6;
}

void sub_1830B5738(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_prohibited_netagents(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  void *v5;
  _BOOL8 v6;
  void *v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v8 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_parameters_has_prohibited_netagents";
    v9 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v9, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_has_prohibited_netagents";
          _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        v14 = os_log_type_enabled(v10, type);
        if (backtrace_string)
        {
          if (v14)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_parameters_has_prohibited_netagents";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_28;
        }
        if (v14)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_has_prohibited_netagents";
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v10 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v10, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_parameters_has_prohibited_netagents";
          _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_28:
    if (v9)
      free(v9);
    goto LABEL_30;
  }
  v3 = *(_QWORD **)(v1[13] + 176);
  if (!v3)
    goto LABEL_30;
  v4 = (void *)v3[5];
  if (!v4)
  {
LABEL_6:
    v5 = (void *)v3[4];
    if (v5)
    {
      if (xpc_array_get_count(v5))
        goto LABEL_8;
      v3 = *(_QWORD **)(v2[13] + 176);
    }
    v7 = (void *)v3[6];
    if (v7)
    {
      v6 = xpc_array_get_count(v7) != 0;
      goto LABEL_31;
    }
LABEL_30:
    v6 = 0;
    goto LABEL_31;
  }
  if (!xpc_array_get_count(v4))
  {
    v3 = *(_QWORD **)(v2[13] + 176);
    goto LABEL_6;
  }
LABEL_8:
  v6 = 1;
LABEL_31:

  return v6;
}

void sub_1830B5A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_preferred_netagents(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  _BOOL8 v4;
  _QWORD *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v18;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v21 = "nw_parameters_has_preferred_netagents";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v18 = 0;
    if (__nwlog_fault(v10, &type, &v18))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_parameters_has_preferred_netagents";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v18)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v15 = os_log_type_enabled(v11, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v21 = "nw_parameters_has_preferred_netagents";
            v22 = 2082;
            v23 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_29;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_parameters_has_preferred_netagents";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v21 = "nw_parameters_has_preferred_netagents";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_29:
    if (v10)
      free(v10);
    goto LABEL_31;
  }
  v3 = v1[13];
  if (*(_DWORD *)(v3 + 84) != 1)
  {
    v5 = *(_QWORD **)(v3 + 176);
    if (v5)
    {
      v6 = (void *)v5[10];
      if (v6)
      {
        if (xpc_array_get_count(v6))
          goto LABEL_3;
        v5 = *(_QWORD **)(v2[13] + 176);
      }
      v7 = (void *)v5[11];
      if (v7)
      {
        if (xpc_array_get_count(v7))
          goto LABEL_3;
        v5 = *(_QWORD **)(v2[13] + 176);
      }
      v8 = (void *)v5[12];
      if (v8)
      {
        v4 = xpc_array_get_count(v8) != 0;
        goto LABEL_32;
      }
    }
LABEL_31:
    v4 = 0;
    goto LABEL_32;
  }
LABEL_3:
  v4 = 1;
LABEL_32:

  return v4;
}

void sub_1830B5D34(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_preferred_interface_subtypes(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  void *v4;
  _BOOL8 v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_parameters_has_preferred_interface_subtypes";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_parameters_has_preferred_interface_subtypes";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null parameters", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v11 = type;
        v12 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v12)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_parameters_has_preferred_interface_subtypes";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_21;
        }
        if (v12)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_parameters_has_preferred_interface_subtypes";
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v13 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_parameters_has_preferred_interface_subtypes";
          _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_21:
    if (v7)
      free(v7);
    goto LABEL_23;
  }
  v3 = *(_QWORD *)(*((_QWORD *)v1 + 13) + 176);
  if (!v3 || (v4 = *(void **)(v3 + 16)) == 0)
  {
LABEL_23:
    v5 = 0;
    goto LABEL_24;
  }
  v5 = xpc_array_get_count(v4) != 0;
LABEL_24:

  return v5;
}

void sub_1830B5FF4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_context_endpoint_get_active_instance_count(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  _QWORD *v9;
  _BYTE *v10;
  _BOOL8 v11;
  _QWORD *v12;
  id v13;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t node;
  char *v18;
  uint64_t v19;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  void *v29;
  char *v30;
  NSObject *v31;
  os_log_type_t v32;
  char *backtrace_string;
  os_log_type_t v34;
  _BOOL4 v35;
  char *v36;
  os_log_type_t v37;
  _BOOL4 v38;
  char *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  os_log_type_t v42;
  os_log_type_t v43;
  os_log_type_t v44;
  _QWORD v45[5];
  char v46;
  os_log_type_t type;
  _BYTE buf[24];
  uint64_t v49;
  uint64_t v50;

  v50 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v22, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null context", buf, 0xCu);
        }
      }
      else if (v46)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v34 = type;
        v35 = os_log_type_enabled(v23, type);
        if (backtrace_string)
        {
          if (v35)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_63;
        }
        if (v35)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_182FBE000, v23, v34, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v42 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_182FBE000, v23, v42, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_63:
    if (v22)
      free(v22);
    goto LABEL_77;
  }
  if (!v4)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
    v26 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v26, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v28 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_182FBE000, v27, v28, "%{public}s called with null endpoint", buf, 0xCu);
        }
      }
      else if (v46)
      {
        v36 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v37 = type;
        v38 = os_log_type_enabled(v27, type);
        if (v36)
        {
          if (v38)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v36;
            _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v36);
          goto LABEL_68;
        }
        if (v38)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_182FBE000, v27, v37, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v27 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        if (os_log_type_enabled(v27, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_182FBE000, v27, v43, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_68:
    if (v26)
      free(v26);

    goto LABEL_77;
  }
  if ((*((_BYTE *)v3 + 136) & 8) == 0)
    dispatch_assert_queue_V2(*((dispatch_queue_t *)v3 + 1));
  v6 = v5;
  v7 = v6;
  v8 = (void *)*((_QWORD *)v6 + 14);
  v9 = v6;
  if (v8)
  {
    v10 = v6;
    while ((v10[231] & 2) == 0)
    {
      v9 = v8;

      v8 = (void *)v9[14];
      v10 = v9;
      if (!v8)
        goto LABEL_9;
    }

    v11 = nw_context_copy_globals_context((NWConcrete_nw_context *)v3);
  }
  else
  {
LABEL_9:

    v11 = nw_context_copy_cache_context(v3);
  }
  v12 = (_QWORD *)v11;

  v13 = v7;
  v14 = objc_msgSend(v13, "type");

  if (v14 == 2)
  {
    v15 = (uint64_t *)(v12[3] + 40);
  }
  else if (v14 == 1)
  {
    v15 = (uint64_t *)(v12[3] + 32);
  }
  else
  {
    v15 = (uint64_t *)(v12[3] + 48);
  }
  v16 = *v15;
  if (!*v15)
  {
    __nwlog_obj();
    v29 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
    v30 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v46 = 0;
    if (__nwlog_fault(v30, &type, &v46))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_182FBE000, v31, v32, "%{public}s called with null hash_table", buf, 0xCu);
        }
      }
      else if (v46)
      {
        v39 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v40 = type;
        v41 = os_log_type_enabled(v31, type);
        if (v39)
        {
          if (v41)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v39;
            _os_log_impl(&dword_182FBE000, v31, v40, "%{public}s called with null hash_table, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v39);
          goto LABEL_74;
        }
        if (v41)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_182FBE000, v31, v40, "%{public}s called with null hash_table, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v31 = objc_claimAutoreleasedReturnValue();
        v44 = type;
        if (os_log_type_enabled(v31, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_context_endpoint_get_active_instance_count";
          _os_log_impl(&dword_182FBE000, v31, v44, "%{public}s called with null hash_table, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_74:
    if (v30)
      free(v30);

LABEL_77:
    v19 = 0;
    goto LABEL_20;
  }
  *(_QWORD *)buf = 0;
  *(_QWORD *)&buf[8] = buf;
  *(_QWORD *)&buf[16] = 0x2020000000;
  v49 = 0;
  node = nw_hash_table_get_node(v16, (uint64_t)v13, 0);
  if (node)
  {
    v18 = *(char **)(node + 16);
    v45[0] = MEMORY[0x1E0C809B0];
    v45[1] = 3221225472;
    v45[2] = __nw_context_endpoint_get_active_instance_count_block_invoke;
    v45[3] = &unk_1E149BA50;
    v45[4] = buf;
    nw_hash_table_apply(v18, (uint64_t)v45);
  }
  v19 = *(_QWORD *)(*(_QWORD *)&buf[8] + 24);
  _Block_object_dispose(buf, 8);

LABEL_20:
  return v19;
}

void sub_1830B6B24(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_activity_duration_exceeds_threshold(void *a1)
{
  _BYTE *v1;
  int *v2;
  unint64_t duration;
  unint64_t v4;
  unint64_t v5;
  NSObject *v6;
  uint64_t v7;
  NSObject *v8;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  os_log_type_t v25;
  os_log_type_t v26;
  os_log_type_t v27;
  char v28;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v31;
  __int16 v32;
  unint64_t v33;
  __int16 v34;
  unint64_t v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = (int *)v1;
  if (!v1)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_activity_duration_exceeds_threshold";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v11, &type, &v28))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null activity", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v28)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_182FBE000, v12, v25, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null activity, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_activity_duration_exceeds_threshold";
      v32 = 2082;
      v33 = (unint64_t)backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_53;
  }
  if ((v1[132] & 4) == 0)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_activity_duration_exceeds_threshold";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v11, &type, &v28))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s Activity not activated, cannot check duration threshold", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (!v28)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s Activity not activated, cannot check duration threshold, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v21 = type;
    v22 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s Activity not activated, cannot check duration threshold, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_activity_duration_exceeds_threshold";
      v32 = 2082;
      v33 = (unint64_t)backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s Activity not activated, cannot check duration threshold, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_53;
  }
  if ((v1[132] & 8) == 0)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v31 = "nw_activity_duration_exceeds_threshold";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v28 = 0;
    if (!__nwlog_fault(v11, &type, &v28))
      goto LABEL_72;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v17 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s Activity not completed, cannot check duration threshold", buf, 0xCu);
      }
LABEL_71:

LABEL_72:
      if (v11)
        free(v11);
      goto LABEL_17;
    }
    if (!v28)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v27 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_182FBE000, v12, v27, "%{public}s Activity not completed, cannot check duration threshold, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_71;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v23 = type;
    v24 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v31 = "nw_activity_duration_exceeds_threshold";
        _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s Activity not completed, cannot check duration threshold, no backtrace", buf, 0xCu);
      }
      goto LABEL_71;
    }
    if (v24)
    {
      *(_DWORD *)buf = 136446466;
      v31 = "nw_activity_duration_exceeds_threshold";
      v32 = 2082;
      v33 = (unint64_t)backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v23, "%{public}s Activity not completed, cannot check duration threshold, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_53:

    free(backtrace_string);
    goto LABEL_72;
  }
  if ((v1[132] & 2) != 0)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v8 = (id)gactivityLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v31 = (const char *)v2;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "Not checking duration threshold for lightweight activity %{public}@", buf, 0xCu);
    }
    goto LABEL_16;
  }
  duration = nw_activity_get_duration(v1);
  v4 = nw_activity_duration_threshold_for_label(v2[27], v2[26]);
  if (v4 == -1)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v8 = (id)gactivityLogObj;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 138543362;
      v31 = (const char *)v2;
      _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_DEBUG, "No threshold for activity %{public}@", buf, 0xCu);
    }
LABEL_16:

    goto LABEL_17;
  }
  v5 = v4;
  if (duration <= v4)
  {
LABEL_17:
    v7 = 0;
    goto LABEL_18;
  }
  if (__nwlog_activity_log::onceToken != -1)
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
  v6 = (id)gactivityLogObj;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 138543874;
    v31 = (const char *)v2;
    v32 = 2048;
    v33 = duration;
    v34 = 2048;
    v35 = v5;
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}@ over threshold (duration %llums exceeds threshold %llums)", buf, 0x20u);
  }

  v7 = 1;
LABEL_18:

  return v7;
}

void sub_1830B73B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_activity_get_duration(void *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v6 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v18 = "nw_activity_get_duration";
    v7 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v15 = 0;
    if (__nwlog_fault(v7, &type, &v15))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v9 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_activity_get_duration";
          _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null activity", buf, 0xCu);
        }
      }
      else if (v15)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        v13 = os_log_type_enabled(v8, type);
        if (backtrace_string)
        {
          if (v13)
          {
            *(_DWORD *)buf = 136446466;
            v18 = "nw_activity_get_duration";
            v19 = 2082;
            v20 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s called with null activity, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_34;
        }
        if (v13)
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_activity_get_duration";
          _os_log_impl(&dword_182FBE000, v8, v12, "%{public}s called with null activity, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v8 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v8, type))
        {
          *(_DWORD *)buf = 136446210;
          v18 = "nw_activity_get_duration";
          _os_log_impl(&dword_182FBE000, v8, v14, "%{public}s called with null activity, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_34:
    if (v7)
      free(v7);
    goto LABEL_36;
  }
  if ((*((_BYTE *)v1 + 132) & 8) == 0)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v10 = (id)gactivityLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "Activity not yet complete, returning duration 0", buf, 2u);
    }
    goto LABEL_17;
  }
  if ((*((_BYTE *)v1 + 132) & 2) != 0)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v10 = (id)gactivityLogObj;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_DEBUG, "Activity is lightweight, returning duration 0", buf, 2u);
    }
LABEL_17:

LABEL_36:
    v4 = 0;
    goto LABEL_7;
  }
  v3 = nw_delta_nanos(v1[4], v1[5]);
  if (v3 <= 0xF423FFFFFFFFFLL)
    v4 = (v3 / 0xF4240);
  else
    v4 = 0xFFFFFFFFLL;
LABEL_7:

  return v4;
}

uint64_t nw_activity_duration_threshold_for_label(int a1, int a2)
{
  NSObject *v4;
  uint64_t v5;
  const char *v6;
  NSObject *v7;
  uint32_t v8;
  _BOOL4 v10;
  _BOOL4 v11;
  int v13;
  uint64_t v14;
  __int16 v15;
  const char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!nw_activity_label_is_valid(a1, a2))
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v4 = (id)gactivityLogObj;
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
      goto LABEL_27;
    LOWORD(v13) = 0;
    v6 = "Returning NW_ACTIVITY_DURATION_INVALID for invalid label";
    v7 = v4;
    v8 = 2;
    goto LABEL_26;
  }
  if (a1 == 11 && a2 == 5)
  {
    if (__nwlog_activity_log::onceToken != -1)
      dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
    v4 = (id)gactivityLogObj;
    v5 = 2;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      v13 = 134218242;
      v5 = 2;
      v14 = 2;
      v15 = 2082;
      v16 = "libnetcore:test_activity_five";
LABEL_23:
      _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_DEBUG, "Returning threshold %llu for activity %{public}s", (uint8_t *)&v13, 0x16u);
      goto LABEL_28;
    }
    goto LABEL_28;
  }
  v10 = a1 == 11 && a2 == 6;
  if (__nwlog_activity_log::onceToken != -1)
    dispatch_once(&__nwlog_activity_log::onceToken, &__block_literal_global_15_44172);
  v4 = (id)gactivityLogObj;
  v11 = os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG);
  if (!v10)
  {
    if (!v11)
    {
LABEL_27:
      v5 = -1;
      goto LABEL_28;
    }
    v13 = 136446210;
    v14 = (uint64_t)nw_activity_domain_and_label_to_string(a1, a2);
    v6 = "No threshold for %{public}s, returning NW_ACTIVITY_DURATION_INVALID";
    v7 = v4;
    v8 = 12;
LABEL_26:
    _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, v6, (uint8_t *)&v13, v8);
    goto LABEL_27;
  }
  v5 = 200000;
  if (v11)
  {
    v13 = 134218242;
    v14 = 200000;
    v15 = 2082;
    v16 = "libnetcore:test_activity_six";
    goto LABEL_23;
  }
LABEL_28:

  return v5;
}

const char *nw_activity_domain_and_label_to_string(int a1, int a2)
{
  const char *result;
  const char *v3;
  const char *v4;
  const char *v5;
  const char *v6;
  const char *v7;

  switch(a1)
  {
    case 11:
      if ((a2 - 1) >= 9)
        return "libnetcore:invalid";
      else
        return off_1E14A5A50[a2 - 1];
    case 12:
      if ((a2 - 1) >= 4)
        return "cfnetwork:invalid";
      else
        return off_1E14A5A98[a2 - 1];
    case 13:
      if ((a2 - 1) >= 3)
        return "coremedia:invalid";
      else
        return off_1E14A5AB8[a2 - 1];
    case 14:
      if ((a2 - 1) >= 0xD)
        return "parsec:invalid";
      else
        return off_1E14A5AD0[a2 - 1];
    case 15:
      if ((a2 - 1) >= 0xA)
        return "siri:invalid";
      else
        return off_1E14A5B38[a2 - 1];
    case 16:
      if ((a2 - 1) >= 3)
        return "webkit:invalid";
      else
        return off_1E14A5B88[a2 - 1];
    case 17:
      if ((a2 - 1) >= 5)
        return "coremedia_crabs:invalid";
      else
        return off_1E14A5BA0[a2 - 1];
    case 18:
      if ((a2 - 1) >= 0x12)
        return "coremedia_hls:invalid";
      else
        return off_1E14A5BC8[a2 - 1];
    case 19:
      v3 = "cloudkit:invalid";
      v4 = "cloudkit:invalid_max";
      goto LABEL_110;
    case 20:
      v3 = "mmcs:invalid";
      v4 = "mmcs:invalid_max";
      goto LABEL_110;
    case 21:
      if ((a2 - 1) >= 0x18)
        return "mail:invalid";
      else
        return off_1E14A5C58[a2 - 1];
    case 22:
      if ((a2 - 1) >= 7)
        return "facetime:invalid";
      else
        return off_1E14A5D18[a2 - 1];
    case 23:
      if ((a2 - 1) >= 0x19)
        return "adplatforms:invalid";
      else
        return off_1E14A5D50[a2 - 1];
    case 24:
      if ((a2 - 1) >= 3)
        return "corelocation:invalid";
      else
        return off_1E14A5E18[a2 - 1];
    case 25:
      if ((a2 - 1) >= 3)
        return "airplay_sender:invalid";
      else
        return off_1E14A5E30[a2 - 1];
    case 26:
      if ((a2 - 1) >= 3)
        return "airplay_receiver:invalid";
      else
        return off_1E14A5E48[a2 - 1];
    case 27:
      if ((a2 - 1) >= 0x43)
        return "maps:invalid";
      else
        return off_1E14A5E60[a2 - 1];
    case 28:
      if ((a2 - 1) >= 0x43)
        return "maps_internal:invalid";
      else
        return off_1E14A6078[a2 - 1];
    case 29:
      if ((a2 - 1) >= 0x43)
        return "maps_external:invalid";
      else
        return off_1E14A6290[a2 - 1];
    case 30:
      if ((a2 - 1) >= 5)
        return "network_speed_test:invalid";
      else
        return off_1E14A64A8[a2 - 1];
    case 31:
      v5 = "captive:invalid";
      if (a2 == 1)
        v5 = "captive:captive_probe";
      v6 = "captive:invalid_max";
      goto LABEL_75;
    case 32:
      if ((a2 - 1) >= 0xD)
        return "safe_browsing:invalid";
      else
        return off_1E14A64D0[a2 - 1];
    case 33:
      if ((a2 - 1) >= 4)
        return "dns:invalid";
      else
        return off_1E14A6538[a2 - 1];
    case 34:
      if ((a2 - 1) >= 0xC)
        return "music:invalid";
      else
        return off_1E14A6558[a2 - 1];
    case 35:
      if ((a2 - 1) >= 3)
        return "battery:invalid";
      else
        return off_1E14A65B8[a2 - 1];
    case 36:
      if ((a2 - 1) >= 0xB)
        return "cloud_media_services:invalid";
      else
        return off_1E14A65D0[a2 - 1];
    case 37:
      if ((a2 - 1) >= 0xE)
        return "avconference:invalid";
      else
        return off_1E14A6628[a2 - 1];
    case 38:
      if ((a2 - 1) >= 4)
        return "appstore:invalid";
      else
        return off_1E14A6698[a2 - 1];
    case 39:
      v5 = "telephony_service:invalid";
      if (a2 == 1)
        v5 = "telephony_service:session";
      v6 = "telephony_service:invalid_max";
      goto LABEL_75;
    case 40:
      if ((a2 - 1) >= 8)
        return "network_experiments:invalid";
      else
        return off_1E14A66B8[a2 - 1];
    case 41:
      if ((a2 - 1) >= 7)
        return "network_perf:invalid";
      else
        return off_1E14A66F8[a2 - 1];
    case 42:
      if ((a2 - 1) >= 4)
        return "hotspot:invalid";
      else
        return off_1E14A6730[a2 - 1];
    case 43:
      if ((a2 - 1) >= 0x11)
        return "weather:invalid";
      else
        return off_1E14A6750[a2 - 1];
    case 44:
      if ((a2 - 1) >= 8)
        return "coordination:invalid";
      else
        return off_1E14A67D8[a2 - 1];
    case 45:
      if ((a2 - 1) >= 0xA)
        return "appstore_jet:invalid";
      else
        return off_1E14A6818[a2 - 1];
    case 46:
      v5 = "soundboard:invalid";
      if (a2 == 1)
        v5 = "soundboard:stereo_pair_volume_sync";
      v6 = "soundboard:invalid_max";
LABEL_75:
      if (a2 == 2)
        return v6;
      else
        return v5;
    case 47:
      if ((a2 - 1) >= 0xE)
        return "aea:invalid";
      else
        return off_1E14A6868[a2 - 1];
    case 48:
      if ((a2 - 1) >= 4)
        return "homekit:invalid";
      else
        return off_1E14A68D8[a2 - 1];
    case 49:
      if ((a2 - 1) >= 0xB)
        return "wifi:invalid";
      else
        return off_1E14A68F8[a2 - 1];
    case 50:
      if ((a2 - 1) >= 3)
        return "app_launch:invalid";
      else
        return off_1E14A6950[a2 - 1];
    case 51:
      if ((a2 - 1) >= 3)
        return "ams:invalid";
      else
        return off_1E14A6968[a2 - 1];
    case 52:
      if ((a2 - 1) >= 8)
        return "reve:invalid";
      else
        return off_1E14A6980[a2 - 1];
    case 53:
      if ((a2 - 1) >= 6)
        return "network_quality:invalid";
      else
        return off_1E14A69C0[a2 - 1];
    case 54:
      if ((a2 - 1) >= 5)
        return "news:invalid";
      else
        return off_1E14A69F0[a2 - 1];
    case 55:
      if ((a2 - 1) >= 5)
        return "cloud_compute:invalid";
      else
        return off_1E14A6A18[a2 - 1];
    case 56:
      v3 = "push:invalid";
      v4 = "push:invalid_max";
      goto LABEL_110;
    case 57:
      v3 = "nw_actor_system:invalid";
      v4 = "nw_actor_system:invalid_max";
LABEL_110:
      if (a2 == 1)
        result = v4;
      else
        result = v3;
      break;
    case 58:
      if ((a2 - 1) >= 0x12)
        result = "app_intents_services:invalid";
      else
        result = off_1E14A6A40[a2 - 1];
      break;
    case 59:
      if ((a2 - 1) >= 5)
        result = "stocks:invalid";
      else
        result = off_1E14A6AD0[a2 - 1];
      break;
    case 60:
      if ((a2 - 1) >= 0xC)
        result = "tv_app:invalid";
      else
        result = off_1E14A6AF8[a2 - 1];
      break;
    default:
      if ((a1 - 1) >= 0xA)
        v7 = "invalid:invalid";
      else
        v7 = "reserved:reserved";
      if ((a1 - 900) >= 0x64)
        result = v7;
      else
        result = "experimental:experimental";
      break;
  }
  return result;
}

void nw_protocol_data_trim(void *a1, unsigned int a2)
{
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char *v9;
  NSObject *v10;
  os_log_type_t v11;
  char *backtrace_string;
  os_log_type_t v13;
  _BOOL4 v14;
  os_log_type_t v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  char *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = v3;
    if (nw_frame_claim((uint64_t)v5, v6, a2, 0))
    {
      nw_frame_collapse((uint64_t)v5);
      nw_frame_unclaim((uint64_t)v5, v7, a2, 0);
    }

    goto LABEL_5;
  }
  __nwlog_obj();
  v8 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_data_trim";
  v9 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (__nwlog_fault(v9, &type, &v16))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_data_trim";
        _os_log_impl(&dword_182FBE000, v10, v11, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      v14 = os_log_type_enabled(v10, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_data_trim";
          v20 = 2082;
          v21 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_data_trim";
        _os_log_impl(&dword_182FBE000, v10, v13, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v10 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v10, type))
      {
        *(_DWORD *)buf = 136446210;
        v19 = "nw_protocol_data_trim";
        _os_log_impl(&dword_182FBE000, v10, v15, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v9)
    free(v9);
LABEL_5:

}

void nw_endpoint_handler_service_writes(void *a1)
{
  id v1;
  void *v2;
  NWConcrete_nw_endpoint_handler *v3;
  uint64_t mode;
  NWConcrete_nw_endpoint_flow *v5;
  id v6;
  const char *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  const char *v15;
  os_log_type_t v16;
  const char *v17;
  const char *v18;
  void *v19;
  os_log_type_t v20;
  char *backtrace_string;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  void *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  char *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v19 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_endpoint_handler_service_writes";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v8, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_endpoint_handler_service_writes";
          _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null handler", buf, 0xCu);
        }
        goto LABEL_35;
      }
      if (!v25)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_endpoint_handler_service_writes";
          _os_log_impl(&dword_182FBE000, v9, v24, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_35;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      v23 = os_log_type_enabled(v9, type);
      if (!backtrace_string)
      {
        if (v23)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_endpoint_handler_service_writes";
          _os_log_impl(&dword_182FBE000, v9, v22, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
        goto LABEL_35;
      }
      if (v23)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_endpoint_handler_service_writes";
        v29 = 2082;
        v30 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v9, v22, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(backtrace_string);
    }
LABEL_36:
    if (!v8)
      goto LABEL_38;
LABEL_37:
    free(v8);
    goto LABEL_38;
  }
  v3 = (NWConcrete_nw_endpoint_handler *)v1;
  mode = v3->mode;

  if ((_DWORD)mode == 2)
  {
    v5 = (NWConcrete_nw_endpoint_flow *)nw_endpoint_handler_copy_flow(v3);
    nw_flow_service_writes(v3, v5, &v5->shared_protocol);

    goto LABEL_38;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v6 = (id)gLogObj;
  if (mode > 5)
    v7 = "unknown-mode";
  else
    v7 = off_1E149FC18[mode];
  *(_DWORD *)buf = 136446722;
  v28 = "nw_endpoint_handler_service_writes";
  v29 = 2082;
  v30 = (void *)v7;
  v31 = 2082;
  v32 = "flow";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v8, &type, &v25))
    goto LABEL_36;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v10 = type;
    if (os_log_type_enabled(v9, type))
    {
      if (mode > 5)
        v11 = "unknown-mode";
      else
        v11 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v28 = "nw_endpoint_handler_service_writes";
      v29 = 2082;
      v30 = (void *)v11;
      v31 = 2082;
      v32 = "flow";
      _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
    }
LABEL_35:

    goto LABEL_36;
  }
  if (!v25)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v9 = (id)gLogObj;
    v16 = type;
    if (os_log_type_enabled(v9, type))
    {
      if (mode > 5)
        v17 = "unknown-mode";
      else
        v17 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v28 = "nw_endpoint_handler_service_writes";
      v29 = 2082;
      v30 = (void *)v17;
      v31 = 2082;
      v32 = "flow";
      _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
    }
    goto LABEL_35;
  }
  v12 = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (id)gLogObj;
  v13 = type;
  v14 = os_log_type_enabled(v9, type);
  if (!v12)
  {
    if (v14)
    {
      if (mode > 5)
        v18 = "unknown-mode";
      else
        v18 = off_1E149FC18[mode];
      *(_DWORD *)buf = 136446722;
      v28 = "nw_endpoint_handler_service_writes";
      v29 = 2082;
      v30 = (void *)v18;
      v31 = 2082;
      v32 = "flow";
      _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
    }
    goto LABEL_35;
  }
  if (v14)
  {
    if (mode > 5)
      v15 = "unknown-mode";
    else
      v15 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446978;
    v28 = "nw_endpoint_handler_service_writes";
    v29 = 2082;
    v30 = (void *)v15;
    v31 = 2082;
    v32 = "flow";
    v33 = 2082;
    v34 = v12;
    _os_log_impl(&dword_182FBE000, v9, v13, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
  }

  free(v12);
  if (v8)
    goto LABEL_37;
LABEL_38:

}

void sub_1830B8A94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_service_writes(NWConcrete_nw_endpoint_handler *a1, NWConcrete_nw_endpoint_flow *a2, nw_flow_protocol *a3)
{
  nw_protocol *output_handler;
  __int16 v6;
  void (*get_message_properties)(nw_protocol *, nw_flow_protocol *, uint64_t *);
  OS_nw_write_request *write_requests;
  OS_nw_write_request *initial_write_requests;
  nw_flow_protocol *v10;
  id *v11;
  id *v12;
  char v13;
  char v14;
  id *v15;
  NSObject *v16;
  id v17;
  size_t size;
  id *v19;
  size_t v20;
  id *v21;
  id v22;
  int v23;
  size_t v24;
  unsigned int v25;
  OS_nw_write_request *v26;
  id *v27;
  id v28;
  id *v29;
  id v30;
  unsigned int v31;
  NSObject *v32;
  const char *v33;
  const char *v34;
  nw_endpoint_t v35;
  const char *v36;
  const char *v37;
  const char *v38;
  id v39;
  uint64_t handle;
  id *v41;
  id *v42;
  NSObject *v43;
  id v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  id *v50;
  id v51;
  int v52;
  int v53;
  id *v54;
  size_t v55;
  id *v56;
  _BYTE *v57;
  uint64_t v58;
  NSObject *alloc;
  id v60;
  size_t v61;
  _DWORD *posix_error;
  id *v63;
  dispatch_data_t subrange;
  id *v65;
  NSObject *v66;
  id v67;
  size_t v68;
  size_t v69;
  id *v70;
  char v71;
  os_unfair_lock_s *v72;
  os_unfair_lock_s *v73;
  uint64_t v74;
  BOOL v75;
  NSObject *v76;
  NSObject *v77;
  NSObject *v78;
  nw_protocol_metadata_t v79;
  void *v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  int v84;
  unsigned int v85;
  uint64_t v86;
  uint64_t v87;
  id *v88;
  id v89;
  NSObject *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  size_t v94;
  __int16 v95;
  char v96;
  __int16 v97;
  id *v98;
  unsigned int pending_write_bytes;
  BOOL v100;
  unsigned int v101;
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  char v105;
  char v106;
  int v107;
  _BOOL4 v108;
  os_unfair_lock_s *v109;
  os_unfair_lock_s *v110;
  uint64_t v111;
  BOOL v112;
  _BYTE *v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t *v118;
  BOOL v119;
  uint64_t v120;
  NSObject *v121;
  const char *v122;
  const char *v123;
  nw_endpoint_t v124;
  const char *v125;
  const char *v126;
  id v127;
  int v128;
  char v129;
  NSObject *v130;
  const char *v131;
  const char *v132;
  nw_endpoint_t v133;
  const char *v134;
  const char *v135;
  id v136;
  NSObject *v137;
  const char *v138;
  const char *v139;
  nw_endpoint_t v140;
  const char *v141;
  id v142;
  int v143;
  NSObject *v144;
  const char *v145;
  const char *v146;
  nw_endpoint_t v147;
  const char *v148;
  id v149;
  char v150;
  const char *v151;
  const char *v152;
  nw_endpoint_t v153;
  const char *v154;
  const char *v155;
  id v156;
  id v157;
  id v158;
  _DWORD *v159;
  int v160;
  int v161;
  int v162;
  int v163;
  char v164;
  NSObject *v165;
  const char *v166;
  const char *v167;
  nw_endpoint_t v168;
  const char *v169;
  id v170;
  _BYTE *v171;
  void *v172;
  _BYTE *v173;
  void *v174;
  _QWORD *v175;
  _QWORD *v176;
  char v177;
  NSObject *v178;
  const char *v179;
  const char *v180;
  nw_endpoint_t v181;
  const char *v182;
  const char *v183;
  const char *v184;
  id v185;
  unsigned int v186;
  char v187;
  const char *v188;
  const char *v189;
  nw_endpoint_t v190;
  const char *v191;
  const char *v192;
  const char *v193;
  id v194;
  const char *v195;
  const char *v196;
  nw_endpoint_t v197;
  const char *v198;
  const char *v199;
  id v200;
  const char *v201;
  const char *v202;
  nw_endpoint_t v203;
  const char *v204;
  id v205;
  NSObject *v206;
  const char *v207;
  const char *v208;
  nw_endpoint_t v209;
  const char *v210;
  const char *v211;
  const char *v212;
  id v213;
  uint64_t v214;
  NSObject *v215;
  const char *v216;
  const char *v217;
  nw_endpoint_t v218;
  const char *v219;
  const char *v220;
  const char *v221;
  id v222;
  OS_nw_error *last_error;
  OS_nw_error *v224;
  int v225;
  int error_code;
  NSObject *v227;
  OS_nw_write_request *v228;
  OS_nw_write_request *v229;
  OS_nw_write_request *v230;
  OS_nw_write_request *v231;
  int v232;
  char v233;
  NSObject *v234;
  const char *v235;
  const char *v236;
  nw_endpoint_t v237;
  const char *v238;
  const char *v239;
  const char *v240;
  id v241;
  OS_nw_write_request *v242;
  OS_nw_write_request *v243;
  OS_nw_write_request *v244;
  OS_nw_write_request *v245;
  int minimize_logging;
  char logging_disabled;
  const char *v248;
  const char *v249;
  nw_endpoint_t v250;
  const char *v251;
  const char *v252;
  const char *v253;
  id v254;
  void *v256;
  char *v257;
  NSObject *v258;
  os_log_type_t v259;
  char *backtrace_string;
  os_log_type_t v261;
  _BOOL4 v262;
  const char *v263;
  const char *v264;
  nw_endpoint_t v265;
  const char *v266;
  const char *v267;
  const char *v268;
  id v269;
  os_log_type_t v270;
  const char *v271;
  const char *v272;
  nw_endpoint_t v273;
  const char *v274;
  const char *v275;
  const char *v276;
  id v277;
  const char *id_string;
  const char *v279;
  nw_endpoint_t v280;
  const char *logging_description;
  const char *v282;
  const char *v283;
  id v284;
  const char *v285;
  const char *v286;
  unint64_t StatusReg;
  nw_protocol *v288;
  os_unfair_lock_s *lock;
  OS_nw_error *v290;
  NWConcrete_nw_endpoint_handler *v291;
  NWConcrete_nw_endpoint_flow *v292;
  id *v293;
  id v294;
  nw_flow_protocol *v295;
  NWConcrete_nw_endpoint_flow *v296;
  const char *v297;
  const char *v298;
  const char *v299;
  const char *v300;
  size_t v301;
  const char *v302;
  const char *v303;
  const char *v304;
  id v305;
  const char *v306;
  NSObject *v307;
  NSObject *v308;
  NSObject *v309;
  NSObject *v310;
  NSObject *v311;
  NSObject *v312;
  NSObject *data;
  const char *dataa;
  const char *datab;
  id v316;
  void *v317;
  id v318;
  id *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  _QWORD v324[2];
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  int v328;
  _QWORD foreach_block[4];
  id v330;
  BOOL v331;
  _QWORD applier[7];
  int v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t *v336;
  _BYTE buf[24];
  const char *v338;
  _BYTE v339[30];
  __int16 v340;
  id v341;
  __int16 v342;
  unsigned int v343;
  __int16 v344;
  size_t v345;
  uint64_t v346;

  v346 = *MEMORY[0x1E0C80C00];
  v291 = a1;
  v296 = a2;
  if (!a3)
  {
    __nwlog_obj();
    v256 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_flow_service_writes";
    v257 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(applier[0]) = 16;
    LOBYTE(foreach_block[0]) = 0;
    if (__nwlog_fault(v257, applier, foreach_block))
    {
      if (LOBYTE(applier[0]) == 17)
      {
        __nwlog_obj();
        v258 = objc_claimAutoreleasedReturnValue();
        v259 = applier[0];
        if (os_log_type_enabled(v258, applier[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_service_writes";
          _os_log_impl(&dword_182FBE000, v258, v259, "%{public}s called with null flow_protocol", buf, 0xCu);
        }
      }
      else if (LOBYTE(foreach_block[0]))
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v258 = objc_claimAutoreleasedReturnValue();
        v261 = applier[0];
        v262 = os_log_type_enabled(v258, applier[0]);
        if (backtrace_string)
        {
          if (v262)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_flow_service_writes";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v258, v261, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_361;
        }
        if (v262)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_service_writes";
          _os_log_impl(&dword_182FBE000, v258, v261, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v258 = objc_claimAutoreleasedReturnValue();
        v270 = applier[0];
        if (os_log_type_enabled(v258, applier[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_flow_service_writes";
          _os_log_impl(&dword_182FBE000, v258, v270, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_361:
    if (v257)
      free(v257);
    goto LABEL_305;
  }
  output_handler = a3->protocol.output_handler;
  if (output_handler)
  {
    v6 = *((_WORD *)a3 + 166);
    if ((v6 & 8) == 0)
    {
      *((_WORD *)a3 + 166) = v6 | 8;
      v320 = 0;
      get_message_properties = (void (*)(nw_protocol *, nw_flow_protocol *, uint64_t *))output_handler->callbacks->get_message_properties;
      if (get_message_properties)
        get_message_properties(output_handler, a3, &v320);
      v295 = a3;
      v288 = output_handler;
      lock = &v296->lock;
      StatusReg = _ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3));
      while (1)
      {
        write_requests = v295->write_requests;
        initial_write_requests = v295->initial_write_requests;
        if (write_requests)
        {
          if (!initial_write_requests)
          {
            v10 = v295;
            goto LABEL_13;
          }
        }
        else if (!initial_write_requests)
        {
          goto LABEL_337;
        }
        v10 = v295;
        v11 = nw_write_request_copy_next_incomplete_request(v295->initial_write_requests, (v320 & 0x200000000) != 0, (*((unsigned __int16 *)v295 + 166) >> 1) & 1, v295->last_output_context);
        if (v11)
          goto LABEL_14;
        write_requests = v295->write_requests;
        if (!write_requests)
          goto LABEL_320;
LABEL_13:
        v11 = nw_write_request_copy_next_incomplete_request(write_requests, (v320 & 0x200000000) != 0, (*((unsigned __int16 *)v10 + 166) >> 1) & 1, v10->last_output_context);
        if (!v11)
        {
LABEL_320:
          if ((nw_flow_handle_send_complete(v291, v296, v10) & 1) != 0)
          {
LABEL_321:

            goto LABEL_337;
          }
          v242 = (OS_nw_write_request *)nw_write_request_list_prune(v295->initial_write_requests);
          v243 = v295->initial_write_requests;
          v295->initial_write_requests = v242;

          v244 = (OS_nw_write_request *)nw_write_request_list_prune(v295->write_requests);
          v245 = v295->write_requests;
          v295->write_requests = v244;

          minimize_logging = nw_endpoint_handler_get_minimize_logging(v291);
          logging_disabled = nw_endpoint_handler_get_logging_disabled(v291);
          if (minimize_logging)
          {
            if ((logging_disabled & 1) != 0)
              goto LABEL_321;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v234 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
            {
              id_string = nw_endpoint_handler_get_id_string(v291);
              v279 = nw_endpoint_handler_dry_run_string(v291);
              v280 = nw_endpoint_handler_copy_endpoint(v291);
              logging_description = nw_endpoint_get_logging_description(v280);
              v282 = nw_endpoint_handler_state_string(v291);
              v283 = nw_endpoint_handler_mode_string(v291);
              v284 = nw_endpoint_handler_copy_current_path(v291);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_flow_service_writes";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = id_string;
              *(_WORD *)&buf[22] = 2082;
              v338 = v279;
              *(_WORD *)v339 = 2082;
              *(_QWORD *)&v339[2] = logging_description;
              *(_WORD *)&v339[10] = 2082;
              *(_QWORD *)&v339[12] = v282;
              *(_WORD *)&v339[20] = 2082;
              *(_QWORD *)&v339[22] = v283;
              v340 = 2114;
              v341 = v284;
              _os_log_impl(&dword_182FBE000, v234, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No unblocked write requests, stopping servicing writes", buf, 0x48u);

            }
          }
          else
          {
            if ((logging_disabled & 1) != 0)
              goto LABEL_321;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v234 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v234, OS_LOG_TYPE_INFO))
            {
              v248 = nw_endpoint_handler_get_id_string(v291);
              v249 = nw_endpoint_handler_dry_run_string(v291);
              v250 = nw_endpoint_handler_copy_endpoint(v291);
              v251 = nw_endpoint_get_logging_description(v250);
              v252 = nw_endpoint_handler_state_string(v291);
              v253 = nw_endpoint_handler_mode_string(v291);
              v254 = nw_endpoint_handler_copy_current_path(v291);
              *(_DWORD *)buf = 136447746;
              *(_QWORD *)&buf[4] = "nw_flow_service_writes";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v248;
              *(_WORD *)&buf[22] = 2082;
              v338 = v249;
              *(_WORD *)v339 = 2082;
              *(_QWORD *)&v339[2] = v251;
              *(_WORD *)&v339[10] = 2082;
              *(_QWORD *)&v339[12] = v252;
              *(_WORD *)&v339[20] = 2082;
              *(_QWORD *)&v339[22] = v253;
              v340 = 2114;
              v341 = v254;
              _os_log_impl(&dword_182FBE000, v234, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No unblocked write requests, stopping servicing writes", buf, 0x48u);

            }
          }
          v293 = 0;
          goto LABEL_335;
        }
LABEL_14:
        if ((*((_WORD *)v10 + 166) & 0x800) != 0)
        {
          v12 = v11;
          v13 = *((_BYTE *)v12 + 128);
          v293 = v12;

          if ((v13 & 4) == 0)
          {
            v232 = nw_endpoint_handler_get_minimize_logging(v291);
            v233 = nw_endpoint_handler_get_logging_disabled(v291);
            if (v232)
            {
              if ((v233 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v234 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v234, OS_LOG_TYPE_DEBUG))
                {
                  v271 = nw_endpoint_handler_get_id_string(v291);
                  v272 = nw_endpoint_handler_dry_run_string(v291);
                  v273 = nw_endpoint_handler_copy_endpoint(v291);
                  v274 = nw_endpoint_get_logging_description(v273);
                  v275 = nw_endpoint_handler_state_string(v291);
                  v276 = nw_endpoint_handler_mode_string(v291);
                  v277 = nw_endpoint_handler_copy_current_path(v291);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_flow_service_writes";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v271;
                  *(_WORD *)&buf[22] = 2082;
                  v338 = v272;
                  *(_WORD *)v339 = 2082;
                  *(_QWORD *)&v339[2] = v274;
                  *(_WORD *)&v339[10] = 2082;
                  *(_QWORD *)&v339[12] = v275;
                  *(_WORD *)&v339[20] = 2082;
                  *(_QWORD *)&v339[22] = v276;
                  v340 = 2114;
                  v341 = v277;
                  _os_log_impl(&dword_182FBE000, v234, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is not idempotent, stopping servicing writes", buf, 0x48u);

                }
LABEL_335:

              }
            }
            else if ((v233 & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v234 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v234, OS_LOG_TYPE_INFO))
              {
                v235 = nw_endpoint_handler_get_id_string(v291);
                v236 = nw_endpoint_handler_dry_run_string(v291);
                v237 = nw_endpoint_handler_copy_endpoint(v291);
                v238 = nw_endpoint_get_logging_description(v237);
                v239 = nw_endpoint_handler_state_string(v291);
                v240 = nw_endpoint_handler_mode_string(v291);
                v241 = nw_endpoint_handler_copy_current_path(v291);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_flow_service_writes";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v235;
                *(_WORD *)&buf[22] = 2082;
                v338 = v236;
                *(_WORD *)v339 = 2082;
                *(_QWORD *)&v339[2] = v238;
                *(_WORD *)&v339[10] = 2082;
                *(_QWORD *)&v339[12] = v239;
                *(_WORD *)&v339[20] = 2082;
                *(_QWORD *)&v339[22] = v240;
                v340 = 2114;
                v341 = v241;
                _os_log_impl(&dword_182FBE000, v234, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is not idempotent, stopping servicing writes", buf, 0x48u);

              }
              goto LABEL_335;
            }
LABEL_336:

            goto LABEL_337;
          }
        }
        v14 = BYTE4(v320);
        v15 = v11;
        v16 = v15[7];
        v293 = v15;
        v17 = v15[9];
        if ((v14 & 1) == 0)
        {
          if (v16)
          {
            if (!v17)
            {
              size = dispatch_data_get_size(v16);
              v19 = v293;
LABEL_25:
              if (size <= (unint64_t)v19[14])
                LODWORD(v22) = 0;
              else
                v22 = v19[14];

              if ((_DWORD)size != (_DWORD)v22)
              {
                v23 = -1;
                goto LABEL_48;
              }
LABEL_43:
              v27 = v293;
              v28 = v27[8];

              if (v28)
              {
                v29 = v27;
                v30 = v27[8];

                LOBYTE(v29) = nw_content_context_has_metadata(v30);
                v23 = -1;
                if ((v29 & 1) != 0)
                  goto LABEL_48;
              }
              else
              {
                v23 = -1;
              }
LABEL_47:
              if ((nw_flow_handle_send_complete(v291, v296, v295) & 1) != 0)
                goto LABEL_336;
              goto LABEL_48;
            }
          }
          else if (!v17)
          {

            goto LABEL_43;
          }
          v19 = v293;
          size = (size_t)v293[12];
          goto LABEL_25;
        }
        if (!v16)
        {
          if (!v17)
          {
            v25 = 0;
            v21 = v293;
            goto LABEL_35;
          }
LABEL_31:
          v21 = v293;
          v20 = (size_t)v293[12];
          goto LABEL_32;
        }
        if (v17)
          goto LABEL_31;
        v20 = dispatch_data_get_size(v16);
        v21 = v293;
LABEL_32:
        v24 = (size_t)v21[14];
        if (v20 <= v24)
          LODWORD(v24) = 0;
        v25 = v20 - v24;
LABEL_35:

        if ((_DWORD)v320 && v320 < v25)
        {
          v23 = 1;
          goto LABEL_48;
        }
        v26 = v295->initial_write_requests;
        if (!v26)
          v26 = v295->write_requests;
        v23 = nw_write_request_remaining_datagram_count(v26);
        if (!v23)
          goto LABEL_47;
LABEL_48:
        v318 = 0;
        v319 = &v318;
        v290 = v295->last_error;
        v31 = ((uint64_t (*)(void))v288->callbacks->get_output_frames)();
        if (v23 == -1)
        {
          if (!gLogDatapath || (nw_endpoint_handler_get_logging_disabled(v291) & 1) != 0)
            goto LABEL_56;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v32 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            v188 = nw_endpoint_handler_get_id_string(v291);
            v189 = nw_endpoint_handler_dry_run_string(v291);
            v190 = nw_endpoint_handler_copy_endpoint(v291);
            v191 = nw_endpoint_get_logging_description(v190);
            v192 = nw_endpoint_handler_state_string(v291);
            v193 = nw_endpoint_handler_mode_string(v291);
            v194 = nw_endpoint_handler_copy_current_path(v291);
            *(_DWORD *)buf = 136448002;
            *(_QWORD *)&buf[4] = "nw_flow_service_writes";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v188;
            *(_WORD *)&buf[22] = 2082;
            v338 = v189;
            *(_WORD *)v339 = 2082;
            *(_QWORD *)&v339[2] = v191;
            *(_WORD *)&v339[10] = 2082;
            *(_QWORD *)&v339[12] = v192;
            *(_WORD *)&v339[20] = 2082;
            *(_QWORD *)&v339[22] = v193;
            v340 = 2114;
            v341 = v194;
            v342 = 1024;
            v343 = v31;
            _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output handler has %u frames to write", buf, 0x4Eu);

          }
        }
        else
        {
          if (!gLogDatapath || (nw_endpoint_handler_get_logging_disabled(v291) & 1) != 0)
            goto LABEL_56;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v32 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
          {
            v33 = nw_endpoint_handler_get_id_string(v291);
            v34 = nw_endpoint_handler_dry_run_string(v291);
            v35 = nw_endpoint_handler_copy_endpoint(v291);
            v36 = nw_endpoint_get_logging_description(v35);
            v37 = nw_endpoint_handler_state_string(v291);
            v38 = nw_endpoint_handler_mode_string(v291);
            v39 = nw_endpoint_handler_copy_current_path(v291);
            *(_DWORD *)buf = 136448258;
            *(_QWORD *)&buf[4] = "nw_flow_service_writes";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v33;
            *(_WORD *)&buf[22] = 2082;
            v338 = v34;
            *(_WORD *)v339 = 2082;
            *(_QWORD *)&v339[2] = v36;
            *(_WORD *)&v339[10] = 2082;
            *(_QWORD *)&v339[12] = v37;
            *(_WORD *)&v339[20] = 2082;
            *(_QWORD *)&v339[22] = v38;
            v340 = 2114;
            v341 = v39;
            v342 = 1024;
            v343 = v31;
            v344 = 1024;
            LODWORD(v345) = v23;
            _os_log_impl(&dword_182FBE000, v32, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output handler has %u frames to write, request wants %u frames", buf, 0x54u);

          }
        }

LABEL_56:
        if (!v318 || !v31)
        {
          if (v31 && (nw_endpoint_handler_get_logging_disabled(v291) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v215 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v215, OS_LOG_TYPE_ERROR))
            {
              v216 = nw_endpoint_handler_get_id_string(v291);
              v217 = nw_endpoint_handler_dry_run_string(v291);
              v218 = nw_endpoint_handler_copy_endpoint(v291);
              v219 = nw_endpoint_get_logging_description(v218);
              v220 = nw_endpoint_handler_state_string(v291);
              v221 = nw_endpoint_handler_mode_string(v291);
              v222 = nw_endpoint_handler_copy_current_path(v291);
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_flow_service_writes";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v216;
              *(_WORD *)&buf[22] = 2082;
              v338 = v217;
              *(_WORD *)v339 = 2082;
              *(_QWORD *)&v339[2] = v219;
              *(_WORD *)&v339[10] = 2082;
              *(_QWORD *)&v339[12] = v220;
              *(_WORD *)&v339[20] = 2082;
              *(_QWORD *)&v339[22] = v221;
              v340 = 2114;
              v341 = v222;
              v342 = 1024;
              v343 = v31;
              _os_log_impl(&dword_182FBE000, v215, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Output handler reported %u frames to write, but array is empty", buf, 0x4Eu);

            }
          }
          last_error = v295->last_error;
          if (last_error)
          {
            if (v290 != last_error)
            {
              v224 = last_error;
              v225 = *((_DWORD *)v224 + 2);

              if (v225 == 1)
              {
                error_code = nw_error_get_error_code((nw_error_t)v295->last_error);
                __nwlog_obj();
                v227 = objc_claimAutoreleasedReturnValue();
                if (os_log_type_enabled(v227, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_flow_service_writes";
                  *(_WORD *)&buf[12] = 2114;
                  *(_QWORD *)&buf[14] = v293;
                  *(_WORD *)&buf[22] = 1024;
                  LODWORD(v338) = error_code;
                  _os_log_impl(&dword_182FBE000, v227, OS_LOG_TYPE_ERROR, "%{public}s Failing write request %{public}@ %{darwin.errno}d", buf, 0x1Cu);
                }

                nw_write_request_fail(v293, error_code);
                v228 = (OS_nw_write_request *)nw_write_request_list_prune(v295->initial_write_requests);
                v229 = v295->initial_write_requests;
                v295->initial_write_requests = v228;

                v230 = (OS_nw_write_request *)nw_write_request_list_prune(v295->write_requests);
                v231 = v295->write_requests;
                v295->write_requests = v230;

              }
            }
          }

          goto LABEL_336;
        }
        v292 = v296;
        handle = (uint64_t)v295->protocol.handle;
        v294 = *(id *)(handle + 160);
        v335 = 0;
        v336 = &v335;
        v334 = 0;
        v41 = nw_flow_copy_write_request(handle, (uint64_t)&v320, &v334);
        v42 = v41;
        if (v41 && (v43 = nw_write_request_copy_data(v41)) != 0)
        {
          v307 = v43;
          v301 = dispatch_data_get_size(v43);
        }
        else
        {
          v301 = 0;
          v307 = 0;
        }
        v44 = v318;
        v45 = (uint64_t)v44;
        v46 = 0;
        if (!v42 || !v44)
          goto LABEL_250;
        v47 = 0;
        v48 = 0;
        while (1)
        {
          v49 = *(void **)(v45 + 32);
          if (!v49 && !*(_QWORD *)(v45 + 40))
            v49 = 0;
          v316 = v49;
          v50 = v42;
          v51 = v50[9];

          if (!v51)
          {
            data = v307;
            if ((*(_WORD *)(handle + 332) & 0x800) == 0)
              goto LABEL_97;
            goto LABEL_96;
          }
          v52 = *(_DWORD *)(v45 + 52);
          if (v52)
          {
            v53 = *(_DWORD *)(v45 + 56) + *(_DWORD *)(v45 + 60);
            v54 = v50;
            data = 0;
            v55 = (v52 - v53);
            if (v52 != v53 && v50[9])
            {
              v56 = v54;
              v57 = v54[14];
              if ((_BYTE *)v54[12] - v57 >= v55)
                v58 = (v52 - v53);
              else
                v58 = (_BYTE *)v54[12] - v57;
              v325 = 0;
              alloc = dispatch_data_create_alloc();
              v321 = 0;
              v322 = (uint64_t)&v321;
              v323 = 0x2020000000;
              v324[0] = 0;
              v60 = v50[9];
              *(_QWORD *)buf = MEMORY[0x1E0C809B0];
              *(_QWORD *)&buf[8] = 3221225472;
              *(_QWORD *)&buf[16] = __nw_write_request_copy_data_from_fd_block_invoke;
              v338 = (const char *)&unk_1E149FF30;
              *(_QWORD *)v339 = &v321;
              *(_QWORD *)&v339[8] = v325;
              *(_QWORD *)&v339[16] = v58;
              nw_fd_wrapper_get_fd(v60, buf);
              v61 = *(_QWORD *)(v322 + 24);
              if (v61)
              {
                if (v61 == -1)
                {
                  posix_error = nw_error_create_posix_error(**(_DWORD **)(StatusReg + 8));
                  nw_write_request_report(v56, 0, posix_error);

                  data = 0;
                }
                else
                {
                  if (v61 >= v55)
                    subrange = alloc;
                  else
                    subrange = dispatch_data_create_subrange(alloc, 0, v61);
                  data = subrange;
                }
              }
              else
              {
                data = 0;
                *((_BYTE *)v56 + 128) |= 0x10u;
              }
              _Block_object_dispose(&v321, 8);

            }
          }
          else
          {
            v63 = v50;
            data = 0;
          }

          v65 = v50;
          v66 = v65[7];
          v67 = v50[9];
          if (!v66)
          {
            if (!v67)
            {
              v301 = 0;
              goto LABEL_95;
            }
LABEL_91:
            v68 = (size_t)v65[12];
            goto LABEL_92;
          }
          if (v67)
            goto LABEL_91;
          v68 = dispatch_data_get_size(v66);
LABEL_92:
          v69 = (size_t)v65[14];
          if (v68 <= v69)
            v69 = 0;
          v301 = v68 - v69;
LABEL_95:

          v47 = 0;
          if ((*(_WORD *)(handle + 332) & 0x800) == 0)
            goto LABEL_97;
LABEL_96:
          v70 = v50;
          v71 = *((_BYTE *)v70 + 128);

          if ((v71 & 4) == 0)
          {
            v128 = nw_endpoint_handler_get_minimize_logging(v294);
            v129 = nw_endpoint_handler_get_logging_disabled(v294);
            if (v128)
            {
              if ((v129 & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v312 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v312, OS_LOG_TYPE_DEBUG))
                {
                  v195 = nw_endpoint_handler_get_id_string(v294);
                  v196 = nw_endpoint_handler_dry_run_string(v294);
                  v197 = nw_endpoint_handler_copy_endpoint(v294);
                  v198 = nw_endpoint_get_logging_description(v197);
                  v306 = nw_endpoint_handler_state_string(v294);
                  v199 = nw_endpoint_handler_mode_string(v294);
                  v200 = nw_endpoint_handler_copy_current_path(v294);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
                  *(_WORD *)&buf[12] = 2082;
                  *(_QWORD *)&buf[14] = v195;
                  *(_WORD *)&buf[22] = 2082;
                  v338 = v196;
                  *(_WORD *)v339 = 2082;
                  *(_QWORD *)&v339[2] = v198;
                  *(_WORD *)&v339[10] = 2082;
                  v130 = v312;
                  *(_QWORD *)&v339[12] = v306;
                  *(_WORD *)&v339[20] = 2082;
                  *(_QWORD *)&v339[22] = v199;
                  v340 = 2114;
                  v341 = v200;
                  _os_log_impl(&dword_182FBE000, v312, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is not idempotent, stopping preparing frames", buf, 0x48u);

                }
                else
                {
                  v130 = v312;
                }
LABEL_221:

              }
            }
            else if ((v129 & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v130 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v130, OS_LOG_TYPE_INFO))
              {
                v309 = v130;
                v131 = nw_endpoint_handler_get_id_string(v294);
                v132 = nw_endpoint_handler_dry_run_string(v294);
                v133 = nw_endpoint_handler_copy_endpoint(v294);
                v134 = nw_endpoint_get_logging_description(v133);
                v303 = nw_endpoint_handler_state_string(v294);
                v135 = nw_endpoint_handler_mode_string(v294);
                v136 = nw_endpoint_handler_copy_current_path(v294);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v131;
                *(_WORD *)&buf[22] = 2082;
                v338 = v132;
                *(_WORD *)v339 = 2082;
                *(_QWORD *)&v339[2] = v134;
                *(_WORD *)&v339[10] = 2082;
                v130 = v309;
                *(_QWORD *)&v339[12] = v303;
                *(_WORD *)&v339[20] = 2082;
                *(_QWORD *)&v339[22] = v135;
                v340 = 2114;
                v341 = v136;
                _os_log_impl(&dword_182FBE000, v309, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request is not idempotent, stopping preparing frames", buf, 0x48u);

              }
              goto LABEL_221;
            }
            v46 = v48;
            goto LABEL_246;
          }
LABEL_97:
          v70 = v50;
          v46 = v70[8];

          if (!v46)
            goto LABEL_110;
          v72 = (os_unfair_lock_s *)v46;
          v73 = v72;
          if (v72 == (os_unfair_lock_s *)&__block_literal_global_5_41741
            || v72 == (os_unfair_lock_s *)&__block_literal_global_4
            || v72 == (os_unfair_lock_s *)&__block_literal_global_3_41726
            || v72 == (os_unfair_lock_s *)&__block_literal_global_41718)
          {

LABEL_108:
            v76 = *(NSObject **)(handle + 232);
            *(_QWORD *)(handle + 232) = 0;
            goto LABEL_109;
          }
          os_unfair_lock_lock(v72 + 28);
          v74 = *(_QWORD *)&v73[22]._os_unfair_lock_opaque;
          if (v74)
            v74 = (uint64_t)(*(_QWORD *)(v74 + 24) - *(_QWORD *)(v74 + 16)) >> 3;
          v75 = v74 == 0;
          os_unfair_lock_unlock(v73 + 28);

          if (v75)
            goto LABEL_108;
          v76 = nw_parameters_copy_default_protocol_stack(*(nw_parameters_t *)(handle + 176));
          v77 = nw_protocol_stack_copy_transport_protocol(v76);
          v78 = nw_protocol_options_copy_definition(v77);
          v79 = nw_content_context_copy_protocol_metadata((nw_content_context_t)v73, v78);
          v80 = *(void **)(handle + 232);
          *(_QWORD *)(handle + 232) = v79;

LABEL_109:
          *(_WORD *)(handle + 332) |= 2u;
LABEL_110:
          v321 = 0;
          v322 = (uint64_t)&v321;
          LODWORD(v324[0]) = 0;
          v323 = 0x2020000000;
          if ((*(_WORD *)(v45 + 204) & 2) != 0)
            break;
          if (!*(_QWORD *)(v45 + 112)
            || (*(_WORD *)(v45 + 204) & 0x100) != 0
            && g_channel_check_validity
            && !g_channel_check_validity(v45, *(_QWORD *)(v45 + 88)))
          {
            v83 = 0;
            v86 = 0;
            if ((v320 & 0x100000000) == 0)
              goto LABEL_129;
          }
          else
          {
            v82 = *(_DWORD *)(v45 + 52);
            v81 = *(unsigned int *)(v45 + 56);
            if (v82)
              v83 = v82 - (v81 + *(_DWORD *)(v45 + 60));
            else
              v83 = 0;
            v86 = *(_QWORD *)(v45 + 112) + v81;
            if ((v320 & 0x100000000) == 0)
              goto LABEL_129;
          }
          if (v301 > v83)
          {
            if ((nw_endpoint_handler_get_logging_disabled(v294) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v144 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v144, OS_LOG_TYPE_ERROR))
              {
                v311 = v144;
                v145 = nw_endpoint_handler_get_id_string(v294);
                v146 = nw_endpoint_handler_dry_run_string(v294);
                v147 = nw_endpoint_handler_copy_endpoint(v294);
                v148 = nw_endpoint_get_logging_description(v147);
                v298 = nw_endpoint_handler_state_string(v294);
                v286 = nw_endpoint_handler_mode_string(v294);
                v149 = nw_endpoint_handler_copy_current_path(v294);
                *(_DWORD *)buf = 136448258;
                *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v145;
                *(_WORD *)&buf[22] = 2082;
                v338 = v146;
                *(_WORD *)v339 = 2082;
                *(_QWORD *)&v339[2] = v148;
                *(_WORD *)&v339[10] = 2082;
                *(_QWORD *)&v339[12] = v298;
                *(_WORD *)&v339[20] = 2082;
                *(_QWORD *)&v339[22] = v286;
                v340 = 2114;
                v341 = v149;
                v342 = 1024;
                v343 = v83;
                v344 = 2048;
                v144 = v311;
                v345 = v301;
                _os_log_impl(&dword_182FBE000, v311, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Data won't fit in frame (%u < %zu)", buf, 0x58u);

              }
            }
            nw_write_request_fail(v70, 40);
            goto LABEL_245;
          }
LABEL_129:
          v88 = v70;
          v89 = v50[9];

          if (v89)
          {
            if (!data)
              goto LABEL_138;
            v90 = data;
            v91 = dispatch_data_get_size(data);
            goto LABEL_137;
          }
          if (v83 >= (int)v301 - (int)v47)
            v91 = v301 - v47;
          else
            v91 = v83;
          if (data)
          {
            v90 = data;
LABEL_137:
            applier[0] = MEMORY[0x1E0C809B0];
            applier[1] = 3221225472;
            applier[2] = ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke;
            applier[3] = &unk_1E149C810;
            v333 = v91;
            applier[4] = &v321;
            applier[5] = v47;
            applier[6] = v86;
            dispatch_data_apply(v90, applier);
          }
LABEL_138:
          if (!nw_frame_claim(v45, v87, *(_DWORD *)(v322 + 24), 0))
          {
            if ((nw_endpoint_handler_get_logging_disabled(v294) & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v121 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v121, OS_LOG_TYPE_ERROR))
              {
                v308 = v121;
                v122 = nw_endpoint_handler_get_id_string(v294);
                v123 = nw_endpoint_handler_dry_run_string(v294);
                v124 = nw_endpoint_handler_copy_endpoint(v294);
                v125 = nw_endpoint_get_logging_description(v124);
                v302 = nw_endpoint_handler_state_string(v294);
                v126 = nw_endpoint_handler_mode_string(v294);
                v127 = nw_endpoint_handler_copy_current_path(v294);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = v122;
                *(_WORD *)&buf[22] = 2082;
                v338 = v123;
                *(_WORD *)v339 = 2082;
                *(_QWORD *)&v339[2] = v125;
                *(_WORD *)&v339[10] = 2082;
                v121 = v308;
                *(_QWORD *)&v339[12] = v302;
                *(_WORD *)&v339[20] = 2082;
                *(_QWORD *)&v339[22] = v126;
                v340 = 2114;
                v341 = v127;
                _os_log_impl(&dword_182FBE000, v308, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Claiming frame failed", buf, 0x48u);

              }
            }
            nw_write_request_fail(v70, 22);
            goto LABEL_245;
          }
          v92 = v334;
          v93 = *(unsigned int *)(v322 + 24);
          v94 = (v93 + v47);
          if (v316 && v301 > v94)
          {
            if (nw_write_request_consume_bytes(v70, *(unsigned int *)(v322 + 24)))
              v95 = 0;
            else
              v95 = 2;
            *(_WORD *)(handle + 332) = *(_WORD *)(handle + 332) & 0xFFFD | v95;
            v42 = v70;
            v96 = *((_BYTE *)v42 + 128);

            v47 += v93;
            v307 = data;
          }
          else
          {
            if (nw_write_request_consume_bytes(v70, *(unsigned int *)(v322 + 24)))
              v97 = 0;
            else
              v97 = 2;
            *(_WORD *)(handle + 332) = *(_WORD *)(handle + 332) & 0xFFFD | v97;
            v98 = v70;
            v96 = *((_BYTE *)v98 + 128);

            v42 = nw_flow_copy_write_request(handle, (uint64_t)&v320, &v334);
            os_unfair_lock_lock(lock);
            pending_write_bytes = v296->pending_write_bytes;
            v100 = pending_write_bytes >= v94;
            v101 = pending_write_bytes - v94;
            if (!v100)
              v101 = 0;
            v296->pending_write_bytes = v101;
            os_unfair_lock_unlock(lock);
            if (v42)
            {
              v307 = nw_write_request_copy_data(v42);

              if (v307)
              {
                v301 = dispatch_data_get_size(v307);
                v47 = 0;
              }
              else
              {
                v47 = 0;
                v301 = 0;
                v307 = 0;
              }
            }
            else
            {

              v47 = 0;
              v301 = 0;
              v307 = 0;
              v42 = 0;
            }
          }
          v296->sent_application_byte_count += *(unsigned int *)(v322 + 24);
          if (v46)
          {
            v102 = v46;
            v103 = v102;
            if (v102 == (_BYTE *)&__block_literal_global_5_41741
              || v102 == (_BYTE *)&__block_literal_global_4
              || v102 == (_BYTE *)&__block_literal_global_3_41726
              || v102 == (_BYTE *)&__block_literal_global_41718
              || (v102[118] & 8) == 0)
            {

            }
            else
            {

              nw_frame_set_packet_id(v45, v103 + 8);
            }
          }
          if (v92)
          {
            *(_WORD *)(v45 + 204) |= 0x10u;
            *(_QWORD *)(v45 + 152) = v92;
            if (!v46)
              goto LABEL_173;
          }
          else if (!v46)
          {
            goto LABEL_173;
          }
          v104 = v46;
          if (v104 == (_BYTE *)&__block_literal_global_5_41741
            || v104 == (_BYTE *)&__block_literal_global_4
            || v104 == (_BYTE *)&__block_literal_global_3_41726
            || v104 == (_BYTE *)&__block_literal_global_41718
            || (v104[119] & 1) == 0)
          {

          }
          else
          {
            v105 = v104[116];
            v106 = v104[117];

            v107 = *(unsigned __int16 *)(v45 + 204) | (*(unsigned __int8 *)(v45 + 206) << 16);
            if ((v107 & 0x10000) == 0)
            {
              *(_BYTE *)(v45 + 201) = v105;
              *(_BYTE *)(v45 + 202) = v106;
              *(_WORD *)(v45 + 204) = v107;
              *(_BYTE *)(v45 + 206) = (v107 | 0x10000u) >> 16;
            }
          }
LABEL_173:
          if ((v96 & 1) != 0)
          {
            v108 = (*(_WORD *)(handle + 332) & 2) == 0;
            if (!v46)
              goto LABEL_188;
          }
          else
          {
            v108 = 0;
            if (!v46)
              goto LABEL_188;
          }
          v109 = (os_unfair_lock_s *)v46;
          v110 = v109;
          if (v109 == (os_unfair_lock_s *)&__block_literal_global_5_41741
            || v109 == (os_unfair_lock_s *)&__block_literal_global_4
            || v109 == (os_unfair_lock_s *)&__block_literal_global_3_41726
            || v109 == (os_unfair_lock_s *)&__block_literal_global_41718)
          {

LABEL_188:
            if (!v108)
              goto LABEL_197;
            nw_frame_set_metadata(v45, 0, 0, 1);
            if (!v46)
              goto LABEL_197;
            goto LABEL_190;
          }
          os_unfair_lock_lock(v109 + 28);
          v111 = *(_QWORD *)&v110[22]._os_unfair_lock_opaque;
          if (v111)
            v111 = (uint64_t)(*(_QWORD *)(v111 + 24) - *(_QWORD *)(v111 + 16)) >> 3;
          v112 = v111 == 0;
          os_unfair_lock_unlock(v110 + 28);

          if (v112)
            goto LABEL_188;
          foreach_block[0] = MEMORY[0x1E0C809B0];
          foreach_block[1] = 3221225472;
          foreach_block[2] = ___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke_85;
          foreach_block[3] = &unk_1E149C838;
          v330 = (id)v45;
          v331 = v108;
          nw_content_context_foreach_protocol_metadata((nw_content_context_t)v110, foreach_block);

LABEL_190:
          if (v108)
          {
            v113 = v46;
            if (v113 == (_BYTE *)&__block_literal_global_41718 || v113 == (_BYTE *)&__block_literal_global_5_41741)
            {

              goto LABEL_197;
            }
            if (v113 == (_BYTE *)&__block_literal_global_3_41726 || v113 == (_BYTE *)&__block_literal_global_4)
            {

LABEL_196:
              *(_BYTE *)(v45 + 186) |= 0x80u;
              goto LABEL_197;
            }
            v114 = (v113[118] & 1) == 0;

            if (!v114)
              goto LABEL_196;
          }
LABEL_197:
          nw_frame_collapse(v45);
          nw_frame_unclaim(v45, v115, *(_DWORD *)(v322 + 24), 0);
          v116 = *(_QWORD *)(v45 + 32);
          v117 = *(_QWORD **)(v45 + 40);
          if (v116)
          {
            *(_QWORD *)(v116 + 40) = v117;
            v117 = *(_QWORD **)(v45 + 40);
          }
          else
          {
            v319 = *(id **)(v45 + 40);
          }
          *v117 = v116;
          v118 = v336;
          *(_QWORD *)(v45 + 32) = 0;
          *(_QWORD *)(v45 + 40) = v118;
          *v118 = v45;
          v336 = (uint64_t *)(v45 + 32);

          _Block_object_dispose(&v321, 8);
          if (v42)
            v119 = v316 != 0;
          else
            v119 = 0;
          v48 = v46;
          v120 = (uint64_t)v316;
          v45 = (uint64_t)v316;
          if (!v119)
            goto LABEL_247;
        }
        v84 = *(_DWORD *)(v45 + 52);
        if (v84)
        {
          v85 = v84 - (*(_DWORD *)(v45 + 56) + *(_DWORD *)(v45 + 60));
          if ((v320 & 0x100000000) == 0)
            goto LABEL_124;
        }
        else
        {
          v85 = 0;
          if ((v320 & 0x100000000) == 0)
            goto LABEL_124;
        }
        if (v301 > v85)
        {
          if ((nw_endpoint_handler_get_logging_disabled(v294) & 1) != 0)
          {
            v143 = 40;
          }
          else
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v137 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
            {
              v310 = v137;
              v138 = nw_endpoint_handler_get_id_string(v294);
              v139 = nw_endpoint_handler_dry_run_string(v294);
              v140 = nw_endpoint_handler_copy_endpoint(v294);
              v141 = nw_endpoint_get_logging_description(v140);
              v297 = nw_endpoint_handler_state_string(v294);
              v285 = nw_endpoint_handler_mode_string(v294);
              v142 = nw_endpoint_handler_copy_current_path(v294);
              *(_DWORD *)buf = 136448258;
              *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v138;
              *(_WORD *)&buf[22] = 2082;
              v338 = v139;
              *(_WORD *)v339 = 2082;
              *(_QWORD *)&v339[2] = v141;
              *(_WORD *)&v339[10] = 2082;
              *(_QWORD *)&v339[12] = v297;
              *(_WORD *)&v339[20] = 2082;
              *(_QWORD *)&v339[22] = v285;
              v340 = 2114;
              v341 = v142;
              v342 = 1024;
              v343 = v85;
              v344 = 2048;
              v345 = v301;
              _os_log_impl(&dword_182FBE000, v310, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Data won't fit in frame (%u < %zu)", buf, 0x58u);

              v143 = 40;
              goto LABEL_240;
            }
            v143 = 40;
LABEL_243:

          }
          goto LABEL_244;
        }
LABEL_124:
        if (nw_frame_set_external_data(v45, data, (unsigned int *)v324))
          goto LABEL_138;
        v150 = nw_endpoint_handler_get_logging_disabled(v294);
        if ((v150 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v137 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v137, OS_LOG_TYPE_ERROR))
          {
            v310 = v137;
            v151 = nw_endpoint_handler_get_id_string(v294);
            v152 = nw_endpoint_handler_dry_run_string(v294);
            v153 = nw_endpoint_handler_copy_endpoint(v294);
            v154 = nw_endpoint_get_logging_description(v153);
            v304 = nw_endpoint_handler_state_string(v294);
            v155 = nw_endpoint_handler_mode_string(v294);
            v156 = nw_endpoint_handler_copy_current_path(v294);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v151;
            *(_WORD *)&buf[22] = 2082;
            v338 = v152;
            *(_WORD *)v339 = 2082;
            *(_QWORD *)&v339[2] = v154;
            *(_WORD *)&v339[10] = 2082;
            *(_QWORD *)&v339[12] = v304;
            *(_WORD *)&v339[20] = 2082;
            *(_QWORD *)&v339[22] = v155;
            v340 = 2114;
            v341 = v156;
            _os_log_impl(&dword_182FBE000, v310, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Data cannot be set in frame", buf, 0x48u);

            v143 = 12;
LABEL_240:
            v137 = v310;
          }
          else
          {
            v143 = 12;
          }
          goto LABEL_243;
        }
        v143 = 12;
LABEL_244:
        nw_write_request_fail(v70, v143);
LABEL_245:
        *(_WORD *)(handle + 332) &= ~2u;
        _Block_object_dispose(&v321, 8);
LABEL_246:

        v120 = v45;
        v42 = v70;
        v307 = data;
LABEL_247:
        v45 = v120;
        if (v46 && (*(_WORD *)(handle + 332) & 2) != 0)
          objc_storeStrong((id *)(handle + 224), v46);
LABEL_250:
        v317 = (void *)v45;
        v157 = *(id *)(handle + 320);
        ((void (*)(void))v295->protocol.output_handler->callbacks->finalize_output_frames)();
        v158 = *(id *)(handle + 320);
        if (!v158)
          goto LABEL_266;
        if (v157 == v158)
          goto LABEL_266;
        v159 = v158;
        v160 = v159[2];

        if (v160 != 1)
          goto LABEL_266;
        v161 = nw_error_get_error_code(*(nw_error_t *)(handle + 320));
        if (v161 == 4)
          goto LABEL_266;
        v162 = v161;
        if (v161 == 35)
          goto LABEL_266;
        if (v161 != 32)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v165 = (id)gLogObj;
          if (os_log_type_enabled(v165, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v162;
            _os_log_impl(&dword_182FBE000, v165, OS_LOG_TYPE_ERROR, "%{public}s Failing the write requests %{darwin.errno}d", buf, 0x12u);
          }
          goto LABEL_264;
        }
        v163 = nw_endpoint_handler_get_minimize_logging(v294);
        v164 = nw_endpoint_handler_get_logging_disabled(v294);
        if (v163)
        {
          if ((v164 & 1) != 0)
            goto LABEL_265;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v165 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v165, OS_LOG_TYPE_DEBUG))
          {
            v201 = nw_endpoint_handler_get_id_string(v294);
            v202 = nw_endpoint_handler_dry_run_string(v294);
            v203 = nw_endpoint_handler_copy_endpoint(v294);
            v204 = nw_endpoint_get_logging_description(v203);
            datab = nw_endpoint_handler_state_string(v294);
            v300 = nw_endpoint_handler_mode_string(v294);
            v205 = nw_endpoint_handler_copy_current_path(v294);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v201;
            *(_WORD *)&buf[22] = 2082;
            v338 = v202;
            *(_WORD *)v339 = 2082;
            *(_QWORD *)&v339[2] = v204;
            *(_WORD *)&v339[10] = 2082;
            *(_QWORD *)&v339[12] = datab;
            *(_WORD *)&v339[20] = 2082;
            *(_QWORD *)&v339[22] = v300;
            v340 = 2114;
            v341 = v205;
            _os_log_impl(&dword_182FBE000, v165, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failing the write requests due to the connection being closed", buf, 0x48u);

          }
LABEL_264:

          goto LABEL_265;
        }
        if ((v164 & 1) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v165 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v165, OS_LOG_TYPE_DEFAULT))
          {
            v166 = nw_endpoint_handler_get_id_string(v294);
            v167 = nw_endpoint_handler_dry_run_string(v294);
            v168 = nw_endpoint_handler_copy_endpoint(v294);
            v169 = nw_endpoint_get_logging_description(v168);
            dataa = nw_endpoint_handler_state_string(v294);
            v299 = nw_endpoint_handler_mode_string(v294);
            v170 = nw_endpoint_handler_copy_current_path(v294);
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v166;
            *(_WORD *)&buf[22] = 2082;
            v338 = v167;
            *(_WORD *)v339 = 2082;
            *(_QWORD *)&v339[2] = v169;
            *(_WORD *)&v339[10] = 2082;
            *(_QWORD *)&v339[12] = dataa;
            *(_WORD *)&v339[20] = 2082;
            *(_QWORD *)&v339[22] = v299;
            v340 = 2114;
            v341 = v170;
            _os_log_impl(&dword_182FBE000, v165, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failing the write requests due to the connection being closed", buf, 0x48u);

          }
          goto LABEL_264;
        }
LABEL_265:
        nw_write_request_report_error_with_override(*(void **)(handle + 200), 0, *(void **)(handle + 320));
        nw_write_request_report_error_with_override(*(void **)(handle + 192), 0, *(void **)(handle + 320));
LABEL_266:
        v171 = nw_write_request_list_prune(*(void **)(handle + 200));
        v172 = *(void **)(handle + 200);
        *(_QWORD *)(handle + 200) = v171;

        v173 = nw_write_request_list_prune(*(void **)(handle + 192));
        v174 = *(void **)(handle + 192);
        *(_QWORD *)(handle + 192) = v173;

        v175 = v318;
        if (v318)
        {
          v325 = 0;
          v326 = &v325;
          v328 = 0;
          v327 = 0x2020000000;
          v321 = MEMORY[0x1E0C809B0];
          v322 = 3221225472;
          v323 = (uint64_t)___ZL29nw_flow_prepare_output_framesP27NWConcrete_nw_endpoint_flowP11nw_protocolP16nw_frame_array_sjP30nw_protocol_message_properties_block_invoke_87;
          v324[0] = &unk_1E149C7E8;
          v324[1] = &v325;
          do
          {
            if (!v175)
              break;
            v176 = (_QWORD *)v175[4];
            v177 = ((uint64_t (*)(uint64_t *))v323)(&v321);
            v175 = v176;
          }
          while ((v177 & 1) != 0);
          if ((nw_endpoint_handler_get_logging_disabled(v294) & 1) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v178 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR))
            {
              v179 = nw_endpoint_handler_get_id_string(v294);
              v180 = nw_endpoint_handler_dry_run_string(v294);
              v305 = v157;
              v181 = nw_endpoint_handler_copy_endpoint(v294);
              v182 = nw_endpoint_get_logging_description(v181);
              v183 = nw_endpoint_handler_state_string(v294);
              v184 = nw_endpoint_handler_mode_string(v294);
              v185 = nw_endpoint_handler_copy_current_path(v294);
              v186 = *((_DWORD *)v326 + 6);
              *(_DWORD *)buf = 136448002;
              *(_QWORD *)&buf[4] = "nw_flow_prepare_output_frames";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v179;
              *(_WORD *)&buf[22] = 2082;
              v338 = v180;
              *(_WORD *)v339 = 2082;
              *(_QWORD *)&v339[2] = v182;
              *(_WORD *)&v339[10] = 2082;
              *(_QWORD *)&v339[12] = v183;
              *(_WORD *)&v339[20] = 2082;
              *(_QWORD *)&v339[22] = v184;
              v340 = 2114;
              v341 = v185;
              v342 = 1024;
              v343 = v186;
              _os_log_impl(&dword_182FBE000, v178, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to use %u frames, marking as failed", buf, 0x4Eu);

              v157 = v305;
            }

          }
          _Block_object_dispose(&v325, 8);
        }

        v187 = nw_flow_handle_send_complete(v291, v292, v295);
        if ((v187 & 1) != 0)
        {
LABEL_337:
          *((_WORD *)v295 + 166) &= ~8u;
          v214 = 1;
          goto LABEL_338;
        }
      }
    }
    if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v291) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v206 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v206, OS_LOG_TYPE_DEBUG))
      {
        v263 = nw_endpoint_handler_get_id_string(v291);
        v264 = nw_endpoint_handler_dry_run_string(v291);
        v265 = nw_endpoint_handler_copy_endpoint(v291);
        v266 = nw_endpoint_get_logging_description(v265);
        v267 = nw_endpoint_handler_state_string(v291);
        v268 = nw_endpoint_handler_mode_string(v291);
        v269 = nw_endpoint_handler_copy_current_path(v291);
        *(_DWORD *)buf = 136447746;
        *(_QWORD *)&buf[4] = "nw_flow_service_writes";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v263;
        *(_WORD *)&buf[22] = 2082;
        v338 = v264;
        *(_WORD *)v339 = 2082;
        *(_QWORD *)&v339[2] = v266;
        *(_WORD *)&v339[10] = 2082;
        *(_QWORD *)&v339[12] = v267;
        *(_WORD *)&v339[20] = 2082;
        *(_QWORD *)&v339[22] = v268;
        v340 = 2114;
        v341 = v269;
        _os_log_impl(&dword_182FBE000, v206, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Already servicing writes, ignoring...", buf, 0x48u);

      }
LABEL_303:

    }
  }
  else if ((nw_endpoint_handler_get_logging_disabled(v291) & 1) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v206 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v206, OS_LOG_TYPE_ERROR))
    {
      v207 = nw_endpoint_handler_get_id_string(v291);
      v208 = nw_endpoint_handler_dry_run_string(v291);
      v209 = nw_endpoint_handler_copy_endpoint(v291);
      v210 = nw_endpoint_get_logging_description(v209);
      v211 = nw_endpoint_handler_state_string(v291);
      v212 = nw_endpoint_handler_mode_string(v291);
      v213 = nw_endpoint_handler_copy_current_path(v291);
      *(_DWORD *)buf = 136447746;
      *(_QWORD *)&buf[4] = "nw_flow_service_writes";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v207;
      *(_WORD *)&buf[22] = 2082;
      v338 = v208;
      *(_WORD *)v339 = 2082;
      *(_QWORD *)&v339[2] = v210;
      *(_WORD *)&v339[10] = 2082;
      *(_QWORD *)&v339[12] = v211;
      *(_WORD *)&v339[20] = 2082;
      *(_QWORD *)&v339[22] = v212;
      v340 = 2114;
      v341 = v213;
      _os_log_impl(&dword_182FBE000, v206, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] No output handler", buf, 0x48u);

    }
    goto LABEL_303;
  }
LABEL_305:
  v214 = 0;
LABEL_338:

  return v214;
}

void sub_1830BB3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32)
{
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void nw_frame_collapse(uint64_t a1)
{
  int v2;
  size_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  unsigned int v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  _BOOL4 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  NSObject *v22;
  os_log_type_t v23;
  const char *v24;
  char *backtrace_string;
  _BOOL4 v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  const char *v32;
  __int16 v33;
  uint64_t v34;
  __int16 v35;
  uint64_t v36;
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v30 = "__nw_frame_collapse";
    v21 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v21, &type, &v27))
      goto LABEL_43;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v30 = "__nw_frame_collapse";
      v24 = "%{public}s called with null frame";
    }
    else if (v27)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v22 = __nwlog_obj();
      v23 = type;
      v26 = os_log_type_enabled(v22, type);
      if (backtrace_string)
      {
        if (v26)
        {
          *(_DWORD *)buf = 136446466;
          v30 = "__nw_frame_collapse";
          v31 = 2082;
          v32 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v22, v23, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_43;
      }
      if (!v26)
      {
LABEL_43:
        if (v21)
          free(v21);
        return;
      }
      *(_DWORD *)buf = 136446210;
      v30 = "__nw_frame_collapse";
      v24 = "%{public}s called with null frame, no backtrace";
    }
    else
    {
      v22 = __nwlog_obj();
      v23 = type;
      if (!os_log_type_enabled(v22, type))
        goto LABEL_43;
      *(_DWORD *)buf = 136446210;
      v30 = "__nw_frame_collapse";
      v24 = "%{public}s called with null frame, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v22, v23, v24, buf, 0xCu);
    goto LABEL_43;
  }
  v2 = *(_DWORD *)(a1 + 52);
  if (v2)
  {
    v4 = *(unsigned int *)(a1 + 56);
    v3 = *(unsigned int *)(a1 + 60);
    v5 = (v2 - (v3 + v4));
    if (v2 != (_DWORD)v3 + (_DWORD)v4)
    {
      if ((_DWORD)v3)
      {
        v6 = *(_QWORD *)(a1 + 112);
        if (v6)
        {
          memmove((void *)(v6 + v4), (const void *)(v6 + v4 + v5), v3);
          v2 = *(_DWORD *)(a1 + 52);
        }
      }
      *(_DWORD *)(a1 + 52) = v2 - v5;
      if ((*(_WORD *)(a1 + 204) & 0x80) != 0)
      {
        v7 = *(unsigned __int16 *)(a1 + 196);
        v8 = v7 >= v5;
        v9 = v7 - v5;
        *(_WORD *)(a1 + 196) = v9;
        if (!v8 || v9 >= 0x10000)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v10 = *(unsigned __int16 *)(a1 + 196);
          *(_DWORD *)buf = 136446978;
          v30 = "__nw_frame_collapse";
          v31 = 2082;
          v32 = "frame->aggregate_buffer_length";
          v33 = 2048;
          v34 = v5;
          v35 = 2048;
          v36 = v10;
          v11 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v27 = 0;
          if (__nwlog_fault(v11, &type, &v27))
          {
            if (type == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v12 = gLogObj;
              v13 = type;
              if (os_log_type_enabled((os_log_t)gLogObj, type))
              {
                v14 = *(unsigned __int16 *)(a1 + 196);
                *(_DWORD *)buf = 136446978;
                v30 = "__nw_frame_collapse";
                v31 = 2082;
                v32 = "frame->aggregate_buffer_length";
                v33 = 2048;
                v34 = v5;
                v35 = 2048;
                v36 = v14;
                v15 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu";
LABEL_24:
                _os_log_impl(&dword_182FBE000, v12, v13, v15, buf, 0x2Au);
              }
            }
            else if (v27)
            {
              v16 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v12 = gLogObj;
              v13 = type;
              v17 = os_log_type_enabled((os_log_t)gLogObj, type);
              if (v16)
              {
                if (v17)
                {
                  v18 = *(unsigned __int16 *)(a1 + 196);
                  *(_DWORD *)buf = 136447234;
                  v30 = "__nw_frame_collapse";
                  v31 = 2082;
                  v32 = "frame->aggregate_buffer_length";
                  v33 = 2048;
                  v34 = v5;
                  v35 = 2048;
                  v36 = v18;
                  v37 = 2082;
                  v38 = v16;
                  _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s Underflow: %{public}s, decrement %llu, result %llu, dumping backtrace:%{public}s", buf, 0x34u);
                }
                free(v16);
                goto LABEL_25;
              }
              if (v17)
              {
                v20 = *(unsigned __int16 *)(a1 + 196);
                *(_DWORD *)buf = 136446978;
                v30 = "__nw_frame_collapse";
                v31 = 2082;
                v32 = "frame->aggregate_buffer_length";
                v33 = 2048;
                v34 = v5;
                v35 = 2048;
                v36 = v20;
                v15 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, no backtrace";
                goto LABEL_24;
              }
            }
            else
            {
              v12 = __nwlog_obj();
              v13 = type;
              if (os_log_type_enabled(v12, type))
              {
                v19 = *(unsigned __int16 *)(a1 + 196);
                *(_DWORD *)buf = 136446978;
                v30 = "__nw_frame_collapse";
                v31 = 2082;
                v32 = "frame->aggregate_buffer_length";
                v33 = 2048;
                v34 = v5;
                v35 = 2048;
                v36 = v19;
                v15 = "%{public}s Underflow: %{public}s, decrement %llu, result %llu, backtrace limit exceeded";
                goto LABEL_24;
              }
            }
          }
LABEL_25:
          if (v11)
            free(v11);
          *(_WORD *)(a1 + 196) = 0;
        }
      }
    }
  }
}

BOOL nw_frame_set_external_data(uint64_t a1, dispatch_data_t data, unsigned int *a3)
{
  NSObject *v4;
  _BOOL8 result;
  void *v8;
  unsigned int v9;
  unsigned int size;
  unsigned int v11;
  __int16 v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  const char *v16;
  char *backtrace_string;
  _BOOL4 v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  const char *v22;
  char *v23;
  _BOOL4 v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  _WORD v30[17];

  *(_QWORD *)&v30[13] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if ((*(_WORD *)(a1 + 204) & 2) == 0)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v4 = gLogObj;
      result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
      if (result)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "__nw_frame_set_external_data";
        _os_log_impl(&dword_182FBE000, v4, OS_LOG_TYPE_ERROR, "%{public}s Frame does not use external data", buf, 0xCu);
        return 0;
      }
      return result;
    }
    v8 = *(void **)(a1 + 96);
    if (v8)
    {
      os_release(v8);
      *(_QWORD *)(a1 + 96) = 0;
    }
    *(_DWORD *)(a1 + 56) = 0;
    if (!data
      || ((v9 = *(_DWORD *)(a1 + 48) - *(_DWORD *)(a1 + 60), size = dispatch_data_get_size(data), v9 >= size)
        ? (v11 = size)
        : (v11 = v9),
          !v11))
    {
      *(_DWORD *)(a1 + 52) = 0;
      *(_WORD *)(a1 + 196) = 0;
      return 1;
    }
    dispatch_retain(data);
    *(_QWORD *)(a1 + 96) = data;
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a1 + 60) + v11;
    if ((*(_WORD *)(a1 + 204) & 0x80) == 0)
    {
LABEL_34:
      if (a3)
        *a3 = v11;
      return 1;
    }
    if (!HIWORD(v11))
    {
      v12 = v11;
LABEL_33:
      *(_WORD *)(a1 + 196) = v12;
      goto LABEL_34;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    *(_DWORD *)buf = 136446466;
    v28 = "__nw_frame_set_external_data";
    v29 = 1024;
    *(_DWORD *)v30 = v11;
    v13 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v14 = gLogObj;
        v15 = type;
        if (os_log_type_enabled((os_log_t)gLogObj, type))
        {
          *(_DWORD *)buf = 136446466;
          v28 = "__nw_frame_set_external_data";
          v29 = 1024;
          *(_DWORD *)v30 = v11;
          v16 = "%{public}s Frame-length is too big for aggregate_buffer_length: %u";
LABEL_29:
          _os_log_impl(&dword_182FBE000, v14, v15, v16, buf, 0x12u);
        }
      }
      else if (v25)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        v14 = __nwlog_obj();
        v15 = type;
        v18 = os_log_type_enabled(v14, type);
        if (backtrace_string)
        {
          if (v18)
          {
            *(_DWORD *)buf = 136446722;
            v28 = "__nw_frame_set_external_data";
            v29 = 1024;
            *(_DWORD *)v30 = v11;
            v30[2] = 2082;
            *(_QWORD *)&v30[3] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s Frame-length is too big for aggregate_buffer_length: %u, dumping backtrace:%{public}s", buf, 0x1Cu);
          }
          free(backtrace_string);
          goto LABEL_30;
        }
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "__nw_frame_set_external_data";
          v29 = 1024;
          *(_DWORD *)v30 = v11;
          v16 = "%{public}s Frame-length is too big for aggregate_buffer_length: %u, no backtrace";
          goto LABEL_29;
        }
      }
      else
      {
        v14 = __nwlog_obj();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446466;
          v28 = "__nw_frame_set_external_data";
          v29 = 1024;
          *(_DWORD *)v30 = v11;
          v16 = "%{public}s Frame-length is too big for aggregate_buffer_length: %u, backtrace limit exceeded";
          goto LABEL_29;
        }
      }
    }
LABEL_30:
    if (v13)
      free(v13);
    v12 = -1;
    goto LABEL_33;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v28 = "__nw_frame_set_external_data";
  v19 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (__nwlog_fault(v19, &type, &v25))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "__nw_frame_set_external_data";
        v22 = "%{public}s called with null frame";
LABEL_51:
        _os_log_impl(&dword_182FBE000, v20, v21, v22, buf, 0xCu);
      }
    }
    else if (v25)
    {
      v23 = (char *)__nw_create_backtrace_string();
      v20 = __nwlog_obj();
      v21 = type;
      v24 = os_log_type_enabled(v20, type);
      if (v23)
      {
        if (v24)
        {
          *(_DWORD *)buf = 136446466;
          v28 = "__nw_frame_set_external_data";
          v29 = 2082;
          *(_QWORD *)v30 = v23;
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null frame, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(v23);
        goto LABEL_52;
      }
      if (v24)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "__nw_frame_set_external_data";
        v22 = "%{public}s called with null frame, no backtrace";
        goto LABEL_51;
      }
    }
    else
    {
      v20 = __nwlog_obj();
      v21 = type;
      if (os_log_type_enabled(v20, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "__nw_frame_set_external_data";
        v22 = "%{public}s called with null frame, backtrace limit exceeded";
        goto LABEL_51;
      }
    }
  }
LABEL_52:
  if (v19)
    free(v19);
  return 0;
}

_BYTE *nw_write_request_list_prune(void *a1)
{
  _BYTE *v1;
  _BYTE *v2;
  _BYTE *v3;
  _BOOL8 v4;

  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1;
    do
    {
      if ((v3[128] & 2) == 0)
      {
        if (*((_QWORD *)v3 + 9))
        {
          if ((v3[128] & 0x10) == 0)
            break;
        }
        else if (*((_QWORD *)v3 + 7))
        {
          break;
        }
        if (v3 != v2 && (v3[128] & 8) != 0)
          break;
        nw_write_request_report(v3, 0, 0);
        if ((v3[128] & 2) == 0)
          break;
      }
      v4 = nw_write_request_list_remove_head(v3);

      v3 = (_BYTE *)v4;
    }
    while (v4);
  }
  else
  {
    v3 = 0;
  }

  return v3;
}

void sub_1830BC214(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_handle_send_complete(NWConcrete_nw_endpoint_handler *a1, NWConcrete_nw_endpoint_flow *a2, nw_flow_protocol *a3)
{
  NWConcrete_nw_endpoint_handler *v5;
  NWConcrete_nw_endpoint_flow *v6;
  nw_protocol *output_handler;
  OS_nw_write_request *write_requests;
  OS_nw_write_request *v9;
  char v10;
  OS_nw_write_request *v11;
  OS_nw_write_request *v12;
  char v13;
  uint64_t v14;
  OS_nw_write_request *initial_write_requests;
  OS_nw_write_request *v16;
  void (*output_finished)(nw_protocol *, nw_flow_protocol *);
  NSObject *v18;
  const char *id_string;
  const char *v20;
  const char *logging_description;
  const char *v22;
  const char *v23;
  id v24;
  nw_protocol_identifier *identifier;
  OS_nw_write_request *v26;
  OS_nw_write_request *v27;
  OS_nw_write_request *v28;
  OS_nw_write_request *v29;
  id write_close_handler;
  void *v32;
  NSObject *client_queue;
  id v34;
  const char *v35;
  nw_endpoint_t v36;
  _QWORD block[4];
  id v38;
  uint8_t buf[4];
  const char *v40;
  __int16 v41;
  const char *v42;
  __int16 v43;
  const char *v44;
  __int16 v45;
  const char *v46;
  __int16 v47;
  const char *v48;
  __int16 v49;
  const char *v50;
  __int16 v51;
  id v52;
  __int16 v53;
  nw_protocol_identifier *v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a2;
  output_handler = a3->protocol.output_handler;
  write_requests = a3->write_requests;
  if (write_requests
    && (v9 = write_requests, v10 = *((_BYTE *)v9 + 128), v9, (v10 & 8) != 0)
    || (v11 = a3->initial_write_requests) != 0
    && (v12 = v11, v13 = *((_BYTE *)v12 + 128), v12, (v13 & 8) != 0))
  {
    initial_write_requests = a3->initial_write_requests;
    if (initial_write_requests)
      nw_write_request_consume_bytes(initial_write_requests, 0);
    v16 = a3->write_requests;
    if (v16)
      nw_write_request_consume_bytes(v16, 0);
    output_finished = (void (*)(nw_protocol *, nw_flow_protocol *))output_handler->callbacks->output_finished;
    if (output_finished)
    {
      output_finished(output_handler, a3);
    }
    else if ((nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v18 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v5);
        v35 = nw_endpoint_handler_dry_run_string(v5);
        v36 = nw_endpoint_handler_copy_endpoint(v5);
        v20 = id_string;
        logging_description = nw_endpoint_get_logging_description(v36);
        v22 = nw_endpoint_handler_state_string(v5);
        v23 = nw_endpoint_handler_mode_string(v5);
        v24 = nw_endpoint_handler_copy_current_path(v5);
        identifier = output_handler->identifier;
        *(_DWORD *)buf = 136448002;
        v40 = "nw_flow_handle_send_complete";
        v41 = 2082;
        v42 = v20;
        v43 = 2082;
        v44 = v35;
        v45 = 2082;
        v46 = logging_description;
        v47 = 2082;
        v48 = v22;
        v49 = 2082;
        v50 = v23;
        v51 = 2114;
        v52 = v24;
        v53 = 2082;
        v54 = identifier;
        _os_log_impl(&dword_182FBE000, v18, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Protocol %{public}s does not support output_finished", buf, 0x52u);

      }
    }
    v26 = (OS_nw_write_request *)nw_write_request_list_prune(a3->initial_write_requests);
    v27 = a3->initial_write_requests;
    a3->initial_write_requests = v26;

    v28 = (OS_nw_write_request *)nw_write_request_list_prune(a3->write_requests);
    v29 = a3->write_requests;
    a3->write_requests = v28;

    if (&v6->shared_protocol == a3)
    {
      if (v6->client_queue)
      {
        write_close_handler = v6->write_close_handler;
        if (write_close_handler)
        {
          v32 = _Block_copy(write_close_handler);
          client_queue = v6->client_queue;
          block[0] = MEMORY[0x1E0C809B0];
          block[1] = 3221225472;
          block[2] = ___ZL28nw_flow_handle_send_completeP30NWConcrete_nw_endpoint_handlerP27NWConcrete_nw_endpoint_flowP16nw_flow_protocol_block_invoke;
          block[3] = &unk_1E14AC390;
          v38 = v32;
          v34 = v32;
          dispatch_async(client_queue, block);

        }
      }
    }
    v14 = 1;
  }
  else
  {
    v14 = 0;
  }

  return v14;
}

void sub_1830BC50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

uint64_t nw_write_request_consume_bytes(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  uint64_t v5;
  size_t size;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t source;
  dispatch_time_t v20;
  uint64_t v21;
  NSObject *v22;
  uint64_t v23;
  id v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  char *backtrace_string;
  os_log_type_t v29;
  _BOOL4 v30;
  os_log_type_t v31;
  void *v33;
  char *v34;
  NSObject *v35;
  os_log_type_t v36;
  char *v37;
  os_log_type_t v38;
  _BOOL4 v39;
  os_log_type_t v40;
  char v41;
  os_log_type_t type;
  id location;
  uint8_t v44[4];
  const char *v45;
  __int16 v46;
  char *v47;
  _BYTE buf[32];
  id v49[2];

  v49[1] = *(id *)MEMORY[0x1E0C80C00];
  v3 = a1;
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_32785);
  if (_nw_signposts_enabled && kdebug_is_enabled())
    kdebug_trace();
  v4 = (void *)*((_QWORD *)v3 + 7);
  v5 = *((_QWORD *)v3 + 9);
  if (v4)
  {
    if (!v5)
    {
      size = dispatch_data_get_size(*((dispatch_data_t *)v3 + 7));
      v7 = *((_QWORD *)v3 + 14) + a2;
      if (v7 < size)
      {
        *((_QWORD *)v3 + 14) = v7;
        goto LABEL_65;
      }
      *((_QWORD *)v3 + 14) = 0;
LABEL_34:
      *((_QWORD *)v3 + 7) = 0;

      if ((*((_BYTE *)v3 + 128) & 1) != 0)
        nw_content_context_mark_completed_send(*((void **)v3 + 8), 0);
      if (_nw_signposts_once == -1)
      {
        if (_nw_signposts_enabled)
          goto LABEL_38;
      }
      else
      {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_32785);
        if (_nw_signposts_enabled)
        {
LABEL_38:
          if (kdebug_is_enabled())
            kdebug_trace();
        }
      }
      v23 = *((_BYTE *)v3 + 128) & 1;
      goto LABEL_70;
    }
LABEL_11:
    v8 = *((_QWORD *)v3 + 12);
    v9 = *((_QWORD *)v3 + 14) + a2;
    *((_QWORD *)v3 + 14) = v9;
    if (v9 >= v8)
    {
      *((_BYTE *)v3 + 128) |= 0x10u;
      goto LABEL_34;
    }
    if ((*((_BYTE *)v3 + 128) & 0x20) != 0)
    {
LABEL_65:
      if (_nw_signposts_once == -1)
      {
        if (_nw_signposts_enabled)
          goto LABEL_67;
      }
      else
      {
        dispatch_once(&_nw_signposts_once, &__block_literal_global_32785);
        if (_nw_signposts_enabled)
        {
LABEL_67:
          if (kdebug_is_enabled())
            kdebug_trace();
        }
      }
      v23 = 0;
      goto LABEL_70;
    }
    v11 = v3;
    v12 = v11[5];
    if (v12)
    {
      *((_BYTE *)v3 + 128) |= 0x20u;
      v13 = *(_QWORD *)(v12 + 16);
      if (v13 && !nw_path_parameters_get_logging_disabled(*(_QWORD *)(v13 + 104)))
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v14 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
        {
          v15 = *(_DWORD *)(v11[5] + 448);
          v16 = *((_QWORD *)v3 + 9);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_write_request_start_file_updates";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v15;
          *(_WORD *)&buf[18] = 2112;
          *(_QWORD *)&buf[20] = v16;
          _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_DEBUG, "%{public}s [C%u] Activating progress updates on write request on %@", buf, 0x1Cu);
        }

      }
      v17 = v11[10];
      if (v17)
      {
        nw_queue_cancel_source(v17, v10);
        v11[10] = 0;
      }
      objc_initWeak(&location, v11);
      v18 = *(void **)(v11[5] + 24);
      *(_QWORD *)buf = MEMORY[0x1E0C809B0];
      *(_QWORD *)&buf[8] = 3221225472;
      *(_QWORD *)&buf[16] = ___ZL35nw_write_request_start_file_updatesP27NWConcrete_nw_write_request_block_invoke;
      *(_QWORD *)&buf[24] = &unk_1E14A49C0;
      objc_copyWeak(v49, &location);
      source = nw_queue_context_create_source(v18, 2, 3, 0, buf, 0);
      v11[10] = source;
      if (source)
      {
        v20 = dispatch_time(0x8000000000000000, 1000000);
        v21 = 1000000 * *((unsigned int *)v11 + 22);
        if (*(_QWORD *)source)
        {
          dispatch_source_set_timer(*(dispatch_source_t *)source, v20, v21, 0x3E8uLL);
        }
        else
        {
          *(_QWORD *)(source + 32) = v20;
          *(_QWORD *)(source + 40) = v21;
          if (*(_BYTE *)(source + 48) && *(_BYTE *)(source + 49))
            nw_queue_source_run_timer(source, v20);
        }
        nw_queue_activate_source(v11[10], v20);
        goto LABEL_63;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v24 = (id)gLogObj;
      *(_DWORD *)v44 = 136446210;
      v45 = "nw_write_request_start_file_updates";
      v25 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v41 = 0;
      if (__nwlog_fault(v25, &type, &v41))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v26 = (id)gLogObj;
          v27 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)v44 = 136446210;
            v45 = "nw_write_request_start_file_updates";
            _os_log_impl(&dword_182FBE000, v26, v27, "%{public}s call to nw_queue_context_create_source(timer) for write request updates failed", v44, 0xCu);
          }
        }
        else if (v41)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v26 = objc_claimAutoreleasedReturnValue();
          v29 = type;
          v30 = os_log_type_enabled(v26, type);
          if (backtrace_string)
          {
            if (v30)
            {
              *(_DWORD *)v44 = 136446466;
              v45 = "nw_write_request_start_file_updates";
              v46 = 2082;
              v47 = backtrace_string;
              _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s call to nw_queue_context_create_source(timer) for write request updates failed, dumping backtrace:%{public}s", v44, 0x16u);
            }

            free(backtrace_string);
            if (!v25)
              goto LABEL_63;
            goto LABEL_62;
          }
          if (v30)
          {
            *(_DWORD *)v44 = 136446210;
            v45 = "nw_write_request_start_file_updates";
            _os_log_impl(&dword_182FBE000, v26, v29, "%{public}s call to nw_queue_context_create_source(timer) for write request updates failed, no backtrace", v44, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v26 = objc_claimAutoreleasedReturnValue();
          v31 = type;
          if (os_log_type_enabled(v26, type))
          {
            *(_DWORD *)v44 = 136446210;
            v45 = "nw_write_request_start_file_updates";
            _os_log_impl(&dword_182FBE000, v26, v31, "%{public}s call to nw_queue_context_create_source(timer) for write request updates failed, backtrace limit exceeded", v44, 0xCu);
          }
        }

      }
      if (!v25)
      {
LABEL_63:
        objc_destroyWeak(v49);
        objc_destroyWeak(&location);
LABEL_64:

        goto LABEL_65;
      }
LABEL_62:
      free(v25);
      goto LABEL_63;
    }
    __nwlog_obj();
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_write_request_start_file_updates";
    v34 = (char *)_os_log_send_and_compose_impl();

    v44[0] = 16;
    LOBYTE(location) = 0;
    if (__nwlog_fault(v34, v44, &location))
    {
      if (v44[0] == 17)
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v36 = v44[0];
        if (os_log_type_enabled(v35, (os_log_type_t)v44[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_write_request_start_file_updates";
          _os_log_impl(&dword_182FBE000, v35, v36, "%{public}s called with null request->connection", buf, 0xCu);
        }
      }
      else if ((_BYTE)location)
      {
        v37 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v38 = v44[0];
        v39 = os_log_type_enabled(v35, (os_log_type_t)v44[0]);
        if (v37)
        {
          if (v39)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_write_request_start_file_updates";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v37;
            _os_log_impl(&dword_182FBE000, v35, v38, "%{public}s called with null request->connection, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v37);
          goto LABEL_91;
        }
        if (v39)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_write_request_start_file_updates";
          _os_log_impl(&dword_182FBE000, v35, v38, "%{public}s called with null request->connection, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v35 = objc_claimAutoreleasedReturnValue();
        v40 = v44[0];
        if (os_log_type_enabled(v35, (os_log_type_t)v44[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_write_request_start_file_updates";
          _os_log_impl(&dword_182FBE000, v35, v40, "%{public}s called with null request->connection, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_91:
    if (v34)
      free(v34);
    goto LABEL_64;
  }
  if (v5)
    goto LABEL_11;
  if ((*((_BYTE *)v3 + 128) & 1) == 0)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v22 = (id)gLogObj;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_write_request_consume_bytes";
      _os_log_impl(&dword_182FBE000, v22, OS_LOG_TYPE_ERROR, "%{public}s No data to consume", buf, 0xCu);
    }

  }
  v23 = 1;
LABEL_70:

  return v23;
}

void sub_1830BCE24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, id location)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

BOOL nw_write_request_list_remove_head(void *a1)
{
  id v1;
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  uint64_t v5;
  _BOOL8 result;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  NSObject *v11;
  void *v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  os_log_type_t v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_write_request_list_remove_head";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (__nwlog_fault(v8, &type, &v17))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_write_request_list_remove_head";
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null head", buf, 0xCu);
        }
      }
      else if (v17)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v15 = os_log_type_enabled(v9, type);
        if (backtrace_string)
        {
          if (v15)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_write_request_list_remove_head";
            v21 = 2082;
            v22 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null head, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_25;
        }
        if (v15)
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_write_request_list_remove_head";
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null head, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v16 = type;
        if (os_log_type_enabled(v9, type))
        {
          *(_DWORD *)buf = 136446210;
          v20 = "nw_write_request_list_remove_head";
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null head, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_25:
    if (v8)
      free(v8);
    v3 = 0;
    goto LABEL_6;
  }
  v3 = *((id *)v1 + 1);
  v4 = (void *)v2[1];
  v2[1] = 0;

  if (!v3)
  {
LABEL_5:
    v2[2] = 0;
LABEL_6:

    return (BOOL)v3;
  }
  v5 = v2[2];
  if (v5)
  {
LABEL_4:
    v3[2] = v5;
    goto LABEL_5;
  }
  __nwlog_obj();
  v11 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v11, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v20 = "nw_write_request_list_remove_head";
  v12 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v12);
  if (!result)
  {
    free(v12);
    v5 = v2[2];
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

dispatch_data_t nw_write_request_copy_data(void *a1)
{
  id v1;
  _QWORD *v2;
  dispatch_data_t v3;
  size_t v4;
  NSObject *v5;
  size_t size;
  size_t v7;
  NSObject *v8;
  uint64_t v9;
  dispatch_data_t subrange;
  int v12;
  const char *v13;
  __int16 v14;
  size_t v15;
  __int16 v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (!*((_QWORD *)v1 + 9))
  {
    v4 = *((_QWORD *)v1 + 14);
    v5 = *((_QWORD *)v1 + 7);
    if (v4)
    {
      size = dispatch_data_get_size(*((dispatch_data_t *)v1 + 7));
      if (size < v4)
      {
        v7 = size;
        nw_write_request_report(v2, 0, 0);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v8 = (id)gLogObj;
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          v9 = v2[14];
          v12 = 136446722;
          v13 = "nw_write_request_copy_data";
          v14 = 2048;
          v15 = v7;
          v16 = 2048;
          v17 = v9;
          _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s Invalid consumed bytes (%zu < %zu)", (uint8_t *)&v12, 0x20u);
        }

        goto LABEL_2;
      }
      subrange = dispatch_data_create_subrange(v5, v4, size - v4);
    }
    else
    {
      subrange = v5;
    }
    v3 = subrange;
    goto LABEL_11;
  }
LABEL_2:
  v3 = 0;
LABEL_11:

  return v3;
}

void sub_1830BD308(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_passthrough_finalize_output_frames(nw_protocol *a1, nw_frame_array_s *a2)
{
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*finalize_output_frames)(void);
  NSObject *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  void *v12;
  char *backtrace_string;
  _BOOL4 v14;
  char *v15;
  _BOOL4 v16;
  char v17;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v20;
  __int16 v21;
  char *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_flow_passthrough_finalize_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v8, &type, &v17))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_flow_passthrough_finalize_output_frames";
        v11 = "%{public}s called with null protocol";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
      }
    }
    else if (v17)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v14 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v14)
        {
          *(_DWORD *)buf = 136446466;
          v20 = "nw_flow_passthrough_finalize_output_frames";
          v21 = 2082;
          v22 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v8)
          return 0;
LABEL_39:
        free(v8);
        return 0;
      }
      if (v14)
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_flow_passthrough_finalize_output_frames";
        v11 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_flow_passthrough_finalize_output_frames";
        v11 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  output_handler = a1->output_handler;
  if (!output_handler)
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v20 = "nw_flow_passthrough_finalize_output_frames";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v17 = 0;
    if (!__nwlog_fault(v8, &type, &v17))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_flow_passthrough_finalize_output_frames";
        v11 = "%{public}s called with null protocol->output_handler";
        goto LABEL_36;
      }
    }
    else
    {
      if (v17)
      {
        v15 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v9 = objc_claimAutoreleasedReturnValue();
        v10 = type;
        v16 = os_log_type_enabled(v9, type);
        if (v15)
        {
          if (v16)
          {
            *(_DWORD *)buf = 136446466;
            v20 = "nw_flow_passthrough_finalize_output_frames";
            v21 = 2082;
            v22 = v15;
            _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v15);
          if (!v8)
            return 0;
          goto LABEL_39;
        }
        if (!v16)
          goto LABEL_37;
        *(_DWORD *)buf = 136446210;
        v20 = "nw_flow_passthrough_finalize_output_frames";
        v11 = "%{public}s called with null protocol->output_handler, no backtrace";
        goto LABEL_36;
      }
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v20 = "nw_flow_passthrough_finalize_output_frames";
        v11 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
    goto LABEL_37;
  }
  callbacks = output_handler->callbacks;
  if (callbacks)
  {
    finalize_output_frames = (uint64_t (*)(void))callbacks->finalize_output_frames;
    if (finalize_output_frames)
      return finalize_output_frames();
  }
  __nwlog_obj();
  v6 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v20 = "nw_flow_passthrough_finalize_output_frames";
    _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support finalize_output_frames", buf, 0xCu);
  }

  return 0;
}

uint64_t nw_flow_passthrough_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, unsigned int a4, unsigned int a5, nw_frame_array_s *a6)
{
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  uint64_t (*get_output_frames)(void);
  NSObject *v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  const char *v15;
  void *v16;
  char *backtrace_string;
  _BOOL4 v18;
  char *v19;
  _BOOL4 v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_flow_passthrough_get_output_frames";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_output_frames";
        v15 = "%{public}s called with null protocol";
LABEL_36:
        _os_log_impl(&dword_182FBE000, v13, v14, v15, buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v18 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v18)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_flow_passthrough_get_output_frames";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_38:
        if (!v12)
          return 0;
LABEL_39:
        free(v12);
        return 0;
      }
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_output_frames";
        v15 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_36;
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_output_frames";
        v15 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
LABEL_37:

    goto LABEL_38;
  }
  output_handler = a1->output_handler;
  if (!output_handler)
  {
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v24 = "nw_flow_passthrough_get_output_frames";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v21 = 0;
    if (!__nwlog_fault(v12, &type, &v21))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_output_frames";
        v15 = "%{public}s called with null protocol->output_handler";
        goto LABEL_36;
      }
    }
    else
    {
      if (v21)
      {
        v19 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        v20 = os_log_type_enabled(v13, type);
        if (v19)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v24 = "nw_flow_passthrough_get_output_frames";
            v25 = 2082;
            v26 = v19;
            _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v19);
          if (!v12)
            return 0;
          goto LABEL_39;
        }
        if (!v20)
          goto LABEL_37;
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_output_frames";
        v15 = "%{public}s called with null protocol->output_handler, no backtrace";
        goto LABEL_36;
      }
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_flow_passthrough_get_output_frames";
        v15 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
        goto LABEL_36;
      }
    }
    goto LABEL_37;
  }
  callbacks = output_handler->callbacks;
  if (callbacks)
  {
    get_output_frames = (uint64_t (*)(void))callbacks->get_output_frames;
    if (get_output_frames)
      return get_output_frames();
  }
  __nwlog_obj();
  v10 = objc_claimAutoreleasedReturnValue();
  if (os_log_type_enabled(v10, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)buf = 136446210;
    v24 = "nw_flow_passthrough_get_output_frames";
    _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_INFO, "%{public}s Output protocol handler does not support get_output_frames", buf, 0xCu);
  }

  return 0;
}

void nw_content_context_foreach_protocol_metadata(nw_content_context_t context, void *foreach_block)
{
  nw_content_context_t v3;
  void *v4;
  void *v5;
  unsigned __int8 *v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  os_log_type_t v12;
  char *backtrace_string;
  os_log_type_t v14;
  _BOOL4 v15;
  char *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  os_log_type_t v20;
  _QWORD v21[4];
  id v22;
  char v23;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v26;
  __int16 v27;
  char *v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  v3 = context;
  v4 = foreach_block;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v7 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v26 = "nw_content_context_foreach_protocol_metadata";
    v8 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v23 = 0;
    if (!__nwlog_fault(v8, &type, &v23))
      goto LABEL_42;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_content_context_foreach_protocol_metadata";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v23)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      v15 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v15)
        {
          *(_DWORD *)buf = 136446466;
          v26 = "nw_content_context_foreach_protocol_metadata";
          v27 = 2082;
          v28 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_42:
        if (!v8)
          goto LABEL_8;
LABEL_43:
        free(v8);
        goto LABEL_8;
      }
      if (v15)
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_content_context_foreach_protocol_metadata";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v26 = "nw_content_context_foreach_protocol_metadata";
        _os_log_impl(&dword_182FBE000, v9, v19, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_41:

    goto LABEL_42;
  }
  if (v4)
  {
    if (v3 != (nw_content_context_t)&__block_literal_global_5_41741
      && v3 != (nw_content_context_t)&__block_literal_global_4
      && v3 != (nw_content_context_t)&__block_literal_global_3_41726
      && v3 != (nw_content_context_t)&__block_literal_global_41718)
    {
      os_unfair_lock_lock((os_unfair_lock_t)&v3[14]);
      v6 = v3[11].isa;
      os_unfair_lock_unlock((os_unfair_lock_t)&v3[14]);
      v21[0] = MEMORY[0x1E0C809B0];
      v21[1] = 3221225472;
      v21[2] = __nw_content_context_foreach_protocol_metadata_block_invoke;
      v21[3] = &unk_1E14AC278;
      v22 = v5;
      nw_array_apply(v6, (uint64_t)v21);

    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v26 = "nw_content_context_foreach_protocol_metadata";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v23 = 0;
  if (!__nwlog_fault(v8, &type, &v23))
    goto LABEL_42;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v12 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_content_context_foreach_protocol_metadata";
      _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null foreach_block", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (!v23)
  {
    __nwlog_obj();
    v9 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    if (os_log_type_enabled(v9, type))
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_content_context_foreach_protocol_metadata";
      _os_log_impl(&dword_182FBE000, v9, v20, "%{public}s called with null foreach_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_41;
  }
  v16 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v9 = objc_claimAutoreleasedReturnValue();
  v17 = type;
  v18 = os_log_type_enabled(v9, type);
  if (!v16)
  {
    if (v18)
    {
      *(_DWORD *)buf = 136446210;
      v26 = "nw_content_context_foreach_protocol_metadata";
      _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null foreach_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_41;
  }
  if (v18)
  {
    *(_DWORD *)buf = 136446466;
    v26 = "nw_content_context_foreach_protocol_metadata";
    v27 = 2082;
    v28 = v16;
    _os_log_impl(&dword_182FBE000, v9, v17, "%{public}s called with null foreach_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v16);
  if (v8)
    goto LABEL_43;
LABEL_8:

}

BOOL nw_content_context_has_metadata(void *a1)
{
  os_unfair_lock_s *v1;
  os_unfair_lock_s *v2;
  _BOOL8 v3;
  uint64_t v4;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = 0;
    if (v1 != (os_unfair_lock_s *)&__block_literal_global_5_41741
      && v1 != (os_unfair_lock_s *)&__block_literal_global_4
      && v1 != (os_unfair_lock_s *)&__block_literal_global_3_41726
      && v1 != (os_unfair_lock_s *)&__block_literal_global_41718)
    {
      os_unfair_lock_lock(v1 + 28);
      v4 = *(_QWORD *)&v2[22]._os_unfair_lock_opaque;
      if (v4)
        v3 = *(_QWORD *)(v4 + 24) != *(_QWORD *)(v4 + 16);
      else
        v3 = 0;
      os_unfair_lock_unlock(v2 + 28);
    }
    goto LABEL_10;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_content_context_has_metadata";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_content_context_has_metadata";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_content_context_has_metadata";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_27;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_content_context_has_metadata";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_content_context_has_metadata";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_27:
  if (v7)
    free(v7);
  v3 = 0;
LABEL_10:

  return v3;
}

void nw_protocol_default_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  nw_protocol *output_handler;
  nw_protocol_callbacks *callbacks;
  void (*output_finished)(void);
  NSObject *v6;
  nw_protocol_identifier *identifier;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  const char *v11;
  char *backtrace_string;
  _BOOL4 v13;
  char *v14;
  _BOOL4 v15;
  char v16;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v19;
  __int16 v20;
  nw_protocol_identifier *v21;
  uint64_t v22;

  v22 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_default_output_finished";
    v8 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v16 = 0;
    if (!__nwlog_fault(v8, &type, &v16))
      goto LABEL_38;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_output_finished";
      v11 = "%{public}s called with null protocol";
    }
    else if (v16)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v9 = __nwlog_obj();
      v10 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v19 = "nw_protocol_default_output_finished";
          v20 = 2082;
          v21 = (nw_protocol_identifier *)backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
LABEL_38:
        if (!v8)
          return;
        goto LABEL_39;
      }
      if (!v13)
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_output_finished";
      v11 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v9 = __nwlog_obj();
      v10 = type;
      if (!os_log_type_enabled(v9, type))
        goto LABEL_38;
      *(_DWORD *)buf = 136446210;
      v19 = "nw_protocol_default_output_finished";
      v11 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
LABEL_37:
    _os_log_impl(&dword_182FBE000, v9, v10, v11, buf, 0xCu);
    goto LABEL_38;
  }
  output_handler = a1->output_handler;
  if (output_handler)
  {
    callbacks = output_handler->callbacks;
    if (callbacks && (output_finished = (void (*)(void))callbacks->output_finished) != 0)
    {
      output_finished();
    }
    else
    {
      v6 = __nwlog_obj();
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
      {
        identifier = (nw_protocol_identifier *)"<null>";
        if (a1->identifier)
          identifier = a1->identifier;
        *(_DWORD *)buf = 136446466;
        v19 = "nw_protocol_default_output_finished";
        v20 = 2082;
        v21 = identifier;
        _os_log_impl(&dword_182FBE000, v6, OS_LOG_TYPE_DEBUG, "%{public}s Protocol %{public}s does not support output finished", buf, 0x16u);
      }
    }
    return;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  v19 = "nw_protocol_default_output_finished";
  v8 = (char *)_os_log_send_and_compose_impl();
  type = OS_LOG_TYPE_ERROR;
  v16 = 0;
  if (!__nwlog_fault(v8, &type, &v16))
    goto LABEL_38;
  if (type == OS_LOG_TYPE_FAULT)
  {
    v9 = __nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type))
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_default_output_finished";
    v11 = "%{public}s called with null protocol->output_handler";
    goto LABEL_37;
  }
  if (!v16)
  {
    v9 = __nwlog_obj();
    v10 = type;
    if (!os_log_type_enabled(v9, type))
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_default_output_finished";
    v11 = "%{public}s called with null protocol->output_handler, backtrace limit exceeded";
    goto LABEL_37;
  }
  v14 = (char *)__nw_create_backtrace_string();
  v9 = __nwlog_obj();
  v10 = type;
  v15 = os_log_type_enabled(v9, type);
  if (!v14)
  {
    if (!v15)
      goto LABEL_38;
    *(_DWORD *)buf = 136446210;
    v19 = "nw_protocol_default_output_finished";
    v11 = "%{public}s called with null protocol->output_handler, no backtrace";
    goto LABEL_37;
  }
  if (v15)
  {
    *(_DWORD *)buf = 136446466;
    v19 = "nw_protocol_default_output_finished";
    v20 = 2082;
    v21 = (nw_protocol_identifier *)v14;
    _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null protocol->output_handler, dumping backtrace:%{public}s", buf, 0x16u);
  }
  free(v14);
  if (v8)
LABEL_39:
    free(v8);
}

void nw_socket_output_finished(nw_protocol *a1, nw_protocol *a2)
{
  int output_handler_high;
  uint64_t v4;
  const char *v5;
  NSObject *v6;
  os_log_type_t v7;
  uint32_t v8;
  __int16 v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  const char *v18;
  char *backtrace_string;
  _BOOL4 v20;
  char *v21;
  _BOOL4 v22;
  NSObject *v23;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  __int16 v30;
  int v31;
  __int16 v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_socket_output_finished";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v15, &type, &v24))
      goto LABEL_67;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_socket_output_finished";
      v18 = "%{public}s called with null protocol";
      goto LABEL_66;
    }
    if (!v24)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_socket_output_finished";
      v18 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_66;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v16 = __nwlog_obj();
    v17 = type;
    v20 = os_log_type_enabled(v16, type);
    if (!backtrace_string)
    {
      if (!v20)
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_socket_output_finished";
      v18 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_66;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_socket_output_finished";
      v28 = 2082;
      v29 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(backtrace_string);
LABEL_67:
    if (!v15)
      return;
    goto LABEL_68;
  }
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_socket_output_finished";
    v15 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v15, &type, &v24))
      goto LABEL_67;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_socket_output_finished";
      v18 = "%{public}s called with null socket_handler";
      goto LABEL_66;
    }
    if (!v24)
    {
      v16 = __nwlog_obj();
      v17 = type;
      if (!os_log_type_enabled(v16, type))
        goto LABEL_67;
      *(_DWORD *)buf = 136446210;
      v27 = "nw_socket_output_finished";
      v18 = "%{public}s called with null socket_handler, backtrace limit exceeded";
      goto LABEL_66;
    }
    v21 = (char *)__nw_create_backtrace_string();
    v16 = __nwlog_obj();
    v17 = type;
    v22 = os_log_type_enabled(v16, type);
    if (v21)
    {
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_socket_output_finished";
        v28 = 2082;
        v29 = v21;
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
      }
      free(v21);
      if (!v15)
        return;
LABEL_68:
      free(v15);
      return;
    }
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      v27 = "nw_socket_output_finished";
      v18 = "%{public}s called with null socket_handler, no backtrace";
LABEL_66:
      _os_log_impl(&dword_182FBE000, v16, v17, v18, buf, 0xCu);
      goto LABEL_67;
    }
    goto LABEL_67;
  }
  output_handler_high = HIDWORD(a1[4].output_handler);
  if (output_handler_high < 0)
  {
    if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) != 0)
      return;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v4 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      return;
    *(_DWORD *)buf = 136446466;
    v27 = "nw_socket_output_finished";
    v28 = 2082;
    v29 = (char *)&a1[6].default_input_handler + 4;
    v5 = "%{public}s %{public}s Socket protocol does not have valid fd";
    v6 = v4;
    v7 = OS_LOG_TYPE_ERROR;
LABEL_14:
    v8 = 22;
LABEL_15:
    _os_log_impl(&dword_182FBE000, v6, v7, v5, buf, v8);
    return;
  }
  if (a1[5].callbacks || a1[5].handle)
  {
    if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) == 0 && gLogDatapath)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v23 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)buf = 136446466;
        v27 = "nw_socket_output_finished";
        v28 = 2082;
        v29 = (char *)&a1[6].default_input_handler + 4;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Waiting for writes to finish, deferring output_finished", buf, 0x16u);
      }
    }
    *(_WORD *)((char *)&a1[6].handle + 5) |= 8u;
    return;
  }
  v9 = *(_WORD *)((char *)&a1[6].handle + 5);
  v10 = v9 & 0xFFF7 | (HIBYTE(a1[6].handle) << 16);
  *(_WORD *)((char *)&a1[6].handle + 5) = v9 & 0xFFF7;
  HIBYTE(a1[6].handle) = BYTE2(v10);
  if (LODWORD(a1[4].handle) != 2)
  {
    if ((v9 & 0x80) != 0)
      return;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 136446466;
    v27 = "nw_socket_output_finished";
    v28 = 2082;
    v29 = (char *)&a1[6].default_input_handler + 4;
    v5 = "%{public}s %{public}s Ignoring output finished for non-stream socket";
    goto LABEL_28;
  }
  if (!shutdown(output_handler_high, 1))
  {
    if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) != 0 || !gLogDatapath)
      return;
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v14 = gconnectionLogObj;
    if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
      return;
    *(_DWORD *)buf = 136446466;
    v27 = "nw_socket_output_finished";
    v28 = 2082;
    v29 = (char *)&a1[6].default_input_handler + 4;
    v5 = "%{public}s %{public}s Closed writes based on output finished";
LABEL_28:
    v6 = v14;
    v7 = OS_LOG_TYPE_DEBUG;
    goto LABEL_14;
  }
  v11 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v12 = gconnectionLogObj;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
  {
    v13 = HIDWORD(a1[4].output_handler);
    *(_DWORD *)buf = 136446978;
    v27 = "nw_socket_output_finished";
    v28 = 2080;
    v29 = (char *)&a1[6].default_input_handler + 4;
    v30 = 1024;
    v31 = v13;
    v32 = 1024;
    v33 = v11;
    v5 = "%{public}s %s shutdown(%d, SHUT_WR) %{darwin.errno}d";
    v6 = v12;
    v7 = OS_LOG_TYPE_ERROR;
    v8 = 34;
    goto LABEL_15;
  }
}

BOOL nw_protocol_http2_transport_get_output_frames(nw_protocol *a1, nw_protocol *a2, unsigned int a3, int a4, unsigned int a5, nw_frame_array_s *a6)
{
  _QWORD *handle;
  size_t v9;
  _QWORD *output_handler_context;
  uint64_t v11;
  NSObject *v12;
  _BOOL8 result;
  int v14;
  const char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint32_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  int v26;
  int v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  uint64_t *v32;
  nw_frame **tqh_last;
  char *v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  const char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  NSObject *v43;
  void *buffer;
  void *v45;
  char *v46;
  _BOOL4 v47;
  char *v48;
  _BOOL4 v49;
  void *v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  const char *v54;
  NSObject *v55;
  char *v56;
  char *v57;
  NSObject *v58;
  os_log_type_t v59;
  const char *v60;
  char *v61;
  _BOOL4 v62;
  char *backtrace_string;
  _BOOL4 v64;
  const char *v65;
  _BOOL4 v66;
  _BOOL4 v67;
  _BOOL4 v68;
  NSObject *v69;
  NSObject *v70;
  size_t v71;
  NSObject *v72;
  NSObject *v73;
  void *v74;
  NSObject *v75;
  char v76;
  os_log_type_t type;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint8_t v82[4];
  const char *v83;
  __int16 v84;
  uint64_t v85;
  __int16 v86;
  size_t v87;
  __int16 v88;
  int v89;
  _BYTE buf[24];
  _BYTE v91[24];
  nw_protocol *v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    v51 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v51, v82, &v78))
      goto LABEL_164;
    if (v82[0] == 17)
    {
      v52 = __nwlog_obj();
      v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0]))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null protocol";
      goto LABEL_163;
    }
    if (!(_BYTE)v78)
    {
      v52 = __nwlog_obj();
      v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0]))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null protocol, backtrace limit exceeded";
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v52 = __nwlog_obj();
    v53 = v82[0];
    v64 = os_log_type_enabled(v52, (os_log_type_t)v82[0]);
    if (!backtrace_string)
    {
      if (!v64)
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null protocol, no backtrace";
      goto LABEL_163;
    }
    if (!v64)
      goto LABEL_146;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v65 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_145:
    _os_log_impl(&dword_182FBE000, v52, v53, v65, buf, 0x16u);
    goto LABEL_146;
  }
  handle = a1->handle;
  if (!handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    v51 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v51, v82, &v78))
      goto LABEL_164;
    if (v82[0] == 17)
    {
      v52 = __nwlog_obj();
      v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0]))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null http2_transport";
      goto LABEL_163;
    }
    if (!(_BYTE)v78)
    {
      v52 = __nwlog_obj();
      v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0]))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null http2_transport, backtrace limit exceeded";
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v52 = __nwlog_obj();
    v53 = v82[0];
    v66 = os_log_type_enabled(v52, (os_log_type_t)v82[0]);
    if (!backtrace_string)
    {
      if (!v66)
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null http2_transport, no backtrace";
      goto LABEL_163;
    }
    if (!v66)
      goto LABEL_146;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v65 = "%{public}s called with null http2_transport, dumping backtrace:%{public}s";
    goto LABEL_145;
  }
  if (!a2)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    v51 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v51, v82, &v78))
      goto LABEL_164;
    if (v82[0] == 17)
    {
      v52 = __nwlog_obj();
      v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0]))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null input_protocol";
      goto LABEL_163;
    }
    if (!(_BYTE)v78)
    {
      v52 = __nwlog_obj();
      v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0]))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null input_protocol, backtrace limit exceeded";
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v52 = __nwlog_obj();
    v53 = v82[0];
    v67 = os_log_type_enabled(v52, (os_log_type_t)v82[0]);
    if (!backtrace_string)
    {
      if (!v67)
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null input_protocol, no backtrace";
      goto LABEL_163;
    }
    if (!v67)
      goto LABEL_146;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = backtrace_string;
    v65 = "%{public}s called with null input_protocol, dumping backtrace:%{public}s";
    goto LABEL_145;
  }
  if (!a6)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    v51 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v51, v82, &v78))
      goto LABEL_164;
    if (v82[0] == 17)
    {
      v52 = __nwlog_obj();
      v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0]))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null return_array";
      goto LABEL_163;
    }
    if (!(_BYTE)v78)
    {
      v52 = __nwlog_obj();
      v53 = v82[0];
      if (!os_log_type_enabled(v52, (os_log_type_t)v82[0]))
        goto LABEL_164;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      v54 = "%{public}s called with null return_array, backtrace limit exceeded";
      goto LABEL_163;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    v52 = __nwlog_obj();
    v53 = v82[0];
    v68 = os_log_type_enabled(v52, (os_log_type_t)v82[0]);
    if (backtrace_string)
    {
      if (v68)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = backtrace_string;
        v65 = "%{public}s called with null return_array, dumping backtrace:%{public}s";
        goto LABEL_145;
      }
LABEL_146:
      free(backtrace_string);
      goto LABEL_164;
    }
    if (!v68)
      goto LABEL_164;
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    v54 = "%{public}s called with null return_array, no backtrace";
LABEL_163:
    _os_log_impl(&dword_182FBE000, v52, v53, v54, buf, 0xCu);
LABEL_164:
    if (v51)
      free(v51);
    return 0;
  }
  LODWORD(v9) = a4;
  if (gLogDatapath)
  {
    v55 = __nwlog_obj();
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = (char *)handle + 205;
      _os_log_impl(&dword_182FBE000, v55, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s called", buf, 0x16u);
    }
  }
  a6->tqh_first = 0;
  a6->tqh_last = &a6->tqh_first;
  if (!(_DWORD)v9)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = (char *)handle + 205;
    v15 = "%{public}s %{public}s get_output_frames called with maximum bytes 0, returning 0 frames";
LABEL_19:
    v16 = v19;
    v17 = OS_LOG_TYPE_ERROR;
    v18 = 22;
    goto LABEL_24;
  }
  output_handler_context = a2->output_handler_context;
  if (!output_handler_context)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v19 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = (char *)handle + 205;
    v15 = "%{public}s %{public}s cannot get output frames for protocol without proper output handler context";
    goto LABEL_19;
  }
  v11 = output_handler_context[4];
  if (!v11)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v21 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1042;
    *(_DWORD *)v91 = 16;
    *(_WORD *)&v91[4] = 2098;
    *(_QWORD *)&v91[6] = a2;
    v15 = "%{public}s %{public}s cannot find hash table entry for %{public,uuid_t}.16P";
    v16 = v21;
    v17 = OS_LOG_TYPE_ERROR;
    v18 = 38;
    goto LABEL_24;
  }
  if ((*(_BYTE *)(v11 + 36) & 1) == 0 || *(_DWORD *)(v11 + 32) == -1)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v20 = gLogObj;
    result = os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR);
    if (!result)
      return result;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 2048;
    *(_QWORD *)v91 = a2;
    v15 = "%{public}s %{public}s cannot get output frames for stream that is not yet open, protocol (%p)";
    v16 = v20;
    v17 = OS_LOG_TYPE_ERROR;
    v18 = 32;
    goto LABEL_24;
  }
  if (*(_QWORD *)(v11 + 16))
  {
    if (!gLogDatapath)
      return 0;
    v12 = __nwlog_obj();
    result = os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG);
    if (!result)
      return result;
    v14 = *(_DWORD *)(v11 + 32);
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)v91 = v14;
    v15 = "%{public}s %{public}s stream %d already has pending output frames, cannot get more";
    v16 = v12;
    v17 = OS_LOG_TYPE_DEBUG;
    v18 = 28;
LABEL_24:
    _os_log_impl(&dword_182FBE000, v16, v17, v15, buf, v18);
    return 0;
  }
  if (v9 >= 0x1000000)
    v9 = 0x1000000;
  else
    v9 = v9;
  v78 = 0;
  v79 = &v78;
  v80 = 0x2000000000;
  v81 = 0;
  if (gLogDatapath)
  {
    v69 = __nwlog_obj();
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v82 = 136446722;
      v83 = "http2_transport_create_output_frame";
      v84 = 2082;
      v85 = (uint64_t)handle + 205;
      v86 = 1024;
      LODWORD(v87) = v9;
      _os_log_impl(&dword_182FBE000, v69, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s requested output frame of length %u", v82, 0x1Cu);
    }
  }
  *(_QWORD *)buf = MEMORY[0x1E0C809B0];
  *(_QWORD *)&buf[8] = 0x40000000;
  *(_QWORD *)&buf[16] = ___ZL35http2_transport_create_output_frameP27nw_protocol_http2_transportP11nw_protocolj_block_invoke;
  *(_QWORD *)v91 = &unk_1E14A0E38;
  v93 = v9;
  v92 = a2;
  *(_QWORD *)&v91[8] = &v78;
  *(_QWORD *)&v91[16] = handle;
  v22 = handle[22];
  do
  {
    if (!v22)
      break;
    v23 = *(_QWORD *)(v22 + 16);
    v24 = (*(uint64_t (**)(_BYTE *))&buf[16])(buf);
    v22 = v23;
  }
  while ((v24 & 1) != 0);
  if (v79[3])
    goto LABEL_35;
  if (gLogDatapath)
  {
    v72 = __nwlog_obj();
    if (os_log_type_enabled(v72, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)v82 = 136446722;
      v83 = "http2_transport_create_output_frame";
      v84 = 2082;
      v85 = (uint64_t)handle + 205;
      v86 = 1024;
      LODWORD(v87) = v9;
      _os_log_impl(&dword_182FBE000, v72, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s no output frame to reuse for length %u", v82, 0x1Cu);
    }
  }
  v28 = malloc_type_calloc(1uLL, v9, 0xEAFB8F1AuLL);
  if (v28)
  {
    v29 = (uint64_t)v28;
  }
  else
  {
    v73 = __nwlog_obj();
    os_log_type_enabled(v73, OS_LOG_TYPE_ERROR);
    *(_DWORD *)v82 = 136446722;
    v83 = "strict_calloc";
    v84 = 2048;
    v85 = 1;
    v86 = 2048;
    v87 = v9;
    v74 = (void *)_os_log_send_and_compose_impl();
    result = __nwlog_abort((uint64_t)v74);
    if (result)
    {
      __break(1u);
      return result;
    }
    free(v74);
    v29 = 0;
  }
  v30 = nw_frame_create(16, v29, v9, (uint64_t)nw_protocol_http2_transport_frame_output_finalizer, 0);
  v79[3] = v30;
  if (!v30)
  {
    __nwlog_obj();
    *(_DWORD *)v82 = 136446210;
    v83 = "http2_transport_create_output_frame";
    v39 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v76 = 0;
    if (__nwlog_fault(v39, &type, &v76))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v40 = __nwlog_obj();
        v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)v82 = 136446210;
          v83 = "http2_transport_create_output_frame";
          v42 = "%{public}s nw_frame_create output frame failed";
LABEL_107:
          _os_log_impl(&dword_182FBE000, v40, v41, v42, v82, 0xCu);
        }
      }
      else if (v76)
      {
        v48 = (char *)__nw_create_backtrace_string();
        v40 = __nwlog_obj();
        v41 = type;
        v49 = os_log_type_enabled(v40, type);
        if (v48)
        {
          if (v49)
          {
            *(_DWORD *)v82 = 136446466;
            v83 = "http2_transport_create_output_frame";
            v84 = 2082;
            v85 = (uint64_t)v48;
            _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s nw_frame_create output frame failed, dumping backtrace:%{public}s", v82, 0x16u);
          }
          free(v48);
          goto LABEL_108;
        }
        if (v49)
        {
          *(_DWORD *)v82 = 136446210;
          v83 = "http2_transport_create_output_frame";
          v42 = "%{public}s nw_frame_create output frame failed, no backtrace";
          goto LABEL_107;
        }
      }
      else
      {
        v40 = __nwlog_obj();
        v41 = type;
        if (os_log_type_enabled(v40, type))
        {
          *(_DWORD *)v82 = 136446210;
          v83 = "http2_transport_create_output_frame";
          v42 = "%{public}s nw_frame_create output frame failed, backtrace limit exceeded";
          goto LABEL_107;
        }
      }
    }
LABEL_108:
    if (v39)
      free(v39);
    if (v28)
      free(v28);
    goto LABEL_112;
  }
  if (!http2_transport_output_frame_context_reset(v30, (uint64_t)handle, (uint64_t)a2))
  {
    v43 = __nwlog_obj();
    if (os_log_type_enabled(v43, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)v82 = 136446466;
      v83 = "http2_transport_create_output_frame";
      v84 = 2082;
      v85 = (uint64_t)handle + 205;
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_ERROR, "%{public}s %{public}s output frame has no metadata", v82, 0x16u);
    }
    buffer = (void *)nw_frame_get_buffer(v79[3], 0);
    if (buffer)
      free(buffer);
    nw_frame_reset(v79[3], 0, 0, 0, 0);
    v45 = (void *)v79[3];
    if (v45)
    {
      os_release(v45);
      v79[3] = 0;
    }
LABEL_112:
    _Block_object_dispose(&v78, 8);
LABEL_113:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v56 = (char *)handle + 205;
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)v91 = v9;
    v57 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (!__nwlog_fault(v57, v82, &v78))
      goto LABEL_127;
    if (v82[0] == 17)
    {
      v58 = __nwlog_obj();
      v59 = v82[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)v82[0]))
        goto LABEL_127;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v56;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v91 = v9;
      v60 = "%{public}s %{public}s failed to create/reuse output frame of length %u";
    }
    else if ((_BYTE)v78)
    {
      v61 = (char *)__nw_create_backtrace_string();
      v58 = __nwlog_obj();
      v59 = v82[0];
      v62 = os_log_type_enabled(v58, (os_log_type_t)v82[0]);
      if (v61)
      {
        if (v62)
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v56;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)v91 = v9;
          *(_WORD *)&v91[4] = 2082;
          *(_QWORD *)&v91[6] = v61;
          _os_log_impl(&dword_182FBE000, v58, v59, "%{public}s %{public}s failed to create/reuse output frame of length %u, dumping backtrace:%{public}s", buf, 0x26u);
        }
        free(v61);
        goto LABEL_127;
      }
      if (!v62)
      {
LABEL_127:
        if (v57)
          free(v57);
        return 0;
      }
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v56;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v91 = v9;
      v60 = "%{public}s %{public}s failed to create/reuse output frame of length %u, no backtrace";
    }
    else
    {
      v58 = __nwlog_obj();
      v59 = v82[0];
      if (!os_log_type_enabled(v58, (os_log_type_t)v82[0]))
        goto LABEL_127;
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v56;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v91 = v9;
      v60 = "%{public}s %{public}s failed to create/reuse output frame of length %u, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v58, v59, v60, buf, 0x1Cu);
    goto LABEL_127;
  }
  if (!gLogDatapath)
    goto LABEL_36;
  v31 = __nwlog_obj();
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)v82 = 136446722;
    v83 = "http2_transport_create_output_frame";
    v84 = 2082;
    v85 = (uint64_t)handle + 205;
    v86 = 1024;
    LODWORD(v87) = v9;
    _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s allocated new output frame of length %u", v82, 0x1Cu);
  }
LABEL_35:
  if (gLogDatapath)
  {
    v70 = __nwlog_obj();
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEBUG))
    {
      v71 = v79[3];
      *(_DWORD *)v82 = 136446978;
      v83 = "http2_transport_create_output_frame";
      v84 = 2082;
      v85 = (uint64_t)handle + 205;
      v86 = 2048;
      v87 = v71;
      v88 = 1024;
      v89 = v9;
      _os_log_impl(&dword_182FBE000, v70, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s output_frame_create returning frame %p for requested length %u", v82, 0x26u);
    }
  }
LABEL_36:
  v25 = v79[3];
  _Block_object_dispose(&v78, 8);
  if (!v25)
    goto LABEL_113;
  v26 = *(_DWORD *)(v25 + 52);
  if (v26)
    v27 = v26 - (*(_DWORD *)(v25 + 56) + *(_DWORD *)(v25 + 60));
  else
    v27 = 0;
  if (v27 != (_DWORD)v9)
  {
    __nwlog_obj();
    v34 = (char *)handle + 205;
    *(_DWORD *)buf = 136446978;
    *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = (char *)handle + 205;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)v91 = v27;
    *(_WORD *)&v91[4] = 1024;
    *(_DWORD *)&v91[6] = v9;
    v35 = (char *)_os_log_send_and_compose_impl();
    v82[0] = 16;
    LOBYTE(v78) = 0;
    if (__nwlog_fault(v35, v82, &v78))
    {
      if (v82[0] == 17)
      {
        v36 = __nwlog_obj();
        v37 = v82[0];
        if (os_log_type_enabled(v36, (os_log_type_t)v82[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)v91 = v27;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v9;
          v38 = "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create_output_frame";
LABEL_79:
          _os_log_impl(&dword_182FBE000, v36, v37, v38, buf, 0x22u);
        }
      }
      else if ((_BYTE)v78)
      {
        v46 = (char *)__nw_create_backtrace_string();
        v36 = __nwlog_obj();
        v37 = v82[0];
        v47 = os_log_type_enabled(v36, (os_log_type_t)v82[0]);
        if (v46)
        {
          if (v47)
          {
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = v34;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)v91 = v27;
            *(_WORD *)&v91[4] = 1024;
            *(_DWORD *)&v91[6] = v9;
            *(_WORD *)&v91[10] = 2082;
            *(_QWORD *)&v91[12] = v46;
            _os_log_impl(&dword_182FBE000, v36, v37, "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create_output_frame, dumping backtrace:%{public}s", buf, 0x2Cu);
          }
          free(v46);
          goto LABEL_80;
        }
        if (v47)
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)v91 = v27;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v9;
          v38 = "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create"
                "_output_frame, no backtrace";
          goto LABEL_79;
        }
      }
      else
      {
        v36 = __nwlog_obj();
        v37 = v82[0];
        if (os_log_type_enabled(v36, (os_log_type_t)v82[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = v34;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)v91 = v27;
          *(_WORD *)&v91[4] = 1024;
          *(_DWORD *)&v91[6] = v9;
          v38 = "%{public}s %{public}s got output frame with wrong size (got %u != wanted %u) from http2_transport_create"
                "_output_frame, backtrace limit exceeded";
          goto LABEL_79;
        }
      }
    }
LABEL_80:
    if (v35)
      free(v35);
    v50 = (void *)nw_frame_get_buffer(v25, 0);
    if (v50)
      free(v50);
    nw_frame_reset(v25, 0, 0, 0, 0);
    os_release((void *)v25);
    return 0;
  }
  if (gLogDatapath)
  {
    v75 = __nwlog_obj();
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_protocol_http2_transport_get_output_frames";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = (char *)handle + 205;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)v91 = v9;
      _os_log_impl(&dword_182FBE000, v75, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s returning frame of %u bytes", buf, 0x1Cu);
    }
  }
  *(_QWORD *)(v25 + 16) = 0;
  v32 = (uint64_t *)handle[17];
  *(_QWORD *)(v25 + 24) = v32;
  *v32 = v25;
  handle[17] = v25 + 16;
  *(_QWORD *)(v25 + 32) = 0;
  tqh_last = a6->tqh_last;
  *(_QWORD *)(v25 + 40) = tqh_last;
  *tqh_last = (nw_frame *)v25;
  a6->tqh_last = (nw_frame **)(v25 + 32);
  return 1;
}

void nw_parameters_set_protocol_value(void *a1, const char *a2, void *a3)
{
  id v5;
  id v6;
  id *v7;
  id *v8;
  id v9;
  xpc_object_t v10;
  id *v11;
  id v12;
  void *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  char v21;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v24;
  __int16 v25;
  char *v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  if (v5)
  {
    v7 = (id *)v5;
    v8 = v7 + 5;
    v9 = v7[5];

    if (!v9 || object_getClass(v9) != (Class)MEMORY[0x1E0C812F8])
    {
      v10 = xpc_dictionary_create(0, 0, 0);

      v9 = v10;
    }
    xpc_dictionary_set_value(v9, a2, v6);
    v11 = v7;
    v12 = v9;
    objc_storeStrong(v8, v9);

    goto LABEL_6;
  }
  __nwlog_obj();
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v24 = "nw_parameters_set_protocol_value";
  v14 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v21 = 0;
  if (__nwlog_fault(v14, &type, &v21))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_parameters_set_protocol_value";
        _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s called with null protocol_parameters", buf, 0xCu);
      }
    }
    else if (v21)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v15, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          v24 = "nw_parameters_set_protocol_value";
          v25 = 2082;
          v26 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null protocol_parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_parameters_set_protocol_value";
        _os_log_impl(&dword_182FBE000, v15, v18, "%{public}s called with null protocol_parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v15 = objc_claimAutoreleasedReturnValue();
      v20 = type;
      if (os_log_type_enabled(v15, type))
      {
        *(_DWORD *)buf = 136446210;
        v24 = "nw_parameters_set_protocol_value";
        _os_log_impl(&dword_182FBE000, v15, v20, "%{public}s called with null protocol_parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v14)
    free(v14);
LABEL_6:

}

void sub_1830C0960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void nw_protocol_instance_update_outbound_data_limit(void *a1, uint64_t a2, int a3)
{
  _QWORD *v5;
  char *v6;
  void *v7;
  dispatch_queue_t *v8;
  dispatch_queue_t *v9;
  id v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  char *v14;
  uint64_t node;
  uint64_t v16;
  __int16 v17;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  NSObject *v27;
  void *v28;
  os_log_type_t v29;
  void *v30;
  os_log_type_t v31;
  char *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  os_log_type_t v35;
  _BOOL4 v36;
  void *v37;
  os_log_type_t v38;
  NSObject *v39;
  int v40;
  os_log_type_t v41;
  os_log_type_t v42;
  os_log_type_t v43;
  _BOOL4 v44;
  uint64_t v45;
  NSObject *v46;
  int v47;
  os_log_type_t v48;
  _QWORD v49[4];
  char *v50;
  uint64_t v51;
  int v52;
  char v53;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v56;
  __int16 v57;
  _BYTE v58[10];
  _BYTE v59[10];
  uint64_t v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = (char *)v5;
  if (v5)
  {
    if (a2)
    {
      v7 = (void *)v5[15];
      if (v7)
      {
        v8 = v7;
        v9 = v8;
        if (((_BYTE)v8[17] & 8) == 0)
          dispatch_assert_queue_V2(v8[1]);

      }
      if ((v6[402] & 0x40) == 0)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v10 = (id)gLogObj;
        *(_DWORD *)buf = 136446210;
        v56 = "nw_protocol_instance_update_outbound_data_limit";
        v11 = (char *)_os_log_send_and_compose_impl();

        type = OS_LOG_TYPE_ERROR;
        v53 = 0;
        if (!__nwlog_fault(v11, &type, &v53))
          goto LABEL_51;
        if (type == OS_LOG_TYPE_FAULT)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v13 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s Outbound data limit updates is not opted in", buf, 0xCu);
          }
LABEL_50:

          goto LABEL_51;
        }
        if (!v53)
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v12 = (id)gLogObj;
          v26 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_182FBE000, v12, v26, "%{public}s Outbound data limit updates is not opted in, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_50;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v12 = (id)gLogObj;
        v24 = type;
        v25 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446210;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s Outbound data limit updates is not opted in, no backtrace", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_protocol_instance_update_outbound_data_limit";
          v57 = 2082;
          *(_QWORD *)v58 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v24, "%{public}s Outbound data limit updates is not opted in, dumping backtrace:%{public}s", buf, 0x16u);
        }
LABEL_38:

        free(backtrace_string);
        if (!v11)
          goto LABEL_53;
        goto LABEL_52;
      }
      if (*(_DWORD *)(*((_QWORD *)v6 + 1) + 64) == 3)
      {
        v14 = (char *)*((_QWORD *)v6 + 29);
        if (a2 == -1)
        {
          v49[0] = MEMORY[0x1E0C809B0];
          v49[1] = 3221225472;
          v49[2] = __nw_protocol_instance_update_outbound_data_limit_block_invoke;
          v49[3] = &unk_1E149B968;
          v52 = a3;
          v51 = -1;
          v50 = v6;
          nw_hash_table_apply(v14, (uint64_t)v49);

          goto LABEL_53;
        }
        node = nw_hash_table_get_node(*((_QWORD *)v6 + 29), a2, 8);
        if (!node)
        {
          if ((v6[405] & 0x80000000) == 0)
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v27 = (id)gLogObj;
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              v56 = "nw_protocol_instance_update_outbound_data_limit";
              v57 = 2082;
              *(_QWORD *)v58 = v6 + 407;
              *(_WORD *)&v58[8] = 2080;
              *(_QWORD *)v59 = " ";
              *(_WORD *)&v59[8] = 2048;
              v60 = a2;
              _os_log_impl(&dword_182FBE000, v27, OS_LOG_TYPE_ERROR, "%{public}s %{public}s%sCannot set outbound data limit, flow %llx does not exist", buf, 0x2Au);
            }

          }
          goto LABEL_53;
        }
        v16 = *(_QWORD *)(node + 16);
        if (gLogDatapath)
        {
          v45 = node;
          __nwlog_obj();
          v46 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEBUG))
          {
            v47 = *(_DWORD *)(v45 + 72);
            *(_DWORD *)buf = 136446978;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            v57 = 1024;
            *(_DWORD *)v58 = v47;
            *(_WORD *)&v58[4] = 1024;
            *(_DWORD *)&v58[6] = a3;
            *(_WORD *)v59 = 2048;
            *(_QWORD *)&v59[2] = a2;
            _os_log_impl(&dword_182FBE000, v46, OS_LOG_TYPE_DEBUG, "%{public}s Increase current outbound data limit %u to %u bytes for flow %llx", buf, 0x22u);
          }

          node = v45;
          *(_DWORD *)(v45 + 72) = a3;
          if (!a3)
            goto LABEL_53;
        }
        else
        {
          *(_DWORD *)(node + 72) = a3;
          if (!a3)
            goto LABEL_53;
        }
        v17 = *(_WORD *)(node + 84);
        if ((v17 & 0x180) != 0x80 || v16 == 0)
          goto LABEL_53;
        v19 = *(_QWORD *)(v16 + 24);
        if (!v19 || !*(_QWORD *)(v19 + 72))
          goto LABEL_53;
        *(_WORD *)(node + 84) = v17 | 0x100;
        v20 = v6[405];
        goto LABEL_33;
      }
      if (a2 == -1)
      {
        if (gLogDatapath)
        {
          __nwlog_obj();
          v39 = objc_claimAutoreleasedReturnValue();
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEBUG))
          {
            v40 = *((_DWORD *)v6 + 26);
            *(_DWORD *)buf = 136446722;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            v57 = 1024;
            *(_DWORD *)v58 = v40;
            *(_WORD *)&v58[4] = 1024;
            *(_DWORD *)&v58[6] = a3;
            _os_log_impl(&dword_182FBE000, v39, OS_LOG_TYPE_DEBUG, "%{public}s Increase current outbound data limit %u to %u bytes for connection", buf, 0x18u);
          }

        }
        *((_DWORD *)v6 + 26) = a3;
        if (!a3)
          goto LABEL_53;
        if ((v6[404] & 0x80000000) == 0)
          goto LABEL_53;
        v20 = v6[405];
        if ((v20 & 1) != 0)
          goto LABEL_53;
        v21 = *((_QWORD *)v6 - 6);
        if (!v21)
          goto LABEL_53;
        v22 = *(_QWORD *)(v21 + 24);
        if (!v22 || !*(_QWORD *)(v22 + 72))
          goto LABEL_53;
LABEL_33:
        v6[405] = v20 | 1;
        goto LABEL_53;
      }
      __nwlog_obj();
      v37 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v56 = "nw_protocol_instance_update_outbound_data_limit";
      v11 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if (__nwlog_fault(v11, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v38 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_182FBE000, v12, v38, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW)", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (!v53)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v48 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_182FBE000, v12, v48, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_50;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v43 = type;
        v44 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v44)
          {
            *(_DWORD *)buf = 136446210;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_182FBE000, v12, v43, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), no backtrace", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (v44)
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_protocol_instance_update_outbound_data_limit";
          v57 = 2082;
          *(_QWORD *)v58 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v43, "%{public}s called with null (flow == NW_PROTOCOL_DEFAULT_FLOW), dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_38;
      }
    }
    else
    {
      __nwlog_obj();
      v30 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      v56 = "nw_protocol_instance_update_outbound_data_limit";
      v11 = (char *)_os_log_send_and_compose_impl();

      type = OS_LOG_TYPE_ERROR;
      v53 = 0;
      if (__nwlog_fault(v11, &type, &v53))
      {
        if (type == OS_LOG_TYPE_FAULT)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v31 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_182FBE000, v12, v31, "%{public}s called with null flow", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (!v53)
        {
          __nwlog_obj();
          v12 = objc_claimAutoreleasedReturnValue();
          v42 = type;
          if (os_log_type_enabled(v12, type))
          {
            *(_DWORD *)buf = 136446210;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_182FBE000, v12, v42, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
          }
          goto LABEL_50;
        }
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v35 = type;
        v36 = os_log_type_enabled(v12, type);
        if (!backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446210;
            v56 = "nw_protocol_instance_update_outbound_data_limit";
            _os_log_impl(&dword_182FBE000, v12, v35, "%{public}s called with null flow, no backtrace", buf, 0xCu);
          }
          goto LABEL_50;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446466;
          v56 = "nw_protocol_instance_update_outbound_data_limit";
          v57 = 2082;
          *(_QWORD *)v58 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v12, v35, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }
        goto LABEL_38;
      }
    }
  }
  else
  {
    __nwlog_obj();
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v56 = "nw_protocol_instance_update_outbound_data_limit";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v53 = 0;
    if (__nwlog_fault(v11, &type, &v53))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_protocol_instance_update_outbound_data_limit";
          _os_log_impl(&dword_182FBE000, v12, v29, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_50;
      }
      if (!v53)
      {
        __nwlog_obj();
        v12 = objc_claimAutoreleasedReturnValue();
        v41 = type;
        if (os_log_type_enabled(v12, type))
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_protocol_instance_update_outbound_data_limit";
          _os_log_impl(&dword_182FBE000, v12, v41, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_50;
      }
      v32 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v33 = type;
      v34 = os_log_type_enabled(v12, type);
      if (!v32)
      {
        if (v34)
        {
          *(_DWORD *)buf = 136446210;
          v56 = "nw_protocol_instance_update_outbound_data_limit";
          _os_log_impl(&dword_182FBE000, v12, v33, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_50;
      }
      if (v34)
      {
        *(_DWORD *)buf = 136446466;
        v56 = "nw_protocol_instance_update_outbound_data_limit";
        v57 = 2082;
        *(_QWORD *)v58 = v32;
        _os_log_impl(&dword_182FBE000, v12, v33, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }

      free(v32);
    }
  }
LABEL_51:
  if (v11)
LABEL_52:
    free(v11);
LABEL_53:

}

void sub_1830C154C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_quic_stream_set_is_unidirectional(void *a1, char a2)
{
  id v3;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[4];
  char v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  if (nw_protocol_options_is_quic_stream(v3))
  {
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_set_is_unidirectional_block_invoke;
    v12[3] = &__block_descriptor_33_e9_B16__0_v8l;
    v13 = a2;
    nw_protocol_options_access_handle(v3, v12);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_quic_stream_set_is_unidirectional";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v5, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_quic_stream_set_is_unidirectional";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_quic_stream_set_is_unidirectional";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_quic_stream_set_is_unidirectional";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_quic_stream_set_is_unidirectional";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
LABEL_3:

}

void sub_1830C1830(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_quic_stream_get_is_unidirectional(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_is_unidirectional_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_unidirectional";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_unidirectional";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_unidirectional";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_unidirectional";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_unidirectional";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1830C1B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_quic_stream_get_is_datagram(void *a1)
{
  id v1;
  _BOOL8 v2;
  void *v4;
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  _QWORD v12[5];
  char v13;
  os_log_type_t type;
  _BYTE buf[24];
  char v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (nw_protocol_options_is_quic_stream(v1))
  {
    *(_QWORD *)buf = 0;
    *(_QWORD *)&buf[8] = buf;
    *(_QWORD *)&buf[16] = 0x2020000000;
    v16 = 0;
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 3221225472;
    v12[2] = __nw_quic_stream_get_is_datagram_block_invoke;
    v12[3] = &unk_1E14A9D68;
    v12[4] = buf;
    nw_protocol_options_access_handle(v1, v12);
    v2 = *(_BYTE *)(*(_QWORD *)&buf[8] + 24) != 0;
    _Block_object_dispose(buf, 8);
    goto LABEL_3;
  }
  __nwlog_obj();
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_datagram";
  v5 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v5, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v7 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_datagram";
        _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null nw_protocol_options_is_quic_stream(options)", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_datagram";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_datagram";
        _os_log_impl(&dword_182FBE000, v6, v9, "%{public}s called with null nw_protocol_options_is_quic_stream(options), no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v6 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      if (os_log_type_enabled(v6, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_quic_stream_get_is_datagram";
        _os_log_impl(&dword_182FBE000, v6, v11, "%{public}s called with null nw_protocol_options_is_quic_stream(options), backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v5)
    free(v5);
  v2 = 0;
LABEL_3:

  return v2;
}

void sub_1830C1E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

BOOL nw_protocol_options_is_quic_stream(void *a1)
{
  id v1;
  void *v2;
  id *v3;
  id v4;
  _BOOL8 is_equal_unsafe;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  char *backtrace_string;
  os_log_type_t v12;
  _BOOL4 v13;
  os_log_type_t v14;
  char v15;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v18;
  __int16 v19;
  char *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (id *)v1;
    v4 = v3[1];

    if (nw_protocol_copy_quic_stream_definition::onceToken != -1)
      dispatch_once(&nw_protocol_copy_quic_stream_definition::onceToken, &__block_literal_global_12_55083);
    is_equal_unsafe = nw_protocol_definition_is_equal_unsafe((uint64_t)v4, nw_protocol_copy_quic_stream_definition::quic_definition);

    goto LABEL_5;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v18 = "nw_protocol_options_is_quic_stream";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v15 = 0;
  if (__nwlog_fault(v8, &type, &v15))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_quic_stream";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null options", buf, 0xCu);
      }
    }
    else if (v15)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      v13 = os_log_type_enabled(v9, type);
      if (backtrace_string)
      {
        if (v13)
        {
          *(_DWORD *)buf = 136446466;
          v18 = "nw_protocol_options_is_quic_stream";
          v19 = 2082;
          v20 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_22;
      }
      if (v13)
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_quic_stream";
        _os_log_impl(&dword_182FBE000, v9, v12, "%{public}s called with null options, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v18 = "nw_protocol_options_is_quic_stream";
        _os_log_impl(&dword_182FBE000, v9, v14, "%{public}s called with null options, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_22:
  if (v8)
    free(v8);
  is_equal_unsafe = 0;
LABEL_5:

  return is_equal_unsafe;
}

void sub_1830C217C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void nw_endpoint_flow_failed_with_error(void *a1, int a2, void *a3)
{
  NWConcrete_nw_endpoint_handler *v4;
  NWConcrete_nw_endpoint_mode_handler *v5;
  NWConcrete_nw_endpoint_mode_handler *v6;
  const char *v7;
  uint64_t v8;
  uint64_t (*v9)(const char *, uint64_t, os_log_type_t *);
  void *v10;
  char v11;
  NWConcrete_nw_endpoint_handler *v12;
  char v13;
  NSObject *v14;
  NWConcrete_nw_endpoint_handler *v15;
  NWConcrete_nw_endpoint_handler *v16;
  char v17;
  const char *v18;
  nw_endpoint_t v19;
  const char *logging_description;
  unsigned int *v21;
  unsigned int *v22;
  uint64_t v23;
  const char *v24;
  void **v25;
  void **v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  void *v31;
  _BOOL8 v32;
  uint64_t v33;
  uint64_t (*v34)(const char *, uint64_t, uint64_t *);
  void *v35;
  char v36;
  uint64_t v37;
  void *v38;
  void *v39;
  void *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(const char *, uint64_t, uint64_t *);
  void *v45;
  void *v46;
  char v47;
  uint64_t v48;
  os_unfair_lock_s *v49;
  id v50;
  char *v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  void (*v55)(const char *, char *, uint64_t);
  void *v56;
  char v57;
  char *backtrace_string;
  os_log_type_t v59;
  _BOOL4 v60;
  uint64_t v61;
  void *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(unint64_t);
  NWConcrete_nw_endpoint_handler *v69;
  _BOOL4 v70;
  NSObject *v71;
  NWConcrete_nw_endpoint_handler *v72;
  NWConcrete_nw_endpoint_handler *v73;
  _BOOL4 v74;
  const char *v75;
  nw_endpoint_t v76;
  const char *v77;
  unsigned int *v78;
  unsigned int *v79;
  uint64_t v80;
  const char *v81;
  NWConcrete_nw_endpoint_handler *v82;
  _BOOL4 v83;
  char *v84;
  char *v85;
  _BOOL4 v86;
  const char *v87;
  nw_endpoint_t v88;
  const char *v89;
  unsigned int *v90;
  unsigned int *v91;
  uint64_t v92;
  const char *v93;
  unsigned int *v94;
  unsigned int *v95;
  const char *v96;
  os_log_type_t v97;
  void **v98;
  id v99;
  _QWORD *v100;
  void *v101;
  char v102;
  void **v103;
  const char *v104;
  char *v105;
  id v106;
  unsigned int *v107;
  char *v108;
  id v109;
  const char *v110;
  char *v111;
  NSObject *v112;
  os_log_type_t v113;
  id *v114;
  id *v115;
  const char *v116;
  nw_endpoint_t v117;
  const char *v118;
  id *v119;
  id *v120;
  uint64_t v121;
  const char *v122;
  const char *v123;
  const char *v124;
  char *v125;
  NSObject *v126;
  os_log_type_t v127;
  const char *v128;
  const char *v129;
  const char *v130;
  const char *v131;
  const char *v132;
  id v133;
  NSObject *v134;
  os_log_type_t v135;
  const char *v136;
  const char *v137;
  nw_endpoint_t v138;
  const char *v139;
  const char *v140;
  const char *v141;
  id v142;
  void **v143;
  void **v144;
  unsigned int v145;
  const char *v146;
  os_log_type_t v147;
  const char *v148;
  const char *v149;
  nw_endpoint_t v150;
  const char *v151;
  const char *v152;
  const char *v153;
  id v154;
  uint64_t v155;
  void *v156;
  char v157;
  uint64_t v158;
  void *v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  _QWORD *v164;
  _QWORD *v165;
  _QWORD *v166;
  BOOL v167;
  uint64_t v168;
  NSObject *v169;
  const char *id_string;
  const char *v171;
  nw_endpoint_t v172;
  const char *v173;
  const char *v174;
  const char *v175;
  id v176;
  const char *v177;
  const char *v178;
  nw_endpoint_t v179;
  const char *v180;
  const char *v181;
  const char *v182;
  id v183;
  NSObject *v184;
  void **v185;
  NWConcrete_nw_endpoint_handler *v186;
  id v187;
  id v188;
  void **v189;
  id v190;
  id v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  uint64_t v195;
  uint64_t v196;
  void *v197;
  char v198;
  uint64_t v199;
  uint64_t v200;
  void (*v201)(const char *);
  _DNSServiceRef_t *v202;
  void *v203;
  void *v204;
  char v205;
  id *v206;
  id v207;
  void *v208;
  void *v209;
  NWConcrete_nw_endpoint_handler *v210;
  int state;
  void *v212;
  uint64_t v213;
  void *v214;
  __int16 v215;
  NWConcrete_nw_endpoint_handler *v216;
  BOOL v217;
  NSObject *v218;
  char *v219;
  char *v220;
  _BOOL4 v221;
  const char *v222;
  nw_endpoint_t v223;
  const char *v224;
  char *v225;
  char *v226;
  uint64_t v227;
  const char *v228;
  void **v229;
  void **v230;
  const char *v231;
  uint64_t v232;
  uint64_t v233;
  void (**v234)(_QWORD);
  const void *v235;
  void **v236;
  id v237;
  id v238;
  NWConcrete_nw_endpoint_handler *v239;
  void *v240;
  char *v241;
  NSObject *v242;
  os_log_type_t v243;
  void *v244;
  char *v245;
  NSObject *v246;
  os_log_type_t v247;
  char *v248;
  os_log_type_t v249;
  _BOOL4 v250;
  char *v251;
  os_log_type_t v252;
  _BOOL4 v253;
  void *v254;
  const char *v255;
  char *v256;
  NSObject *v257;
  os_log_type_t v258;
  const char *v259;
  char *v260;
  os_log_type_t v261;
  _BOOL4 v262;
  const char *v263;
  os_log_type_t v264;
  os_log_type_t v265;
  void *v266;
  const char *v267;
  char *v268;
  NSObject *v269;
  os_log_type_t v270;
  const char *v271;
  char *v272;
  os_log_type_t v273;
  _BOOL4 v274;
  const char *v275;
  os_log_type_t v276;
  const char *v277;
  const char *v278;
  os_log_type_t v279;
  const char *v280;
  const char *v281;
  char *v282;
  os_unfair_lock_s *v283;
  id *v284;
  const char *v285;
  const char *v286;
  const char *v287;
  nw_endpoint_t v288;
  const char *v289;
  const char *v290;
  uint64_t v291;
  id log;
  NSObject *loga;
  NSObject *logb;
  NSObject *logd;
  NSObject *loge;
  const char *logf;
  nw_endpoint_t logc;
  void *v299;
  os_unfair_lock_s *lock;
  os_unfair_lock_t locka;
  char *id_str;
  id v304;
  id v305;
  NWConcrete_nw_endpoint_handler *v306;
  char v307;
  os_log_type_t v308;
  uint64_t v309;
  char v310;
  os_log_type_t type[8];
  char v312;
  _BYTE buf[12];
  __int16 v314;
  char *v315;
  __int16 v316;
  const char *v317;
  __int16 v318;
  void *v319;
  __int16 v320;
  const char *v321;
  __int16 v322;
  const char *v323;
  __int16 v324;
  id v325;
  __int16 v326;
  char *v327;
  uint64_t v328;

  v328 = *MEMORY[0x1E0C80C00];
  v4 = a1;
  v305 = a3;
  v306 = v4;
  if (v4)
  {
    v5 = nw_endpoint_handler_copy_flow(v4);
    v6 = v5;
    if (v5)
    {
      if ((*((_BYTE *)v5 + 36) & 4) != 0)
      {
        v12 = v4;
        v13 = *((_BYTE *)v12 + 268);

        if ((v13 & 0x20) == 0)
        {
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v14 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
          {
            v15 = v12;

            v16 = v15;
            v17 = *((_BYTE *)v12 + 268);

            if ((v17 & 1) != 0)
              v18 = "dry-run ";
            else
              v18 = "";
            v19 = nw_endpoint_handler_copy_endpoint(v16);
            logging_description = nw_endpoint_get_logging_description(v19);
            id_str = v15->id_str;
            v21 = v16;
            v22 = v21;
            v23 = v21[30];
            if (v23 > 5)
              v24 = "unknown-state";
            else
              v24 = off_1E149FC48[v23];

            v25 = v22;
            v26 = v25;
            v27 = "path";
            switch(*((_DWORD *)v25 + 29))
            {
              case 0:
                break;
              case 1:
                v27 = "resolver";
                break;
              case 2:
                v27 = nw_endpoint_flow_mode_string(v25[31]);
                break;
              case 3:
                v27 = "proxy";
                break;
              case 4:
                v27 = "fallback";
                break;
              case 5:
                v27 = "transform";
                break;
              default:
                v27 = "unknown-mode";
                break;
            }

            v98 = v26;
            os_unfair_lock_lock((os_unfair_lock_t)v98 + 28);
            v99 = v98[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v98 + 28);

            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
            v314 = 2082;
            v315 = id_str;
            v316 = 2082;
            v317 = v18;
            v318 = 2082;
            v319 = (void *)logging_description;
            v320 = 2082;
            v321 = v24;
            v322 = 2082;
            v323 = v27;
            v324 = 2114;
            v325 = v99;
            _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] already failing, returning", buf, 0x48u);

          }
        }
        goto LABEL_320;
      }
      v7 = (const char *)*((_QWORD *)v5 + 51);
      *((_BYTE *)v5 + 36) |= 4u;
      if (*((_DWORD *)v5 + 206))
      {
        if (v7)
        {
          v8 = *((_QWORD *)v7 + 3);
          if (v8)
          {
            v9 = *(uint64_t (**)(const char *, uint64_t, os_log_type_t *))(v8 + 224);
            if (v9)
            {
              *(_QWORD *)type = 0;
              v10 = (void *)*((_QWORD *)v7 + 5);
              if (v10 == &nw_protocol_ref_counted_handle)
              {
                v28 = *((_QWORD *)v7 + 11);
                if (v28)
                  *((_QWORD *)v7 + 11) = v28 + 1;
                v11 = -1;
              }
              else
              {
                v11 = 0;
              }
              *(_QWORD *)buf = v7;
              buf[8] = v11;
              v29 = v9(v7, 5, type);
              if (v10 == &nw_protocol_ref_counted_handle)
                nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              if (v29)
              {
                v30 = (void *)*((_QWORD *)v6 + 101);
                if (v30)
                {
                  free(v30);
                  *((_QWORD *)v6 + 101) = 0;
                }
                *((_QWORD *)v6 + 101) = v29;
                *((_QWORD *)v6 + 102) = *(_QWORD *)type;
              }
            }
          }
        }
      }
      v31 = (void *)*((_QWORD *)v6 + 104);
      if (v31)
      {
        v32 = nw_path_flow_registration_copy_path(v31);
        lock = (os_unfair_lock_s *)((char *)v6 + 880);
        os_unfair_lock_lock((os_unfair_lock_t)v6 + 220);
        if (!v32)
        {
          v299 = 0;
          if (!*((_QWORD *)v6 + 90))
          {
LABEL_71:
            os_unfair_lock_unlock(lock);
            v49 = (os_unfair_lock_s *)*((_QWORD *)v6 + 108);
            if (v49)
            {
              _nw_hash_table_release(v49, v48);
              *((_QWORD *)v6 + 108) = 0;
            }
            if (!*((_QWORD *)v6 + 53))
              goto LABEL_81;
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v50 = (id)gLogObj;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
            v51 = (char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v309) = 0;
            if (__nwlog_fault(v51, type, &v309))
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v52 = (id)gLogObj;
                v53 = type[0];
                if (os_log_type_enabled(v52, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                  _os_log_impl(&dword_182FBE000, v52, v53, "%{public}s Passthrough flow with an input handler should not fail on its own", buf, 0xCu);
                }
              }
              else if ((_BYTE)v309)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v52 = (id)gLogObj;
                v59 = type[0];
                v60 = os_log_type_enabled(v52, type[0]);
                if (backtrace_string)
                {
                  if (v60)
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                    v314 = 2082;
                    v315 = backtrace_string;
                    _os_log_impl(&dword_182FBE000, v52, v59, "%{public}s Passthrough flow with an input handler should not fail on its own, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(backtrace_string);
                  if (v51)
                    goto LABEL_80;
                  goto LABEL_81;
                }
                if (v60)
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                  _os_log_impl(&dword_182FBE000, v52, v59, "%{public}s Passthrough flow with an input handler should not fail on its own, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
                networkd_settings_init();
                v52 = (id)gLogObj;
                v97 = type[0];
                if (os_log_type_enabled(v52, type[0]))
                {
                  *(_DWORD *)buf = 136446210;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                  _os_log_impl(&dword_182FBE000, v52, v97, "%{public}s Passthrough flow with an input handler should not fail on its own, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
            if (v51)
LABEL_80:
              free(v51);
LABEL_81:
            if (v7)
            {
              v54 = *((_QWORD *)v7 + 3);
              if (v54)
              {
                v55 = *(void (**)(const char *, char *, uint64_t))(v54 + 8);
                if (v55)
                {
                  v56 = (void *)*((_QWORD *)v7 + 5);
                  if (v56 == &nw_protocol_ref_counted_handle)
                  {
                    v61 = *((_QWORD *)v7 + 11);
                    if (v61)
                      *((_QWORD *)v7 + 11) = v61 + 1;
                    *(_QWORD *)buf = v7;
                    v57 = buf[8] | 1;
                  }
                  else
                  {
                    *(_QWORD *)buf = v7;
                    v57 = buf[8] & 0xFE;
                  }
                  buf[8] = v57;
                  v62 = (void *)*((_QWORD *)v6 + 52);
                  if (v62 == &nw_protocol_ref_counted_handle)
                  {
                    v64 = *((_QWORD *)v6 + 58);
                    if (v64)
                      *((_QWORD *)v6 + 58) = v64 + 1;
                    *(_QWORD *)type = (char *)v6 + 376;
                    v63 = v312 | 1;
                  }
                  else
                  {
                    *(_QWORD *)type = (char *)v6 + 376;
                    v63 = v312 & 0xFE;
                  }
                  v312 = v63;
                  v55(v7, (char *)v6 + 376, 1);
                  if (v62 == &nw_protocol_ref_counted_handle)
                  {
                    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                    if (v56 != &nw_protocol_ref_counted_handle)
                      goto LABEL_102;
                  }
                  else if (v56 != &nw_protocol_ref_counted_handle)
                  {
                    goto LABEL_102;
                  }
                  nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
                }
              }
            }
LABEL_102:
            v65 = *((_QWORD *)v6 + 65);
            v66 = *((_QWORD *)v6 + 63);
            if (!(v65 | v66))
              goto LABEL_269;
            if (v65 && v66)
            {
              v67 = *(_QWORD *)(v66 + 24);
              if (!v67
                || (v68 = *(uint64_t (**)(unint64_t))(v67 + 16)) == 0
                || *(NWConcrete_nw_endpoint_mode_handler **)(v66 + 48) != (NWConcrete_nw_endpoint_mode_handler *)((char *)v6 + 472))
              {
                v69 = v306;
                v70 = (*((_BYTE *)v69 + 268) & 0x20) == 0;

                if (v70)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v71 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v71, OS_LOG_TYPE_ERROR))
                  {
                    v72 = v69;

                    v73 = v72;
                    v74 = (*((_BYTE *)v69 + 268) & 1) == 0;

                    if (v74)
                      v75 = "";
                    else
                      v75 = "dry-run ";
                    v76 = nw_endpoint_handler_copy_endpoint(v73);
                    v77 = nw_endpoint_get_logging_description(v76);
                    v78 = v73;
                    v79 = v78;
                    v80 = v78[30];
                    if (v80 > 5)
                      v81 = "unknown-state";
                    else
                      v81 = off_1E149FC48[v80];

                    v103 = v79;
                    v104 = "path";
                    switch(*((_DWORD *)v103 + 29))
                    {
                      case 0:
                        break;
                      case 1:
                        v104 = "resolver";
                        break;
                      case 2:
                        v104 = nw_endpoint_flow_mode_string(v103[31]);
                        break;
                      case 3:
                        v104 = "proxy";
                        break;
                      case 4:
                        v104 = "fallback";
                        break;
                      case 5:
                        v104 = "transform";
                        break;
                      default:
                        v104 = "unknown-mode";
                        break;
                    }
                    logf = v104;

                    v184 = v71;
                    v185 = v103;
                    v186 = v72;
                    os_unfair_lock_lock((os_unfair_lock_t)v185 + 28);
                    v187 = v185[8];
                    os_unfair_lock_unlock((os_unfair_lock_t)v185 + 28);

                    v188 = v187;
                    *(_DWORD *)buf = 136447746;
                    *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                    v314 = 2082;
                    v315 = v186->id_str;
                    v71 = v184;
                    v316 = 2082;
                    v317 = v75;
                    v318 = 2082;
                    v319 = (void *)v77;
                    v320 = 2082;
                    v321 = v81;
                    v322 = 2082;
                    v323 = logf;
                    v324 = 2114;
                    v325 = v188;
                    _os_log_impl(&dword_182FBE000, v184, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol output handler cannot handle replace_input_handler", buf, 0x48u);

                  }
                }
                goto LABEL_269;
              }
              v100 = *(_QWORD **)(v65 + 32);
              v101 = *(void **)(v66 + 40);
              if (v101 == &nw_protocol_ref_counted_handle)
              {
                v155 = *(_QWORD *)(v66 + 88);
                if (v155)
                  *(_QWORD *)(v66 + 88) = v155 + 1;
                *(_QWORD *)buf = v66;
                v102 = buf[8] | 1;
              }
              else
              {
                *(_QWORD *)buf = *((_QWORD *)v6 + 63);
                v102 = buf[8] & 0xFE;
              }
              buf[8] = v102;
              v156 = (void *)*((_QWORD *)v6 + 64);
              if (v156 == &nw_protocol_ref_counted_handle)
              {
                v158 = *((_QWORD *)v6 + 70);
                if (v158)
                  *((_QWORD *)v6 + 70) = v158 + 1;
                *(_QWORD *)type = (char *)v6 + 472;
                v157 = v312 | 1;
              }
              else
              {
                *(_QWORD *)type = (char *)v6 + 472;
                v157 = v312 & 0xFE;
              }
              v312 = v157;
              v159 = *(void **)(v65 + 40);
              if (v159 == &nw_protocol_ref_counted_handle)
              {
                v161 = *(_QWORD *)(v65 + 88);
                if (v161)
                  *(_QWORD *)(v65 + 88) = v161 + 1;
                v309 = v65;
                v160 = v310 | 1;
              }
              else
              {
                v309 = v65;
                v160 = v310 & 0xFE;
              }
              v310 = v160;
              v162 = v65;
              v163 = v68(v66);
              if (v159 == &nw_protocol_ref_counted_handle)
              {
                nw::release_if_needed<nw_protocol *>(&v309);
                if (v156 != &nw_protocol_ref_counted_handle)
                {
LABEL_200:
                  if (v101 != &nw_protocol_ref_counted_handle)
                    goto LABEL_201;
                  goto LABEL_223;
                }
              }
              else if (v156 != &nw_protocol_ref_counted_handle)
              {
                goto LABEL_200;
              }
              nw::release_if_needed<nw_protocol *>((uint64_t *)type);
              if (v101 != &nw_protocol_ref_counted_handle)
              {
LABEL_201:
                if (v163)
                  goto LABEL_202;
                goto LABEL_224;
              }
LABEL_223:
              nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
              if (v163)
              {
LABEL_202:
                v164 = (_QWORD *)*((_QWORD *)v6 + 63);
                if (v164)
                {
                  nw_protocol_release(v164);
                  *((_QWORD *)v6 + 63) = 0;
                }
                v165 = (_QWORD *)*((_QWORD *)v6 + 65);
                if (v165)
                {
                  nw_protocol_release(v165);
                  *((_QWORD *)v6 + 65) = 0;
                }
                v166 = *(_QWORD **)(v162 + 32);
                if (v166)
                  v167 = v166 == v100;
                else
                  v167 = 1;
                if (v167 && v166 != (_QWORD *)v66)
                {
                  nw_protocol_release(v166);
                  *(_QWORD *)(v162 + 32) = v66;
                  if (*(_UNKNOWN **)(v66 + 40) == &nw_protocol_ref_counted_handle)
                  {
                    v168 = *(_QWORD *)(v66 + 88);
                    if (v168)
                      *(_QWORD *)(v66 + 88) = v168 + 1;
                  }
                }
                if ((nw_endpoint_handler_get_logging_disabled(v306) & 1) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v169 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v169, OS_LOG_TYPE_DEBUG))
                  {
                    id_string = nw_endpoint_handler_get_id_string(v306);
                    v171 = nw_endpoint_handler_dry_run_string(v306);
                    v172 = nw_endpoint_handler_copy_endpoint(v306);
                    v173 = nw_endpoint_get_logging_description(v172);
                    v174 = nw_endpoint_handler_state_string(v306);
                    v175 = nw_endpoint_handler_mode_string(v306);
                    v176 = nw_endpoint_handler_copy_current_path(v306);
                    *(_DWORD *)buf = 136447746;
                    *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                    v314 = 2082;
                    v315 = (char *)id_string;
                    v316 = 2082;
                    v317 = v171;
                    v318 = 2082;
                    v319 = (void *)v173;
                    v320 = 2082;
                    v321 = v174;
                    v322 = 2082;
                    v323 = v175;
                    v324 = 2114;
                    v325 = v176;
                    _os_log_impl(&dword_182FBE000, v169, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Removed replay protocol from the stack on cancellation", buf, 0x48u);

                  }
                  goto LABEL_220;
                }
LABEL_269:
                if ((*((_BYTE *)v6 + 33) & 0x40) != 0)
                {
                  v203 = (void *)*((_QWORD *)v6 + 113);
                  *((_QWORD *)v6 + 113) = 0;

                }
                else
                {
                  if (*((_QWORD *)v6 + 114))
                    *((_QWORD *)v6 + 114) = 0;
                  os_unfair_lock_lock(lock);
                  v202 = (_DNSServiceRef_t *)*((_QWORD *)v6 + 115);
                  if (v202)
                  {
                    DNSServiceRefDeallocate(v202);
                    *((_QWORD *)v6 + 115) = 0;
                  }
                  os_unfair_lock_unlock(lock);
                }
                *((_BYTE *)v6 + 32) &= 0x2Fu;
                v204 = (void *)*((_QWORD *)v6 + 104);
                *((_QWORD *)v6 + 104) = 0;

                *((_OWORD *)v6 + 46) = 0u;
                v205 = *((_BYTE *)v6 + 33);
                *((_BYTE *)v6 + 33) = v205 & 0xFE;
                *((_QWORD *)v6 + 94) = 0;
                if ((v205 & 4) != 0)
                {
                  v206 = v306;
                  v207 = v206[7];

                  if (v207)
                    nw_association_mark_flow_disconnected(v207, v206);
                  *((_BYTE *)v6 + 33) &= ~4u;

                }
                v208 = (void *)*((_QWORD *)v6 + 67);
                if (v208)
                {
                  *((_QWORD *)v6 + 67) = 0;

                }
                *((_WORD *)v6 + 354) &= ~1u;
                v209 = (void *)*((_QWORD *)v6 + 3);
                *((_QWORD *)v6 + 3) = 0;

                if (!a2)
                  goto LABEL_319;
                v210 = v306;
                state = v210->state;

                if (state == 5)
                  goto LABEL_319;
                v212 = v305;
                if (!v305)
                  v212 = (void *)*((_QWORD *)v6 + 109);
                v304 = v212;
                v213 = *((_QWORD *)v6 + 5);
                if ((*((_BYTE *)v6 + 33) & 8) != 0)
                {
                  if (!v213)
                  {
LABEL_317:
                    v239 = v210;
                    v210->state = 4;

                    v215 = 10;
                    v214 = v304;
                    goto LABEL_318;
                  }
                }
                else if (!v213)
                {
                  v214 = v304;
                  nw_endpoint_handler_handle_failure(v210);
                  v215 = 7;
LABEL_318:
                  v210->event.domain = 3;
                  v210->event.event = v215;
                  nw_endpoint_handler_report(v210, 0, &v210->event.domain, v214);

LABEL_319:
                  *((_BYTE *)v6 + 36) &= ~4u;

LABEL_320:
                  goto LABEL_321;
                }
                v216 = v210;
                v217 = (*((_BYTE *)v216 + 268) & 0x20) == 0;

                if (v217)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v218 = (id)gconnectionLogObj;
                  if (os_log_type_enabled(v218, OS_LOG_TYPE_ERROR))
                  {
                    v219 = v216;

                    v220 = v219;
                    v221 = (*((_BYTE *)v216 + 268) & 1) == 0;

                    if (v221)
                      v222 = "";
                    else
                      v222 = "dry-run ";
                    v223 = nw_endpoint_handler_copy_endpoint(v220);
                    v224 = nw_endpoint_get_logging_description(v223);
                    v225 = v220;
                    v226 = v225;
                    v227 = v210->state;
                    logc = v223;
                    locka = (os_unfair_lock_t)v224;
                    if (v227 > 5)
                      v228 = "unknown-state";
                    else
                      v228 = off_1E149FC48[v227];

                    v229 = v226;
                    v230 = v229;
                    v231 = "path";
                    switch(*((_DWORD *)v229 + 29))
                    {
                      case 0:
                        break;
                      case 1:
                        v231 = "resolver";
                        break;
                      case 2:
                        v231 = nw_endpoint_flow_mode_string(v229[31]);
                        break;
                      case 3:
                        v231 = "proxy";
                        break;
                      case 4:
                        v231 = "fallback";
                        break;
                      case 5:
                        v231 = "transform";
                        break;
                      default:
                        v231 = "unknown-mode";
                        break;
                    }

                    v236 = v230;
                    os_unfair_lock_lock((os_unfair_lock_t)v236 + 28);
                    v237 = v236[8];
                    os_unfair_lock_unlock((os_unfair_lock_t)v236 + 28);

                    v238 = v237;
                    *(_DWORD *)buf = 136447746;
                    *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                    v314 = 2082;
                    v315 = v219 + 168;
                    v316 = 2082;
                    v317 = v222;
                    v318 = 2082;
                    v319 = locka;
                    v320 = 2082;
                    v321 = v228;
                    v322 = 2082;
                    v323 = v231;
                    v324 = 2114;
                    v325 = v238;
                    _os_log_impl(&dword_182FBE000, v218, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] failed to clone from flow, moving directly to failed state", buf, 0x48u);

                  }
                }
                goto LABEL_317;
              }
LABEL_224:
              if ((nw_endpoint_handler_get_logging_disabled(v306) & 1) != 0)
                goto LABEL_269;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v169 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v169, OS_LOG_TYPE_ERROR))
              {
                v177 = nw_endpoint_handler_get_id_string(v306);
                v178 = nw_endpoint_handler_dry_run_string(v306);
                v179 = nw_endpoint_handler_copy_endpoint(v306);
                v180 = nw_endpoint_get_logging_description(v179);
                v181 = nw_endpoint_handler_state_string(v306);
                v182 = nw_endpoint_handler_mode_string(v306);
                v183 = nw_endpoint_handler_copy_current_path(v306);
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                v314 = 2082;
                v315 = (char *)v177;
                v316 = 2082;
                v317 = v178;
                v318 = 2082;
                v319 = (void *)v180;
                v320 = 2082;
                v321 = v181;
                v322 = 2082;
                v323 = v182;
                v324 = 2114;
                v325 = v183;
                _os_log_impl(&dword_182FBE000, v169, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to remove replay protocol from the stack on cancellation", buf, 0x48u);

              }
LABEL_220:

              goto LABEL_269;
            }
            v290 = (const char *)*((_QWORD *)v6 + 63);
            v291 = *((_QWORD *)v6 + 65);
            v82 = v306;
            v83 = (*((_BYTE *)v82 + 268) & 0x20) == 0;

            if (!v83)
            {
LABEL_247:
              v192 = v291;
              if (v291)
              {
                v193 = *(_QWORD *)(v291 + 32);
                if (v193)
                {
                  if (*(_UNKNOWN **)(v193 + 40) == &nw_protocol_ref_counted_handle)
                  {
                    v232 = *(_QWORD *)(v193 + 88);
                    if (v232)
                    {
                      v233 = v232 - 1;
                      *(_QWORD *)(v193 + 88) = v233;
                      if (!v233)
                      {
                        v234 = *(void (***)(_QWORD))(v193 + 64);
                        if (v234)
                        {
                          *(_QWORD *)(v193 + 64) = 0;
                          v234[2](v234);
                          _Block_release(v234);
                        }
                        if ((*(_BYTE *)(v193 + 72) & 1) != 0)
                        {
                          v235 = *(const void **)(v193 + 64);
                          if (v235)
                            _Block_release(v235);
                        }
                        free((void *)v193);
                        v192 = v291;
                      }
                    }
                  }
                  *(_QWORD *)(v192 + 32) = 0;
                }
              }
              if (!v290)
                goto LABEL_269;
              v194 = (void *)*((_QWORD *)v290 + 5);
              if (v194 == &nw_protocol_ref_counted_handle)
              {
                v196 = *((_QWORD *)v290 + 11);
                v195 = (uint64_t)v6 + 472;
                if (v196)
                  *((_QWORD *)v290 + 11) = v196 + 1;
                *(_QWORD *)type = v290;
                v312 |= 1u;
              }
              else
              {
                *(_QWORD *)type = v290;
                v312 &= ~1u;
                v195 = (uint64_t)v6 + 472;
              }
              v197 = (void *)*((_QWORD *)v6 + 64);
              if (v197 == &nw_protocol_ref_counted_handle)
              {
                v199 = *((_QWORD *)v6 + 70);
                if (v199)
                  *((_QWORD *)v6 + 70) = v199 + 1;
                v309 = v195;
                v198 = v310 | 1;
              }
              else
              {
                v309 = v195;
                v198 = v310 & 0xFE;
              }
              v310 = v198;
              v200 = *((_QWORD *)v290 + 3);
              if (v200)
              {
                v201 = *(void (**)(const char *))(v200 + 8);
                if (v201)
                {
                  v201(v290);
LABEL_265:
                  if (v197 == &nw_protocol_ref_counted_handle)
                    nw::release_if_needed<nw_protocol *>(&v309);
                  if (v194 == &nw_protocol_ref_counted_handle)
                    nw::release_if_needed<nw_protocol *>((uint64_t *)type);
                  goto LABEL_269;
                }
              }
              __nwlog_obj();
              v266 = (void *)objc_claimAutoreleasedReturnValue();
              v267 = (const char *)*((_QWORD *)v290 + 2);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
              if (!v267)
                v267 = "invalid";
              v314 = 2082;
              v315 = (char *)v267;
              v316 = 2048;
              v317 = v290;
              v268 = (char *)_os_log_send_and_compose_impl();

              v308 = OS_LOG_TYPE_ERROR;
              v307 = 0;
              if (__nwlog_fault(v268, &v308, &v307))
              {
                if (v308 == OS_LOG_TYPE_FAULT)
                {
                  __nwlog_obj();
                  v269 = objc_claimAutoreleasedReturnValue();
                  v270 = v308;
                  if (os_log_type_enabled(v269, v308))
                  {
                    v271 = (const char *)*((_QWORD *)v290 + 2);
                    if (!v271)
                      v271 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
                    v314 = 2082;
                    v315 = (char *)v271;
                    v316 = 2048;
                    v317 = v290;
                    _os_log_impl(&dword_182FBE000, v269, v270, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback", buf, 0x20u);
                  }
                }
                else if (v307)
                {
                  v272 = (char *)__nw_create_backtrace_string();
                  __nwlog_obj();
                  v269 = objc_claimAutoreleasedReturnValue();
                  v273 = v308;
                  v274 = os_log_type_enabled(v269, v308);
                  if (v272)
                  {
                    if (v274)
                    {
                      v275 = (const char *)*((_QWORD *)v290 + 2);
                      if (!v275)
                        v275 = "invalid";
                      *(_DWORD *)buf = 136446978;
                      *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
                      v314 = 2082;
                      v315 = (char *)v275;
                      v316 = 2048;
                      v317 = v290;
                      v318 = 2082;
                      v319 = v272;
                      _os_log_impl(&dword_182FBE000, v269, v273, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, dumping backtrace:%{public}s", buf, 0x2Au);
                    }

                    free(v272);
                    goto LABEL_414;
                  }
                  if (v274)
                  {
                    v281 = (const char *)*((_QWORD *)v290 + 2);
                    if (!v281)
                      v281 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
                    v314 = 2082;
                    v315 = (char *)v281;
                    v316 = 2048;
                    v317 = v290;
                    _os_log_impl(&dword_182FBE000, v269, v273, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, no backtrace", buf, 0x20u);
                  }
                }
                else
                {
                  __nwlog_obj();
                  v269 = objc_claimAutoreleasedReturnValue();
                  v279 = v308;
                  if (os_log_type_enabled(v269, v308))
                  {
                    v280 = (const char *)*((_QWORD *)v290 + 2);
                    if (!v280)
                      v280 = "invalid";
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "__nw_protocol_remove_input_handler";
                    v314 = 2082;
                    v315 = (char *)v280;
                    v316 = 2048;
                    v317 = v290;
                    _os_log_impl(&dword_182FBE000, v269, v279, "%{public}s protocol %{public}s (%p) has invalid remove_input_handler callback, backtrace limit exceeded", buf, 0x20u);
                  }
                }

              }
LABEL_414:
              if (v268)
                free(v268);
              goto LABEL_265;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            log = (id)gconnectionLogObj;
            v84 = v82;

            v85 = v84;
            v86 = (*((_BYTE *)v82 + 268) & 1) == 0;

            if (v86)
              v87 = "";
            else
              v87 = "dry-run ";
            v88 = nw_endpoint_handler_copy_endpoint(v85);
            v89 = nw_endpoint_get_logging_description(v88);
            v90 = v85;
            v91 = v90;
            v92 = v90[30];
            v286 = v89;
            v287 = v87;
            if (v92 > 5)
              v93 = "unknown-state";
            else
              v93 = off_1E149FC48[v92];
            v285 = v93;

            v94 = v91;
            v95 = v94;
            v96 = "path";
            switch(v94[29])
            {
              case 0u:
                break;
              case 1u:
                v96 = "resolver";
                break;
              case 2u:
                v96 = nw_endpoint_flow_mode_string(*((void **)v94 + 31));
                break;
              case 3u:
                v96 = "proxy";
                break;
              case 4u:
                v96 = "fallback";
                break;
              case 5u:
                v96 = "transform";
                break;
              default:
                v96 = "unknown-mode";
                break;
            }

            v105 = v95;
            os_unfair_lock_lock((os_unfair_lock_t)v105 + 28);
            v106 = *((id *)v105 + 8);
            v283 = (os_unfair_lock_s *)(v105 + 112);
            v107 = v91;
            os_unfair_lock_unlock((os_unfair_lock_t)v105 + 28);
            v284 = (id *)v105;

            v108 = v84 + 168;
            v109 = v106;
            *(_DWORD *)buf = 136447746;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
            v314 = 2082;
            v282 = v108;
            v315 = v108;
            v316 = 2082;
            v317 = v287;
            v318 = 2082;
            v319 = (void *)v286;
            v320 = 2082;
            v321 = v285;
            v322 = 2082;
            v323 = v96;
            v324 = 2114;
            v325 = v109;
            v110 = (const char *)_os_log_send_and_compose_impl();

            type[0] = OS_LOG_TYPE_ERROR;
            LOBYTE(v309) = 0;
            v111 = (char *)v110;
            if (!__nwlog_fault(v110, type, &v309))
            {
LABEL_245:
              if (v111)
                free(v111);
              goto LABEL_247;
            }
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v112 = (id)gconnectionLogObj;
              v113 = type[0];
              if (os_log_type_enabled(v112, type[0]))
              {
                loga = v112;
                v114 = v284;

                v115 = v114;
                LODWORD(v114) = (*((_BYTE *)v82 + 268) & 1) == 0;

                if ((_DWORD)v114)
                  v116 = "";
                else
                  v116 = "dry-run ";
                v117 = nw_endpoint_handler_copy_endpoint(v115);
                v118 = nw_endpoint_get_logging_description(v117);
                v119 = v115;
                v120 = v119;
                v121 = v107[30];
                v122 = v118;
                if (v121 > 5)
                  v123 = "unknown-state";
                else
                  v123 = off_1E149FC48[v121];
                v289 = v123;

                v143 = v120;
                v144 = v143;
                v145 = v95[29];
                v146 = "path";
                switch(v145)
                {
                  case 0u:
                    break;
                  case 1u:
                    v146 = "resolver";
                    break;
                  case 2u:
                    v146 = nw_endpoint_flow_mode_string(v143[31]);
                    break;
                  case 3u:
                    v146 = "proxy";
                    break;
                  case 4u:
                    v146 = "fallback";
                    break;
                  case 5u:
                    v146 = "transform";
                    break;
                  default:
                    v146 = "unknown-mode";
                    break;
                }

                v189 = v144;
                os_unfair_lock_lock(v283);
                v190 = v284[8];
                os_unfair_lock_unlock(v283);

                v191 = v190;
                *(_DWORD *)buf = 136447746;
                *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                v314 = 2082;
                v315 = v282;
                v316 = 2082;
                v317 = v116;
                v318 = 2082;
                v319 = (void *)v122;
                v320 = 2082;
                v321 = v289;
                v322 = 2082;
                v323 = v146;
                v324 = 2114;
                v325 = v191;
                _os_log_impl(&dword_182FBE000, loga, v113, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol not fully connected; calling remove_input_handler without re-attaching",
                  buf,
                  0x48u);

                v112 = loga;
              }

            }
            else
            {
              if ((_BYTE)v309)
              {
                v124 = __nw_create_backtrace_string();
                if (v124)
                {
                  v125 = (char *)v124;
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v126 = (id)gconnectionLogObj;
                  v127 = type[0];
                  logb = v126;
                  if (os_log_type_enabled(v126, type[0]))
                  {
                    v128 = nw_endpoint_handler_get_id_string(v284);
                    v129 = nw_endpoint_handler_dry_run_string(v284);
                    v288 = nw_endpoint_handler_copy_endpoint(v284);
                    v130 = nw_endpoint_get_logging_description(v288);
                    v131 = nw_endpoint_handler_state_string(v284);
                    v132 = nw_endpoint_handler_mode_string(v284);
                    v133 = nw_endpoint_handler_copy_current_path(v284);
                    *(_DWORD *)buf = 136448002;
                    *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                    v314 = 2082;
                    v315 = (char *)v128;
                    v316 = 2082;
                    v317 = v129;
                    v318 = 2082;
                    v319 = (void *)v130;
                    v320 = 2082;
                    v321 = v131;
                    v322 = 2082;
                    v323 = v132;
                    v324 = 2114;
                    v325 = v133;
                    v326 = 2082;
                    v327 = v125;
                    _os_log_impl(&dword_182FBE000, logb, v127, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol not fully connected; calling remove_input_handler without re-attaching, dumping backtrace:%{public}s",
                      buf,
                      0x52u);

                  }
                  free(v125);
                  goto LABEL_244;
                }
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v134 = (id)gconnectionLogObj;
                v147 = type[0];
                if (os_log_type_enabled(v134, type[0]))
                {
                  loge = v134;
                  v148 = nw_endpoint_handler_get_id_string(v284);
                  v149 = nw_endpoint_handler_dry_run_string(v284);
                  v150 = nw_endpoint_handler_copy_endpoint(v284);
                  v151 = nw_endpoint_get_logging_description(v150);
                  v152 = nw_endpoint_handler_state_string(v284);
                  v153 = nw_endpoint_handler_mode_string(v284);
                  v154 = nw_endpoint_handler_copy_current_path(v284);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                  v314 = 2082;
                  v315 = (char *)v148;
                  v316 = 2082;
                  v317 = v149;
                  v318 = 2082;
                  v319 = (void *)v151;
                  v320 = 2082;
                  v321 = v152;
                  v322 = 2082;
                  v323 = v153;
                  v324 = 2114;
                  v325 = v154;
                  _os_log_impl(&dword_182FBE000, loge, v147, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol not fully connected; calling remove_input_handler without re-attaching, no backtrace",
                    buf,
                    0x48u);

                  v134 = loge;
                }
              }
              else
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v134 = (id)gconnectionLogObj;
                v135 = type[0];
                if (os_log_type_enabled(v134, type[0]))
                {
                  logd = v134;
                  v136 = nw_endpoint_handler_get_id_string(v284);
                  v137 = nw_endpoint_handler_dry_run_string(v284);
                  v138 = nw_endpoint_handler_copy_endpoint(v284);
                  v139 = nw_endpoint_get_logging_description(v138);
                  v140 = nw_endpoint_handler_state_string(v284);
                  v141 = nw_endpoint_handler_mode_string(v284);
                  v142 = nw_endpoint_handler_copy_current_path(v284);
                  *(_DWORD *)buf = 136447746;
                  *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
                  v314 = 2082;
                  v315 = (char *)v136;
                  v316 = 2082;
                  v317 = v137;
                  v318 = 2082;
                  v319 = (void *)v139;
                  v320 = 2082;
                  v321 = v140;
                  v322 = 2082;
                  v323 = v141;
                  v324 = 2114;
                  v325 = v142;
                  _os_log_impl(&dword_182FBE000, logd, v135, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Replay protocol not fully connected; calling remove_input_handler without re-attaching, backtrace limit exceeded",
                    buf,
                    0x48u);

                  v134 = logd;
                }
              }

            }
LABEL_244:
            v111 = (char *)v110;
            goto LABEL_245;
          }
LABEL_36:
          if (!v7)
            goto LABEL_68;
          v33 = *((_QWORD *)v7 + 3);
          if (!v33)
            goto LABEL_68;
          v34 = *(uint64_t (**)(const char *, uint64_t, uint64_t *))(v33 + 224);
          if (!v34)
            goto LABEL_68;
          v309 = 0;
          v35 = (void *)*((_QWORD *)v7 + 5);
          if (v35 == &nw_protocol_ref_counted_handle)
          {
            v37 = *((_QWORD *)v7 + 11);
            if (v37)
              *((_QWORD *)v7 + 11) = v37 + 1;
            v36 = -1;
          }
          else
          {
            v36 = 0;
          }
          *(_QWORD *)buf = v7;
          buf[8] = v36;
          v38 = (void *)v34(v7, 1, &v309);
          if (v35 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
          if (v38)
          {
            if (v309 == 408)
            {
              v39 = (void *)*((_QWORD *)v6 + 99);
              if (v39)
              {
                free(v39);
                *((_QWORD *)v6 + 99) = 0;
              }
              *((_QWORD *)v6 + 99) = v38;
            }
            else
            {
              free(v38);
            }
          }
          v309 = 0;
          v40 = (void *)*((_QWORD *)v7 + 5);
          if (v40 == &nw_protocol_ref_counted_handle)
          {
            v42 = *((_QWORD *)v7 + 11);
            if (v42)
              *((_QWORD *)v7 + 11) = v42 + 1;
            v41 = -1;
          }
          else
          {
            v41 = 0;
          }
          *(_QWORD *)type = v7;
          v312 = v41;
          v43 = *((_QWORD *)v7 + 3);
          if (v43)
          {
            v44 = *(uint64_t (**)(const char *, uint64_t, uint64_t *))(v43 + 224);
            if (v44)
            {
              v45 = (void *)v44(v7, 2, &v309);
              if (v40 != &nw_protocol_ref_counted_handle)
                goto LABEL_63;
              goto LABEL_62;
            }
          }
          __nwlog_obj();
          v254 = (void *)objc_claimAutoreleasedReturnValue();
          v255 = (const char *)*((_QWORD *)v7 + 2);
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
          if (!v255)
            v255 = "invalid";
          v314 = 2082;
          v315 = (char *)v255;
          v316 = 2048;
          v317 = v7;
          v256 = (char *)_os_log_send_and_compose_impl();

          v308 = OS_LOG_TYPE_ERROR;
          v307 = 0;
          if (__nwlog_fault(v256, &v308, &v307))
          {
            if (v308 == OS_LOG_TYPE_FAULT)
            {
              __nwlog_obj();
              v257 = objc_claimAutoreleasedReturnValue();
              v258 = v308;
              if (os_log_type_enabled(v257, v308))
              {
                v259 = (const char *)*((_QWORD *)v7 + 2);
                if (!v259)
                  v259 = "invalid";
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
                v314 = 2082;
                v315 = (char *)v259;
                v316 = 2048;
                v317 = v7;
                _os_log_impl(&dword_182FBE000, v257, v258, "%{public}s protocol %{public}s (%p) has invalid copy_info callback", buf, 0x20u);
              }
LABEL_399:

              goto LABEL_400;
            }
            if (!v307)
            {
              __nwlog_obj();
              v257 = objc_claimAutoreleasedReturnValue();
              v276 = v308;
              if (os_log_type_enabled(v257, v308))
              {
                v277 = (const char *)*((_QWORD *)v7 + 2);
                if (!v277)
                  v277 = "invalid";
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
                v314 = 2082;
                v315 = (char *)v277;
                v316 = 2048;
                v317 = v7;
                _os_log_impl(&dword_182FBE000, v257, v276, "%{public}s protocol %{public}s (%p) has invalid copy_info callback, backtrace limit exceeded", buf, 0x20u);
              }
              goto LABEL_399;
            }
            v260 = (char *)__nw_create_backtrace_string();
            __nwlog_obj();
            v257 = objc_claimAutoreleasedReturnValue();
            v261 = v308;
            v262 = os_log_type_enabled(v257, v308);
            if (!v260)
            {
              if (v262)
              {
                v278 = (const char *)*((_QWORD *)v7 + 2);
                if (!v278)
                  v278 = "invalid";
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
                v314 = 2082;
                v315 = (char *)v278;
                v316 = 2048;
                v317 = v7;
                _os_log_impl(&dword_182FBE000, v257, v261, "%{public}s protocol %{public}s (%p) has invalid copy_info callback, no backtrace", buf, 0x20u);
              }
              goto LABEL_399;
            }
            if (v262)
            {
              v263 = (const char *)*((_QWORD *)v7 + 2);
              if (!v263)
                v263 = "invalid";
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "__nw_protocol_copy_info";
              v314 = 2082;
              v315 = (char *)v263;
              v316 = 2048;
              v317 = v7;
              v318 = 2082;
              v319 = v260;
              _os_log_impl(&dword_182FBE000, v257, v261, "%{public}s protocol %{public}s (%p) has invalid copy_info callback, dumping backtrace:%{public}s", buf, 0x2Au);
            }

            free(v260);
          }
LABEL_400:
          if (v256)
            free(v256);
          v45 = 0;
          if (v40 != &nw_protocol_ref_counted_handle)
          {
LABEL_63:
            if (v45)
            {
              if (v309 != 112)
              {
                free(v45);
                v47 = *((_BYTE *)v6 + 728);
                if ((v47 & 1) == 0)
                  goto LABEL_70;
                goto LABEL_69;
              }
              v46 = (void *)*((_QWORD *)v6 + 100);
              if (v46)
              {
                free(v46);
                *((_QWORD *)v6 + 100) = 0;
              }
              *((_QWORD *)v6 + 100) = v45;
            }
LABEL_68:
            v47 = *((_BYTE *)v6 + 728);
            if ((v47 & 1) == 0)
            {
LABEL_70:
              *((_QWORD *)v6 + 90) = 0;
              *((_BYTE *)v6 + 728) = v47 | 1;
              goto LABEL_71;
            }
LABEL_69:
            nw::release_if_needed<nw_protocol *>((uint64_t *)v6 + 90);
            v47 = *((_BYTE *)v6 + 728);
            goto LABEL_70;
          }
LABEL_62:
          nw::release_if_needed<nw_protocol *>((uint64_t *)type);
          goto LABEL_63;
        }
        v299 = (void *)v32;
        objc_storeStrong((id *)v6 + 2, (id)v32);
      }
      else
      {
        lock = (os_unfair_lock_s *)((char *)v6 + 880);
        os_unfair_lock_lock((os_unfair_lock_t)v6 + 220);
        v299 = 0;
      }
      if (!*((_QWORD *)v6 + 90))
        goto LABEL_71;
      goto LABEL_36;
    }
    __nwlog_obj();
    v244 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
    v245 = (char *)_os_log_send_and_compose_impl();

    type[0] = OS_LOG_TYPE_ERROR;
    LOBYTE(v309) = 0;
    if (__nwlog_fault(v245, type, &v309))
    {
      if (type[0] == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v246 = objc_claimAutoreleasedReturnValue();
        v247 = type[0];
        if (os_log_type_enabled(v246, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
          _os_log_impl(&dword_182FBE000, v246, v247, "%{public}s called with null endpoint_flow", buf, 0xCu);
        }
      }
      else if ((_BYTE)v309)
      {
        v251 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v246 = objc_claimAutoreleasedReturnValue();
        v252 = type[0];
        v253 = os_log_type_enabled(v246, type[0]);
        if (v251)
        {
          if (v253)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
            v314 = 2082;
            v315 = v251;
            _os_log_impl(&dword_182FBE000, v246, v252, "%{public}s called with null endpoint_flow, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v251);
          goto LABEL_381;
        }
        if (v253)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
          _os_log_impl(&dword_182FBE000, v246, v252, "%{public}s called with null endpoint_flow, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v246 = objc_claimAutoreleasedReturnValue();
        v265 = type[0];
        if (os_log_type_enabled(v246, type[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
          _os_log_impl(&dword_182FBE000, v246, v265, "%{public}s called with null endpoint_flow, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_381:
    if (v245)
      free(v245);
    goto LABEL_320;
  }
  __nwlog_obj();
  v240 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
  v241 = (char *)_os_log_send_and_compose_impl();

  type[0] = OS_LOG_TYPE_ERROR;
  LOBYTE(v309) = 0;
  if (__nwlog_fault(v241, type, &v309))
  {
    if (type[0] == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v242 = objc_claimAutoreleasedReturnValue();
      v243 = type[0];
      if (os_log_type_enabled(v242, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
        _os_log_impl(&dword_182FBE000, v242, v243, "%{public}s called with null handler", buf, 0xCu);
      }
    }
    else if ((_BYTE)v309)
    {
      v248 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v242 = objc_claimAutoreleasedReturnValue();
      v249 = type[0];
      v250 = os_log_type_enabled(v242, type[0]);
      if (v248)
      {
        if (v250)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
          v314 = 2082;
          v315 = v248;
          _os_log_impl(&dword_182FBE000, v242, v249, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v248);
        goto LABEL_376;
      }
      if (v250)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
        _os_log_impl(&dword_182FBE000, v242, v249, "%{public}s called with null handler, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v242 = objc_claimAutoreleasedReturnValue();
      v264 = type[0];
      if (os_log_type_enabled(v242, type[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_failed_with_error";
        _os_log_impl(&dword_182FBE000, v242, v264, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_376:
  if (v241)
    free(v241);
LABEL_321:

}

void sub_1830C47C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,void *a31)
{
  void *v31;
  void *v32;
  void *v33;

  _Unwind_Resume(a1);
}

void nw_endpoint_flow_update_connected_metadata(NWConcrete_nw_endpoint_handler *a1, int a2)
{
  NWConcrete_nw_endpoint_handler *v3;
  NWConcrete_nw_endpoint_handler *v4;
  unsigned int mode;
  NWConcrete_nw_endpoint_handler *v6;
  OS_nw_parameters *v7;
  id v8;
  NWConcrete_nw_endpoint_mode_handler *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t (*v12)(void);
  void *v13;
  char v14;
  NSObject *v15;
  NWConcrete_nw_endpoint_handler *v16;
  char *id_str;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  char *backtrace_string;
  os_log_type_t v27;
  _BOOL4 v28;
  os_log_type_t v29;
  const char *v30;
  char v31;
  os_log_type_t type;
  _BYTE buf[12];
  __int16 v34;
  char *v35;
  __int16 v36;
  const char *v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v22 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
    v23 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v31 = 0;
    if (__nwlog_fault(v23, &type, &v31))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v25 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v24, v25, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v31)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v27 = type;
        v28 = os_log_type_enabled(v24, type);
        if (backtrace_string)
        {
          if (v28)
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
            v34 = 2082;
            v35 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_35;
        }
        if (v28)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v24, v27, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v24 = objc_claimAutoreleasedReturnValue();
        v29 = type;
        if (os_log_type_enabled(v24, type))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v24, v29, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_35:
    if (v23)
      free(v23);
    mode = 0;
    goto LABEL_38;
  }
  mode = v3->mode;

  if (mode == 2)
  {
    v6 = v4;
    v7 = v6->parameters;

    v8 = nw_parameters_copy_context(v7);
    nw_context_assert_queue(v8);

    v9 = nw_endpoint_handler_copy_flow(v6);
    v10 = (_QWORD *)*((_QWORD *)v9 + 51);
    if (v10)
    {
      v11 = v10[3];
      if (v11)
      {
        v12 = *(uint64_t (**)(void))(v11 + 224);
        if (v12)
        {
          v13 = (void *)v10[5];
          if (v13 == &nw_protocol_ref_counted_handle)
          {
            v18 = v10[11];
            if (v18)
              v10[11] = v18 + 1;
            v14 = -1;
          }
          else
          {
            v14 = 0;
          }
          *(_QWORD *)buf = v10;
          buf[8] = v14;
          v19 = v12();
          if (v13 == &nw_protocol_ref_counted_handle)
            nw::release_if_needed<nw_protocol *>((uint64_t *)buf);
          os_unfair_lock_lock((os_unfair_lock_t)v9 + 220);
          v20 = 1048;
          if (a2)
            v20 = 1056;
          v21 = *(void **)((char *)v9 + v20);
          *(_QWORD *)((char *)v9 + v20) = v19;

          os_unfair_lock_unlock((os_unfair_lock_t)v9 + 220);
        }
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v15 = (id)gLogObj;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        v16 = v6;
        id_str = v16->id_str;

        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_endpoint_flow_update_connected_metadata";
        v34 = 2082;
        v35 = id_str;
        _os_log_impl(&dword_182FBE000, v15, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s] could not find valid output protocol", buf, 0x16u);
      }

    }
    goto LABEL_43;
  }
LABEL_38:
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v9 = (NWConcrete_nw_endpoint_mode_handler *)(id)gLogObj;
  if (os_log_type_enabled((os_log_t)v9, OS_LOG_TYPE_DEFAULT))
  {
    if (mode > 5)
      v30 = "unknown-mode";
    else
      v30 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    *(_QWORD *)&buf[4] = "nw_endpoint_flow_update_connected_metadata";
    v34 = 2082;
    v35 = (char *)v30;
    v36 = 2082;
    v37 = "flow";
    _os_log_impl(&dword_182FBE000, (os_log_t)v9, OS_LOG_TYPE_DEFAULT, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
  }
LABEL_43:

}

uint64_t nw_protocol_default_copy_info(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  char *v5;
  NSObject *v6;
  os_log_type_t v7;
  const char *v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_protocol_default_copy_info";
    v5 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v5, &type, &v11))
      goto LABEL_20;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_copy_info";
      v8 = "%{public}s called with null protocol";
    }
    else if (v11)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v6 = __nwlog_obj();
      v7 = type;
      v10 = os_log_type_enabled(v6, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_protocol_default_copy_info";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v6, v7, "%{public}s called with null protocol, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_20;
      }
      if (!v10)
      {
LABEL_20:
        if (v5)
          free(v5);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_copy_info";
      v8 = "%{public}s called with null protocol, no backtrace";
    }
    else
    {
      v6 = __nwlog_obj();
      v7 = type;
      if (!os_log_type_enabled(v6, type))
        goto LABEL_20;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_protocol_default_copy_info";
      v8 = "%{public}s called with null protocol, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v6, v7, v8, buf, 0xCu);
    goto LABEL_20;
  }
  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      v3 = *(uint64_t (**)(void))(v2 + 224);
      if (v3)
        return v3();
    }
  }
  return 0;
}

uint64_t nw_socket_copy_info(uint64_t a1, int a2, _QWORD *a3)
{
  uint64_t v4;
  int v6;
  int v7;
  NSObject *v8;
  NSObject *v9;
  NSObject *v10;
  const char *v11;
  int v12;
  int v13;
  NSObject *v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  void *v18;
  uint64_t result;
  id v20;
  NWConcrete_nw_protocol_establishment_report *v21;
  int v22;
  NSObject *v23;
  NSObject *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  int v29;
  NSObject *v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  const char *v34;
  int v35;
  int v36;
  NSObject *v37;
  char *v38;
  char *v39;
  NSObject *v40;
  os_log_type_t v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int8x16_t v46;
  _QWORD *v47;
  unsigned int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  const char *v55;
  const char *v56;
  _BOOL4 v57;
  const char *v58;
  char *v59;
  char *v60;
  _BOOL4 v61;
  const char *v62;
  NSObject *v63;
  os_log_type_t v64;
  const char *v65;
  char *v66;
  _BOOL4 v67;
  char *backtrace_string;
  _BOOL4 v69;
  const char *v70;
  _BOOL4 v71;
  _BOOL4 v72;
  _BOOL4 v73;
  NSObject *v74;
  void *v75;
  NSObject *v76;
  void *v77;
  NSObject *v78;
  void *v79;
  NSObject *v80;
  void *v81;
  char v82;
  os_log_type_t type;
  socklen_t v84;
  socklen_t v85[2];
  _BYTE v86[12];
  __int16 v87;
  _BYTE v88[14];
  uint8_t buf[32];
  __int128 v90;
  __int128 v91;
  _OWORD v92[2];
  _DWORD v93[12];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;

  v111 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    if (*(_UNKNOWN **)(a1 + 40) == &nw_protocol_ref_counted_handle)
    {
      v4 = 0;
      switch(a2)
      {
        case 1:
          if (*(_DWORD *)(a1 + 296) != 2 || (v6 = *(unsigned __int8 *)(a1 + 432), v6 != 30) && v6 != 2)
          {
            v4 = 0;
            if ((*(_WORD *)(a1 + 429) & 0x80) != 0 || !gLogDatapath)
              return v4;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v25 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_socket_copy_info";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = a1 + 436;
              v17 = "%{public}s %{public}s ignoring tcp_info request for non-TCP socket";
              goto LABEL_72;
            }
            return 0;
          }
          *(_DWORD *)v86 = 408;
          if (((*(unsigned __int16 *)(a1 + 429) | (*(unsigned __int8 *)(a1 + 431) << 16)) & 0x20000) != 0)
          {
            if ((*(_WORD *)(a1 + 429) & 0x80) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v16 = gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_copy_info";
                *(_WORD *)&buf[12] = 2082;
                *(_QWORD *)&buf[14] = a1 + 436;
                v17 = "%{public}s %{public}s Can't get TCP_INFO on a multipath socket";
                goto LABEL_106;
              }
            }
            return 0;
          }
          v4 = (uint64_t)malloc_type_malloc(0x198uLL, 0xF2B69DE5uLL);
          if (!v4)
          {
            v78 = __nwlog_obj();
            os_log_type_enabled(v78, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "strict_malloc";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 408;
            v79 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v79);
            if ((_DWORD)result)
              goto LABEL_247;
            free(v79);
          }
          if (!getsockopt(*(_DWORD *)(a1 + 292), 6, 512, (void *)v4, (socklen_t *)v86))
            goto LABEL_122;
          v7 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v8 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            *(_WORD *)&buf[12] = 2080;
            *(_QWORD *)&buf[14] = a1 + 436;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&buf[24] = v7;
            _os_log_impl(&dword_182FBE000, v8, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt TCP_INFO failed %{darwin.errno}d", buf, 0x1Cu);
          }
          v9 = __nwlog_obj();
          v10 = v9;
          if (v7 == 102)
          {
            if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
              goto LABEL_211;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = 102;
            v11 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
            goto LABEL_34;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_socket_copy_info";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v7;
          v62 = (const char *)_os_log_send_and_compose_impl();
          LOBYTE(v85[0]) = 16;
          LOBYTE(v84) = 0;
          if (!__nwlog_fault(v62, v85, &v84))
            goto LABEL_208;
          if (LOBYTE(v85[0]) == 17)
          {
            v63 = __nwlog_obj();
            v64 = v85[0];
            if (!os_log_type_enabled(v63, v85[0]))
              goto LABEL_208;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v7;
            v65 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
            goto LABEL_207;
          }
          if ((_BYTE)v84)
          {
            backtrace_string = (char *)__nw_create_backtrace_string();
            v63 = __nwlog_obj();
            v64 = v85[0];
            v71 = os_log_type_enabled(v63, v85[0]);
            if (backtrace_string)
            {
              if (!v71)
                goto LABEL_176;
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_socket_copy_info";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v7;
              *(_WORD *)&buf[18] = 2082;
              *(_QWORD *)&buf[20] = backtrace_string;
              v70 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s";
              goto LABEL_175;
            }
            if (!v71)
              goto LABEL_208;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v7;
            v65 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, no backtrace";
          }
          else
          {
            v63 = __nwlog_obj();
            v64 = v85[0];
            if (!os_log_type_enabled(v63, v85[0]))
              goto LABEL_208;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v7;
            v65 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, backtrace limit exceeded";
          }
          goto LABEL_207;
        case 2:
          if (*(_DWORD *)(a1 + 296) == 2)
          {
            v12 = *(unsigned __int8 *)(a1 + 432);
            if (v12 == 30 || v12 == 2)
            {
              *(_DWORD *)v86 = 112;
              if (((*(unsigned __int16 *)(a1 + 429) | (*(unsigned __int8 *)(a1 + 431) << 16)) & 0x20000) != 0)
              {
                if ((*(_WORD *)(a1 + 429) & 0x80) == 0)
                {
                  if (__nwlog_connection_log::onceToken != -1)
                    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                  v16 = gconnectionLogObj;
                  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)buf = 136446466;
                    *(_QWORD *)&buf[4] = "nw_socket_copy_info";
                    *(_WORD *)&buf[12] = 2082;
                    *(_QWORD *)&buf[14] = a1 + 436;
                    v17 = "%{public}s %{public}s Can't get TCP_CONNECTION_INFO on a multipath socket";
                    goto LABEL_106;
                  }
                }
                return 0;
              }
              v4 = (uint64_t)malloc_type_malloc(0x70uLL, 0xF2B69DE5uLL);
              if (!v4)
              {
                v80 = __nwlog_obj();
                os_log_type_enabled(v80, OS_LOG_TYPE_ERROR);
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "strict_malloc";
                *(_WORD *)&buf[12] = 2048;
                *(_QWORD *)&buf[14] = 112;
                v81 = (void *)_os_log_send_and_compose_impl();
                result = __nwlog_abort((uint64_t)v81);
                if ((_DWORD)result)
                  goto LABEL_247;
                free(v81);
              }
              if (!getsockopt(*(_DWORD *)(a1 + 292), 6, 262, (void *)v4, (socklen_t *)v86))
              {
LABEL_122:
                if (a3)
                  *a3 = *(unsigned int *)v86;
                return v4;
              }
              v13 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v14 = gconnectionLogObj;
              if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446722;
                *(_QWORD *)&buf[4] = "nw_socket_copy_info";
                *(_WORD *)&buf[12] = 2080;
                *(_QWORD *)&buf[14] = a1 + 436;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = v13;
                _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt TCP_CONNECTION_INFO failed %{darwin.errno}d", buf, 0x1Cu);
              }
              v15 = __nwlog_obj();
              v10 = v15;
              if (v13 == 102)
              {
                if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_socket_copy_info";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = 102;
                  v11 = "%{public}s getsockopt TCP_CONNECTION_INFO failed %{darwin.errno}d";
LABEL_34:
                  _os_log_impl(&dword_182FBE000, v10, OS_LOG_TYPE_ERROR, v11, buf, 0x12u);
                }
                goto LABEL_211;
              }
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_socket_copy_info";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v13;
              v62 = (const char *)_os_log_send_and_compose_impl();
              LOBYTE(v85[0]) = 16;
              LOBYTE(v84) = 0;
              if (!__nwlog_fault(v62, v85, &v84))
                goto LABEL_208;
              if (LOBYTE(v85[0]) == 17)
              {
                v63 = __nwlog_obj();
                v64 = v85[0];
                if (os_log_type_enabled(v63, v85[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_socket_copy_info";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v13;
                  v65 = "%{public}s getsockopt TCP_CONNECTION_INFO failed %{darwin.errno}d";
LABEL_207:
                  _os_log_impl(&dword_182FBE000, v63, v64, v65, buf, 0x12u);
                }
              }
              else if ((_BYTE)v84)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                v63 = __nwlog_obj();
                v64 = v85[0];
                v69 = os_log_type_enabled(v63, v85[0]);
                if (backtrace_string)
                {
                  if (v69)
                  {
                    *(_DWORD *)buf = 136446722;
                    *(_QWORD *)&buf[4] = "nw_socket_copy_info";
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v13;
                    *(_WORD *)&buf[18] = 2082;
                    *(_QWORD *)&buf[20] = backtrace_string;
                    v70 = "%{public}s getsockopt TCP_CONNECTION_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s";
LABEL_175:
                    _os_log_impl(&dword_182FBE000, v63, v64, v70, buf, 0x1Cu);
                  }
LABEL_176:
                  free(backtrace_string);
                  goto LABEL_208;
                }
                if (v69)
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_socket_copy_info";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v13;
                  v65 = "%{public}s getsockopt TCP_CONNECTION_INFO failed %{darwin.errno}d, no backtrace";
                  goto LABEL_207;
                }
              }
              else
              {
                v63 = __nwlog_obj();
                v64 = v85[0];
                if (os_log_type_enabled(v63, v85[0]))
                {
                  *(_DWORD *)buf = 136446466;
                  *(_QWORD *)&buf[4] = "nw_socket_copy_info";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v13;
                  v65 = "%{public}s getsockopt TCP_CONNECTION_INFO failed %{darwin.errno}d, backtrace limit exceeded";
                  goto LABEL_207;
                }
              }
LABEL_208:
              if (!v62)
                goto LABEL_211;
              v59 = (char *)v62;
              goto LABEL_210;
            }
          }
          v4 = 0;
          if ((*(_WORD *)(a1 + 429) & 0x80) != 0 || !gLogDatapath)
            return v4;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v25 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 436;
            v17 = "%{public}s %{public}s ignoring tcp_connection_info request for non-TCP socket";
LABEL_72:
            v26 = v25;
            v27 = OS_LOG_TYPE_DEBUG;
            goto LABEL_107;
          }
          return 0;
        case 3:
          *(_QWORD *)v86 = 0;
          if (*(_DWORD *)(a1 + 296) != 2)
          {
            if ((*(_WORD *)(a1 + 429) & 0x80) != 0)
              return 0;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v16 = gconnectionLogObj;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
              return 0;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 436;
            v17 = "%{public}s %{public}s Can't get MPTCP_INFO on a non-stream socket";
            goto LABEL_106;
          }
          if (((*(unsigned __int16 *)(a1 + 429) | (*(unsigned __int8 *)(a1 + 431) << 16)) & 0x20000) == 0)
          {
            if ((*(_WORD *)(a1 + 429) & 0x80) != 0)
              return 0;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v16 = gconnectionLogObj;
            if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
              return 0;
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            *(_WORD *)&buf[12] = 2082;
            *(_QWORD *)&buf[14] = a1 + 436;
            v17 = "%{public}s %{public}s Can't get MPTCP_INFO on a TCP socket";
LABEL_106:
            v26 = v16;
            v27 = OS_LOG_TYPE_ERROR;
LABEL_107:
            _os_log_impl(&dword_182FBE000, v26, v27, v17, buf, 0x16u);
            return 0;
          }
          if (!copymptcpinfo(*(_DWORD *)(a1 + 292), v86))
          {
            if (a3)
              *a3 = 24;
            return *(_QWORD *)v86;
          }
          __nwlog_obj();
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_socket_copy_info";
          v4 = _os_log_send_and_compose_impl();
          LOBYTE(v85[0]) = 16;
          LOBYTE(v84) = 0;
          if (!__nwlog_fault((const char *)v4, v85, &v84))
            goto LABEL_211;
          if (LOBYTE(v85[0]) == 17)
          {
            v32 = __nwlog_obj();
            v33 = v85[0];
            if (!os_log_type_enabled(v32, v85[0]))
              goto LABEL_211;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            v34 = "%{public}s copymptcpinfo failed";
            goto LABEL_181;
          }
          if ((_BYTE)v84)
          {
            v56 = __nw_create_backtrace_string();
            v32 = __nwlog_obj();
            v33 = v85[0];
            v57 = os_log_type_enabled(v32, v85[0]);
            if (v56)
            {
              if (!v57)
                goto LABEL_145;
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_socket_copy_info";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = v56;
              v58 = "%{public}s copymptcpinfo failed, dumping backtrace:%{public}s";
              goto LABEL_144;
            }
            if (!v57)
              goto LABEL_211;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            v34 = "%{public}s copymptcpinfo failed, no backtrace";
          }
          else
          {
            v32 = __nwlog_obj();
            v33 = v85[0];
            if (!os_log_type_enabled(v32, v85[0]))
              goto LABEL_211;
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_socket_copy_info";
            v34 = "%{public}s copymptcpinfo failed, backtrace limit exceeded";
          }
          goto LABEL_181;
        case 4:
          return v4;
        case 5:
          if (*(_DWORD *)(a1 + 296) == 1)
          {
            v4 = (uint64_t)malloc_type_calloc(1uLL, 0xB8uLL, 0xEAFB8F1AuLL);
            if (v4)
            {
LABEL_44:
              *(_QWORD *)(v4 + 48) = *(_QWORD *)(a1 + 96);
              *(_QWORD *)(v4 + 72) = *(_QWORD *)(a1 + 104);
              *(_QWORD *)(v4 + 8) = *(_QWORD *)(a1 + 112);
              *(_QWORD *)(v4 + 40) = *(_QWORD *)(a1 + 120);
              goto LABEL_197;
            }
            v74 = __nwlog_obj();
            os_log_type_enabled(v74, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 1;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 184;
            v75 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v75);
            if (!(_DWORD)result)
            {
              free(v75);
              goto LABEL_44;
            }
LABEL_247:
            __break(1u);
            return result;
          }
          *(_QWORD *)v85 = 0;
          if (((*(unsigned __int16 *)(a1 + 429) | (*(unsigned __int8 *)(a1 + 431) << 16)) & 0x20000) != 0
            && !copymptcpinfo(*(_DWORD *)(a1 + 292), v85))
          {
            v4 = nw_calloc_type<nw_data_transfer_snapshot>(*(unsigned int *)(*(_QWORD *)v85 + 16));
            v47 = *(_QWORD **)v85;
            v48 = *(_DWORD *)(*(_QWORD *)v85 + 16);
            if (v48)
            {
              v49 = *(_QWORD *)(*(_QWORD *)v85 + 8);
              v50 = (_QWORD *)(v4 + 72);
              v51 = *(unsigned int *)(*(_QWORD *)v85 + 16);
              do
              {
                if (*(_QWORD *)v49)
                {
                  v52 = *(_QWORD *)(*(_QWORD *)v49 + 32);
                  *(v50 - 9) = *(int *)(v52 + 60);
                  *v50 = *(_QWORD *)(v52 + 76);
                  *(_OWORD *)(v50 - 3) = *(_OWORD *)(v52 + 108);
                  *(v50 - 1) = *(_QWORD *)(v52 + 124);
                  v50[1] = *(_QWORD *)(v52 + 84);
                  *(v50 - 8) = *(_QWORD *)(v52 + 100);
                  *(v50 - 4) = *(_QWORD *)(v52 + 68);
                  v50[6] = *(unsigned int *)(v52 + 24);
                  v50[7] = *(unsigned int *)(v52 + 32);
                  v50[8] = *(unsigned int *)(v52 + 20);
                  v50[9] = *(unsigned int *)(v52 + 28);
                }
                v49 += 8;
                v50 += 23;
                --v51;
              }
              while (v51);
            }
            if (a3)
              *a3 = 184 * v48;
            freemptcpinfo(v47);
            return v4;
          }
          v28 = *(unsigned __int8 *)(a1 + 432);
          if (v28 != 30 && v28 != 2)
          {
            v4 = (uint64_t)malloc_type_calloc(1uLL, 0xB8uLL, 0xEAFB8F1AuLL);
            if (!v4)
            {
              v37 = __nwlog_obj();
              os_log_type_enabled(v37, OS_LOG_TYPE_ERROR);
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "strict_calloc";
              *(_WORD *)&buf[12] = 2048;
              *(_QWORD *)&buf[14] = 1;
              *(_WORD *)&buf[22] = 2048;
              *(_QWORD *)&buf[24] = 184;
              v38 = (char *)_os_log_send_and_compose_impl();
              result = __nwlog_abort((uint64_t)v38);
              if ((_DWORD)result)
                goto LABEL_247;
              goto LABEL_195;
            }
LABEL_196:
            *(_QWORD *)(v4 + 48) = *(_QWORD *)(a1 + 96);
            *(_QWORD *)(v4 + 72) = *(_QWORD *)(a1 + 104);
LABEL_197:
            if (a3)
              *a3 = 184;
            return v4;
          }
          v4 = (uint64_t)malloc_type_calloc(1uLL, 0xB8uLL, 0xEAFB8F1AuLL);
          if (!v4)
          {
            v76 = __nwlog_obj();
            os_log_type_enabled(v76, OS_LOG_TYPE_ERROR);
            *(_DWORD *)buf = 136446722;
            *(_QWORD *)&buf[4] = "strict_calloc";
            *(_WORD *)&buf[12] = 2048;
            *(_QWORD *)&buf[14] = 1;
            *(_WORD *)&buf[22] = 2048;
            *(_QWORD *)&buf[24] = 184;
            v77 = (void *)_os_log_send_and_compose_impl();
            result = __nwlog_abort((uint64_t)v77);
            if ((_DWORD)result)
              goto LABEL_247;
            free(v77);
          }
          v110 = 0;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          memset(v93, 0, sizeof(v93));
          memset(v92, 0, sizeof(v92));
          v90 = 0u;
          v91 = 0u;
          memset(buf, 0, sizeof(buf));
          v84 = 408;
          if (!getsockopt(*(_DWORD *)(a1 + 292), 6, 512, buf, &v84))
          {
            *(_QWORD *)(v4 + 72) = *(_QWORD *)((char *)v92 + 12);
            *(_OWORD *)(v4 + 48) = *(_OWORD *)&v93[3];
            *(_QWORD *)(v4 + 64) = *(_QWORD *)&v93[7];
            *(_QWORD *)(v4 + 80) = *(_QWORD *)((char *)&v92[1] + 4);
            *(_QWORD *)(v4 + 8) = *(_QWORD *)&v93[1];
            *(_QWORD *)(v4 + 40) = *(_QWORD *)((char *)v92 + 4);
            v43 = *(unsigned int *)&buf[20];
            v45 = *(unsigned int *)&buf[28];
            v44 = v90;
            *(_QWORD *)(v4 + 120) = *(unsigned int *)&buf[24];
            *(_QWORD *)(v4 + 128) = v44;
            *(_QWORD *)(v4 + 136) = v43;
            *(_QWORD *)(v4 + 144) = v45;
            v46.i64[0] = DWORD1(v90);
            v46.i64[1] = DWORD2(v90);
            *(int8x16_t *)(v4 + 152) = vextq_s8(v46, v46, 8uLL);
            *(_OWORD *)(v4 + 88) = v104;
            *(_OWORD *)(v4 + 104) = v105;
            goto LABEL_197;
          }
          v29 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v30 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v86 = 136446722;
            *(_QWORD *)&v86[4] = "nw_socket_copy_info";
            v87 = 2080;
            *(_QWORD *)v88 = a1 + 436;
            *(_WORD *)&v88[8] = 1024;
            *(_DWORD *)&v88[10] = v29;
            _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt TCP_INFO failed %{darwin.errno}d", v86, 0x1Cu);
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v31 = gLogObj;
          if (v29 == 102)
          {
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v86 = 136446466;
              *(_QWORD *)&v86[4] = "nw_socket_copy_info";
              v87 = 1024;
              *(_DWORD *)v88 = 102;
              _os_log_impl(&dword_182FBE000, v31, OS_LOG_TYPE_ERROR, "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d", v86, 0x12u);
            }
            goto LABEL_196;
          }
          *(_DWORD *)v86 = 136446466;
          *(_QWORD *)&v86[4] = "nw_socket_copy_info";
          v87 = 1024;
          *(_DWORD *)v88 = v29;
          v38 = (char *)_os_log_send_and_compose_impl();
          type = OS_LOG_TYPE_ERROR;
          v82 = 0;
          if (!__nwlog_fault(v38, &type, &v82))
            goto LABEL_194;
          if (type == OS_LOG_TYPE_FAULT)
          {
            v53 = __nwlog_obj();
            v54 = type;
            if (!os_log_type_enabled(v53, type))
              goto LABEL_194;
            *(_DWORD *)v86 = 136446466;
            *(_QWORD *)&v86[4] = "nw_socket_copy_info";
            v87 = 1024;
            *(_DWORD *)v88 = v29;
            v55 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
          }
          else if (v82)
          {
            v66 = (char *)__nw_create_backtrace_string();
            v53 = __nwlog_obj();
            v54 = type;
            v67 = os_log_type_enabled(v53, type);
            if (v66)
            {
              if (v67)
              {
                *(_DWORD *)v86 = 136446722;
                *(_QWORD *)&v86[4] = "nw_socket_copy_info";
                v87 = 1024;
                *(_DWORD *)v88 = v29;
                *(_WORD *)&v88[4] = 2082;
                *(_QWORD *)&v88[6] = v66;
                _os_log_impl(&dword_182FBE000, v53, v54, "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s", v86, 0x1Cu);
              }
              free(v66);
              if (!v38)
                goto LABEL_196;
              goto LABEL_195;
            }
            if (!v67)
            {
LABEL_194:
              if (v38)
              {
LABEL_195:
                free(v38);
                goto LABEL_196;
              }
              goto LABEL_196;
            }
            *(_DWORD *)v86 = 136446466;
            *(_QWORD *)&v86[4] = "nw_socket_copy_info";
            v87 = 1024;
            *(_DWORD *)v88 = v29;
            v55 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, no backtrace";
          }
          else
          {
            v53 = __nwlog_obj();
            v54 = type;
            if (!os_log_type_enabled(v53, type))
              goto LABEL_194;
            *(_DWORD *)v86 = 136446466;
            *(_QWORD *)&v86[4] = "nw_socket_copy_info";
            v87 = 1024;
            *(_DWORD *)v88 = v29;
            v55 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, backtrace limit exceeded";
          }
          _os_log_impl(&dword_182FBE000, v53, v54, v55, v86, 0x12u);
          goto LABEL_194;
        case 6:
          v18 = *(void **)(a1 + 160);
          if (!v18)
            return 0;
          return (uint64_t)os_retain(v18);
        default:
          if (a2 != 254)
          {
            if (a2 != 255)
              return v4;
            if (*(_QWORD *)(a1 + 152))
            {
              v4 = nw_array_create();
              nw_array_append(v4, *(void **)(a1 + 152));
              return v4;
            }
            return 0;
          }
          if (*(_DWORD *)(a1 + 296) != 2)
            return 0;
          if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
            dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
          v20 = (id)g_tcp_definition;
          v21 = nw_protocol_establishment_report_create(v20, *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 136));
          if (v20)
            os_release(v20);
          v110 = 0;
          v108 = 0u;
          v109 = 0u;
          v106 = 0u;
          v107 = 0u;
          v104 = 0u;
          v105 = 0u;
          v102 = 0u;
          v103 = 0u;
          v100 = 0u;
          v101 = 0u;
          v98 = 0u;
          v99 = 0u;
          v96 = 0u;
          v97 = 0u;
          v94 = 0u;
          v95 = 0u;
          memset(v93, 0, sizeof(v93));
          memset(v92, 0, sizeof(v92));
          v90 = 0u;
          v91 = 0u;
          memset(buf, 0, sizeof(buf));
          v85[0] = 408;
          if (!getsockopt(*(_DWORD *)(a1 + 292), 6, 512, buf, v85))
          {
            if ((DWORD2(v103) - 2) >= 8)
              v35 = 1;
            else
              v35 = DWORD2(v103);
            if ((HIDWORD(v103) - 2) >= 9)
              v36 = 1;
            else
              v36 = HIDWORD(v103);
            nw_protocol_establishment_report_set_client_accurate_ecn_state(v21, v35);
            nw_protocol_establishment_report_set_server_accurate_ecn_state(v21, v36);
LABEL_189:
            v4 = nw_array_create();
            nw_array_append(v4, v21);
            if (v21)
              os_release(v21);
            return v4;
          }
          v22 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v23 = gconnectionLogObj;
          if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)v86 = 136446722;
            *(_QWORD *)&v86[4] = "nw_socket_copy_info";
            v87 = 2080;
            *(_QWORD *)v88 = a1 + 436;
            *(_WORD *)&v88[8] = 1024;
            *(_DWORD *)&v88[10] = v22;
            _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_ERROR, "%{public}s %s getsockopt TCP_INFO failed %{darwin.errno}d", v86, 0x1Cu);
          }
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v24 = gLogObj;
          if (v22 == 102)
          {
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)v86 = 136446466;
              *(_QWORD *)&v86[4] = "nw_socket_copy_info";
              v87 = 1024;
              *(_DWORD *)v88 = 102;
              _os_log_impl(&dword_182FBE000, v24, OS_LOG_TYPE_ERROR, "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d", v86, 0x12u);
            }
            goto LABEL_189;
          }
          *(_DWORD *)v86 = 136446466;
          *(_QWORD *)&v86[4] = "nw_socket_copy_info";
          v87 = 1024;
          *(_DWORD *)v88 = v22;
          v39 = (char *)_os_log_send_and_compose_impl();
          LOBYTE(v84) = 16;
          type = OS_LOG_TYPE_DEFAULT;
          if (!__nwlog_fault(v39, &v84, &type))
            goto LABEL_187;
          if (v84 == 17)
          {
            v40 = __nwlog_obj();
            v41 = v84;
            if (!os_log_type_enabled(v40, (os_log_type_t)v84))
              goto LABEL_187;
            *(_DWORD *)v86 = 136446466;
            *(_QWORD *)&v86[4] = "nw_socket_copy_info";
            v87 = 1024;
            *(_DWORD *)v88 = v22;
            v42 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d";
          }
          else if (type)
          {
            v60 = (char *)__nw_create_backtrace_string();
            v40 = __nwlog_obj();
            v41 = v84;
            v61 = os_log_type_enabled(v40, (os_log_type_t)v84);
            if (v60)
            {
              if (v61)
              {
                *(_DWORD *)v86 = 136446722;
                *(_QWORD *)&v86[4] = "nw_socket_copy_info";
                v87 = 1024;
                *(_DWORD *)v88 = v22;
                *(_WORD *)&v88[4] = 2082;
                *(_QWORD *)&v88[6] = v60;
                _os_log_impl(&dword_182FBE000, v40, v41, "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s", v86, 0x1Cu);
              }
              free(v60);
              goto LABEL_187;
            }
            if (!v61)
            {
LABEL_187:
              if (v39)
                free(v39);
              goto LABEL_189;
            }
            *(_DWORD *)v86 = 136446466;
            *(_QWORD *)&v86[4] = "nw_socket_copy_info";
            v87 = 1024;
            *(_DWORD *)v88 = v22;
            v42 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, no backtrace";
          }
          else
          {
            v40 = __nwlog_obj();
            v41 = v84;
            if (!os_log_type_enabled(v40, (os_log_type_t)v84))
              goto LABEL_187;
            *(_DWORD *)v86 = 136446466;
            *(_QWORD *)&v86[4] = "nw_socket_copy_info";
            v87 = 1024;
            *(_DWORD *)v88 = v22;
            v42 = "%{public}s getsockopt TCP_INFO failed %{darwin.errno}d, backtrace limit exceeded";
          }
          _os_log_impl(&dword_182FBE000, v40, v41, v42, v86, 0x12u);
          goto LABEL_187;
      }
    }
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_socket_copy_info";
    v4 = _os_log_send_and_compose_impl();
    v86[0] = 16;
    LOBYTE(v85[0]) = 0;
    if (!__nwlog_fault((const char *)v4, v86, v85))
      goto LABEL_211;
    if (v86[0] == 17)
    {
      v32 = __nwlog_obj();
      v33 = v86[0];
      if (os_log_type_enabled(v32, (os_log_type_t)v86[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_socket_copy_info";
        v34 = "%{public}s called with null socket_handler";
        goto LABEL_181;
      }
      goto LABEL_211;
    }
    if (!LOBYTE(v85[0]))
    {
      v32 = __nwlog_obj();
      v33 = v86[0];
      if (os_log_type_enabled(v32, (os_log_type_t)v86[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_socket_copy_info";
        v34 = "%{public}s called with null socket_handler, backtrace limit exceeded";
        goto LABEL_181;
      }
      goto LABEL_211;
    }
    v56 = __nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = v86[0];
    v73 = os_log_type_enabled(v32, (os_log_type_t)v86[0]);
    if (!v56)
    {
      if (v73)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_socket_copy_info";
        v34 = "%{public}s called with null socket_handler, no backtrace";
        goto LABEL_181;
      }
      goto LABEL_211;
    }
    if (v73)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_socket_copy_info";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v56;
      v58 = "%{public}s called with null socket_handler, dumping backtrace:%{public}s";
      goto LABEL_144;
    }
    goto LABEL_145;
  }
  __nwlog_obj();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_socket_copy_info";
  v4 = _os_log_send_and_compose_impl();
  v86[0] = 16;
  LOBYTE(v85[0]) = 0;
  if (!__nwlog_fault((const char *)v4, v86, v85))
    goto LABEL_211;
  if (v86[0] != 17)
  {
    if (!LOBYTE(v85[0]))
    {
      v32 = __nwlog_obj();
      v33 = v86[0];
      if (os_log_type_enabled(v32, (os_log_type_t)v86[0]))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_socket_copy_info";
        v34 = "%{public}s called with null protocol, backtrace limit exceeded";
        goto LABEL_181;
      }
      goto LABEL_211;
    }
    v56 = __nw_create_backtrace_string();
    v32 = __nwlog_obj();
    v33 = v86[0];
    v72 = os_log_type_enabled(v32, (os_log_type_t)v86[0]);
    if (!v56)
    {
      if (v72)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_socket_copy_info";
        v34 = "%{public}s called with null protocol, no backtrace";
        goto LABEL_181;
      }
      goto LABEL_211;
    }
    if (v72)
    {
      *(_DWORD *)buf = 136446466;
      *(_QWORD *)&buf[4] = "nw_socket_copy_info";
      *(_WORD *)&buf[12] = 2082;
      *(_QWORD *)&buf[14] = v56;
      v58 = "%{public}s called with null protocol, dumping backtrace:%{public}s";
LABEL_144:
      _os_log_impl(&dword_182FBE000, v32, v33, v58, buf, 0x16u);
    }
LABEL_145:
    v59 = (char *)v56;
LABEL_210:
    free(v59);
    goto LABEL_211;
  }
  v32 = __nwlog_obj();
  v33 = v86[0];
  if (os_log_type_enabled(v32, (os_log_type_t)v86[0]))
  {
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_socket_copy_info";
    v34 = "%{public}s called with null protocol";
LABEL_181:
    _os_log_impl(&dword_182FBE000, v32, v33, v34, buf, 0xCu);
  }
LABEL_211:
  if (v4)
    free((void *)v4);
  return 0;
}

void nw_protocol_establishment_report_set_client_accurate_ecn_state(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 6) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_establishment_report_set_client_accurate_ecn_state";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_establishment_report_set_client_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_establishment_report_set_client_accurate_ecn_state";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_establishment_report_set_client_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_establishment_report_set_client_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_protocol_establishment_report_set_server_accurate_ecn_state(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    *((_DWORD *)v3 + 7) = a2;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_establishment_report_set_server_accurate_ecn_state";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_establishment_report_set_server_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null report", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_establishment_report_set_server_accurate_ecn_state";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_establishment_report_set_server_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null report, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_establishment_report_set_server_accurate_ecn_state";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null report, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

void nw_path_enumerate_interface_options_with_details(void *a1, void *a2)
{
  unsigned int *v3;
  id v4;
  void (**v5)(_QWORD, _QWORD);
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  id v9;
  NWConcrete_nw_interface *v10;
  NWConcrete_nw_interface_option_details *v11;
  NSObject *v12;
  unsigned __int8 *v13;
  void *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  void *v18;
  os_log_type_t v19;
  char *backtrace_string;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  os_log_type_t v27;
  _QWORD v28[4];
  void (**v29)(_QWORD, _QWORD);
  char v30;
  uint8_t buf[4];
  const char *v32;
  __int16 v33;
  void *v34;
  __int16 v35;
  int v36;
  __int16 v37;
  __int128 *v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = (void (**)(_QWORD, _QWORD))v4;
  if (!v3)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v32 = "nw_path_enumerate_interface_options_with_details";
    v15 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v39) = 16;
    v30 = 0;
    if (!__nwlog_fault(v15, &v39, &v30))
      goto LABEL_53;
    if (v39 == 17)
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v17 = v39;
      if (os_log_type_enabled(v16, (os_log_type_t)v39))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_enumerate_interface_options_with_details";
        _os_log_impl(&dword_182FBE000, v16, v17, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v30)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v21 = v39;
      v22 = os_log_type_enabled(v16, (os_log_type_t)v39);
      if (backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446466;
          v32 = "nw_path_enumerate_interface_options_with_details";
          v33 = 2082;
          v34 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_53:
        if (!v15)
          goto LABEL_19;
LABEL_54:
        free(v15);
        goto LABEL_19;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_enumerate_interface_options_with_details";
        _os_log_impl(&dword_182FBE000, v16, v21, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v16 = objc_claimAutoreleasedReturnValue();
      v26 = v39;
      if (os_log_type_enabled(v16, (os_log_type_t)v39))
      {
        *(_DWORD *)buf = 136446210;
        v32 = "nw_path_enumerate_interface_options_with_details";
        _os_log_impl(&dword_182FBE000, v16, v26, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_52:

    goto LABEL_53;
  }
  if (v4)
  {
    if (v3[86])
    {
      v6 = 0;
      v7 = 0;
      do
      {
        v8 = *((_QWORD *)v3 + 38);
        v39 = 0uLL;
        if (nw_path_can_use_channel_syscalls(void)::onceToken != -1)
          dispatch_once(&nw_path_can_use_channel_syscalls(void)::onceToken, &__block_literal_global_463);
        if (nw_path_can_use_channel_syscalls(void)::can_use_channel_syscalls == 1)
          v39 = *(_OWORD *)(v8 + v6 + 8);
        v9 = nw_parameters_copy_context(*((void **)v3 + 2));
        v10 = nw_path_copy_interface_with_generation(v9, *(_DWORD *)(v8 + v6), *(_DWORD *)(v8 + v6 + 4));

        if (!v10 || (nw_path_interface_prohibited_by_parameters(v3, v10) & 1) == 0)
        {
          v11 = nw_interface_option_details_create(v10, &v39, 0, 0, 0, -1);
          if (v11)
          {
            ((void (**)(_QWORD, NWConcrete_nw_interface_option_details *))v5)[2](v5, v11);
          }
          else
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v12 = (id)gLogObj;
            if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446978;
              v32 = "nw_path_enumerate_interface_options_with_details";
              v33 = 2112;
              v34 = v10;
              v35 = 1042;
              v36 = 16;
              v37 = 2098;
              v38 = &v39;
              _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_ERROR, "%{public}s Unable to create interface option details with %@ [%{public,uuid_t}.16P]", buf, 0x26u);
            }

          }
        }

        ++v7;
        v6 += 24;
      }
      while (v7 < v3[86]);
    }
    v13 = (unsigned __int8 *)*((_QWORD *)v3 + 25);
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 3221225472;
    v28[2] = __nw_path_enumerate_interface_options_with_details_block_invoke;
    v28[3] = &unk_1E14AC278;
    v29 = v5;
    nw_array_apply(v13, (uint64_t)v28);

    goto LABEL_19;
  }
  __nwlog_obj();
  v18 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v32 = "nw_path_enumerate_interface_options_with_details";
  v15 = (char *)_os_log_send_and_compose_impl();

  LOBYTE(v39) = 16;
  v30 = 0;
  if (!__nwlog_fault(v15, &v39, &v30))
    goto LABEL_53;
  if (v39 == 17)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v19 = v39;
    if (os_log_type_enabled(v16, (os_log_type_t)v39))
    {
      *(_DWORD *)buf = 136446210;
      v32 = "nw_path_enumerate_interface_options_with_details";
      _os_log_impl(&dword_182FBE000, v16, v19, "%{public}s called with null enumerate_block", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (!v30)
  {
    __nwlog_obj();
    v16 = objc_claimAutoreleasedReturnValue();
    v27 = v39;
    if (os_log_type_enabled(v16, (os_log_type_t)v39))
    {
      *(_DWORD *)buf = 136446210;
      v32 = "nw_path_enumerate_interface_options_with_details";
      _os_log_impl(&dword_182FBE000, v16, v27, "%{public}s called with null enumerate_block, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_52;
  }
  v23 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v16 = objc_claimAutoreleasedReturnValue();
  v24 = v39;
  v25 = os_log_type_enabled(v16, (os_log_type_t)v39);
  if (!v23)
  {
    if (v25)
    {
      *(_DWORD *)buf = 136446210;
      v32 = "nw_path_enumerate_interface_options_with_details";
      _os_log_impl(&dword_182FBE000, v16, v24, "%{public}s called with null enumerate_block, no backtrace", buf, 0xCu);
    }
    goto LABEL_52;
  }
  if (v25)
  {
    *(_DWORD *)buf = 136446466;
    v32 = "nw_path_enumerate_interface_options_with_details";
    v33 = 2082;
    v34 = v23;
    _os_log_impl(&dword_182FBE000, v16, v24, "%{public}s called with null enumerate_block, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v23);
  if (v15)
    goto LABEL_54;
LABEL_19:

}

void sub_1830C7988(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

NWConcrete_nw_interface *nw_path_copy_interface_with_generation(void *a1, unsigned int a2, int a3)
{
  _DWORD *v5;
  uint64_t globals_for_path;
  NWConcrete_nw_interface *v7;
  _QWORD *v8;
  void *v9;
  xpc_object_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _DWORD *v17;
  int v18;
  uint64_t v19;
  NSObject *v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  xpc_object_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  char *v29;
  NSObject *v30;
  os_log_type_t v31;
  char *backtrace_string;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  os_log_type_t v37;
  os_unfair_lock_s *lock;
  xpc_object_t xdict;
  _QWORD applier[4];
  id v41;
  id v42;
  _QWORD v43[4];
  id v44;
  id v45;
  uint64_t v46;
  char v47;
  os_log_type_t v48;
  uint8_t buf[4];
  const char *v50;
  __int16 v51;
  _QWORD v52[4];

  *(_QWORD *)((char *)&v52[2] + 2) = *MEMORY[0x1E0C80C00];
  v5 = a1;
  pthread_once(&nw_settings_setup_atfork::pOnce, (void (*)(void))nw_settings_setup_atfork_inner);
  if (a2)
  {
    globals_for_path = nw_context_get_globals_for_path(v5);
    os_unfair_lock_lock((os_unfair_lock_t)(globals_for_path + 124));
    if (*(_QWORD *)(globals_for_path + 88))
    {
      if (*(_QWORD *)(globals_for_path + 104))
        goto LABEL_8;
    }
    else
    {
      v8 = nw_dictionary_create();
      v9 = *(void **)(globals_for_path + 88);
      *(_QWORD *)(globals_for_path + 88) = v8;

      if (*(_QWORD *)(globals_for_path + 104))
        goto LABEL_8;
    }
    v10 = xpc_dictionary_create(0, 0, 0);
    v11 = *(void **)(globals_for_path + 104);
    *(_QWORD *)(globals_for_path + 104) = v10;

LABEL_8:
    lock = (os_unfair_lock_s *)(globals_for_path + 124);
    v12 = *(id *)(globals_for_path + 88);
    xdict = *(id *)(globals_for_path + 104);
    v13 = mach_continuous_time();
    if (v13 <= 1)
      v14 = 1;
    else
      v14 = v13;
    snprintf((char *)(globals_for_path + 141), 0xAuLL, "%u", a2);
    v15 = nw_dictionary_copy_value((uint64_t)v12, globals_for_path + 141);
    v16 = v15;
    if (v15 && ((v17 = v15, v18 = v17[23], v17, !a3) || v18 == a3))
    {
      v7 = v17;
      v21 = xdict;
      xpc_dictionary_set_uint64(xdict, (const char *)(globals_for_path + 141), v14);
    }
    else
    {
      v19 = nw_path_shared_necp_fd(v5);
      v7 = nw_interface_create_from_necp(v19, a2);
      if (v7)
      {
        xpc_dictionary_set_uint64(xdict, (const char *)(globals_for_path + 141), v14);
        nw_dictionary_set_value((uint64_t)v12, (const char *)(globals_for_path + 141), v7);
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 136446722;
          v50 = "nw_path_copy_interface_with_generation";
          v51 = 1024;
          LODWORD(v52[0]) = a2;
          WORD2(v52[0]) = 1024;
          *(_DWORD *)((char *)v52 + 6) = a3;
          _os_log_impl(&dword_182FBE000, v20, OS_LOG_TYPE_DEBUG, "%{public}s Cache miss for interface for index %u (generation %u)", buf, 0x18u);
        }

        v21 = xdict;
      }
      else
      {
        v21 = xdict;
      }
    }
    if (nw_dictionary_get_count((uint64_t)v12) < 0x11)
      goto LABEL_38;
    v22 = *(_QWORD *)(globals_for_path + 96);
    if (v22)
    {
      if ((unint64_t)nw_delta_nanos(v22, v14) < 0x77359401)
        goto LABEL_38;
    }
    *(_QWORD *)(globals_for_path + 96) = v14;
    if (!v5 || v5[31] != 4)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v23 = (id)gLogObj;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        v50 = "nw_path_copy_interface_with_generation";
        v51 = 1024;
        LODWORD(v52[0]) = 16;
        _os_log_impl(&dword_182FBE000, v23, OS_LOG_TYPE_DEFAULT, "%{public}s Interface cache hit limit (%u), purging all interfaces not used recently", buf, 0x12u);
      }

    }
    v24 = xpc_array_create(0, 0);
    if (v24)
    {
      v25 = MEMORY[0x1E0C809B0];
      v43[0] = MEMORY[0x1E0C809B0];
      v43[1] = 3221225472;
      v43[2] = __nw_path_copy_interface_with_generation_block_invoke;
      v43[3] = &unk_1E14A8DE8;
      v26 = v21;
      v44 = v26;
      v46 = v14;
      v27 = v24;
      v45 = v27;
      nw_dictionary_apply((uint64_t)v12, (uint64_t)v43);
      applier[0] = v25;
      applier[1] = 3221225472;
      applier[2] = __nw_path_copy_interface_with_generation_block_invoke_2;
      applier[3] = &unk_1E14A8E10;
      v41 = v12;
      v42 = v26;
      xpc_array_apply(v27, applier);

LABEL_37:
LABEL_38:
      os_unfair_lock_unlock(lock);

      goto LABEL_39;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v28 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v50 = "nw_path_copy_interface_with_generation";
    v29 = (char *)_os_log_send_and_compose_impl();

    v48 = OS_LOG_TYPE_ERROR;
    v47 = 0;
    if (!__nwlog_fault(v29, &v48, &v47))
      goto LABEL_35;
    if (v48 == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v30 = (id)gLogObj;
      v31 = v48;
      if (os_log_type_enabled(v30, v48))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_path_copy_interface_with_generation";
        _os_log_impl(&dword_182FBE000, v30, v31, "%{public}s xpc_array_create failed", buf, 0xCu);
      }
    }
    else
    {
      if (v47)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v34 = objc_claimAutoreleasedReturnValue();
        v35 = v48;
        v36 = os_log_type_enabled(v34, v48);
        if (backtrace_string)
        {
          if (v36)
          {
            *(_DWORD *)buf = 136446466;
            v50 = "nw_path_copy_interface_with_generation";
            v51 = 2082;
            v52[0] = backtrace_string;
            _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s xpc_array_create failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          v21 = xdict;
          free(backtrace_string);
          if (!v29)
            goto LABEL_37;
          goto LABEL_36;
        }
        if (v36)
        {
          *(_DWORD *)buf = 136446210;
          v50 = "nw_path_copy_interface_with_generation";
          _os_log_impl(&dword_182FBE000, v34, v35, "%{public}s xpc_array_create failed, no backtrace", buf, 0xCu);
        }

        v21 = xdict;
LABEL_35:
        if (!v29)
          goto LABEL_37;
LABEL_36:
        free(v29);
        goto LABEL_37;
      }
      __nwlog_obj();
      v30 = objc_claimAutoreleasedReturnValue();
      v37 = v48;
      if (os_log_type_enabled(v30, v48))
      {
        *(_DWORD *)buf = 136446210;
        v50 = "nw_path_copy_interface_with_generation";
        _os_log_impl(&dword_182FBE000, v30, v37, "%{public}s xpc_array_create failed, backtrace limit exceeded", buf, 0xCu);
      }
    }

    goto LABEL_35;
  }
  v7 = 0;
LABEL_39:

  return v7;
}

void sub_1830C8044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,void *a26)
{
  void *v26;
  void *v27;
  void *v28;
  void *v29;
  void *v30;

  _Unwind_Resume(a1);
}

size_t nw_dictionary_get_count(uint64_t a1)
{
  void *v1;
  char *v3;
  NSObject *v4;
  os_log_type_t v5;
  const char *v6;
  char *v7;
  _BOOL4 v8;
  char *backtrace_string;
  _BOOL4 v10;
  char v11;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v14;
  __int16 v15;
  char *v16;
  uint64_t v17;

  v17 = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v1 = *(void **)(a1 + 16);
    if (v1)
      return xpc_dictionary_get_count(v1);
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_dictionary_get_count";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (__nwlog_fault(v3, &type, &v11))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_dictionary_get_count";
        v6 = "%{public}s called with null dictionary->xpc_object";
        goto LABEL_31;
      }
      if (!v11)
      {
        v4 = __nwlog_obj();
        v5 = type;
        if (!os_log_type_enabled(v4, type))
          goto LABEL_32;
        *(_DWORD *)buf = 136446210;
        v14 = "nw_dictionary_get_count";
        v6 = "%{public}s called with null dictionary->xpc_object, backtrace limit exceeded";
        goto LABEL_31;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      v4 = __nwlog_obj();
      v5 = type;
      v10 = os_log_type_enabled(v4, type);
      if (backtrace_string)
      {
        if (v10)
        {
          *(_DWORD *)buf = 136446466;
          v14 = "nw_dictionary_get_count";
          v15 = 2082;
          v16 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null dictionary->xpc_object, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        if (!v3)
          return 0;
        goto LABEL_33;
      }
      if (v10)
      {
        *(_DWORD *)buf = 136446210;
        v14 = "nw_dictionary_get_count";
        v6 = "%{public}s called with null dictionary->xpc_object, no backtrace";
LABEL_31:
        _os_log_impl(&dword_182FBE000, v4, v5, v6, buf, 0xCu);
      }
    }
  }
  else
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    v14 = "nw_dictionary_get_count";
    v3 = (char *)_os_log_send_and_compose_impl();
    type = OS_LOG_TYPE_ERROR;
    v11 = 0;
    if (!__nwlog_fault(v3, &type, &v11))
      goto LABEL_32;
    if (type == OS_LOG_TYPE_FAULT)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_dictionary_get_count";
      v6 = "%{public}s called with null dictionary";
      goto LABEL_31;
    }
    if (!v11)
    {
      v4 = __nwlog_obj();
      v5 = type;
      if (!os_log_type_enabled(v4, type))
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_dictionary_get_count";
      v6 = "%{public}s called with null dictionary, backtrace limit exceeded";
      goto LABEL_31;
    }
    v7 = (char *)__nw_create_backtrace_string();
    v4 = __nwlog_obj();
    v5 = type;
    v8 = os_log_type_enabled(v4, type);
    if (!v7)
    {
      if (!v8)
        goto LABEL_32;
      *(_DWORD *)buf = 136446210;
      v14 = "nw_dictionary_get_count";
      v6 = "%{public}s called with null dictionary, no backtrace";
      goto LABEL_31;
    }
    if (v8)
    {
      *(_DWORD *)buf = 136446466;
      v14 = "nw_dictionary_get_count";
      v15 = 2082;
      v16 = v7;
      _os_log_impl(&dword_182FBE000, v4, v5, "%{public}s called with null dictionary, dumping backtrace:%{public}s", buf, 0x16u);
    }
    free(v7);
  }
LABEL_32:
  if (v3)
LABEL_33:
    free(v3);
  return 0;
}

NWConcrete_nw_path_flow *nw_path_flow_create()
{
  NWConcrete_nw_path_flow *v0;
  NWConcrete_nw_path_flow *v1;
  NWConcrete_nw_path_flow *v2;
  id v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  char *backtrace_string;
  os_log_type_t v9;
  _BOOL4 v10;
  os_log_type_t v11;
  char v12;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v15;
  __int16 v16;
  char *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v0 = objc_alloc_init(NWConcrete_nw_path_flow);
  v1 = v0;
  if (v0)
  {
    v0->ctl_command_code = 0;
    v2 = v0;
    goto LABEL_10;
  }
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v3 = (id)gLogObj;
  *(_DWORD *)buf = 136446210;
  v15 = "nw_path_flow_create";
  v4 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v12 = 0;
  if (!__nwlog_fault(v4, &type, &v12))
    goto LABEL_8;
  if (type == OS_LOG_TYPE_FAULT)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v6 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_path_flow_create";
      _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow) alloc] init] failed", buf, 0xCu);
    }
LABEL_7:

LABEL_8:
    if (!v4)
      goto LABEL_10;
LABEL_9:
    free(v4);
    goto LABEL_10;
  }
  if (!v12)
  {
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v5 = (id)gLogObj;
    v11 = type;
    if (os_log_type_enabled(v5, type))
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_path_flow_create";
      _os_log_impl(&dword_182FBE000, v5, v11, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_7;
  }
  backtrace_string = (char *)__nw_create_backtrace_string();
  pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
  networkd_settings_init();
  v5 = (id)gLogObj;
  v9 = type;
  v10 = os_log_type_enabled(v5, type);
  if (!backtrace_string)
  {
    if (v10)
    {
      *(_DWORD *)buf = 136446210;
      v15 = "nw_path_flow_create";
      _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow) alloc] init] failed, no backtrace", buf, 0xCu);
    }
    goto LABEL_7;
  }
  if (v10)
  {
    *(_DWORD *)buf = 136446466;
    v15 = "nw_path_flow_create";
    v16 = 2082;
    v17 = backtrace_string;
    _os_log_impl(&dword_182FBE000, v5, v9, "%{public}s [[NW_CONCRETE_CLASS_NAME(nw_path_flow) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(backtrace_string);
  if (v4)
    goto LABEL_9;
LABEL_10:

  return v1;
}

uint64_t nw_path_interface_prohibited_by_parameters(void *a1, void *a2)
{
  id *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  _QWORD *v8;
  __int16 v9;
  char *v10;
  __int16 v11;
  _QWORD *v12;
  __int16 v13;
  char *v14;
  __int16 v15;
  _QWORD *v16;
  __int16 v17;
  char *v18;
  __int16 v19;
  _QWORD *v20;
  xpc_object_t *v21;
  id v22;
  BOOL v23;
  _QWORD *v24;
  id *v25;
  _DWORD *v26;
  int v27;
  NSObject *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  id v32;
  _DWORD *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;
  id v37;
  void *v38;
  BOOL v39;
  _QWORD *v40;
  uint64_t v41;
  _DWORD *v43;
  int v44;
  NSObject *v45;
  void *v46;
  char *v47;
  NSObject *v48;
  os_log_type_t v49;
  void *v50;
  os_log_type_t v51;
  void *v52;
  char *v53;
  NSObject *v54;
  os_log_type_t v55;
  char *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  os_log_type_t v59;
  _BOOL4 v60;
  char *backtrace_string;
  os_log_type_t v62;
  _BOOL4 v63;
  os_log_type_t v64;
  os_log_type_t v65;
  os_log_type_t v66;
  _QWORD v67[4];
  _QWORD *v68;
  _BYTE *v69;
  _QWORD v70[4];
  _DWORD *v71;
  _BYTE *v72;
  int v73;
  _QWORD applier[4];
  _DWORD *v75;
  _BYTE *v76;
  int v77;
  char v78;
  uint8_t v79[4];
  const char *v80;
  __int16 v81;
  _DWORD *v82;
  _BYTE buf[24];
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = v3[2];
      v7 = v6;
      if (v6)
      {
        v8 = v6;
        v9 = *(_WORD *)(v8[13] + 100);

        if ((v9 & 1) != 0 && (v10 = v5, v11 = *(_WORD *)(v10 + 85), v10, (v11 & 1) != 0))
        {
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v28 = (id)gLogObj;
          if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
            *(_WORD *)&buf[12] = 2112;
            *(_QWORD *)&buf[14] = v10;
            _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s Expensive prohibited, cannot use interface option %@", buf, 0x16u);
          }
        }
        else
        {
          v12 = v8;
          v13 = *(_WORD *)(v8[13] + 100);

          if ((v13 & 2) != 0 && (v14 = v5, v15 = *(_WORD *)(v14 + 85), v14, (v15 & 2) != 0))
          {
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v28 = (id)gLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v14;
              _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s Constrained prohibited, cannot use interface option %@", buf, 0x16u);
            }
          }
          else
          {
            v16 = v12;
            v17 = *(_WORD *)(v8[13] + 100);

            if ((v17 & 4) != 0)
              goto LABEL_13;
            v18 = v5;
            v19 = *(_WORD *)(v18 + 85);

            if ((v19 & 4) == 0)
              goto LABEL_13;
            if (nw_path_is_ultra_constrained_allowed(void)::onceToken != -1)
              dispatch_once(&nw_path_is_ultra_constrained_allowed(void)::onceToken, &__block_literal_global_461);
            if ((nw_path_is_ultra_constrained_allowed(void)::is_allowed & 1) != 0)
            {
LABEL_13:
              *(_QWORD *)buf = 0;
              *(_QWORD *)&buf[8] = buf;
              *(_QWORD *)&buf[16] = 0x2020000000;
              v84 = 0;
              v20 = v16;
              v21 = *(xpc_object_t **)(v8[13] + 176);
              v22 = v20;
              if (!v21)
                goto LABEL_30;
              v22 = v20;
              if (!*v21)
                goto LABEL_30;
              v23 = xpc_array_get_count(*v21) == 0;

              if (v23)
                goto LABEL_31;
              v24 = v20;
              v25 = *(id **)(v8[13] + 176);
              if (v25)
              {
                v22 = *v25;

                if (!v22)
                {
LABEL_30:

LABEL_31:
                  if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
                    goto LABEL_50;
                  if (!nw_parameters_has_prohibited_interface_subtypes(v20))
                  {
LABEL_39:
                    if (*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
                      goto LABEL_50;
                    v35 = v20;
                    v36 = *(_QWORD *)(v8[13] + 176);
                    v37 = v35;
                    if (!v36)
                      goto LABEL_48;
                    v38 = *(void **)(v36 + 24);
                    v37 = v35;
                    if (!v38)
                      goto LABEL_48;
                    v39 = xpc_array_get_count(v38) == 0;

                    if (v39)
                      goto LABEL_49;
                    v40 = v35;
                    v41 = *(_QWORD *)(v8[13] + 176);
                    if (v41)
                    {
                      v37 = *(id *)(v41 + 24);

                      if (!v37)
                      {
LABEL_48:

LABEL_49:
                        if (!*(_BYTE *)(*(_QWORD *)&buf[8] + 24))
                        {
                          v43 = v5;
                          v44 = v43[25];

                          if (v44 == 1002 && (nw_parameters_get_use_awdl(v35) & 1) == 0)
                          {
                            __nwlog_obj();
                            v45 = objc_claimAutoreleasedReturnValue();
                            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
                            {
                              *(_DWORD *)v79 = 136446466;
                              v80 = "nw_path_interface_prohibited_by_parameters";
                              v81 = 2112;
                              v82 = v43;
                              _os_log_impl(&dword_182FBE000, v45, OS_LOG_TYPE_DEBUG, "%{public}s Interface %@ prohibited, cannot use interface option", v79, 0x16u);
                            }

                          }
                          v29 = 0;
                          goto LABEL_51;
                        }
LABEL_50:
                        v29 = 1;
LABEL_51:
                        _Block_object_dispose(buf, 8);
                        goto LABEL_52;
                      }
                      v67[0] = MEMORY[0x1E0C809B0];
                      v67[1] = 3221225472;
                      v67[2] = __nw_path_interface_prohibited_by_parameters_block_invoke_377;
                      v67[3] = &unk_1E14A8FA0;
                      v68 = v5;
                      v69 = buf;
                      xpc_array_apply(v37, v67);
                      v40 = v68;
                    }
                    else
                    {
                      v37 = 0;
                    }

                    goto LABEL_48;
                  }
                  v30 = v20;
                  v31 = *(_QWORD *)(v8[13] + 176);
                  if (v31)
                  {
                    v32 = *(id *)(v31 + 8);

                    if (!v32)
                    {
LABEL_38:

                      goto LABEL_39;
                    }
                    v33 = v5;
                    v34 = v33[25];

                    v70[0] = MEMORY[0x1E0C809B0];
                    v70[1] = 3221225472;
                    v70[2] = __nw_path_interface_prohibited_by_parameters_block_invoke_376;
                    v70[3] = &unk_1E14A8F78;
                    v73 = v34;
                    v71 = v33;
                    v72 = buf;
                    xpc_array_apply(v32, v70);
                    v30 = v71;
                  }
                  else
                  {
                    v32 = 0;
                  }

                  goto LABEL_38;
                }
                v26 = v5;
                v27 = v26[24];

                applier[0] = MEMORY[0x1E0C809B0];
                applier[1] = 3221225472;
                applier[2] = __nw_path_interface_prohibited_by_parameters_block_invoke;
                applier[3] = &unk_1E14A8F78;
                v77 = v27;
                v75 = v26;
                v76 = buf;
                xpc_array_apply(v22, applier);
                v24 = v75;
              }
              else
              {
                v22 = 0;
              }

              goto LABEL_30;
            }
            pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
            networkd_settings_init();
            v28 = (id)gLogObj;
            if (os_log_type_enabled(v28, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
              *(_WORD *)&buf[12] = 2112;
              *(_QWORD *)&buf[14] = v18;
              _os_log_impl(&dword_182FBE000, v28, OS_LOG_TYPE_DEBUG, "%{public}s Ultra constrained not allowed, cannot use interface option %@", buf, 0x16u);
            }
          }
        }

        v29 = 1;
LABEL_52:

        goto LABEL_53;
      }
      __nwlog_obj();
      v52 = (void *)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
      v53 = (char *)_os_log_send_and_compose_impl();

      v79[0] = 16;
      v78 = 0;
      if (__nwlog_fault(v53, v79, &v78))
      {
        if (v79[0] == 17)
        {
          __nwlog_obj();
          v54 = objc_claimAutoreleasedReturnValue();
          v55 = v79[0];
          if (os_log_type_enabled(v54, (os_log_type_t)v79[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
            _os_log_impl(&dword_182FBE000, v54, v55, "%{public}s called with null parameters", buf, 0xCu);
          }
        }
        else if (v78)
        {
          backtrace_string = (char *)__nw_create_backtrace_string();
          __nwlog_obj();
          v54 = objc_claimAutoreleasedReturnValue();
          v62 = v79[0];
          v63 = os_log_type_enabled(v54, (os_log_type_t)v79[0]);
          if (backtrace_string)
          {
            if (v63)
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = backtrace_string;
              _os_log_impl(&dword_182FBE000, v54, v62, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
            }

            free(backtrace_string);
            goto LABEL_111;
          }
          if (v63)
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
            _os_log_impl(&dword_182FBE000, v54, v62, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
          }
        }
        else
        {
          __nwlog_obj();
          v54 = objc_claimAutoreleasedReturnValue();
          v66 = v79[0];
          if (os_log_type_enabled(v54, (os_log_type_t)v79[0]))
          {
            *(_DWORD *)buf = 136446210;
            *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
            _os_log_impl(&dword_182FBE000, v54, v66, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
          }
        }

      }
LABEL_111:
      if (v53)
        free(v53);
      v29 = 0;
      goto LABEL_52;
    }
    __nwlog_obj();
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
    v47 = (char *)_os_log_send_and_compose_impl();

    v79[0] = 16;
    v78 = 0;
    if (__nwlog_fault(v47, v79, &v78))
    {
      if (v79[0] == 17)
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v51 = v79[0];
        if (os_log_type_enabled(v48, (os_log_type_t)v79[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_182FBE000, v48, v51, "%{public}s called with null interface", buf, 0xCu);
        }
LABEL_104:

        goto LABEL_105;
      }
      if (!v78)
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v65 = v79[0];
        if (os_log_type_enabled(v48, (os_log_type_t)v79[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_182FBE000, v48, v65, "%{public}s called with null interface, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_104;
      }
      v56 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v59 = v79[0];
      v60 = os_log_type_enabled(v48, (os_log_type_t)v79[0]);
      if (!v56)
      {
        if (v60)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_182FBE000, v48, v59, "%{public}s called with null interface, no backtrace", buf, 0xCu);
        }
        goto LABEL_104;
      }
      if (v60)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v56;
        _os_log_impl(&dword_182FBE000, v48, v59, "%{public}s called with null interface, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_84;
    }
  }
  else
  {
    __nwlog_obj();
    v46 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
    v47 = (char *)_os_log_send_and_compose_impl();

    v79[0] = 16;
    v78 = 0;
    if (__nwlog_fault(v47, v79, &v78))
    {
      if (v79[0] == 17)
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v49 = v79[0];
        if (os_log_type_enabled(v48, (os_log_type_t)v79[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_182FBE000, v48, v49, "%{public}s called with null path", buf, 0xCu);
        }
        goto LABEL_104;
      }
      if (!v78)
      {
        __nwlog_obj();
        v48 = objc_claimAutoreleasedReturnValue();
        v64 = v79[0];
        if (os_log_type_enabled(v48, (os_log_type_t)v79[0]))
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_182FBE000, v48, v64, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_104;
      }
      v56 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v48 = objc_claimAutoreleasedReturnValue();
      v57 = v79[0];
      v58 = os_log_type_enabled(v48, (os_log_type_t)v79[0]);
      if (!v56)
      {
        if (v58)
        {
          *(_DWORD *)buf = 136446210;
          *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
          _os_log_impl(&dword_182FBE000, v48, v57, "%{public}s called with null path, no backtrace", buf, 0xCu);
        }
        goto LABEL_104;
      }
      if (v58)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_path_interface_prohibited_by_parameters";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = v56;
        _os_log_impl(&dword_182FBE000, v48, v57, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_84:

      free(v56);
    }
  }
LABEL_105:
  if (v47)
    free(v47);
  v29 = 0;
LABEL_53:

  return v29;
}

void sub_1830C9650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;

  _Block_object_dispose((const void *)(v21 - 128), 8);
  _Unwind_Resume(a1);
}

NWConcrete_nw_interface_option_details *nw_interface_option_details_create(void *a1, _OWORD *a2, void *a3, char a4, void *a5, int a6)
{
  id v12;
  id v13;
  id v14;
  NWConcrete_nw_interface_option_details *v15;
  NWConcrete_nw_interface_option_details *v16;
  NWConcrete_nw_interface_option_details *v17;
  id v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  char *backtrace_string;
  os_log_type_t v24;
  _BOOL4 v25;
  os_log_type_t v26;
  void *v27;
  char *v28;
  NSObject *v29;
  os_log_type_t v30;
  char *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  os_log_type_t v34;
  char v35;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v38;
  __int16 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v12 = a1;
  v13 = a3;
  v14 = a5;
  if (a2)
  {
    v15 = objc_alloc_init(NWConcrete_nw_interface_option_details);
    v16 = v15;
    if (v15)
    {
      objc_storeStrong((id *)&v15->interface, a1);
      *(_OWORD *)v16->nexus_agent = *a2;
      objc_storeStrong((id *)&v16->remote, a3);
      v16->priority = a4;
      objc_storeStrong((id *)&v16->initial_data, a5);
      v16->sockfd = a6;
      v17 = v16;
LABEL_11:

      goto LABEL_12;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v18 = (id)gLogObj;
    *(_DWORD *)buf = 136446210;
    v38 = "nw_interface_option_details_create";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v35 = 0;
    if (__nwlog_fault(v19, &type, &v35))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_interface_option_details_create";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s [[NW_CONCRETE_CLASS_NAME(interface_option_details) alloc] init] failed", buf, 0xCu);
        }
      }
      else if (v35)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v24 = type;
        v25 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v25)
          {
            *(_DWORD *)buf = 136446466;
            v38 = "nw_interface_option_details_create";
            v39 = 2082;
            v40 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v24, "%{public}s [[NW_CONCRETE_CLASS_NAME(interface_option_details) alloc] init] failed, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          if (!v19)
            goto LABEL_11;
          goto LABEL_10;
        }
        if (v25)
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_interface_option_details_create";
          _os_log_impl(&dword_182FBE000, v20, v24, "%{public}s [[NW_CONCRETE_CLASS_NAME(interface_option_details) alloc] init] failed, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v20 = (id)gLogObj;
        v26 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v38 = "nw_interface_option_details_create";
          _os_log_impl(&dword_182FBE000, v20, v26, "%{public}s [[NW_CONCRETE_CLASS_NAME(interface_option_details) alloc] init] failed, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
    if (!v19)
      goto LABEL_11;
LABEL_10:
    free(v19);
    goto LABEL_11;
  }
  __nwlog_obj();
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v38 = "nw_interface_option_details_create";
  v28 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v35 = 0;
  if (__nwlog_fault(v28, &type, &v35))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_interface_option_details_create";
        _os_log_impl(&dword_182FBE000, v29, v30, "%{public}s called with null nexus_agent", buf, 0xCu);
      }
    }
    else if (v35)
    {
      v31 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v32 = type;
      v33 = os_log_type_enabled(v29, type);
      if (v31)
      {
        if (v33)
        {
          *(_DWORD *)buf = 136446466;
          v38 = "nw_interface_option_details_create";
          v39 = 2082;
          v40 = v31;
          _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null nexus_agent, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v31);
        goto LABEL_41;
      }
      if (v33)
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_interface_option_details_create";
        _os_log_impl(&dword_182FBE000, v29, v32, "%{public}s called with null nexus_agent, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v29 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      if (os_log_type_enabled(v29, type))
      {
        *(_DWORD *)buf = 136446210;
        v38 = "nw_interface_option_details_create";
        _os_log_impl(&dword_182FBE000, v29, v34, "%{public}s called with null nexus_agent, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_41:
  if (v28)
    free(v28);
  v16 = 0;
LABEL_12:

  return v16;
}

void sub_1830C9C4C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void ____nwlog_path_log_block_invoke()
{
  if ((gHasForked & 1) == 0)
    gpathLogObj = (uint64_t)os_log_create((const char *)nw_oslog_subsystem, "path");
}

void nw_endpoint_handler_path_change(NWConcrete_nw_endpoint_handler *a1)
{
  NWConcrete_nw_endpoint_handler *v1;
  uint64_t v2;
  OS_nw_path *current_path;
  OS_nw_path *v4;
  int v5;
  char v6;
  NSObject *v7;
  const char *v8;
  nw_endpoint_t v9;
  const char *logging_description;
  uint64_t state;
  const char *v12;
  NWConcrete_nw_endpoint_handler *v13;
  os_unfair_lock_s *v14;
  const char *v15;
  os_unfair_lock_s *v16;
  os_unfair_lock_s *v17;
  OS_nw_path *v18;
  int v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  int v24;
  NSObject *v25;
  void **v26;
  NWConcrete_nw_interface *v27;
  int v28;
  char v29;
  NSObject *v30;
  const char *v31;
  const char *v32;
  nw_endpoint_t v33;
  const char *v34;
  const char *v35;
  const char *v36;
  id v37;
  char *v38;
  char *v39;
  void *v40;
  _QWORD *v41;
  BOOL v42;
  NSObject *v43;
  const char *v44;
  const char *v45;
  nw_endpoint_t v46;
  const char *v47;
  const char *v48;
  const char *v49;
  id v50;
  NSObject *v51;
  const char *v52;
  nw_endpoint_t v53;
  const char *v54;
  uint64_t v55;
  const char *v56;
  _BOOL8 has_custom_proxy_configs;
  char *v58;
  char *v59;
  void *v60;
  _QWORD *v61;
  BOOL v62;
  NSObject *v63;
  const char *id_string;
  const char *v65;
  nw_endpoint_t v66;
  const char *v67;
  const char *v68;
  const char *v69;
  id v70;
  _BOOL8 v71;
  int v72;
  void **v73;
  int v74;
  BOOL should_fallback;
  int v76;
  void **v77;
  void **v78;
  int v79;
  _BOOL4 v80;
  NWConcrete_nw_endpoint_proxy *v81;
  int v82;
  int minimize_logging;
  char logging_disabled;
  NSObject *v85;
  const char *v86;
  const char *v87;
  nw_endpoint_t v88;
  const char *v89;
  const char *v90;
  const char *v91;
  id v92;
  id v93;
  void *v94;
  void *v95;
  _QWORD *v96;
  BOOL v97;
  NSObject *v98;
  const char *v99;
  const char *v100;
  nw_endpoint_t v101;
  const char *v102;
  const char *v103;
  const char *v104;
  id v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t timeout_nanos_for_path;
  BOOL v111;
  unint64_t v112;
  void *v113;
  id v114;
  char v115;
  NSObject *v116;
  const char *v117;
  const char *v118;
  nw_endpoint_t v119;
  const char *v120;
  const char *v121;
  const char *v122;
  id v123;
  uint64_t v124;
  dispatch_time_t v125;
  uint64_t v126;
  const char *v127;
  nw_endpoint_t v128;
  const char *v129;
  uint64_t v130;
  const char *v131;
  const char *v132;
  char *v133;
  os_unfair_lock_s *v134;
  const char *v135;
  const char *v136;
  nw_endpoint_t v137;
  const char *v138;
  uint64_t v139;
  const char *v140;
  int v141;
  char v142;
  NSObject *v143;
  const char *v144;
  const char *v145;
  nw_endpoint_t v146;
  const char *v147;
  const char *v148;
  const char *v149;
  id v150;
  NWConcrete_nw_endpoint_fallback *v151;
  void *v152;
  uint64_t v153;
  uint64_t v154;
  NWConcrete_nw_endpoint_handler *v155;
  char *v156;
  os_unfair_lock_s *v157;
  const char *v158;
  NSObject *v159;
  const char *v160;
  const char *v161;
  nw_endpoint_t v162;
  const char *v163;
  const char *v164;
  const char *v165;
  id v166;
  NWConcrete_nw_endpoint_handler *v167;
  os_unfair_lock_s *v168;
  const char *v169;
  char *v170;
  char *v171;
  _BOOL4 v172;
  const char *v173;
  nw_endpoint_t v174;
  const char *v175;
  char *v176;
  char *v177;
  uint64_t v178;
  const char *v179;
  const char *v180;
  NSObject *v181;
  const char *v182;
  const char *v183;
  nw_endpoint_t v184;
  const char *v185;
  const char *v186;
  const char *v187;
  id v188;
  os_unfair_lock_s *v189;
  os_unfair_lock_s *v190;
  OS_nw_path *v191;
  void **v192;
  void **v193;
  const char *v194;
  os_unfair_lock_s *v195;
  os_unfair_lock_s *v196;
  OS_nw_path *v197;
  void *v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  id v202;
  os_unfair_lock_s *v203;
  os_unfair_lock_s *v204;
  OS_nw_path *v205;
  _DWORD *v206;
  uint64_t v207;
  NWConcrete_nw_endpoint_flow *v208;
  void *v209;
  int v210;
  int v211;
  char v212;
  NSObject *v213;
  const char *v214;
  const char *v215;
  nw_endpoint_t v216;
  const char *v217;
  const char *v218;
  const char *v219;
  id v220;
  os_unfair_lock_s *v221;
  OS_nw_path *v222;
  int v223;
  char v224;
  NSObject *v225;
  const char *v226;
  const char *v227;
  nw_endpoint_t v228;
  const char *v229;
  const char *v230;
  const char *v231;
  id v232;
  int v233;
  char v234;
  NSObject *v235;
  const char *v236;
  const char *v237;
  nw_endpoint_t v238;
  const char *v239;
  const char *v240;
  const char *v241;
  id v242;
  NWConcrete_nw_endpoint_transform *v243;
  void *v244;
  uint64_t v245;
  int v246;
  char v247;
  int v248;
  char v249;
  NSObject *v250;
  const char *v251;
  const char *v252;
  nw_endpoint_t v253;
  const char *v254;
  const char *v255;
  const char *v256;
  id v257;
  NWConcrete_nw_endpoint_resolver *v258;
  void *v259;
  uint64_t v260;
  int v261;
  char v262;
  NSObject *v263;
  const char *v264;
  const char *v265;
  nw_endpoint_t v266;
  const char *v267;
  const char *v268;
  const char *v269;
  id v270;
  id v271;
  void *v272;
  char *v273;
  NSObject *v274;
  os_log_type_t v275;
  int v276;
  char v277;
  NSObject *v278;
  const char *v279;
  const char *v280;
  nw_endpoint_t v281;
  const char *v282;
  const char *v283;
  const char *v284;
  id v285;
  NWConcrete_nw_endpoint_handler *v286;
  NWConcrete_nw_endpoint_proxy *v287;
  NWConcrete_nw_endpoint_mode_handler *mode_handler;
  uint64_t v289;
  NWConcrete_nw_endpoint_mode_handler *v290;
  void *v291;
  char *v292;
  NSObject *v293;
  os_log_type_t v294;
  void *v295;
  os_log_type_t v296;
  char *v297;
  os_log_type_t v298;
  _BOOL4 v299;
  uint64_t v300;
  uint64_t v301;
  NWConcrete_nw_endpoint_mode_handler *v302;
  int v303;
  char v304;
  const char *v305;
  const char *v306;
  nw_endpoint_t v307;
  const char *v308;
  const char *v309;
  const char *v310;
  id v311;
  char *backtrace_string;
  os_log_type_t v313;
  _BOOL4 v314;
  char *v315;
  os_log_type_t v316;
  _BOOL4 v317;
  os_log_type_t v318;
  int v319;
  char v320;
  const char *v321;
  const char *v322;
  nw_endpoint_t v323;
  const char *v324;
  const char *v325;
  const char *v326;
  id v327;
  id v328;
  os_log_type_t v329;
  os_log_type_t v330;
  const char *v331;
  const char *v332;
  nw_endpoint_t v333;
  const char *v334;
  const char *v335;
  const char *v336;
  id v337;
  const char *v338;
  const char *v339;
  nw_endpoint_t v340;
  const char *v341;
  const char *v342;
  const char *v343;
  id v344;
  const char *v345;
  const char *v346;
  nw_endpoint_t v347;
  const char *v348;
  const char *v349;
  const char *v350;
  id v351;
  const char *v352;
  const char *v353;
  nw_endpoint_t v354;
  const char *v355;
  const char *v356;
  const char *v357;
  id v358;
  const char *v359;
  const char *v360;
  nw_endpoint_t v361;
  const char *v362;
  const char *v363;
  const char *v364;
  id v365;
  const char *v366;
  const char *v367;
  nw_endpoint_t v368;
  const char *v369;
  const char *v370;
  const char *v371;
  id v372;
  const char *v373;
  const char *v374;
  nw_endpoint_t v375;
  const char *v376;
  const char *v377;
  const char *v378;
  id v379;
  const char *v380;
  const char *v381;
  nw_endpoint_t v382;
  const char *v383;
  const char *v384;
  const char *v385;
  id v386;
  const char *v387;
  const char *v388;
  nw_endpoint_t v389;
  const char *v390;
  const char *v391;
  const char *v392;
  id v393;
  const char *v394;
  const char *v395;
  nw_endpoint_t v396;
  const char *v397;
  const char *v398;
  const char *v399;
  id v400;
  const char *v401;
  const char *v402;
  nw_endpoint_t v403;
  const char *v404;
  const char *v405;
  const char *v406;
  id v407;
  const char *v408;
  const char *v409;
  nw_endpoint_t v410;
  const char *v411;
  const char *v412;
  const char *v413;
  id v414;
  const char *v415;
  const char *v416;
  nw_endpoint_t v417;
  const char *v418;
  const char *v419;
  const char *v420;
  id v421;
  int v422;
  const char *v423;
  NWConcrete_nw_endpoint_handler *v424;
  char v425;
  _QWORD v426[4];
  id v427;
  _QWORD enumerate_block[4];
  void **v429;
  _QWORD *v430;
  uint64_t *v431;
  uint64_t v432;
  uint64_t *v433;
  uint64_t v434;
  char v435;
  _QWORD v436[3];
  const char *v437;
  __int16 v438;
  const char *v439;
  __int16 v440;
  const char *v441;
  __int16 v442;
  const char *v443;
  __int16 v444;
  OS_nw_path *v445;
  _QWORD buf[14];

  buf[11] = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v424 = v1;
  if (!v1)
  {
    __nwlog_obj();
    v291 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
    v292 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v436[0]) = 16;
    LOBYTE(v432) = 0;
    if (!__nwlog_fault(v292, v436, &v432))
      goto LABEL_455;
    if (LOBYTE(v436[0]) == 17)
    {
      __nwlog_obj();
      v293 = objc_claimAutoreleasedReturnValue();
      v294 = v436[0];
      if (os_log_type_enabled(v293, v436[0]))
      {
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_182FBE000, v293, v294, "%{public}s called with null handler", (uint8_t *)buf, 0xCu);
      }
    }
    else if ((_BYTE)v432)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v293 = objc_claimAutoreleasedReturnValue();
      v313 = v436[0];
      v314 = os_log_type_enabled(v293, v436[0]);
      if (backtrace_string)
      {
        if (v314)
        {
          LODWORD(buf[0]) = 136446466;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = backtrace_string;
          _os_log_impl(&dword_182FBE000, v293, v313, "%{public}s called with null handler, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }

        free(backtrace_string);
LABEL_455:
        if (!v292)
          goto LABEL_242;
LABEL_456:
        free(v292);
        goto LABEL_242;
      }
      if (v314)
      {
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_182FBE000, v293, v313, "%{public}s called with null handler, no backtrace", (uint8_t *)buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v293 = objc_claimAutoreleasedReturnValue();
      v329 = v436[0];
      if (os_log_type_enabled(v293, v436[0]))
      {
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_182FBE000, v293, v329, "%{public}s called with null handler, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
      }
    }
LABEL_454:

    goto LABEL_455;
  }
  v2 = (uint64_t)v1;
  current_path = v1->current_path;
  if (!current_path)
  {
    __nwlog_obj();
    v295 = (void *)objc_claimAutoreleasedReturnValue();
    LODWORD(buf[0]) = 136446210;
    *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
    v292 = (char *)_os_log_send_and_compose_impl();

    LOBYTE(v436[0]) = 16;
    LOBYTE(v432) = 0;
    if (!__nwlog_fault(v292, v436, &v432))
      goto LABEL_455;
    if (LOBYTE(v436[0]) == 17)
    {
      __nwlog_obj();
      v293 = objc_claimAutoreleasedReturnValue();
      v296 = v436[0];
      if (os_log_type_enabled(v293, v436[0]))
      {
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_182FBE000, v293, v296, "%{public}s called with null handler->current_path", (uint8_t *)buf, 0xCu);
      }
    }
    else if ((_BYTE)v432)
    {
      v315 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v293 = objc_claimAutoreleasedReturnValue();
      v316 = v436[0];
      v317 = os_log_type_enabled(v293, v436[0]);
      if (v315)
      {
        if (v317)
        {
          LODWORD(buf[0]) = 136446466;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v315;
          _os_log_impl(&dword_182FBE000, v293, v316, "%{public}s called with null handler->current_path, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
        }

        free(v315);
        if (!v292)
          goto LABEL_242;
        goto LABEL_456;
      }
      if (v317)
      {
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_182FBE000, v293, v316, "%{public}s called with null handler->current_path, no backtrace", (uint8_t *)buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v293 = objc_claimAutoreleasedReturnValue();
      v330 = v436[0];
      if (os_log_type_enabled(v293, v436[0]))
      {
        LODWORD(buf[0]) = 136446210;
        *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        _os_log_impl(&dword_182FBE000, v293, v330, "%{public}s called with null handler->current_path, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
      }
    }
    goto LABEL_454;
  }
  v4 = current_path;
  v5 = *((_DWORD *)v4 + 94);

  v6 = *(_BYTE *)(v2 + 268);
  if ((v6 & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v7 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
    {
      if ((*((_BYTE *)v424 + 268) & 1) != 0)
        v8 = "dry-run ";
      else
        v8 = "";
      v9 = nw_endpoint_handler_copy_endpoint(v424);
      logging_description = nw_endpoint_get_logging_description(v9);
      v422 = v5;
      state = v424->state;
      if (state > 5)
        v12 = "unknown-state";
      else
        v12 = off_1E149FC48[state];
      v13 = v424;
      v14 = (os_unfair_lock_s *)v13;
      v15 = "path";
      switch(v13->mode)
      {
        case 0:
          break;
        case 1:
          v15 = "resolver";
          break;
        case 2:
          v15 = nw_endpoint_flow_mode_string(v13->mode_handler);
          break;
        case 3:
          v15 = "proxy";
          break;
        case 4:
          v15 = "fallback";
          break;
        case 5:
          v15 = "transform";
          break;
        default:
          v15 = "unknown-mode";
          break;
      }

      v16 = v14 + 28;
      v17 = v14;
      os_unfair_lock_lock(v14 + 28);
      v18 = v424->current_path;
      os_unfair_lock_unlock(v16);

      LODWORD(buf[0]) = 136447746;
      *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
      WORD2(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 6) = v424->id_str;
      HIWORD(buf[2]) = 2082;
      buf[3] = v8;
      LOWORD(buf[4]) = 2082;
      *(_QWORD *)((char *)&buf[4] + 2) = logging_description;
      WORD1(buf[5]) = 2082;
      *(_QWORD *)((char *)&buf[5] + 4) = v12;
      WORD2(buf[6]) = 2082;
      *(_QWORD *)((char *)&buf[6] + 6) = v15;
      HIWORD(buf[7]) = 2114;
      buf[8] = v18;
      _os_log_impl(&dword_182FBE000, v7, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ", (uint8_t *)buf, 0x48u);

      v5 = v422;
    }

    v2 = (uint64_t)v424;
    v6 = *((_BYTE *)v424 + 268);
  }
  v19 = *(_DWORD *)(v2 + 120);
  if (v19 != 2)
  {
    v6 &= ~8u;
    *(_BYTE *)(v2 + 268) = v6;
    if ((v19 & 0xFFFFFFFE) == 4)
      goto LABEL_442;
  }
  if ((v6 & 2) == 0)
  {
    if (v5 != 3)
    {
      *(_BYTE *)(v2 + 268) = v6 & 0xFD;
      v20 = *(void **)(v2 + 88);
      *(_QWORD *)(v2 + 88) = 0;
      v21 = (id)v2;

      v22 = (void *)v21[12];
      v21[12] = 0;

      v23 = (void *)v21[13];
      v21[13] = 0;

      v2 = (uint64_t)v424;
    }
LABEL_28:
    if (*(_DWORD *)(v2 + 116) == 2 && nw_endpoint_flow_should_ignore_path_result(*(void **)(v2 + 248)))
    {
      v24 = 0;
      v432 = 0;
      v433 = &v432;
      v434 = 0x2020000000;
      v435 = 0;
      v5 = 1;
LABEL_58:
      if (nw_parameters_get_attribution(*(nw_parameters_t *)(v2 + 32)) == nw_parameters_attribution_developer
        && nw_endpoint_get_type(*(nw_endpoint_t *)(v2 + 24)) == nw_endpoint_type_host)
      {
        memset(buf, 0, 88);
        nw_parameters_to_ne_app_context(*(void **)(v2 + 32), (uint64_t)buf);
        nw_endpoint_get_hostname(*(nw_endpoint_t *)(v2 + 24));
        if (ne_tracker_check_is_hostname_blocked() == 1)
        {
          if ((*(_BYTE *)(v2 + 268) & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v51 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
            {
              if ((*((_BYTE *)v424 + 268) & 1) != 0)
                v52 = "dry-run ";
              else
                v52 = "";
              v53 = nw_endpoint_handler_copy_endpoint(v424);
              v54 = nw_endpoint_get_logging_description(v53);
              v55 = v424->state;
              if (v55 > 5)
                v56 = "unknown-state";
              else
                v56 = off_1E149FC48[v55];
              v167 = v424;
              v168 = (os_unfair_lock_s *)v167;
              v169 = "path";
              switch(v424->mode)
              {
                case 0:
                  break;
                case 1:
                  v169 = "resolver";
                  break;
                case 2:
                  v169 = nw_endpoint_flow_mode_string(v167->mode_handler);
                  break;
                case 3:
                  v169 = "proxy";
                  break;
                case 4:
                  v169 = "fallback";
                  break;
                case 5:
                  v169 = "transform";
                  break;
                default:
                  v169 = "unknown-mode";
                  break;
              }

              v203 = v168 + 28;
              v204 = v168;
              os_unfair_lock_lock(v168 + 28);
              v205 = v424->current_path;
              os_unfair_lock_unlock(v203);

              LODWORD(v436[0]) = 136447746;
              *(_QWORD *)((char *)v436 + 4) = "nw_endpoint_handler_path_change";
              WORD2(v436[1]) = 2082;
              *(_QWORD *)((char *)&v436[1] + 6) = v424->id_str;
              HIWORD(v436[2]) = 2082;
              v437 = v52;
              v438 = 2082;
              v439 = v54;
              v440 = 2082;
              v441 = v56;
              v442 = 2082;
              v443 = v169;
              v444 = 2114;
              v445 = v205;
              _os_log_impl(&dword_182FBE000, v51, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] blocked tracker", (uint8_t *)v436, 0x48u);

            }
            v2 = (uint64_t)v424;
          }
          goto LABEL_271;
        }
      }
      if (nw_parameters_get_block_trackers(*(void **)(v2 + 32))
        && nw_parameters_get_is_known_tracker(*(void **)(v2 + 32))
        && nw_endpoint_get_can_block_request(*(void **)(v2 + 24))
        && !nw_endpoint_hostname_matches_tracker(*(void **)(v2 + 24)))
      {
LABEL_271:
        nw_endpoint_handler_handle_failure((void *)v2);
        v206 = -[NWConcrete_nw_error initWithDomain:code:]([NWConcrete_nw_error alloc], 1, 50);
        *(_DWORD *)(v2 + 80) = 589825;
        nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), v206);

LABEL_440:
        v2 = (uint64_t)v424;
        goto LABEL_441;
      }
      has_custom_proxy_configs = nw_parameters_has_custom_proxy_configs(*(void **)(v2 + 32));
      if (v5 == 3)
      {
        if (nw_endpoint_handler_triggered_agents_updated((NWConcrete_nw_endpoint_handler *)v2))
        {
          v58 = (char *)(id)v2;
          v59 = v58;
          v60 = *(void **)(v2 + 32);
          if (v60)
          {
            v61 = v60;
            v62 = (v61[12] & 0x4000000000) == 0;

            if (!v62)
            {
              v2 = (uint64_t)v424;
              if ((nw_endpoint_handler_get_logging_disabled(v59) & 1) == 0)
              {
                if (__nwlog_connection_log::onceToken != -1)
                  dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                v63 = (id)gconnectionLogObj;
                if (os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG))
                {
                  id_string = nw_endpoint_handler_get_id_string(v59);
                  v65 = nw_endpoint_handler_dry_run_string(v59);
                  v66 = nw_endpoint_handler_copy_endpoint(v59);
                  v67 = nw_endpoint_get_logging_description(v66);
                  v68 = nw_endpoint_handler_state_string(v59);
                  v69 = nw_endpoint_handler_mode_string(v59);
                  v70 = nw_endpoint_handler_copy_current_path(v59);
                  LODWORD(buf[0]) = 136447746;
                  *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                  WORD2(buf[1]) = 2082;
                  *(_QWORD *)((char *)&buf[1] + 6) = id_string;
                  HIWORD(buf[2]) = 2082;
                  buf[3] = v65;
                  LOWORD(buf[4]) = 2082;
                  *(_QWORD *)((char *)&buf[4] + 2) = v67;
                  WORD1(buf[5]) = 2082;
                  *(_QWORD *)((char *)&buf[5] + 4) = v68;
                  WORD2(buf[6]) = 2082;
                  *(_QWORD *)((char *)&buf[6] + 6) = v69;
                  HIWORD(buf[7]) = 2114;
                  buf[8] = v70;
                  _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] agents failed to become active", (uint8_t *)buf, 0x48u);

                }
LABEL_252:

                v2 = (uint64_t)v424;
                goto LABEL_253;
              }
              goto LABEL_253;
            }
          }
          else
          {

          }
          v2 = (uint64_t)v424;
          if ((*((_BYTE *)v424 + 268) & 0x20) == 0)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v63 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v63, OS_LOG_TYPE_INFO))
            {
              if ((*((_BYTE *)v424 + 268) & 1) != 0)
                v136 = "dry-run ";
              else
                v136 = "";
              v137 = nw_endpoint_handler_copy_endpoint(v59);
              v138 = nw_endpoint_get_logging_description(v137);
              v139 = v424->state;
              if (v139 > 5)
                v140 = "unknown-state";
              else
                v140 = off_1E149FC48[v139];
              v156 = v59;
              v157 = (os_unfair_lock_s *)v156;
              v158 = "path";
              switch(v424->mode)
              {
                case 0:
                  break;
                case 1:
                  v158 = "resolver";
                  break;
                case 2:
                  v158 = nw_endpoint_flow_mode_string(*((void **)v156 + 31));
                  break;
                case 3:
                  v158 = "proxy";
                  break;
                case 4:
                  v158 = "fallback";
                  break;
                case 5:
                  v158 = "transform";
                  break;
                default:
                  v158 = "unknown-mode";
                  break;
              }

              v195 = v157 + 28;
              v196 = v157;
              os_unfair_lock_lock(v157 + 28);
              v197 = v424->current_path;
              os_unfair_lock_unlock(v195);

              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v59 + 168;
              HIWORD(buf[2]) = 2082;
              buf[3] = v136;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v138;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v140;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v158;
              HIWORD(buf[7]) = 2114;
              buf[8] = v197;
              _os_log_impl(&dword_182FBE000, v63, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] agents failed to become active", (uint8_t *)buf, 0x48u);

            }
            goto LABEL_252;
          }
LABEL_253:
          if (*(_DWORD *)(v2 + 120) != 1 || *(_DWORD *)(v2 + 116))
            goto LABEL_441;
          goto LABEL_296;
        }
        if (*(_DWORD *)(v2 + 116) == 2 && nw_endpoint_flow_get_is_leaf_handler(*(void **)(v2 + 248)))
        {
          v82 = *(_DWORD *)(v2 + 120);
          minimize_logging = nw_endpoint_handler_get_minimize_logging((void *)v2);
          logging_disabled = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v82 == 3)
          {
            if (minimize_logging)
            {
              if ((logging_disabled & 1) != 0)
                goto LABEL_351;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v85 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_DEBUG))
              {
                v331 = nw_endpoint_handler_get_id_string(v424);
                v332 = nw_endpoint_handler_dry_run_string(v424);
                v333 = nw_endpoint_handler_copy_endpoint(v424);
                v334 = nw_endpoint_get_logging_description(v333);
                v335 = nw_endpoint_handler_state_string(v424);
                v336 = nw_endpoint_handler_mode_string(v424);
                v337 = nw_endpoint_handler_copy_current_path(v424);
                LODWORD(buf[0]) = 136447746;
                *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(_QWORD *)((char *)&buf[1] + 6) = v331;
                HIWORD(buf[2]) = 2082;
                buf[3] = v332;
                LOWORD(buf[4]) = 2082;
                *(_QWORD *)((char *)&buf[4] + 2) = v334;
                WORD1(buf[5]) = 2082;
                *(_QWORD *)((char *)&buf[5] + 4) = v335;
                WORD2(buf[6]) = 2082;
                *(_QWORD *)((char *)&buf[6] + 6) = v336;
                HIWORD(buf[7]) = 2114;
                buf[8] = v337;
                _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow was ready previously, handling updated path", (uint8_t *)buf, 0x48u);

              }
              goto LABEL_121;
            }
            if ((logging_disabled & 1) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v85 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v85, OS_LOG_TYPE_INFO))
              {
                v86 = nw_endpoint_handler_get_id_string((void *)v2);
                v87 = nw_endpoint_handler_dry_run_string((void *)v2);
                v88 = nw_endpoint_handler_copy_endpoint((void *)v2);
                v89 = nw_endpoint_get_logging_description(v88);
                v90 = nw_endpoint_handler_state_string((void *)v2);
                v91 = nw_endpoint_handler_mode_string((void *)v2);
                v92 = nw_endpoint_handler_copy_current_path((void *)v2);
                LODWORD(buf[0]) = 136447746;
                *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(_QWORD *)((char *)&buf[1] + 6) = v86;
                HIWORD(buf[2]) = 2082;
                buf[3] = v87;
                LOWORD(buf[4]) = 2082;
                *(_QWORD *)((char *)&buf[4] + 2) = v89;
                WORD1(buf[5]) = 2082;
                *(_QWORD *)((char *)&buf[5] + 4) = v90;
                WORD2(buf[6]) = 2082;
                *(_QWORD *)((char *)&buf[6] + 6) = v91;
                HIWORD(buf[7]) = 2114;
                buf[8] = v92;
                _os_log_impl(&dword_182FBE000, v85, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow was ready previously, handling updated path", (uint8_t *)buf, 0x48u);

              }
LABEL_121:

              v2 = (uint64_t)v424;
            }
LABEL_351:
            v271 = *(id *)(v2 + 248);
            objc_msgSend(v271, "updatePathWithHandler:", v2);

            goto LABEL_440;
          }
          if (!minimize_logging)
          {
            if ((logging_disabled & 1) != 0)
            {
LABEL_296:
              nw_endpoint_handler_handle_failure((void *)v2);
              nw_endpoint_handler_report((void *)v2, 0, 0, 0);
              goto LABEL_441;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v181 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v181, OS_LOG_TYPE_INFO))
            {
LABEL_234:

              v2 = (uint64_t)v424;
              goto LABEL_296;
            }
LABEL_233:
            v182 = nw_endpoint_handler_get_id_string((void *)v2);
            v183 = nw_endpoint_handler_dry_run_string((void *)v2);
            v184 = nw_endpoint_handler_copy_endpoint((void *)v2);
            v185 = nw_endpoint_get_logging_description(v184);
            v186 = nw_endpoint_handler_state_string((void *)v2);
            v187 = nw_endpoint_handler_mode_string((void *)v2);
            v188 = nw_endpoint_handler_copy_current_path((void *)v2);
            LODWORD(buf[0]) = 136447746;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(_QWORD *)((char *)&buf[1] + 6) = v182;
            HIWORD(buf[2]) = 2082;
            buf[3] = v183;
            LOWORD(buf[4]) = 2082;
            *(_QWORD *)((char *)&buf[4] + 2) = v185;
            WORD1(buf[5]) = 2082;
            *(_QWORD *)((char *)&buf[5] + 4) = v186;
            WORD2(buf[6]) = 2082;
            *(_QWORD *)((char *)&buf[6] + 6) = v187;
            HIWORD(buf[7]) = 2114;
            buf[8] = v188;
            _os_log_impl(&dword_182FBE000, v181, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow is no longer satisfied", (uint8_t *)buf, 0x48u);

            goto LABEL_234;
          }
          if ((logging_disabled & 1) != 0)
            goto LABEL_296;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v181 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG))
            goto LABEL_234;
          goto LABEL_466;
        }
        if (*(int *)(v2 + 120) > 2)
        {
LABEL_441:
          _Block_object_dispose(&v432, 8);
          goto LABEL_442;
        }
        v93 = (id)v2;
        v94 = v93;
        v95 = *(void **)(v2 + 32);
        if (v95)
        {
          v96 = v95;
          v97 = (v96[12] & 0x4000000000) == 0;

          if (!v97)
          {
            v2 = (uint64_t)v424;
            if ((nw_endpoint_handler_get_logging_disabled(v94) & 1) != 0)
              goto LABEL_295;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v98 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v98, OS_LOG_TYPE_DEBUG))
            {
              v99 = nw_endpoint_handler_get_id_string(v94);
              v100 = nw_endpoint_handler_dry_run_string(v94);
              v101 = nw_endpoint_handler_copy_endpoint(v94);
              v102 = nw_endpoint_get_logging_description(v101);
              v103 = nw_endpoint_handler_state_string(v94);
              v104 = nw_endpoint_handler_mode_string(v94);
              v105 = nw_endpoint_handler_copy_current_path(v94);
              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v99;
              HIWORD(buf[2]) = 2082;
              buf[3] = v100;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v102;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v103;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v104;
              HIWORD(buf[7]) = 2114;
              buf[8] = v105;
              _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying to satisfy agents", (uint8_t *)buf, 0x48u);

            }
            goto LABEL_294;
          }
        }
        else
        {

        }
        v2 = (uint64_t)v424;
        if ((*((_BYTE *)v424 + 268) & 0x20) != 0)
          goto LABEL_295;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v98 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v98, OS_LOG_TYPE_INFO))
        {
          v170 = v94;

          v171 = v170;
          v172 = (*((_BYTE *)v424 + 268) & 1) == 0;

          if (v172)
            v173 = "";
          else
            v173 = "dry-run ";
          v174 = nw_endpoint_handler_copy_endpoint(v171);
          v175 = nw_endpoint_get_logging_description(v174);
          v176 = v171;
          v177 = v176;
          v178 = v424->state;
          v423 = v175;
          v179 = v173;
          if (v178 > 5)
            v180 = "unknown-state";
          else
            v180 = off_1E149FC48[v178];

          v192 = v177;
          v193 = v192;
          v194 = "path";
          switch(v424->mode)
          {
            case 0:
              break;
            case 1:
              v194 = "resolver";
              break;
            case 2:
              v194 = nw_endpoint_flow_mode_string(v192[31]);
              break;
            case 3:
              v194 = "proxy";
              break;
            case 4:
              v194 = "fallback";
              break;
            case 5:
              v194 = "transform";
              break;
            default:
              v194 = "unknown-mode";
              break;
          }

          v221 = v193;
          os_unfair_lock_lock(v221 + 28);
          v222 = v424->current_path;
          os_unfair_lock_unlock(v221 + 28);

          LODWORD(buf[0]) = 136447746;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v170 + 168;
          HIWORD(buf[2]) = 2082;
          buf[3] = v179;
          LOWORD(buf[4]) = 2082;
          *(_QWORD *)((char *)&buf[4] + 2) = v423;
          WORD1(buf[5]) = 2082;
          *(_QWORD *)((char *)&buf[5] + 4) = v180;
          WORD2(buf[6]) = 2082;
          *(_QWORD *)((char *)&buf[6] + 6) = v194;
          HIWORD(buf[7]) = 2114;
          buf[8] = v222;
          _os_log_impl(&dword_182FBE000, v98, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying to satisfy agents", (uint8_t *)buf, 0x48u);

        }
LABEL_294:

        v2 = (uint64_t)v424;
LABEL_295:
        if ((nw_endpoint_handler_trigger_agents(v94, 0) & 1) == 0)
          goto LABEL_296;
        goto LABEL_441;
      }
      v71 = has_custom_proxy_configs;
      v72 = *(_DWORD *)(v2 + 120);
      if (v72 == 1 && *(_DWORD *)(v2 + 116) == 2 && *(_QWORD *)(v2 + 248))
      {
        if (v5 != 1 && !*((_BYTE *)v433 + 24))
        {
          if (v24)
          {
            *(_DWORD *)(v2 + 80) = 393217;
            nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
          }
          goto LABEL_260;
        }
        *(_DWORD *)(v2 + 80) = 196609;
        nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
        v73 = (void **)(id)v2;
        if (*(_DWORD *)(v2 + 120) != 1
          || (v74 = *(_DWORD *)(v2 + 116)) != 0
          && (v74 != 2 || (nw_endpoint_flow_get_is_leaf_handler(*(void **)(v2 + 248)) & 1) != 0)
          || (*(_BYTE *)(v2 + 268) & 1) != 0)
        {

          v2 = (uint64_t)v424;
        }
        else
        {
          should_fallback = nw_path_should_fallback(*(void **)(v2 + 64), 0);

          v2 = (uint64_t)v424;
          if (should_fallback)
          {
LABEL_260:
            v200 = mach_continuous_time();
            if (v200 <= 1)
              v201 = 1;
            else
              v201 = v200;
            *(_QWORD *)(v2 + 128) = v201;
            v202 = *(id *)(v2 + 248);
            objc_msgSend(v202, "startWithHandler:", v2);

            goto LABEL_440;
          }
        }
        if (!nw_endpoint_handler_should_transform(v73[3], *(void **)(v2 + 32))
          && !nw_endpoint_proxy_handler_should_use_proxy(v73, *(void **)(v2 + 64), v71)
          && !nw_parameters_has_persistent_protocol_in_stack(*(void **)(v2 + 32))
          && nw_path_can_support_endpoint(*(void **)(v2 + 64), v73[3]))
        {
          nw_endpoint_flow_reset_is_leaf_handler(*(void **)(v2 + 248), 1);
        }
        goto LABEL_260;
      }
      if (v5 == 1 || *((_BYTE *)v433 + 24))
      {
        v76 = *(_DWORD *)(v2 + 116);
        if (v72 == 1 && !v76)
        {
          *(_DWORD *)(v2 + 80) = 196609;
          nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
          if (*(_DWORD *)(v2 + 120) == 5)
            goto LABEL_441;
          os_unfair_lock_lock((os_unfair_lock_t)(v2 + 112));
          if ((*(_BYTE *)(v2 + 268) & 1) == 0
            && nw_endpoint_handler_has_persistent_application_protocols(v2)
            && !nw_path_can_support_endpoint(*(void **)(v2 + 64), *(void **)(v2 + 24)))
          {
            *(_DWORD *)(v2 + 116) = 2;
            v207 = *(_QWORD *)(v2 + 72);
            v208 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
            *((_BYTE *)v208 + 32) = *((_BYTE *)v208 + 32) & 0xFC | (v207 == 0);
            v209 = *(void **)(v2 + 248);
            *(_QWORD *)(v2 + 248) = v208;
LABEL_396:

            v155 = v424;
            goto LABEL_397;
          }
          v77 = (void **)(id)v2;
          v78 = v77;
          if (*(_DWORD *)(v2 + 120) != 1
            || (v79 = *(_DWORD *)(v2 + 116)) != 0
            && (v79 != 2 || (nw_endpoint_flow_get_is_leaf_handler(v77[31]) & 1) != 0)
            || (*(_BYTE *)(v2 + 268) & 1) != 0)
          {

          }
          else
          {
            v80 = nw_path_should_fallback(*(void **)(v2 + 64), 0);

            if (v80)
            {
              if ((*((_BYTE *)v424 + 268) & 1) != 0 || v78[9])
              {
                v424->mode = 4;
                v81 = objc_alloc_init(NWConcrete_nw_endpoint_fallback);
LABEL_395:
                v209 = v78[31];
                v78[31] = v81;
                goto LABEL_396;
              }
              goto LABEL_393;
            }
          }
          v155 = v424;
          if (nw_endpoint_handler_should_transform(v78[3], v424->parameters))
          {
            if ((*((_BYTE *)v424 + 268) & 1) != 0 || v78[9])
            {
              v424->mode = 5;
              v81 = objc_alloc_init(NWConcrete_nw_endpoint_transform);
              goto LABEL_395;
            }
          }
          else if (nw_endpoint_proxy_handler_should_use_proxy(v78, v424->current_path, v71))
          {
            if ((*((_BYTE *)v424 + 268) & 1) != 0 || v78[9])
            {
              v424->mode = 3;
              v81 = objc_alloc_init(NWConcrete_nw_endpoint_proxy);
              goto LABEL_395;
            }
          }
          else
          {
            if (nw_path_can_support_endpoint(v424->current_path, v78[3]))
            {
              v424->mode = 2;
              v198 = v78[9];
              v81 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
              v199 = (uint64_t)v81->connected_child & 0xFC | (v198 == 0) | 2;
LABEL_394:
              LOBYTE(v81->connected_child) = v199;
              goto LABEL_395;
            }
            if (!nw_path_can_resolve_endpoint(v424->current_path, v78[3]))
            {
LABEL_397:
              os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 112));
              v300 = mach_continuous_time();
              if (v300 <= 1)
                v301 = 1;
              else
                v301 = v300;
              v155->start_time = v301;
              v302 = v155->mode_handler;
              -[NWConcrete_nw_endpoint_mode_handler startWithHandler:](v302, "startWithHandler:", v155);

              goto LABEL_440;
            }
            if ((*((_BYTE *)v424 + 268) & 1) != 0 || v78[9])
            {
              v424->mode = 1;
              v81 = objc_alloc_init(NWConcrete_nw_endpoint_resolver);
              goto LABEL_395;
            }
          }
LABEL_393:
          v424->mode = 2;
          v81 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
          v199 = (uint64_t)v81->connected_child & 0xFC | 1;
          goto LABEL_394;
        }
        if (v76 != 2 || nw_path_changed_from_previous(*(void **)(v2 + 64)))
        {
          *(_DWORD *)(v2 + 80) = 327681;
          nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
          if (*(_DWORD *)(v2 + 120) == 5)
            goto LABEL_441;
        }
        if (!nw_endpoint_handler_should_reset_for_fallback((NWConcrete_nw_endpoint_handler *)v2)
          || *(_QWORD *)(v2 + 136)
          || ((v106 = mach_continuous_time(), v106 <= 1) ? (v107 = 1) : (v107 = v106),
              v108 = *(_QWORD *)(v2 + 128),
              v107 < v108))
        {
LABEL_439:
          v328 = *(id *)(v2 + 248);
          objc_msgSend(v328, "updatePathWithHandler:", v2);

          goto LABEL_440;
        }
        v109 = nw_delta_nanos(v108, v107);
        timeout_nanos_for_path = nw_endpoint_fallback_get_timeout_nanos_for_path(*(void **)(v2 + 64));
        v111 = timeout_nanos_for_path >= v109;
        v112 = timeout_nanos_for_path - v109;
        if (v112 == 0 || !v111)
        {
          v223 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          v224 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v223)
          {
            if ((v224 & 1) != 0)
              goto LABEL_305;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v225 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v225, OS_LOG_TYPE_DEBUG))
            {
              v359 = nw_endpoint_handler_get_id_string(v424);
              v360 = nw_endpoint_handler_dry_run_string(v424);
              v361 = nw_endpoint_handler_copy_endpoint(v424);
              v362 = nw_endpoint_get_logging_description(v361);
              v363 = nw_endpoint_handler_state_string(v424);
              v364 = nw_endpoint_handler_mode_string(v424);
              v365 = nw_endpoint_handler_copy_current_path(v424);
              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v359;
              HIWORD(buf[2]) = 2082;
              buf[3] = v360;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v362;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v363;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v364;
              HIWORD(buf[7]) = 2114;
              buf[8] = v365;
              _os_log_impl(&dword_182FBE000, v225, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback became enabled on path and timeout has already passed, resetting", (uint8_t *)buf, 0x48u);

            }
          }
          else
          {
            if ((v224 & 1) != 0)
            {
LABEL_305:
              nw_endpoint_handler_reset_mode((void *)v2, 1);
              goto LABEL_439;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v225 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v225, OS_LOG_TYPE_INFO))
            {
              v226 = nw_endpoint_handler_get_id_string((void *)v2);
              v227 = nw_endpoint_handler_dry_run_string((void *)v2);
              v228 = nw_endpoint_handler_copy_endpoint((void *)v2);
              v229 = nw_endpoint_get_logging_description(v228);
              v230 = nw_endpoint_handler_state_string((void *)v2);
              v231 = nw_endpoint_handler_mode_string((void *)v2);
              v232 = nw_endpoint_handler_copy_current_path((void *)v2);
              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v226;
              HIWORD(buf[2]) = 2082;
              buf[3] = v227;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v229;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v230;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v231;
              HIWORD(buf[7]) = 2114;
              buf[8] = v232;
              _os_log_impl(&dword_182FBE000, v225, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback became enabled on path and timeout has already passed, resetting", (uint8_t *)buf, 0x48u);

            }
          }

          v2 = (uint64_t)v424;
          goto LABEL_305;
        }
        v113 = *(void **)(v2 + 40);
        v426[0] = MEMORY[0x1E0C809B0];
        v426[1] = 3221225472;
        v426[2] = ___ZL31nw_endpoint_handler_path_changeP30NWConcrete_nw_endpoint_handler_block_invoke_138;
        v426[3] = &unk_1E14ACFD0;
        v114 = (id)v2;
        v427 = v114;
        *(_QWORD *)(v2 + 136) = nw_queue_context_create_source(v113, 2, 3, 0, v426, 0);
        LODWORD(v113) = nw_endpoint_handler_get_minimize_logging(v114);
        v115 = nw_endpoint_handler_get_logging_disabled(v114);
        if ((_DWORD)v113)
        {
          if ((v115 & 1) != 0)
          {
LABEL_149:
            v124 = *(_QWORD *)(v2 + 136);
            if (v124)
            {
              v125 = dispatch_time(0x8000000000000000, v112);
              nw_queue_set_timer_values(v124, v125, 0xFFFFFFFFFFFFFFFFLL, 0xF4240uLL);
              nw_queue_activate_source(*(_QWORD *)(v2 + 136), v126);
LABEL_438:

              v2 = (uint64_t)v424;
              goto LABEL_439;
            }
            __nwlog_obj();
            v272 = (void *)objc_claimAutoreleasedReturnValue();
            LODWORD(buf[0]) = 136446210;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            v273 = (char *)_os_log_send_and_compose_impl();

            LOBYTE(v436[0]) = 16;
            v425 = 0;
            if (__nwlog_fault(v273, v436, &v425))
            {
              if (LOBYTE(v436[0]) == 17)
              {
                __nwlog_obj();
                v274 = objc_claimAutoreleasedReturnValue();
                v275 = v436[0];
                if (os_log_type_enabled(v274, v436[0]))
                {
                  LODWORD(buf[0]) = 136446210;
                  *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                  _os_log_impl(&dword_182FBE000, v274, v275, "%{public}s nw_queue_context_create_source(timer) failed", (uint8_t *)buf, 0xCu);
                }
              }
              else if (v425)
              {
                v297 = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v274 = objc_claimAutoreleasedReturnValue();
                v298 = v436[0];
                v299 = os_log_type_enabled(v274, v436[0]);
                if (v297)
                {
                  if (v299)
                  {
                    LODWORD(buf[0]) = 136446466;
                    *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                    WORD2(buf[1]) = 2082;
                    *(_QWORD *)((char *)&buf[1] + 6) = v297;
                    _os_log_impl(&dword_182FBE000, v274, v298, "%{public}s nw_queue_context_create_source(timer) failed, dumping backtrace:%{public}s", (uint8_t *)buf, 0x16u);
                  }

                  free(v297);
                  goto LABEL_436;
                }
                if (v299)
                {
                  LODWORD(buf[0]) = 136446210;
                  *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                  _os_log_impl(&dword_182FBE000, v274, v298, "%{public}s nw_queue_context_create_source(timer) failed, no backtrace", (uint8_t *)buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v274 = objc_claimAutoreleasedReturnValue();
                v318 = v436[0];
                if (os_log_type_enabled(v274, v436[0]))
                {
                  LODWORD(buf[0]) = 136446210;
                  *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                  _os_log_impl(&dword_182FBE000, v274, v318, "%{public}s nw_queue_context_create_source(timer) failed, backtrace limit exceeded", (uint8_t *)buf, 0xCu);
                }
              }

            }
LABEL_436:
            if (v273)
              free(v273);
            goto LABEL_438;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v116 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v116, OS_LOG_TYPE_DEBUG))
          {
            v366 = nw_endpoint_handler_get_id_string(v114);
            v367 = nw_endpoint_handler_dry_run_string(v114);
            v368 = nw_endpoint_handler_copy_endpoint(v114);
            v369 = nw_endpoint_get_logging_description(v368);
            v370 = nw_endpoint_handler_state_string(v114);
            v371 = nw_endpoint_handler_mode_string(v114);
            v372 = nw_endpoint_handler_copy_current_path(v114);
            LODWORD(buf[0]) = 136448002;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(_QWORD *)((char *)&buf[1] + 6) = v366;
            HIWORD(buf[2]) = 2082;
            buf[3] = v367;
            LOWORD(buf[4]) = 2082;
            *(_QWORD *)((char *)&buf[4] + 2) = v369;
            WORD1(buf[5]) = 2082;
            *(_QWORD *)((char *)&buf[5] + 4) = v370;
            WORD2(buf[6]) = 2082;
            *(_QWORD *)((char *)&buf[6] + 6) = v371;
            HIWORD(buf[7]) = 2114;
            buf[8] = v372;
            LOWORD(buf[9]) = 2048;
            *(_QWORD *)((char *)&buf[9] + 2) = v112 / 0xF4240;
            _os_log_impl(&dword_182FBE000, v116, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback became enabled on path, setting timer for %llums before resetting", (uint8_t *)buf, 0x52u);

          }
        }
        else
        {
          if ((v115 & 1) != 0)
            goto LABEL_149;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v116 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v116, OS_LOG_TYPE_INFO))
          {
            v117 = nw_endpoint_handler_get_id_string(v114);
            v118 = nw_endpoint_handler_dry_run_string(v114);
            v119 = nw_endpoint_handler_copy_endpoint(v114);
            v120 = nw_endpoint_get_logging_description(v119);
            v121 = nw_endpoint_handler_state_string(v114);
            v122 = nw_endpoint_handler_mode_string(v114);
            v123 = nw_endpoint_handler_copy_current_path(v114);
            LODWORD(buf[0]) = 136448002;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(_QWORD *)((char *)&buf[1] + 6) = v117;
            HIWORD(buf[2]) = 2082;
            buf[3] = v118;
            LOWORD(buf[4]) = 2082;
            *(_QWORD *)((char *)&buf[4] + 2) = v120;
            WORD1(buf[5]) = 2082;
            *(_QWORD *)((char *)&buf[5] + 4) = v121;
            WORD2(buf[6]) = 2082;
            *(_QWORD *)((char *)&buf[6] + 6) = v122;
            HIWORD(buf[7]) = 2114;
            buf[8] = v123;
            LOWORD(buf[9]) = 2048;
            *(_QWORD *)((char *)&buf[9] + 2) = v112 / 0xF4240;
            _os_log_impl(&dword_182FBE000, v116, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] fallback became enabled on path, setting timer for %llums before resetting", (uint8_t *)buf, 0x52u);

          }
        }

        v2 = (uint64_t)v424;
        goto LABEL_149;
      }
      if (!v24)
      {
        if ((nw_endpoint_handler_get_logging_disabled((void *)v2) & 1) != 0)
          goto LABEL_441;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v159 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v159, OS_LOG_TYPE_ERROR))
        {
          v160 = nw_endpoint_handler_get_id_string(v424);
          v161 = nw_endpoint_handler_dry_run_string(v424);
          v162 = nw_endpoint_handler_copy_endpoint(v424);
          v163 = nw_endpoint_get_logging_description(v162);
          v164 = nw_endpoint_handler_state_string(v424);
          v165 = nw_endpoint_handler_mode_string(v424);
          v166 = nw_endpoint_handler_copy_current_path(v424);
          LODWORD(buf[0]) = 136448002;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v160;
          HIWORD(buf[2]) = 2082;
          buf[3] = v161;
          LOWORD(buf[4]) = 2082;
          *(_QWORD *)((char *)&buf[4] + 2) = v163;
          WORD1(buf[5]) = 2082;
          *(_QWORD *)((char *)&buf[5] + 4) = v164;
          WORD2(buf[6]) = 2082;
          *(_QWORD *)((char *)&buf[6] + 6) = v165;
          HIWORD(buf[7]) = 2114;
          buf[8] = v166;
          LOWORD(buf[9]) = 1024;
          *(_DWORD *)((char *)&buf[9] + 2) = v5;
          _os_log_impl(&dword_182FBE000, v159, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] endpoint handler path in unknown state: %d", (uint8_t *)buf, 0x4Eu);

        }
        goto LABEL_518;
      }
      *(_DWORD *)(v2 + 80) = 393217;
      nw_endpoint_handler_report((void *)v2, 0, (_WORD *)(v2 + 80), 0);
      if (*(_DWORD *)(v2 + 120) == 5)
        goto LABEL_441;
      if (nw_endpoint_handler_should_start_fallback((NWConcrete_nw_endpoint_handler *)v2))
      {
        v141 = nw_endpoint_handler_get_minimize_logging((void *)v2);
        v142 = nw_endpoint_handler_get_logging_disabled((void *)v2);
        if (v141)
        {
          if ((v142 & 1) != 0)
          {
LABEL_184:
            os_unfair_lock_lock((os_unfair_lock_t)(v2 + 112));
            if ((*(_BYTE *)(v2 + 268) & 1) != 0 || *(_QWORD *)(v2 + 72))
            {
              *(_DWORD *)(v2 + 116) = 4;
              v151 = objc_alloc_init(NWConcrete_nw_endpoint_fallback);
            }
            else
            {
              *(_DWORD *)(v2 + 116) = 2;
              v151 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
              LOBYTE(v151->primary_child) = (uint64_t)v151->primary_child & 0xFC | 1;
            }
            v152 = *(void **)(v2 + 248);
            *(_QWORD *)(v2 + 248) = v151;

            os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 112));
            v153 = mach_continuous_time();
            if (v153 <= 1)
              v154 = 1;
            else
              v154 = v153;
LABEL_376:
            v424->start_time = v154;
            v290 = v424->mode_handler;
            -[NWConcrete_nw_endpoint_mode_handler startWithHandler:](v290, "startWithHandler:", v424);

            goto LABEL_440;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v143 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v143, OS_LOG_TYPE_DEBUG))
          {
            v345 = nw_endpoint_handler_get_id_string(v424);
            v346 = nw_endpoint_handler_dry_run_string(v424);
            v347 = nw_endpoint_handler_copy_endpoint(v424);
            v348 = nw_endpoint_get_logging_description(v347);
            v349 = nw_endpoint_handler_state_string(v424);
            v350 = nw_endpoint_handler_mode_string(v424);
            v351 = nw_endpoint_handler_copy_current_path(v424);
            LODWORD(buf[0]) = 136447746;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(_QWORD *)((char *)&buf[1] + 6) = v345;
            HIWORD(buf[2]) = 2082;
            buf[3] = v346;
            LOWORD(buf[4]) = 2082;
            *(_QWORD *)((char *)&buf[4] + 2) = v348;
            WORD1(buf[5]) = 2082;
            *(_QWORD *)((char *)&buf[5] + 4) = v349;
            WORD2(buf[6]) = 2082;
            *(_QWORD *)((char *)&buf[6] + 6) = v350;
            HIWORD(buf[7]) = 2114;
            buf[8] = v351;
            _os_log_impl(&dword_182FBE000, v143, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying fallback with unsatisfied path", (uint8_t *)buf, 0x48u);

          }
        }
        else
        {
          if ((v142 & 1) != 0)
            goto LABEL_184;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v143 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v143, OS_LOG_TYPE_INFO))
          {
            v144 = nw_endpoint_handler_get_id_string((void *)v2);
            v145 = nw_endpoint_handler_dry_run_string((void *)v2);
            v146 = nw_endpoint_handler_copy_endpoint((void *)v2);
            v147 = nw_endpoint_get_logging_description(v146);
            v148 = nw_endpoint_handler_state_string((void *)v2);
            v149 = nw_endpoint_handler_mode_string((void *)v2);
            v150 = nw_endpoint_handler_copy_current_path((void *)v2);
            LODWORD(buf[0]) = 136447746;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(_QWORD *)((char *)&buf[1] + 6) = v144;
            HIWORD(buf[2]) = 2082;
            buf[3] = v145;
            LOWORD(buf[4]) = 2082;
            *(_QWORD *)((char *)&buf[4] + 2) = v147;
            WORD1(buf[5]) = 2082;
            *(_QWORD *)((char *)&buf[5] + 4) = v148;
            WORD2(buf[6]) = 2082;
            *(_QWORD *)((char *)&buf[6] + 6) = v149;
            HIWORD(buf[7]) = 2114;
            buf[8] = v150;
            _os_log_impl(&dword_182FBE000, v143, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying fallback with unsatisfied path", (uint8_t *)buf, 0x48u);

          }
        }

        v2 = (uint64_t)v424;
        goto LABEL_184;
      }
      v210 = *(_DWORD *)(v2 + 116);
      if (v210)
      {
LABEL_274:
        if (v210 == 2)
        {
          if (*(_DWORD *)(v2 + 120) == 3 || !nw_endpoint_flow_get_is_leaf_handler(*(void **)(v2 + 248)))
          {
            v261 = nw_endpoint_handler_get_minimize_logging((void *)v2);
            v262 = nw_endpoint_handler_get_logging_disabled((void *)v2);
            if (v261)
            {
              if ((v262 & 1) != 0)
                goto LABEL_351;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v263 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v263, OS_LOG_TYPE_DEBUG))
              {
                v380 = nw_endpoint_handler_get_id_string(v424);
                v381 = nw_endpoint_handler_dry_run_string(v424);
                v382 = nw_endpoint_handler_copy_endpoint(v424);
                v383 = nw_endpoint_get_logging_description(v382);
                v384 = nw_endpoint_handler_state_string(v424);
                v385 = nw_endpoint_handler_mode_string(v424);
                v386 = nw_endpoint_handler_copy_current_path(v424);
                LODWORD(buf[0]) = 136447746;
                *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(_QWORD *)((char *)&buf[1] + 6) = v380;
                HIWORD(buf[2]) = 2082;
                buf[3] = v381;
                LOWORD(buf[4]) = 2082;
                *(_QWORD *)((char *)&buf[4] + 2) = v383;
                WORD1(buf[5]) = 2082;
                *(_QWORD *)((char *)&buf[5] + 4) = v384;
                WORD2(buf[6]) = 2082;
                *(_QWORD *)((char *)&buf[6] + 6) = v385;
                HIWORD(buf[7]) = 2114;
                buf[8] = v386;
                _os_log_impl(&dword_182FBE000, v263, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow handling updated path", (uint8_t *)buf, 0x48u);

              }
            }
            else
            {
              if ((v262 & 1) != 0)
                goto LABEL_351;
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v263 = (id)gconnectionLogObj;
              if (os_log_type_enabled(v263, OS_LOG_TYPE_INFO))
              {
                v264 = nw_endpoint_handler_get_id_string((void *)v2);
                v265 = nw_endpoint_handler_dry_run_string((void *)v2);
                v266 = nw_endpoint_handler_copy_endpoint((void *)v2);
                v267 = nw_endpoint_get_logging_description(v266);
                v268 = nw_endpoint_handler_state_string((void *)v2);
                v269 = nw_endpoint_handler_mode_string((void *)v2);
                v270 = nw_endpoint_handler_copy_current_path((void *)v2);
                LODWORD(buf[0]) = 136447746;
                *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
                WORD2(buf[1]) = 2082;
                *(_QWORD *)((char *)&buf[1] + 6) = v264;
                HIWORD(buf[2]) = 2082;
                buf[3] = v265;
                LOWORD(buf[4]) = 2082;
                *(_QWORD *)((char *)&buf[4] + 2) = v267;
                WORD1(buf[5]) = 2082;
                *(_QWORD *)((char *)&buf[5] + 4) = v268;
                WORD2(buf[6]) = 2082;
                *(_QWORD *)((char *)&buf[6] + 6) = v269;
                HIWORD(buf[7]) = 2114;
                buf[8] = v270;
                _os_log_impl(&dword_182FBE000, v263, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow handling updated path", (uint8_t *)buf, 0x48u);

              }
            }

            v2 = (uint64_t)v424;
            goto LABEL_351;
          }
          v246 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          v247 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (!v246)
          {
            if ((v247 & 1) != 0)
              goto LABEL_296;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v181 = (id)gconnectionLogObj;
            if (!os_log_type_enabled(v181, OS_LOG_TYPE_INFO))
              goto LABEL_234;
            goto LABEL_233;
          }
          if ((v247 & 1) != 0)
            goto LABEL_296;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v181 = (id)gconnectionLogObj;
          if (!os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG))
            goto LABEL_234;
LABEL_466:
          v338 = nw_endpoint_handler_get_id_string(v424);
          v339 = nw_endpoint_handler_dry_run_string(v424);
          v340 = nw_endpoint_handler_copy_endpoint(v424);
          v341 = nw_endpoint_get_logging_description(v340);
          v342 = nw_endpoint_handler_state_string(v424);
          v343 = nw_endpoint_handler_mode_string(v424);
          v344 = nw_endpoint_handler_copy_current_path(v424);
          LODWORD(buf[0]) = 136447746;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v338;
          HIWORD(buf[2]) = 2082;
          buf[3] = v339;
          LOWORD(buf[4]) = 2082;
          *(_QWORD *)((char *)&buf[4] + 2) = v341;
          WORD1(buf[5]) = 2082;
          *(_QWORD *)((char *)&buf[5] + 4) = v342;
          WORD2(buf[6]) = 2082;
          *(_QWORD *)((char *)&buf[6] + 6) = v343;
          HIWORD(buf[7]) = 2114;
          buf[8] = v344;
          _os_log_impl(&dword_182FBE000, v181, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] flow is no longer satisfied", (uint8_t *)buf, 0x48u);

          goto LABEL_234;
        }
        if (v210 == 3)
        {
          v211 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          v212 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v211)
          {
            if ((v212 & 1) != 0)
              goto LABEL_351;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v213 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v213, OS_LOG_TYPE_DEBUG))
            {
              v373 = nw_endpoint_handler_get_id_string(v424);
              v374 = nw_endpoint_handler_dry_run_string(v424);
              v375 = nw_endpoint_handler_copy_endpoint(v424);
              v376 = nw_endpoint_get_logging_description(v375);
              v377 = nw_endpoint_handler_state_string(v424);
              v378 = nw_endpoint_handler_mode_string(v424);
              v379 = nw_endpoint_handler_copy_current_path(v424);
              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v373;
              HIWORD(buf[2]) = 2082;
              buf[3] = v374;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v376;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v377;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v378;
              HIWORD(buf[7]) = 2114;
              buf[8] = v379;
              _os_log_impl(&dword_182FBE000, v213, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] handling unsatisfied updated path for proxy", (uint8_t *)buf, 0x48u);

            }
          }
          else
          {
            if ((v212 & 1) != 0)
              goto LABEL_351;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v213 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v213, OS_LOG_TYPE_INFO))
            {
              v214 = nw_endpoint_handler_get_id_string((void *)v2);
              v215 = nw_endpoint_handler_dry_run_string((void *)v2);
              v216 = nw_endpoint_handler_copy_endpoint((void *)v2);
              v217 = nw_endpoint_get_logging_description(v216);
              v218 = nw_endpoint_handler_state_string((void *)v2);
              v219 = nw_endpoint_handler_mode_string((void *)v2);
              v220 = nw_endpoint_handler_copy_current_path((void *)v2);
              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v214;
              HIWORD(buf[2]) = 2082;
              buf[3] = v215;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v217;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v218;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v219;
              HIWORD(buf[7]) = 2114;
              buf[8] = v220;
              _os_log_impl(&dword_182FBE000, v213, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] handling unsatisfied updated path for proxy", (uint8_t *)buf, 0x48u);

            }
          }

          v2 = (uint64_t)v424;
          goto LABEL_351;
        }
        if (nw_endpoint_handler_should_perform_CrazyIvan46((NWConcrete_nw_endpoint_handler *)v2)
          || nw_endpoint_handler_should_do_local_only_resolution((NWConcrete_nw_endpoint_handler *)v2))
        {
          v248 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          v249 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v248)
          {
            if ((v249 & 1) != 0)
            {
LABEL_338:
              os_unfair_lock_lock((os_unfair_lock_t)(v2 + 112));
              if ((*(_BYTE *)(v2 + 268) & 1) != 0 || *(_QWORD *)(v2 + 72))
              {
                *(_DWORD *)(v2 + 116) = 1;
                v258 = objc_alloc_init(NWConcrete_nw_endpoint_resolver);
              }
              else
              {
                *(_DWORD *)(v2 + 116) = 2;
                v258 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
                LOBYTE(v258->connected_child) = (uint64_t)v258->connected_child & 0xFC | 1;
              }
              v259 = *(void **)(v2 + 248);
              *(_QWORD *)(v2 + 248) = v258;

              os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 112));
              v260 = mach_continuous_time();
              if (v260 <= 1)
                v154 = 1;
              else
                v154 = v260;
              goto LABEL_376;
            }
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v250 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v250, OS_LOG_TYPE_DEBUG))
            {
              v387 = nw_endpoint_handler_get_id_string(v424);
              v388 = nw_endpoint_handler_dry_run_string(v424);
              v389 = nw_endpoint_handler_copy_endpoint(v424);
              v390 = nw_endpoint_get_logging_description(v389);
              v391 = nw_endpoint_handler_state_string(v424);
              v392 = nw_endpoint_handler_mode_string(v424);
              v393 = nw_endpoint_handler_copy_current_path(v424);
              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v387;
              HIWORD(buf[2]) = 2082;
              buf[3] = v388;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v390;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v391;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v392;
              HIWORD(buf[7]) = 2114;
              buf[8] = v393;
              _os_log_impl(&dword_182FBE000, v250, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying resolution with unsatisfied path", (uint8_t *)buf, 0x48u);

            }
          }
          else
          {
            if ((v249 & 1) != 0)
              goto LABEL_338;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v250 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v250, OS_LOG_TYPE_INFO))
            {
              v251 = nw_endpoint_handler_get_id_string((void *)v2);
              v252 = nw_endpoint_handler_dry_run_string((void *)v2);
              v253 = nw_endpoint_handler_copy_endpoint((void *)v2);
              v254 = nw_endpoint_get_logging_description(v253);
              v255 = nw_endpoint_handler_state_string((void *)v2);
              v256 = nw_endpoint_handler_mode_string((void *)v2);
              v257 = nw_endpoint_handler_copy_current_path((void *)v2);
              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v251;
              HIWORD(buf[2]) = 2082;
              buf[3] = v252;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v254;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v255;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v256;
              HIWORD(buf[7]) = 2114;
              buf[8] = v257;
              _os_log_impl(&dword_182FBE000, v250, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying resolution with unsatisfied path", (uint8_t *)buf, 0x48u);

            }
          }

          v2 = (uint64_t)v424;
          goto LABEL_338;
        }
        if (!*(_DWORD *)(v2 + 116))
        {
          if (!nw_path_trigger_inactive_cellular_agent_if_necessary(*(void **)(v2 + 64)))
            goto LABEL_296;
          v319 = nw_endpoint_handler_get_minimize_logging((void *)v2);
          v320 = nw_endpoint_handler_get_logging_disabled((void *)v2);
          if (v319)
          {
            v2 = (uint64_t)v424;
            if ((v320 & 1) != 0)
              goto LABEL_296;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v181 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v181, OS_LOG_TYPE_DEBUG))
            {
              v408 = nw_endpoint_handler_get_id_string(v424);
              v409 = nw_endpoint_handler_dry_run_string(v424);
              v410 = nw_endpoint_handler_copy_endpoint(v424);
              v411 = nw_endpoint_get_logging_description(v410);
              v412 = nw_endpoint_handler_state_string(v424);
              v413 = nw_endpoint_handler_mode_string(v424);
              v414 = nw_endpoint_handler_copy_current_path(v424);
              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v408;
              HIWORD(buf[2]) = 2082;
              buf[3] = v409;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v411;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v412;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v413;
              HIWORD(buf[7]) = 2114;
              buf[8] = v414;
              _os_log_impl(&dword_182FBE000, v181, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] triggering cell", (uint8_t *)buf, 0x48u);

            }
          }
          else
          {
            v2 = (uint64_t)v424;
            if ((v320 & 1) != 0)
              goto LABEL_296;
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v181 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v181, OS_LOG_TYPE_INFO))
            {
              v321 = nw_endpoint_handler_get_id_string(v424);
              v322 = nw_endpoint_handler_dry_run_string(v424);
              v323 = nw_endpoint_handler_copy_endpoint(v424);
              v324 = nw_endpoint_get_logging_description(v323);
              v325 = nw_endpoint_handler_state_string(v424);
              v326 = nw_endpoint_handler_mode_string(v424);
              v327 = nw_endpoint_handler_copy_current_path(v424);
              LODWORD(buf[0]) = 136447746;
              *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
              WORD2(buf[1]) = 2082;
              *(_QWORD *)((char *)&buf[1] + 6) = v321;
              HIWORD(buf[2]) = 2082;
              buf[3] = v322;
              LOWORD(buf[4]) = 2082;
              *(_QWORD *)((char *)&buf[4] + 2) = v324;
              WORD1(buf[5]) = 2082;
              *(_QWORD *)((char *)&buf[5] + 4) = v325;
              WORD2(buf[6]) = 2082;
              *(_QWORD *)((char *)&buf[6] + 6) = v326;
              HIWORD(buf[7]) = 2114;
              buf[8] = v327;
              _os_log_impl(&dword_182FBE000, v181, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] triggering cell", (uint8_t *)buf, 0x48u);

            }
          }
          goto LABEL_234;
        }
        v303 = nw_endpoint_handler_get_minimize_logging((void *)v2);
        v304 = nw_endpoint_handler_get_logging_disabled((void *)v2);
        if (v303)
        {
          if ((v304 & 1) != 0)
            goto LABEL_441;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v159 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v159, OS_LOG_TYPE_DEBUG))
          {
            v401 = nw_endpoint_handler_get_id_string(v424);
            v402 = nw_endpoint_handler_dry_run_string(v424);
            v403 = nw_endpoint_handler_copy_endpoint(v424);
            v404 = nw_endpoint_get_logging_description(v403);
            v405 = nw_endpoint_handler_state_string(v424);
            v406 = nw_endpoint_handler_mode_string(v424);
            v407 = nw_endpoint_handler_copy_current_path(v424);
            LODWORD(buf[0]) = 136447746;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(_QWORD *)((char *)&buf[1] + 6) = v401;
            HIWORD(buf[2]) = 2082;
            buf[3] = v402;
            LOWORD(buf[4]) = 2082;
            *(_QWORD *)((char *)&buf[4] + 2) = v404;
            WORD1(buf[5]) = 2082;
            *(_QWORD *)((char *)&buf[5] + 4) = v405;
            WORD2(buf[6]) = 2082;
            *(_QWORD *)((char *)&buf[6] + 6) = v406;
            HIWORD(buf[7]) = 2114;
            buf[8] = v407;
            _os_log_impl(&dword_182FBE000, v159, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring unsatisfied path", (uint8_t *)buf, 0x48u);

          }
        }
        else
        {
          if ((v304 & 1) != 0)
            goto LABEL_441;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v159 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v159, OS_LOG_TYPE_INFO))
          {
            v305 = nw_endpoint_handler_get_id_string(v424);
            v306 = nw_endpoint_handler_dry_run_string(v424);
            v307 = nw_endpoint_handler_copy_endpoint(v424);
            v308 = nw_endpoint_get_logging_description(v307);
            v309 = nw_endpoint_handler_state_string(v424);
            v310 = nw_endpoint_handler_mode_string(v424);
            v311 = nw_endpoint_handler_copy_current_path(v424);
            LODWORD(buf[0]) = 136447746;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(_QWORD *)((char *)&buf[1] + 6) = v305;
            HIWORD(buf[2]) = 2082;
            buf[3] = v306;
            LOWORD(buf[4]) = 2082;
            *(_QWORD *)((char *)&buf[4] + 2) = v308;
            WORD1(buf[5]) = 2082;
            *(_QWORD *)((char *)&buf[5] + 4) = v309;
            WORD2(buf[6]) = 2082;
            *(_QWORD *)((char *)&buf[6] + 6) = v310;
            HIWORD(buf[7]) = 2114;
            buf[8] = v311;
            _os_log_impl(&dword_182FBE000, v159, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] ignoring unsatisfied path", (uint8_t *)buf, 0x48u);

          }
        }
LABEL_518:

        goto LABEL_440;
      }
      if (nw_endpoint_handler_should_transform(*(void **)(v2 + 24), *(void **)(v2 + 32)))
      {
        v233 = nw_endpoint_handler_get_minimize_logging((void *)v2);
        v234 = nw_endpoint_handler_get_logging_disabled((void *)v2);
        if (v233)
        {
          if ((v234 & 1) != 0)
          {
LABEL_314:
            os_unfair_lock_lock((os_unfair_lock_t)(v2 + 112));
            if ((*(_BYTE *)(v2 + 268) & 1) != 0 || *(_QWORD *)(v2 + 72))
            {
              *(_DWORD *)(v2 + 116) = 5;
              v243 = objc_alloc_init(NWConcrete_nw_endpoint_transform);
            }
            else
            {
              *(_DWORD *)(v2 + 116) = 2;
              v243 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
              LOBYTE(v243->blocked_protocols) = (uint64_t)v243->blocked_protocols & 0xFC | 1;
            }
            v244 = *(void **)(v2 + 248);
            *(_QWORD *)(v2 + 248) = v243;

            os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 112));
            v245 = mach_continuous_time();
            if (v245 <= 1)
              v154 = 1;
            else
              v154 = v245;
            goto LABEL_376;
          }
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v235 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v235, OS_LOG_TYPE_DEBUG))
          {
            v394 = nw_endpoint_handler_get_id_string(v424);
            v395 = nw_endpoint_handler_dry_run_string(v424);
            v396 = nw_endpoint_handler_copy_endpoint(v424);
            v397 = nw_endpoint_get_logging_description(v396);
            v398 = nw_endpoint_handler_state_string(v424);
            v399 = nw_endpoint_handler_mode_string(v424);
            v400 = nw_endpoint_handler_copy_current_path(v424);
            LODWORD(buf[0]) = 136447746;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(_QWORD *)((char *)&buf[1] + 6) = v394;
            HIWORD(buf[2]) = 2082;
            buf[3] = v395;
            LOWORD(buf[4]) = 2082;
            *(_QWORD *)((char *)&buf[4] + 2) = v397;
            WORD1(buf[5]) = 2082;
            *(_QWORD *)((char *)&buf[5] + 4) = v398;
            WORD2(buf[6]) = 2082;
            *(_QWORD *)((char *)&buf[6] + 6) = v399;
            HIWORD(buf[7]) = 2114;
            buf[8] = v400;
            _os_log_impl(&dword_182FBE000, v235, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying transform with unsatisfied path", (uint8_t *)buf, 0x48u);

          }
        }
        else
        {
          if ((v234 & 1) != 0)
            goto LABEL_314;
          if (__nwlog_connection_log::onceToken != -1)
            dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
          v235 = (id)gconnectionLogObj;
          if (os_log_type_enabled(v235, OS_LOG_TYPE_INFO))
          {
            v236 = nw_endpoint_handler_get_id_string((void *)v2);
            v237 = nw_endpoint_handler_dry_run_string((void *)v2);
            v238 = nw_endpoint_handler_copy_endpoint((void *)v2);
            v239 = nw_endpoint_get_logging_description(v238);
            v240 = nw_endpoint_handler_state_string((void *)v2);
            v241 = nw_endpoint_handler_mode_string((void *)v2);
            v242 = nw_endpoint_handler_copy_current_path((void *)v2);
            LODWORD(buf[0]) = 136447746;
            *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
            WORD2(buf[1]) = 2082;
            *(_QWORD *)((char *)&buf[1] + 6) = v236;
            HIWORD(buf[2]) = 2082;
            buf[3] = v237;
            LOWORD(buf[4]) = 2082;
            *(_QWORD *)((char *)&buf[4] + 2) = v239;
            WORD1(buf[5]) = 2082;
            *(_QWORD *)((char *)&buf[5] + 4) = v240;
            WORD2(buf[6]) = 2082;
            *(_QWORD *)((char *)&buf[6] + 6) = v241;
            HIWORD(buf[7]) = 2114;
            buf[8] = v242;
            _os_log_impl(&dword_182FBE000, v235, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying transform with unsatisfied path", (uint8_t *)buf, 0x48u);

          }
        }

        v2 = (uint64_t)v424;
        goto LABEL_314;
      }
      v210 = *(_DWORD *)(v2 + 116);
      if (v210)
        goto LABEL_274;
      if (!v71 && !nw_path_has_proxy_settings(*(void **)(v2 + 64))
        || (nw_parameters_get_proxy_applied(*(void **)(v2 + 32)) & 1) != 0
        || (nw_parameters_get_no_proxy(*(void **)(v2 + 32)) & 1) != 0
        || !nw_endpoint_proxy_unsatisfied_handler_should_use_proxy(*(void **)(v2 + 64)))
      {
        v210 = *(_DWORD *)(v2 + 116);
        goto LABEL_274;
      }
      v276 = nw_endpoint_handler_get_minimize_logging((void *)v2);
      v277 = nw_endpoint_handler_get_logging_disabled((void *)v2);
      if (v276)
      {
        if ((v277 & 1) != 0)
        {
LABEL_370:
          os_unfair_lock_lock(&v424->lock);
          if ((*((_BYTE *)v424 + 268) & 1) != 0 || v424->parent_handler)
          {
            v286 = v424;
            v424->mode = 3;
            v287 = objc_alloc_init(NWConcrete_nw_endpoint_proxy);
          }
          else
          {
            v286 = v424;
            v424->mode = 2;
            v287 = objc_alloc_init(NWConcrete_nw_endpoint_flow);
            LOBYTE(v287->connected_child) = (uint64_t)v287->connected_child & 0xFC | 1;
          }
          mode_handler = v286->mode_handler;
          v286->mode_handler = (NWConcrete_nw_endpoint_mode_handler *)v287;

          os_unfair_lock_unlock(&v424->lock);
          v289 = mach_continuous_time();
          if (v289 <= 1)
            v154 = 1;
          else
            v154 = v289;
          goto LABEL_376;
        }
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v278 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v278, OS_LOG_TYPE_DEBUG))
        {
          v415 = nw_endpoint_handler_get_id_string(v424);
          v416 = nw_endpoint_handler_dry_run_string(v424);
          v417 = nw_endpoint_handler_copy_endpoint(v424);
          v418 = nw_endpoint_get_logging_description(v417);
          v419 = nw_endpoint_handler_state_string(v424);
          v420 = nw_endpoint_handler_mode_string(v424);
          v421 = nw_endpoint_handler_copy_current_path(v424);
          LODWORD(buf[0]) = 136447746;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v415;
          HIWORD(buf[2]) = 2082;
          buf[3] = v416;
          LOWORD(buf[4]) = 2082;
          *(_QWORD *)((char *)&buf[4] + 2) = v418;
          WORD1(buf[5]) = 2082;
          *(_QWORD *)((char *)&buf[5] + 4) = v419;
          WORD2(buf[6]) = 2082;
          *(_QWORD *)((char *)&buf[6] + 6) = v420;
          HIWORD(buf[7]) = 2114;
          buf[8] = v421;
          _os_log_impl(&dword_182FBE000, v278, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying proxy with unsatisfied path", (uint8_t *)buf, 0x48u);

        }
      }
      else
      {
        if ((v277 & 1) != 0)
          goto LABEL_370;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v278 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v278, OS_LOG_TYPE_INFO))
        {
          v279 = nw_endpoint_handler_get_id_string(v424);
          v280 = nw_endpoint_handler_dry_run_string(v424);
          v281 = nw_endpoint_handler_copy_endpoint(v424);
          v282 = nw_endpoint_get_logging_description(v281);
          v283 = nw_endpoint_handler_state_string(v424);
          v284 = nw_endpoint_handler_mode_string(v424);
          v285 = nw_endpoint_handler_copy_current_path(v424);
          LODWORD(buf[0]) = 136447746;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v279;
          HIWORD(buf[2]) = 2082;
          buf[3] = v280;
          LOWORD(buf[4]) = 2082;
          *(_QWORD *)((char *)&buf[4] + 2) = v282;
          WORD1(buf[5]) = 2082;
          *(_QWORD *)((char *)&buf[5] + 4) = v283;
          WORD2(buf[6]) = 2082;
          *(_QWORD *)((char *)&buf[6] + 6) = v284;
          HIWORD(buf[7]) = 2114;
          buf[8] = v285;
          _os_log_impl(&dword_182FBE000, v278, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] trying proxy with unsatisfied path", (uint8_t *)buf, 0x48u);

        }
      }

      goto LABEL_370;
    }
    v432 = 0;
    v433 = &v432;
    v434 = 0x2020000000;
    v435 = 0;
    if (v5 != 2)
    {
      v24 = 0;
      goto LABEL_58;
    }
    if (!nw_path_may_span_multiple_interfaces(*(void **)(v2 + 64)))
    {
      v5 = 2;
      v24 = 1;
      goto LABEL_58;
    }
    v436[0] = 0;
    v436[1] = v436;
    v436[2] = 0x2020000000;
    LOBYTE(v437) = 0;
    v25 = *(NSObject **)(v2 + 64);
    enumerate_block[0] = MEMORY[0x1E0C809B0];
    enumerate_block[1] = 3221225472;
    enumerate_block[2] = ___ZL31nw_endpoint_handler_path_changeP30NWConcrete_nw_endpoint_handler_block_invoke;
    enumerate_block[3] = &unk_1E149FBC8;
    v26 = (void **)(id)v2;
    v429 = v26;
    v430 = v436;
    v431 = &v432;
    nw_path_enumerate_interfaces(v25, enumerate_block);
    if (*((_BYTE *)v433 + 24) || *(_BYTE *)(v436[1] + 24) || !nw_parameters_get_use_awdl(v26[4]))
    {
LABEL_47:

      _Block_object_dispose(v436, 8);
      v5 = 2;
      v24 = 1;
      v2 = (uint64_t)v424;
      goto LABEL_58;
    }
    v27 = nw_interface_create_with_name("awdl0");
    if (!v27 || (nw_path_interface_prohibited_by_parameters(v424->current_path, v27) & 1) != 0)
    {
LABEL_46:

      goto LABEL_47;
    }
    v28 = nw_endpoint_handler_get_minimize_logging(v26);
    v29 = nw_endpoint_handler_get_logging_disabled(v26);
    if (v28)
    {
      if ((v29 & 1) != 0)
        goto LABEL_45;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v30 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEBUG))
      {
        v352 = nw_endpoint_handler_get_id_string(v26);
        v353 = nw_endpoint_handler_dry_run_string(v26);
        v354 = nw_endpoint_handler_copy_endpoint(v26);
        v355 = nw_endpoint_get_logging_description(v354);
        v356 = nw_endpoint_handler_state_string(v26);
        v357 = nw_endpoint_handler_mode_string(v26);
        v358 = nw_endpoint_handler_copy_current_path(v26);
        LODWORD(buf[0]) = 136447746;
        *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v352;
        HIWORD(buf[2]) = 2082;
        buf[3] = v353;
        LOWORD(buf[4]) = 2082;
        *(_QWORD *)((char *)&buf[4] + 2) = v355;
        WORD1(buf[5]) = 2082;
        *(_QWORD *)((char *)&buf[5] + 4) = v356;
        WORD2(buf[6]) = 2082;
        *(_QWORD *)((char *)&buf[6] + 6) = v357;
        HIWORD(buf[7]) = 2114;
        buf[8] = v358;
        _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] overriding unsatisfied, awdl eligible", (uint8_t *)buf, 0x48u);

      }
    }
    else
    {
      if ((v29 & 1) != 0)
      {
LABEL_45:
        *((_BYTE *)v433 + 24) = 1;
        goto LABEL_46;
      }
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v30 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v30, OS_LOG_TYPE_INFO))
      {
        v31 = nw_endpoint_handler_get_id_string(v26);
        v32 = nw_endpoint_handler_dry_run_string(v26);
        v33 = nw_endpoint_handler_copy_endpoint(v26);
        v34 = nw_endpoint_get_logging_description(v33);
        v35 = nw_endpoint_handler_state_string(v26);
        v36 = nw_endpoint_handler_mode_string(v26);
        v37 = nw_endpoint_handler_copy_current_path(v26);
        LODWORD(buf[0]) = 136447746;
        *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
        WORD2(buf[1]) = 2082;
        *(_QWORD *)((char *)&buf[1] + 6) = v31;
        HIWORD(buf[2]) = 2082;
        buf[3] = v32;
        LOWORD(buf[4]) = 2082;
        *(_QWORD *)((char *)&buf[4] + 2) = v34;
        WORD1(buf[5]) = 2082;
        *(_QWORD *)((char *)&buf[5] + 4) = v35;
        WORD2(buf[6]) = 2082;
        *(_QWORD *)((char *)&buf[6] + 6) = v36;
        HIWORD(buf[7]) = 2114;
        buf[8] = v37;
        _os_log_impl(&dword_182FBE000, v30, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] overriding unsatisfied, awdl eligible", (uint8_t *)buf, 0x48u);

      }
    }

    goto LABEL_45;
  }
  if (nw_endpoint_handler_triggered_agents_updated((NWConcrete_nw_endpoint_handler *)v2))
    goto LABEL_28;
  v38 = (char *)(id)v2;
  v39 = v38;
  v40 = (void *)*((_QWORD *)v38 + 4);
  if (v40)
  {
    v41 = v40;
    v42 = (v41[12] & 0x4000000000) == 0;

    if (!v42)
    {
      v2 = (uint64_t)v424;
      if ((nw_endpoint_handler_get_logging_disabled(v39) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v43 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
        {
          v44 = nw_endpoint_handler_get_id_string(v39);
          v45 = nw_endpoint_handler_dry_run_string(v39);
          v46 = nw_endpoint_handler_copy_endpoint(v39);
          v47 = nw_endpoint_get_logging_description(v46);
          v48 = nw_endpoint_handler_state_string(v39);
          v49 = nw_endpoint_handler_mode_string(v39);
          v50 = nw_endpoint_handler_copy_current_path(v39);
          LODWORD(buf[0]) = 136447746;
          *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
          WORD2(buf[1]) = 2082;
          *(_QWORD *)((char *)&buf[1] + 6) = v44;
          HIWORD(buf[2]) = 2082;
          buf[3] = v45;
          LOWORD(buf[4]) = 2082;
          *(_QWORD *)((char *)&buf[4] + 2) = v47;
          WORD1(buf[5]) = 2082;
          *(_QWORD *)((char *)&buf[5] + 4) = v48;
          WORD2(buf[6]) = 2082;
          *(_QWORD *)((char *)&buf[6] + 6) = v49;
          HIWORD(buf[7]) = 2114;
          buf[8] = v50;
          _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] triggered agents have not yet updated", (uint8_t *)buf, 0x48u);

        }
LABEL_241:

LABEL_242:
        v2 = (uint64_t)v424;
        goto LABEL_442;
      }
      goto LABEL_442;
    }
  }
  else
  {

  }
  v2 = (uint64_t)v424;
  if ((*((_BYTE *)v424 + 268) & 0x20) == 0)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v43 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_INFO))
    {
      if ((*((_BYTE *)v424 + 268) & 1) != 0)
        v127 = "dry-run ";
      else
        v127 = "";
      v128 = nw_endpoint_handler_copy_endpoint(v39);
      v129 = nw_endpoint_get_logging_description(v128);
      v130 = v424->state;
      v131 = v127;
      if (v130 > 5)
        v132 = "unknown-state";
      else
        v132 = off_1E149FC48[v130];
      v133 = v39;
      v134 = (os_unfair_lock_s *)v133;
      v135 = "path";
      switch(*((_DWORD *)v133 + 29))
      {
        case 0:
          break;
        case 1:
          v135 = "resolver";
          break;
        case 2:
          v135 = nw_endpoint_flow_mode_string(*((void **)v133 + 31));
          break;
        case 3:
          v135 = "proxy";
          break;
        case 4:
          v135 = "fallback";
          break;
        case 5:
          v135 = "transform";
          break;
        default:
          v135 = "unknown-mode";
          break;
      }

      v189 = v134 + 28;
      v190 = v134;
      os_unfair_lock_lock(v134 + 28);
      v191 = v424->current_path;
      os_unfair_lock_unlock(v189);

      LODWORD(buf[0]) = 136447746;
      *(_QWORD *)((char *)buf + 4) = "nw_endpoint_handler_path_change";
      WORD2(buf[1]) = 2082;
      *(_QWORD *)((char *)&buf[1] + 6) = v39 + 168;
      HIWORD(buf[2]) = 2082;
      buf[3] = v131;
      LOWORD(buf[4]) = 2082;
      *(_QWORD *)((char *)&buf[4] + 2) = v129;
      WORD1(buf[5]) = 2082;
      *(_QWORD *)((char *)&buf[5] + 4) = v132;
      WORD2(buf[6]) = 2082;
      *(_QWORD *)((char *)&buf[6] + 6) = v135;
      HIWORD(buf[7]) = 2114;
      buf[8] = v191;
      _os_log_impl(&dword_182FBE000, v43, OS_LOG_TYPE_INFO, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] triggered agents have not yet updated", (uint8_t *)buf, 0x48u);

    }
    goto LABEL_241;
  }
LABEL_442:

}

void sub_1830CE388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;

  _Block_object_dispose(&a27, 8);
  _Unwind_Resume(a1);
}

uint64_t nw_parameters_get_block_trackers(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[100] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_parameters_get_block_trackers";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_block_trackers";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_parameters_get_block_trackers";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_block_trackers";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_parameters_get_block_trackers";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_endpoint_handler_should_transform(void *a1, void *a2)
{
  id v3;
  id v4;
  void *v5;
  _QWORD *v6;
  __int16 v7;
  _QWORD *v8;
  _BOOL8 v9;
  void *v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  void *v14;
  os_log_type_t v15;
  char *backtrace_string;
  os_log_type_t v17;
  _BOOL4 v18;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v10 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_endpoint_handler_should_transform";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_182FBE000, v12, v13, "%{public}s called with null endpoint", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (!v24)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_182FBE000, v12, v21, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v17 = type;
    v18 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v18)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v18)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_endpoint_handler_should_transform";
      v28 = 2082;
      v29 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v17, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_24;
  }
  if (!v4)
  {
    __nwlog_obj();
    v14 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_endpoint_handler_should_transform";
    v11 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (!__nwlog_fault(v11, &type, &v24))
      goto LABEL_37;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v15 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_182FBE000, v12, v15, "%{public}s called with null parameters", buf, 0xCu);
      }
LABEL_36:

LABEL_37:
      if (v11)
        free(v11);
      goto LABEL_39;
    }
    if (!v24)
    {
      __nwlog_obj();
      v12 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v12, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_182FBE000, v12, v22, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_36;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v12 = objc_claimAutoreleasedReturnValue();
    v19 = type;
    v20 = os_log_type_enabled(v12, type);
    if (!backtrace_string)
    {
      if (v20)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_endpoint_handler_should_transform";
        _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_36;
    }
    if (v20)
    {
      *(_DWORD *)buf = 136446466;
      v27 = "nw_endpoint_handler_should_transform";
      v28 = 2082;
      v29 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v12, v19, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_24:

    free(backtrace_string);
    goto LABEL_37;
  }
  v6 = v4;
  v7 = *(_WORD *)(v6[13] + 108);

  if ((v7 & 4) != 0)
  {
LABEL_39:
    v9 = 0;
    goto LABEL_40;
  }
  v8 = v6;
  v9 = v8[20] != 0;

LABEL_40:
  return v9;
}

BOOL nw_path_can_support_endpoint(void *a1, void *a2)
{
  NWConcrete_nw_path *v3;
  id v4;
  void *v5;
  id v6;
  int v7;
  _DWORD *nexus_agent;
  _BOOL8 v9;
  BOOL v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  os_log_type_t v23;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_can_support_endpoint";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null path", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (!v25)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v22 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_path_can_support_endpoint";
      v29 = 2082;
      v30 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_47;
  }
  if (!v4)
  {
    __nwlog_obj();
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_path_can_support_endpoint";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25))
      goto LABEL_60;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null endpoint", buf, 0xCu);
      }
LABEL_59:

LABEL_60:
      if (v12)
        free(v12);
      goto LABEL_62;
    }
    if (!v25)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null endpoint, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_59;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v13, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v28 = "nw_path_can_support_endpoint";
        _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null endpoint, no backtrace", buf, 0xCu);
      }
      goto LABEL_59;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v28 = "nw_path_can_support_endpoint";
      v29 = 2082;
      v30 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v13, v20, "%{public}s called with null endpoint, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_47:

    free(backtrace_string);
    goto LABEL_60;
  }
  v6 = v4;
  v7 = objc_msgSend(v6, "type");

  if (!nw_path_uses_nexus_internal(v3, 0))
  {
    if (v3->policy_result.routing_result == 4 && v3->policy_result.routing_result_parameter.tunnel_interface_index)
    {
      v9 = (v7 - 1) < 2;
      goto LABEL_63;
    }
    v10 = v7 == 1;
    goto LABEL_25;
  }
  nexus_agent = (_DWORD *)nw_path_get_nexus_agent(v3, 0);
  if (nexus_agent[53] < 0xCCu)
  {
LABEL_62:
    v9 = 0;
    goto LABEL_63;
  }
  if (nexus_agent[56] == v7
    || nexus_agent[57] == v7
    || nexus_agent[58] == v7
    || nexus_agent[59] == v7
    || nexus_agent[60] == v7
    || nexus_agent[61] == v7
    || nexus_agent[62] == v7
    || nexus_agent[63] == v7
    || nexus_agent[64] == v7
    || nexus_agent[65] == v7
    || nexus_agent[66] == v7
    || nexus_agent[67] == v7
    || nexus_agent[68] == v7
    || nexus_agent[69] == v7
    || nexus_agent[70] == v7)
  {
    v9 = 1;
    goto LABEL_63;
  }
  v10 = nexus_agent[71] == v7;
LABEL_25:
  v9 = v10;
LABEL_63:

  return v9;
}

void sub_1830CF57C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_has_persistent_application_protocols(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  _QWORD v4[5];
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char v8;

  v5 = 0;
  v6 = &v5;
  v7 = 0x2020000000;
  v8 = 0;
  v1 = *(void **)(a1 + 32);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 3221225472;
  v4[2] = __nw_endpoint_handler_has_persistent_application_protocols_block_invoke;
  v4[3] = &unk_1E149FB50;
  v4[4] = &v5;
  nw_parameters_internal_iterate_protocol_stack(v1, 5, 0, v4);
  v2 = *((unsigned __int8 *)v6 + 24);
  _Block_object_dispose(&v5, 8);
  return v2;
}

void sub_1830CF63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void nw_parameters_to_ne_app_context(void *a1, uint64_t a2)
{
  id v3;
  void *v4;
  char *v5;
  char *v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  _BYTE buf[32];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (!v3)
  {
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (!__nwlog_fault(v12, &type, &v25))
      goto LABEL_44;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
        _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v25)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v13, type);
      if (backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
LABEL_44:
        if (!v12)
          goto LABEL_10;
LABEL_45:
        free(v12);
        goto LABEL_10;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
        _os_log_impl(&dword_182FBE000, v13, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v13 = objc_claimAutoreleasedReturnValue();
      v23 = type;
      if (os_log_type_enabled(v13, type))
      {
        *(_DWORD *)buf = 136446210;
        *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
        _os_log_impl(&dword_182FBE000, v13, v23, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }
LABEL_43:

    goto LABEL_44;
  }
  if (a2)
  {
    v5 = (char *)v3;
    v6 = v5;
    v7 = *(_OWORD *)(v5 + 56);
    *(_OWORD *)buf = *(_OWORD *)(v5 + 40);
    *(_OWORD *)&buf[16] = v7;
    if (*(_QWORD *)buf | *(_QWORD *)&buf[8] | (unint64_t)v7 | *((_QWORD *)&v7 + 1))
    {
      v8 = a2 + 40;
      v9 = *(_OWORD *)(v5 + 40);
      *(_OWORD *)(a2 + 56) = *(_OWORD *)(v5 + 56);
      *(_OWORD *)(a2 + 40) = v9;

    }
    else
    {

      v8 = 0;
    }
    *(_QWORD *)(a2 + 8) = v8;
    if (uuid_is_null((const unsigned __int8 *)(*((_QWORD *)v6 + 13) + 24)))
    {
      v10 = 0;
    }
    else
    {
      v10 = a2 + 72;
      *(_OWORD *)(a2 + 72) = *(_OWORD *)(*((_QWORD *)v6 + 13) + 24);
    }
    *(_QWORD *)(a2 + 16) = v10;
    *(_DWORD *)(a2 + 24) = *(_DWORD *)(*((_QWORD *)v6 + 13) + 64);
    *(_QWORD *)a2 = *((_QWORD *)v6 + 14);
    goto LABEL_10;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
  v12 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v25 = 0;
  if (!__nwlog_fault(v12, &type, &v25))
    goto LABEL_44;
  if (type == OS_LOG_TYPE_FAULT)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v16 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
      _os_log_impl(&dword_182FBE000, v13, v16, "%{public}s called with null storage", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (!v25)
  {
    __nwlog_obj();
    v13 = objc_claimAutoreleasedReturnValue();
    v24 = type;
    if (os_log_type_enabled(v13, type))
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
      _os_log_impl(&dword_182FBE000, v13, v24, "%{public}s called with null storage, backtrace limit exceeded", buf, 0xCu);
    }
    goto LABEL_43;
  }
  v20 = (char *)__nw_create_backtrace_string();
  __nwlog_obj();
  v13 = objc_claimAutoreleasedReturnValue();
  v21 = type;
  v22 = os_log_type_enabled(v13, type);
  if (!v20)
  {
    if (v22)
    {
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
      _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null storage, no backtrace", buf, 0xCu);
    }
    goto LABEL_43;
  }
  if (v22)
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_parameters_to_ne_app_context";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = v20;
    _os_log_impl(&dword_182FBE000, v13, v21, "%{public}s called with null storage, dumping backtrace:%{public}s", buf, 0x16u);
  }

  free(v20);
  if (v12)
    goto LABEL_45;
LABEL_10:

}

void sub_1830CFB88(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_flow_get_is_leaf_handler(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[32] >> 1) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_endpoint_flow_get_is_leaf_handler";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_flow_get_is_leaf_handler";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_endpoint_flow_get_is_leaf_handler";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_flow_get_is_leaf_handler";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_endpoint_flow_get_is_leaf_handler";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

BOOL nw_path_can_resolve_endpoint(void *a1, void *a2)
{
  NWConcrete_nw_path *v3;
  id v4;
  void *v5;
  id v6;
  unsigned int v7;
  void *v8;
  id v9;
  unsigned int v10;
  uint64_t nexus_agent;
  _BOOL8 v12;
  NWConcrete_nw_path *v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  void *v17;
  unsigned int *data;
  uint64_t v19;
  void *v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  os_log_type_t v26;
  char *backtrace_string;
  os_log_type_t v28;
  _BOOL4 v29;
  os_log_type_t v30;
  _BOOL4 v31;
  os_log_type_t v32;
  os_log_type_t v33;
  char v34;
  os_log_type_t type;
  _BYTE length[12];
  __int16 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v3)
  {
    __nwlog_obj();
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)length = 136446210;
    *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v22, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_182FBE000, v23, v24, "%{public}s called with null path", length, 0xCu);
        }
        goto LABEL_55;
      }
      if (!v34)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v32 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_182FBE000, v23, v32, "%{public}s called with null path, backtrace limit exceeded", length, 0xCu);
        }
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v28 = type;
      v29 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v29)
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null path, no backtrace", length, 0xCu);
        }
        goto LABEL_55;
      }
      if (v29)
      {
        *(_DWORD *)length = 136446466;
        *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v23, v28, "%{public}s called with null path, dumping backtrace:%{public}s", length, 0x16u);
      }
LABEL_43:

      free(backtrace_string);
    }
LABEL_56:
    if (v22)
      free(v22);
    v12 = 0;
    goto LABEL_23;
  }
  if (!v4)
  {
    __nwlog_obj();
    v25 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)length = 136446210;
    *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
    v22 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v34 = 0;
    if (__nwlog_fault(v22, &type, &v34))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v26 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_182FBE000, v23, v26, "%{public}s called with null endpoint", length, 0xCu);
        }
LABEL_55:

        goto LABEL_56;
      }
      if (!v34)
      {
        __nwlog_obj();
        v23 = objc_claimAutoreleasedReturnValue();
        v33 = type;
        if (os_log_type_enabled(v23, type))
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_182FBE000, v23, v33, "%{public}s called with null endpoint, backtrace limit exceeded", length, 0xCu);
        }
        goto LABEL_55;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v23 = objc_claimAutoreleasedReturnValue();
      v30 = type;
      v31 = os_log_type_enabled(v23, type);
      if (!backtrace_string)
      {
        if (v31)
        {
          *(_DWORD *)length = 136446210;
          *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
          _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s called with null endpoint, no backtrace", length, 0xCu);
        }
        goto LABEL_55;
      }
      if (v31)
      {
        *(_DWORD *)length = 136446466;
        *(_QWORD *)&length[4] = "nw_path_can_resolve_endpoint";
        v37 = 2082;
        v38 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v23, v30, "%{public}s called with null endpoint, dumping backtrace:%{public}s", length, 0x16u);
      }
      goto LABEL_43;
    }
    goto LABEL_56;
  }
  v6 = v4;
  v7 = objc_msgSend(v6, "type");

  if (v7 >= 0x3E8 && (v8 = nw_endpoint_copy_custom_resolver_block(v6), v8, v8)
    || (v9 = v6, v10 = objc_msgSend(v9, "type"), v9, nw_path_uses_nexus_internal(v3, 0))
    && (nexus_agent = nw_path_get_nexus_agent(v3, 0), nw_agent_resolves_type(nexus_agent, v10)))
  {
    v12 = 1;
  }
  else if (v10 > 5 || (v12 = 1, ((1 << v10) & 0x2C) == 0))
  {
    v13 = v3;
    if (v13->policy_result.num_netagents)
    {
      v14 = 0;
      v15 = 4;
      while (1)
      {
        v16 = nw_network_agent_copy_dictionary_for_uuid((const unsigned __int8 *)v13->policy_result.netagents + v15);
        v17 = (void *)v16;
        if (v16)
        {
          *(_QWORD *)length = 0;
          data = (unsigned int *)xpc_dictionary_get_data((xpc_object_t)v16, "data", (size_t *)length);
          v19 = 0;
          if (data && *(_QWORD *)length >= 0xD8uLL)
          {
            if (*(_QWORD *)length == data[53] + 216)
              v19 = (uint64_t)data;
            else
              v19 = 0;
          }
          if (nw_agent_resolves_type(v19, v10))
            break;
        }

        ++v14;
        v15 += 20;
        if (v14 >= v13->policy_result.num_netagents)
          goto LABEL_20;
      }

      v12 = v19 != 0;
    }
    else
    {
LABEL_20:
      v12 = 0;
    }

  }
LABEL_23:

  return v12;
}

void sub_1830D0408(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL nw_parameters_has_persistent_protocol_in_stack(void *a1)
{
  id *v1;
  id *v2;
  id v3;
  void *v4;
  uint64_t v5;
  _BOOL8 v6;
  void *v7;
  char *v8;
  NSObject *v9;
  os_log_type_t v10;
  void *v11;
  char *v12;
  NSObject *v13;
  os_log_type_t v14;
  char *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  os_log_type_t v22;
  char v24;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v27;
  __int16 v28;
  char *v29;
  uint64_t v30;

  v30 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = v1[19];
    v4 = v3;
    if (v3)
    {
      v5 = *((_QWORD *)v3 + 1);
      if (v5)
      {
        v6 = *(_QWORD *)(v5 + 24) != *(_QWORD *)(v5 + 16);
LABEL_43:

        goto LABEL_44;
      }
LABEL_42:
      v6 = 0;
      goto LABEL_43;
    }
    __nwlog_obj();
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v27 = "nw_parameters_has_persistent_protocol_in_stack";
    v12 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v24 = 0;
    if (__nwlog_fault(v12, &type, &v24))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_parameters_has_persistent_protocol_in_stack";
          _os_log_impl(&dword_182FBE000, v13, v14, "%{public}s called with null stack", buf, 0xCu);
        }
      }
      else if (v24)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v19 = type;
        v20 = os_log_type_enabled(v13, type);
        if (backtrace_string)
        {
          if (v20)
          {
            *(_DWORD *)buf = 136446466;
            v27 = "nw_parameters_has_persistent_protocol_in_stack";
            v28 = 2082;
            v29 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null stack, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_40;
        }
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_parameters_has_persistent_protocol_in_stack";
          _os_log_impl(&dword_182FBE000, v13, v19, "%{public}s called with null stack, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v13 = objc_claimAutoreleasedReturnValue();
        v22 = type;
        if (os_log_type_enabled(v13, type))
        {
          *(_DWORD *)buf = 136446210;
          v27 = "nw_parameters_has_persistent_protocol_in_stack";
          _os_log_impl(&dword_182FBE000, v13, v22, "%{public}s called with null stack, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_40:
    if (v12)
      free(v12);
    goto LABEL_42;
  }
  __nwlog_obj();
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v27 = "nw_parameters_has_persistent_protocol_in_stack";
  v8 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v24 = 0;
  if (__nwlog_fault(v8, &type, &v24))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_has_persistent_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v9, v10, "%{public}s called with null parameters", buf, 0xCu);
      }
    }
    else if (v24)
    {
      v15 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v9, type);
      if (v15)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446466;
          v27 = "nw_parameters_has_persistent_protocol_in_stack";
          v28 = 2082;
          v29 = v15;
          _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v15);
        goto LABEL_34;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_has_persistent_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v9, v16, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v9 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      if (os_log_type_enabled(v9, type))
      {
        *(_DWORD *)buf = 136446210;
        v27 = "nw_parameters_has_persistent_protocol_in_stack";
        _os_log_impl(&dword_182FBE000, v9, v21, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_34:
  if (v8)
    free(v8);
  v6 = 0;
LABEL_44:

  return v6;
}

BOOL nw_agent_resolves_type(uint64_t a1, int a2)
{
  void *v3;
  char *v4;
  NSObject *v5;
  os_log_type_t v6;
  const char *v7;
  char *backtrace_string;
  _BOOL4 v9;
  char v10;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v13;
  __int16 v14;
  char *v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  if (!a1)
  {
    __nwlog_obj();
    v3 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v13 = "nw_agent_resolves_type";
    v4 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v10 = 0;
    if (!__nwlog_fault(v4, &type, &v10))
      goto LABEL_30;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_agent_resolves_type";
        v7 = "%{public}s called with null netagent";
LABEL_28:
        _os_log_impl(&dword_182FBE000, v5, v6, v7, buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v5 = objc_claimAutoreleasedReturnValue();
        v6 = type;
        v9 = os_log_type_enabled(v5, type);
        if (backtrace_string)
        {
          if (v9)
          {
            *(_DWORD *)buf = 136446466;
            v13 = "nw_agent_resolves_type";
            v14 = 2082;
            v15 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v5, v6, "%{public}s called with null netagent, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_30;
        }
        if (!v9)
          goto LABEL_29;
        *(_DWORD *)buf = 136446210;
        v13 = "nw_agent_resolves_type";
        v7 = "%{public}s called with null netagent, no backtrace";
        goto LABEL_28;
      }
      __nwlog_obj();
      v5 = objc_claimAutoreleasedReturnValue();
      v6 = type;
      if (os_log_type_enabled(v5, type))
      {
        *(_DWORD *)buf = 136446210;
        v13 = "nw_agent_resolves_type";
        v7 = "%{public}s called with null netagent, backtrace limit exceeded";
        goto LABEL_28;
      }
    }
LABEL_29:

LABEL_30:
    if (v4)
      free(v4);
    return 0;
  }
  if ((*(_BYTE *)(a1 + 210) & 1) == 0 || *(_DWORD *)(a1 + 212) < 0xCCu)
    return 0;
  return *(_DWORD *)(a1 + 288) == a2
      || *(_DWORD *)(a1 + 296) == a2
      || *(_DWORD *)(a1 + 304) == a2
      || *(_DWORD *)(a1 + 312) == a2
      || *(_DWORD *)(a1 + 320) == a2
      || *(_DWORD *)(a1 + 328) == a2
      || *(_DWORD *)(a1 + 336) == a2
      || *(_DWORD *)(a1 + 344) == a2;
}

void nw_endpoint_flow_reset_is_leaf_handler(void *a1, int a2)
{
  id v3;
  void *v4;
  char v5;
  void *v6;
  char *v7;
  NSObject *v8;
  os_log_type_t v9;
  char *backtrace_string;
  os_log_type_t v11;
  _BOOL4 v12;
  os_log_type_t v13;
  char v14;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v17;
  __int16 v18;
  char *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    if (a2)
      v5 = 2;
    else
      v5 = 0;
    *((_BYTE *)v3 + 32) = *((_BYTE *)v3 + 32) & 0xFD | v5;
    goto LABEL_6;
  }
  __nwlog_obj();
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v17 = "nw_endpoint_flow_reset_is_leaf_handler";
  v7 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v14 = 0;
  if (__nwlog_fault(v7, &type, &v14))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v9 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_flow_reset_is_leaf_handler";
        _os_log_impl(&dword_182FBE000, v8, v9, "%{public}s called with null flow", buf, 0xCu);
      }
    }
    else if (v14)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v11 = type;
      v12 = os_log_type_enabled(v8, type);
      if (backtrace_string)
      {
        if (v12)
        {
          *(_DWORD *)buf = 136446466;
          v17 = "nw_endpoint_flow_reset_is_leaf_handler";
          v18 = 2082;
          v19 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null flow, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_23;
      }
      if (v12)
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_flow_reset_is_leaf_handler";
        _os_log_impl(&dword_182FBE000, v8, v11, "%{public}s called with null flow, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v8 = objc_claimAutoreleasedReturnValue();
      v13 = type;
      if (os_log_type_enabled(v8, type))
      {
        *(_DWORD *)buf = 136446210;
        v17 = "nw_endpoint_flow_reset_is_leaf_handler";
        _os_log_impl(&dword_182FBE000, v8, v13, "%{public}s called with null flow, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_23:
  if (v7)
    free(v7);
LABEL_6:

}

uint64_t nw_path_is_defunct(NWConcrete_nw_path *a1, NWConcrete_nw_path_flow_registration *a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = (unsigned __int8 *)nw_path_copy_flow_for_registration(a1, a2);
  if (v2)
    v3 = (v2[186] >> 2) & 1;
  else
    v3 = 0;

  return v3;
}

void nw_protocol_data_set_compression_generation_count(void *a1, int a2)
{
  id v3;
  void *v4;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    nw_frame_set_compression_generation_count((uint64_t)v3, a2);
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_protocol_data_set_compression_generation_count";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_set_compression_generation_count";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null data", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_protocol_data_set_compression_generation_count";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null data, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_set_compression_generation_count";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null data, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_protocol_data_set_compression_generation_count";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null data, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
LABEL_3:

}

nw_txt_record_t nw_txt_record_create_dictionary(void)
{
  return (nw_txt_record_t)nw_txt_record_create_dictionary_with_initial_length(0x100uLL);
}

uint64_t nw_queue_context_target_dispatch_queue(void *a1, void *a2)
{
  id v3;
  NSObject *v4;
  NSObject *v5;
  _BOOL8 v6;
  uint64_t v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  char *backtrace_string;
  os_log_type_t v16;
  _BOOL4 v17;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  os_log_type_t v21;
  char v22;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v25;
  __int16 v26;
  char *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (v3)
  {
    if (v4)
    {
      v6 = nw_context_copy_workloop(v3);
      dispatch_set_target_queue(v5, (dispatch_queue_t)v6);

      v7 = 1;
      goto LABEL_4;
    }
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_queue_context_target_dispatch_queue";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v14 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null queue", buf, 0xCu);
        }
LABEL_36:

        goto LABEL_37;
      }
      if (!v22)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_182FBE000, v11, v21, "%{public}s called with null queue, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v18 = type;
      v19 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v19)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null queue, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v19)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_queue_context_target_dispatch_queue";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null queue, dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_24;
    }
  }
  else
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v25 = "nw_queue_context_target_dispatch_queue";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v22 = 0;
    if (__nwlog_fault(v10, &type, &v22))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v12 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null context", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (!v22)
      {
        __nwlog_obj();
        v11 = objc_claimAutoreleasedReturnValue();
        v20 = type;
        if (os_log_type_enabled(v11, type))
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_36;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      v17 = os_log_type_enabled(v11, type);
      if (!backtrace_string)
      {
        if (v17)
        {
          *(_DWORD *)buf = 136446210;
          v25 = "nw_queue_context_target_dispatch_queue";
          _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null context, no backtrace", buf, 0xCu);
        }
        goto LABEL_36;
      }
      if (v17)
      {
        *(_DWORD *)buf = 136446466;
        v25 = "nw_queue_context_target_dispatch_queue";
        v26 = 2082;
        v27 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_24:

      free(backtrace_string);
    }
  }
LABEL_37:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_4:

  return v7;
}

void sub_1830D1B64(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t nw_endpoint_handler_add_write_request(void *a1, void *a2)
{
  id v3;
  id v4;
  NWConcrete_nw_endpoint_handler *v5;
  uint64_t mode;
  NWConcrete_nw_endpoint_mode_handler *v7;
  id *v8;
  id *v9;
  id repliable_metadata;
  uint64_t node;
  id v12;
  const char *v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  const char *v23;
  uint64_t v24;
  NWConcrete_nw_endpoint_handler *v25;
  _BOOL4 v26;
  NSObject *v27;
  NWConcrete_nw_endpoint_handler *v28;
  NWConcrete_nw_endpoint_handler *v29;
  _BOOL4 v30;
  const char *v31;
  nw_endpoint_t v32;
  const char *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  const char *v37;
  os_log_type_t v38;
  const char *v39;
  NWConcrete_nw_endpoint_handler *v40;
  _BOOL4 v41;
  NWConcrete_nw_endpoint_handler *v42;
  NWConcrete_nw_endpoint_handler *v43;
  _BOOL4 v44;
  const char *v45;
  nw_endpoint_t v46;
  const char *v47;
  unsigned int *v48;
  unsigned int *v49;
  uint64_t v50;
  const char *v51;
  const char *v52;
  void **v53;
  const char *v54;
  id v55;
  void **v56;
  void **v57;
  int v58;
  const char *v59;
  os_unfair_lock_s *v60;
  id v61;
  NWConcrete_nw_endpoint_mode_handler *v62;
  const char *v63;
  id *v64;
  NWConcrete_nw_endpoint_handler *v65;
  id v66;
  nw_endpoint_t v67;
  const char *v68;
  const char *v69;
  os_unfair_lock_s *v70;
  id v71;
  os_unfair_lock_s *v72;
  const char *v73;
  const char *v74;
  nw_endpoint_t v75;
  NWConcrete_nw_endpoint_handler *v76;
  void *v77;
  const char *v78;
  void **v79;
  id v80;
  void *v81;
  os_log_type_t v82;
  NSObject *v83;
  const char *id_string;
  const char *v85;
  const char *logging_description;
  const char *v87;
  const char *v88;
  id v89;
  int v90;
  char *v91;
  os_log_type_t v92;
  _BOOL4 v93;
  os_log_type_t v94;
  void *v95;
  char *v96;
  NSObject *v97;
  os_log_type_t v98;
  char *backtrace_string;
  os_log_type_t v100;
  _BOOL4 v101;
  os_log_type_t v102;
  void **v103;
  NWConcrete_nw_endpoint_handler *v104;
  char v105;
  NSObject *v106;
  char *v107;
  _BOOL4 v108;
  const char *v109;
  nw_endpoint_t v110;
  unsigned int *v111;
  unsigned int *v112;
  uint64_t v113;
  const char *v114;
  NSObject *v115;
  NWConcrete_nw_endpoint_handler *v116;
  char *v117;
  _BOOL4 v118;
  const char *v119;
  nw_endpoint_t v120;
  unsigned int *v121;
  unsigned int *v122;
  uint64_t v123;
  const char *v124;
  void **v125;
  const char *v126;
  void **v127;
  void **v128;
  int v129;
  const char *v130;
  void **v131;
  void **v132;
  id v133;
  const char *v135;
  const char *v136;
  nw_endpoint_t v137;
  const char *v138;
  const char *v139;
  const char *v140;
  const char *v141;
  id v142;
  NSObject *v143;
  nw_endpoint_t v144;
  const char *v145;
  NWConcrete_nw_endpoint_handler *v146;
  const char *v147;
  const char *v148;
  const char *v149;
  void *v150;
  NSObject *v151;
  nw_endpoint_t v152;
  char v153;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v156;
  __int16 v157;
  char *id_str;
  __int16 v159;
  const char *v160;
  __int16 v161;
  void *v162;
  __int16 v163;
  const char *v164;
  __int16 v165;
  const char *v166;
  __int16 v167;
  id v168;
  __int16 v169;
  id *v170;
  __int16 v171;
  void **v172;
  __int16 v173;
  int v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  if (v3)
  {
    v5 = (NWConcrete_nw_endpoint_handler *)v3;
    mode = v5->mode;

    if ((_DWORD)mode == 2)
    {
      v7 = nw_endpoint_handler_copy_flow(v5);
      if (gLogDatapath && (nw_endpoint_handler_get_logging_disabled(v5) & 1) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v83 = (id)gconnectionLogObj;
        if (os_log_type_enabled(v83, OS_LOG_TYPE_DEBUG))
        {
          id_string = nw_endpoint_handler_get_id_string(v5);
          v149 = nw_endpoint_handler_dry_run_string(v5);
          v152 = nw_endpoint_handler_copy_endpoint(v5);
          v85 = id_string;
          logging_description = nw_endpoint_get_logging_description(v152);
          v87 = nw_endpoint_handler_state_string(v5);
          v88 = nw_endpoint_handler_mode_string(v5);
          v89 = nw_endpoint_handler_copy_current_path(v5);
          v90 = (*((unsigned __int8 *)v7 + 35) >> 1) & 1;
          *(_DWORD *)buf = 136448002;
          v156 = "nw_endpoint_handler_add_write_request";
          v157 = 2082;
          id_str = (char *)v85;
          v159 = 2082;
          v160 = v149;
          v161 = 2082;
          v162 = (void *)logging_description;
          v163 = 2082;
          v164 = v87;
          v165 = 2082;
          v166 = v88;
          v167 = 2114;
          v168 = v89;
          v169 = 1024;
          LODWORD(v170) = v90;
          _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] connected_child_handles_requests %u", buf, 0x4Eu);

        }
      }
      if ((*((_BYTE *)v7 + 35) & 2) != 0)
      {
        v18 = *((_QWORD *)v7 + 117);
        if (!v18)
        {
          v25 = v5;
          v26 = (*((_BYTE *)v25 + 268) & 0x20) == 0;

          if (v26)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v27 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              v151 = v27;
              v28 = v25;

              v29 = v28;
              v30 = (*((_BYTE *)v25 + 268) & 1) == 0;

              if (v30)
                v31 = "";
              else
                v31 = "dry-run ";
              v32 = nw_endpoint_handler_copy_endpoint(v29);
              v33 = nw_endpoint_get_logging_description(v32);
              v34 = v29;
              v35 = v34;
              v36 = v34[30];
              if (v36 > 5)
                v37 = "unknown-state";
              else
                v37 = off_1E149FC48[v36];

              v53 = v35;
              v54 = "path";
              switch(v5->mode)
              {
                case 0:
                  break;
                case 1:
                  v54 = "resolver";
                  break;
                case 2:
                  v54 = nw_endpoint_flow_mode_string(v53[31]);
                  break;
                case 3:
                  v54 = "proxy";
                  break;
                case 4:
                  v54 = "fallback";
                  break;
                case 5:
                  v54 = "transform";
                  break;
                default:
                  v54 = "unknown-mode";
                  break;
              }
              v148 = v54;

              v60 = v53;
              v61 = v3;
              v62 = v7;
              v63 = v37;
              v64 = (id *)v60;
              v65 = v28;
              v66 = v4;
              v67 = v32;
              v68 = v33;
              v69 = v31;
              v70 = v60 + 28;
              os_unfair_lock_lock(v60 + 28);
              v71 = v64[8];
              v72 = v70;
              v73 = v69;
              v74 = v68;
              v75 = v67;
              v4 = v66;
              v76 = v65;
              v77 = v71;
              os_unfair_lock_unlock(v72);

              v78 = v63;
              v7 = v62;
              v3 = v61;
              *(_DWORD *)buf = 136447746;
              v156 = "nw_endpoint_handler_add_write_request";
              v157 = 2082;
              id_str = v76->id_str;
              v159 = 2082;
              v160 = v73;
              v161 = 2082;
              v162 = (void *)v74;
              v163 = 2082;
              v164 = v78;
              v165 = 2082;
              v166 = v148;
              v167 = 2114;
              v168 = v77;
              _os_log_impl(&dword_182FBE000, v151, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot send, no connected handler", buf, 0x48u);

              goto LABEL_90;
            }
LABEL_52:
            v24 = 0;
LABEL_178:

            goto LABEL_179;
          }
          goto LABEL_111;
        }
        v19 = nw_endpoint_handler_add_write_request(v18, v4);
      }
      else
      {
        if (*((_QWORD *)v7 + 96))
        {
          if (*((_QWORD *)v7 + 108))
          {
            v8 = (id *)v4;
            v9 = v8;
            if (v8)
            {
              v151 = v8[13];

              if (v151)
              {
                repliable_metadata = nw_content_context_copy_first_repliable_metadata(v151);
                if (repliable_metadata)
                  node = nw_hash_table_get_node(*((_QWORD *)v7 + 108), (uint64_t)repliable_metadata, 1);
                else
                  node = 0;

                v55 = nw_write_request_copy_context(v9);
                if (node)
                {
LABEL_135:
                  v103 = *(void ***)(node + 16);
                  if (v103)
                  {
LABEL_137:
                    v150 = v55;
                    v24 = nw_flow_add_write_request(v5, v103, v9);
                    v104 = v5;
                    v105 = *((_BYTE *)v104 + 268);

                    if ((_DWORD)v24)
                    {
                      if ((v105 & 0x20) == 0)
                      {
                        if (__nwlog_connection_log::onceToken != -1)
                          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                        v106 = (id)gconnectionLogObj;
                        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEBUG))
                        {
                          v143 = v106;
                          v146 = v104;

                          v107 = v146;
                          v108 = (*((_BYTE *)v104 + 268) & 1) == 0;

                          v109 = "dry-run ";
                          if (v108)
                            v109 = "";
                          v139 = v109;
                          v110 = nw_endpoint_handler_copy_endpoint(v107);
                          v138 = nw_endpoint_get_logging_description(v110);
                          v111 = v107;
                          v112 = v111;
                          v113 = v111[30];
                          v137 = v110;
                          if (v113 > 5)
                            v114 = "unknown-state";
                          else
                            v114 = off_1E149FC48[v113];
                          v136 = v114;

                          v125 = v112;
                          v126 = "path";
                          switch(v5->mode)
                          {
                            case 0:
                              break;
                            case 1:
                              v126 = "resolver";
                              break;
                            case 2:
                              v126 = nw_endpoint_flow_mode_string(v125[31]);
                              break;
                            case 3:
                              v126 = "proxy";
                              break;
                            case 4:
                              v126 = "fallback";
                              break;
                            case 5:
                              v126 = "transform";
                              break;
                            default:
                              v126 = "unknown-mode";
                              break;
                          }
                          v135 = v126;

                          v131 = v125;
                          os_unfair_lock_lock((os_unfair_lock_t)v131 + 28);
                          v142 = v131[8];
                          os_unfair_lock_unlock((os_unfair_lock_t)v131 + 28);

                          *(_DWORD *)buf = 136448514;
                          v156 = "nw_endpoint_handler_add_write_request";
                          v157 = 2082;
                          id_str = v146->id_str;
                          v159 = 2082;
                          v160 = v139;
                          v161 = 2082;
                          v162 = (void *)v138;
                          v163 = 2082;
                          v164 = v136;
                          v165 = 2082;
                          v166 = v135;
                          v167 = 2114;
                          v168 = v142;
                          v169 = 2112;
                          v170 = v9;
                          v171 = 2048;
                          v172 = v103;
                          v173 = 1024;
                          v174 = 1;
                          _os_log_impl(&dword_182FBE000, v143, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Added write request %@ to flow protocol %p: %u", buf, 0x62u);

                          v106 = v143;
                        }

                      }
                      nw_flow_service_writes(v104, (NWConcrete_nw_endpoint_flow *)v7, (nw_flow_protocol *)v103);
                    }
                    else if ((v105 & 0x20) == 0)
                    {
                      if (__nwlog_connection_log::onceToken != -1)
                        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
                      v115 = (id)gconnectionLogObj;
                      if (os_log_type_enabled(v115, OS_LOG_TYPE_ERROR))
                      {
                        v116 = v104;

                        v117 = v116;
                        v118 = (*((_BYTE *)v104 + 268) & 1) == 0;

                        if (v118)
                          v119 = "";
                        else
                          v119 = "dry-run ";
                        v120 = nw_endpoint_handler_copy_endpoint(v117);
                        v147 = nw_endpoint_get_logging_description(v120);
                        v121 = v117;
                        v122 = v121;
                        v123 = v121[30];
                        v141 = v119;
                        v144 = v120;
                        if (v123 > 5)
                          v124 = "unknown-state";
                        else
                          v124 = off_1E149FC48[v123];
                        v140 = v124;

                        v127 = v122;
                        v128 = v127;
                        v129 = v5->mode;
                        v130 = "path";
                        switch(v129)
                        {
                          case 0:
                            break;
                          case 1:
                            v130 = "resolver";
                            break;
                          case 2:
                            v130 = nw_endpoint_flow_mode_string(v127[31]);
                            break;
                          case 3:
                            v130 = "proxy";
                            break;
                          case 4:
                            v130 = "fallback";
                            break;
                          case 5:
                            v130 = "transform";
                            break;
                          default:
                            v130 = "unknown-mode";
                            break;
                        }

                        v132 = v128;
                        os_unfair_lock_lock((os_unfair_lock_t)v132 + 28);
                        v133 = v132[8];
                        os_unfair_lock_unlock((os_unfair_lock_t)v132 + 28);

                        *(_DWORD *)buf = 136447746;
                        v156 = "nw_endpoint_handler_add_write_request";
                        v157 = 2082;
                        id_str = v116->id_str;
                        v159 = 2082;
                        v160 = v141;
                        v161 = 2082;
                        v162 = (void *)v147;
                        v163 = 2082;
                        v164 = v140;
                        v165 = 2082;
                        v166 = v130;
                        v167 = 2114;
                        v168 = v133;
                        _os_log_impl(&dword_182FBE000, v115, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Failed to add write request when trying to send", buf, 0x48u);

                      }
                    }

                    goto LABEL_177;
                  }
LABEL_136:
                  v103 = (void **)nw_endpoint_handler_register_context_internal(v5, v7, v55);
                  goto LABEL_137;
                }
LABEL_134:
                node = nw_hash_table_get_node(*((_QWORD *)v7 + 108), (uint64_t)v55, 0);
                if (!node)
                  goto LABEL_136;
                goto LABEL_135;
              }
LABEL_133:
              v55 = nw_write_request_copy_context(v9);
              v151 = 0;
              goto LABEL_134;
            }
            __nwlog_obj();
            v95 = (void *)objc_claimAutoreleasedReturnValue();
            *(_DWORD *)buf = 136446210;
            v156 = "nw_write_request_copy_original_message";
            v96 = (char *)_os_log_send_and_compose_impl();

            type = OS_LOG_TYPE_ERROR;
            v153 = 0;
            if (__nwlog_fault(v96, &type, &v153))
            {
              if (type == OS_LOG_TYPE_FAULT)
              {
                __nwlog_obj();
                v97 = objc_claimAutoreleasedReturnValue();
                v98 = type;
                if (os_log_type_enabled(v97, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v156 = "nw_write_request_copy_original_message";
                  _os_log_impl(&dword_182FBE000, v97, v98, "%{public}s called with null request", buf, 0xCu);
                }
              }
              else if (v153)
              {
                backtrace_string = (char *)__nw_create_backtrace_string();
                __nwlog_obj();
                v97 = objc_claimAutoreleasedReturnValue();
                v100 = type;
                v101 = os_log_type_enabled(v97, type);
                if (backtrace_string)
                {
                  if (v101)
                  {
                    *(_DWORD *)buf = 136446466;
                    v156 = "nw_write_request_copy_original_message";
                    v157 = 2082;
                    id_str = backtrace_string;
                    _os_log_impl(&dword_182FBE000, v97, v100, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
                  }

                  free(backtrace_string);
                  goto LABEL_131;
                }
                if (v101)
                {
                  *(_DWORD *)buf = 136446210;
                  v156 = "nw_write_request_copy_original_message";
                  _os_log_impl(&dword_182FBE000, v97, v100, "%{public}s called with null request, no backtrace", buf, 0xCu);
                }
              }
              else
              {
                __nwlog_obj();
                v97 = objc_claimAutoreleasedReturnValue();
                v102 = type;
                if (os_log_type_enabled(v97, type))
                {
                  *(_DWORD *)buf = 136446210;
                  v156 = "nw_write_request_copy_original_message";
                  _os_log_impl(&dword_182FBE000, v97, v102, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
                }
              }

            }
LABEL_131:
            if (v96)
              free(v96);
            goto LABEL_133;
          }
          v40 = v5;
          v41 = (*((_BYTE *)v40 + 268) & 0x20) == 0;

          if (v41)
          {
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v27 = (id)gconnectionLogObj;
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
            {
              v151 = v27;
              v42 = v40;

              v43 = v42;
              v44 = (*((_BYTE *)v40 + 268) & 1) == 0;

              if (v44)
                v45 = "";
              else
                v45 = "dry-run ";
              v46 = nw_endpoint_handler_copy_endpoint(v43);
              v47 = nw_endpoint_get_logging_description(v46);
              v48 = v43;
              v49 = v48;
              v50 = v48[30];
              if (v50 > 5)
                v51 = "unknown-state";
              else
                v51 = off_1E149FC48[v50];
              v145 = v51;

              v56 = v49;
              v57 = v56;
              v58 = v5->mode;
              v59 = "path";
              switch(v58)
              {
                case 0:
                  break;
                case 1:
                  v59 = "resolver";
                  break;
                case 2:
                  v59 = nw_endpoint_flow_mode_string(v56[31]);
                  break;
                case 3:
                  v59 = "proxy";
                  break;
                case 4:
                  v59 = "fallback";
                  break;
                case 5:
                  v59 = "transform";
                  break;
                default:
                  v59 = "unknown-mode";
                  break;
              }

              v79 = v57;
              os_unfair_lock_lock((os_unfair_lock_t)v79 + 28);
              v80 = v79[8];
              os_unfair_lock_unlock((os_unfair_lock_t)v79 + 28);

              *(_DWORD *)buf = 136447746;
              v156 = "nw_endpoint_handler_add_write_request";
              v157 = 2082;
              id_str = v42->id_str;
              v159 = 2082;
              v160 = v45;
              v161 = 2082;
              v162 = (void *)v47;
              v163 = 2082;
              v164 = v145;
              v165 = 2082;
              v166 = v59;
              v167 = 2114;
              v168 = v80;
              _os_log_impl(&dword_182FBE000, v151, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Cannot send after flow table is released", buf, 0x48u);

LABEL_90:
              v24 = 0;
LABEL_177:
              v27 = v151;
              goto LABEL_178;
            }
            goto LABEL_52;
          }
LABEL_111:
          v24 = 0;
          goto LABEL_179;
        }
        v19 = nw_flow_add_write_request(v5, (void **)v7 + 47, v4);
      }
      v24 = v19;
LABEL_179:

      goto LABEL_180;
    }
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v12 = (id)gLogObj;
    if (mode > 5)
      v13 = "unknown-mode";
    else
      v13 = off_1E149FC18[mode];
    *(_DWORD *)buf = 136446722;
    v156 = "nw_endpoint_handler_add_write_request";
    v157 = 2082;
    id_str = (char *)v13;
    v159 = 2082;
    v160 = "flow";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v153 = 0;
    if (__nwlog_fault(v14, &type, &v153))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v16 = type;
        if (os_log_type_enabled(v15, type))
        {
          if (mode > 5)
            v17 = "unknown-mode";
          else
            v17 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v156 = "nw_endpoint_handler_add_write_request";
          v157 = 2082;
          id_str = (char *)v17;
          v159 = 2082;
          v160 = "flow";
          _os_log_impl(&dword_182FBE000, v15, v16, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
        }
      }
      else if (v153)
      {
        v20 = (char *)__nw_create_backtrace_string();
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v21 = type;
        v22 = os_log_type_enabled(v15, type);
        if (v20)
        {
          if (v22)
          {
            if (mode > 5)
              v23 = "unknown-mode";
            else
              v23 = off_1E149FC18[mode];
            *(_DWORD *)buf = 136446978;
            v156 = "nw_endpoint_handler_add_write_request";
            v157 = 2082;
            id_str = (char *)v23;
            v159 = 2082;
            v160 = "flow";
            v161 = 2082;
            v162 = v20;
            _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
          }

          free(v20);
          if (!v14)
            goto LABEL_74;
          goto LABEL_73;
        }
        if (v22)
        {
          if (mode > 5)
            v52 = "unknown-mode";
          else
            v52 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v156 = "nw_endpoint_handler_add_write_request";
          v157 = 2082;
          id_str = (char *)v52;
          v159 = 2082;
          v160 = "flow";
          _os_log_impl(&dword_182FBE000, v15, v21, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
        }
      }
      else
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v15 = (id)gLogObj;
        v38 = type;
        if (os_log_type_enabled(v15, type))
        {
          if (mode > 5)
            v39 = "unknown-mode";
          else
            v39 = off_1E149FC18[mode];
          *(_DWORD *)buf = 136446722;
          v156 = "nw_endpoint_handler_add_write_request";
          v157 = 2082;
          id_str = (char *)v39;
          v159 = 2082;
          v160 = "flow";
          _os_log_impl(&dword_182FBE000, v15, v38, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
        }
      }
LABEL_71:

    }
  }
  else
  {
    __nwlog_obj();
    v81 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v156 = "nw_endpoint_handler_add_write_request";
    v14 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v153 = 0;
    if (__nwlog_fault(v14, &type, &v153))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v82 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v156 = "nw_endpoint_handler_add_write_request";
          _os_log_impl(&dword_182FBE000, v15, v82, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v153)
      {
        v91 = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v92 = type;
        v93 = os_log_type_enabled(v15, type);
        if (v91)
        {
          if (v93)
          {
            *(_DWORD *)buf = 136446466;
            v156 = "nw_endpoint_handler_add_write_request";
            v157 = 2082;
            id_str = v91;
            _os_log_impl(&dword_182FBE000, v15, v92, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(v91);
          if (!v14)
            goto LABEL_74;
          goto LABEL_73;
        }
        if (v93)
        {
          *(_DWORD *)buf = 136446210;
          v156 = "nw_endpoint_handler_add_write_request";
          _os_log_impl(&dword_182FBE000, v15, v92, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v15 = objc_claimAutoreleasedReturnValue();
        v94 = type;
        if (os_log_type_enabled(v15, type))
        {
          *(_DWORD *)buf = 136446210;
          v156 = "nw_endpoint_handler_add_write_request";
          _os_log_impl(&dword_182FBE000, v15, v94, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }
      goto LABEL_71;
    }
  }
  if (v14)
LABEL_73:
    free(v14);
LABEL_74:
  v24 = 0;
LABEL_180:

  return v24;
}

void sub_1830D2F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;
  void *v23;
  void *v24;

  _Unwind_Resume(a1);
}

uint64_t nw_flow_add_write_request(void *a1, void **a2, void *a3)
{
  id v5;
  id v6;
  _DWORD *v7;
  _DWORD *v8;
  unsigned int v9;
  NWConcrete_nw_endpoint_handler *v10;
  int state;
  NWConcrete_nw_endpoint_handler *v12;
  char v13;
  NSObject *v14;
  NWConcrete_nw_endpoint_handler *v15;
  NWConcrete_nw_endpoint_handler *v16;
  char v17;
  const char *v18;
  nw_endpoint_t v19;
  const char *logging_description;
  NWConcrete_nw_endpoint_handler *v21;
  NWConcrete_nw_endpoint_handler *v22;
  uint64_t v23;
  const char *v24;
  NWConcrete_nw_endpoint_mode_handler *v25;
  NWConcrete_nw_endpoint_handler *v26;
  char v27;
  NSObject *v28;
  NWConcrete_nw_endpoint_handler *v29;
  NWConcrete_nw_endpoint_handler *v30;
  char v31;
  const char *v32;
  nw_endpoint_t v33;
  const char *v34;
  NWConcrete_nw_endpoint_handler *v35;
  NWConcrete_nw_endpoint_handler *v36;
  uint64_t v37;
  const char *v38;
  void **v39;
  void **v40;
  const char *v41;
  void **v42;
  void **v43;
  const char *v44;
  void **v45;
  id v46;
  uint64_t v47;
  void **v48;
  id v49;
  id v50;
  _QWORD *v51;
  NSObject *v52;
  uint64_t v53;
  size_t size;
  size_t v55;
  size_t v56;
  id *v57;
  id v58;
  const char *v59;
  _BYTE *v60;
  char v61;
  NWConcrete_nw_endpoint_handler *v62;
  _BOOL4 v63;
  NSObject *v64;
  NWConcrete_nw_endpoint_handler *v65;
  NWConcrete_nw_endpoint_handler *v66;
  _BOOL4 v67;
  const char *v68;
  nw_endpoint_t v69;
  NWConcrete_nw_endpoint_handler *v70;
  NWConcrete_nw_endpoint_handler *v71;
  uint64_t v72;
  const char *v73;
  void **v74;
  void **v75;
  const char *v76;
  NWConcrete_nw_write_request *v77;
  _BOOL8 v78;
  void *v79;
  _BOOL8 v80;
  void *v81;
  NWConcrete_nw_endpoint_handler *v82;
  BOOL v83;
  NSObject *v84;
  const char *v85;
  const char *v86;
  const char *v87;
  const char *v88;
  const char *v89;
  id v90;
  void **v91;
  id v92;
  _BOOL8 v93;
  _QWORD *v94;
  NSObject *v95;
  uint64_t v96;
  size_t v97;
  size_t v98;
  int v99;
  void *v100;
  char *v101;
  NSObject *v102;
  os_log_type_t v103;
  void *v104;
  void *v105;
  NSObject *v106;
  os_log_type_t v107;
  char *backtrace_string;
  os_log_type_t v109;
  _BOOL4 v110;
  void *v111;
  os_log_type_t v112;
  char *v113;
  os_log_type_t v114;
  _BOOL4 v115;
  os_log_type_t v116;
  _BOOL4 v117;
  os_log_type_t v118;
  NSObject *v119;
  const char *v120;
  id v121;
  size_t v122;
  id v123;
  const char *v124;
  id v125;
  const char *v126;
  os_log_type_t v127;
  const char *v128;
  char *v129;
  os_log_type_t v130;
  _BOOL4 v131;
  const char *v132;
  os_log_type_t v133;
  const char *v134;
  const char *v135;
  os_log_type_t v137;
  os_log_type_t v138;
  nw_endpoint_t v139;
  const char *v140;
  char *id_str;
  const char *v142;
  const char *v143;
  const char *v144;
  const char *v145;
  const char *v146;
  const char *v147;
  const char *v148;
  const char *id_string;
  char *log;
  NSObject *loga;
  const char *logb;
  nw_endpoint_t logd;
  nw_endpoint_t logc;
  void *v155;
  char v156;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v159;
  __int16 v160;
  char *v161;
  __int16 v162;
  const char *v163;
  __int16 v164;
  void *v165;
  __int16 v166;
  const char *v167;
  __int16 v168;
  const char *v169;
  __int16 v170;
  id v171;
  __int16 v172;
  size_t v173;
  __int16 v174;
  const char *v175;
  uint64_t v176;

  v176 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = a3;
  v7 = v5;
  v8 = v7;
  v155 = v6;
  if (!v7)
  {
    __nwlog_obj();
    v100 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v159 = "nw_endpoint_handler_get_mode";
    v101 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v156 = 0;
    if (__nwlog_fault(v101, &type, &v156))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v102 = objc_claimAutoreleasedReturnValue();
        v103 = type;
        if (os_log_type_enabled(v102, type))
        {
          *(_DWORD *)buf = 136446210;
          v159 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v102, v103, "%{public}s called with null handler", buf, 0xCu);
        }
      }
      else if (v156)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v102 = objc_claimAutoreleasedReturnValue();
        v109 = type;
        v110 = os_log_type_enabled(v102, type);
        if (backtrace_string)
        {
          if (v110)
          {
            *(_DWORD *)buf = 136446466;
            v159 = "nw_endpoint_handler_get_mode";
            v160 = 2082;
            v161 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v102, v109, "%{public}s called with null handler, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_146;
        }
        if (v110)
        {
          *(_DWORD *)buf = 136446210;
          v159 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v102, v109, "%{public}s called with null handler, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v102 = objc_claimAutoreleasedReturnValue();
        v118 = type;
        if (os_log_type_enabled(v102, type))
        {
          *(_DWORD *)buf = 136446210;
          v159 = "nw_endpoint_handler_get_mode";
          _os_log_impl(&dword_182FBE000, v102, v118, "%{public}s called with null handler, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_146:
    if (v101)
      free(v101);
    v9 = 0;
    goto LABEL_149;
  }
  v9 = v7[29];

  if (v9 != 2)
  {
LABEL_149:
    pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
    networkd_settings_init();
    v125 = (id)gLogObj;
    if (v9 > 5)
      v126 = "unknown-mode";
    else
      v126 = off_1E149FC18[v9];
    *(_DWORD *)buf = 136446722;
    v159 = "nw_flow_add_write_request";
    v160 = 2082;
    v161 = (char *)v126;
    v162 = 2082;
    v163 = "flow";
    v105 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v156 = 0;
    if (!__nwlog_fault((const char *)v105, &type, &v156))
    {
LABEL_181:
      v6 = v155;
      if (!v105)
        goto LABEL_183;
LABEL_182:
      free(v105);
      goto LABEL_183;
    }
    if (type == OS_LOG_TYPE_FAULT)
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v106 = (id)gLogObj;
      v127 = type;
      if (os_log_type_enabled(v106, type))
      {
        if (v9 > 5)
          v128 = "unknown-mode";
        else
          v128 = off_1E149FC18[v9];
        *(_DWORD *)buf = 136446722;
        v159 = "nw_flow_add_write_request";
        v160 = 2082;
        v161 = (char *)v128;
        v162 = 2082;
        v163 = "flow";
        _os_log_impl(&dword_182FBE000, v106, v127, "%{public}s Handler is in mode %{public}s, expected %{public}s", buf, 0x20u);
      }
    }
    else if (v156)
    {
      v129 = (char *)__nw_create_backtrace_string();
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v106 = (id)gLogObj;
      v130 = type;
      v131 = os_log_type_enabled(v106, type);
      if (v129)
      {
        if (v131)
        {
          if (v9 > 5)
            v132 = "unknown-mode";
          else
            v132 = off_1E149FC18[v9];
          *(_DWORD *)buf = 136446978;
          v159 = "nw_flow_add_write_request";
          v160 = 2082;
          v161 = (char *)v132;
          v162 = 2082;
          v163 = "flow";
          v164 = 2082;
          v165 = v129;
          _os_log_impl(&dword_182FBE000, v106, v130, "%{public}s Handler is in mode %{public}s, expected %{public}s, dumping backtrace:%{public}s", buf, 0x2Au);
        }

        free(v129);
        v6 = v155;
        if (!v105)
          goto LABEL_183;
        goto LABEL_182;
      }
      if (v131)
      {
        if (v9 > 5)
          v135 = "unknown-mode";
        else
          v135 = off_1E149FC18[v9];
        *(_DWORD *)buf = 136446722;
        v159 = "nw_flow_add_write_request";
        v160 = 2082;
        v161 = (char *)v135;
        v162 = 2082;
        v163 = "flow";
        _os_log_impl(&dword_182FBE000, v106, v130, "%{public}s Handler is in mode %{public}s, expected %{public}s, no backtrace", buf, 0x20u);
      }
    }
    else
    {
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      v106 = (id)gLogObj;
      v133 = type;
      if (os_log_type_enabled(v106, type))
      {
        if (v9 > 5)
          v134 = "unknown-mode";
        else
          v134 = off_1E149FC18[v9];
        *(_DWORD *)buf = 136446722;
        v159 = "nw_flow_add_write_request";
        v160 = 2082;
        v161 = (char *)v134;
        v162 = 2082;
        v163 = "flow";
        _os_log_impl(&dword_182FBE000, v106, v133, "%{public}s Handler is in mode %{public}s, expected %{public}s, backtrace limit exceeded", buf, 0x20u);
      }
    }
LABEL_180:

    goto LABEL_181;
  }
  if (!a2)
  {
    __nwlog_obj();
    v104 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v159 = "nw_flow_add_write_request";
    v105 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v156 = 0;
    if (!__nwlog_fault((const char *)v105, &type, &v156))
      goto LABEL_181;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v107 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_182FBE000, v106, v107, "%{public}s called with null flow_protocol", buf, 0xCu);
      }
      goto LABEL_180;
    }
    if (!v156)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v137 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_182FBE000, v106, v137, "%{public}s called with null flow_protocol, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_180;
    }
    v113 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v106 = objc_claimAutoreleasedReturnValue();
    v114 = type;
    v115 = os_log_type_enabled(v106, type);
    if (!v113)
    {
      if (v115)
      {
        *(_DWORD *)buf = 136446210;
        v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_182FBE000, v106, v114, "%{public}s called with null flow_protocol, no backtrace", buf, 0xCu);
      }
      goto LABEL_180;
    }
    if (v115)
    {
      *(_DWORD *)buf = 136446466;
      v159 = "nw_flow_add_write_request";
      v160 = 2082;
      v161 = v113;
      _os_log_impl(&dword_182FBE000, v106, v114, "%{public}s called with null flow_protocol, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_132;
  }
  if (!v6)
  {
    __nwlog_obj();
    v111 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v159 = "nw_flow_add_write_request";
    v105 = (void *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v156 = 0;
    if (!__nwlog_fault((const char *)v105, &type, &v156))
      goto LABEL_181;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v112 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_182FBE000, v106, v112, "%{public}s called with null write_request", buf, 0xCu);
      }
      goto LABEL_180;
    }
    if (!v156)
    {
      __nwlog_obj();
      v106 = objc_claimAutoreleasedReturnValue();
      v138 = type;
      if (os_log_type_enabled(v106, type))
      {
        *(_DWORD *)buf = 136446210;
        v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_182FBE000, v106, v138, "%{public}s called with null write_request, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_180;
    }
    v113 = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v106 = objc_claimAutoreleasedReturnValue();
    v116 = type;
    v117 = os_log_type_enabled(v106, type);
    if (!v113)
    {
      if (v117)
      {
        *(_DWORD *)buf = 136446210;
        v159 = "nw_flow_add_write_request";
        _os_log_impl(&dword_182FBE000, v106, v116, "%{public}s called with null write_request, no backtrace", buf, 0xCu);
      }
      goto LABEL_180;
    }
    if (v117)
    {
      *(_DWORD *)buf = 136446466;
      v159 = "nw_flow_add_write_request";
      v160 = 2082;
      v161 = v113;
      _os_log_impl(&dword_182FBE000, v106, v116, "%{public}s called with null write_request, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_132:

    free(v113);
    goto LABEL_181;
  }
  if (_nw_signposts_once != -1)
    dispatch_once(&_nw_signposts_once, &__block_literal_global_89);
  if (_nw_signposts_enabled && kdebug_is_enabled())
    kdebug_trace();
  v10 = v8;
  state = v10->state;

  if ((state & 0xFFFFFFFE) == 4)
  {
    v12 = v10;
    v13 = *((_BYTE *)v12 + 268);

    if ((v13 & 0x20) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v14 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v15 = v12;

        v16 = v15;
        v17 = *((_BYTE *)v12 + 268);

        if ((v17 & 1) != 0)
          v18 = "dry-run ";
        else
          v18 = "";
        v19 = nw_endpoint_handler_copy_endpoint(v16);
        logging_description = nw_endpoint_get_logging_description(v19);
        log = v15->id_str;
        v21 = v16;
        v22 = v21;
        v23 = v10->state;
        if (v23 > 5)
          v24 = "unknown-state";
        else
          v24 = off_1E149FC48[v23];

        v39 = v22;
        v40 = v39;
        v41 = "path";
        switch(v8[29])
        {
          case 0:
            break;
          case 1:
            v41 = "resolver";
            break;
          case 2:
            v41 = nw_endpoint_flow_mode_string(v39[31]);
            break;
          case 3:
            v41 = "proxy";
            break;
          case 4:
            v41 = "fallback";
            break;
          case 5:
            v41 = "transform";
            break;
          default:
            v41 = "unknown-mode";
            break;
        }

        v45 = v40;
        os_unfair_lock_lock((os_unfair_lock_t)v45 + 28);
        v46 = v45[8];
        os_unfair_lock_unlock((os_unfair_lock_t)v45 + 28);

        *(_DWORD *)buf = 136447746;
        v159 = "nw_flow_add_write_request";
        v160 = 2082;
        v161 = log;
        v162 = 2082;
        v163 = v18;
        v164 = 2082;
        v165 = (void *)logging_description;
        v166 = 2082;
        v167 = v24;
        v168 = 2082;
        v169 = v41;
        v170 = 2114;
        v171 = v46;
        _os_log_impl(&dword_182FBE000, v14, OS_LOG_TYPE_ERROR, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] cannot accept write requests", buf, 0x48u);

      }
      v47 = 0;
      goto LABEL_101;
    }
LABEL_183:
    v47 = 0;
    goto LABEL_184;
  }
  v25 = nw_endpoint_handler_copy_flow(v10);
  if ((*((_BYTE *)v25 + 34) & 8) != 0)
  {
    if (!nw_endpoint_handler_get_minimize_logging(v10))
    {
      v26 = v10;
      v27 = *((_BYTE *)v26 + 268);

      if ((v27 & 0x20) != 0)
        goto LABEL_61;
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v28 = (id)gconnectionLogObj;
      if (!os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        goto LABEL_60;
      loga = v28;
      v29 = v26;

      v30 = v29;
      v31 = *((_BYTE *)v26 + 268);

      if ((v31 & 1) != 0)
        v32 = "dry-run ";
      else
        v32 = "";
      v33 = nw_endpoint_handler_copy_endpoint(v30);
      v34 = nw_endpoint_get_logging_description(v33);
      v35 = v30;
      v36 = v35;
      v37 = v10->state;
      if (v37 > 5)
        v38 = "unknown-state";
      else
        v38 = off_1E149FC48[v37];
      v143 = v38;
      id_str = v29->id_str;

      v42 = v36;
      v43 = v42;
      v146 = v34;
      v44 = "path";
      switch(v8[29])
      {
        case 0:
          break;
        case 1:
          v44 = "resolver";
          break;
        case 2:
          v44 = nw_endpoint_flow_mode_string(v42[31]);
          break;
        case 3:
          v44 = "proxy";
          break;
        case 4:
          v44 = "fallback";
          break;
        case 5:
          v44 = "transform";
          break;
        default:
          v44 = "unknown-mode";
          break;
      }

      v48 = v43;
      os_unfair_lock_lock((os_unfair_lock_t)v48 + 28);
      v49 = v48[8];
      os_unfair_lock_unlock((os_unfair_lock_t)v48 + 28);

      v50 = v49;
      v51 = v155;
      v52 = v51[7];
      v53 = v51[9];
      v139 = v33;
      if (v52)
      {
        if (!v53)
        {
          size = dispatch_data_get_size(v52);
LABEL_54:
          v55 = v51[14];
          if (size <= v55)
            v55 = 0;
          v56 = size - v55;
          goto LABEL_57;
        }
      }
      else if (!v53)
      {
        v56 = 0;
LABEL_57:

        v57 = v51;
        v58 = v57[8];

        v59 = "not ";
        v159 = "nw_flow_add_write_request";
        *(_DWORD *)buf = 136448258;
        if (v58)
          v59 = "";
        v160 = 2082;
        v161 = id_str;
        v162 = 2082;
        v163 = v32;
        v164 = 2082;
        v165 = (void *)v146;
        v166 = 2082;
        v167 = v143;
        v168 = 2082;
        v169 = v44;
        v170 = 2114;
        v171 = v50;
        v172 = 2048;
        v173 = v56;
        v174 = 2080;
        v175 = v59;
        v28 = loga;
        _os_log_impl(&dword_182FBE000, loga, OS_LOG_TYPE_DEFAULT, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request submitted: %zu bytes, context %spresent", buf, 0x5Cu);

LABEL_60:
        v6 = v155;
        goto LABEL_61;
      }
      size = v51[12];
      goto LABEL_54;
    }
    if ((nw_endpoint_handler_get_logging_disabled(v10) & 1) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v119 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v119, OS_LOG_TYPE_DEBUG))
      {
        id_string = nw_endpoint_handler_get_id_string(v10);
        v145 = nw_endpoint_handler_dry_run_string(v10);
        logc = nw_endpoint_handler_copy_endpoint(v10);
        v142 = nw_endpoint_get_logging_description(logc);
        v140 = nw_endpoint_handler_state_string(v10);
        v120 = nw_endpoint_handler_mode_string(v10);
        v121 = nw_endpoint_handler_copy_current_path(v10);
        v122 = nw_write_request_remaining_bytes(v155);
        v28 = v119;
        v123 = nw_write_request_copy_context(v155);
        *(_DWORD *)buf = 136448258;
        v159 = "nw_flow_add_write_request";
        v124 = "";
        v161 = (char *)id_string;
        v160 = 2082;
        if (!v123)
          v124 = "not ";
        v162 = 2082;
        v163 = v145;
        v164 = 2082;
        v165 = (void *)v142;
        v166 = 2082;
        v167 = v140;
        v168 = 2082;
        v169 = v120;
        v170 = 2114;
        v171 = v121;
        v172 = 2048;
        v173 = v122;
        v174 = 2080;
        v175 = v124;
        _os_log_impl(&dword_182FBE000, v119, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] Write request submitted: %zu bytes, context %spresent", buf, 0x5Cu);

      }
      else
      {
        v28 = v119;
      }
      goto LABEL_60;
    }
  }
LABEL_61:
  v60 = v6;
  v61 = v60[128];

  if ((v61 & 4) == 0)
  {
LABEL_91:
    v93 = nw_write_request_list_append(a2[24], v60);
    v77 = (NWConcrete_nw_write_request *)a2[24];
    a2[24] = (void *)v93;
    goto LABEL_92;
  }
  if ((*((_BYTE *)v25 + 33) & 8) != 0 || a2[24])
  {
    v62 = v10;
    v63 = (*((_BYTE *)v62 + 268) & 0x20) == 0;

    if (v63)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v64 = (id)gconnectionLogObj;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        v65 = v62;

        v66 = v65;
        v67 = (*((_BYTE *)v62 + 268) & 1) == 0;

        if (v67)
          v68 = "";
        else
          v68 = "dry-run ";
        v69 = nw_endpoint_handler_copy_endpoint(v66);
        v147 = nw_endpoint_get_logging_description(v69);
        v70 = v66;
        v71 = v70;
        v72 = v10->state;
        if (v72 > 5)
          v73 = "unknown-state";
        else
          v73 = off_1E149FC48[v72];

        v74 = v71;
        v75 = v74;
        logb = "path";
        switch(v8[29])
        {
          case 0:
            goto LABEL_89;
          case 1:
            v76 = "resolver";
            goto LABEL_88;
          case 2:
            logb = nw_endpoint_flow_mode_string(v74[31]);
            goto LABEL_89;
          case 3:
            v76 = "proxy";
            goto LABEL_88;
          case 4:
            v76 = "fallback";
            goto LABEL_88;
          case 5:
            v76 = "transform";
            goto LABEL_88;
          default:
            v76 = "unknown-mode";
LABEL_88:
            logb = v76;
LABEL_89:

            v144 = v68;
            v91 = v75;
            os_unfair_lock_lock((os_unfair_lock_t)v91 + 28);
            v92 = v91[8];
            os_unfair_lock_unlock((os_unfair_lock_t)v91 + 28);

            *(_DWORD *)buf = 136447746;
            v159 = "nw_flow_add_write_request";
            v160 = 2082;
            v161 = v65->id_str;
            v162 = 2082;
            v163 = v144;
            v164 = 2082;
            v165 = (void *)v147;
            v166 = 2082;
            v167 = v73;
            v168 = 2082;
            v169 = logb;
            v170 = 2114;
            v171 = v92;
            _os_log_impl(&dword_182FBE000, v64, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding idempotent write request", buf, 0x48u);

            break;
        }
      }

    }
    goto LABEL_91;
  }
  v77 = nw_write_request_create_clone(v60);
  v78 = nw_write_request_list_append(a2[26], v77);
  v79 = a2[26];
  a2[26] = (void *)v78;

  v80 = nw_write_request_list_append(a2[25], v60);
  v81 = a2[25];
  a2[25] = (void *)v80;

  v82 = v10;
  v83 = (*((_BYTE *)v82 + 268) & 0x20) == 0;

  if (v83)
  {
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v84 = (id)gconnectionLogObj;
    if (os_log_type_enabled(v84, OS_LOG_TYPE_DEBUG))
    {
      v85 = nw_endpoint_handler_get_id_string(v82);
      v148 = nw_endpoint_handler_dry_run_string(v82);
      logd = nw_endpoint_handler_copy_endpoint(v82);
      v86 = v85;
      v87 = nw_endpoint_get_logging_description(logd);
      v88 = nw_endpoint_handler_state_string(v82);
      v89 = nw_endpoint_handler_mode_string(v82);
      v90 = nw_endpoint_handler_copy_current_path(v82);
      *(_DWORD *)buf = 136447746;
      v159 = "nw_flow_add_write_request";
      v160 = 2082;
      v161 = (char *)v86;
      v162 = 2082;
      v163 = v148;
      v164 = 2082;
      v165 = (void *)v87;
      v166 = 2082;
      v167 = v88;
      v168 = 2082;
      v169 = v89;
      v170 = 2114;
      v171 = v90;
      _os_log_impl(&dword_182FBE000, v84, OS_LOG_TYPE_DEBUG, "%{public}s [C%{public}s %{public}s%{public}s %{public}s %{public}s (%{public}@)] adding idempotent initial write request", buf, 0x48u);

    }
  }
LABEL_92:

  os_unfair_lock_lock((os_unfair_lock_t)v25 + 220);
  v94 = v60;
  v95 = v94[7];
  v96 = v94[9];
  if (v95)
  {
    if (!v96)
    {
      v97 = dispatch_data_get_size(v95);
LABEL_97:
      v98 = v94[14];
      if (v97 <= v98)
        LODWORD(v98) = 0;
      v99 = v97 - v98;
      goto LABEL_100;
    }
LABEL_96:
    v97 = v94[12];
    goto LABEL_97;
  }
  if (v96)
    goto LABEL_96;
  v99 = 0;
LABEL_100:

  *((_DWORD *)v25 + 224) += v99;
  os_unfair_lock_unlock((os_unfair_lock_t)v25 + 220);

  v47 = 1;
LABEL_101:
  v6 = v155;
LABEL_184:

  return v47;
}

void sub_1830D45E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;
  void *v19;

  _Unwind_Resume(a1);
}

BOOL nw_write_request_list_append(void *a1, void *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  id v5;
  os_unfair_lock_s *v6;
  os_unfair_lock_s *v7;
  void *v8;
  uint64_t v9;
  double v10;
  id v11;
  void *v12;
  _QWORD *v13;
  _QWORD *v14;
  id *v15;
  id *v16;
  _BOOL8 result;
  void *v18;
  char *v19;
  NSObject *v20;
  os_log_type_t v21;
  NSObject *v22;
  void *v23;
  NSObject *v24;
  void *v25;
  void *v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  char *backtrace_string;
  os_log_type_t v31;
  _BOOL4 v32;
  char *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  NSObject *v36;
  void *v37;
  os_log_type_t v38;
  os_log_type_t v39;
  NSObject *v40;
  void *v41;
  char v42;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v45;
  __int16 v46;
  char *v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = a2;
  v5 = v4;
  if (!v4)
  {
    __nwlog_obj();
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v45 = "nw_write_request_list_append";
    v19 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v42 = 0;
    if (__nwlog_fault(v19, &type, &v42))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v21 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_write_request_list_append";
          _os_log_impl(&dword_182FBE000, v20, v21, "%{public}s called with null request", buf, 0xCu);
        }
      }
      else if (v42)
      {
        backtrace_string = (char *)__nw_create_backtrace_string();
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v31 = type;
        v32 = os_log_type_enabled(v20, type);
        if (backtrace_string)
        {
          if (v32)
          {
            *(_DWORD *)buf = 136446466;
            v45 = "nw_write_request_list_append";
            v46 = 2082;
            v47 = backtrace_string;
            _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s called with null request, dumping backtrace:%{public}s", buf, 0x16u);
          }

          free(backtrace_string);
          goto LABEL_68;
        }
        if (v32)
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_write_request_list_append";
          _os_log_impl(&dword_182FBE000, v20, v31, "%{public}s called with null request, no backtrace", buf, 0xCu);
        }
      }
      else
      {
        __nwlog_obj();
        v20 = objc_claimAutoreleasedReturnValue();
        v38 = type;
        if (os_log_type_enabled(v20, type))
        {
          *(_DWORD *)buf = 136446210;
          v45 = "nw_write_request_list_append";
          _os_log_impl(&dword_182FBE000, v20, v38, "%{public}s called with null request, backtrace limit exceeded", buf, 0xCu);
        }
      }

    }
LABEL_68:
    if (v19)
      free(v19);
    v11 = 0;
    goto LABEL_32;
  }
  if (!v4[1])
  {
    if (!v4[2])
      goto LABEL_4;
    goto LABEL_40;
  }
  __nwlog_obj();
  v22 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v22, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v45 = "nw_write_request_list_append";
  v23 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v23);
  if (result)
    goto LABEL_78;
  free(v23);
  if (*((_QWORD *)v5 + 2))
  {
LABEL_40:
    __nwlog_obj();
    v24 = objc_claimAutoreleasedReturnValue();
    os_log_type_enabled(v24, OS_LOG_TYPE_ERROR);
    *(_DWORD *)buf = 136446210;
    v45 = "nw_write_request_list_append";
    v25 = (void *)_os_log_send_and_compose_impl();

    result = __nwlog_abort((uint64_t)v25);
    if (result)
      goto LABEL_78;
    free(v25);
  }
LABEL_4:
  v6 = (os_unfair_lock_s *)*((id *)v5 + 8);
  v7 = v6;
  if (v6)
  {
    if (v6 != (os_unfair_lock_s *)&__block_literal_global_5_41741
      && v6 != (os_unfair_lock_s *)&__block_literal_global_4
      && v6 != (os_unfair_lock_s *)&__block_literal_global_3_41726
      && v6 != (os_unfair_lock_s *)&__block_literal_global_41718)
    {
      os_unfair_lock_lock(v6 + 28);
      if (!*(_QWORD *)&v7[18]._os_unfair_lock_opaque)
      {
        *(_QWORD *)&v7[18]._os_unfair_lock_opaque = mach_absolute_time();
        v8 = *(void **)&v7[24]._os_unfair_lock_opaque;
        *(_QWORD *)&v7[24]._os_unfair_lock_opaque = 0;

      }
      os_unfair_lock_unlock(v7 + 28);
    }
    goto LABEL_12;
  }
  __nwlog_obj();
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v45 = "nw_content_context_mark_enqueue_time";
  v27 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v42 = 0;
  if (__nwlog_fault(v27, &type, &v42))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v29 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_content_context_mark_enqueue_time";
        _os_log_impl(&dword_182FBE000, v28, v29, "%{public}s called with null context", buf, 0xCu);
      }
    }
    else if (v42)
    {
      v33 = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v34 = type;
      v35 = os_log_type_enabled(v28, type);
      if (v33)
      {
        if (v35)
        {
          *(_DWORD *)buf = 136446466;
          v45 = "nw_content_context_mark_enqueue_time";
          v46 = 2082;
          v47 = v33;
          _os_log_impl(&dword_182FBE000, v28, v34, "%{public}s called with null context, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(v33);
        goto LABEL_74;
      }
      if (v35)
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_content_context_mark_enqueue_time";
        _os_log_impl(&dword_182FBE000, v28, v34, "%{public}s called with null context, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v28 = objc_claimAutoreleasedReturnValue();
      v39 = type;
      if (os_log_type_enabled(v28, type))
      {
        *(_DWORD *)buf = 136446210;
        v45 = "nw_content_context_mark_enqueue_time";
        _os_log_impl(&dword_182FBE000, v28, v39, "%{public}s called with null context, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_74:
  if (v27)
    free(v27);
LABEL_12:

  if (!v3)
  {
    if (!*((_QWORD *)v5 + 2))
      *((_QWORD *)v5 + 2) = v5;
    v11 = v5;
    v3 = 0;
    goto LABEL_32;
  }
  v9 = v3[2];
  if (!v9)
  {
    v10 = *((double *)v5 + 15);
LABEL_21:
    if (v10 > *((double *)v3 + 15))
    {
      v12 = (void *)*((_QWORD *)v5 + 1);
      *((_QWORD *)v5 + 1) = v3;
      v13 = v3;

      *((_QWORD *)v5 + 2) = v3[2];
      v3[2] = 0;

      v14 = v5;
LABEL_31:
      v3 = v14;
      v11 = v14;
LABEL_32:

      return (BOOL)v11;
    }
    v15 = (id *)v3;
    while (1)
    {
      v16 = v15;
      v15 = (id *)v15[1];
      if (!v15)
        break;
      if (v10 > *((double *)v15 + 15))
      {
        objc_storeStrong((id *)v5 + 1, v15);
        objc_storeStrong(v16 + 1, a2);
        goto LABEL_30;
      }
    }
    if ((id *)v9 != v16)
    {
      __nwlog_obj();
      v40 = objc_claimAutoreleasedReturnValue();
      os_log_type_enabled(v40, OS_LOG_TYPE_ERROR);
      *(_DWORD *)buf = 136446210;
      v45 = "nw_write_request_list_append";
      v41 = (void *)_os_log_send_and_compose_impl();

      result = __nwlog_abort((uint64_t)v41);
      if (result)
        goto LABEL_78;
      free(v41);
    }
    objc_storeStrong(v16 + 1, a2);
LABEL_29:
    v3[2] = v5;
LABEL_30:
    v14 = v3;
    goto LABEL_31;
  }
  v10 = *((double *)v5 + 15);
  if (*(double *)(v9 + 120) < v10)
    goto LABEL_21;
  if (!*(_QWORD *)(v9 + 8))
  {
LABEL_16:
    objc_storeStrong((id *)(v9 + 8), a2);
    goto LABEL_29;
  }
  __nwlog_obj();
  v36 = objc_claimAutoreleasedReturnValue();
  os_log_type_enabled(v36, OS_LOG_TYPE_ERROR);
  *(_DWORD *)buf = 136446210;
  v45 = "nw_write_request_list_append";
  v37 = (void *)_os_log_send_and_compose_impl();

  result = __nwlog_abort((uint64_t)v37);
  if (!result)
  {
    free(v37);
    v9 = v3[2];
    goto LABEL_16;
  }
LABEL_78:
  __break(1u);
  return result;
}

void sub_1830D4F2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t nw_path_should_probe_connectivity(void *a1)
{
  unsigned __int8 *v1;
  void *v2;
  uint64_t v3;
  void *v5;
  char *v6;
  NSObject *v7;
  os_log_type_t v8;
  char *backtrace_string;
  os_log_type_t v10;
  _BOOL4 v11;
  os_log_type_t v12;
  char v13;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v16;
  __int16 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  v2 = v1;
  if (v1)
  {
    v3 = (v1[474] >> 5) & 1;
    goto LABEL_3;
  }
  __nwlog_obj();
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v16 = "nw_path_should_probe_connectivity";
  v6 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v13 = 0;
  if (__nwlog_fault(v6, &type, &v13))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v8 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_should_probe_connectivity";
        _os_log_impl(&dword_182FBE000, v7, v8, "%{public}s called with null path", buf, 0xCu);
      }
    }
    else if (v13)
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v10 = type;
      v11 = os_log_type_enabled(v7, type);
      if (backtrace_string)
      {
        if (v11)
        {
          *(_DWORD *)buf = 136446466;
          v16 = "nw_path_should_probe_connectivity";
          v17 = 2082;
          v18 = backtrace_string;
          _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, dumping backtrace:%{public}s", buf, 0x16u);
        }

        free(backtrace_string);
        goto LABEL_20;
      }
      if (v11)
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_should_probe_connectivity";
        _os_log_impl(&dword_182FBE000, v7, v10, "%{public}s called with null path, no backtrace", buf, 0xCu);
      }
    }
    else
    {
      __nwlog_obj();
      v7 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v7, type))
      {
        *(_DWORD *)buf = 136446210;
        v16 = "nw_path_should_probe_connectivity";
        _os_log_impl(&dword_182FBE000, v7, v12, "%{public}s called with null path, backtrace limit exceeded", buf, 0xCu);
      }
    }

  }
LABEL_20:
  if (v6)
    free(v6);
  v3 = 0;
LABEL_3:

  return v3;
}

uint64_t __nw_path_evaluator_cancel_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id nw_protocol_instance_copy_options(void *a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  dispatch_queue_t *v6;
  dispatch_queue_t *v7;
  uint64_t node;
  void *v9;
  id v10;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  void *v16;
  os_log_type_t v17;
  char *backtrace_string;
  os_log_type_t v19;
  _BOOL4 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  os_log_type_t v23;
  os_log_type_t v24;
  char v25;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v28;
  __int16 v29;
  char *v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  v3 = a1;
  v4 = v3;
  if (v3)
  {
    v5 = (void *)v3[15];
    if (v5)
    {
      v6 = v5;
      v7 = v6;
      if (((_BYTE)v6[17] & 8) == 0)
        dispatch_assert_queue_V2(v6[1]);

    }
    if (a2 != -1 && *(_DWORD *)(v4[1] + 64) == 3)
    {
      node = nw_hash_table_get_node(v4[29], a2, 8);
      if (node)
      {
        v9 = *(void **)(node + 40);
LABEL_12:
        v10 = v9;
        goto LABEL_13;
      }
LABEL_11:
      v9 = (void *)v4[7];
      goto LABEL_12;
    }
    if (a2 == -1)
      goto LABEL_11;
    __nwlog_obj();
    v16 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_instance_copy_options";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v17 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_182FBE000, v14, v17, "%{public}s called with null (flow == (_nw_protocol_default_flow))", buf, 0xCu);
        }
LABEL_45:

        goto LABEL_46;
      }
      if (!v25)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v24 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_182FBE000, v14, v24, "%{public}s called with null (flow == (_nw_protocol_default_flow)), backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v21 = type;
      v22 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v22)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null (flow == (_nw_protocol_default_flow)), no backtrace", buf, 0xCu);
        }
        goto LABEL_45;
      }
      if (v22)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_protocol_instance_copy_options";
        v29 = 2082;
        v30 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v14, v21, "%{public}s called with null (flow == (_nw_protocol_default_flow)), dumping backtrace:%{public}s", buf, 0x16u);
      }
      goto LABEL_33;
    }
  }
  else
  {
    __nwlog_obj();
    v12 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v28 = "nw_protocol_instance_copy_options";
    v13 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v25 = 0;
    if (__nwlog_fault(v13, &type, &v25))
    {
      if (type == OS_LOG_TYPE_FAULT)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v15 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_182FBE000, v14, v15, "%{public}s called with null instance", buf, 0xCu);
        }
        goto LABEL_45;
      }
      if (!v25)
      {
        __nwlog_obj();
        v14 = objc_claimAutoreleasedReturnValue();
        v23 = type;
        if (os_log_type_enabled(v14, type))
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_182FBE000, v14, v23, "%{public}s called with null instance, backtrace limit exceeded", buf, 0xCu);
        }
        goto LABEL_45;
      }
      backtrace_string = (char *)__nw_create_backtrace_string();
      __nwlog_obj();
      v14 = objc_claimAutoreleasedReturnValue();
      v19 = type;
      v20 = os_log_type_enabled(v14, type);
      if (!backtrace_string)
      {
        if (v20)
        {
          *(_DWORD *)buf = 136446210;
          v28 = "nw_protocol_instance_copy_options";
          _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null instance, no backtrace", buf, 0xCu);
        }
        goto LABEL_45;
      }
      if (v20)
      {
        *(_DWORD *)buf = 136446466;
        v28 = "nw_protocol_instance_copy_options";
        v29 = 2082;
        v30 = backtrace_string;
        _os_log_impl(&dword_182FBE000, v14, v19, "%{public}s called with null instance, dumping backtrace:%{public}s", buf, 0x16u);
      }
LABEL_33:

      free(backtrace_string);
    }
  }
LABEL_46:
  if (v13)
    free(v13);
  v10 = 0;
LABEL_13:

  return v10;
}

void sub_1830D56F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

id nw_parameters_copy_protocol_value(void *a1, uint64_t a2, const char *a3)
{
  id v5;
  void *v6;
  id v7;
  void *v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  void *v13;
  os_log_type_t v14;
  void *v15;
  os_log_type_t v16;
  char *backtrace_string;
  os_log_type_t v18;
  _BOOL4 v19;
  os_log_type_t v20;
  _BOOL4 v21;
  os_log_type_t v22;
  _BOOL4 v23;
  os_log_type_t v24;
  os_log_type_t v25;
  os_log_type_t v26;
  char v27;
  os_log_type_t type;
  uint8_t buf[4];
  const char *v30;
  __int16 v31;
  char *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  v5 = a1;
  v6 = v5;
  if (!v5)
  {
    __nwlog_obj();
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_parameters_copy_protocol_value";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v10, &type, &v27))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v12 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_182FBE000, v11, v12, "%{public}s called with null parameters", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v27)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v24 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_182FBE000, v11, v24, "%{public}s called with null parameters, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v18 = type;
    v19 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v19)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null parameters, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v19)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_parameters_copy_protocol_value";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v18, "%{public}s called with null parameters, dumping backtrace:%{public}s", buf, 0x16u);
    }
LABEL_38:

    free(backtrace_string);
    goto LABEL_57;
  }
  if (!a2)
  {
    __nwlog_obj();
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)buf = 136446210;
    v30 = "nw_parameters_copy_protocol_value";
    v10 = (char *)_os_log_send_and_compose_impl();

    type = OS_LOG_TYPE_ERROR;
    v27 = 0;
    if (!__nwlog_fault(v10, &type, &v27))
      goto LABEL_57;
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v14 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_182FBE000, v11, v14, "%{public}s called with null protocol_instance", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (!v27)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v25 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_182FBE000, v11, v25, "%{public}s called with null protocol_instance, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v20 = type;
    v21 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v21)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null protocol_instance, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v21)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_parameters_copy_protocol_value";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v20, "%{public}s called with null protocol_instance, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
  if (a3)
  {
    v7 = nw_parameters_copy_protocol_value_from_level(v5, 5, a2, a3);
    if (!v7)
    {
      v7 = nw_parameters_copy_protocol_value_from_level(v6, 4, a2, a3);
      if (!v7)
      {
        v7 = nw_parameters_copy_protocol_value_from_level(v6, 3, a2, a3);
        if (!v7)
          v7 = nw_parameters_copy_protocol_value_from_level(v6, 2, a2, a3);
      }
    }
    goto LABEL_8;
  }
  __nwlog_obj();
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  *(_DWORD *)buf = 136446210;
  v30 = "nw_parameters_copy_protocol_value";
  v10 = (char *)_os_log_send_and_compose_impl();

  type = OS_LOG_TYPE_ERROR;
  v27 = 0;
  if (__nwlog_fault(v10, &type, &v27))
  {
    if (type == OS_LOG_TYPE_FAULT)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v16 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_182FBE000, v11, v16, "%{public}s called with null key", buf, 0xCu);
      }
LABEL_56:

      goto LABEL_57;
    }
    if (!v27)
    {
      __nwlog_obj();
      v11 = objc_claimAutoreleasedReturnValue();
      v26 = type;
      if (os_log_type_enabled(v11, type))
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_182FBE000, v11, v26, "%{public}s called with null key, backtrace limit exceeded", buf, 0xCu);
      }
      goto LABEL_56;
    }
    backtrace_string = (char *)__nw_create_backtrace_string();
    __nwlog_obj();
    v11 = objc_claimAutoreleasedReturnValue();
    v22 = type;
    v23 = os_log_type_enabled(v11, type);
    if (!backtrace_string)
    {
      if (v23)
      {
        *(_DWORD *)buf = 136446210;
        v30 = "nw_parameters_copy_protocol_value";
        _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null key, no backtrace", buf, 0xCu);
      }
      goto LABEL_56;
    }
    if (v23)
    {
      *(_DWORD *)buf = 136446466;
      v30 = "nw_parameters_copy_protocol_value";
      v31 = 2082;
      v32 = backtrace_string;
      _os_log_impl(&dword_182FBE000, v11, v22, "%{public}s called with null key, dumping backtrace:%{public}s", buf, 0x16u);
    }
    goto LABEL_38;
  }
LABEL_57:
  if (v10)
    free(v10);
  v7 = 0;
LABEL_8:

  return v7;
}

void sub_1830D5E24(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

BOOL nw_socket_initialize_socket(nw_protocol *a1)
{
  nw_protocol **p_output_handler;
  nw_protocol_identifier *identifier;
  uint64_t v4;
  uint64_t (*v5)(nw_protocol_identifier *);
  void *v6;
  uint64_t v7;
  int v8;
  int handle;
  nw_protocol_callbacks *v10;
  int v11;
  NSObject *v12;
  uint64_t v13;
  _BOOL8 result;
  int v15;
  const char *v16;
  NSObject *v17;
  uint32_t v18;
  uint64_t v19;
  uint64_t v20;
  void (**v21)(_QWORD);
  const void *v22;
  uint64_t v23;
  uint64_t (*v24)(nw_protocol_identifier *);
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(nw_protocol_identifier *);
  void *v29;
  uint64_t v30;
  int output_handler_high;
  nw_protocol **v32;
  int v33;
  NSObject *v34;
  uint64_t v35;
  int address_family;
  uint64_t v37;
  uint64_t v38;
  void (**v39)(_QWORD);
  const void *v40;
  uint64_t v41;
  uint64_t v42;
  void (**v43)(_QWORD);
  const void *v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  const char *v48;
  char *v49;
  _BOOL4 v50;
  uint64_t v51;
  uint64_t (*v52)(nw_protocol_identifier *);
  void *v53;
  uint64_t v54;
  char *v55;
  NSObject *v56;
  os_log_type_t v57;
  const char *v58;
  int v59;
  NSObject *v60;
  NSObject *v61;
  uint64_t v62;
  id *v63;
  id v64;
  id *v65;
  id v66;
  id v67;
  _BOOL4 v68;
  char *v69;
  _BOOL4 v70;
  uint64_t v71;
  uint64_t v72;
  void (**v73)(_QWORD);
  const void *v74;
  char *v75;
  NSObject *v76;
  os_log_type_t v77;
  const char *v78;
  uint64_t v79;
  char *v80;
  _BOOL4 v81;
  int v82;
  NSObject *v83;
  nw_protocol *v84;
  char v85;
  nw_protocol *output_handler;
  _WORD *v87;
  NSObject *v88;
  int v89;
  NSObject *v90;
  NSObject *v91;
  NSObject *v92;
  char v93;
  nw_protocol *v94;
  NSObject *v95;
  int v96;
  char *v97;
  NSObject *v98;
  os_log_type_t v99;
  const char *v100;
  char *v101;
  _BOOL4 v102;
  char *v103;
  NSObject *v104;
  os_log_type_t v105;
  const char *v106;
  char *v107;
  _BOOL4 v108;
  uint64_t v109;
  uint64_t (*v110)(nw_protocol_identifier *);
  void *v111;
  uint64_t v112;
  _QWORD *v113;
  _BOOL4 v114;
  uint64_t v115;
  int v116;
  const char *v117;
  NSObject *v118;
  os_log_type_t v119;
  uint64_t v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  void (**v124)(_QWORD);
  const void *v125;
  char *v126;
  NSObject *v127;
  os_log_type_t v128;
  const char *v129;
  char *backtrace_string;
  _BOOL4 v131;
  int v132;
  char v133;
  os_log_type_t v134;
  os_log_type_t type[16];
  _BYTE buf[40];
  uint64_t (*v137)(_DWORD *, int);
  uuid_t out;
  char v139;
  uint64_t v140;

  v140 = *MEMORY[0x1E0C80C00];
  if (a1->handle != &nw_protocol_ref_counted_handle)
  {
    __nwlog_obj();
    *(_DWORD *)buf = 136446210;
    *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
    v126 = (char *)_os_log_send_and_compose_impl();
    out[0] = 16;
    type[0] = OS_LOG_TYPE_DEFAULT;
    if (!__nwlog_fault(v126, out, type))
      goto LABEL_302;
    if (out[0] == 17)
    {
      v127 = __nwlog_obj();
      v128 = out[0];
      if (!os_log_type_enabled(v127, (os_log_type_t)out[0]))
        goto LABEL_302;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
      v129 = "%{public}s called with null socket_handler";
    }
    else if (type[0])
    {
      backtrace_string = (char *)__nw_create_backtrace_string();
      v127 = __nwlog_obj();
      v128 = out[0];
      v131 = os_log_type_enabled(v127, (os_log_type_t)out[0]);
      if (backtrace_string)
      {
        if (v131)
        {
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 2082;
          *(_QWORD *)&buf[14] = backtrace_string;
          _os_log_impl(&dword_182FBE000, v127, v128, "%{public}s called with null socket_handler, dumping backtrace:%{public}s", buf, 0x16u);
        }
        free(backtrace_string);
        goto LABEL_302;
      }
      if (!v131)
      {
LABEL_302:
        if (v126)
          free(v126);
        return 0;
      }
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
      v129 = "%{public}s called with null socket_handler, no backtrace";
    }
    else
    {
      v127 = __nwlog_obj();
      v128 = out[0];
      if (!os_log_type_enabled(v127, (os_log_type_t)out[0]))
        goto LABEL_302;
      *(_DWORD *)buf = 136446210;
      *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
      v129 = "%{public}s called with null socket_handler, backtrace limit exceeded";
    }
    _os_log_impl(&dword_182FBE000, v127, v128, v129, buf, 0xCu);
    goto LABEL_302;
  }
  p_output_handler = &a1[1].output_handler;
  identifier = a1[2].identifier;
  if (!identifier)
    goto LABEL_12;
  v4 = *(_QWORD *)&identifier->name[24];
  if (!v4)
    goto LABEL_12;
  v5 = *(uint64_t (**)(nw_protocol_identifier *))(v4 + 120);
  if (!v5)
    goto LABEL_12;
  if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
  {
    v7 = *(_QWORD *)&identifier[2].name[8];
    if (v7)
      *(_QWORD *)&identifier[2].name[8] = v7 + 1;
    v6 = (void *)v5(identifier);
    if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
    {
      v19 = *(_QWORD *)&identifier[2].name[8];
      if (v19)
      {
        v20 = v19 - 1;
        *(_QWORD *)&identifier[2].name[8] = v20;
        if (!v20)
        {
          v21 = *(void (***)(_QWORD))&identifier[1].name[24];
          if (v21)
          {
            *(_QWORD *)&identifier[1].name[24] = 0;
            v21[2](v21);
            _Block_release(v21);
          }
          if ((identifier[1].level & 1) != 0)
          {
            v22 = *(const void **)&identifier[1].name[24];
            if (v22)
              _Block_release(v22);
          }
          free(identifier);
        }
      }
    }
  }
  else
  {
    v6 = (void *)v5(a1[2].identifier);
  }
  if (v6)
    v8 = nw_path_allows_multipath(v6);
  else
LABEL_12:
    v8 = 0;
  handle = (int)a1[4].handle;
  if (handle != 1)
  {
    if (handle != 2)
    {
      if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) == 0)
      {
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v13 = gconnectionLogObj;
        result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
        if (!result)
          return result;
        v15 = (int)a1[4].handle;
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)a1 + 436;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v15;
        v16 = "%{public}s %{public}s Data mode %d unrecognized";
        v17 = v13;
        v18 = 28;
        goto LABEL_73;
      }
      return 0;
    }
    if (!a1[2].callbacks)
    {
      memset(out, 0, sizeof(out));
      uuid_generate_random(out);
      if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
        dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
      v10 = (nw_protocol_callbacks *)nw_protocol_metadata_create((void *)g_tcp_definition, out);
      a1[2].callbacks = v10;
      *(_QWORD *)buf = nw_protocol_socket_get_receive_buffer_size;
      *(_QWORD *)&buf[8] = nw_protocol_socket_get_send_buffer_size;
      *(_QWORD *)&buf[16] = nw_protocol_socket_reset_keepalives;
      *(_QWORD *)&buf[24] = nw_protocol_socket_set_no_delay;
      *(_QWORD *)&buf[32] = nw_protocol_socket_set_no_push;
      v137 = nw_protocol_socket_set_no_wake_from_sleep;
      nw_tcp_set_callbacks(v10, (uint64_t)p_output_handler, (uint64_t)buf);
    }
    v11 = 1;
    if (!identifier)
      goto LABEL_176;
LABEL_45:
    v23 = *(_QWORD *)&identifier->name[24];
    if (!v23)
      goto LABEL_176;
    v24 = *(uint64_t (**)(nw_protocol_identifier *))(v23 + 128);
    if (v24)
    {
      if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
      {
        v26 = *(_QWORD *)&identifier[2].name[8];
        if (v26)
          *(_QWORD *)&identifier[2].name[8] = v26 + 1;
        v25 = (void *)v24(identifier);
        if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
        {
          v37 = *(_QWORD *)&identifier[2].name[8];
          if (v37)
          {
            v38 = v37 - 1;
            *(_QWORD *)&identifier[2].name[8] = v38;
            if (!v38)
            {
              v39 = *(void (***)(_QWORD))&identifier[1].name[24];
              if (v39)
              {
                *(_QWORD *)&identifier[1].name[24] = 0;
                v39[2](v39);
                _Block_release(v39);
              }
              if ((identifier[1].level & 1) != 0)
              {
                v40 = *(const void **)&identifier[1].name[24];
                if (v40)
                  _Block_release(v40);
              }
              free(identifier);
            }
          }
        }
      }
      else
      {
        v25 = (void *)v24(identifier);
      }
      v27 = *(_QWORD *)&identifier->name[24];
      if (v27)
      {
        v28 = *(uint64_t (**)(nw_protocol_identifier *))(v27 + 136);
        if (v28)
        {
LABEL_54:
          if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
          {
            v30 = *(_QWORD *)&identifier[2].name[8];
            if (v30)
              *(_QWORD *)&identifier[2].name[8] = v30 + 1;
            v29 = (void *)v28(identifier);
            if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
            {
              v41 = *(_QWORD *)&identifier[2].name[8];
              if (v41)
              {
                v42 = v41 - 1;
                *(_QWORD *)&identifier[2].name[8] = v42;
                if (!v42)
                {
                  v43 = *(void (***)(_QWORD))&identifier[1].name[24];
                  if (v43)
                  {
                    *(_QWORD *)&identifier[1].name[24] = 0;
                    v43[2](v43);
                    _Block_release(v43);
                  }
                  if ((identifier[1].level & 1) != 0)
                  {
                    v44 = *(const void **)&identifier[1].name[24];
                    if (v44)
                      _Block_release(v44);
                  }
                  free(identifier);
                }
              }
            }
          }
          else
          {
            v29 = (void *)v28(identifier);
          }
          if (v29)
            LODWORD(v29) = nw_endpoint_get_address_family(v29);
          if (v25)
          {
LABEL_62:
            if ((_DWORD)v29 == nw_endpoint_get_address_family(v25))
              goto LABEL_63;
            if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) == 0)
            {
              if (__nwlog_connection_log::onceToken != -1)
                dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
              v35 = gconnectionLogObj;
              result = os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR);
              if (!result)
                return result;
              address_family = nw_endpoint_get_address_family(v25);
              *(_DWORD *)buf = 136446978;
              *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 2082;
              *(_QWORD *)&buf[14] = (char *)a1 + 436;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = address_family;
              *(_WORD *)&buf[28] = 1024;
              *(_DWORD *)&buf[30] = (_DWORD)v29;
              v16 = "%{public}s %{public}s Local endpoint family %d does not match remote endpoint %d";
              v17 = v35;
              v18 = 34;
LABEL_73:
              _os_log_impl(&dword_182FBE000, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
              return 0;
            }
            return 0;
          }
LABEL_63:
          output_handler_high = HIDWORD(a1[4].output_handler);
          if (output_handler_high < 0)
            goto LABEL_177;
LABEL_64:
          *(_DWORD *)out = 1;
          if (!setsockopt(output_handler_high, 0xFFFF, 4130, out, 4u))
            goto LABEL_108;
          v32 = p_output_handler;
          v33 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          v34 = gLogObj;
          if (v33 == 22)
          {
            p_output_handler = v32;
            if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446466;
              *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = 22;
              _os_log_impl(&dword_182FBE000, v34, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_NOSIGPIPE failed %{darwin.errno}d", buf, 0x12u);
            }
            goto LABEL_108;
          }
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v33;
          v132 = 18;
          v45 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v134 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v45, type, &v134))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v46 = gLogObj;
              v47 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v33;
                v48 = "%{public}s setsockopt SO_NOSIGPIPE failed %{darwin.errno}d";
LABEL_104:
                _os_log_impl(&dword_182FBE000, v46, v47, v48, buf, 0x12u);
              }
            }
            else if (v134)
            {
              v49 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v46 = gLogObj;
              v47 = type[0];
              v50 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (v49)
              {
                if (v50)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v33;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v49;
                  _os_log_impl(&dword_182FBE000, v46, v47, "%{public}s setsockopt SO_NOSIGPIPE failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                }
                free(v49);
                goto LABEL_105;
              }
              if (v50)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v33;
                v48 = "%{public}s setsockopt SO_NOSIGPIPE failed %{darwin.errno}d, no backtrace";
                goto LABEL_104;
              }
            }
            else
            {
              v46 = __nwlog_obj();
              v47 = type[0];
              if (os_log_type_enabled(v46, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v33;
                v48 = "%{public}s setsockopt SO_NOSIGPIPE failed %{darwin.errno}d, backtrace limit exceeded";
                goto LABEL_104;
              }
            }
          }
LABEL_105:
          if (v45)
            free(v45);
          p_output_handler = v32;
LABEL_108:
          if ((ioctl(HIDWORD(a1[4].output_handler), 0x8004667EuLL, out, v132) & 0x80000000) == 0)
          {
            if (uuid_is_null(a1->flow_id) || !setsockopt(HIDWORD(a1[4].output_handler), 0xFFFF, 4369, a1, 0x10u))
            {
LABEL_110:
              if (identifier)
              {
                v51 = *(_QWORD *)&identifier->name[24];
                if (v51)
                {
                  v52 = *(uint64_t (**)(nw_protocol_identifier *))(v51 + 112);
                  if (v52)
                  {
                    if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
                    {
                      v62 = *(_QWORD *)&identifier[2].name[8];
                      if (v62)
                        *(_QWORD *)&identifier[2].name[8] = v62 + 1;
                      v53 = (void *)v52(identifier);
                      if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
                      {
                        v71 = *(_QWORD *)&identifier[2].name[8];
                        if (v71)
                        {
                          v72 = v71 - 1;
                          *(_QWORD *)&identifier[2].name[8] = v72;
                          if (!v72)
                          {
                            v73 = *(void (***)(_QWORD))&identifier[1].name[24];
                            if (v73)
                            {
                              *(_QWORD *)&identifier[1].name[24] = 0;
                              v73[2](v73);
                              _Block_release(v73);
                            }
                            if ((identifier[1].level & 1) != 0)
                            {
                              v74 = *(const void **)&identifier[1].name[24];
                              if (v74)
                                _Block_release(v74);
                            }
                            free(identifier);
                          }
                        }
                      }
                    }
                    else
                    {
                      v53 = (void *)v52(identifier);
                    }
                    if (v53)
                    {
                      v63 = v53;
                      v64 = v63[19];

                      if (v64)
                      {
                        v65 = (id *)v64;
                        v66 = v65[3];

                        os_release(v65);
                        if (v66)
                        {
                          v67 = v66;
                          if (nw_protocol_setup_tcp_definition(void)::onceToken != -1)
                            dispatch_once(&nw_protocol_setup_tcp_definition(void)::onceToken, &__block_literal_global_62963);
                          v68 = nw_protocol_options_matches_definition(v67, (void *)g_tcp_definition);

                          if (v68)
                            nw_socket_set_bidirectional_tcp_sockopts((uint64_t)p_output_handler, v67);
                          os_release(v67);
                        }
                      }
                    }
                  }
                }
              }
              return 1;
            }
            v59 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
            if (__nwlog_connection_log::onceToken != -1)
              dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
            v60 = gconnectionLogObj;
            if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 136446722;
              *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
              *(_WORD *)&buf[12] = 2080;
              *(_QWORD *)&buf[14] = (char *)a1 + 436;
              *(_WORD *)&buf[22] = 1024;
              *(_DWORD *)&buf[24] = v59;
              _os_log_impl(&dword_182FBE000, v60, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d", buf, 0x1Cu);
            }
            if (v59 == 2 || v59 == 22)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v61 = gLogObj;
              if (os_log_type_enabled((os_log_t)gLogObj, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v59;
                _os_log_impl(&dword_182FBE000, v61, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d", buf, 0x12u);
              }
              goto LABEL_110;
            }
            __nwlog_obj();
            *(_DWORD *)buf = 136446466;
            *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v59;
            v75 = (char *)_os_log_send_and_compose_impl();
            type[0] = OS_LOG_TYPE_ERROR;
            v134 = OS_LOG_TYPE_DEFAULT;
            if ((__nwlog_fault(v75, type, &v134) & 1) != 0)
            {
              if (type[0] == OS_LOG_TYPE_FAULT)
              {
                v76 = __nwlog_obj();
                v77 = type[0];
                if (!os_log_type_enabled(v76, type[0]))
                  goto LABEL_174;
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v59;
                v78 = "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d";
                goto LABEL_173;
              }
              if (v134 == OS_LOG_TYPE_DEFAULT)
              {
                v76 = __nwlog_obj();
                v77 = type[0];
                if (!os_log_type_enabled(v76, type[0]))
                  goto LABEL_174;
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v59;
                v78 = "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d, backtrace limit exceeded";
                goto LABEL_173;
              }
              v80 = (char *)__nw_create_backtrace_string();
              v76 = __nwlog_obj();
              v77 = type[0];
              v81 = os_log_type_enabled(v76, type[0]);
              if (v80)
              {
                if (v81)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v59;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v80;
                  _os_log_impl(&dword_182FBE000, v76, v77, "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                }
                free(v80);
                goto LABEL_174;
              }
              if (v81)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v59;
                v78 = "%{public}s setsockopt SO_NECP_CLIENTUUID failed %{darwin.errno}d, no backtrace";
LABEL_173:
                _os_log_impl(&dword_182FBE000, v76, v77, v78, buf, 0x12u);
              }
            }
LABEL_174:
            if (v75)
              free(v75);
            goto LABEL_110;
          }
          v54 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
          pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
          networkd_settings_init();
          *(_DWORD *)buf = 136446466;
          *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v54;
          v55 = (char *)_os_log_send_and_compose_impl();
          type[0] = OS_LOG_TYPE_ERROR;
          v134 = OS_LOG_TYPE_DEFAULT;
          if (__nwlog_fault(v55, type, &v134))
          {
            if (type[0] == OS_LOG_TYPE_FAULT)
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v56 = gLogObj;
              v57 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v54;
                v58 = "%{public}s FIONBIO failed %{darwin.errno}d";
LABEL_160:
                _os_log_impl(&dword_182FBE000, v56, v57, v58, buf, 0x12u);
              }
            }
            else if (v134)
            {
              v69 = (char *)__nw_create_backtrace_string();
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v56 = gLogObj;
              v57 = type[0];
              v70 = os_log_type_enabled((os_log_t)gLogObj, type[0]);
              if (v69)
              {
                if (v70)
                {
                  *(_DWORD *)buf = 136446722;
                  *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v54;
                  *(_WORD *)&buf[18] = 2082;
                  *(_QWORD *)&buf[20] = v69;
                  _os_log_impl(&dword_182FBE000, v56, v57, "%{public}s FIONBIO failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
                }
                free(v69);
                goto LABEL_161;
              }
              if (v70)
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v54;
                v58 = "%{public}s FIONBIO failed %{darwin.errno}d, no backtrace";
                goto LABEL_160;
              }
            }
            else
            {
              pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
              networkd_settings_init();
              v56 = gLogObj;
              v57 = type[0];
              if (os_log_type_enabled((os_log_t)gLogObj, type[0]))
              {
                *(_DWORD *)buf = 136446466;
                *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
                *(_WORD *)&buf[12] = 1024;
                *(_DWORD *)&buf[14] = v54;
                v58 = "%{public}s FIONBIO failed %{darwin.errno}d, backtrace limit exceeded";
                goto LABEL_160;
              }
            }
          }
LABEL_161:
          if (v55)
            free(v55);
          v79 = (uint64_t)p_output_handler;
          goto LABEL_240;
        }
      }
    }
    else
    {
      v25 = 0;
      v28 = *(uint64_t (**)(nw_protocol_identifier *))(v23 + 136);
      if (v28)
        goto LABEL_54;
    }
    LODWORD(v29) = 0;
    if (v25)
      goto LABEL_62;
    goto LABEL_63;
  }
  if (!v8)
  {
    v11 = 2;
    if (!identifier)
      goto LABEL_176;
    goto LABEL_45;
  }
  if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) != 0)
  {
    v8 = 0;
    v11 = 2;
    if (!identifier)
      goto LABEL_176;
    goto LABEL_45;
  }
  if (__nwlog_connection_log::onceToken != -1)
    dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
  v12 = gconnectionLogObj;
  v11 = 2;
  if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
    *(_WORD *)&buf[12] = 2082;
    *(_QWORD *)&buf[14] = (char *)a1 + 436;
    _os_log_impl(&dword_182FBE000, v12, OS_LOG_TYPE_DEBUG, "%{public}s %{public}s Multipath not supported for datagram connections", buf, 0x16u);
  }
  v8 = 0;
  if (identifier)
    goto LABEL_45;
LABEL_176:
  LODWORD(v29) = 0;
  output_handler_high = HIDWORD(a1[4].output_handler);
  if ((output_handler_high & 0x80000000) == 0)
    goto LABEL_64;
LABEL_177:
  LOBYTE(a1[6].default_input_handler) = (_BYTE)v29;
  if (v8)
  {
    v82 = socket(39, v11, 0);
    HIDWORD(a1[4].output_handler) = v82;
    if ((v82 & 0x80000000) == 0)
    {
      HIBYTE(a1[6].handle) = (*(unsigned __int16 *)((char *)&a1[6].handle + 5) | (HIBYTE(a1[6].handle) << 16) | 0x20000u) >> 16;
      goto LABEL_187;
    }
    if (**(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8) != 43)
    {
LABEL_209:
      v54 = **(unsigned int **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v95 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
      {
        *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
        *(_WORD *)&buf[12] = 2080;
        *(_DWORD *)buf = 136447234;
        if (v8)
          v96 = 39;
        else
          v96 = (int)v29;
        *(_QWORD *)&buf[14] = (char *)a1 + 436;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v96;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v11;
        *(_WORD *)&buf[34] = 1024;
        *(_DWORD *)&buf[36] = v54;
        _os_log_impl(&dword_182FBE000, v95, OS_LOG_TYPE_ERROR, "%{public}s %s Failed to create socket(%d,%d) %{darwin.errno}d", buf, 0x28u);
      }
      else if (v8)
      {
        v96 = 39;
      }
      else
      {
        v96 = (int)v29;
      }
      pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
      networkd_settings_init();
      *(_DWORD *)buf = 136446978;
      *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v96;
      *(_WORD *)&buf[18] = 1024;
      *(_DWORD *)&buf[20] = v11;
      *(_WORD *)&buf[24] = 1024;
      *(_DWORD *)&buf[26] = v54;
      v97 = (char *)_os_log_send_and_compose_impl();
      out[0] = 16;
      type[0] = OS_LOG_TYPE_DEFAULT;
      if (!__nwlog_fault(v97, out, type))
        goto LABEL_237;
      if (out[0] == 17)
      {
        pthread_once(&nwlog_legacy_init(void)::init_once, nwlog_legacy_init_once);
        networkd_settings_init();
        v98 = gLogObj;
        v99 = out[0];
        if (os_log_type_enabled((os_log_t)gLogObj, (os_log_type_t)out[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v96;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v11;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v54;
          v100 = "%{public}s Failed to create socket(%d,%d) %{darwin.errno}d";
LABEL_236:
          _os_log_impl(&dword_182FBE000, v98, v99, v100, buf, 0x1Eu);
        }
      }
      else if (type[0])
      {
        v101 = (char *)__nw_create_backtrace_string();
        v98 = __nwlog_obj();
        v99 = out[0];
        v102 = os_log_type_enabled(v98, (os_log_type_t)out[0]);
        if (v101)
        {
          if (v102)
          {
            *(_DWORD *)buf = 136447234;
            *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v96;
            *(_WORD *)&buf[18] = 1024;
            *(_DWORD *)&buf[20] = v11;
            *(_WORD *)&buf[24] = 1024;
            *(_DWORD *)&buf[26] = v54;
            *(_WORD *)&buf[30] = 2082;
            *(_QWORD *)&buf[32] = v101;
            _os_log_impl(&dword_182FBE000, v98, v99, "%{public}s Failed to create socket(%d,%d) %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x28u);
          }
          free(v101);
          goto LABEL_237;
        }
        if (v102)
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v96;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v11;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v54;
          v100 = "%{public}s Failed to create socket(%d,%d) %{darwin.errno}d, no backtrace";
          goto LABEL_236;
        }
      }
      else
      {
        v98 = __nwlog_obj();
        v99 = out[0];
        if (os_log_type_enabled(v98, (os_log_type_t)out[0]))
        {
          *(_DWORD *)buf = 136446978;
          *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v96;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = v11;
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = v54;
          v100 = "%{public}s Failed to create socket(%d,%d) %{darwin.errno}d, backtrace limit exceeded";
          goto LABEL_236;
        }
      }
LABEL_237:
      if (v97)
        free(v97);
      v79 = (uint64_t)p_output_handler;
LABEL_240:
      nw_socket_internal_error(v79, v54);
      return 0;
    }
    if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v83 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)a1 + 436;
        _os_log_impl(&dword_182FBE000, v83, OS_LOG_TYPE_DEFAULT, "%{public}s %{public}s The kernel does not support MPTCP, using regular TCP", buf, 0x16u);
      }
    }
  }
  v82 = socket((int)v29, v11, 0);
  HIDWORD(a1[4].output_handler) = v82;
  if (v82 < 0)
    goto LABEL_209;
LABEL_187:
  v84 = (nw_protocol *)nw_fd_wrapper_create(v82);
  v85 = (char)a1[2].handle;
  if ((v85 & 1) != 0)
  {
    output_handler = a1[2].output_handler;
    if (output_handler)
    {
      os_release(output_handler);
      v85 = (char)a1[2].handle;
    }
  }
  a1[2].output_handler = v84;
  LOBYTE(a1[2].handle) = v85 | 1;
  if ((nw_socket_set_common_sockopts(a1) & 1) != 0)
  {
    v87 = (_WORD *)((char *)&a1[6].handle + 5);
    if ((*(_WORD *)((_BYTE *)&a1[6].handle + 5) & 0x100) == 0)
      goto LABEL_253;
    memset(type, 0, sizeof(type));
    nw_protocol_get_flow_id(a1, type);
    v139 = -106;
    *(_OWORD *)out = *(_OWORD *)type;
    if ((*v87 & 0x80) == 0)
    {
      if (__nwlog_connection_log::onceToken != -1)
        dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
      v88 = gconnectionLogObj;
      if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446978;
        *(_QWORD *)&buf[4] = "nw_socket_set_mpkl_uuid";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)a1 + 436;
        *(_WORD *)&buf[22] = 1042;
        *(_DWORD *)&buf[24] = 16;
        *(_WORD *)&buf[28] = 2098;
        *(_QWORD *)&buf[30] = type;
        _os_log_impl(&dword_182FBE000, v88, OS_LOG_TYPE_INFO, "%{public}s %{public}s Setting UUID %{public,uuid_t}.16P for multilayer packet logging", buf, 0x26u);
      }
    }
    if (!setsockopt(HIDWORD(a1[4].output_handler), 0xFFFF, 4386, out, 0x11u))
    {
      if (!identifier)
        goto LABEL_306;
      v109 = *(_QWORD *)&identifier->name[24];
      if (!v109)
        goto LABEL_306;
      v110 = *(uint64_t (**)(nw_protocol_identifier *))(v109 + 112);
      if (!v110)
        goto LABEL_306;
LABEL_253:
      if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
      {
        v112 = *(_QWORD *)&identifier[2].name[8];
        if (v112)
          *(_QWORD *)&identifier[2].name[8] = v112 + 1;
        v111 = (void *)v110(identifier);
        if (*(_UNKNOWN **)identifier[1].name == &nw_protocol_ref_counted_handle)
        {
          v122 = *(_QWORD *)&identifier[2].name[8];
          if (v122)
          {
            v123 = v122 - 1;
            *(_QWORD *)&identifier[2].name[8] = v123;
            if (!v123)
            {
              v124 = *(void (***)(_QWORD))&identifier[1].name[24];
              if (v124)
              {
                *(_QWORD *)&identifier[1].name[24] = 0;
                v124[2](v124);
                _Block_release(v124);
              }
              if ((identifier[1].level & 1) != 0)
              {
                v125 = *(const void **)&identifier[1].name[24];
                if (v125)
                  _Block_release(v125);
              }
              free(identifier);
            }
          }
        }
      }
      else
      {
        v111 = (void *)v110(identifier);
      }
      if (v111
        && (v113 = v111, v114 = (*(_WORD *)(v113[13] + 100) & 0x10) == 0, v113, v114))
      {
        if ((nw_fd_wrapper_guard(a1[2].output_handler) & 1) != 0 || (*v87 & 0x80) != 0)
          return 1;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v115 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
          return 1;
        v116 = HIDWORD(a1[4].output_handler);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)a1 + 436;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v116;
        v117 = "%{public}s %{public}s Failed to guard socket fd %d";
        v118 = v115;
        v119 = OS_LOG_TYPE_ERROR;
      }
      else
      {
LABEL_306:
        if ((*v87 & 0x80) != 0)
          return 1;
        if (__nwlog_connection_log::onceToken != -1)
          dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
        v120 = gconnectionLogObj;
        if (!os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_DEFAULT))
          return 1;
        v121 = HIDWORD(a1[4].output_handler);
        *(_DWORD *)buf = 136446722;
        *(_QWORD *)&buf[4] = "nw_socket_initialize_socket";
        *(_WORD *)&buf[12] = 2082;
        *(_QWORD *)&buf[14] = (char *)a1 + 436;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&buf[24] = v121;
        v117 = "%{public}s %{public}s Not guarding fd %d";
        v118 = v120;
        v119 = OS_LOG_TYPE_DEFAULT;
      }
      _os_log_impl(&dword_182FBE000, v118, v119, v117, buf, 0x1Cu);
      return 1;
    }
    v89 = **(_DWORD **)(_ReadStatusReg(ARM64_SYSREG(3, 3, 13, 0, 3)) + 8);
    if (__nwlog_connection_log::onceToken != -1)
      dispatch_once(&__nwlog_connection_log::onceToken, &__block_literal_global_24_44184);
    v90 = gconnectionLogObj;
    if (os_log_type_enabled((os_log_t)gconnectionLogObj, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136446722;
      *(_QWORD *)&buf[4] = "nw_socket_set_mpkl_uuid";
      *(_WORD *)&buf[12] = 2080;
      *(_QWORD *)&buf[14] = (char *)a1 + 436;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&buf[24] = v89;
      _os_log_impl(&dword_182FBE000, v90, OS_LOG_TYPE_ERROR, "%{public}s %s setsockopt SCM_MPKL_SEND_INFO failed %{darwin.errno}d", buf, 0x1Cu);
    }
    v91 = __nwlog_obj();
    v92 = v91;
    if (v89 == 22)
    {
      if (os_log_type_enabled(v91, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_socket_set_mpkl_uuid";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = 22;
        _os_log_impl(&dword_182FBE000, v92, OS_LOG_TYPE_ERROR, "%{public}s setsockopt SCM_MPKL_SEND_INFO failed %{darwin.errno}d", buf, 0x12u);
      }
      goto LABEL_253;
    }
    *(_DWORD *)buf = 136446466;
    *(_QWORD *)&buf[4] = "nw_socket_set_mpkl_uuid";
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = v89;
    v103 = (char *)_os_log_send_and_compose_impl();
    v134 = OS_LOG_TYPE_ERROR;
    v133 = 0;
    if (__nwlog_fault(v103, &v134, &v133))
    {
      if (v134 == OS_LOG_TYPE_FAULT)
      {
        v104 = __nwlog_obj();
        v105 = v134;
        if (!os_log_type_enabled(v104, v134))
          goto LABEL_251;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_socket_set_mpkl_uuid";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v89;
        v106 = "%{public}s setsockopt SCM_MPKL_SEND_INFO failed %{darwin.errno}d";
        goto LABEL_250;
      }
      if (!v133)
      {
        v104 = __nwlog_obj();
        v105 = v134;
        if (!os_log_type_enabled(v104, v134))
          goto LABEL_251;
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_socket_set_mpkl_uuid";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v89;
        v106 = "%{public}s setsockopt SCM_MPKL_SEND_INFO failed %{darwin.errno}d, backtrace limit exceeded";
        goto LABEL_250;
      }
      v107 = (char *)__nw_create_backtrace_string();
      v104 = __nwlog_obj();
      v105 = v134;
      v108 = os_log_type_enabled(v104, v134);
      if (v107)
      {
        if (v108)
        {
          *(_DWORD *)buf = 136446722;
          *(_QWORD *)&buf[4] = "nw_socket_set_mpkl_uuid";
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v89;
          *(_WORD *)&buf[18] = 2082;
          *(_QWORD *)&buf[20] = v107;
          _os_log_impl(&dword_182FBE000, v104, v105, "%{public}s setsockopt SCM_MPKL_SEND_INFO failed %{darwin.errno}d, dumping backtrace:%{public}s", buf, 0x1Cu);
        }
        free(v107);
        goto LABEL_251;
      }
      if (v108)
      {
        *(_DWORD *)buf = 136446466;
        *(_QWORD *)&buf[4] = "nw_socket_set_mpkl_uuid";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v89;
        v106 = "%{public}s setsockopt SCM_MPKL_SEND_INFO failed %{darwin.errno}d, no backtrace";
LABEL_250:
        _os_log_impl(&dword_182FBE000, v104, v105, v106, buf, 0x12u);
      }
    }
LABEL_251:
    if (v103)
      free(v103);
    goto LABEL_253;
  }
  v93 = (char)a1[2].handle;
  if ((v93 & 1) != 0)
  {
    v94 = a1[2].output_handler;
    if (v94)
    {
      os_release(v94);
      v93 = (char)a1[2].handle;
    }
  }
  result = 0;
  a1[2].output_handler = 0;
  LOBYTE(a1[2].handle) = v93 | 1;
  HIDWORD(a1[4].output_handler) = -1;
  return result;
}

